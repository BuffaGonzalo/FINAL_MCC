
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebcc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800ed6c  0800ed6c  0000fd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f444  0800f444  00011184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f444  0800f444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f44c  0800f44c  00011184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f44c  0800f44c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f450  0800f450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800f454  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  20000184  0800f5d8  00011184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c18  0800f5d8  00011c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aabe  00000000  00000000  000111b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434c  00000000  00000000  0002bc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  0002ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001be0f  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ff5b  00000000  00000000  0004d63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a004c  00000000  00000000  0006d59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010d5e6  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000012c7  00000000  00000000  0010d629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cf0  00000000  00000000  0010e8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001155e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed54 	.word	0x0800ed54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800ed54 	.word	0x0800ed54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e00a      	b.n	8000dbc <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	ddf1      	ble.n	8000da6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	20000438 	.word	0x20000438
 8000dd4:	20000448 	.word	0x20000448

08000dd8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000675 	.word	0x20000675

08000df8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000676 	.word	0x20000676

08000e18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d116      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e34:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b28      	cmp	r3, #40	@ 0x28
 8000e3c:	d107      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000e44:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e46:	7813      	ldrb	r3, [r2, #0]
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4906      	ldr	r1, [pc, #24]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e54:	f002 fd98 	bl	8003988 <HAL_ADC_Start_DMA>
	}

	if(htim->Instance ==TIM3){ //100ms
		//ONDISPLAY=TRUE;
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40010000 	.word	0x40010000
 8000e64:	20000434 	.word	0x20000434
 8000e68:	20000674 	.word	0x20000674
 8000e6c:	20000438 	.word	0x20000438
 8000e70:	200001a0 	.word	0x200001a0

08000e74 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e018      	b.n	8000eb6 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	441a      	add	r2, r3
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <USBRxData+0x58>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <USBRxData+0x58>)
 8000e90:	795b      	ldrb	r3, [r3, #5]
 8000e92:	1c58      	adds	r0, r3, #1
 8000e94:	b2c4      	uxtb	r4, r0
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <USBRxData+0x58>)
 8000e98:	7144      	strb	r4, [r0, #5]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <USBRxData+0x58>)
 8000ea2:	795a      	ldrb	r2, [r3, #5]
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <USBRxData+0x58>)
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <USBRxData+0x58>)
 8000eae:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8e2      	bhi.n	8000e84 <USBRxData+0x10>
	}

}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc90      	pop	{r4, r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000464 	.word	0x20000464

08000ed0 <USBTask>:

void USBTask() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0c2      	sub	sp, #264	@ 0x108
 8000ed4:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000ed6:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <USBTask+0x90>)
 8000ed8:	791a      	ldrb	r2, [r3, #4]
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <USBTask+0x90>)
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d039      	beq.n	8000f56 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000ee2:	481f      	ldr	r0, [pc, #124]	@ (8000f60 <USBTask+0x90>)
 8000ee4:	f002 fa06 	bl	80032f4 <unerPrtcl_DecodeHeader>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000eee:	491d      	ldr	r1, [pc, #116]	@ (8000f64 <USBTask+0x94>)
 8000ef0:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <USBTask+0x90>)
 8000ef2:	f000 f839 	bl	8000f68 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000efc:	e01d      	b.n	8000f3a <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <USBTask+0x94>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <USBTask+0x94>)
 8000f04:	7a1b      	ldrb	r3, [r3, #8]
 8000f06:	1c59      	adds	r1, r3, #1
 8000f08:	b2c8      	uxtb	r0, r1
 8000f0a:	4916      	ldr	r1, [pc, #88]	@ (8000f64 <USBTask+0x94>)
 8000f0c:	7208      	strb	r0, [r1, #8]
 8000f0e:	441a      	add	r2, r3
 8000f10:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f14:	7811      	ldrb	r1, [r2, #0]
 8000f16:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000f1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000f1e:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <USBTask+0x94>)
 8000f22:	7a1a      	ldrb	r2, [r3, #8]
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <USBTask+0x94>)
 8000f26:	799b      	ldrb	r3, [r3, #6]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <USBTask+0x94>)
 8000f2e:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000f30:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <USBTask+0x94>)
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3db      	bcc.n	8000efe <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <USBTask+0x94>)
 8000f48:	79db      	ldrb	r3, [r3, #7]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00c fde9 	bl	800db28 <CDC_Transmit_FS>
	}

}
 8000f56:	bf00      	nop
 8000f58:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000464 	.word	0x20000464
 8000f64:	20000458 	.word	0x20000458

08000f68 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	7a12      	ldrb	r2, [r2, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	3bf0      	subs	r3, #240	@ 0xf0
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	f200 8129 	bhi.w	80011d8 <decodeCommand+0x270>
 8000f86:	a201      	add	r2, pc, #4	@ (adr r2, 8000f8c <decodeCommand+0x24>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	08000f9d 	.word	0x08000f9d
 8000f90:	08000fbd 	.word	0x08000fbd
 8000f94:	08000fdd 	.word	0x08000fdd
 8000f98:	080010c1 	.word	0x080010c1
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	21f0      	movs	r1, #240	@ 0xf0
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f002 f885 	bl	80030b0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000fa6:	210d      	movs	r1, #13
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f002 f930 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	7a5b      	ldrb	r3, [r3, #9]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f002 f92a 	bl	800320e <unerPrtcl_PutByteOnTx>
		break;
 8000fba:	e123      	b.n	8001204 <decodeCommand+0x29c>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000fbc:	220d      	movs	r2, #13
 8000fbe:	21f1      	movs	r1, #241	@ 0xf1
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f002 f875 	bl	80030b0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000fc6:	4991      	ldr	r1, [pc, #580]	@ (800120c <decodeCommand+0x2a4>)
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f002 f94e 	bl	800326a <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	7a5b      	ldrb	r3, [r3, #9]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f002 f91a 	bl	800320e <unerPrtcl_PutByteOnTx>
		break;
 8000fda:	e113      	b.n	8001204 <decodeCommand+0x29c>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000fdc:	220d      	movs	r2, #13
 8000fde:	21f2      	movs	r1, #242	@ 0xf2
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f002 f865 	bl	80030b0 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 8000fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8001210 <decodeCommand+0x2a8>)
 8000fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fec:	4b89      	ldr	r3, [pc, #548]	@ (8001214 <decodeCommand+0x2ac>)
 8000fee:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000ff0:	4b88      	ldr	r3, [pc, #544]	@ (8001214 <decodeCommand+0x2ac>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	f002 f909 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000ffc:	4b85      	ldr	r3, [pc, #532]	@ (8001214 <decodeCommand+0x2ac>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	4619      	mov	r1, r3
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f002 f903 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 8001008:	4b83      	ldr	r3, [pc, #524]	@ (8001218 <decodeCommand+0x2b0>)
 800100a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800100e:	4b81      	ldr	r3, [pc, #516]	@ (8001214 <decodeCommand+0x2ac>)
 8001010:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001012:	4b80      	ldr	r3, [pc, #512]	@ (8001214 <decodeCommand+0x2ac>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	6838      	ldr	r0, [r7, #0]
 800101a:	f002 f8f8 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800101e:	4b7d      	ldr	r3, [pc, #500]	@ (8001214 <decodeCommand+0x2ac>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	4619      	mov	r1, r3
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f002 f8f2 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 800102a:	4b7c      	ldr	r3, [pc, #496]	@ (800121c <decodeCommand+0x2b4>)
 800102c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001030:	4b78      	ldr	r3, [pc, #480]	@ (8001214 <decodeCommand+0x2ac>)
 8001032:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001034:	4b77      	ldr	r3, [pc, #476]	@ (8001214 <decodeCommand+0x2ac>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f002 f8e7 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001040:	4b74      	ldr	r3, [pc, #464]	@ (8001214 <decodeCommand+0x2ac>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	4619      	mov	r1, r3
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f002 f8e1 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 800104c:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <decodeCommand+0x2b8>)
 800104e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001052:	4b70      	ldr	r3, [pc, #448]	@ (8001214 <decodeCommand+0x2ac>)
 8001054:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001056:	4b6f      	ldr	r3, [pc, #444]	@ (8001214 <decodeCommand+0x2ac>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f002 f8d6 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001062:	4b6c      	ldr	r3, [pc, #432]	@ (8001214 <decodeCommand+0x2ac>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	4619      	mov	r1, r3
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f002 f8d0 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 800106e:	4b6d      	ldr	r3, [pc, #436]	@ (8001224 <decodeCommand+0x2bc>)
 8001070:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001074:	4b67      	ldr	r3, [pc, #412]	@ (8001214 <decodeCommand+0x2ac>)
 8001076:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001078:	4b66      	ldr	r3, [pc, #408]	@ (8001214 <decodeCommand+0x2ac>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f002 f8c5 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001084:	4b63      	ldr	r3, [pc, #396]	@ (8001214 <decodeCommand+0x2ac>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	4619      	mov	r1, r3
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f002 f8bf 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 8001090:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <decodeCommand+0x2c0>)
 8001092:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <decodeCommand+0x2ac>)
 8001098:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800109a:	4b5e      	ldr	r3, [pc, #376]	@ (8001214 <decodeCommand+0x2ac>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f002 f8b4 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001214 <decodeCommand+0x2ac>)
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	4619      	mov	r1, r3
 80010ac:	6838      	ldr	r0, [r7, #0]
 80010ae:	f002 f8ae 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	7a5b      	ldrb	r3, [r3, #9]
 80010b6:	4619      	mov	r1, r3
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f002 f8a8 	bl	800320e <unerPrtcl_PutByteOnTx>
		break;
 80010be:	e0a1      	b.n	8001204 <decodeCommand+0x29c>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 80010c0:	2211      	movs	r2, #17
 80010c2:	21f3      	movs	r1, #243	@ 0xf3
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f001 fff3 	bl	80030b0 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <decodeCommand+0x2c4>)
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	4b51      	ldr	r3, [pc, #324]	@ (8001214 <decodeCommand+0x2ac>)
 80010d0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010d2:	4b50      	ldr	r3, [pc, #320]	@ (8001214 <decodeCommand+0x2ac>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f002 f898 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010de:	4b4d      	ldr	r3, [pc, #308]	@ (8001214 <decodeCommand+0x2ac>)
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	4619      	mov	r1, r3
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f002 f892 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <decodeCommand+0x2c4>)
 80010ec:	885a      	ldrh	r2, [r3, #2]
 80010ee:	4b49      	ldr	r3, [pc, #292]	@ (8001214 <decodeCommand+0x2ac>)
 80010f0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010f2:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <decodeCommand+0x2ac>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f002 f888 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010fe:	4b45      	ldr	r3, [pc, #276]	@ (8001214 <decodeCommand+0x2ac>)
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	4619      	mov	r1, r3
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f002 f882 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 800110a:	4b48      	ldr	r3, [pc, #288]	@ (800122c <decodeCommand+0x2c4>)
 800110c:	889a      	ldrh	r2, [r3, #4]
 800110e:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <decodeCommand+0x2ac>)
 8001110:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001112:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <decodeCommand+0x2ac>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f002 f878 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800111e:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <decodeCommand+0x2ac>)
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	4619      	mov	r1, r3
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f002 f872 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 800112a:	4b40      	ldr	r3, [pc, #256]	@ (800122c <decodeCommand+0x2c4>)
 800112c:	88da      	ldrh	r2, [r3, #6]
 800112e:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <decodeCommand+0x2ac>)
 8001130:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001132:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <decodeCommand+0x2ac>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f002 f868 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800113e:	4b35      	ldr	r3, [pc, #212]	@ (8001214 <decodeCommand+0x2ac>)
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	4619      	mov	r1, r3
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f002 f862 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 800114a:	4b38      	ldr	r3, [pc, #224]	@ (800122c <decodeCommand+0x2c4>)
 800114c:	891a      	ldrh	r2, [r3, #8]
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <decodeCommand+0x2ac>)
 8001150:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001152:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <decodeCommand+0x2ac>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f002 f858 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800115e:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <decodeCommand+0x2ac>)
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	4619      	mov	r1, r3
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f002 f852 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 800116a:	4b30      	ldr	r3, [pc, #192]	@ (800122c <decodeCommand+0x2c4>)
 800116c:	895a      	ldrh	r2, [r3, #10]
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <decodeCommand+0x2ac>)
 8001170:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001172:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <decodeCommand+0x2ac>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f002 f848 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <decodeCommand+0x2ac>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	4619      	mov	r1, r3
 8001184:	6838      	ldr	r0, [r7, #0]
 8001186:	f002 f842 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 800118a:	4b28      	ldr	r3, [pc, #160]	@ (800122c <decodeCommand+0x2c4>)
 800118c:	899a      	ldrh	r2, [r3, #12]
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <decodeCommand+0x2ac>)
 8001190:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <decodeCommand+0x2ac>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f002 f838 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <decodeCommand+0x2ac>)
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	4619      	mov	r1, r3
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f002 f832 	bl	800320e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <decodeCommand+0x2c4>)
 80011ac:	89da      	ldrh	r2, [r3, #14]
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <decodeCommand+0x2ac>)
 80011b0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <decodeCommand+0x2ac>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f002 f828 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <decodeCommand+0x2ac>)
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	4619      	mov	r1, r3
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f002 f822 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	7a5b      	ldrb	r3, [r3, #9]
 80011ce:	4619      	mov	r1, r3
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f002 f81c 	bl	800320e <unerPrtcl_PutByteOnTx>
		break;
 80011d6:	e015      	b.n	8001204 <decodeCommand+0x29c>
		break;
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	7a12      	ldrb	r2, [r2, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2202      	movs	r2, #2
 80011e6:	4619      	mov	r1, r3
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f001 ff61 	bl	80030b0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 80011ee:	21ff      	movs	r1, #255	@ 0xff
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f002 f80c 	bl	800320e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	7a5b      	ldrb	r3, [r3, #9]
 80011fa:	4619      	mov	r1, r3
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f002 f806 	bl	800320e <unerPrtcl_PutByteOnTx>
		break;
 8001202:	bf00      	nop
	}
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0800f3e0 	.word	0x0800f3e0
 8001210:	20000678 	.word	0x20000678
 8001214:	20000670 	.word	0x20000670
 8001218:	2000067a 	.word	0x2000067a
 800121c:	2000067c 	.word	0x2000067c
 8001220:	2000067e 	.word	0x2000067e
 8001224:	20000680 	.word	0x20000680
 8001228:	20000682 	.word	0x20000682
 800122c:	20000448 	.word	0x20000448

08001230 <do10ms>:

void do10ms() {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	if (IS10MS) {
 8001234:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <do10ms+0x80>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d034      	beq.n	80012ac <do10ms+0x7c>
		IS10MS = FALSE;
 8001242:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <do10ms+0x80>)
 8001244:	7813      	ldrb	r3, [r2, #0]
 8001246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800124a:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <do10ms+0x84>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3b01      	subs	r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <do10ms+0x84>)
 8001256:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <do10ms+0x88>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <do10ms+0x88>)
 8001262:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 8001264:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <do10ms+0x88>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10c      	bne.n	8001286 <do10ms+0x56>
			tmo20ms = 2;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <do10ms+0x88>)
 800126e:	2202      	movs	r2, #2
 8001270:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 8001272:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <do10ms+0x80>)
 8001274:	7813      	ldrb	r3, [r2, #0]
 8001276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127a:	7013      	strb	r3, [r2, #0]
			ONMPU = TRUE;
 800127c:	4a0c      	ldr	r2, [pc, #48]	@ (80012b0 <do10ms+0x80>)
 800127e:	7813      	ldrb	r3, [r2, #0]
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <do10ms+0x84>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10e      	bne.n	80012ac <do10ms+0x7c>
			tmo100ms = 10;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <do10ms+0x84>)
 8001290:	220a      	movs	r2, #10
 8001292:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 8001294:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <do10ms+0x80>)
 8001296:	7813      	ldrb	r3, [r2, #0]
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	7013      	strb	r3, [r2, #0]
			ONDISPLAY = TRUE;
 800129e:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <do10ms+0x80>)
 80012a0:	7813      	ldrb	r3, [r2, #0]
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 80012a8:	f000 f808 	bl	80012bc <heartBeatTask>
		}
	}
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000674 	.word	0x20000674
 80012b4:	20000028 	.word	0x20000028
 80012b8:	20000029 	.word	0x20000029

080012bc <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <heartBeatTask+0x44>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001304 <heartBeatTask+0x48>)
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	4611      	mov	r1, r2
 80012cc:	2201      	movs	r2, #1
 80012ce:	408a      	lsls	r2, r1
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80012d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012da:	480b      	ldr	r0, [pc, #44]	@ (8001308 <heartBeatTask+0x4c>)
 80012dc:	f003 fd7b 	bl	8004dd6 <HAL_GPIO_TogglePin>

	times++;
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <heartBeatTask+0x48>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <heartBeatTask+0x48>)
 80012ea:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <heartBeatTask+0x48>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <heartBeatTask+0x48>)
 80012f8:	701a      	strb	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000
 8001304:	20000684 	.word	0x20000684
 8001308:	40020800 	.word	0x40020800

0800130c <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af04      	add	r7, sp, #16
 8001312:	6039      	str	r1, [r7, #0]
 8001314:	4611      	mov	r1, r2
 8001316:	461a      	mov	r2, r3
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	460b      	mov	r3, r1
 800131e:	71bb      	strb	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	b299      	uxth	r1, r3
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	b29a      	uxth	r2, r3
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	b29b      	uxth	r3, r3
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	9002      	str	r0, [sp, #8]
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	4803      	ldr	r0, [pc, #12]	@ (800134c <displayMemWrite+0x40>)
 8001340:	f003 febe 	bl	80050c0 <HAL_I2C_Mem_Write>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000248 	.word	0x20000248

08001350 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af02      	add	r7, sp, #8
 8001356:	6039      	str	r1, [r7, #0]
 8001358:	4611      	mov	r1, r2
 800135a:	461a      	mov	r2, r3
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	460b      	mov	r3, r1
 8001362:	71bb      	strb	r3, [r7, #6]
 8001364:	4613      	mov	r3, r2
 8001366:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	b299      	uxth	r1, r3
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	b29a      	uxth	r2, r3
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	b29b      	uxth	r3, r3
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <displayMemWriteDMA+0x3c>)
 800137e:	f003 ff99 	bl	80052b4 <HAL_I2C_Mem_Write_DMA>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000248 	.word	0x20000248

08001390 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af04      	add	r7, sp, #16
 8001396:	6039      	str	r1, [r7, #0]
 8001398:	4611      	mov	r1, r2
 800139a:	461a      	mov	r2, r3
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	460b      	mov	r3, r1
 80013a2:	71bb      	strb	r3, [r7, #6]
 80013a4:	4613      	mov	r3, r2
 80013a6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	b299      	uxth	r1, r3
 80013ac:	797b      	ldrb	r3, [r7, #5]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	9002      	str	r0, [sp, #8]
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <mpuMemWrite+0x40>)
 80013c4:	f003 fe7c 	bl	80050c0 <HAL_I2C_Mem_Write>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000248 	.word	0x20000248

080013d4 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6039      	str	r1, [r7, #0]
 80013dc:	4611      	mov	r1, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	460b      	mov	r3, r1
 80013e6:	71bb      	strb	r3, [r7, #6]
 80013e8:	4613      	mov	r3, r2
 80013ea:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	b299      	uxth	r1, r3
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	4803      	ldr	r0, [pc, #12]	@ (8001410 <mpuMemReadDMA+0x3c>)
 8001402:	f004 f8b5 	bl	8005570 <HAL_I2C_Mem_Read_DMA>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000248 	.word	0x20000248

08001414 <displayTask>:

void displayTask() {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af02      	add	r7, sp, #8
	char data[8];
	uint8_t y = 0, x = 2;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	2302      	movs	r3, #2
 8001420:	73bb      	strb	r3, [r7, #14]
	static uint8_t init = FALSE;
	static uint8_t wait = FALSE;
	static uint8_t over = TRUE;

	if(!over){
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <displayTask+0x40>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d104      	bne.n	8001434 <displayTask+0x20>
		ONMPU=FALSE;
 800142a:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <displayTask+0x44>)
 800142c:	7813      	ldrb	r3, [r2, #0]
 800142e:	f023 0302 	bic.w	r3, r3, #2
 8001432:	7013      	strb	r3, [r2, #0]
	}

	if (ONMPU) { //Espera de la pantalla
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <displayTask+0x44>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00e      	beq.n	8001460 <displayTask+0x4c>
		wait = TRUE;
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <displayTask+0x48>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
		ONDISPLAY = FALSE;
 8001448:	4a03      	ldr	r2, [pc, #12]	@ (8001458 <displayTask+0x44>)
 800144a:	7813      	ldrb	r3, [r2, #0]
 800144c:	f023 0308 	bic.w	r3, r3, #8
 8001450:	7013      	strb	r3, [r2, #0]
 8001452:	e1c7      	b.n	80017e4 <displayTask+0x3d0>
 8001454:	2000002a 	.word	0x2000002a
 8001458:	20000674 	.word	0x20000674
 800145c:	20000685 	.word	0x20000685
		return;
	}

	if (wait && !ONMPU) { //MPU terminó, entra pantalla
 8001460:	4bc0      	ldr	r3, [pc, #768]	@ (8001764 <displayTask+0x350>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d011      	beq.n	800148c <displayTask+0x78>
 8001468:	4bbf      	ldr	r3, [pc, #764]	@ (8001768 <displayTask+0x354>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <displayTask+0x78>
		wait = FALSE;
 8001476:	4bbb      	ldr	r3, [pc, #748]	@ (8001764 <displayTask+0x350>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
		init = TRUE;
 800147c:	4bbb      	ldr	r3, [pc, #748]	@ (800176c <displayTask+0x358>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
		ONDISPLAY = TRUE;
 8001482:	4ab9      	ldr	r2, [pc, #740]	@ (8001768 <displayTask+0x354>)
 8001484:	7813      	ldrb	r3, [r2, #0]
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	7013      	strb	r3, [r2, #0]
	}

	//OVERDISPLAY = FALSE;
	if(ONDISPLAY){
 800148c:	4bb6      	ldr	r3, [pc, #728]	@ (8001768 <displayTask+0x354>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 81a4 	beq.w	80017e4 <displayTask+0x3d0>
	if (init) {
 800149c:	4bb3      	ldr	r3, [pc, #716]	@ (800176c <displayTask+0x358>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 818f 	beq.w	80017c4 <displayTask+0x3b0>
		init = FALSE;
 80014a6:	4bb1      	ldr	r3, [pc, #708]	@ (800176c <displayTask+0x358>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
		over = FALSE;
 80014ac:	4bb0      	ldr	r3, [pc, #704]	@ (8001770 <displayTask+0x35c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
		ssd1306_Fill(White);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f001 f8c4 	bl	8002640 <ssd1306_Fill>
		//ssd1306_DrawBitmap(0, 0, chat_gpt_128x64, 128, 64, White);
		//ssd1306_FillRectangle(55, 30, 80, 55, Black);

		ssd1306_SetCursor(x, y);
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	7bbb      	ldrb	r3, [r7, #14]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 fa6a 	bl	8002998 <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "ax:%u", ax);
 80014c4:	4bab      	ldr	r3, [pc, #684]	@ (8001774 <displayTask+0x360>)
 80014c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ca:	1d38      	adds	r0, r7, #4
 80014cc:	4aaa      	ldr	r2, [pc, #680]	@ (8001778 <displayTask+0x364>)
 80014ce:	2108      	movs	r1, #8
 80014d0:	f00c ff8c 	bl	800e3ec <sniprintf>
		ssd1306_WriteString(data, Font_6x8, Black);
 80014d4:	4ba9      	ldr	r3, [pc, #676]	@ (800177c <displayTask+0x368>)
 80014d6:	1d38      	adds	r0, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014de:	f001 fa35 	bl	800294c <ssd1306_WriteString>
		x += 48;
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	3330      	adds	r3, #48	@ 0x30
 80014e6:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	7bbb      	ldrb	r3, [r7, #14]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fa52 	bl	8002998 <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "gx:%u", gx);
 80014f4:	4ba2      	ldr	r3, [pc, #648]	@ (8001780 <displayTask+0x36c>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	1d38      	adds	r0, r7, #4
 80014fc:	4aa1      	ldr	r2, [pc, #644]	@ (8001784 <displayTask+0x370>)
 80014fe:	2108      	movs	r1, #8
 8001500:	f00c ff74 	bl	800e3ec <sniprintf>
		ssd1306_WriteString(data, Font_6x8, Black);
 8001504:	4b9d      	ldr	r3, [pc, #628]	@ (800177c <displayTask+0x368>)
 8001506:	1d38      	adds	r0, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150e:	f001 fa1d 	bl	800294c <ssd1306_WriteString>
		x = 2;
 8001512:	2302      	movs	r3, #2
 8001514:	73bb      	strb	r3, [r7, #14]
		y += 8;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	3308      	adds	r3, #8
 800151a:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(2, y);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	4619      	mov	r1, r3
 8001520:	2002      	movs	r0, #2
 8001522:	f001 fa39 	bl	8002998 <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "ay:%u", ay);
 8001526:	4b98      	ldr	r3, [pc, #608]	@ (8001788 <displayTask+0x374>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	1d38      	adds	r0, r7, #4
 800152e:	4a97      	ldr	r2, [pc, #604]	@ (800178c <displayTask+0x378>)
 8001530:	2108      	movs	r1, #8
 8001532:	f00c ff5b 	bl	800e3ec <sniprintf>
		ssd1306_WriteString(data, Font_6x8, Black);
 8001536:	4b91      	ldr	r3, [pc, #580]	@ (800177c <displayTask+0x368>)
 8001538:	1d38      	adds	r0, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	9200      	str	r2, [sp, #0]
 800153e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001540:	f001 fa04 	bl	800294c <ssd1306_WriteString>
		x += 48;
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	3330      	adds	r3, #48	@ 0x30
 8001548:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fa21 	bl	8002998 <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "gy:%u", gy);
 8001556:	4b8e      	ldr	r3, [pc, #568]	@ (8001790 <displayTask+0x37c>)
 8001558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155c:	1d38      	adds	r0, r7, #4
 800155e:	4a8d      	ldr	r2, [pc, #564]	@ (8001794 <displayTask+0x380>)
 8001560:	2108      	movs	r1, #8
 8001562:	f00c ff43 	bl	800e3ec <sniprintf>
		ssd1306_WriteString(data, Font_6x8, Black);
 8001566:	4b85      	ldr	r3, [pc, #532]	@ (800177c <displayTask+0x368>)
 8001568:	1d38      	adds	r0, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	9200      	str	r2, [sp, #0]
 800156e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001570:	f001 f9ec 	bl	800294c <ssd1306_WriteString>
		x = 2;
 8001574:	2302      	movs	r3, #2
 8001576:	73bb      	strb	r3, [r7, #14]
		y += 8;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	3308      	adds	r3, #8
 800157c:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(2, y);
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	4619      	mov	r1, r3
 8001582:	2002      	movs	r0, #2
 8001584:	f001 fa08 	bl	8002998 <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "az:%u", az);
 8001588:	4b83      	ldr	r3, [pc, #524]	@ (8001798 <displayTask+0x384>)
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	1d38      	adds	r0, r7, #4
 8001590:	4a82      	ldr	r2, [pc, #520]	@ (800179c <displayTask+0x388>)
 8001592:	2108      	movs	r1, #8
 8001594:	f00c ff2a 	bl	800e3ec <sniprintf>
		ssd1306_WriteString(data, Font_6x8, Black);
 8001598:	4b78      	ldr	r3, [pc, #480]	@ (800177c <displayTask+0x368>)
 800159a:	1d38      	adds	r0, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	9200      	str	r2, [sp, #0]
 80015a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a2:	f001 f9d3 	bl	800294c <ssd1306_WriteString>
		x += 48;
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	3330      	adds	r3, #48	@ 0x30
 80015aa:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 f9f0 	bl	8002998 <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "gz:%u", gz);
 80015b8:	4b79      	ldr	r3, [pc, #484]	@ (80017a0 <displayTask+0x38c>)
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	1d38      	adds	r0, r7, #4
 80015c0:	4a78      	ldr	r2, [pc, #480]	@ (80017a4 <displayTask+0x390>)
 80015c2:	2108      	movs	r1, #8
 80015c4:	f00c ff12 	bl	800e3ec <sniprintf>
		ssd1306_WriteString(data, Font_6x8, Black);
 80015c8:	4b6c      	ldr	r3, [pc, #432]	@ (800177c <displayTask+0x368>)
 80015ca:	1d38      	adds	r0, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d2:	f001 f9bb 	bl	800294c <ssd1306_WriteString>

		ssd1306_Line(5, 60, 5, (60 - (adcDataTx[0] / 4090) * 25), Black);
 80015d6:	4b74      	ldr	r3, [pc, #464]	@ (80017a8 <displayTask+0x394>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	4a74      	ldr	r2, [pc, #464]	@ (80017ac <displayTask+0x398>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0adb      	lsrs	r3, r3, #11
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	00d2      	lsls	r2, r2, #3
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	0151      	lsls	r1, r2, #5
 80015f0:	461a      	mov	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	4413      	add	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	333c      	adds	r3, #60	@ 0x3c
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	9200      	str	r2, [sp, #0]
 8001600:	2205      	movs	r2, #5
 8001602:	213c      	movs	r1, #60	@ 0x3c
 8001604:	2005      	movs	r0, #5
 8001606:	f001 f9df 	bl	80029c8 <ssd1306_Line>
		ssd1306_Line(7, 60, 7, (60 - (adcDataTx[1] / 4090) * 25), Black);
 800160a:	4b67      	ldr	r3, [pc, #412]	@ (80017a8 <displayTask+0x394>)
 800160c:	885b      	ldrh	r3, [r3, #2]
 800160e:	4a67      	ldr	r2, [pc, #412]	@ (80017ac <displayTask+0x398>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0adb      	lsrs	r3, r3, #11
 8001616:	b29b      	uxth	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	00d2      	lsls	r2, r2, #3
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	461a      	mov	r2, r3
 8001622:	0151      	lsls	r1, r2, #5
 8001624:	461a      	mov	r2, r3
 8001626:	460b      	mov	r3, r1
 8001628:	4413      	add	r3, r2
 800162a:	b2db      	uxtb	r3, r3
 800162c:	333c      	adds	r3, #60	@ 0x3c
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2200      	movs	r2, #0
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	2207      	movs	r2, #7
 8001636:	213c      	movs	r1, #60	@ 0x3c
 8001638:	2007      	movs	r0, #7
 800163a:	f001 f9c5 	bl	80029c8 <ssd1306_Line>
		ssd1306_Line(9, 60, 9, (60 - (adcDataTx[2] / 4090) * 25), Black);
 800163e:	4b5a      	ldr	r3, [pc, #360]	@ (80017a8 <displayTask+0x394>)
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	4a5a      	ldr	r2, [pc, #360]	@ (80017ac <displayTask+0x398>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	0adb      	lsrs	r3, r3, #11
 800164a:	b29b      	uxth	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	00d2      	lsls	r2, r2, #3
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	461a      	mov	r2, r3
 8001656:	0151      	lsls	r1, r2, #5
 8001658:	461a      	mov	r2, r3
 800165a:	460b      	mov	r3, r1
 800165c:	4413      	add	r3, r2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	333c      	adds	r3, #60	@ 0x3c
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2200      	movs	r2, #0
 8001666:	9200      	str	r2, [sp, #0]
 8001668:	2209      	movs	r2, #9
 800166a:	213c      	movs	r1, #60	@ 0x3c
 800166c:	2009      	movs	r0, #9
 800166e:	f001 f9ab 	bl	80029c8 <ssd1306_Line>
		ssd1306_Line(11, 60, 11, (60 - (adcDataTx[3] / 4090) * 25), Black);
 8001672:	4b4d      	ldr	r3, [pc, #308]	@ (80017a8 <displayTask+0x394>)
 8001674:	88db      	ldrh	r3, [r3, #6]
 8001676:	4a4d      	ldr	r2, [pc, #308]	@ (80017ac <displayTask+0x398>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0adb      	lsrs	r3, r3, #11
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	00d2      	lsls	r2, r2, #3
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	461a      	mov	r2, r3
 800168a:	0151      	lsls	r1, r2, #5
 800168c:	461a      	mov	r2, r3
 800168e:	460b      	mov	r3, r1
 8001690:	4413      	add	r3, r2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	333c      	adds	r3, #60	@ 0x3c
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2200      	movs	r2, #0
 800169a:	9200      	str	r2, [sp, #0]
 800169c:	220b      	movs	r2, #11
 800169e:	213c      	movs	r1, #60	@ 0x3c
 80016a0:	200b      	movs	r0, #11
 80016a2:	f001 f991 	bl	80029c8 <ssd1306_Line>
		ssd1306_Line(13, 60, 13, (60 - (adcDataTx[4] / 4090) * 25), Black);
 80016a6:	4b40      	ldr	r3, [pc, #256]	@ (80017a8 <displayTask+0x394>)
 80016a8:	891b      	ldrh	r3, [r3, #8]
 80016aa:	4a40      	ldr	r2, [pc, #256]	@ (80017ac <displayTask+0x398>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0adb      	lsrs	r3, r3, #11
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	00d2      	lsls	r2, r2, #3
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	0151      	lsls	r1, r2, #5
 80016c0:	461a      	mov	r2, r3
 80016c2:	460b      	mov	r3, r1
 80016c4:	4413      	add	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	333c      	adds	r3, #60	@ 0x3c
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	9200      	str	r2, [sp, #0]
 80016d0:	220d      	movs	r2, #13
 80016d2:	213c      	movs	r1, #60	@ 0x3c
 80016d4:	200d      	movs	r0, #13
 80016d6:	f001 f977 	bl	80029c8 <ssd1306_Line>
		ssd1306_Line(15, 60, 15, (60 - (adcDataTx[5] / 4090) * 25), Black);
 80016da:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <displayTask+0x394>)
 80016dc:	895b      	ldrh	r3, [r3, #10]
 80016de:	4a33      	ldr	r2, [pc, #204]	@ (80017ac <displayTask+0x398>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0adb      	lsrs	r3, r3, #11
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	00d2      	lsls	r2, r2, #3
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	0151      	lsls	r1, r2, #5
 80016f4:	461a      	mov	r2, r3
 80016f6:	460b      	mov	r3, r1
 80016f8:	4413      	add	r3, r2
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	333c      	adds	r3, #60	@ 0x3c
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2200      	movs	r2, #0
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	220f      	movs	r2, #15
 8001706:	213c      	movs	r1, #60	@ 0x3c
 8001708:	200f      	movs	r0, #15
 800170a:	f001 f95d 	bl	80029c8 <ssd1306_Line>
		ssd1306_Line(17, 60, 17, (60 - (adcDataTx[6] / 4090) * 25), Black);
 800170e:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <displayTask+0x394>)
 8001710:	899b      	ldrh	r3, [r3, #12]
 8001712:	4a26      	ldr	r2, [pc, #152]	@ (80017ac <displayTask+0x398>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	0adb      	lsrs	r3, r3, #11
 800171a:	b29b      	uxth	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	00d2      	lsls	r2, r2, #3
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	461a      	mov	r2, r3
 8001726:	0151      	lsls	r1, r2, #5
 8001728:	461a      	mov	r2, r3
 800172a:	460b      	mov	r3, r1
 800172c:	4413      	add	r3, r2
 800172e:	b2db      	uxtb	r3, r3
 8001730:	333c      	adds	r3, #60	@ 0x3c
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2200      	movs	r2, #0
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	2211      	movs	r2, #17
 800173a:	213c      	movs	r1, #60	@ 0x3c
 800173c:	2011      	movs	r0, #17
 800173e:	f001 f943 	bl	80029c8 <ssd1306_Line>
		ssd1306_Line(19, 60, 19, (60 - (adcDataTx[7] / 4090) * 25), Black);
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <displayTask+0x394>)
 8001744:	89db      	ldrh	r3, [r3, #14]
 8001746:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <displayTask+0x398>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	0adb      	lsrs	r3, r3, #11
 800174e:	b29b      	uxth	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	00d2      	lsls	r2, r2, #3
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	461a      	mov	r2, r3
 800175a:	0151      	lsls	r1, r2, #5
 800175c:	461a      	mov	r2, r3
 800175e:	460b      	mov	r3, r1
 8001760:	4413      	add	r3, r2
 8001762:	e025      	b.n	80017b0 <displayTask+0x39c>
 8001764:	20000685 	.word	0x20000685
 8001768:	20000674 	.word	0x20000674
 800176c:	20000686 	.word	0x20000686
 8001770:	2000002a 	.word	0x2000002a
 8001774:	20000678 	.word	0x20000678
 8001778:	0800ed6c 	.word	0x0800ed6c
 800177c:	0800f3d4 	.word	0x0800f3d4
 8001780:	2000067e 	.word	0x2000067e
 8001784:	0800ed74 	.word	0x0800ed74
 8001788:	2000067a 	.word	0x2000067a
 800178c:	0800ed7c 	.word	0x0800ed7c
 8001790:	20000680 	.word	0x20000680
 8001794:	0800ed84 	.word	0x0800ed84
 8001798:	2000067c 	.word	0x2000067c
 800179c:	0800ed8c 	.word	0x0800ed8c
 80017a0:	20000682 	.word	0x20000682
 80017a4:	0800ed94 	.word	0x0800ed94
 80017a8:	20000448 	.word	0x20000448
 80017ac:	80301207 	.word	0x80301207
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	333c      	adds	r3, #60	@ 0x3c
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2200      	movs	r2, #0
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	2213      	movs	r2, #19
 80017bc:	213c      	movs	r1, #60	@ 0x3c
 80017be:	2013      	movs	r0, #19
 80017c0:	f001 f902 	bl	80029c8 <ssd1306_Line>
	}

	if (ssd1306_UpdateScreenDMA()) {
 80017c4:	f000 ff7c 	bl	80026c0 <ssd1306_UpdateScreenDMA>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <displayTask+0x3d0>
		ONDISPLAY = FALSE;
 80017ce:	4a07      	ldr	r2, [pc, #28]	@ (80017ec <displayTask+0x3d8>)
 80017d0:	7813      	ldrb	r3, [r2, #0]
 80017d2:	f023 0308 	bic.w	r3, r3, #8
 80017d6:	7013      	strb	r3, [r2, #0]
		over = TRUE;
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <displayTask+0x3dc>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		init = TRUE;
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <displayTask+0x3e0>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
	}
	}
}
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000674 	.word	0x20000674
 80017f0:	2000002a 	.word	0x2000002a
 80017f4:	20000686 	.word	0x20000686

080017f8 <mpuTask>:


void mpuTask() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af02      	add	r7, sp, #8

	if (ONMPU) {
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <mpuTask+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <mpuTask+0x3c>
		if (mpu6050_Read()) {
 800180c:	f000 fc2c 	bl	8002068 <mpu6050_Read>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00e      	beq.n	8001834 <mpuTask+0x3c>
			ONMPU = FALSE;
 8001816:	4a09      	ldr	r2, [pc, #36]	@ (800183c <mpuTask+0x44>)
 8001818:	7813      	ldrb	r3, [r2, #0]
 800181a:	f023 0302 	bic.w	r3, r3, #2
 800181e:	7013      	strb	r3, [r2, #0]
			mpu6050_GetData(&ax, &ay, &az, &gx, &gy, &gz);
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <mpuTask+0x48>)
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <mpuTask+0x4c>)
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <mpuTask+0x50>)
 800182a:	4a08      	ldr	r2, [pc, #32]	@ (800184c <mpuTask+0x54>)
 800182c:	4908      	ldr	r1, [pc, #32]	@ (8001850 <mpuTask+0x58>)
 800182e:	4809      	ldr	r0, [pc, #36]	@ (8001854 <mpuTask+0x5c>)
 8001830:	f000 fdce 	bl	80023d0 <mpu6050_GetData>
		}
	}

}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000674 	.word	0x20000674
 8001840:	20000682 	.word	0x20000682
 8001844:	20000680 	.word	0x20000680
 8001848:	2000067e 	.word	0x2000067e
 800184c:	2000067c 	.word	0x2000067c
 8001850:	2000067a 	.word	0x2000067a
 8001854:	20000678 	.word	0x20000678

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f001 feaa 	bl	80035b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001860:	f000 f870 	bl	8001944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001864:	f000 fb24 	bl	8001eb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001868:	f000 fae4 	bl	8001e34 <MX_DMA_Init>
  MX_ADC1_Init();
 800186c:	f000 f8d2 	bl	8001a14 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001870:	f000 f984 	bl	8001b7c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001874:	f000 f9b0 	bl	8001bd8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001878:	f00c f83c 	bl	800d8f4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800187c:	f000 fa12 	bl	8001ca4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001880:	f000 fa74 	bl	8001d6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8001884:	481f      	ldr	r0, [pc, #124]	@ (8001904 <main+0xac>)
 8001886:	f00c f987 	bl	800db98 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 800188a:	481f      	ldr	r0, [pc, #124]	@ (8001908 <main+0xb0>)
 800188c:	f008 f83c 	bl	8009908 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001890:	481e      	ldr	r0, [pc, #120]	@ (800190c <main+0xb4>)
 8001892:	f008 f839 	bl	8009908 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001896:	481e      	ldr	r0, [pc, #120]	@ (8001910 <main+0xb8>)
 8001898:	f008 f836 	bl	8009908 <HAL_TIM_Base_Start_IT>


	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018a2:	481c      	ldr	r0, [pc, #112]	@ (8001914 <main+0xbc>)
 80018a4:	f003 fa7e 	bl	8004da4 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 80018a8:	481b      	ldr	r0, [pc, #108]	@ (8001918 <main+0xc0>)
 80018aa:	f000 fe4f 	bl	800254c <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 80018ae:	481b      	ldr	r0, [pc, #108]	@ (800191c <main+0xc4>)
 80018b0:	f000 fe3c 	bl	800252c <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 80018b4:	481a      	ldr	r0, [pc, #104]	@ (8001920 <main+0xc8>)
 80018b6:	f000 fe29 	bl	800250c <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 80018ba:	f000 fe57 	bl	800256c <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 80018be:	4819      	ldr	r0, [pc, #100]	@ (8001924 <main+0xcc>)
 80018c0:	f000 fb5c 	bl	8001f7c <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 80018c4:	4818      	ldr	r0, [pc, #96]	@ (8001928 <main+0xd0>)
 80018c6:	f000 fb69 	bl	8001f9c <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 80018ca:	4818      	ldr	r0, [pc, #96]	@ (800192c <main+0xd4>)
 80018cc:	f000 fb76 	bl	8001fbc <mpu6050_Attach_MemReadDMA>
	MPU6050_Init();
 80018d0:	f000 fbae 	bl	8002030 <MPU6050_Init>

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <main+0xd8>)
 80018d6:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <main+0xdc>)
 80018d8:	4917      	ldr	r1, [pc, #92]	@ (8001938 <main+0xe0>)
 80018da:	4818      	ldr	r0, [pc, #96]	@ (800193c <main+0xe4>)
 80018dc:	f001 fe08 	bl	80034f0 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <main+0xe8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
	OVERDISPLAY = TRUE;
 80018e6:	4a16      	ldr	r2, [pc, #88]	@ (8001940 <main+0xe8>)
 80018e8:	7813      	ldrb	r3, [r2, #0]
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 80018f0:	f7ff fc9e 	bl	8001230 <do10ms>
		USBTask();
 80018f4:	f7ff faec 	bl	8000ed0 <USBTask>
		displayTask();
 80018f8:	f7ff fd8c 	bl	8001414 <displayTask>
		mpuTask();
 80018fc:	f7ff ff7c 	bl	80017f8 <mpuTask>
		do10ms();
 8001900:	bf00      	nop
 8001902:	e7f5      	b.n	80018f0 <main+0x98>
 8001904:	08000e75 	.word	0x08000e75
 8001908:	2000035c 	.word	0x2000035c
 800190c:	200003a4 	.word	0x200003a4
 8001910:	200003ec 	.word	0x200003ec
 8001914:	40020800 	.word	0x40020800
 8001918:	20000675 	.word	0x20000675
 800191c:	0800130d 	.word	0x0800130d
 8001920:	08001351 	.word	0x08001351
 8001924:	20000676 	.word	0x20000676
 8001928:	08001391 	.word	0x08001391
 800192c:	080013d5 	.word	0x080013d5
 8001930:	20000470 	.word	0x20000470
 8001934:	20000570 	.word	0x20000570
 8001938:	20000458 	.word	0x20000458
 800193c:	20000464 	.word	0x20000464
 8001940:	20000674 	.word	0x20000674

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	@ 0x50
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2230      	movs	r2, #48	@ 0x30
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f00c fd9a 	bl	800e48c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <SystemClock_Config+0xc8>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a26      	ldr	r2, [pc, #152]	@ (8001a0c <SystemClock_Config+0xc8>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
 8001978:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <SystemClock_Config+0xc8>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <SystemClock_Config+0xcc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a20      	ldr	r2, [pc, #128]	@ (8001a10 <SystemClock_Config+0xcc>)
 800198e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <SystemClock_Config+0xcc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019aa:	2302      	movs	r3, #2
 80019ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019b4:	2319      	movs	r3, #25
 80019b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019b8:	23c0      	movs	r3, #192	@ 0xc0
 80019ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019bc:	2302      	movs	r3, #2
 80019be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019c0:	2304      	movs	r3, #4
 80019c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4618      	mov	r0, r3
 80019ca:	f007 fb09 	bl	8008fe0 <HAL_RCC_OscConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019d4:	f000 facc 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d8:	230f      	movs	r3, #15
 80019da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019dc:	2302      	movs	r3, #2
 80019de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2103      	movs	r1, #3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f007 fd6b 	bl	80094d0 <HAL_RCC_ClockConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a00:	f000 fab6 	bl	8001f70 <Error_Handler>
  }
}
 8001a04:	bf00      	nop
 8001a06:	3750      	adds	r7, #80	@ 0x50
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000

08001a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a26:	4b52      	ldr	r3, [pc, #328]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a28:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <MX_ADC1_Init+0x160>)
 8001a2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a2c:	4b50      	ldr	r3, [pc, #320]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a34:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a40:	4b4b      	ldr	r3, [pc, #300]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a46:	4b4a      	ldr	r3, [pc, #296]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a4e:	4b48      	ldr	r3, [pc, #288]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a54:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a56:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <MX_ADC1_Init+0x164>)
 8001a58:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a5a:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001a60:	4b43      	ldr	r3, [pc, #268]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a62:	2208      	movs	r2, #8
 8001a64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a66:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a6e:	4b40      	ldr	r3, [pc, #256]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a74:	483e      	ldr	r0, [pc, #248]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a76:	f001 fe33 	bl	80036e0 <HAL_ADC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a80:	f000 fa76 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	4619      	mov	r1, r3
 8001a94:	4836      	ldr	r0, [pc, #216]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001a96:	f002 f889 	bl	8003bac <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001aa0:	f000 fa66 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	4619      	mov	r1, r3
 8001ab0:	482f      	ldr	r0, [pc, #188]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001ab2:	f002 f87b 	bl	8003bac <HAL_ADC_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001abc:	f000 fa58 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4619      	mov	r1, r3
 8001acc:	4828      	ldr	r0, [pc, #160]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001ace:	f002 f86d 	bl	8003bac <HAL_ADC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001ad8:	f000 fa4a 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001adc:	2303      	movs	r3, #3
 8001ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4821      	ldr	r0, [pc, #132]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001aea:	f002 f85f 	bl	8003bac <HAL_ADC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001af4:	f000 fa3c 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001af8:	2304      	movs	r3, #4
 8001afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001afc:	2305      	movs	r3, #5
 8001afe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	481a      	ldr	r0, [pc, #104]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001b06:	f002 f851 	bl	8003bac <HAL_ADC_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001b10:	f000 fa2e 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b14:	2305      	movs	r3, #5
 8001b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001b18:	2306      	movs	r3, #6
 8001b1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4813      	ldr	r0, [pc, #76]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001b22:	f002 f843 	bl	8003bac <HAL_ADC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001b2c:	f000 fa20 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b30:	2306      	movs	r3, #6
 8001b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001b34:	2307      	movs	r3, #7
 8001b36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001b3e:	f002 f835 	bl	8003bac <HAL_ADC_ConfigChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001b48:	f000 fa12 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001b50:	2308      	movs	r3, #8
 8001b52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b54:	463b      	mov	r3, r7
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_ADC1_Init+0x15c>)
 8001b5a:	f002 f827 	bl	8003bac <HAL_ADC_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001b64:	f000 fa04 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200001a0 	.word	0x200001a0
 8001b74:	40012000 	.word	0x40012000
 8001b78:	0f000001 	.word	0x0f000001

08001b7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b82:	4a13      	ldr	r2, [pc, #76]	@ (8001bd0 <MX_I2C1_Init+0x54>)
 8001b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b88:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <MX_I2C1_Init+0x58>)
 8001b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001bba:	f003 f927 	bl	8004e0c <HAL_I2C_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bc4:	f000 f9d4 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000248 	.word	0x20000248
 8001bd0:	40005400 	.word	0x40005400
 8001bd4:	00061a80 	.word	0x00061a80

08001bd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	@ 0x30
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c06:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <MX_TIM1_Init+0xc8>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8001c0a:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c0c:	225f      	movs	r2, #95	@ 0x5f
 8001c0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001c16:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c18:	22f9      	movs	r2, #249	@ 0xf9
 8001c1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c2e:	481b      	ldr	r0, [pc, #108]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c30:	f007 fe1a 	bl	8009868 <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001c3a:	f000 f999 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c42:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4814      	ldr	r0, [pc, #80]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c4c:	f007 ffae 	bl	8009bac <HAL_TIM_ConfigClockSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c56:	f000 f98b 	bl	8001f70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4619      	mov	r1, r3
 8001c68:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c6a:	f008 f866 	bl	8009d3a <HAL_TIM_SlaveConfigSynchro>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001c74:	f000 f97c 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_TIM1_Init+0xc4>)
 8001c86:	f008 fa75 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001c90:	f000 f96e 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3730      	adds	r7, #48	@ 0x30
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000035c 	.word	0x2000035c
 8001ca0:	40010000 	.word	0x40010000

08001ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	@ 0x30
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001cd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001cd8:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001cda:	225f      	movs	r2, #95	@ 0x5f
 8001cdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cde:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001ce4:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001ce6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cf8:	481b      	ldr	r0, [pc, #108]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001cfa:	f007 fdb5 	bl	8009868 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001d04:	f000 f934 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d0e:	f107 0320 	add.w	r3, r7, #32
 8001d12:	4619      	mov	r1, r3
 8001d14:	4814      	ldr	r0, [pc, #80]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001d16:	f007 ff49 	bl	8009bac <HAL_TIM_ConfigClockSource>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d20:	f000 f926 	bl	8001f70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4619      	mov	r1, r3
 8001d32:	480d      	ldr	r0, [pc, #52]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001d34:	f008 f801 	bl	8009d3a <HAL_TIM_SlaveConfigSynchro>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d3e:	f000 f917 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <MX_TIM2_Init+0xc4>)
 8001d50:	f008 fa10 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001d5a:	f000 f909 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	@ 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200003a4 	.word	0x200003a4

08001d6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	@ 0x30
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001d9a:	4a25      	ldr	r2, [pc, #148]	@ (8001e30 <MX_TIM3_Init+0xc4>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001da0:	225f      	movs	r2, #95	@ 0x5f
 8001da2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001dac:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001db0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dbe:	481b      	ldr	r0, [pc, #108]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001dc0:	f007 fd52 	bl	8009868 <HAL_TIM_Base_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001dca:	f000 f8d1 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4814      	ldr	r0, [pc, #80]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001ddc:	f007 fee6 	bl	8009bac <HAL_TIM_ConfigClockSource>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001de6:	f000 f8c3 	bl	8001f70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4619      	mov	r1, r3
 8001df8:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001dfa:	f007 ff9e 	bl	8009d3a <HAL_TIM_SlaveConfigSynchro>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e04:	f000 f8b4 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <MX_TIM3_Init+0xc0>)
 8001e16:	f008 f9ad 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001e20:	f000 f8a6 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	@ 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200003ec 	.word	0x200003ec
 8001e30:	40000400 	.word	0x40000400

08001e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <MX_DMA_Init+0x78>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a1a      	ldr	r2, [pc, #104]	@ (8001eac <MX_DMA_Init+0x78>)
 8001e44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <MX_DMA_Init+0x78>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_DMA_Init+0x78>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a13      	ldr	r2, [pc, #76]	@ (8001eac <MX_DMA_Init+0x78>)
 8001e60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_DMA_Init+0x78>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	200b      	movs	r0, #11
 8001e78:	f002 fa2d 	bl	80042d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e7c:	200b      	movs	r0, #11
 8001e7e:	f002 fa46 	bl	800430e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	200c      	movs	r0, #12
 8001e88:	f002 fa25 	bl	80042d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e8c:	200c      	movs	r0, #12
 8001e8e:	f002 fa3e 	bl	800430e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2038      	movs	r0, #56	@ 0x38
 8001e98:	f002 fa1d 	bl	80042d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e9c:	2038      	movs	r0, #56	@ 0x38
 8001e9e:	f002 fa36 	bl	800430e <HAL_NVIC_EnableIRQ>

}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a26      	ldr	r2, [pc, #152]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a11      	ldr	r2, [pc, #68]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_GPIO_Init+0xb8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f3c:	480b      	ldr	r0, [pc, #44]	@ (8001f6c <MX_GPIO_Init+0xbc>)
 8001f3e:	f002 ff31 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <MX_GPIO_Init+0xbc>)
 8001f5c:	f002 fd9e 	bl	8004a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	@ 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020800 	.word	0x40020800

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <Error_Handler+0x8>

08001f7c <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 8001f84:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000688 	.word	0x20000688

08001f9c <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <mpu6050_Attach_MemWrite+0x1c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000068c 	.word	0x2000068c

08001fbc <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 8001fc4:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <mpu6050_Attach_MemReadDMA+0x1c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000690 	.word	0x20000690

08001fdc <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <mpu6050_WriteData+0x24>)
 8001fea:	681c      	ldr	r4, [r3, #0]
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	20d0      	movs	r0, #208	@ 0xd0
 8001ff4:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd90      	pop	{r4, r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000068c 	.word	0x2000068c

08002004 <mpu6050_ReadDataDMA>:

void mpu6050_ReadDataDMA(uint8_t* buffer, size_t size, uint8_t type) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	71fb      	strb	r3, [r7, #7]
	memReadDMA(MPU6050_ADDR, buffer, size, type);
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <mpu6050_ReadDataDMA+0x28>)
 8002014:	681c      	ldr	r4, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	68f9      	ldr	r1, [r7, #12]
 800201e:	20d0      	movs	r0, #208	@ 0xd0
 8002020:	47a0      	blx	r4
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	20000690 	.word	0x20000690

08002030 <MPU6050_Init>:


void MPU6050_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	216b      	movs	r1, #107	@ 0x6b
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ffcc 	bl	8001fdc <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 8002044:	2300      	movs	r3, #0
 8002046:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	211c      	movs	r1, #28
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ffc5 	bl	8001fdc <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 8002052:	2300      	movs	r3, #0
 8002054:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	211b      	movs	r1, #27
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ffbe 	bl	8001fdc <mpu6050_WriteData>

}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <mpu6050_Read>:

char mpu6050_Read(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
//		gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
//
//	return 1;


	if (*mpu6050_RxCplt || state == 1) {
 800206c:	4ba0      	ldr	r3, [pc, #640]	@ (80022f0 <mpu6050_Read+0x288>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <mpu6050_Read+0x18>
 8002076:	4b9f      	ldr	r3, [pc, #636]	@ (80022f4 <mpu6050_Read+0x28c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	f040 8198 	bne.w	80023b0 <mpu6050_Read+0x348>
		*mpu6050_RxCplt = 0;  // Reset completion flag
 8002080:	4b9b      	ldr	r3, [pc, #620]	@ (80022f0 <mpu6050_Read+0x288>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
		switch (state) {
 8002088:	4b9a      	ldr	r3, [pc, #616]	@ (80022f4 <mpu6050_Read+0x28c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d002      	beq.n	8002096 <mpu6050_Read+0x2e>
 8002090:	2b02      	cmp	r3, #2
 8002092:	d009      	beq.n	80020a8 <mpu6050_Read+0x40>
 8002094:	e18c      	b.n	80023b0 <mpu6050_Read+0x348>
		case 1:
			state=2;
 8002096:	4b97      	ldr	r3, [pc, #604]	@ (80022f4 <mpu6050_Read+0x28c>)
 8002098:	2202      	movs	r2, #2
 800209a:	701a      	strb	r2, [r3, #0]
			// Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
			mpu6050_ReadDataDMA(Rec_Data, 14, ACCEL_XOUT_H_REG);
 800209c:	223b      	movs	r2, #59	@ 0x3b
 800209e:	210e      	movs	r1, #14
 80020a0:	4895      	ldr	r0, [pc, #596]	@ (80022f8 <mpu6050_Read+0x290>)
 80020a2:	f7ff ffaf 	bl	8002004 <mpu6050_ReadDataDMA>
			break;
 80020a6:	e183      	b.n	80023b0 <mpu6050_Read+0x348>
		case 2:
			state=1;
 80020a8:	4b92      	ldr	r3, [pc, #584]	@ (80022f4 <mpu6050_Read+0x28c>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
			// Combinar bytes altos y bajos en variables de 16 bits con signo
			//Valores accelerometro
			ax = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); //primer byte  es la parte alta, segundo parte baja
 80020ae:	4b92      	ldr	r3, [pc, #584]	@ (80022f8 <mpu6050_Read+0x290>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	4b8f      	ldr	r3, [pc, #572]	@ (80022f8 <mpu6050_Read+0x290>)
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b8d      	ldr	r3, [pc, #564]	@ (80022fc <mpu6050_Read+0x294>)
 80020c6:	601a      	str	r2, [r3, #0]
			ay = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80020c8:	4b8b      	ldr	r3, [pc, #556]	@ (80022f8 <mpu6050_Read+0x290>)
 80020ca:	789b      	ldrb	r3, [r3, #2]
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	4b89      	ldr	r3, [pc, #548]	@ (80022f8 <mpu6050_Read+0x290>)
 80020d4:	78db      	ldrb	r3, [r3, #3]
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b21b      	sxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	4b88      	ldr	r3, [pc, #544]	@ (8002300 <mpu6050_Read+0x298>)
 80020e0:	601a      	str	r2, [r3, #0]
			az = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80020e2:	4b85      	ldr	r3, [pc, #532]	@ (80022f8 <mpu6050_Read+0x290>)
 80020e4:	791b      	ldrb	r3, [r3, #4]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	4b82      	ldr	r3, [pc, #520]	@ (80022f8 <mpu6050_Read+0x290>)
 80020ee:	795b      	ldrb	r3, [r3, #5]
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b82      	ldr	r3, [pc, #520]	@ (8002304 <mpu6050_Read+0x29c>)
 80020fa:	601a      	str	r2, [r3, #0]
			//Medida temperatura
			//t = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
			//Valores del giroscopio
			gx = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80020fc:	4b7e      	ldr	r3, [pc, #504]	@ (80022f8 <mpu6050_Read+0x290>)
 80020fe:	7a1b      	ldrb	r3, [r3, #8]
 8002100:	b21b      	sxth	r3, r3
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	4b7c      	ldr	r3, [pc, #496]	@ (80022f8 <mpu6050_Read+0x290>)
 8002108:	7a5b      	ldrb	r3, [r3, #9]
 800210a:	b21b      	sxth	r3, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	b21b      	sxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4b7d      	ldr	r3, [pc, #500]	@ (8002308 <mpu6050_Read+0x2a0>)
 8002114:	601a      	str	r2, [r3, #0]
			gy = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002116:	4b78      	ldr	r3, [pc, #480]	@ (80022f8 <mpu6050_Read+0x290>)
 8002118:	7a9b      	ldrb	r3, [r3, #10]
 800211a:	b21b      	sxth	r3, r3
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b21a      	sxth	r2, r3
 8002120:	4b75      	ldr	r3, [pc, #468]	@ (80022f8 <mpu6050_Read+0x290>)
 8002122:	7adb      	ldrb	r3, [r3, #11]
 8002124:	b21b      	sxth	r3, r3
 8002126:	4313      	orrs	r3, r2
 8002128:	b21b      	sxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	4b77      	ldr	r3, [pc, #476]	@ (800230c <mpu6050_Read+0x2a4>)
 800212e:	601a      	str	r2, [r3, #0]
			gz = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002130:	4b71      	ldr	r3, [pc, #452]	@ (80022f8 <mpu6050_Read+0x290>)
 8002132:	7b1b      	ldrb	r3, [r3, #12]
 8002134:	b21b      	sxth	r3, r3
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21a      	sxth	r2, r3
 800213a:	4b6f      	ldr	r3, [pc, #444]	@ (80022f8 <mpu6050_Read+0x290>)
 800213c:	7b5b      	ldrb	r3, [r3, #13]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4b72      	ldr	r3, [pc, #456]	@ (8002310 <mpu6050_Read+0x2a8>)
 8002148:	601a      	str	r2, [r3, #0]


			if (abs(ax) <= OFFSET_AX)
 800214a:	4b6c      	ldr	r3, [pc, #432]	@ (80022fc <mpu6050_Read+0x294>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8002152:	db08      	blt.n	8002166 <mpu6050_Read+0xfe>
 8002154:	4b69      	ldr	r3, [pc, #420]	@ (80022fc <mpu6050_Read+0x294>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800215c:	dc03      	bgt.n	8002166 <mpu6050_Read+0xfe>
				ax_real = 0;
 800215e:	4b6d      	ldr	r3, [pc, #436]	@ (8002314 <mpu6050_Read+0x2ac>)
 8002160:	2200      	movs	r2, #0
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	e025      	b.n	80021b2 <mpu6050_Read+0x14a>
			else
				ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8002166:	4b65      	ldr	r3, [pc, #404]	@ (80022fc <mpu6050_Read+0x294>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002172:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002318 <mpu6050_Read+0x2b0>
 8002176:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800217a:	ee16 0a90 	vmov	r0, s13
 800217e:	f7fe f9e3 	bl	8000548 <__aeabi_f2d>
 8002182:	a359      	add	r3, pc, #356	@ (adr r3, 80022e8 <mpu6050_Read+0x280>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe fa36 	bl	80005f8 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b60      	ldr	r3, [pc, #384]	@ (800231c <mpu6050_Read+0x2b4>)
 800219a:	f7fe fa2d 	bl	80005f8 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe fc39 	bl	8000a1c <__aeabi_d2iz>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	4b59      	ldr	r3, [pc, #356]	@ (8002314 <mpu6050_Read+0x2ac>)
 80021b0:	801a      	strh	r2, [r3, #0]

			if (abs(ay) <= OFFSET_AY)
 80021b2:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <mpu6050_Read+0x298>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 80021ba:	db08      	blt.n	80021ce <mpu6050_Read+0x166>
 80021bc:	4b50      	ldr	r3, [pc, #320]	@ (8002300 <mpu6050_Read+0x298>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80021c4:	dc03      	bgt.n	80021ce <mpu6050_Read+0x166>
				ay_real = 0;
 80021c6:	4b56      	ldr	r3, [pc, #344]	@ (8002320 <mpu6050_Read+0x2b8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	801a      	strh	r2, [r3, #0]
 80021cc:	e025      	b.n	800221a <mpu6050_Read+0x1b2>
			else
				ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 80021ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002300 <mpu6050_Read+0x298>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021da:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002318 <mpu6050_Read+0x2b0>
 80021de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021e2:	ee16 0a90 	vmov	r0, s13
 80021e6:	f7fe f9af 	bl	8000548 <__aeabi_f2d>
 80021ea:	a33f      	add	r3, pc, #252	@ (adr r3, 80022e8 <mpu6050_Read+0x280>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe fa02 	bl	80005f8 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	4b46      	ldr	r3, [pc, #280]	@ (800231c <mpu6050_Read+0x2b4>)
 8002202:	f7fe f9f9 	bl	80005f8 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fc05 	bl	8000a1c <__aeabi_d2iz>
 8002212:	4603      	mov	r3, r0
 8002214:	b21a      	sxth	r2, r3
 8002216:	4b42      	ldr	r3, [pc, #264]	@ (8002320 <mpu6050_Read+0x2b8>)
 8002218:	801a      	strh	r2, [r3, #0]

			if (abs(az) <= OFFSET_AZ)
 800221a:	4b3a      	ldr	r3, [pc, #232]	@ (8002304 <mpu6050_Read+0x29c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a41      	ldr	r2, [pc, #260]	@ (8002324 <mpu6050_Read+0x2bc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	db0a      	blt.n	800223a <mpu6050_Read+0x1d2>
 8002224:	4b37      	ldr	r3, [pc, #220]	@ (8002304 <mpu6050_Read+0x29c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800222c:	4293      	cmp	r3, r2
 800222e:	dc04      	bgt.n	800223a <mpu6050_Read+0x1d2>
				az_real = 9.81 * MULTIPLICADORFLOAT; // en reposo debería medir ~1g hacia Z
 8002230:	4b3d      	ldr	r3, [pc, #244]	@ (8002328 <mpu6050_Read+0x2c0>)
 8002232:	f240 32d5 	movw	r2, #981	@ 0x3d5
 8002236:	801a      	strh	r2, [r3, #0]
 8002238:	e025      	b.n	8002286 <mpu6050_Read+0x21e>
			else
				az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 800223a:	4b32      	ldr	r3, [pc, #200]	@ (8002304 <mpu6050_Read+0x29c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002246:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002318 <mpu6050_Read+0x2b0>
 800224a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800224e:	ee16 0a90 	vmov	r0, s13
 8002252:	f7fe f979 	bl	8000548 <__aeabi_f2d>
 8002256:	a324      	add	r3, pc, #144	@ (adr r3, 80022e8 <mpu6050_Read+0x280>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe f9cc 	bl	80005f8 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <mpu6050_Read+0x2b4>)
 800226e:	f7fe f9c3 	bl	80005f8 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	f7fe fbcf 	bl	8000a1c <__aeabi_d2iz>
 800227e:	4603      	mov	r3, r0
 8002280:	b21a      	sxth	r2, r3
 8002282:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <mpu6050_Read+0x2c0>)
 8002284:	801a      	strh	r2, [r3, #0]

			// Aplicar offset y escalar a grados/segundo (centésimas)
			if (abs(gx) <= OFFSET_GX)
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <mpu6050_Read+0x2a0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 800228e:	db08      	blt.n	80022a2 <mpu6050_Read+0x23a>
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <mpu6050_Read+0x2a0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002298:	dc03      	bgt.n	80022a2 <mpu6050_Read+0x23a>
				gx_real = 0;
 800229a:	4b24      	ldr	r3, [pc, #144]	@ (800232c <mpu6050_Read+0x2c4>)
 800229c:	2200      	movs	r2, #0
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	e014      	b.n	80022cc <mpu6050_Read+0x264>
			else
				gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <mpu6050_Read+0x2a0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ae:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002330 <mpu6050_Read+0x2c8>
 80022b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002334 <mpu6050_Read+0x2cc>
 80022ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c2:	ee17 3a90 	vmov	r3, s15
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	4b18      	ldr	r3, [pc, #96]	@ (800232c <mpu6050_Read+0x2c4>)
 80022ca:	801a      	strh	r2, [r3, #0]

			if (abs(gy) <= OFFSET_GY)
 80022cc:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <mpu6050_Read+0x2a4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 80022d4:	db32      	blt.n	800233c <mpu6050_Read+0x2d4>
 80022d6:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <mpu6050_Read+0x2a4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80022de:	dc2d      	bgt.n	800233c <mpu6050_Read+0x2d4>
				gy_real = 0;
 80022e0:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <mpu6050_Read+0x2d0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	e03e      	b.n	8002366 <mpu6050_Read+0x2fe>
 80022e8:	51eb851f 	.word	0x51eb851f
 80022ec:	40239eb8 	.word	0x40239eb8
 80022f0:	20000688 	.word	0x20000688
 80022f4:	2000002b 	.word	0x2000002b
 80022f8:	200006b8 	.word	0x200006b8
 80022fc:	200006a0 	.word	0x200006a0
 8002300:	200006a4 	.word	0x200006a4
 8002304:	200006a8 	.word	0x200006a8
 8002308:	200006ac 	.word	0x200006ac
 800230c:	200006b0 	.word	0x200006b0
 8002310:	200006b4 	.word	0x200006b4
 8002314:	20000694 	.word	0x20000694
 8002318:	46800000 	.word	0x46800000
 800231c:	40590000 	.word	0x40590000
 8002320:	20000696 	.word	0x20000696
 8002324:	ffffb1e0 	.word	0xffffb1e0
 8002328:	20000698 	.word	0x20000698
 800232c:	2000069a 	.word	0x2000069a
 8002330:	43030000 	.word	0x43030000
 8002334:	42c80000 	.word	0x42c80000
 8002338:	2000069c 	.word	0x2000069c
			else
				gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 800233c:	4b1e      	ldr	r3, [pc, #120]	@ (80023b8 <mpu6050_Read+0x350>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002348:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80023bc <mpu6050_Read+0x354>
 800234c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002350:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80023c0 <mpu6050_Read+0x358>
 8002354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235c:	ee17 3a90 	vmov	r3, s15
 8002360:	b21a      	sxth	r2, r3
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <mpu6050_Read+0x35c>)
 8002364:	801a      	strh	r2, [r3, #0]

			if (abs(gz) <= OFFSET_GZ)
 8002366:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <mpu6050_Read+0x360>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 800236e:	db08      	blt.n	8002382 <mpu6050_Read+0x31a>
 8002370:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <mpu6050_Read+0x360>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8002378:	dc03      	bgt.n	8002382 <mpu6050_Read+0x31a>
				gz_real = 0;
 800237a:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <mpu6050_Read+0x364>)
 800237c:	2200      	movs	r2, #0
 800237e:	801a      	strh	r2, [r3, #0]
 8002380:	e014      	b.n	80023ac <mpu6050_Read+0x344>
			else
				gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <mpu6050_Read+0x360>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80023bc <mpu6050_Read+0x354>
 8002392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002396:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80023c0 <mpu6050_Read+0x358>
 800239a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a2:	ee17 3a90 	vmov	r3, s15
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <mpu6050_Read+0x364>)
 80023aa:	801a      	strh	r2, [r3, #0]

			return 1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <mpu6050_Read+0x34a>
			break;
		}
	}
	return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200006b0 	.word	0x200006b0
 80023bc:	43030000 	.word	0x43030000
 80023c0:	42c80000 	.word	0x42c80000
 80023c4:	2000069c 	.word	0x2000069c
 80023c8:	200006b4 	.word	0x200006b4
 80023cc:	2000069e 	.word	0x2000069e

080023d0 <mpu6050_GetData>:

void mpu6050_GetData(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
    if (ax) *ax = ax_real;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <mpu6050_GetData+0x1e>
 80023e4:	4b19      	ldr	r3, [pc, #100]	@ (800244c <mpu6050_GetData+0x7c>)
 80023e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	801a      	strh	r2, [r3, #0]
    if (ay) *ay = ay_real;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <mpu6050_GetData+0x2e>
 80023f4:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <mpu6050_GetData+0x80>)
 80023f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	801a      	strh	r2, [r3, #0]
    if (az) *az = az_real;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <mpu6050_GetData+0x3e>
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <mpu6050_GetData+0x84>)
 8002406:	f9b3 2000 	ldrsh.w	r2, [r3]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	801a      	strh	r2, [r3, #0]

    if (gx) *gx = gx_real;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <mpu6050_GetData+0x4e>
 8002414:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <mpu6050_GetData+0x88>)
 8002416:	f9b3 2000 	ldrsh.w	r2, [r3]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	801a      	strh	r2, [r3, #0]
    if (gy) *gy = gy_real;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <mpu6050_GetData+0x5e>
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <mpu6050_GetData+0x8c>)
 8002426:	f9b3 2000 	ldrsh.w	r2, [r3]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	801a      	strh	r2, [r3, #0]
    if (gz) *gz = gz_real;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <mpu6050_GetData+0x6e>
 8002434:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <mpu6050_GetData+0x90>)
 8002436:	f9b3 2000 	ldrsh.w	r2, [r3]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	801a      	strh	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000694 	.word	0x20000694
 8002450:	20000696 	.word	0x20000696
 8002454:	20000698 	.word	0x20000698
 8002458:	2000069a 	.word	0x2000069a
 800245c:	2000069c 	.word	0x2000069c
 8002460:	2000069e 	.word	0x2000069e

08002464 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 800247e:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <ssd1306_WriteCommand+0x20>)
 8002480:	681c      	ldr	r4, [r3, #0]
 8002482:	1df9      	adds	r1, r7, #7
 8002484:	2300      	movs	r3, #0
 8002486:	2201      	movs	r2, #1
 8002488:	2078      	movs	r0, #120	@ 0x78
 800248a:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bd90      	pop	{r4, r7, pc}
 8002494:	200006cc 	.word	0x200006cc

08002498 <ssd1306_WriteCommandDMA>:

void ssd1306_WriteCommandDMA(uint8_t byte) {
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <ssd1306_WriteCommandDMA+0x20>)
 80024a4:	681c      	ldr	r4, [r3, #0]
 80024a6:	1df9      	adds	r1, r7, #7
 80024a8:	2300      	movs	r3, #0
 80024aa:	2201      	movs	r2, #1
 80024ac:	2078      	movs	r0, #120	@ 0x78
 80024ae:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	200006d0 	.word	0x200006d0

080024bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <ssd1306_WriteData+0x24>)
 80024c8:	681c      	ldr	r4, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	2340      	movs	r3, #64	@ 0x40
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	2078      	movs	r0, #120	@ 0x78
 80024d4:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop
 80024e0:	200006cc 	.word	0x200006cc

080024e4 <ssd1306_WriteDataDMA>:

void ssd1306_WriteDataDMA(uint8_t* buffer, size_t buff_size) {
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	memWriteDMA(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <ssd1306_WriteDataDMA+0x24>)
 80024f0:	681c      	ldr	r4, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	2340      	movs	r3, #64	@ 0x40
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	2078      	movs	r0, #120	@ 0x78
 80024fc:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	200006d0 	.word	0x200006d0

0800250c <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <ssd1306_Attach_MemWriteDMA+0x1c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200006d0 	.word	0x200006d0

0800252c <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8002534:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <ssd1306_Attach_MemWrite+0x1c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200006cc 	.word	0x200006cc

0800254c <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	200006c8 	.word	0x200006c8

0800256c <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002570:	f7ff ff78 	bl	8002464 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002574:	2064      	movs	r0, #100	@ 0x64
 8002576:	f001 f88f 	bl	8003698 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800257a:	2000      	movs	r0, #0
 800257c:	f000 faa4 	bl	8002ac8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002580:	2020      	movs	r0, #32
 8002582:	f7ff ff77 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002586:	2000      	movs	r0, #0
 8002588:	f7ff ff74 	bl	8002474 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800258c:	20b0      	movs	r0, #176	@ 0xb0
 800258e:	f7ff ff71 	bl	8002474 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002592:	20c8      	movs	r0, #200	@ 0xc8
 8002594:	f7ff ff6e 	bl	8002474 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002598:	2000      	movs	r0, #0
 800259a:	f7ff ff6b 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800259e:	2010      	movs	r0, #16
 80025a0:	f7ff ff68 	bl	8002474 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80025a4:	2040      	movs	r0, #64	@ 0x40
 80025a6:	f7ff ff65 	bl	8002474 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80025aa:	20ff      	movs	r0, #255	@ 0xff
 80025ac:	f000 fa78 	bl	8002aa0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80025b0:	20a1      	movs	r0, #161	@ 0xa1
 80025b2:	f7ff ff5f 	bl	8002474 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80025b6:	20a6      	movs	r0, #166	@ 0xa6
 80025b8:	f7ff ff5c 	bl	8002474 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80025bc:	20a8      	movs	r0, #168	@ 0xa8
 80025be:	f7ff ff59 	bl	8002474 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80025c2:	203f      	movs	r0, #63	@ 0x3f
 80025c4:	f7ff ff56 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025c8:	20a4      	movs	r0, #164	@ 0xa4
 80025ca:	f7ff ff53 	bl	8002474 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80025ce:	20d3      	movs	r0, #211	@ 0xd3
 80025d0:	f7ff ff50 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff ff4d 	bl	8002474 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80025da:	20d5      	movs	r0, #213	@ 0xd5
 80025dc:	f7ff ff4a 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80025e0:	20f0      	movs	r0, #240	@ 0xf0
 80025e2:	f7ff ff47 	bl	8002474 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80025e6:	20d9      	movs	r0, #217	@ 0xd9
 80025e8:	f7ff ff44 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80025ec:	2022      	movs	r0, #34	@ 0x22
 80025ee:	f7ff ff41 	bl	8002474 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80025f2:	20da      	movs	r0, #218	@ 0xda
 80025f4:	f7ff ff3e 	bl	8002474 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80025f8:	2012      	movs	r0, #18
 80025fa:	f7ff ff3b 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80025fe:	20db      	movs	r0, #219	@ 0xdb
 8002600:	f7ff ff38 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002604:	2020      	movs	r0, #32
 8002606:	f7ff ff35 	bl	8002474 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800260a:	208d      	movs	r0, #141	@ 0x8d
 800260c:	f7ff ff32 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002610:	2014      	movs	r0, #20
 8002612:	f7ff ff2f 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002616:	2001      	movs	r0, #1
 8002618:	f000 fa56 	bl	8002ac8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800261c:	2000      	movs	r0, #0
 800261e:	f000 f80f 	bl	8002640 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002622:	f000 f825 	bl	8002670 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002626:	4b05      	ldr	r3, [pc, #20]	@ (800263c <ssd1306_Init+0xd0>)
 8002628:	2200      	movs	r2, #0
 800262a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <ssd1306_Init+0xd0>)
 800262e:	2200      	movs	r2, #0
 8002630:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002632:	4b02      	ldr	r3, [pc, #8]	@ (800263c <ssd1306_Init+0xd0>)
 8002634:	2201      	movs	r2, #1
 8002636:	711a      	strb	r2, [r3, #4]
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000ad4 	.word	0x20000ad4

08002640 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <ssd1306_Fill+0x14>
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <ssd1306_Fill+0x16>
 8002654:	23ff      	movs	r3, #255	@ 0xff
 8002656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800265a:	4619      	mov	r1, r3
 800265c:	4803      	ldr	r0, [pc, #12]	@ (800266c <ssd1306_Fill+0x2c>)
 800265e:	f00b ff15 	bl	800e48c <memset>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200006d4 	.word	0x200006d4

08002670 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002676:	2300      	movs	r3, #0
 8002678:	71fb      	strb	r3, [r7, #7]
 800267a:	e016      	b.n	80026aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	3b50      	subs	r3, #80	@ 0x50
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fef6 	bl	8002474 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002688:	2000      	movs	r0, #0
 800268a:	f7ff fef3 	bl	8002474 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800268e:	2010      	movs	r0, #16
 8002690:	f7ff fef0 	bl	8002474 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	01db      	lsls	r3, r3, #7
 8002698:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <ssd1306_UpdateScreen+0x4c>)
 800269a:	4413      	add	r3, r2
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff0c 	bl	80024bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	3301      	adds	r3, #1
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b07      	cmp	r3, #7
 80026ae:	d9e5      	bls.n	800267c <ssd1306_UpdateScreen+0xc>
    }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200006d4 	.word	0x200006d4

080026c0 <ssd1306_UpdateScreenDMA>:


/* Write the screenbuffer with changed to the screen */
char ssd1306_UpdateScreenDMA(void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction

	if (*SSD1306_TxCplt || state == 1) {
 80026c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <ssd1306_UpdateScreenDMA+0xb0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <ssd1306_UpdateScreenDMA+0x16>
 80026ce:	4b29      	ldr	r3, [pc, #164]	@ (8002774 <ssd1306_UpdateScreenDMA+0xb4>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d149      	bne.n	800276a <ssd1306_UpdateScreenDMA+0xaa>
		*SSD1306_TxCplt = 0;  // Reset completion flag
 80026d6:	4b26      	ldr	r3, [pc, #152]	@ (8002770 <ssd1306_UpdateScreenDMA+0xb0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]

		switch (state) {
 80026de:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <ssd1306_UpdateScreenDMA+0xb4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d840      	bhi.n	800276a <ssd1306_UpdateScreenDMA+0xaa>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <ssd1306_UpdateScreenDMA+0x30>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002717 	.word	0x08002717
 80026f8:	08002725 	.word	0x08002725
 80026fc:	08002733 	.word	0x08002733
		case 1:  // Set page address
			ssd1306_WriteCommandDMA(0xB0 + current_page);
 8002700:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <ssd1306_UpdateScreenDMA+0xb8>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	3b50      	subs	r3, #80	@ 0x50
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fec5 	bl	8002498 <ssd1306_WriteCommandDMA>
			state = 2;
 800270e:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <ssd1306_UpdateScreenDMA+0xb4>)
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
			break;
 8002714:	e029      	b.n	800276a <ssd1306_UpdateScreenDMA+0xaa>
		case 2:  // Set column address low nibble
			ssd1306_WriteCommandDMA(0x00 + SSD1306_X_OFFSET_LOWER);
 8002716:	2000      	movs	r0, #0
 8002718:	f7ff febe 	bl	8002498 <ssd1306_WriteCommandDMA>
			state = 3;
 800271c:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <ssd1306_UpdateScreenDMA+0xb4>)
 800271e:	2203      	movs	r2, #3
 8002720:	701a      	strb	r2, [r3, #0]
			break;
 8002722:	e022      	b.n	800276a <ssd1306_UpdateScreenDMA+0xaa>
		case 3:  // Set column address high nibble
			ssd1306_WriteCommandDMA(0x10 + SSD1306_X_OFFSET_UPPER);
 8002724:	2010      	movs	r0, #16
 8002726:	f7ff feb7 	bl	8002498 <ssd1306_WriteCommandDMA>
			state = 4;
 800272a:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <ssd1306_UpdateScreenDMA+0xb4>)
 800272c:	2204      	movs	r2, #4
 800272e:	701a      	strb	r2, [r3, #0]
			break;
 8002730:	e01b      	b.n	800276a <ssd1306_UpdateScreenDMA+0xaa>
		case 4:  // Write page data
			ssd1306_WriteDataDMA(&SSD1306_Buffer[SSD1306_WIDTH*current_page],SSD1306_WIDTH);
 8002732:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <ssd1306_UpdateScreenDMA+0xb8>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	01db      	lsls	r3, r3, #7
 8002738:	4a10      	ldr	r2, [pc, #64]	@ (800277c <ssd1306_UpdateScreenDMA+0xbc>)
 800273a:	4413      	add	r3, r2
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fed0 	bl	80024e4 <ssd1306_WriteDataDMA>
			current_page++;
 8002744:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <ssd1306_UpdateScreenDMA+0xb8>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <ssd1306_UpdateScreenDMA+0xb8>)
 800274e:	701a      	strb	r2, [r3, #0]
			state = 1;  // Start over with next page
 8002750:	4b08      	ldr	r3, [pc, #32]	@ (8002774 <ssd1306_UpdateScreenDMA+0xb4>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]

			if (current_page > 7){//SSD1306_HEIGHT/8) {
 8002756:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <ssd1306_UpdateScreenDMA+0xb8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b07      	cmp	r3, #7
 800275c:	d904      	bls.n	8002768 <ssd1306_UpdateScreenDMA+0xa8>
				current_page = 0;
 800275e:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <ssd1306_UpdateScreenDMA+0xb8>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
				return 1;
 8002764:	2301      	movs	r3, #1
 8002766:	e001      	b.n	800276c <ssd1306_UpdateScreenDMA+0xac>
			}
			break;
 8002768:	bf00      	nop
		}
	}
	return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200006c8 	.word	0x200006c8
 8002774:	2000002c 	.word	0x2000002c
 8002778:	20000ada 	.word	0x20000ada
 800277c:	200006d4 	.word	0x200006d4

08002780 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	460b      	mov	r3, r1
 800278c:	71bb      	strb	r3, [r7, #6]
 800278e:	4613      	mov	r3, r2
 8002790:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db3d      	blt.n	8002816 <ssd1306_DrawPixel+0x96>
 800279a:	79bb      	ldrb	r3, [r7, #6]
 800279c:	2b3f      	cmp	r3, #63	@ 0x3f
 800279e:	d83a      	bhi.n	8002816 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80027a0:	797b      	ldrb	r3, [r7, #5]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d11a      	bne.n	80027dc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027a6:	79fa      	ldrb	r2, [r7, #7]
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	08db      	lsrs	r3, r3, #3
 80027ac:	b2d8      	uxtb	r0, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	01db      	lsls	r3, r3, #7
 80027b2:	4413      	add	r3, r2
 80027b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <ssd1306_DrawPixel+0xa4>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	b25a      	sxtb	r2, r3
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	b25b      	sxtb	r3, r3
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b259      	sxtb	r1, r3
 80027cc:	79fa      	ldrb	r2, [r7, #7]
 80027ce:	4603      	mov	r3, r0
 80027d0:	01db      	lsls	r3, r3, #7
 80027d2:	4413      	add	r3, r2
 80027d4:	b2c9      	uxtb	r1, r1
 80027d6:	4a13      	ldr	r2, [pc, #76]	@ (8002824 <ssd1306_DrawPixel+0xa4>)
 80027d8:	54d1      	strb	r1, [r2, r3]
 80027da:	e01d      	b.n	8002818 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	79bb      	ldrb	r3, [r7, #6]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	b2d8      	uxtb	r0, r3
 80027e4:	4603      	mov	r3, r0
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	4413      	add	r3, r2
 80027ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002824 <ssd1306_DrawPixel+0xa4>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	79bb      	ldrb	r3, [r7, #6]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	b25b      	sxtb	r3, r3
 8002802:	4013      	ands	r3, r2
 8002804:	b259      	sxtb	r1, r3
 8002806:	79fa      	ldrb	r2, [r7, #7]
 8002808:	4603      	mov	r3, r0
 800280a:	01db      	lsls	r3, r3, #7
 800280c:	4413      	add	r3, r2
 800280e:	b2c9      	uxtb	r1, r1
 8002810:	4a04      	ldr	r2, [pc, #16]	@ (8002824 <ssd1306_DrawPixel+0xa4>)
 8002812:	54d1      	strb	r1, [r2, r3]
 8002814:	e000      	b.n	8002818 <ssd1306_DrawPixel+0x98>
        return;
 8002816:	bf00      	nop
    }
}
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	200006d4 	.word	0x200006d4

08002828 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	4604      	mov	r4, r0
 8002830:	4638      	mov	r0, r7
 8002832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002836:	4623      	mov	r3, r4
 8002838:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b1f      	cmp	r3, #31
 800283e:	d902      	bls.n	8002846 <ssd1306_WriteChar+0x1e>
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b7e      	cmp	r3, #126	@ 0x7e
 8002844:	d901      	bls.n	800284a <ssd1306_WriteChar+0x22>
        return 0;
 8002846:	2300      	movs	r3, #0
 8002848:	e079      	b.n	800293e <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <ssd1306_WriteChar+0x34>
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	3b20      	subs	r3, #32
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	e000      	b.n	800285e <ssd1306_WriteChar+0x36>
 800285c:	783b      	ldrb	r3, [r7, #0]
 800285e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002860:	4b39      	ldr	r3, [pc, #228]	@ (8002948 <ssd1306_WriteChar+0x120>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	4413      	add	r3, r2
 800286a:	2b80      	cmp	r3, #128	@ 0x80
 800286c:	dc06      	bgt.n	800287c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800286e:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <ssd1306_WriteChar+0x120>)
 8002870:	885b      	ldrh	r3, [r3, #2]
 8002872:	461a      	mov	r2, r3
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002878:	2b40      	cmp	r3, #64	@ 0x40
 800287a:	dd01      	ble.n	8002880 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800287c:	2300      	movs	r3, #0
 800287e:	e05e      	b.n	800293e <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	e04d      	b.n	8002922 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	3b20      	subs	r3, #32
 800288c:	7879      	ldrb	r1, [r7, #1]
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4619      	mov	r1, r3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	440b      	add	r3, r1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e036      	b.n	8002914 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d013      	beq.n	80028de <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028b6:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <ssd1306_WriteChar+0x120>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	b2d8      	uxtb	r0, r3
 80028c4:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <ssd1306_WriteChar+0x120>)
 80028c6:	885b      	ldrh	r3, [r3, #2]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7ff ff52 	bl	8002780 <ssd1306_DrawPixel>
 80028dc:	e017      	b.n	800290e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028de:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <ssd1306_WriteChar+0x120>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	b2d8      	uxtb	r0, r3
 80028ec:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <ssd1306_WriteChar+0x120>)
 80028ee:	885b      	ldrh	r3, [r3, #2]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	b2d9      	uxtb	r1, r3
 80028fa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	f7ff ff39 	bl	8002780 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	3301      	adds	r3, #1
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	429a      	cmp	r2, r3
 800291a:	d3c4      	bcc.n	80028a6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	3301      	adds	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	787b      	ldrb	r3, [r7, #1]
 8002924:	461a      	mov	r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4293      	cmp	r3, r2
 800292a:	d3ac      	bcc.n	8002886 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <ssd1306_WriteChar+0x120>)
 800292e:	881a      	ldrh	r2, [r3, #0]
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	b29b      	uxth	r3, r3
 8002934:	4413      	add	r3, r2
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <ssd1306_WriteChar+0x120>)
 800293a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	@ 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	20000ad4 	.word	0x20000ad4

0800294c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	4638      	mov	r0, r7
 8002956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800295a:	e013      	b.n	8002984 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	7818      	ldrb	r0, [r3, #0]
 8002960:	7e3b      	ldrb	r3, [r7, #24]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	463b      	mov	r3, r7
 8002966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002968:	f7ff ff5e 	bl	8002828 <ssd1306_WriteChar>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d002      	beq.n	800297e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	e008      	b.n	8002990 <ssd1306_WriteString+0x44>
        }
        str++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e7      	bne.n	800295c <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	781b      	ldrb	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	460a      	mov	r2, r1
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <ssd1306_SetCursor+0x2c>)
 80029ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80029b0:	79bb      	ldrb	r3, [r7, #6]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <ssd1306_SetCursor+0x2c>)
 80029b6:	805a      	strh	r2, [r3, #2]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	20000ad4 	.word	0x20000ad4

080029c8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4604      	mov	r4, r0
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	71fb      	strb	r3, [r7, #7]
 80029da:	4603      	mov	r3, r0
 80029dc:	71bb      	strb	r3, [r7, #6]
 80029de:	460b      	mov	r3, r1
 80029e0:	717b      	strb	r3, [r7, #5]
 80029e2:	4613      	mov	r3, r2
 80029e4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80029e6:	797a      	ldrb	r2, [r7, #5]
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bfb8      	it	lt
 80029f0:	425b      	neglt	r3, r3
 80029f2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80029f4:	793a      	ldrb	r2, [r7, #4]
 80029f6:	79bb      	ldrb	r3, [r7, #6]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bfb8      	it	lt
 80029fe:	425b      	neglt	r3, r3
 8002a00:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002a02:	79fa      	ldrb	r2, [r7, #7]
 8002a04:	797b      	ldrb	r3, [r7, #5]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d201      	bcs.n	8002a0e <ssd1306_Line+0x46>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e001      	b.n	8002a12 <ssd1306_Line+0x4a>
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002a14:	79ba      	ldrb	r2, [r7, #6]
 8002a16:	793b      	ldrb	r3, [r7, #4]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d201      	bcs.n	8002a20 <ssd1306_Line+0x58>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e001      	b.n	8002a24 <ssd1306_Line+0x5c>
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295
 8002a24:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8002a2e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002a32:	7939      	ldrb	r1, [r7, #4]
 8002a34:	797b      	ldrb	r3, [r7, #5]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fea2 	bl	8002780 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002a3c:	e024      	b.n	8002a88 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002a3e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002a42:	79b9      	ldrb	r1, [r7, #6]
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fe9a 	bl	8002780 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	425b      	negs	r3, r3
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	dd08      	ble.n	8002a6e <ssd1306_Line+0xa6>
            error -= deltaY;
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	da08      	bge.n	8002a88 <ssd1306_Line+0xc0>
            error += deltaX;
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	4413      	add	r3, r2
 8002a86:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002a88:	79fa      	ldrb	r2, [r7, #7]
 8002a8a:	797b      	ldrb	r3, [r7, #5]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1d6      	bne.n	8002a3e <ssd1306_Line+0x76>
 8002a90:	79ba      	ldrb	r2, [r7, #6]
 8002a92:	793b      	ldrb	r3, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1d2      	bne.n	8002a3e <ssd1306_Line+0x76>
        }
    }
    return;
 8002a98:	bf00      	nop
}
 8002a9a:	3724      	adds	r7, #36	@ 0x24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002aaa:	2381      	movs	r3, #129	@ 0x81
 8002aac:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fcdf 	bl	8002474 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fcdb 	bl	8002474 <ssd1306_WriteCommand>
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002ad8:	23af      	movs	r3, #175	@ 0xaf
 8002ada:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <ssd1306_SetDisplayOn+0x38>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	715a      	strb	r2, [r3, #5]
 8002ae2:	e004      	b.n	8002aee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002ae4:	23ae      	movs	r3, #174	@ 0xae
 8002ae6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <ssd1306_SetDisplayOn+0x38>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fcbf 	bl	8002474 <ssd1306_WriteCommand>
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000ad4 	.word	0x20000ad4

08002b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <HAL_MspInit+0x4c>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	4a0f      	ldr	r2, [pc, #60]	@ (8002b50 <HAL_MspInit+0x4c>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_MspInit+0x4c>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_MspInit+0x4c>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <HAL_MspInit+0x4c>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_MspInit+0x4c>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800

08002b54 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	@ 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a32      	ldr	r2, [pc, #200]	@ (8002c3c <HAL_ADC_MspInit+0xe8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d15e      	bne.n	8002c34 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_ADC_MspInit+0xec>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	4a30      	ldr	r2, [pc, #192]	@ (8002c40 <HAL_ADC_MspInit+0xec>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b86:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <HAL_ADC_MspInit+0xec>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <HAL_ADC_MspInit+0xec>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a29      	ldr	r2, [pc, #164]	@ (8002c40 <HAL_ADC_MspInit+0xec>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <HAL_ADC_MspInit+0xec>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002bae:	23ff      	movs	r3, #255	@ 0xff
 8002bb0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4820      	ldr	r0, [pc, #128]	@ (8002c44 <HAL_ADC_MspInit+0xf0>)
 8002bc2:	f001 ff6b 	bl	8004a9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002bc8:	4a20      	ldr	r2, [pc, #128]	@ (8002c4c <HAL_ADC_MspInit+0xf8>)
 8002bca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002be0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002be4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002be8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bee:	4b16      	ldr	r3, [pc, #88]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002bf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bf4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c02:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c08:	480f      	ldr	r0, [pc, #60]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002c0a:	f001 fb9b 	bl	8004344 <HAL_DMA_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002c14:	f7ff f9ac 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002c1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_ADC_MspInit+0xf4>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2100      	movs	r1, #0
 8002c28:	2012      	movs	r0, #18
 8002c2a:	f001 fb54 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c2e:	2012      	movs	r0, #18
 8002c30:	f001 fb6d 	bl	800430e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c34:	bf00      	nop
 8002c36:	3728      	adds	r7, #40	@ 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40012000 	.word	0x40012000
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	200001e8 	.word	0x200001e8
 8002c4c:	40026410 	.word	0x40026410

08002c50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	@ 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002dac <HAL_I2C_MspInit+0x15c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f040 8097 	bne.w	8002da2 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <HAL_I2C_MspInit+0x160>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002db0 <HAL_I2C_MspInit+0x160>)
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c84:	4b4a      	ldr	r3, [pc, #296]	@ (8002db0 <HAL_I2C_MspInit+0x160>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c90:	23c0      	movs	r3, #192	@ 0xc0
 8002c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c94:	2312      	movs	r3, #18
 8002c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4842      	ldr	r0, [pc, #264]	@ (8002db4 <HAL_I2C_MspInit+0x164>)
 8002cac:	f001 fef6 	bl	8004a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8002db0 <HAL_I2C_MspInit+0x160>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	4a3d      	ldr	r2, [pc, #244]	@ (8002db0 <HAL_I2C_MspInit+0x160>)
 8002cba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002db0 <HAL_I2C_MspInit+0x160>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002cce:	4a3b      	ldr	r2, [pc, #236]	@ (8002dbc <HAL_I2C_MspInit+0x16c>)
 8002cd0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002cd2:	4b39      	ldr	r3, [pc, #228]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002cd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cd8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cda:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce0:	4b35      	ldr	r3, [pc, #212]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce6:	4b34      	ldr	r3, [pc, #208]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002ce8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cee:	4b32      	ldr	r3, [pc, #200]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d00:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d06:	4b2c      	ldr	r3, [pc, #176]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d0c:	482a      	ldr	r0, [pc, #168]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002d0e:	f001 fb19 	bl	8004344 <HAL_DMA_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002d18:	f7ff f92a 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a26      	ldr	r2, [pc, #152]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002d20:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d22:	4a25      	ldr	r2, [pc, #148]	@ (8002db8 <HAL_I2C_MspInit+0x168>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002d28:	4b25      	ldr	r3, [pc, #148]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d2a:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <HAL_I2C_MspInit+0x174>)
 8002d2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002d2e:	4b24      	ldr	r3, [pc, #144]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d34:	4b22      	ldr	r3, [pc, #136]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d36:	2240      	movs	r2, #64	@ 0x40
 8002d38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d3a:	4b21      	ldr	r3, [pc, #132]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d40:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d48:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002d54:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d5a:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d60:	4b17      	ldr	r3, [pc, #92]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002d66:	4816      	ldr	r0, [pc, #88]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d68:	f001 faec 	bl	8004344 <HAL_DMA_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002d72:	f7ff f8fd 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d7c:	4a10      	ldr	r2, [pc, #64]	@ (8002dc0 <HAL_I2C_MspInit+0x170>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	201f      	movs	r0, #31
 8002d88:	f001 faa5 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d8c:	201f      	movs	r0, #31
 8002d8e:	f001 fabe 	bl	800430e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	2020      	movs	r0, #32
 8002d98:	f001 fa9d 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002d9c:	2020      	movs	r0, #32
 8002d9e:	f001 fab6 	bl	800430e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	@ 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40005400 	.word	0x40005400
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020400 	.word	0x40020400
 8002db8:	2000029c 	.word	0x2000029c
 8002dbc:	40026010 	.word	0x40026010
 8002dc0:	200002fc 	.word	0x200002fc
 8002dc4:	40026028 	.word	0x40026028

08002dc8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a36      	ldr	r2, [pc, #216]	@ (8002eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d12e      	bne.n	8002e38 <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	4a34      	ldr	r2, [pc, #208]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dea:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2018      	movs	r0, #24
 8002dfc:	f001 fa6b 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e00:	2018      	movs	r0, #24
 8002e02:	f001 fa84 	bl	800430e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2019      	movs	r0, #25
 8002e0c:	f001 fa63 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e10:	2019      	movs	r0, #25
 8002e12:	f001 fa7c 	bl	800430e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	201a      	movs	r0, #26
 8002e1c:	f001 fa5b 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e20:	201a      	movs	r0, #26
 8002e22:	f001 fa74 	bl	800430e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	201b      	movs	r0, #27
 8002e2c:	f001 fa53 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002e30:	201b      	movs	r0, #27
 8002e32:	f001 fa6c 	bl	800430e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e36:	e036      	b.n	8002ea6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e40:	d116      	bne.n	8002e70 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e52:	4b18      	ldr	r3, [pc, #96]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	201c      	movs	r0, #28
 8002e64:	f001 fa37 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e68:	201c      	movs	r0, #28
 8002e6a:	f001 fa50 	bl	800430e <HAL_NVIC_EnableIRQ>
}
 8002e6e:	e01a      	b.n	8002ea6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a10      	ldr	r2, [pc, #64]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d115      	bne.n	8002ea6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xec>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	201d      	movs	r0, #29
 8002e9c:	f001 fa1b 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ea0:	201d      	movs	r0, #29
 8002ea2:	f001 fa34 	bl	800430e <HAL_NVIC_EnableIRQ>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40000400 	.word	0x40000400

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <NMI_Handler+0x4>

08002ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <HardFault_Handler+0x4>

08002ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <MemManage_Handler+0x4>

08002ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <BusFault_Handler+0x4>

08002edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <UsageFault_Handler+0x4>

08002ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f12:	f000 fba1 	bl	8003658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002f20:	4802      	ldr	r0, [pc, #8]	@ (8002f2c <DMA1_Stream0_IRQHandler+0x10>)
 8002f22:	f001 fb37 	bl	8004594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000029c 	.word	0x2000029c

08002f30 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002f34:	4802      	ldr	r0, [pc, #8]	@ (8002f40 <DMA1_Stream1_IRQHandler+0x10>)
 8002f36:	f001 fb2d 	bl	8004594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200002fc 	.word	0x200002fc

08002f44 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f48:	4802      	ldr	r0, [pc, #8]	@ (8002f54 <ADC_IRQHandler+0x10>)
 8002f4a:	f000 fc0c 	bl	8003766 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200001a0 	.word	0x200001a0

08002f58 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f5c:	4802      	ldr	r0, [pc, #8]	@ (8002f68 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002f5e:	f006 fd35 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000035c 	.word	0x2000035c

08002f6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f70:	4802      	ldr	r0, [pc, #8]	@ (8002f7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f72:	f006 fd2b 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000035c 	.word	0x2000035c

08002f80 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f84:	4802      	ldr	r0, [pc, #8]	@ (8002f90 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002f86:	f006 fd21 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000035c 	.word	0x2000035c

08002f94 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <TIM1_CC_IRQHandler+0x10>)
 8002f9a:	f006 fd17 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000035c 	.word	0x2000035c

08002fa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <TIM2_IRQHandler+0x10>)
 8002fae:	f006 fd0d 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200003a4 	.word	0x200003a4

08002fbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fc0:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <TIM3_IRQHandler+0x10>)
 8002fc2:	f006 fd03 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200003ec 	.word	0x200003ec

08002fd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002fd4:	4802      	ldr	r0, [pc, #8]	@ (8002fe0 <I2C1_EV_IRQHandler+0x10>)
 8002fd6:	f002 fc5b 	bl	8005890 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000248 	.word	0x20000248

08002fe4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002fe8:	4802      	ldr	r0, [pc, #8]	@ (8002ff4 <I2C1_ER_IRQHandler+0x10>)
 8002fea:	f002 fdc2 	bl	8005b72 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000248 	.word	0x20000248

08002ff8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ffc:	4802      	ldr	r0, [pc, #8]	@ (8003008 <DMA2_Stream0_IRQHandler+0x10>)
 8002ffe:	f001 fac9 	bl	8004594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200001e8 	.word	0x200001e8

0800300c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003010:	4802      	ldr	r0, [pc, #8]	@ (800301c <OTG_FS_IRQHandler+0x10>)
 8003012:	f004 fed7 	bl	8007dc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200013cc 	.word	0x200013cc

08003020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003028:	4a14      	ldr	r2, [pc, #80]	@ (800307c <_sbrk+0x5c>)
 800302a:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <_sbrk+0x60>)
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	@ (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003050:	f00b fa24 	bl	800e49c <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	4a05      	ldr	r2, [pc, #20]	@ (8003084 <_sbrk+0x64>)
 8003070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20020000 	.word	0x20020000
 8003080:	00000400 	.word	0x00000400
 8003084:	20000adc 	.word	0x20000adc
 8003088:	20001c18 	.word	0x20001c18

0800308c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <SystemInit+0x20>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003096:	4a05      	ldr	r2, [pc, #20]	@ (80030ac <SystemInit+0x20>)
 8003098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
 80030bc:	4613      	mov	r3, r2
 80030be:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 80030c0:	78bb      	ldrb	r3, [r7, #2]
 80030c2:	3301      	adds	r3, #1
 80030c4:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	795a      	ldrb	r2, [r3, #5]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	795b      	ldrb	r3, [r3, #5]
 80030dc:	1c59      	adds	r1, r3, #1
 80030de:	b2c8      	uxtb	r0, r1
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	7148      	strb	r0, [r1, #5]
 80030e4:	4413      	add	r3, r2
 80030e6:	2255      	movs	r2, #85	@ 0x55
 80030e8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	795a      	ldrb	r2, [r3, #5]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	799b      	ldrb	r3, [r3, #6]
 80030f2:	4013      	ands	r3, r2
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	795b      	ldrb	r3, [r3, #5]
 8003102:	1c59      	adds	r1, r3, #1
 8003104:	b2c8      	uxtb	r0, r1
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	7148      	strb	r0, [r1, #5]
 800310a:	4413      	add	r3, r2
 800310c:	224e      	movs	r2, #78	@ 0x4e
 800310e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	795a      	ldrb	r2, [r3, #5]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	799b      	ldrb	r3, [r3, #6]
 8003118:	4013      	ands	r3, r2
 800311a:	b2da      	uxtb	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	795b      	ldrb	r3, [r3, #5]
 8003128:	1c59      	adds	r1, r3, #1
 800312a:	b2c8      	uxtb	r0, r1
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	7148      	strb	r0, [r1, #5]
 8003130:	4413      	add	r3, r2
 8003132:	2245      	movs	r2, #69	@ 0x45
 8003134:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	795a      	ldrb	r2, [r3, #5]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	799b      	ldrb	r3, [r3, #6]
 800313e:	4013      	ands	r3, r2
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	795b      	ldrb	r3, [r3, #5]
 800314e:	1c59      	adds	r1, r3, #1
 8003150:	b2c8      	uxtb	r0, r1
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	7148      	strb	r0, [r1, #5]
 8003156:	4413      	add	r3, r2
 8003158:	2252      	movs	r2, #82	@ 0x52
 800315a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	795a      	ldrb	r2, [r3, #5]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	4013      	ands	r3, r2
 8003166:	b2da      	uxtb	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	795b      	ldrb	r3, [r3, #5]
 8003174:	1c59      	adds	r1, r3, #1
 8003176:	b2c8      	uxtb	r0, r1
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	7148      	strb	r0, [r1, #5]
 800317c:	4413      	add	r3, r2
 800317e:	78ba      	ldrb	r2, [r7, #2]
 8003180:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	795a      	ldrb	r2, [r3, #5]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	4013      	ands	r3, r2
 800318c:	b2da      	uxtb	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	795b      	ldrb	r3, [r3, #5]
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	b2c8      	uxtb	r0, r1
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	7148      	strb	r0, [r1, #5]
 80031a2:	4413      	add	r3, r2
 80031a4:	223a      	movs	r2, #58	@ 0x3a
 80031a6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	795a      	ldrb	r2, [r3, #5]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	799b      	ldrb	r3, [r3, #6]
 80031b0:	4013      	ands	r3, r2
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	795b      	ldrb	r3, [r3, #5]
 80031c0:	1c59      	adds	r1, r3, #1
 80031c2:	b2c8      	uxtb	r0, r1
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	7148      	strb	r0, [r1, #5]
 80031c8:	4413      	add	r3, r2
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	795a      	ldrb	r2, [r3, #5]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	799b      	ldrb	r3, [r3, #6]
 80031d6:	4013      	ands	r3, r2
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2207      	movs	r2, #7
 80031e2:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7a5a      	ldrb	r2, [r3, #9]
 80031e8:	78b9      	ldrb	r1, [r7, #2]
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	404b      	eors	r3, r1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4053      	eors	r3, r2
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7a5b      	ldrb	r3, [r3, #9]
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	79db      	ldrb	r3, [r3, #7]
 800321e:	3301      	adds	r3, #1
 8003220:	b2da      	uxtb	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	795b      	ldrb	r3, [r3, #5]
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	b2c8      	uxtb	r0, r1
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	7148      	strb	r0, [r1, #5]
 8003236:	4413      	add	r3, r2
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	795a      	ldrb	r2, [r3, #5]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	799b      	ldrb	r3, [r3, #6]
 8003244:	4013      	ands	r3, r2
 8003246:	b2da      	uxtb	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7a5a      	ldrb	r2, [r3, #9]
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	4053      	eors	r3, r2
 8003254:	b2da      	uxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7a5b      	ldrb	r3, [r3, #9]
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 800326a:	b490      	push	{r4, r7}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8003278:	e02c      	b.n	80032d4 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	79db      	ldrb	r3, [r3, #7]
 800327e:	3301      	adds	r3, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	441a      	add	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	795b      	ldrb	r3, [r3, #5]
 8003298:	1c58      	adds	r0, r3, #1
 800329a:	b2c4      	uxtb	r4, r0
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	7144      	strb	r4, [r0, #5]
 80032a0:	440b      	add	r3, r1
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	795a      	ldrb	r2, [r3, #5]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	799b      	ldrb	r3, [r3, #6]
 80032ae:	4013      	ands	r3, r2
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	73fa      	strb	r2, [r7, #15]
 80032c0:	461a      	mov	r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7a5b      	ldrb	r3, [r3, #9]
 80032cc:	4053      	eors	r3, r2
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	4413      	add	r3, r2
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1ca      	bne.n	800327a <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7a5b      	ldrb	r3, [r3, #9]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc90      	pop	{r4, r7}
 80032f0:	4770      	bx	lr
	...

080032f4 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	795b      	ldrb	r3, [r3, #5]
 8003304:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8003306:	e0e4      	b.n	80034d2 <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8003308:	4b78      	ldr	r3, [pc, #480]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b07      	cmp	r3, #7
 800330e:	f200 80c9 	bhi.w	80034a4 <unerPrtcl_DecodeHeader+0x1b0>
 8003312:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <unerPrtcl_DecodeHeader+0x24>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003339 	.word	0x08003339
 800331c:	08003353 	.word	0x08003353
 8003320:	08003391 	.word	0x08003391
 8003324:	080033bd 	.word	0x080033bd
 8003328:	080033e9 	.word	0x080033e9
 800332c:	080033ff 	.word	0x080033ff
 8003330:	080034a5 	.word	0x080034a5
 8003334:	08003461 	.word	0x08003461
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	7912      	ldrb	r2, [r2, #4]
 8003340:	4413      	add	r3, r2
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b55      	cmp	r3, #85	@ 0x55
 8003346:	f040 80b1 	bne.w	80034ac <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 800334a:	4b68      	ldr	r3, [pc, #416]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
                }
            break;
 8003350:	e0ac      	b.n	80034ac <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	7912      	ldrb	r2, [r2, #4]
 800335a:	4413      	add	r3, r2
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003360:	d103      	bne.n	800336a <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8003362:	4b62      	ldr	r3, [pc, #392]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 8003364:	2202      	movs	r2, #2
 8003366:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8003368:	e0a2      	b.n	80034b0 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	7912      	ldrb	r2, [r2, #4]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b55      	cmp	r3, #85	@ 0x55
 8003378:	f000 809a 	beq.w	80034b0 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 800337c:	4b5b      	ldr	r3, [pc, #364]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	791b      	ldrb	r3, [r3, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	711a      	strb	r2, [r3, #4]
            break;
 800338e:	e08f      	b.n	80034b0 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	7912      	ldrb	r2, [r2, #4]
 8003398:	4413      	add	r3, r2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b45      	cmp	r3, #69	@ 0x45
 800339e:	d103      	bne.n	80033a8 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 80033a0:	4b52      	ldr	r3, [pc, #328]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 80033a2:	2203      	movs	r2, #3
 80033a4:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80033a6:	e086      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80033a8:	4b50      	ldr	r3, [pc, #320]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	791b      	ldrb	r3, [r3, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	711a      	strb	r2, [r3, #4]
            break;
 80033ba:	e07c      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	7912      	ldrb	r2, [r2, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b52      	cmp	r3, #82	@ 0x52
 80033ca:	d103      	bne.n	80033d4 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 80033cc:	4b47      	ldr	r3, [pc, #284]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 80033ce:	2204      	movs	r2, #4
 80033d0:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80033d2:	e070      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80033d4:	4b45      	ldr	r3, [pc, #276]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	791b      	ldrb	r3, [r3, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	711a      	strb	r2, [r3, #4]
            break;
 80033e6:	e066      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	7912      	ldrb	r2, [r2, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 80033f6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 80033f8:	2205      	movs	r2, #5
 80033fa:	701a      	strb	r2, [r3, #0]
            break;
 80033fc:	e05b      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	7912      	ldrb	r2, [r2, #4]
 8003406:	4413      	add	r3, r2
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b3a      	cmp	r3, #58	@ 0x3a
 800340c:	d11e      	bne.n	800344c <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 800340e:	4b37      	ldr	r3, [pc, #220]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 8003410:	2207      	movs	r2, #7
 8003412:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	791b      	ldrb	r3, [r3, #4]
 8003418:	3301      	adds	r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7a1a      	ldrb	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	799b      	ldrb	r3, [r3, #6]
 8003428:	4013      	ands	r3, r2
 800342a:	b2da      	uxtb	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7a5a      	ldrb	r2, [r3, #9]
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	4053      	eors	r3, r2
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8003444:	b2da      	uxtb	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800344a:	e034      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 800344c:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	791b      	ldrb	r3, [r3, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	b2da      	uxtb	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	711a      	strb	r2, [r3, #4]
            break;
 800345e:	e02a      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	3b01      	subs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00c      	beq.n	8003486 <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7a5a      	ldrb	r2, [r3, #9]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	7909      	ldrb	r1, [r1, #4]
 8003478:	440b      	add	r3, r1
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4053      	eors	r3, r2
 800347e:	b2da      	uxtb	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8003484:	e016      	b.n	80034b4 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 8003486:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	7912      	ldrb	r2, [r2, #4]
 8003494:	4413      	add	r3, r2
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7a5b      	ldrb	r3, [r3, #9]
 800349c:	429a      	cmp	r2, r3
 800349e:	d109      	bne.n	80034b4 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e01d      	b.n	80034e0 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <unerPrtcl_DecodeHeader+0x1f8>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
            break;
 80034aa:	e004      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80034ac:	bf00      	nop
 80034ae:	e002      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80034b0:	bf00      	nop
 80034b2:	e000      	b.n	80034b6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80034b4:	bf00      	nop
        }
        dataRx->indexR++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	791b      	ldrb	r3, [r3, #4]
 80034ba:	3301      	adds	r3, #1
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	791a      	ldrb	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	799b      	ldrb	r3, [r3, #6]
 80034ca:	4013      	ands	r3, r2
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	791b      	ldrb	r3, [r3, #4]
 80034d6:	7bba      	ldrb	r2, [r7, #14]
 80034d8:	429a      	cmp	r2, r3
 80034da:	f47f af15 	bne.w	8003308 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	20000ae0 	.word	0x20000ae0

080034f0 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	22ff      	movs	r2, #255	@ 0xff
 8003520:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2200      	movs	r2, #0
 8003532:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2200      	movs	r2, #0
 8003538:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2200      	movs	r2, #0
 800353e:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	22ff      	movs	r2, #255	@ 0xff
 800354a:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2200      	movs	r2, #0
 8003550:	725a      	strb	r2, [r3, #9]

}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003598 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003564:	f7ff fd92 	bl	800308c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003568:	480c      	ldr	r0, [pc, #48]	@ (800359c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800356a:	490d      	ldr	r1, [pc, #52]	@ (80035a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800356c:	4a0d      	ldr	r2, [pc, #52]	@ (80035a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800356e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003570:	e002      	b.n	8003578 <LoopCopyDataInit>

08003572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003576:	3304      	adds	r3, #4

08003578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800357a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800357c:	d3f9      	bcc.n	8003572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800357e:	4a0a      	ldr	r2, [pc, #40]	@ (80035a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003580:	4c0a      	ldr	r4, [pc, #40]	@ (80035ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003584:	e001      	b.n	800358a <LoopFillZerobss>

08003586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003588:	3204      	adds	r2, #4

0800358a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800358a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800358c:	d3fb      	bcc.n	8003586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800358e:	f00a ff8b 	bl	800e4a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003592:	f7fe f961 	bl	8001858 <main>
  bx  lr    
 8003596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800359c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80035a4:	0800f454 	.word	0x0800f454
  ldr r2, =_sbss
 80035a8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80035ac:	20001c18 	.word	0x20001c18

080035b0 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b0:	e7fe      	b.n	80035b0 <DMA1_Stream2_IRQHandler>
	...

080035b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b8:	4b0e      	ldr	r3, [pc, #56]	@ (80035f4 <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0d      	ldr	r2, [pc, #52]	@ (80035f4 <HAL_Init+0x40>)
 80035be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035c4:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <HAL_Init+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	@ (80035f4 <HAL_Init+0x40>)
 80035ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d0:	4b08      	ldr	r3, [pc, #32]	@ (80035f4 <HAL_Init+0x40>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a07      	ldr	r2, [pc, #28]	@ (80035f4 <HAL_Init+0x40>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035dc:	2003      	movs	r0, #3
 80035de:	f000 fe6f 	bl	80042c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035e2:	200f      	movs	r0, #15
 80035e4:	f000 f808 	bl	80035f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e8:	f7ff fa8c 	bl	8002b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023c00 	.word	0x40023c00

080035f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <HAL_InitTick+0x54>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_InitTick+0x58>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fe87 	bl	800432a <HAL_SYSTICK_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e00e      	b.n	8003644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b0f      	cmp	r3, #15
 800362a:	d80a      	bhi.n	8003642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800362c:	2200      	movs	r2, #0
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f000 fe4f 	bl	80042d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003638:	4a06      	ldr	r2, [pc, #24]	@ (8003654 <HAL_InitTick+0x5c>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000030 	.word	0x20000030
 8003650:	20000038 	.word	0x20000038
 8003654:	20000034 	.word	0x20000034

08003658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_IncTick+0x20>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_IncTick+0x24>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4413      	add	r3, r2
 8003668:	4a04      	ldr	r2, [pc, #16]	@ (800367c <HAL_IncTick+0x24>)
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000038 	.word	0x20000038
 800367c:	20000ae4 	.word	0x20000ae4

08003680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return uwTick;
 8003684:	4b03      	ldr	r3, [pc, #12]	@ (8003694 <HAL_GetTick+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000ae4 	.word	0x20000ae4

08003698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7ff ffee 	bl	8003680 <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d005      	beq.n	80036be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_Delay+0x44>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036be:	bf00      	nop
 80036c0:	f7ff ffde 	bl	8003680 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d8f7      	bhi.n	80036c0 <HAL_Delay+0x28>
  {
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000038 	.word	0x20000038

080036e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e033      	b.n	800375e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fa28 	bl	8002b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d118      	bne.n	8003750 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003726:	f023 0302 	bic.w	r3, r3, #2
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fb6c 	bl	8003e10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40
 800374e:	e001      	b.n	8003754 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d049      	beq.n	8003830 <HAL_ADC_IRQHandler+0xca>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d046      	beq.n	8003830 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d12b      	bne.n	8003820 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d127      	bne.n	8003820 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d119      	bne.n	8003820 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0220 	bic.w	r2, r2, #32
 80037fa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd fab9 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f06f 0212 	mvn.w	r2, #18
 800382e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d057      	beq.n	80038f6 <HAL_ADC_IRQHandler+0x190>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d054      	beq.n	80038f6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d139      	bne.n	80038e6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800387c:	2b00      	cmp	r3, #0
 800387e:	d006      	beq.n	800388e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800388a:	2b00      	cmp	r3, #0
 800388c:	d12b      	bne.n	80038e6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003898:	2b00      	cmp	r3, #0
 800389a:	d124      	bne.n	80038e6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11d      	bne.n	80038e6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d119      	bne.n	80038e6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d105      	bne.n	80038e6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fc10 	bl	800410c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 020c 	mvn.w	r2, #12
 80038f4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003904:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d017      	beq.n	800393c <HAL_ADC_IRQHandler+0x1d6>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10d      	bne.n	800393c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f929 	bl	8003b84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0201 	mvn.w	r2, #1
 800393a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800394a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d015      	beq.n	800397e <HAL_ADC_IRQHandler+0x218>
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d012      	beq.n	800397e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395c:	f043 0202 	orr.w	r2, r3, #2
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0220 	mvn.w	r2, #32
 800396c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f912 	bl	8003b98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0220 	mvn.w	r2, #32
 800397c:	601a      	str	r2, [r3, #0]
  }
}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_Start_DMA+0x22>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0d0      	b.n	8003b4c <HAL_ADC_Start_DMA+0x1c4>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d018      	beq.n	80039f2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039d0:	4b60      	ldr	r3, [pc, #384]	@ (8003b54 <HAL_ADC_Start_DMA+0x1cc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a60      	ldr	r2, [pc, #384]	@ (8003b58 <HAL_ADC_Start_DMA+0x1d0>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	0c9a      	lsrs	r2, r3, #18
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80039e4:	e002      	b.n	80039ec <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f9      	bne.n	80039e6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a00:	d107      	bne.n	8003a12 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a10:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	f040 8088 	bne.w	8003b32 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a60:	d106      	bne.n	8003a70 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f023 0206 	bic.w	r2, r3, #6
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a6e:	e002      	b.n	8003a76 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a7e:	4b37      	ldr	r3, [pc, #220]	@ (8003b5c <HAL_ADC_Start_DMA+0x1d4>)
 8003a80:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a86:	4a36      	ldr	r2, [pc, #216]	@ (8003b60 <HAL_ADC_Start_DMA+0x1d8>)
 8003a88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	4a35      	ldr	r2, [pc, #212]	@ (8003b64 <HAL_ADC_Start_DMA+0x1dc>)
 8003a90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	4a34      	ldr	r2, [pc, #208]	@ (8003b68 <HAL_ADC_Start_DMA+0x1e0>)
 8003a98:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003ab2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	334c      	adds	r3, #76	@ 0x4c
 8003ace:	4619      	mov	r1, r3
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f000 fce4 	bl	80044a0 <HAL_DMA_Start_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10f      	bne.n	8003b08 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d129      	bne.n	8003b4a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	e020      	b.n	8003b4a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <HAL_ADC_Start_DMA+0x1e4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d11b      	bne.n	8003b4a <HAL_ADC_Start_DMA+0x1c2>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d114      	bne.n	8003b4a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	e00b      	b.n	8003b4a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000030 	.word	0x20000030
 8003b58:	431bde83 	.word	0x431bde83
 8003b5c:	40012300 	.word	0x40012300
 8003b60:	08004009 	.word	0x08004009
 8003b64:	080040c3 	.word	0x080040c3
 8003b68:	080040df 	.word	0x080040df
 8003b6c:	40012000 	.word	0x40012000

08003b70 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x1c>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e113      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x244>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	d925      	bls.n	8003c24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68d9      	ldr	r1, [r3, #12]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	3b1e      	subs	r3, #30
 8003bee:	2207      	movs	r2, #7
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68d9      	ldr	r1, [r3, #12]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	4603      	mov	r3, r0
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4403      	add	r3, r0
 8003c16:	3b1e      	subs	r3, #30
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	e022      	b.n	8003c6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6919      	ldr	r1, [r3, #16]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	4613      	mov	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4413      	add	r3, r2
 8003c38:	2207      	movs	r2, #7
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	400a      	ands	r2, r1
 8003c46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6919      	ldr	r1, [r3, #16]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	4618      	mov	r0, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4403      	add	r3, r0
 8003c60:	409a      	lsls	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d824      	bhi.n	8003cbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	3b05      	subs	r3, #5
 8003c84:	221f      	movs	r2, #31
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	400a      	ands	r2, r1
 8003c92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	3b05      	subs	r3, #5
 8003cae:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cba:	e04c      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	d824      	bhi.n	8003d0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3b23      	subs	r3, #35	@ 0x23
 8003cd6:	221f      	movs	r2, #31
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b23      	subs	r3, #35	@ 0x23
 8003d00:	fa00 f203 	lsl.w	r2, r0, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d0c:	e023      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3b41      	subs	r3, #65	@ 0x41
 8003d20:	221f      	movs	r2, #31
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43da      	mvns	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	3b41      	subs	r3, #65	@ 0x41
 8003d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d56:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <HAL_ADC_ConfigChannel+0x250>)
 8003d58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a28      	ldr	r2, [pc, #160]	@ (8003e00 <HAL_ADC_ConfigChannel+0x254>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d10f      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x1d8>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b12      	cmp	r3, #18
 8003d6a:	d10b      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1d      	ldr	r2, [pc, #116]	@ (8003e00 <HAL_ADC_ConfigChannel+0x254>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d12b      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x23a>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1c      	ldr	r2, [pc, #112]	@ (8003e04 <HAL_ADC_ConfigChannel+0x258>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <HAL_ADC_ConfigChannel+0x1f4>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b11      	cmp	r3, #17
 8003d9e:	d122      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a11      	ldr	r2, [pc, #68]	@ (8003e04 <HAL_ADC_ConfigChannel+0x258>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d111      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003dc2:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <HAL_ADC_ConfigChannel+0x25c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a11      	ldr	r2, [pc, #68]	@ (8003e0c <HAL_ADC_ConfigChannel+0x260>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	0c9a      	lsrs	r2, r3, #18
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003dd8:	e002      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f9      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40012300 	.word	0x40012300
 8003e00:	40012000 	.word	0x40012000
 8003e04:	10000012 	.word	0x10000012
 8003e08:	20000030 	.word	0x20000030
 8003e0c:	431bde83 	.word	0x431bde83

08003e10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e18:	4b79      	ldr	r3, [pc, #484]	@ (8004000 <ADC_Init+0x1f0>)
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	021a      	lsls	r2, r3, #8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	4a58      	ldr	r2, [pc, #352]	@ (8004004 <ADC_Init+0x1f4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d022      	beq.n	8003eee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003eb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	e00f      	b.n	8003f0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0202 	bic.w	r2, r2, #2
 8003f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7e1b      	ldrb	r3, [r3, #24]
 8003f28:	005a      	lsls	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01b      	beq.n	8003f74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003f5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	3b01      	subs	r3, #1
 8003f68:	035a      	lsls	r2, r3, #13
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	e007      	b.n	8003f84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	051a      	lsls	r2, r3, #20
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003fb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fc6:	025a      	lsls	r2, r3, #9
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6899      	ldr	r1, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	029a      	lsls	r2, r3, #10
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40012300 	.word	0x40012300
 8004004:	0f000001 	.word	0x0f000001

08004008 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800401e:	2b00      	cmp	r3, #0
 8004020:	d13c      	bne.n	800409c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d12b      	bne.n	8004094 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	d127      	bne.n	8004094 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800404e:	2b00      	cmp	r3, #0
 8004050:	d006      	beq.n	8004060 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800405c:	2b00      	cmp	r3, #0
 800405e:	d119      	bne.n	8004094 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0220 	bic.w	r2, r2, #32
 800406e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7fc fe7f 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800409a:	e00e      	b.n	80040ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fd75 	bl	8003b98 <HAL_ADC_ErrorCallback>
}
 80040ae:	e004      	b.n	80040ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff fd4d 	bl	8003b70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	@ 0x40
 80040f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff fd4a 	bl	8003b98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004130:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <__NVIC_SetPriorityGrouping+0x44>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800413c:	4013      	ands	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004148:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800414c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004152:	4a04      	ldr	r2, [pc, #16]	@ (8004164 <__NVIC_SetPriorityGrouping+0x44>)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	60d3      	str	r3, [r2, #12]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <__NVIC_GetPriorityGrouping+0x18>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	f003 0307 	and.w	r3, r3, #7
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	2b00      	cmp	r3, #0
 8004194:	db0b      	blt.n	80041ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	4907      	ldr	r1, [pc, #28]	@ (80041bc <__NVIC_EnableIRQ+0x38>)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2001      	movs	r0, #1
 80041a6:	fa00 f202 	lsl.w	r2, r0, r2
 80041aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	e000e100 	.word	0xe000e100

080041c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	db0a      	blt.n	80041ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	490c      	ldr	r1, [pc, #48]	@ (800420c <__NVIC_SetPriority+0x4c>)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	0112      	lsls	r2, r2, #4
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	440b      	add	r3, r1
 80041e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e8:	e00a      	b.n	8004200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4908      	ldr	r1, [pc, #32]	@ (8004210 <__NVIC_SetPriority+0x50>)
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	3b04      	subs	r3, #4
 80041f8:	0112      	lsls	r2, r2, #4
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	440b      	add	r3, r1
 80041fe:	761a      	strb	r2, [r3, #24]
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000e100 	.word	0xe000e100
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	@ 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f1c3 0307 	rsb	r3, r3, #7
 800422e:	2b04      	cmp	r3, #4
 8004230:	bf28      	it	cs
 8004232:	2304      	movcs	r3, #4
 8004234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	3304      	adds	r3, #4
 800423a:	2b06      	cmp	r3, #6
 800423c:	d902      	bls.n	8004244 <NVIC_EncodePriority+0x30>
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3b03      	subs	r3, #3
 8004242:	e000      	b.n	8004246 <NVIC_EncodePriority+0x32>
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43da      	mvns	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	401a      	ands	r2, r3
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800425c:	f04f 31ff 	mov.w	r1, #4294967295
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	fa01 f303 	lsl.w	r3, r1, r3
 8004266:	43d9      	mvns	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800426c:	4313      	orrs	r3, r2
         );
}
 800426e:	4618      	mov	r0, r3
 8004270:	3724      	adds	r7, #36	@ 0x24
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3b01      	subs	r3, #1
 8004288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800428c:	d301      	bcc.n	8004292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428e:	2301      	movs	r3, #1
 8004290:	e00f      	b.n	80042b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004292:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <SysTick_Config+0x40>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800429a:	210f      	movs	r1, #15
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	f7ff ff8e 	bl	80041c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <SysTick_Config+0x40>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042aa:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <SysTick_Config+0x40>)
 80042ac:	2207      	movs	r2, #7
 80042ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	e000e010 	.word	0xe000e010

080042c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ff29 	bl	8004120 <__NVIC_SetPriorityGrouping>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4603      	mov	r3, r0
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
 80042e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e8:	f7ff ff3e 	bl	8004168 <__NVIC_GetPriorityGrouping>
 80042ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	f7ff ff8e 	bl	8004214 <NVIC_EncodePriority>
 80042f8:	4602      	mov	r2, r0
 80042fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff5d 	bl	80041c0 <__NVIC_SetPriority>
}
 8004306:	bf00      	nop
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	4603      	mov	r3, r0
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff31 	bl	8004184 <__NVIC_EnableIRQ>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ffa2 	bl	800427c <SysTick_Config>
 8004338:	4603      	mov	r3, r0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004350:	f7ff f996 	bl	8003680 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e099      	b.n	8004494 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004380:	e00f      	b.n	80043a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004382:	f7ff f97d 	bl	8003680 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b05      	cmp	r3, #5
 800438e:	d908      	bls.n	80043a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2203      	movs	r2, #3
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e078      	b.n	8004494 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e8      	bne.n	8004382 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4b38      	ldr	r3, [pc, #224]	@ (800449c <HAL_DMA_Init+0x158>)
 80043bc:	4013      	ands	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d107      	bne.n	800440c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	4313      	orrs	r3, r2
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0307 	bic.w	r3, r3, #7
 8004422:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	2b04      	cmp	r3, #4
 8004434:	d117      	bne.n	8004466 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 faab 	bl	80049a4 <DMA_CheckFifoParam>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2240      	movs	r2, #64	@ 0x40
 8004458:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004462:	2301      	movs	r3, #1
 8004464:	e016      	b.n	8004494 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa62 	bl	8004938 <DMA_CalcBaseAndBitshift>
 8004474:	4603      	mov	r3, r0
 8004476:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447c:	223f      	movs	r2, #63	@ 0x3f
 800447e:	409a      	lsls	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	f010803f 	.word	0xf010803f

080044a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_DMA_Start_IT+0x26>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e040      	b.n	8004548 <HAL_DMA_Start_IT+0xa8>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d12f      	bne.n	800453a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f9f4 	bl	80048dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f8:	223f      	movs	r2, #63	@ 0x3f
 80044fa:	409a      	lsls	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0216 	orr.w	r2, r2, #22
 800450e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0208 	orr.w	r2, r2, #8
 8004526:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e005      	b.n	8004546 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004542:	2302      	movs	r3, #2
 8004544:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d004      	beq.n	800456e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2280      	movs	r2, #128	@ 0x80
 8004568:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e00c      	b.n	8004588 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2205      	movs	r2, #5
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045a0:	4b8e      	ldr	r3, [pc, #568]	@ (80047dc <HAL_DMA_IRQHandler+0x248>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a8e      	ldr	r2, [pc, #568]	@ (80047e0 <HAL_DMA_IRQHandler+0x24c>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	0a9b      	lsrs	r3, r3, #10
 80045ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045be:	2208      	movs	r2, #8
 80045c0:	409a      	lsls	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01a      	beq.n	8004600 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d013      	beq.n	8004600 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	2208      	movs	r2, #8
 80045ee:	409a      	lsls	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	2201      	movs	r2, #1
 8004606:	409a      	lsls	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d012      	beq.n	8004636 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	2201      	movs	r2, #1
 8004624:	409a      	lsls	r2, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462e:	f043 0202 	orr.w	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	2204      	movs	r2, #4
 800463c:	409a      	lsls	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d012      	beq.n	800466c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004658:	2204      	movs	r2, #4
 800465a:	409a      	lsls	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	f043 0204 	orr.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004670:	2210      	movs	r2, #16
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d043      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d03c      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	2210      	movs	r2, #16
 8004690:	409a      	lsls	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d018      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d024      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
 80046c2:	e01f      	b.n	8004704 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
 80046d4:	e016      	b.n	8004704 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0208 	bic.w	r2, r2, #8
 80046f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004708:	2220      	movs	r2, #32
 800470a:	409a      	lsls	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 808f 	beq.w	8004834 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8087 	beq.w	8004834 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472a:	2220      	movs	r2, #32
 800472c:	409a      	lsls	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b05      	cmp	r3, #5
 800473c:	d136      	bne.n	80047ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0216 	bic.w	r2, r2, #22
 800474c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800475c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_DMA_IRQHandler+0x1da>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0208 	bic.w	r2, r2, #8
 800477c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004782:	223f      	movs	r2, #63	@ 0x3f
 8004784:	409a      	lsls	r2, r3
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d07e      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
        }
        return;
 80047aa:	e079      	b.n	80048a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01d      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10d      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d031      	beq.n	8004834 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	4798      	blx	r3
 80047d8:	e02c      	b.n	8004834 <HAL_DMA_IRQHandler+0x2a0>
 80047da:	bf00      	nop
 80047dc:	20000030 	.word	0x20000030
 80047e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d023      	beq.n	8004834 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
 80047f4:	e01e      	b.n	8004834 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10f      	bne.n	8004824 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0210 	bic.w	r2, r2, #16
 8004812:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004838:	2b00      	cmp	r3, #0
 800483a:	d032      	beq.n	80048a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d022      	beq.n	800488e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2205      	movs	r2, #5
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	3301      	adds	r3, #1
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	429a      	cmp	r2, r3
 800486a:	d307      	bcc.n	800487c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f2      	bne.n	8004860 <HAL_DMA_IRQHandler+0x2cc>
 800487a:	e000      	b.n	800487e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800487c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
 800489e:	e000      	b.n	80048a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048a0:	bf00      	nop
    }
  }
}
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048b6:	b2db      	uxtb	r3, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b40      	cmp	r3, #64	@ 0x40
 8004908:	d108      	bne.n	800491c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800491a:	e007      	b.n	800492c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	3b10      	subs	r3, #16
 8004948:	4a14      	ldr	r2, [pc, #80]	@ (800499c <DMA_CalcBaseAndBitshift+0x64>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004952:	4a13      	ldr	r2, [pc, #76]	@ (80049a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d909      	bls.n	800497a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	659a      	str	r2, [r3, #88]	@ 0x58
 8004978:	e007      	b.n	800498a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	aaaaaaab 	.word	0xaaaaaaab
 80049a0:	0800f408 	.word	0x0800f408

080049a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11f      	bne.n	80049fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d856      	bhi.n	8004a72 <DMA_CheckFifoParam+0xce>
 80049c4:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <DMA_CheckFifoParam+0x28>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049ef 	.word	0x080049ef
 80049d4:	080049dd 	.word	0x080049dd
 80049d8:	08004a73 	.word	0x08004a73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d046      	beq.n	8004a76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ec:	e043      	b.n	8004a76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049f6:	d140      	bne.n	8004a7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fc:	e03d      	b.n	8004a7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a06:	d121      	bne.n	8004a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d837      	bhi.n	8004a7e <DMA_CheckFifoParam+0xda>
 8004a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <DMA_CheckFifoParam+0x70>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a2b 	.word	0x08004a2b
 8004a1c:	08004a25 	.word	0x08004a25
 8004a20:	08004a3d 	.word	0x08004a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      break;
 8004a28:	e030      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d025      	beq.n	8004a82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a3a:	e022      	b.n	8004a82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a44:	d11f      	bne.n	8004a86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a4a:	e01c      	b.n	8004a86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d903      	bls.n	8004a5a <DMA_CheckFifoParam+0xb6>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d003      	beq.n	8004a60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a58:	e018      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5e:	e015      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00e      	beq.n	8004a8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a70:	e00b      	b.n	8004a8a <DMA_CheckFifoParam+0xe6>
      break;
 8004a72:	bf00      	nop
 8004a74:	e00a      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
      break;
 8004a76:	bf00      	nop
 8004a78:	e008      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
      break;
 8004a7a:	bf00      	nop
 8004a7c:	e006      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
      break;
 8004a7e:	bf00      	nop
 8004a80:	e004      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
      break;
 8004a82:	bf00      	nop
 8004a84:	e002      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
      break;   
 8004a86:	bf00      	nop
 8004a88:	e000      	b.n	8004a8c <DMA_CheckFifoParam+0xe8>
      break;
 8004a8a:	bf00      	nop
    }
  } 
  
  return status; 
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop

08004a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b089      	sub	sp, #36	@ 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	e159      	b.n	8004d6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ab8:	2201      	movs	r2, #1
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	f040 8148 	bne.w	8004d66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d005      	beq.n	8004aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d130      	bne.n	8004b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	2203      	movs	r2, #3
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b24:	2201      	movs	r2, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 0201 	and.w	r2, r3, #1
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d017      	beq.n	8004b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	2203      	movs	r2, #3
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d123      	bne.n	8004be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	08da      	lsrs	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3208      	adds	r2, #8
 8004ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	220f      	movs	r2, #15
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	08da      	lsrs	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3208      	adds	r2, #8
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	2203      	movs	r2, #3
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0203 	and.w	r2, r3, #3
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80a2 	beq.w	8004d66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b57      	ldr	r3, [pc, #348]	@ (8004d84 <HAL_GPIO_Init+0x2e8>)
 8004c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2a:	4a56      	ldr	r2, [pc, #344]	@ (8004d84 <HAL_GPIO_Init+0x2e8>)
 8004c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c32:	4b54      	ldr	r3, [pc, #336]	@ (8004d84 <HAL_GPIO_Init+0x2e8>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c3e:	4a52      	ldr	r2, [pc, #328]	@ (8004d88 <HAL_GPIO_Init+0x2ec>)
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	089b      	lsrs	r3, r3, #2
 8004c44:	3302      	adds	r3, #2
 8004c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	220f      	movs	r2, #15
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a49      	ldr	r2, [pc, #292]	@ (8004d8c <HAL_GPIO_Init+0x2f0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d019      	beq.n	8004c9e <HAL_GPIO_Init+0x202>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a48      	ldr	r2, [pc, #288]	@ (8004d90 <HAL_GPIO_Init+0x2f4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <HAL_GPIO_Init+0x1fe>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a47      	ldr	r2, [pc, #284]	@ (8004d94 <HAL_GPIO_Init+0x2f8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00d      	beq.n	8004c96 <HAL_GPIO_Init+0x1fa>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a46      	ldr	r2, [pc, #280]	@ (8004d98 <HAL_GPIO_Init+0x2fc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d007      	beq.n	8004c92 <HAL_GPIO_Init+0x1f6>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a45      	ldr	r2, [pc, #276]	@ (8004d9c <HAL_GPIO_Init+0x300>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <HAL_GPIO_Init+0x1f2>
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	e008      	b.n	8004ca0 <HAL_GPIO_Init+0x204>
 8004c8e:	2307      	movs	r3, #7
 8004c90:	e006      	b.n	8004ca0 <HAL_GPIO_Init+0x204>
 8004c92:	2303      	movs	r3, #3
 8004c94:	e004      	b.n	8004ca0 <HAL_GPIO_Init+0x204>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e002      	b.n	8004ca0 <HAL_GPIO_Init+0x204>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_GPIO_Init+0x204>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	f002 0203 	and.w	r2, r2, #3
 8004ca6:	0092      	lsls	r2, r2, #2
 8004ca8:	4093      	lsls	r3, r2
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cb0:	4935      	ldr	r1, [pc, #212]	@ (8004d88 <HAL_GPIO_Init+0x2ec>)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cbe:	4b38      	ldr	r3, [pc, #224]	@ (8004da0 <HAL_GPIO_Init+0x304>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8004da0 <HAL_GPIO_Init+0x304>)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8004da0 <HAL_GPIO_Init+0x304>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d0c:	4a24      	ldr	r2, [pc, #144]	@ (8004da0 <HAL_GPIO_Init+0x304>)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d12:	4b23      	ldr	r3, [pc, #140]	@ (8004da0 <HAL_GPIO_Init+0x304>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d36:	4a1a      	ldr	r2, [pc, #104]	@ (8004da0 <HAL_GPIO_Init+0x304>)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d3c:	4b18      	ldr	r3, [pc, #96]	@ (8004da0 <HAL_GPIO_Init+0x304>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d60:	4a0f      	ldr	r2, [pc, #60]	@ (8004da0 <HAL_GPIO_Init+0x304>)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b0f      	cmp	r3, #15
 8004d70:	f67f aea2 	bls.w	8004ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3724      	adds	r7, #36	@ 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40020000 	.word	0x40020000
 8004d90:	40020400 	.word	0x40020400
 8004d94:	40020800 	.word	0x40020800
 8004d98:	40020c00 	.word	0x40020c00
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40013c00 	.word	0x40013c00

08004da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
 8004db0:	4613      	mov	r3, r2
 8004db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004db4:	787b      	ldrb	r3, [r7, #1]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dc0:	e003      	b.n	8004dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dc2:	887b      	ldrh	r3, [r7, #2]
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	619a      	str	r2, [r3, #24]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004de8:	887a      	ldrh	r2, [r7, #2]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4013      	ands	r3, r2
 8004dee:	041a      	lsls	r2, r3, #16
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	43d9      	mvns	r1, r3
 8004df4:	887b      	ldrh	r3, [r7, #2]
 8004df6:	400b      	ands	r3, r1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	619a      	str	r2, [r3, #24]
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e12b      	b.n	8005076 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fd ff0c 	bl	8002c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	@ 0x24
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e70:	f004 fce6 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 8004e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	4a81      	ldr	r2, [pc, #516]	@ (8005080 <HAL_I2C_Init+0x274>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d807      	bhi.n	8004e90 <HAL_I2C_Init+0x84>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a80      	ldr	r2, [pc, #512]	@ (8005084 <HAL_I2C_Init+0x278>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	bf94      	ite	ls
 8004e88:	2301      	movls	r3, #1
 8004e8a:	2300      	movhi	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e006      	b.n	8004e9e <HAL_I2C_Init+0x92>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a7d      	ldr	r2, [pc, #500]	@ (8005088 <HAL_I2C_Init+0x27c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bf94      	ite	ls
 8004e98:	2301      	movls	r3, #1
 8004e9a:	2300      	movhi	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0e7      	b.n	8005076 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a78      	ldr	r2, [pc, #480]	@ (800508c <HAL_I2C_Init+0x280>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	0c9b      	lsrs	r3, r3, #18
 8004eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a6a      	ldr	r2, [pc, #424]	@ (8005080 <HAL_I2C_Init+0x274>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d802      	bhi.n	8004ee0 <HAL_I2C_Init+0xd4>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	3301      	adds	r3, #1
 8004ede:	e009      	b.n	8004ef4 <HAL_I2C_Init+0xe8>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	4a69      	ldr	r2, [pc, #420]	@ (8005090 <HAL_I2C_Init+0x284>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	099b      	lsrs	r3, r3, #6
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	495c      	ldr	r1, [pc, #368]	@ (8005080 <HAL_I2C_Init+0x274>)
 8004f10:	428b      	cmp	r3, r1
 8004f12:	d819      	bhi.n	8004f48 <HAL_I2C_Init+0x13c>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1e59      	subs	r1, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f22:	1c59      	adds	r1, r3, #1
 8004f24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f28:	400b      	ands	r3, r1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_I2C_Init+0x138>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1e59      	subs	r1, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f42:	e051      	b.n	8004fe8 <HAL_I2C_Init+0x1dc>
 8004f44:	2304      	movs	r3, #4
 8004f46:	e04f      	b.n	8004fe8 <HAL_I2C_Init+0x1dc>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d111      	bne.n	8004f74 <HAL_I2C_Init+0x168>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1e58      	subs	r0, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6859      	ldr	r1, [r3, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	440b      	add	r3, r1
 8004f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f62:	3301      	adds	r3, #1
 8004f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e012      	b.n	8004f9a <HAL_I2C_Init+0x18e>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1e58      	subs	r0, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6859      	ldr	r1, [r3, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	0099      	lsls	r1, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Init+0x196>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e022      	b.n	8004fe8 <HAL_I2C_Init+0x1dc>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10e      	bne.n	8004fc8 <HAL_I2C_Init+0x1bc>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1e58      	subs	r0, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6859      	ldr	r1, [r3, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	440b      	add	r3, r1
 8004fb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc6:	e00f      	b.n	8004fe8 <HAL_I2C_Init+0x1dc>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1e58      	subs	r0, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6859      	ldr	r1, [r3, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	0099      	lsls	r1, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	6809      	ldr	r1, [r1, #0]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69da      	ldr	r2, [r3, #28]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005016:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6911      	ldr	r1, [r2, #16]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68d2      	ldr	r2, [r2, #12]
 8005022:	4311      	orrs	r1, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	430b      	orrs	r3, r1
 800502a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	000186a0 	.word	0x000186a0
 8005084:	001e847f 	.word	0x001e847f
 8005088:	003d08ff 	.word	0x003d08ff
 800508c:	431bde83 	.word	0x431bde83
 8005090:	10624dd3 	.word	0x10624dd3

08005094 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a6:	2b80      	cmp	r3, #128	@ 0x80
 80050a8:	d103      	bne.n	80050b2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	611a      	str	r2, [r3, #16]
  }
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
	...

080050c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	817b      	strh	r3, [r7, #10]
 80050d2:	460b      	mov	r3, r1
 80050d4:	813b      	strh	r3, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050da:	f7fe fad1 	bl	8003680 <HAL_GetTick>
 80050de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	f040 80d9 	bne.w	80052a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2319      	movs	r3, #25
 80050f4:	2201      	movs	r2, #1
 80050f6:	496d      	ldr	r1, [pc, #436]	@ (80052ac <HAL_I2C_Mem_Write+0x1ec>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f002 faf9 	bl	80076f0 <I2C_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
 8005106:	e0cc      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Mem_Write+0x56>
 8005112:	2302      	movs	r3, #2
 8005114:	e0c5      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d007      	beq.n	800513c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800514a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2221      	movs	r2, #33	@ 0x21
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2240      	movs	r2, #64	@ 0x40
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a4d      	ldr	r2, [pc, #308]	@ (80052b0 <HAL_I2C_Mem_Write+0x1f0>)
 800517c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800517e:	88f8      	ldrh	r0, [r7, #6]
 8005180:	893a      	ldrh	r2, [r7, #8]
 8005182:	8979      	ldrh	r1, [r7, #10]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4603      	mov	r3, r0
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f001 ff6c 	bl	800706c <I2C_RequestMemoryWrite>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d052      	beq.n	8005240 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e081      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f002 fbbe 	bl	8007924 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d107      	bne.n	80051c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06b      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	781a      	ldrb	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b04      	cmp	r3, #4
 8005206:	d11b      	bne.n	8005240 <HAL_I2C_Mem_Write+0x180>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d017      	beq.n	8005240 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1aa      	bne.n	800519e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f002 fbb1 	bl	80079b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	2b04      	cmp	r3, #4
 800525e:	d107      	bne.n	8005270 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800526e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e016      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	e000      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
  }
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	00100002 	.word	0x00100002
 80052b0:	ffff0000 	.word	0xffff0000

080052b4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	@ 0x28
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	817b      	strh	r3, [r7, #10]
 80052c6:	460b      	mov	r3, r1
 80052c8:	813b      	strh	r3, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052d2:	f7fe f9d5 	bl	8003680 <HAL_GetTick>
 80052d6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	f040 8136 	bne.w	8005552 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80052e6:	4b9d      	ldr	r3, [pc, #628]	@ (800555c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	08db      	lsrs	r3, r3, #3
 80052ec:	4a9c      	ldr	r2, [pc, #624]	@ (8005560 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	0a1a      	lsrs	r2, r3, #8
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	009a      	lsls	r2, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	3b01      	subs	r3, #1
 8005304:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d112      	bne.n	8005332 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f043 0220 	orr.w	r2, r3, #32
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
 8005330:	e110      	b.n	8005554 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d0df      	beq.n	8005300 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_I2C_Mem_Write_DMA+0x9a>
 800534a:	2302      	movs	r3, #2
 800534c:	e102      	b.n	8005554 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b01      	cmp	r3, #1
 8005362:	d007      	beq.n	8005374 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2221      	movs	r2, #33	@ 0x21
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2240      	movs	r2, #64	@ 0x40
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800539e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80053a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a6c      	ldr	r2, [pc, #432]	@ (8005564 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80053b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80053b6:	897a      	ldrh	r2, [r7, #10]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80053bc:	893a      	ldrh	r2, [r7, #8]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80a9 	beq.w	800552a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02a      	beq.n	8005436 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e4:	4a60      	ldr	r2, [pc, #384]	@ (8005568 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80053e6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ec:	4a5f      	ldr	r2, [pc, #380]	@ (800556c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80053ee:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f4:	2200      	movs	r2, #0
 80053f6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fc:	2200      	movs	r2, #0
 80053fe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005404:	2200      	movs	r2, #0
 8005406:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540c:	2200      	movs	r2, #0
 800540e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	4619      	mov	r1, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3310      	adds	r3, #16
 8005420:	461a      	mov	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005426:	f7ff f83b 	bl	80044a0 <HAL_DMA_Start_IT>
 800542a:	4603      	mov	r3, r0
 800542c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800542e:	7efb      	ldrb	r3, [r7, #27]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d166      	bne.n	8005502 <HAL_I2C_Mem_Write_DMA+0x24e>
 8005434:	e013      	b.n	800545e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e07a      	b.n	8005554 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800545e:	88f8      	ldrh	r0, [r7, #6]
 8005460:	893a      	ldrh	r2, [r7, #8]
 8005462:	8979      	ldrh	r1, [r7, #10]
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	2323      	movs	r3, #35	@ 0x23
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	4603      	mov	r3, r0
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f001 fdfc 	bl	800706c <I2C_RequestMemoryWrite>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d022      	beq.n	80054c0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff f866 	bl	8004550 <HAL_DMA_Abort_IT>
 8005484:	4603      	mov	r3, r0
 8005486:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548c:	2200      	movs	r2, #0
 800548e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e049      	b.n	8005554 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054ec:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054fc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e028      	b.n	8005554 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	f043 0210 	orr.w	r2, r3, #16
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e014      	b.n	8005554 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005552:	2302      	movs	r3, #2
  }
}
 8005554:	4618      	mov	r0, r3
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000030 	.word	0x20000030
 8005560:	14f8b589 	.word	0x14f8b589
 8005564:	ffff0000 	.word	0xffff0000
 8005568:	08007369 	.word	0x08007369
 800556c:	08007527 	.word	0x08007527

08005570 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08c      	sub	sp, #48	@ 0x30
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	4608      	mov	r0, r1
 800557a:	4611      	mov	r1, r2
 800557c:	461a      	mov	r2, r3
 800557e:	4603      	mov	r3, r0
 8005580:	817b      	strh	r3, [r7, #10]
 8005582:	460b      	mov	r3, r1
 8005584:	813b      	strh	r3, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800558a:	f7fe f879 	bl	8003680 <HAL_GetTick>
 800558e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b20      	cmp	r3, #32
 800559e:	f040 8172 	bne.w	8005886 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80055a2:	4b93      	ldr	r3, [pc, #588]	@ (80057f0 <HAL_I2C_Mem_Read_DMA+0x280>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	08db      	lsrs	r3, r3, #3
 80055a8:	4a92      	ldr	r2, [pc, #584]	@ (80057f4 <HAL_I2C_Mem_Read_DMA+0x284>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	0a1a      	lsrs	r2, r3, #8
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009a      	lsls	r2, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3b01      	subs	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d112      	bne.n	80055ee <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
 80055ec:	e14c      	b.n	8005888 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d0df      	beq.n	80055bc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_I2C_Mem_Read_DMA+0x9a>
 8005606:	2302      	movs	r3, #2
 8005608:	e13e      	b.n	8005888 <HAL_I2C_Mem_Read_DMA+0x318>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	d007      	beq.n	8005630 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800563e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2222      	movs	r2, #34	@ 0x22
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2240      	movs	r2, #64	@ 0x40
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a62      	ldr	r2, [pc, #392]	@ (80057f8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005670:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005672:	897a      	ldrh	r2, [r7, #10]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005678:	893a      	ldrh	r2, [r7, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80cc 	beq.w	800582c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	d02d      	beq.n	80056f8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	4a56      	ldr	r2, [pc, #344]	@ (80057fc <HAL_I2C_Mem_Read_DMA+0x28c>)
 80056a2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	4a55      	ldr	r2, [pc, #340]	@ (8005800 <HAL_I2C_Mem_Read_DMA+0x290>)
 80056aa:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	2200      	movs	r2, #0
 80056b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	2200      	movs	r2, #0
 80056ba:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	2200      	movs	r2, #0
 80056c2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c8:	2200      	movs	r2, #0
 80056ca:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3310      	adds	r3, #16
 80056d6:	4619      	mov	r1, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	461a      	mov	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e2:	f7fe fedd 	bl	80044a0 <HAL_DMA_Start_IT>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80056ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 8087 	bne.w	8005804 <HAL_I2C_Mem_Read_DMA+0x294>
 80056f6:	e013      	b.n	8005720 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0b3      	b.n	8005888 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005720:	88f8      	ldrh	r0, [r7, #6]
 8005722:	893a      	ldrh	r2, [r7, #8]
 8005724:	8979      	ldrh	r1, [r7, #10]
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	2323      	movs	r3, #35	@ 0x23
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4603      	mov	r3, r0
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f001 fd31 	bl	8007198 <I2C_RequestMemoryRead>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d023      	beq.n	8005784 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe ff05 	bl	8004550 <HAL_DMA_Abort_IT>
 8005746:	4603      	mov	r3, r0
 8005748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005750:	2200      	movs	r2, #0
 8005752:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005762:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e081      	b.n	8005888 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005788:	2b01      	cmp	r3, #1
 800578a:	d108      	bne.n	800579e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e007      	b.n	80057ae <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057da:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ea:	605a      	str	r2, [r3, #4]
 80057ec:	e049      	b.n	8005882 <HAL_I2C_Mem_Read_DMA+0x312>
 80057ee:	bf00      	nop
 80057f0:	20000030 	.word	0x20000030
 80057f4:	14f8b589 	.word	0x14f8b589
 80057f8:	ffff0000 	.word	0xffff0000
 80057fc:	08007369 	.word	0x08007369
 8005800:	08007527 	.word	0x08007527
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	f043 0210 	orr.w	r2, r3, #16
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e02d      	b.n	8005888 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800582c:	88f8      	ldrh	r0, [r7, #6]
 800582e:	893a      	ldrh	r2, [r7, #8]
 8005830:	8979      	ldrh	r1, [r7, #10]
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	2323      	movs	r3, #35	@ 0x23
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	4603      	mov	r3, r0
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f001 fcab 	bl	8007198 <I2C_RequestMemoryRead>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e01d      	b.n	8005888 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005870:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3728      	adds	r7, #40	@ 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d003      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x38>
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b40      	cmp	r3, #64	@ 0x40
 80058c4:	f040 80c1 	bne.w	8005a4a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10d      	bne.n	80058fe <HAL_I2C_EV_IRQHandler+0x6e>
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80058e8:	d003      	beq.n	80058f2 <HAL_I2C_EV_IRQHandler+0x62>
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80058f0:	d101      	bne.n	80058f6 <HAL_I2C_EV_IRQHandler+0x66>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_I2C_EV_IRQHandler+0x68>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f000 8132 	beq.w	8005b62 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <HAL_I2C_EV_IRQHandler+0x92>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	0a5b      	lsrs	r3, r3, #9
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f002 f8f6 	bl	8007b06 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fd87 	bl	800642e <I2C_Master_SB>
 8005920:	e092      	b.n	8005a48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	08db      	lsrs	r3, r3, #3
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_I2C_EV_IRQHandler+0xb2>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	0a5b      	lsrs	r3, r3, #9
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fdfd 	bl	800653a <I2C_Master_ADD10>
 8005940:	e082      	b.n	8005a48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	085b      	lsrs	r3, r3, #1
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_I2C_EV_IRQHandler+0xd2>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	0a5b      	lsrs	r3, r3, #9
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fe17 	bl	800658e <I2C_Master_ADDR>
 8005960:	e072      	b.n	8005a48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	089b      	lsrs	r3, r3, #2
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d03b      	beq.n	80059e6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800597c:	f000 80f3 	beq.w	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00f      	beq.n	80059ac <HAL_I2C_EV_IRQHandler+0x11c>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	0a9b      	lsrs	r3, r3, #10
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_I2C_EV_IRQHandler+0x11c>
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	089b      	lsrs	r3, r3, #2
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d103      	bne.n	80059ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f9df 	bl	8005d68 <I2C_MasterTransmit_TXE>
 80059aa:	e04d      	b.n	8005a48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80d6 	beq.w	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	0a5b      	lsrs	r3, r3, #9
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80cf 	beq.w	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	2b21      	cmp	r3, #33	@ 0x21
 80059cc:	d103      	bne.n	80059d6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa66 	bl	8005ea0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059d4:	e0c7      	b.n	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	f040 80c4 	bne.w	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fad4 	bl	8005f8c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059e4:	e0bf      	b.n	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f4:	f000 80b7 	beq.w	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	099b      	lsrs	r3, r3, #6
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00f      	beq.n	8005a24 <HAL_I2C_EV_IRQHandler+0x194>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	0a9b      	lsrs	r3, r3, #10
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <HAL_I2C_EV_IRQHandler+0x194>
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	089b      	lsrs	r3, r3, #2
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d103      	bne.n	8005a24 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb4d 	bl	80060bc <I2C_MasterReceive_RXNE>
 8005a22:	e011      	b.n	8005a48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 809a 	beq.w	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	0a5b      	lsrs	r3, r3, #9
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8093 	beq.w	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fc03 	bl	800624c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a46:	e08e      	b.n	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a48:	e08d      	b.n	8005b66 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	e007      	b.n	8005a6c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d012      	beq.n	8005a9e <HAL_I2C_EV_IRQHandler+0x20e>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	0a5b      	lsrs	r3, r3, #9
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00c      	beq.n	8005a9e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 ffc8 	bl	8006a2c <I2C_Slave_ADDR>
 8005a9c:	e066      	b.n	8005b6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <HAL_I2C_EV_IRQHandler+0x22e>
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	0a5b      	lsrs	r3, r3, #9
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 f802 	bl	8006ac0 <I2C_Slave_STOPF>
 8005abc:	e056      	b.n	8005b6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b21      	cmp	r3, #33	@ 0x21
 8005ac2:	d002      	beq.n	8005aca <HAL_I2C_EV_IRQHandler+0x23a>
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	2b29      	cmp	r3, #41	@ 0x29
 8005ac8:	d125      	bne.n	8005b16 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	09db      	lsrs	r3, r3, #7
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00f      	beq.n	8005af6 <HAL_I2C_EV_IRQHandler+0x266>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	0a9b      	lsrs	r3, r3, #10
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_I2C_EV_IRQHandler+0x266>
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	089b      	lsrs	r3, r3, #2
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fede 	bl	80068b0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005af4:	e039      	b.n	8005b6a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	089b      	lsrs	r3, r3, #2
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d033      	beq.n	8005b6a <HAL_I2C_EV_IRQHandler+0x2da>
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	0a5b      	lsrs	r3, r3, #9
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d02d      	beq.n	8005b6a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 ff0b 	bl	800692a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b14:	e029      	b.n	8005b6a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	099b      	lsrs	r3, r3, #6
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00f      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	0a9b      	lsrs	r3, r3, #10
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 ff16 	bl	800696c <I2C_SlaveReceive_RXNE>
 8005b40:	e014      	b.n	8005b6c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	0a5b      	lsrs	r3, r3, #9
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 ff44 	bl	80069e8 <I2C_SlaveReceive_BTF>
 8005b60:	e004      	b.n	8005b6c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005b62:	bf00      	nop
 8005b64:	e002      	b.n	8005b6c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b6a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b08a      	sub	sp, #40	@ 0x28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b94:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00e      	beq.n	8005bc0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	0a1b      	lsrs	r3, r3, #8
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d008      	beq.n	8005bc0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bbe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	0a5b      	lsrs	r3, r3, #9
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <HAL_I2C_ER_IRQHandler+0x78>
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	f043 0302 	orr.w	r3, r3, #2
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005be8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	0a9b      	lsrs	r3, r3, #10
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d03f      	beq.n	8005c76 <HAL_I2C_ER_IRQHandler+0x104>
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	0a1b      	lsrs	r3, r3, #8
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d039      	beq.n	8005c76 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005c02:	7efb      	ldrb	r3, [r7, #27]
 8005c04:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c14:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005c1c:	7ebb      	ldrb	r3, [r7, #26]
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d112      	bne.n	8005c48 <HAL_I2C_ER_IRQHandler+0xd6>
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10f      	bne.n	8005c48 <HAL_I2C_ER_IRQHandler+0xd6>
 8005c28:	7cfb      	ldrb	r3, [r7, #19]
 8005c2a:	2b21      	cmp	r3, #33	@ 0x21
 8005c2c:	d008      	beq.n	8005c40 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	2b29      	cmp	r3, #41	@ 0x29
 8005c32:	d005      	beq.n	8005c40 <HAL_I2C_ER_IRQHandler+0xce>
 8005c34:	7cfb      	ldrb	r3, [r7, #19]
 8005c36:	2b28      	cmp	r3, #40	@ 0x28
 8005c38:	d106      	bne.n	8005c48 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b21      	cmp	r3, #33	@ 0x21
 8005c3e:	d103      	bne.n	8005c48 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f86d 	bl	8006d20 <I2C_Slave_AF>
 8005c46:	e016      	b.n	8005c76 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c50:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	f043 0304 	orr.w	r3, r3, #4
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c5a:	7efb      	ldrb	r3, [r7, #27]
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d002      	beq.n	8005c66 <HAL_I2C_ER_IRQHandler+0xf4>
 8005c60:	7efb      	ldrb	r3, [r7, #27]
 8005c62:	2b40      	cmp	r3, #64	@ 0x40
 8005c64:	d107      	bne.n	8005c76 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c74:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	0adb      	lsrs	r3, r3, #11
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00e      	beq.n	8005ca0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	f043 0308 	orr.w	r3, r3, #8
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005c9e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 f8a8 	bl	8006e08 <I2C_ITError>
  }
}
 8005cb8:	bf00      	nop
 8005cba:	3728      	adds	r7, #40	@ 0x28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d150      	bne.n	8005e30 <I2C_MasterTransmit_TXE+0xc8>
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	2b21      	cmp	r3, #33	@ 0x21
 8005d92:	d14d      	bne.n	8005e30 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d01d      	beq.n	8005dd6 <I2C_MasterTransmit_TXE+0x6e>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d01a      	beq.n	8005dd6 <I2C_MasterTransmit_TXE+0x6e>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005da6:	d016      	beq.n	8005dd6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005db6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2211      	movs	r2, #17
 8005dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff ff76 	bl	8005cc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005dd4:	e060      	b.n	8005e98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005de4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b40      	cmp	r3, #64	@ 0x40
 8005e0e:	d107      	bne.n	8005e20 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7fa ffdd 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e1e:	e03b      	b.n	8005e98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ff49 	bl	8005cc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e2e:	e033      	b.n	8005e98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	2b21      	cmp	r3, #33	@ 0x21
 8005e34:	d005      	beq.n	8005e42 <I2C_MasterTransmit_TXE+0xda>
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
 8005e38:	2b40      	cmp	r3, #64	@ 0x40
 8005e3a:	d12d      	bne.n	8005e98 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b22      	cmp	r3, #34	@ 0x22
 8005e40:	d12a      	bne.n	8005e98 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d108      	bne.n	8005e5e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e5c:	e01c      	b.n	8005e98 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b40      	cmp	r3, #64	@ 0x40
 8005e68:	d103      	bne.n	8005e72 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f88e 	bl	8005f8c <I2C_MemoryTransmit_TXE_BTF>
}
 8005e70:	e012      	b.n	8005e98 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	781a      	ldrb	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005e96:	e7ff      	b.n	8005e98 <I2C_MasterTransmit_TXE+0x130>
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b21      	cmp	r3, #33	@ 0x21
 8005eb8:	d164      	bne.n	8005f84 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d012      	beq.n	8005eea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005ee8:	e04c      	b.n	8005f84 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d01d      	beq.n	8005f2c <I2C_MasterTransmit_BTF+0x8c>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d01a      	beq.n	8005f2c <I2C_MasterTransmit_BTF+0x8c>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005efc:	d016      	beq.n	8005f2c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f0c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2211      	movs	r2, #17
 8005f12:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff fecb 	bl	8005cc0 <HAL_I2C_MasterTxCpltCallback>
}
 8005f2a:	e02b      	b.n	8005f84 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f3a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f4a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b40      	cmp	r3, #64	@ 0x40
 8005f64:	d107      	bne.n	8005f76 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fa ff32 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 8005f74:	e006      	b.n	8005f84 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff fe9e 	bl	8005cc0 <HAL_I2C_MasterTxCpltCallback>
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d11d      	bne.n	8005fe0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d10b      	bne.n	8005fc4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbc:	1c9a      	adds	r2, r3, #2
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005fc2:	e077      	b.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	121b      	asrs	r3, r3, #8
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005fde:	e069      	b.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d10b      	bne.n	8006000 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ffe:	e059      	b.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006004:	2b02      	cmp	r3, #2
 8006006:	d152      	bne.n	80060ae <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b22      	cmp	r3, #34	@ 0x22
 800600c:	d10d      	bne.n	800602a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800601c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006028:	e044      	b.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b21      	cmp	r3, #33	@ 0x21
 8006038:	d112      	bne.n	8006060 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	781a      	ldrb	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800605e:	e029      	b.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d124      	bne.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b21      	cmp	r3, #33	@ 0x21
 800606e:	d121      	bne.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800607e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800608e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fa fe96 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 80060ac:	e002      	b.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fe fff0 	bl	8005094 <I2C_Flush_DR>
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b22      	cmp	r3, #34	@ 0x22
 80060ce:	f040 80b9 	bne.w	8006244 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d921      	bls.n	800612a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b03      	cmp	r3, #3
 8006114:	f040 8096 	bne.w	8006244 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006126:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006128:	e08c      	b.n	8006244 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	2b02      	cmp	r3, #2
 8006130:	d07f      	beq.n	8006232 <I2C_MasterReceive_RXNE+0x176>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d002      	beq.n	800613e <I2C_MasterReceive_RXNE+0x82>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d179      	bne.n	8006232 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fc80 	bl	8007a44 <I2C_WaitOnSTOPRequestThroughIT>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d14c      	bne.n	80061e4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006158:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006168:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b40      	cmp	r3, #64	@ 0x40
 80061a2:	d10a      	bne.n	80061ba <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fa fe20 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061b8:	e044      	b.n	8006244 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d002      	beq.n	80061ce <I2C_MasterReceive_RXNE+0x112>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d103      	bne.n	80061d6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80061d4:	e002      	b.n	80061dc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2212      	movs	r2, #18
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fd79 	bl	8005cd4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061e2:	e02f      	b.n	8006244 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fd88 	bl	8005d40 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006230:	e008      	b.n	8006244 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006240:	605a      	str	r2, [r3, #4]
}
 8006242:	e7ff      	b.n	8006244 <I2C_MasterReceive_RXNE+0x188>
 8006244:	bf00      	nop
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b04      	cmp	r3, #4
 8006262:	d11b      	bne.n	800629c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006272:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800629a:	e0c4      	b.n	8006426 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d129      	bne.n	80062fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d00a      	beq.n	80062d2 <I2C_MasterReceive_BTF+0x86>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d007      	beq.n	80062d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80062f8:	e095      	b.n	8006426 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d17d      	bne.n	8006400 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d002      	beq.n	8006310 <I2C_MasterReceive_BTF+0xc4>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b10      	cmp	r3, #16
 800630e:	d108      	bne.n	8006322 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e016      	b.n	8006350 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d002      	beq.n	800632e <I2C_MasterReceive_BTF+0xe2>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d108      	bne.n	8006340 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e007      	b.n	8006350 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800634e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80063aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b40      	cmp	r3, #64	@ 0x40
 80063be:	d10a      	bne.n	80063d6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fa fd12 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 80063d4:	e027      	b.n	8006426 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d002      	beq.n	80063ea <I2C_MasterReceive_BTF+0x19e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d103      	bne.n	80063f2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80063f0:	e002      	b.n	80063f8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2212      	movs	r2, #18
 80063f6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff fc6b 	bl	8005cd4 <HAL_I2C_MasterRxCpltCallback>
}
 80063fe:	e012      	b.n	8006426 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006426:	bf00      	nop
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b40      	cmp	r3, #64	@ 0x40
 8006440:	d117      	bne.n	8006472 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	b2db      	uxtb	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800645a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800645c:	e067      	b.n	800652e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	611a      	str	r2, [r3, #16]
}
 8006470:	e05d      	b.n	800652e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800647a:	d133      	bne.n	80064e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b21      	cmp	r3, #33	@ 0x21
 8006486:	d109      	bne.n	800649c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006498:	611a      	str	r2, [r3, #16]
 800649a:	e008      	b.n	80064ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <I2C_Master_SB+0x92>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d108      	bne.n	80064d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d032      	beq.n	800652e <I2C_Master_SB+0x100>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d02d      	beq.n	800652e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064e0:	605a      	str	r2, [r3, #4]
}
 80064e2:	e024      	b.n	800652e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10e      	bne.n	800650a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	11db      	asrs	r3, r3, #7
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f003 0306 	and.w	r3, r3, #6
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f063 030f 	orn	r3, r3, #15
 8006500:	b2da      	uxtb	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	611a      	str	r2, [r3, #16]
}
 8006508:	e011      	b.n	800652e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10d      	bne.n	800652e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006516:	b29b      	uxth	r3, r3
 8006518:	11db      	asrs	r3, r3, #7
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f003 0306 	and.w	r3, r3, #6
 8006520:	b2db      	uxtb	r3, r3
 8006522:	f063 030e 	orn	r3, r3, #14
 8006526:	b2da      	uxtb	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	611a      	str	r2, [r3, #16]
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006546:	b2da      	uxtb	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006552:	2b00      	cmp	r3, #0
 8006554:	d004      	beq.n	8006560 <I2C_Master_ADD10+0x26>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d108      	bne.n	8006572 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00c      	beq.n	8006582 <I2C_Master_ADD10+0x48>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006580:	605a      	str	r2, [r3, #4]
  }
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800658e:	b480      	push	{r7}
 8006590:	b091      	sub	sp, #68	@ 0x44
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800659c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b22      	cmp	r3, #34	@ 0x22
 80065b6:	f040 8169 	bne.w	800688c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10f      	bne.n	80065e2 <I2C_Master_ADDR+0x54>
 80065c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80065c6:	2b40      	cmp	r3, #64	@ 0x40
 80065c8:	d10b      	bne.n	80065e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ca:	2300      	movs	r3, #0
 80065cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	e160      	b.n	80068a4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d11d      	bne.n	8006626 <I2C_Master_ADDR+0x98>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80065f2:	d118      	bne.n	8006626 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f4:	2300      	movs	r3, #0
 80065f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006618:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	651a      	str	r2, [r3, #80]	@ 0x50
 8006624:	e13e      	b.n	80068a4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d113      	bne.n	8006658 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006630:	2300      	movs	r3, #0
 8006632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e115      	b.n	8006884 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b01      	cmp	r3, #1
 8006660:	f040 808a 	bne.w	8006778 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006666:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800666a:	d137      	bne.n	80066dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800667a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800668a:	d113      	bne.n	80066b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	e0e7      	b.n	8006884 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b4:	2300      	movs	r3, #0
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	623b      	str	r3, [r7, #32]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	623b      	str	r3, [r7, #32]
 80066c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	e0d3      	b.n	8006884 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80066dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d02e      	beq.n	8006740 <I2C_Master_ADDR+0x1b2>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d02b      	beq.n	8006740 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80066e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ea:	2b12      	cmp	r3, #18
 80066ec:	d102      	bne.n	80066f4 <I2C_Master_ADDR+0x166>
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d125      	bne.n	8006740 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d00e      	beq.n	8006718 <I2C_Master_ADDR+0x18a>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d00b      	beq.n	8006718 <I2C_Master_ADDR+0x18a>
 8006700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006702:	2b10      	cmp	r3, #16
 8006704:	d008      	beq.n	8006718 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	e007      	b.n	8006728 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006726:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	61fb      	str	r3, [r7, #28]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	e0a1      	b.n	8006884 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800674e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006750:	2300      	movs	r3, #0
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e085      	b.n	8006884 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d14d      	bne.n	800681e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	2b04      	cmp	r3, #4
 8006786:	d016      	beq.n	80067b6 <I2C_Master_ADDR+0x228>
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	2b02      	cmp	r3, #2
 800678c:	d013      	beq.n	80067b6 <I2C_Master_ADDR+0x228>
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	2b10      	cmp	r3, #16
 8006792:	d010      	beq.n	80067b6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e007      	b.n	80067c6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067c4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d4:	d117      	bne.n	8006806 <I2C_Master_ADDR+0x278>
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067dc:	d00b      	beq.n	80067f6 <I2C_Master_ADDR+0x268>
 80067de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d008      	beq.n	80067f6 <I2C_Master_ADDR+0x268>
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d005      	beq.n	80067f6 <I2C_Master_ADDR+0x268>
 80067ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d002      	beq.n	80067f6 <I2C_Master_ADDR+0x268>
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	2b20      	cmp	r3, #32
 80067f4:	d107      	bne.n	8006806 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006804:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	e032      	b.n	8006884 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800682c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800683c:	d117      	bne.n	800686e <I2C_Master_ADDR+0x2e0>
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006844:	d00b      	beq.n	800685e <I2C_Master_ADDR+0x2d0>
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	2b01      	cmp	r3, #1
 800684a:	d008      	beq.n	800685e <I2C_Master_ADDR+0x2d0>
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	2b08      	cmp	r3, #8
 8006850:	d005      	beq.n	800685e <I2C_Master_ADDR+0x2d0>
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	2b10      	cmp	r3, #16
 8006856:	d002      	beq.n	800685e <I2C_Master_ADDR+0x2d0>
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	2b20      	cmp	r3, #32
 800685c:	d107      	bne.n	800686e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800686c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800688a:	e00b      	b.n	80068a4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	e7ff      	b.n	80068a4 <I2C_Master_ADDR+0x316>
 80068a4:	bf00      	nop
 80068a6:	3744      	adds	r7, #68	@ 0x44
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d02b      	beq.n	8006922 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	781a      	ldrb	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d114      	bne.n	8006922 <I2C_SlaveTransmit_TXE+0x72>
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b29      	cmp	r3, #41	@ 0x29
 80068fc:	d111      	bne.n	8006922 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800690c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2221      	movs	r2, #33	@ 0x21
 8006912:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2228      	movs	r2, #40	@ 0x28
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff f9e3 	bl	8005ce8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d011      	beq.n	8006960 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	781a      	ldrb	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800697a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d02c      	beq.n	80069e0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d114      	bne.n	80069e0 <I2C_SlaveReceive_RXNE+0x74>
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ba:	d111      	bne.n	80069e0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2222      	movs	r2, #34	@ 0x22
 80069d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2228      	movs	r2, #40	@ 0x28
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff f98e 	bl	8005cfc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d012      	beq.n	8006a20 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a46:	2b28      	cmp	r3, #40	@ 0x28
 8006a48:	d127      	bne.n	8006a9a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a58:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	09db      	lsrs	r3, r3, #7
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d103      	bne.n	8006a7e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	81bb      	strh	r3, [r7, #12]
 8006a7c:	e002      	b.n	8006a84 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006a8c:	89ba      	ldrh	r2, [r7, #12]
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff f93c 	bl	8005d10 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a98:	e00e      	b.n	8006ab8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ace:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ade:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	60bb      	str	r3, [r7, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1c:	d172      	bne.n	8006c04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b22      	cmp	r3, #34	@ 0x22
 8006b22:	d002      	beq.n	8006b2a <I2C_Slave_STOPF+0x6a>
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b28:	d135      	bne.n	8006b96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	f043 0204 	orr.w	r2, r3, #4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fd fea0 	bl	80048a8 <HAL_DMA_GetState>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d049      	beq.n	8006c02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	4a69      	ldr	r2, [pc, #420]	@ (8006d18 <I2C_Slave_STOPF+0x258>)
 8006b74:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd fce8 	bl	8004550 <HAL_DMA_Abort_IT>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d03d      	beq.n	8006c02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b94:	e035      	b.n	8006c02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	f043 0204 	orr.w	r2, r3, #4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fd fe6a 	bl	80048a8 <HAL_DMA_GetState>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d014      	beq.n	8006c04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bde:	4a4e      	ldr	r2, [pc, #312]	@ (8006d18 <I2C_Slave_STOPF+0x258>)
 8006be0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd fcb2 	bl	8004550 <HAL_DMA_Abort_IT>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	e000      	b.n	8006c04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d03e      	beq.n	8006c8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d112      	bne.n	8006c42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4c:	2b40      	cmp	r3, #64	@ 0x40
 8006c4e:	d112      	bne.n	8006c76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c84:	f043 0204 	orr.w	r2, r3, #4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8b7 	bl	8006e08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006c9a:	e039      	b.n	8006d10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ca0:	d109      	bne.n	8006cb6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2228      	movs	r2, #40	@ 0x28
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff f823 	bl	8005cfc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b28      	cmp	r3, #40	@ 0x28
 8006cc0:	d111      	bne.n	8006ce6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a15      	ldr	r2, [pc, #84]	@ (8006d1c <I2C_Slave_STOPF+0x25c>)
 8006cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff f824 	bl	8005d2c <HAL_I2C_ListenCpltCallback>
}
 8006ce4:	e014      	b.n	8006d10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	2b22      	cmp	r3, #34	@ 0x22
 8006cec:	d002      	beq.n	8006cf4 <I2C_Slave_STOPF+0x234>
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b22      	cmp	r3, #34	@ 0x22
 8006cf2:	d10d      	bne.n	8006d10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fe fff6 	bl	8005cfc <HAL_I2C_SlaveRxCpltCallback>
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	080075a1 	.word	0x080075a1
 8006d1c:	ffff0000 	.word	0xffff0000

08006d20 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d002      	beq.n	8006d42 <I2C_Slave_AF+0x22>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d129      	bne.n	8006d96 <I2C_Slave_AF+0x76>
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b28      	cmp	r3, #40	@ 0x28
 8006d46:	d126      	bne.n	8006d96 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8006e04 <I2C_Slave_AF+0xe4>)
 8006d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d5c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d66:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d76:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fe ffcc 	bl	8005d2c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006d94:	e031      	b.n	8006dfa <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	2b21      	cmp	r3, #33	@ 0x21
 8006d9a:	d129      	bne.n	8006df0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a19      	ldr	r2, [pc, #100]	@ (8006e04 <I2C_Slave_AF+0xe4>)
 8006da0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2221      	movs	r2, #33	@ 0x21
 8006da6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006dc6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006dd0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006de0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fe f956 	bl	8005094 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7fe ff7d 	bl	8005ce8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006dee:	e004      	b.n	8006dfa <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006df8:	615a      	str	r2, [r3, #20]
}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	ffff0000 	.word	0xffff0000

08006e08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d002      	beq.n	8006e2c <I2C_ITError+0x24>
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b40      	cmp	r3, #64	@ 0x40
 8006e2a:	d10a      	bne.n	8006e42 <I2C_ITError+0x3a>
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	2b22      	cmp	r3, #34	@ 0x22
 8006e30:	d107      	bne.n	8006e42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e48:	2b28      	cmp	r3, #40	@ 0x28
 8006e4a:	d107      	bne.n	8006e5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2228      	movs	r2, #40	@ 0x28
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e5a:	e015      	b.n	8006e88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e6a:	d00a      	beq.n	8006e82 <I2C_ITError+0x7a>
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	2b60      	cmp	r3, #96	@ 0x60
 8006e70:	d007      	beq.n	8006e82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e96:	d162      	bne.n	8006f5e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ea6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d020      	beq.n	8006ef8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eba:	4a6a      	ldr	r2, [pc, #424]	@ (8007064 <I2C_ITError+0x25c>)
 8006ebc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fd fb44 	bl	8004550 <HAL_DMA_Abort_IT>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8089 	beq.w	8006fe2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0201 	bic.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4798      	blx	r3
 8006ef6:	e074      	b.n	8006fe2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	4a59      	ldr	r2, [pc, #356]	@ (8007064 <I2C_ITError+0x25c>)
 8006efe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fd fb23 	bl	8004550 <HAL_DMA_Abort_IT>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d068      	beq.n	8006fe2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f1a:	2b40      	cmp	r3, #64	@ 0x40
 8006f1c:	d10b      	bne.n	8006f36 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f58:	4610      	mov	r0, r2
 8006f5a:	4798      	blx	r3
 8006f5c:	e041      	b.n	8006fe2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b60      	cmp	r3, #96	@ 0x60
 8006f68:	d125      	bne.n	8006fb6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d10b      	bne.n	8006f9e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fe fed0 	bl	8005d54 <HAL_I2C_AbortCpltCallback>
 8006fb4:	e015      	b.n	8006fe2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc0:	2b40      	cmp	r3, #64	@ 0x40
 8006fc2:	d10b      	bne.n	8006fdc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fe feaf 	bl	8005d40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10e      	bne.n	8007010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800701e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007026:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b04      	cmp	r3, #4
 8007032:	d113      	bne.n	800705c <I2C_ITError+0x254>
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	2b28      	cmp	r3, #40	@ 0x28
 8007038:	d110      	bne.n	800705c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a0a      	ldr	r2, [pc, #40]	@ (8007068 <I2C_ITError+0x260>)
 800703e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7fe fe68 	bl	8005d2c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	080075a1 	.word	0x080075a1
 8007068:	ffff0000 	.word	0xffff0000

0800706c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	461a      	mov	r2, r3
 800707a:	4603      	mov	r3, r0
 800707c:	817b      	strh	r3, [r7, #10]
 800707e:	460b      	mov	r3, r1
 8007080:	813b      	strh	r3, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2200      	movs	r2, #0
 800709e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 fb24 	bl	80076f0 <I2C_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070bc:	d103      	bne.n	80070c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e05f      	b.n	800718a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ca:	897b      	ldrh	r3, [r7, #10]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	492d      	ldr	r1, [pc, #180]	@ (8007194 <I2C_RequestMemoryWrite+0x128>)
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fb7f 	bl	80077e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e04c      	b.n	800718a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007108:	6a39      	ldr	r1, [r7, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fc0a 	bl	8007924 <I2C_WaitOnTXEFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	2b04      	cmp	r3, #4
 800711c:	d107      	bne.n	800712e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800712c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e02b      	b.n	800718a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d105      	bne.n	8007144 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007138:	893b      	ldrh	r3, [r7, #8]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	611a      	str	r2, [r3, #16]
 8007142:	e021      	b.n	8007188 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007144:	893b      	ldrh	r3, [r7, #8]
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b29b      	uxth	r3, r3
 800714a:	b2da      	uxtb	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007154:	6a39      	ldr	r1, [r7, #32]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fbe4 	bl	8007924 <I2C_WaitOnTXEFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	2b04      	cmp	r3, #4
 8007168:	d107      	bne.n	800717a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e005      	b.n	800718a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800717e:	893b      	ldrh	r3, [r7, #8]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	00010002 	.word	0x00010002

08007198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	4608      	mov	r0, r1
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	817b      	strh	r3, [r7, #10]
 80071aa:	460b      	mov	r3, r1
 80071ac:	813b      	strh	r3, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80071c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	2200      	movs	r2, #0
 80071da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fa86 	bl	80076f0 <I2C_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071f8:	d103      	bne.n	8007202 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007200:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e0aa      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007206:	897b      	ldrh	r3, [r7, #10]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007214:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	6a3a      	ldr	r2, [r7, #32]
 800721a:	4952      	ldr	r1, [pc, #328]	@ (8007364 <I2C_RequestMemoryRead+0x1cc>)
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 fae1 	bl	80077e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e097      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007244:	6a39      	ldr	r1, [r7, #32]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 fb6c 	bl	8007924 <I2C_WaitOnTXEFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00d      	beq.n	800726e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007256:	2b04      	cmp	r3, #4
 8007258:	d107      	bne.n	800726a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007268:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e076      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d105      	bne.n	8007280 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007274:	893b      	ldrh	r3, [r7, #8]
 8007276:	b2da      	uxtb	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	611a      	str	r2, [r3, #16]
 800727e:	e021      	b.n	80072c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007280:	893b      	ldrh	r3, [r7, #8]
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	b29b      	uxth	r3, r3
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800728e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007290:	6a39      	ldr	r1, [r7, #32]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fb46 	bl	8007924 <I2C_WaitOnTXEFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d107      	bne.n	80072b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e050      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072ba:	893b      	ldrh	r3, [r7, #8]
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c6:	6a39      	ldr	r1, [r7, #32]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fb2b 	bl	8007924 <I2C_WaitOnTXEFlagUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d107      	bne.n	80072ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e035      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2200      	movs	r2, #0
 8007308:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f9ef 	bl	80076f0 <I2C_WaitOnFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00d      	beq.n	8007334 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007326:	d103      	bne.n	8007330 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800732e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e013      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007334:	897b      	ldrh	r3, [r7, #10]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f043 0301 	orr.w	r3, r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	6a3a      	ldr	r2, [r7, #32]
 8007348:	4906      	ldr	r1, [pc, #24]	@ (8007364 <I2C_RequestMemoryRead+0x1cc>)
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 fa4a 	bl	80077e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	00010002 	.word	0x00010002

08007368 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007384:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800739a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a8:	2200      	movs	r2, #0
 80073aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b8:	2200      	movs	r2, #0
 80073ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80073bc:	7cfb      	ldrb	r3, [r7, #19]
 80073be:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80073c2:	2b21      	cmp	r3, #33	@ 0x21
 80073c4:	d007      	beq.n	80073d6 <I2C_DMAXferCplt+0x6e>
 80073c6:	7cfb      	ldrb	r3, [r7, #19]
 80073c8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80073cc:	2b22      	cmp	r3, #34	@ 0x22
 80073ce:	d131      	bne.n	8007434 <I2C_DMAXferCplt+0xcc>
 80073d0:	7cbb      	ldrb	r3, [r7, #18]
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d12e      	bne.n	8007434 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073e4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2200      	movs	r2, #0
 80073ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80073ec:	7cfb      	ldrb	r3, [r7, #19]
 80073ee:	2b29      	cmp	r3, #41	@ 0x29
 80073f0:	d10a      	bne.n	8007408 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2221      	movs	r2, #33	@ 0x21
 80073f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2228      	movs	r2, #40	@ 0x28
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007400:	6978      	ldr	r0, [r7, #20]
 8007402:	f7fe fc71 	bl	8005ce8 <HAL_I2C_SlaveTxCpltCallback>
 8007406:	e00c      	b.n	8007422 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007408:	7cfb      	ldrb	r3, [r7, #19]
 800740a:	2b2a      	cmp	r3, #42	@ 0x2a
 800740c:	d109      	bne.n	8007422 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2222      	movs	r2, #34	@ 0x22
 8007412:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2228      	movs	r2, #40	@ 0x28
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800741c:	6978      	ldr	r0, [r7, #20]
 800741e:	f7fe fc6d 	bl	8005cfc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007430:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007432:	e074      	b.n	800751e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d06e      	beq.n	800751e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d107      	bne.n	800745a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007458:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007468:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007470:	d009      	beq.n	8007486 <I2C_DMAXferCplt+0x11e>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b08      	cmp	r3, #8
 8007476:	d006      	beq.n	8007486 <I2C_DMAXferCplt+0x11e>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800747e:	d002      	beq.n	8007486 <I2C_DMAXferCplt+0x11e>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b20      	cmp	r3, #32
 8007484:	d107      	bne.n	8007496 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007494:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074a4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074b4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80074c4:	6978      	ldr	r0, [r7, #20]
 80074c6:	f7fe fc3b 	bl	8005d40 <HAL_I2C_ErrorCallback>
}
 80074ca:	e028      	b.n	800751e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b40      	cmp	r3, #64	@ 0x40
 80074de:	d10a      	bne.n	80074f6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2200      	movs	r2, #0
 80074ec:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80074ee:	6978      	ldr	r0, [r7, #20]
 80074f0:	f7f9 fc82 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 80074f4:	e013      	b.n	800751e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b08      	cmp	r3, #8
 8007502:	d002      	beq.n	800750a <I2C_DMAXferCplt+0x1a2>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b20      	cmp	r3, #32
 8007508:	d103      	bne.n	8007512 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2200      	movs	r2, #0
 800750e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007510:	e002      	b.n	8007518 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2212      	movs	r2, #18
 8007516:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007518:	6978      	ldr	r0, [r7, #20]
 800751a:	f7fe fbdb 	bl	8005cd4 <HAL_I2C_MasterRxCpltCallback>
}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007532:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007540:	2200      	movs	r2, #0
 8007542:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007550:	2200      	movs	r2, #0
 8007552:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7fd f9b5 	bl	80048c4 <HAL_DMA_GetError>
 800755a:	4603      	mov	r3, r0
 800755c:	2b02      	cmp	r3, #2
 800755e:	d01b      	beq.n	8007598 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800756e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	f043 0210 	orr.w	r2, r3, #16
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7fe fbd4 	bl	8005d40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80075ba:	4b4b      	ldr	r3, [pc, #300]	@ (80076e8 <I2C_DMAAbort+0x148>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	08db      	lsrs	r3, r3, #3
 80075c0:	4a4a      	ldr	r2, [pc, #296]	@ (80076ec <I2C_DMAAbort+0x14c>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	0a1a      	lsrs	r2, r3, #8
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	00da      	lsls	r2, r3, #3
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	f043 0220 	orr.w	r2, r3, #32
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80075e6:	e00a      	b.n	80075fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fc:	d0ea      	beq.n	80075d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800760a:	2200      	movs	r2, #0
 800760c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	2200      	movs	r2, #0
 800761c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800762c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2200      	movs	r2, #0
 8007632:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007640:	2200      	movs	r2, #0
 8007642:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	2200      	movs	r2, #0
 8007652:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0201 	bic.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b60      	cmp	r3, #96	@ 0x60
 800766e:	d10e      	bne.n	800768e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2200      	movs	r2, #0
 8007684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007686:	6978      	ldr	r0, [r7, #20]
 8007688:	f7fe fb64 	bl	8005d54 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800768c:	e027      	b.n	80076de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800768e:	7cfb      	ldrb	r3, [r7, #19]
 8007690:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007694:	2b28      	cmp	r3, #40	@ 0x28
 8007696:	d117      	bne.n	80076c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2228      	movs	r2, #40	@ 0x28
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80076c6:	e007      	b.n	80076d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80076d8:	6978      	ldr	r0, [r7, #20]
 80076da:	f7fe fb31 	bl	8005d40 <HAL_I2C_ErrorCallback>
}
 80076de:	bf00      	nop
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000030 	.word	0x20000030
 80076ec:	14f8b589 	.word	0x14f8b589

080076f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	4613      	mov	r3, r2
 80076fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007700:	e048      	b.n	8007794 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007708:	d044      	beq.n	8007794 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800770a:	f7fb ffb9 	bl	8003680 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d302      	bcc.n	8007720 <I2C_WaitOnFlagUntilTimeout+0x30>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d139      	bne.n	8007794 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	0c1b      	lsrs	r3, r3, #16
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b01      	cmp	r3, #1
 8007728:	d10d      	bne.n	8007746 <I2C_WaitOnFlagUntilTimeout+0x56>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	43da      	mvns	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4013      	ands	r3, r2
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	e00c      	b.n	8007760 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	43da      	mvns	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	4013      	ands	r3, r2
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	461a      	mov	r2, r3
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	429a      	cmp	r2, r3
 8007764:	d116      	bne.n	8007794 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007780:	f043 0220 	orr.w	r2, r3, #32
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e023      	b.n	80077dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	d10d      	bne.n	80077ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	43da      	mvns	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4013      	ands	r3, r2
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bf0c      	ite	eq
 80077b0:	2301      	moveq	r3, #1
 80077b2:	2300      	movne	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	e00c      	b.n	80077d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	43da      	mvns	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4013      	ands	r3, r2
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bf0c      	ite	eq
 80077cc:	2301      	moveq	r3, #1
 80077ce:	2300      	movne	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d093      	beq.n	8007702 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077f2:	e071      	b.n	80078d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007802:	d123      	bne.n	800784c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007812:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800781c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2220      	movs	r2, #32
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007838:	f043 0204 	orr.w	r2, r3, #4
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e067      	b.n	800791c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d041      	beq.n	80078d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007854:	f7fb ff14 	bl	8003680 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d302      	bcc.n	800786a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d136      	bne.n	80078d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	0c1b      	lsrs	r3, r3, #16
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	d10c      	bne.n	800788e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	43da      	mvns	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4013      	ands	r3, r2
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	e00b      	b.n	80078a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	43da      	mvns	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4013      	ands	r3, r2
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	bf14      	ite	ne
 80078a0:	2301      	movne	r3, #1
 80078a2:	2300      	moveq	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d016      	beq.n	80078d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c4:	f043 0220 	orr.w	r2, r3, #32
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e021      	b.n	800791c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	0c1b      	lsrs	r3, r3, #16
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d10c      	bne.n	80078fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	43da      	mvns	r2, r3
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	4013      	ands	r3, r2
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bf14      	ite	ne
 80078f4:	2301      	movne	r3, #1
 80078f6:	2300      	moveq	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	e00b      	b.n	8007914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	43da      	mvns	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	bf14      	ite	ne
 800790e:	2301      	movne	r3, #1
 8007910:	2300      	moveq	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	f47f af6d 	bne.w	80077f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007930:	e034      	b.n	800799c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 f8b8 	bl	8007aa8 <I2C_IsAcknowledgeFailed>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e034      	b.n	80079ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d028      	beq.n	800799c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794a:	f7fb fe99 	bl	8003680 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	429a      	cmp	r2, r3
 8007958:	d302      	bcc.n	8007960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d11d      	bne.n	800799c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796a:	2b80      	cmp	r3, #128	@ 0x80
 800796c:	d016      	beq.n	800799c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007988:	f043 0220 	orr.w	r2, r3, #32
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e007      	b.n	80079ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a6:	2b80      	cmp	r3, #128	@ 0x80
 80079a8:	d1c3      	bne.n	8007932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80079c0:	e034      	b.n	8007a2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f870 	bl	8007aa8 <I2C_IsAcknowledgeFailed>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e034      	b.n	8007a3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d8:	d028      	beq.n	8007a2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079da:	f7fb fe51 	bl	8003680 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d302      	bcc.n	80079f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d11d      	bne.n	8007a2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	f003 0304 	and.w	r3, r3, #4
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d016      	beq.n	8007a2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e007      	b.n	8007a3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d1c3      	bne.n	80079c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a50:	4b13      	ldr	r3, [pc, #76]	@ (8007aa0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	08db      	lsrs	r3, r3, #3
 8007a56:	4a13      	ldr	r2, [pc, #76]	@ (8007aa4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007a58:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5c:	0a1a      	lsrs	r2, r3, #8
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d107      	bne.n	8007a82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	f043 0220 	orr.w	r2, r3, #32
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e008      	b.n	8007a94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a90:	d0e9      	beq.n	8007a66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	20000030 	.word	0x20000030
 8007aa4:	14f8b589 	.word	0x14f8b589

08007aa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007abe:	d11b      	bne.n	8007af8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ac8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae4:	f043 0204 	orr.w	r2, r3, #4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e000      	b.n	8007afa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b12:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007b16:	d103      	bne.n	8007b20 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b1e:	e007      	b.n	8007b30 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b24:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007b28:	d102      	bne.n	8007b30 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e101      	b.n	8007d52 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f006 f935 	bl	800ddd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2203      	movs	r2, #3
 8007b72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b7c:	d102      	bne.n	8007b84 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f002 fc8c 	bl	800a4a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7c1a      	ldrb	r2, [r3, #16]
 8007b96:	f88d 2000 	strb.w	r2, [sp]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b9e:	f002 fb6b 	bl	800a278 <USB_CoreInit>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e0ce      	b.n	8007d52 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f002 fc84 	bl	800a4c8 <USB_SetCurrentMode>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e0bf      	b.n	8007d52 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
 8007bd6:	e04a      	b.n	8007c6e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007bd8:	7bfa      	ldrb	r2, [r7, #15]
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	3315      	adds	r3, #21
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007bec:	7bfa      	ldrb	r2, [r7, #15]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	3314      	adds	r3, #20
 8007bfc:	7bfa      	ldrb	r2, [r7, #15]
 8007bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007c00:	7bfa      	ldrb	r2, [r7, #15]
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	b298      	uxth	r0, r3
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	332e      	adds	r3, #46	@ 0x2e
 8007c14:	4602      	mov	r2, r0
 8007c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007c18:	7bfa      	ldrb	r2, [r7, #15]
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	3318      	adds	r3, #24
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007c2c:	7bfa      	ldrb	r2, [r7, #15]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	331c      	adds	r3, #28
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007c40:	7bfa      	ldrb	r2, [r7, #15]
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4613      	mov	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3320      	adds	r3, #32
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c54:	7bfa      	ldrb	r2, [r7, #15]
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	3324      	adds	r3, #36	@ 0x24
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	73fb      	strb	r3, [r7, #15]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	791b      	ldrb	r3, [r3, #4]
 8007c72:	7bfa      	ldrb	r2, [r7, #15]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d3af      	bcc.n	8007bd8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
 8007c7c:	e044      	b.n	8007d08 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c7e:	7bfa      	ldrb	r2, [r7, #15]
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c94:	7bfa      	ldrb	r2, [r7, #15]
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007ca6:	7bfa      	ldrb	r2, [r7, #15]
 8007ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007caa:	7bfa      	ldrb	r2, [r7, #15]
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007cc0:	7bfa      	ldrb	r2, [r7, #15]
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007cd6:	7bfa      	ldrb	r2, [r7, #15]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	3301      	adds	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	791b      	ldrb	r3, [r3, #4]
 8007d0c:	7bfa      	ldrb	r2, [r7, #15]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d3b5      	bcc.n	8007c7e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7c1a      	ldrb	r2, [r3, #16]
 8007d1a:	f88d 2000 	strb.w	r2, [sp]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d22:	f002 fc1d 	bl	800a560 <USB_DevInit>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e00c      	b.n	8007d52 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f003 fc67 	bl	800b61e <USB_DevDisconnect>

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_PCD_Start+0x1c>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e022      	b.n	8007dbc <HAL_PCD_Start+0x62>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d105      	bne.n	8007d9e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f002 fb6e 	bl	800a484 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f003 fc15 	bl	800b5dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007dc4:	b590      	push	{r4, r7, lr}
 8007dc6:	b08d      	sub	sp, #52	@ 0x34
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f003 fcd3 	bl	800b786 <USB_GetMode>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f040 848c 	bne.w	8008700 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f003 fc37 	bl	800b660 <USB_ReadInterrupts>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8482 	beq.w	80086fe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	0a1b      	lsrs	r3, r3, #8
 8007e04:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f003 fc24 	bl	800b660 <USB_ReadInterrupts>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d107      	bne.n	8007e32 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	695a      	ldr	r2, [r3, #20]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f002 0202 	and.w	r2, r2, #2
 8007e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f003 fc12 	bl	800b660 <USB_ReadInterrupts>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b10      	cmp	r3, #16
 8007e44:	d161      	bne.n	8007f0a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	699a      	ldr	r2, [r3, #24]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0210 	bic.w	r2, r2, #16
 8007e54:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f003 020f 	and.w	r2, r3, #15
 8007e62:	4613      	mov	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	3304      	adds	r3, #4
 8007e74:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007e7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e80:	d124      	bne.n	8007ecc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007e88:	4013      	ands	r3, r2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d035      	beq.n	8007efa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	091b      	lsrs	r3, r3, #4
 8007e96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6a38      	ldr	r0, [r7, #32]
 8007ea2:	f003 fa49 	bl	800b338 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	091b      	lsrs	r3, r3, #4
 8007eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eb2:	441a      	add	r2, r3
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	695a      	ldr	r2, [r3, #20]
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ec4:	441a      	add	r2, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	615a      	str	r2, [r3, #20]
 8007eca:	e016      	b.n	8007efa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007ed2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007ed6:	d110      	bne.n	8007efa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ede:	2208      	movs	r2, #8
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6a38      	ldr	r0, [r7, #32]
 8007ee4:	f003 fa28 	bl	800b338 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	695a      	ldr	r2, [r3, #20]
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	091b      	lsrs	r3, r3, #4
 8007ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ef4:	441a      	add	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699a      	ldr	r2, [r3, #24]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0210 	orr.w	r2, r2, #16
 8007f08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f003 fba6 	bl	800b660 <USB_ReadInterrupts>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f1e:	f040 80a7 	bne.w	8008070 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f003 fbab 	bl	800b686 <USB_ReadDevAllOutEpInterrupt>
 8007f30:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007f32:	e099      	b.n	8008068 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 808e 	beq.w	800805c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f003 fbcf 	bl	800b6ee <USB_ReadDevOutEPInterrupt>
 8007f50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00c      	beq.n	8007f76 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007f6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fea3 	bl	8008cbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00c      	beq.n	8007f9a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2308      	movs	r3, #8
 8007f90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007f92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 ff79 	bl	8008e8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f003 0310 	and.w	r3, r3, #16
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d008      	beq.n	8007fb6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	2310      	movs	r3, #16
 8007fb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d030      	beq.n	8008022 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc8:	2b80      	cmp	r3, #128	@ 0x80
 8007fca:	d109      	bne.n	8007fe0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007fde:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	78db      	ldrb	r3, [r3, #3]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d108      	bne.n	8008010 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2200      	movs	r2, #0
 8008002:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008006:	b2db      	uxtb	r3, r3
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f005 ffe0 	bl	800dfd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801c:	461a      	mov	r2, r3
 800801e:	2302      	movs	r3, #2
 8008020:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d008      	beq.n	800803e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008038:	461a      	mov	r2, r3
 800803a:	2320      	movs	r3, #32
 800803c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d009      	beq.n	800805c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008054:	461a      	mov	r2, r3
 8008056:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800805a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	3301      	adds	r3, #1
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008064:	085b      	lsrs	r3, r3, #1
 8008066:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	f47f af62 	bne.w	8007f34 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f003 faf3 	bl	800b660 <USB_ReadInterrupts>
 800807a:	4603      	mov	r3, r0
 800807c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008080:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008084:	f040 80db 	bne.w	800823e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f003 fb14 	bl	800b6ba <USB_ReadDevAllInEpInterrupt>
 8008092:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008098:	e0cd      	b.n	8008236 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800809a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80c2 	beq.w	800822a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ac:	b2d2      	uxtb	r2, r2
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f003 fb3a 	bl	800b72a <USB_ReadDevInEPInterrupt>
 80080b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d057      	beq.n	8008172 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	f003 030f 	and.w	r3, r3, #15
 80080c8:	2201      	movs	r2, #1
 80080ca:	fa02 f303 	lsl.w	r3, r2, r3
 80080ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	43db      	mvns	r3, r3
 80080dc:	69f9      	ldr	r1, [r7, #28]
 80080de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080e2:	4013      	ands	r3, r2
 80080e4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f2:	461a      	mov	r2, r3
 80080f4:	2301      	movs	r3, #1
 80080f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	799b      	ldrb	r3, [r3, #6]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d132      	bne.n	8008166 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008104:	4613      	mov	r3, r2
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	3320      	adds	r3, #32
 8008110:	6819      	ldr	r1, [r3, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008116:	4613      	mov	r3, r2
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4403      	add	r3, r0
 8008120:	331c      	adds	r3, #28
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4419      	add	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800812a:	4613      	mov	r3, r2
 800812c:	00db      	lsls	r3, r3, #3
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4403      	add	r3, r0
 8008134:	3320      	adds	r3, #32
 8008136:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d113      	bne.n	8008166 <HAL_PCD_IRQHandler+0x3a2>
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008142:	4613      	mov	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	3324      	adds	r3, #36	@ 0x24
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d108      	bne.n	8008166 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6818      	ldr	r0, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800815e:	461a      	mov	r2, r3
 8008160:	2101      	movs	r1, #1
 8008162:	f003 fb41 	bl	800b7e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f005 feb4 	bl	800deda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f003 0308 	and.w	r3, r3, #8
 8008178:	2b00      	cmp	r3, #0
 800817a:	d008      	beq.n	800818e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008188:	461a      	mov	r2, r3
 800818a:	2308      	movs	r3, #8
 800818c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a4:	461a      	mov	r2, r3
 80081a6:	2310      	movs	r3, #16
 80081a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d008      	beq.n	80081c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80081b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c0:	461a      	mov	r2, r3
 80081c2:	2340      	movs	r3, #64	@ 0x40
 80081c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d023      	beq.n	8008218 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80081d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081d2:	6a38      	ldr	r0, [r7, #32]
 80081d4:	f002 fb28 	bl	800a828 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80081d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	3310      	adds	r3, #16
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	4413      	add	r3, r2
 80081e8:	3304      	adds	r3, #4
 80081ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	78db      	ldrb	r3, [r3, #3]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d108      	bne.n	8008206 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2200      	movs	r2, #0
 80081f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f005 fef7 	bl	800dff4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008212:	461a      	mov	r2, r3
 8008214:	2302      	movs	r3, #2
 8008216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008222:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fcbd 	bl	8008ba4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	3301      	adds	r3, #1
 800822e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f af2e 	bne.w	800809a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f003 fa0c 	bl	800b660 <USB_ReadInterrupts>
 8008248:	4603      	mov	r3, r0
 800824a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800824e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008252:	d122      	bne.n	800829a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800826e:	2b01      	cmp	r3, #1
 8008270:	d108      	bne.n	8008284 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fea3 	bl	8008fc8 <HAL_PCDEx_LPM_Callback>
 8008282:	e002      	b.n	800828a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f005 fe95 	bl	800dfb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f003 f9de 	bl	800b660 <USB_ReadInterrupts>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082ae:	d112      	bne.n	80082d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d102      	bne.n	80082c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f005 fe51 	bl	800df68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80082d4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f003 f9c0 	bl	800b660 <USB_ReadInterrupts>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ea:	f040 80b7 	bne.w	800845c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2110      	movs	r1, #16
 8008308:	4618      	mov	r0, r3
 800830a:	f002 fa8d 	bl	800a828 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800830e:	2300      	movs	r3, #0
 8008310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008312:	e046      	b.n	80083a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008320:	461a      	mov	r2, r3
 8008322:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008326:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008338:	0151      	lsls	r1, r2, #5
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	440a      	add	r2, r1
 800833e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008342:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008346:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008354:	461a      	mov	r2, r3
 8008356:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800835a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800835c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008376:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800837a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800837c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008396:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800839a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800839c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839e:	3301      	adds	r3, #1
 80083a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	791b      	ldrb	r3, [r3, #4]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d3b2      	bcc.n	8008314 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083bc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80083c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	7bdb      	ldrb	r3, [r3, #15]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d016      	beq.n	80083f8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083da:	f043 030b 	orr.w	r3, r3, #11
 80083de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083f0:	f043 030b 	orr.w	r3, r3, #11
 80083f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80083f6:	e015      	b.n	8008424 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008406:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800840a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800840e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800841e:	f043 030b 	orr.w	r3, r3, #11
 8008422:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69fa      	ldr	r2, [r7, #28]
 800842e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008432:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008436:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008446:	461a      	mov	r2, r3
 8008448:	f003 f9ce 	bl	800b7e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695a      	ldr	r2, [r3, #20]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800845a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f003 f8fd 	bl	800b660 <USB_ReadInterrupts>
 8008466:	4603      	mov	r3, r0
 8008468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800846c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008470:	d123      	bne.n	80084ba <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f003 f993 	bl	800b7a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f002 fa4a 	bl	800a91a <USB_GetDevSpeed>
 8008486:	4603      	mov	r3, r0
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681c      	ldr	r4, [r3, #0]
 8008492:	f001 f9c9 	bl	8009828 <HAL_RCC_GetHCLKFreq>
 8008496:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800849c:	461a      	mov	r2, r3
 800849e:	4620      	mov	r0, r4
 80084a0:	f001 ff4e 	bl	800a340 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f005 fd40 	bl	800df2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	695a      	ldr	r2, [r3, #20]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80084b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f003 f8ce 	bl	800b660 <USB_ReadInterrupts>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f003 0308 	and.w	r3, r3, #8
 80084ca:	2b08      	cmp	r3, #8
 80084cc:	d10a      	bne.n	80084e4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f005 fd1d 	bl	800df0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695a      	ldr	r2, [r3, #20]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f002 0208 	and.w	r2, r2, #8
 80084e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f003 f8b9 	bl	800b660 <USB_ReadInterrupts>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084f4:	2b80      	cmp	r3, #128	@ 0x80
 80084f6:	d123      	bne.n	8008540 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008504:	2301      	movs	r3, #1
 8008506:	627b      	str	r3, [r7, #36]	@ 0x24
 8008508:	e014      	b.n	8008534 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800850e:	4613      	mov	r3, r2
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	440b      	add	r3, r1
 8008518:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d105      	bne.n	800852e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	b2db      	uxtb	r3, r3
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fb0a 	bl	8008b42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008530:	3301      	adds	r3, #1
 8008532:	627b      	str	r3, [r7, #36]	@ 0x24
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	791b      	ldrb	r3, [r3, #4]
 8008538:	461a      	mov	r2, r3
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	4293      	cmp	r3, r2
 800853e:	d3e4      	bcc.n	800850a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f003 f88b 	bl	800b660 <USB_ReadInterrupts>
 800854a:	4603      	mov	r3, r0
 800854c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008554:	d13c      	bne.n	80085d0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008556:	2301      	movs	r3, #1
 8008558:	627b      	str	r3, [r7, #36]	@ 0x24
 800855a:	e02b      	b.n	80085b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008570:	4613      	mov	r3, r2
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	3318      	adds	r3, #24
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d115      	bne.n	80085ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008582:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008584:	2b00      	cmp	r3, #0
 8008586:	da12      	bge.n	80085ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	3317      	adds	r3, #23
 8008598:	2201      	movs	r2, #1
 800859a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 faca 	bl	8008b42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	3301      	adds	r3, #1
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	791b      	ldrb	r3, [r3, #4]
 80085b8:	461a      	mov	r2, r3
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	4293      	cmp	r3, r2
 80085be:	d3cd      	bcc.n	800855c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695a      	ldr	r2, [r3, #20]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80085ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f003 f843 	bl	800b660 <USB_ReadInterrupts>
 80085da:	4603      	mov	r3, r0
 80085dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085e4:	d156      	bne.n	8008694 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085e6:	2301      	movs	r3, #1
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ea:	e045      	b.n	8008678 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008600:	4613      	mov	r3, r2
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d12e      	bne.n	8008672 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008614:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008616:	2b00      	cmp	r3, #0
 8008618:	da2b      	bge.n	8008672 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	0c1a      	lsrs	r2, r3, #16
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008624:	4053      	eors	r3, r2
 8008626:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800862a:	2b00      	cmp	r3, #0
 800862c:	d121      	bne.n	8008672 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008632:	4613      	mov	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	440b      	add	r3, r1
 800863c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008640:	2201      	movs	r2, #1
 8008642:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800866a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800866e:	6053      	str	r3, [r2, #4]
            break;
 8008670:	e008      	b.n	8008684 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	3301      	adds	r3, #1
 8008676:	627b      	str	r3, [r7, #36]	@ 0x24
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	791b      	ldrb	r3, [r3, #4]
 800867c:	461a      	mov	r2, r3
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	4293      	cmp	r3, r2
 8008682:	d3b3      	bcc.n	80085ec <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695a      	ldr	r2, [r3, #20]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f002 ffe1 	bl	800b660 <USB_ReadInterrupts>
 800869e:	4603      	mov	r3, r0
 80086a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a8:	d10a      	bne.n	80086c0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f005 fcb4 	bl	800e018 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695a      	ldr	r2, [r3, #20]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80086be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f002 ffcb 	bl	800b660 <USB_ReadInterrupts>
 80086ca:	4603      	mov	r3, r0
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d115      	bne.n	8008700 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f005 fca4 	bl	800e034 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6859      	ldr	r1, [r3, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	605a      	str	r2, [r3, #4]
 80086fc:	e000      	b.n	8008700 <HAL_PCD_IRQHandler+0x93c>
      return;
 80086fe:	bf00      	nop
    }
  }
}
 8008700:	3734      	adds	r7, #52	@ 0x34
 8008702:	46bd      	mov	sp, r7
 8008704:	bd90      	pop	{r4, r7, pc}

08008706 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_PCD_SetAddress+0x1a>
 800871c:	2302      	movs	r3, #2
 800871e:	e012      	b.n	8008746 <HAL_PCD_SetAddress+0x40>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	78fa      	ldrb	r2, [r7, #3]
 800872c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	4611      	mov	r1, r2
 8008736:	4618      	mov	r0, r3
 8008738:	f002 ff2a 	bl	800b590 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	461a      	mov	r2, r3
 800875c:	4603      	mov	r3, r0
 800875e:	70fb      	strb	r3, [r7, #3]
 8008760:	460b      	mov	r3, r1
 8008762:	803b      	strh	r3, [r7, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800876c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008770:	2b00      	cmp	r3, #0
 8008772:	da0f      	bge.n	8008794 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	f003 020f 	and.w	r2, r3, #15
 800877a:	4613      	mov	r3, r2
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	3310      	adds	r3, #16
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	4413      	add	r3, r2
 8008788:	3304      	adds	r3, #4
 800878a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	705a      	strb	r2, [r3, #1]
 8008792:	e00f      	b.n	80087b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	f003 020f 	and.w	r2, r3, #15
 800879a:	4613      	mov	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	3304      	adds	r3, #4
 80087ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80087c0:	883b      	ldrh	r3, [r7, #0]
 80087c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	78ba      	ldrb	r2, [r7, #2]
 80087ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80087e2:	78bb      	ldrb	r3, [r7, #2]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d102      	bne.n	80087ee <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_PCD_EP_Open+0xae>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e00e      	b.n	800881a <HAL_PCD_EP_Open+0xcc>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68f9      	ldr	r1, [r7, #12]
 800880a:	4618      	mov	r0, r3
 800880c:	f002 f8aa 	bl	800a964 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008818:	7afb      	ldrb	r3, [r7, #11]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800882e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008832:	2b00      	cmp	r3, #0
 8008834:	da0f      	bge.n	8008856 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	f003 020f 	and.w	r2, r3, #15
 800883c:	4613      	mov	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	3310      	adds	r3, #16
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4413      	add	r3, r2
 800884a:	3304      	adds	r3, #4
 800884c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	705a      	strb	r2, [r3, #1]
 8008854:	e00f      	b.n	8008876 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	4613      	mov	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4413      	add	r3, r2
 800886c:	3304      	adds	r3, #4
 800886e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	b2da      	uxtb	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008888:	2b01      	cmp	r3, #1
 800888a:	d101      	bne.n	8008890 <HAL_PCD_EP_Close+0x6e>
 800888c:	2302      	movs	r3, #2
 800888e:	e00e      	b.n	80088ae <HAL_PCD_EP_Close+0x8c>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68f9      	ldr	r1, [r7, #12]
 800889e:	4618      	mov	r0, r3
 80088a0:	f002 f8e8 	bl	800aa74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b086      	sub	sp, #24
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	603b      	str	r3, [r7, #0]
 80088c2:	460b      	mov	r3, r1
 80088c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088c6:	7afb      	ldrb	r3, [r7, #11]
 80088c8:	f003 020f 	and.w	r2, r3, #15
 80088cc:	4613      	mov	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	3304      	adds	r3, #4
 80088de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2200      	movs	r2, #0
 80088f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088f8:	7afb      	ldrb	r3, [r7, #11]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	799b      	ldrb	r3, [r3, #6]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d102      	bne.n	8008912 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	799b      	ldrb	r3, [r3, #6]
 800891a:	461a      	mov	r2, r3
 800891c:	6979      	ldr	r1, [r7, #20]
 800891e:	f002 f985 	bl	800ac2c <USB_EPStartXfer>

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	f003 020f 	and.w	r2, r3, #15
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4613      	mov	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800894e:	681b      	ldr	r3, [r3, #0]
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	460b      	mov	r3, r1
 800896a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800896c:	7afb      	ldrb	r3, [r7, #11]
 800896e:	f003 020f 	and.w	r2, r3, #15
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	3310      	adds	r3, #16
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	3304      	adds	r3, #4
 8008982:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2200      	movs	r2, #0
 8008994:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2201      	movs	r2, #1
 800899a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	799b      	ldrb	r3, [r3, #6]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d102      	bne.n	80089b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	799b      	ldrb	r3, [r3, #6]
 80089be:	461a      	mov	r2, r3
 80089c0:	6979      	ldr	r1, [r7, #20]
 80089c2:	f002 f933 	bl	800ac2c <USB_EPStartXfer>

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	7912      	ldrb	r2, [r2, #4]
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d901      	bls.n	80089ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e04f      	b.n	8008a8e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80089ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	da0f      	bge.n	8008a16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	f003 020f 	and.w	r2, r3, #15
 80089fc:	4613      	mov	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	3310      	adds	r3, #16
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	4413      	add	r3, r2
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2201      	movs	r2, #1
 8008a12:	705a      	strb	r2, [r3, #1]
 8008a14:	e00d      	b.n	8008a32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	4413      	add	r3, r2
 8008a28:	3304      	adds	r3, #4
 8008a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a38:	78fb      	ldrb	r3, [r7, #3]
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <HAL_PCD_EP_SetStall+0x82>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e01d      	b.n	8008a8e <HAL_PCD_EP_SetStall+0xbe>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68f9      	ldr	r1, [r7, #12]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f002 fcc1 	bl	800b3e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6818      	ldr	r0, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7999      	ldrb	r1, [r3, #6]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f002 feb2 	bl	800b7e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	f003 030f 	and.w	r3, r3, #15
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7912      	ldrb	r2, [r2, #4]
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d901      	bls.n	8008ab4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e042      	b.n	8008b3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da0f      	bge.n	8008adc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	f003 020f 	and.w	r2, r3, #15
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	3310      	adds	r3, #16
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4413      	add	r3, r2
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	705a      	strb	r2, [r3, #1]
 8008ada:	e00f      	b.n	8008afc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	f003 020f 	and.w	r2, r3, #15
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	4413      	add	r3, r2
 8008af2:	3304      	adds	r3, #4
 8008af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_PCD_EP_ClrStall+0x86>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e00e      	b.n	8008b3a <HAL_PCD_EP_ClrStall+0xa4>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68f9      	ldr	r1, [r7, #12]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 fcca 	bl	800b4c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da0c      	bge.n	8008b70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	f003 020f 	and.w	r2, r3, #15
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	3310      	adds	r3, #16
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	4413      	add	r3, r2
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	e00c      	b.n	8008b8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	f003 020f 	and.w	r2, r3, #15
 8008b76:	4613      	mov	r3, r2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	4413      	add	r3, r2
 8008b86:	3304      	adds	r3, #4
 8008b88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f002 fae9 	bl	800b168 <USB_EPStopXfer>
 8008b96:	4603      	mov	r3, r0
 8008b98:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08a      	sub	sp, #40	@ 0x28
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	3310      	adds	r3, #16
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3304      	adds	r3, #4
 8008bca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	695a      	ldr	r2, [r3, #20]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d901      	bls.n	8008bdc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e06b      	b.n	8008cb4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	691a      	ldr	r2, [r3, #16]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d902      	bls.n	8008bf8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	3303      	adds	r3, #3
 8008bfc:	089b      	lsrs	r3, r3, #2
 8008bfe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c00:	e02a      	b.n	8008c58 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	691a      	ldr	r2, [r3, #16]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d902      	bls.n	8008c1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	3303      	adds	r3, #3
 8008c22:	089b      	lsrs	r3, r3, #2
 8008c24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	68d9      	ldr	r1, [r3, #12]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	4603      	mov	r3, r0
 8008c3a:	6978      	ldr	r0, [r7, #20]
 8008c3c:	f002 fb3e 	bl	800b2bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	441a      	add	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	695a      	ldr	r2, [r3, #20]
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	441a      	add	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d809      	bhi.n	8008c82 <PCD_WriteEmptyTxFifo+0xde>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	695a      	ldr	r2, [r3, #20]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d203      	bcs.n	8008c82 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1bf      	bne.n	8008c02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d811      	bhi.n	8008cb2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	2201      	movs	r2, #1
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	6939      	ldr	r1, [r7, #16]
 8008caa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cae:	4013      	ands	r3, r2
 8008cb0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3720      	adds	r7, #32
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	333c      	adds	r3, #60	@ 0x3c
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	799b      	ldrb	r3, [r3, #6]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d17b      	bne.n	8008dea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f003 0308 	and.w	r3, r3, #8
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d015      	beq.n	8008d28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	4a61      	ldr	r2, [pc, #388]	@ (8008e84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	f240 80b9 	bls.w	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 80b3 	beq.w	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d24:	6093      	str	r3, [r2, #8]
 8008d26:	e0a7      	b.n	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d009      	beq.n	8008d46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3e:	461a      	mov	r2, r3
 8008d40:	2320      	movs	r3, #32
 8008d42:	6093      	str	r3, [r2, #8]
 8008d44:	e098      	b.n	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 8093 	bne.w	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	4a4b      	ldr	r2, [pc, #300]	@ (8008e84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d90f      	bls.n	8008d7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d70:	461a      	mov	r2, r3
 8008d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d76:	6093      	str	r3, [r2, #8]
 8008d78:	e07e      	b.n	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a1a      	ldr	r2, [r3, #32]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	0159      	lsls	r1, r3, #5
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	440b      	add	r3, r1
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008da6:	1ad2      	subs	r2, r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d114      	bne.n	8008ddc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6818      	ldr	r0, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	f002 fd0e 	bl	800b7e8 <USB_EP0_OutStart>
 8008dcc:	e006      	b.n	8008ddc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	441a      	add	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f005 f85e 	bl	800dea4 <HAL_PCD_DataOutStageCallback>
 8008de8:	e046      	b.n	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	4a26      	ldr	r2, [pc, #152]	@ (8008e88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d124      	bne.n	8008e3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e08:	461a      	mov	r2, r3
 8008e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e0e:	6093      	str	r3, [r2, #8]
 8008e10:	e032      	b.n	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d008      	beq.n	8008e2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e28:	461a      	mov	r2, r3
 8008e2a:	2320      	movs	r3, #32
 8008e2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f005 f835 	bl	800dea4 <HAL_PCD_DataOutStageCallback>
 8008e3a:	e01d      	b.n	8008e78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d114      	bne.n	8008e6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	4613      	mov	r3, r2
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d108      	bne.n	8008e6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008e64:	461a      	mov	r2, r3
 8008e66:	2100      	movs	r1, #0
 8008e68:	f002 fcbe 	bl	800b7e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f005 f816 	bl	800dea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	4f54300a 	.word	0x4f54300a
 8008e88:	4f54310a 	.word	0x4f54310a

08008e8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	333c      	adds	r3, #60	@ 0x3c
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4a15      	ldr	r2, [pc, #84]	@ (8008f14 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d90e      	bls.n	8008ee0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d009      	beq.n	8008ee0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ede:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f004 ffcd 	bl	800de80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8008f14 <PCD_EP_OutSetupPacket_int+0x88>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d90c      	bls.n	8008f08 <PCD_EP_OutSetupPacket_int+0x7c>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	799b      	ldrb	r3, [r3, #6]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d108      	bne.n	8008f08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f00:	461a      	mov	r2, r3
 8008f02:	2101      	movs	r1, #1
 8008f04:	f002 fc70 	bl	800b7e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	4f54300a 	.word	0x4f54300a

08008f18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
 8008f24:	4613      	mov	r3, r2
 8008f26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d107      	bne.n	8008f46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008f36:	883b      	ldrh	r3, [r7, #0]
 8008f38:	0419      	lsls	r1, r3, #16
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f44:	e028      	b.n	8008f98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4c:	0c1b      	lsrs	r3, r3, #16
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
 8008f58:	e00d      	b.n	8008f76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	3340      	adds	r3, #64	@ 0x40
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	0c1b      	lsrs	r3, r3, #16
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	3301      	adds	r3, #1
 8008f74:	73fb      	strb	r3, [r7, #15]
 8008f76:	7bfa      	ldrb	r2, [r7, #15]
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d3ec      	bcc.n	8008f5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008f80:	883b      	ldrh	r3, [r7, #0]
 8008f82:	0418      	lsls	r0, r3, #16
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6819      	ldr	r1, [r3, #0]
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	4302      	orrs	r2, r0
 8008f90:	3340      	adds	r3, #64	@ 0x40
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	887a      	ldrh	r2, [r7, #2]
 8008fb8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e267      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d075      	beq.n	80090ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008ffe:	4b88      	ldr	r3, [pc, #544]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 030c 	and.w	r3, r3, #12
 8009006:	2b04      	cmp	r3, #4
 8009008:	d00c      	beq.n	8009024 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800900a:	4b85      	ldr	r3, [pc, #532]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009012:	2b08      	cmp	r3, #8
 8009014:	d112      	bne.n	800903c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009016:	4b82      	ldr	r3, [pc, #520]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800901e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009022:	d10b      	bne.n	800903c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009024:	4b7e      	ldr	r3, [pc, #504]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d05b      	beq.n	80090e8 <HAL_RCC_OscConfig+0x108>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d157      	bne.n	80090e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e242      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009044:	d106      	bne.n	8009054 <HAL_RCC_OscConfig+0x74>
 8009046:	4b76      	ldr	r3, [pc, #472]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a75      	ldr	r2, [pc, #468]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800904c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	e01d      	b.n	8009090 <HAL_RCC_OscConfig+0xb0>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800905c:	d10c      	bne.n	8009078 <HAL_RCC_OscConfig+0x98>
 800905e:	4b70      	ldr	r3, [pc, #448]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a6f      	ldr	r2, [pc, #444]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	4b6d      	ldr	r3, [pc, #436]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a6c      	ldr	r2, [pc, #432]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	e00b      	b.n	8009090 <HAL_RCC_OscConfig+0xb0>
 8009078:	4b69      	ldr	r3, [pc, #420]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a68      	ldr	r2, [pc, #416]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800907e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	4b66      	ldr	r3, [pc, #408]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a65      	ldr	r2, [pc, #404]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800908a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800908e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d013      	beq.n	80090c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009098:	f7fa faf2 	bl	8003680 <HAL_GetTick>
 800909c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090a0:	f7fa faee 	bl	8003680 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b64      	cmp	r3, #100	@ 0x64
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e207      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090b2:	4b5b      	ldr	r3, [pc, #364]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0f0      	beq.n	80090a0 <HAL_RCC_OscConfig+0xc0>
 80090be:	e014      	b.n	80090ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c0:	f7fa fade 	bl	8003680 <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090c8:	f7fa fada 	bl	8003680 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b64      	cmp	r3, #100	@ 0x64
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e1f3      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090da:	4b51      	ldr	r3, [pc, #324]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1f0      	bne.n	80090c8 <HAL_RCC_OscConfig+0xe8>
 80090e6:	e000      	b.n	80090ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d063      	beq.n	80091be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80090f6:	4b4a      	ldr	r3, [pc, #296]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f003 030c 	and.w	r3, r3, #12
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009102:	4b47      	ldr	r3, [pc, #284]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800910a:	2b08      	cmp	r3, #8
 800910c:	d11c      	bne.n	8009148 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800910e:	4b44      	ldr	r3, [pc, #272]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d116      	bne.n	8009148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800911a:	4b41      	ldr	r3, [pc, #260]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d005      	beq.n	8009132 <HAL_RCC_OscConfig+0x152>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d001      	beq.n	8009132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e1c7      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009132:	4b3b      	ldr	r3, [pc, #236]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	4937      	ldr	r1, [pc, #220]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009142:	4313      	orrs	r3, r2
 8009144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009146:	e03a      	b.n	80091be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d020      	beq.n	8009192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009150:	4b34      	ldr	r3, [pc, #208]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009152:	2201      	movs	r2, #1
 8009154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009156:	f7fa fa93 	bl	8003680 <HAL_GetTick>
 800915a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800915c:	e008      	b.n	8009170 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800915e:	f7fa fa8f 	bl	8003680 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	2b02      	cmp	r3, #2
 800916a:	d901      	bls.n	8009170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e1a8      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009170:	4b2b      	ldr	r3, [pc, #172]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0f0      	beq.n	800915e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800917c:	4b28      	ldr	r3, [pc, #160]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	4925      	ldr	r1, [pc, #148]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 800918c:	4313      	orrs	r3, r2
 800918e:	600b      	str	r3, [r1, #0]
 8009190:	e015      	b.n	80091be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009192:	4b24      	ldr	r3, [pc, #144]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009198:	f7fa fa72 	bl	8003680 <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091a0:	f7fa fa6e 	bl	8003680 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e187      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f0      	bne.n	80091a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d036      	beq.n	8009238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d016      	beq.n	8009200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091d2:	4b15      	ldr	r3, [pc, #84]	@ (8009228 <HAL_RCC_OscConfig+0x248>)
 80091d4:	2201      	movs	r2, #1
 80091d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091d8:	f7fa fa52 	bl	8003680 <HAL_GetTick>
 80091dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091de:	e008      	b.n	80091f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091e0:	f7fa fa4e 	bl	8003680 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d901      	bls.n	80091f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e167      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009220 <HAL_RCC_OscConfig+0x240>)
 80091f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0f0      	beq.n	80091e0 <HAL_RCC_OscConfig+0x200>
 80091fe:	e01b      	b.n	8009238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009200:	4b09      	ldr	r3, [pc, #36]	@ (8009228 <HAL_RCC_OscConfig+0x248>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009206:	f7fa fa3b 	bl	8003680 <HAL_GetTick>
 800920a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800920c:	e00e      	b.n	800922c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800920e:	f7fa fa37 	bl	8003680 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d907      	bls.n	800922c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e150      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
 8009220:	40023800 	.word	0x40023800
 8009224:	42470000 	.word	0x42470000
 8009228:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800922c:	4b88      	ldr	r3, [pc, #544]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 800922e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1ea      	bne.n	800920e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 8097 	beq.w	8009374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800924a:	4b81      	ldr	r3, [pc, #516]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 800924c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10f      	bne.n	8009276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009256:	2300      	movs	r3, #0
 8009258:	60bb      	str	r3, [r7, #8]
 800925a:	4b7d      	ldr	r3, [pc, #500]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 800925c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925e:	4a7c      	ldr	r2, [pc, #496]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 8009260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009264:	6413      	str	r3, [r2, #64]	@ 0x40
 8009266:	4b7a      	ldr	r3, [pc, #488]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 8009268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800926e:	60bb      	str	r3, [r7, #8]
 8009270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009272:	2301      	movs	r3, #1
 8009274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009276:	4b77      	ldr	r3, [pc, #476]	@ (8009454 <HAL_RCC_OscConfig+0x474>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800927e:	2b00      	cmp	r3, #0
 8009280:	d118      	bne.n	80092b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009282:	4b74      	ldr	r3, [pc, #464]	@ (8009454 <HAL_RCC_OscConfig+0x474>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a73      	ldr	r2, [pc, #460]	@ (8009454 <HAL_RCC_OscConfig+0x474>)
 8009288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800928c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800928e:	f7fa f9f7 	bl	8003680 <HAL_GetTick>
 8009292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009294:	e008      	b.n	80092a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009296:	f7fa f9f3 	bl	8003680 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d901      	bls.n	80092a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e10c      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092a8:	4b6a      	ldr	r3, [pc, #424]	@ (8009454 <HAL_RCC_OscConfig+0x474>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0f0      	beq.n	8009296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d106      	bne.n	80092ca <HAL_RCC_OscConfig+0x2ea>
 80092bc:	4b64      	ldr	r3, [pc, #400]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092c0:	4a63      	ldr	r2, [pc, #396]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092c2:	f043 0301 	orr.w	r3, r3, #1
 80092c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80092c8:	e01c      	b.n	8009304 <HAL_RCC_OscConfig+0x324>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	2b05      	cmp	r3, #5
 80092d0:	d10c      	bne.n	80092ec <HAL_RCC_OscConfig+0x30c>
 80092d2:	4b5f      	ldr	r3, [pc, #380]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d6:	4a5e      	ldr	r2, [pc, #376]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092d8:	f043 0304 	orr.w	r3, r3, #4
 80092dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80092de:	4b5c      	ldr	r3, [pc, #368]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e2:	4a5b      	ldr	r2, [pc, #364]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092e4:	f043 0301 	orr.w	r3, r3, #1
 80092e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80092ea:	e00b      	b.n	8009304 <HAL_RCC_OscConfig+0x324>
 80092ec:	4b58      	ldr	r3, [pc, #352]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092f0:	4a57      	ldr	r2, [pc, #348]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092f2:	f023 0301 	bic.w	r3, r3, #1
 80092f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80092f8:	4b55      	ldr	r3, [pc, #340]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092fc:	4a54      	ldr	r2, [pc, #336]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80092fe:	f023 0304 	bic.w	r3, r3, #4
 8009302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d015      	beq.n	8009338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800930c:	f7fa f9b8 	bl	8003680 <HAL_GetTick>
 8009310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009312:	e00a      	b.n	800932a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009314:	f7fa f9b4 	bl	8003680 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009322:	4293      	cmp	r3, r2
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e0cb      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800932a:	4b49      	ldr	r3, [pc, #292]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 800932c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0ee      	beq.n	8009314 <HAL_RCC_OscConfig+0x334>
 8009336:	e014      	b.n	8009362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009338:	f7fa f9a2 	bl	8003680 <HAL_GetTick>
 800933c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800933e:	e00a      	b.n	8009356 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009340:	f7fa f99e 	bl	8003680 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800934e:	4293      	cmp	r3, r2
 8009350:	d901      	bls.n	8009356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e0b5      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009356:	4b3e      	ldr	r3, [pc, #248]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1ee      	bne.n	8009340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d105      	bne.n	8009374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009368:	4b39      	ldr	r3, [pc, #228]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 800936a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936c:	4a38      	ldr	r2, [pc, #224]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 800936e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009372:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 80a1 	beq.w	80094c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800937e:	4b34      	ldr	r3, [pc, #208]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f003 030c 	and.w	r3, r3, #12
 8009386:	2b08      	cmp	r3, #8
 8009388:	d05c      	beq.n	8009444 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d141      	bne.n	8009416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009392:	4b31      	ldr	r3, [pc, #196]	@ (8009458 <HAL_RCC_OscConfig+0x478>)
 8009394:	2200      	movs	r2, #0
 8009396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009398:	f7fa f972 	bl	8003680 <HAL_GetTick>
 800939c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800939e:	e008      	b.n	80093b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093a0:	f7fa f96e 	bl	8003680 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e087      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093b2:	4b27      	ldr	r3, [pc, #156]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f0      	bne.n	80093a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	69da      	ldr	r2, [r3, #28]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a1b      	ldr	r3, [r3, #32]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093cc:	019b      	lsls	r3, r3, #6
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d4:	085b      	lsrs	r3, r3, #1
 80093d6:	3b01      	subs	r3, #1
 80093d8:	041b      	lsls	r3, r3, #16
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e0:	061b      	lsls	r3, r3, #24
 80093e2:	491b      	ldr	r1, [pc, #108]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009458 <HAL_RCC_OscConfig+0x478>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093ee:	f7fa f947 	bl	8003680 <HAL_GetTick>
 80093f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093f4:	e008      	b.n	8009408 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f6:	f7fa f943 	bl	8003680 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e05c      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009408:	4b11      	ldr	r3, [pc, #68]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f0      	beq.n	80093f6 <HAL_RCC_OscConfig+0x416>
 8009414:	e054      	b.n	80094c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009416:	4b10      	ldr	r3, [pc, #64]	@ (8009458 <HAL_RCC_OscConfig+0x478>)
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800941c:	f7fa f930 	bl	8003680 <HAL_GetTick>
 8009420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009422:	e008      	b.n	8009436 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009424:	f7fa f92c 	bl	8003680 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	2b02      	cmp	r3, #2
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e045      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009436:	4b06      	ldr	r3, [pc, #24]	@ (8009450 <HAL_RCC_OscConfig+0x470>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1f0      	bne.n	8009424 <HAL_RCC_OscConfig+0x444>
 8009442:	e03d      	b.n	80094c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d107      	bne.n	800945c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e038      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
 8009450:	40023800 	.word	0x40023800
 8009454:	40007000 	.word	0x40007000
 8009458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800945c:	4b1b      	ldr	r3, [pc, #108]	@ (80094cc <HAL_RCC_OscConfig+0x4ec>)
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d028      	beq.n	80094bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009474:	429a      	cmp	r2, r3
 8009476:	d121      	bne.n	80094bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009482:	429a      	cmp	r2, r3
 8009484:	d11a      	bne.n	80094bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800948c:	4013      	ands	r3, r2
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009494:	4293      	cmp	r3, r2
 8009496:	d111      	bne.n	80094bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a2:	085b      	lsrs	r3, r3, #1
 80094a4:	3b01      	subs	r3, #1
 80094a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d107      	bne.n	80094bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d001      	beq.n	80094c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e000      	b.n	80094c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	40023800 	.word	0x40023800

080094d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e0cc      	b.n	800967e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094e4:	4b68      	ldr	r3, [pc, #416]	@ (8009688 <HAL_RCC_ClockConfig+0x1b8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0307 	and.w	r3, r3, #7
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d90c      	bls.n	800950c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094f2:	4b65      	ldr	r3, [pc, #404]	@ (8009688 <HAL_RCC_ClockConfig+0x1b8>)
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094fa:	4b63      	ldr	r3, [pc, #396]	@ (8009688 <HAL_RCC_ClockConfig+0x1b8>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0307 	and.w	r3, r3, #7
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	429a      	cmp	r2, r3
 8009506:	d001      	beq.n	800950c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e0b8      	b.n	800967e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d020      	beq.n	800955a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009524:	4b59      	ldr	r3, [pc, #356]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	4a58      	ldr	r2, [pc, #352]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 800952a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800952e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0308 	and.w	r3, r3, #8
 8009538:	2b00      	cmp	r3, #0
 800953a:	d005      	beq.n	8009548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800953c:	4b53      	ldr	r3, [pc, #332]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	4a52      	ldr	r2, [pc, #328]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009542:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009548:	4b50      	ldr	r3, [pc, #320]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	494d      	ldr	r1, [pc, #308]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009556:	4313      	orrs	r3, r2
 8009558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	d044      	beq.n	80095f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d107      	bne.n	800957e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800956e:	4b47      	ldr	r3, [pc, #284]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d119      	bne.n	80095ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e07f      	b.n	800967e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d003      	beq.n	800958e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800958a:	2b03      	cmp	r3, #3
 800958c:	d107      	bne.n	800959e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800958e:	4b3f      	ldr	r3, [pc, #252]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d109      	bne.n	80095ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e06f      	b.n	800967e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800959e:	4b3b      	ldr	r3, [pc, #236]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 0302 	and.w	r3, r3, #2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e067      	b.n	800967e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095ae:	4b37      	ldr	r3, [pc, #220]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f023 0203 	bic.w	r2, r3, #3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	4934      	ldr	r1, [pc, #208]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095c0:	f7fa f85e 	bl	8003680 <HAL_GetTick>
 80095c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095c6:	e00a      	b.n	80095de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095c8:	f7fa f85a 	bl	8003680 <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d901      	bls.n	80095de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e04f      	b.n	800967e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095de:	4b2b      	ldr	r3, [pc, #172]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 020c 	and.w	r2, r3, #12
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d1eb      	bne.n	80095c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095f0:	4b25      	ldr	r3, [pc, #148]	@ (8009688 <HAL_RCC_ClockConfig+0x1b8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0307 	and.w	r3, r3, #7
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d20c      	bcs.n	8009618 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095fe:	4b22      	ldr	r3, [pc, #136]	@ (8009688 <HAL_RCC_ClockConfig+0x1b8>)
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	b2d2      	uxtb	r2, r2
 8009604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009606:	4b20      	ldr	r3, [pc, #128]	@ (8009688 <HAL_RCC_ClockConfig+0x1b8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	429a      	cmp	r2, r3
 8009612:	d001      	beq.n	8009618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e032      	b.n	800967e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d008      	beq.n	8009636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009624:	4b19      	ldr	r3, [pc, #100]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	4916      	ldr	r1, [pc, #88]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009632:	4313      	orrs	r3, r2
 8009634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009642:	4b12      	ldr	r3, [pc, #72]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	490e      	ldr	r1, [pc, #56]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 8009652:	4313      	orrs	r3, r2
 8009654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009656:	f000 f821 	bl	800969c <HAL_RCC_GetSysClockFreq>
 800965a:	4602      	mov	r2, r0
 800965c:	4b0b      	ldr	r3, [pc, #44]	@ (800968c <HAL_RCC_ClockConfig+0x1bc>)
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	091b      	lsrs	r3, r3, #4
 8009662:	f003 030f 	and.w	r3, r3, #15
 8009666:	490a      	ldr	r1, [pc, #40]	@ (8009690 <HAL_RCC_ClockConfig+0x1c0>)
 8009668:	5ccb      	ldrb	r3, [r1, r3]
 800966a:	fa22 f303 	lsr.w	r3, r2, r3
 800966e:	4a09      	ldr	r2, [pc, #36]	@ (8009694 <HAL_RCC_ClockConfig+0x1c4>)
 8009670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009672:	4b09      	ldr	r3, [pc, #36]	@ (8009698 <HAL_RCC_ClockConfig+0x1c8>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f7f9 ffbe 	bl	80035f8 <HAL_InitTick>

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	40023c00 	.word	0x40023c00
 800968c:	40023800 	.word	0x40023800
 8009690:	0800f3f0 	.word	0x0800f3f0
 8009694:	20000030 	.word	0x20000030
 8009698:	20000034 	.word	0x20000034

0800969c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800969c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096a0:	b090      	sub	sp, #64	@ 0x40
 80096a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096b4:	4b59      	ldr	r3, [pc, #356]	@ (800981c <HAL_RCC_GetSysClockFreq+0x180>)
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f003 030c 	and.w	r3, r3, #12
 80096bc:	2b08      	cmp	r3, #8
 80096be:	d00d      	beq.n	80096dc <HAL_RCC_GetSysClockFreq+0x40>
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	f200 80a1 	bhi.w	8009808 <HAL_RCC_GetSysClockFreq+0x16c>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <HAL_RCC_GetSysClockFreq+0x34>
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d003      	beq.n	80096d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80096ce:	e09b      	b.n	8009808 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80096d0:	4b53      	ldr	r3, [pc, #332]	@ (8009820 <HAL_RCC_GetSysClockFreq+0x184>)
 80096d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80096d4:	e09b      	b.n	800980e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80096d6:	4b53      	ldr	r3, [pc, #332]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x188>)
 80096d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80096da:	e098      	b.n	800980e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096dc:	4b4f      	ldr	r3, [pc, #316]	@ (800981c <HAL_RCC_GetSysClockFreq+0x180>)
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096e6:	4b4d      	ldr	r3, [pc, #308]	@ (800981c <HAL_RCC_GetSysClockFreq+0x180>)
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d028      	beq.n	8009744 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096f2:	4b4a      	ldr	r3, [pc, #296]	@ (800981c <HAL_RCC_GetSysClockFreq+0x180>)
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	099b      	lsrs	r3, r3, #6
 80096f8:	2200      	movs	r2, #0
 80096fa:	623b      	str	r3, [r7, #32]
 80096fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009704:	2100      	movs	r1, #0
 8009706:	4b47      	ldr	r3, [pc, #284]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x188>)
 8009708:	fb03 f201 	mul.w	r2, r3, r1
 800970c:	2300      	movs	r3, #0
 800970e:	fb00 f303 	mul.w	r3, r0, r3
 8009712:	4413      	add	r3, r2
 8009714:	4a43      	ldr	r2, [pc, #268]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x188>)
 8009716:	fba0 1202 	umull	r1, r2, r0, r2
 800971a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800971c:	460a      	mov	r2, r1
 800971e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009722:	4413      	add	r3, r2
 8009724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009728:	2200      	movs	r2, #0
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	61fa      	str	r2, [r7, #28]
 800972e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009732:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009736:	f7f7 f999 	bl	8000a6c <__aeabi_uldivmod>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4613      	mov	r3, r2
 8009740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009742:	e053      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009744:	4b35      	ldr	r3, [pc, #212]	@ (800981c <HAL_RCC_GetSysClockFreq+0x180>)
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	099b      	lsrs	r3, r3, #6
 800974a:	2200      	movs	r2, #0
 800974c:	613b      	str	r3, [r7, #16]
 800974e:	617a      	str	r2, [r7, #20]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009756:	f04f 0b00 	mov.w	fp, #0
 800975a:	4652      	mov	r2, sl
 800975c:	465b      	mov	r3, fp
 800975e:	f04f 0000 	mov.w	r0, #0
 8009762:	f04f 0100 	mov.w	r1, #0
 8009766:	0159      	lsls	r1, r3, #5
 8009768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800976c:	0150      	lsls	r0, r2, #5
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	ebb2 080a 	subs.w	r8, r2, sl
 8009776:	eb63 090b 	sbc.w	r9, r3, fp
 800977a:	f04f 0200 	mov.w	r2, #0
 800977e:	f04f 0300 	mov.w	r3, #0
 8009782:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009786:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800978a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800978e:	ebb2 0408 	subs.w	r4, r2, r8
 8009792:	eb63 0509 	sbc.w	r5, r3, r9
 8009796:	f04f 0200 	mov.w	r2, #0
 800979a:	f04f 0300 	mov.w	r3, #0
 800979e:	00eb      	lsls	r3, r5, #3
 80097a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097a4:	00e2      	lsls	r2, r4, #3
 80097a6:	4614      	mov	r4, r2
 80097a8:	461d      	mov	r5, r3
 80097aa:	eb14 030a 	adds.w	r3, r4, sl
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	eb45 030b 	adc.w	r3, r5, fp
 80097b4:	607b      	str	r3, [r7, #4]
 80097b6:	f04f 0200 	mov.w	r2, #0
 80097ba:	f04f 0300 	mov.w	r3, #0
 80097be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097c2:	4629      	mov	r1, r5
 80097c4:	028b      	lsls	r3, r1, #10
 80097c6:	4621      	mov	r1, r4
 80097c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80097cc:	4621      	mov	r1, r4
 80097ce:	028a      	lsls	r2, r1, #10
 80097d0:	4610      	mov	r0, r2
 80097d2:	4619      	mov	r1, r3
 80097d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d6:	2200      	movs	r2, #0
 80097d8:	60bb      	str	r3, [r7, #8]
 80097da:	60fa      	str	r2, [r7, #12]
 80097dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097e0:	f7f7 f944 	bl	8000a6c <__aeabi_uldivmod>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4613      	mov	r3, r2
 80097ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80097ec:	4b0b      	ldr	r3, [pc, #44]	@ (800981c <HAL_RCC_GetSysClockFreq+0x180>)
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	0c1b      	lsrs	r3, r3, #16
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	3301      	adds	r3, #1
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80097fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	fbb2 f3f3 	udiv	r3, r2, r3
 8009804:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009806:	e002      	b.n	800980e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009808:	4b05      	ldr	r3, [pc, #20]	@ (8009820 <HAL_RCC_GetSysClockFreq+0x184>)
 800980a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800980c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800980e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009810:	4618      	mov	r0, r3
 8009812:	3740      	adds	r7, #64	@ 0x40
 8009814:	46bd      	mov	sp, r7
 8009816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800981a:	bf00      	nop
 800981c:	40023800 	.word	0x40023800
 8009820:	00f42400 	.word	0x00f42400
 8009824:	017d7840 	.word	0x017d7840

08009828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800982c:	4b03      	ldr	r3, [pc, #12]	@ (800983c <HAL_RCC_GetHCLKFreq+0x14>)
 800982e:	681b      	ldr	r3, [r3, #0]
}
 8009830:	4618      	mov	r0, r3
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	20000030 	.word	0x20000030

08009840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009844:	f7ff fff0 	bl	8009828 <HAL_RCC_GetHCLKFreq>
 8009848:	4602      	mov	r2, r0
 800984a:	4b05      	ldr	r3, [pc, #20]	@ (8009860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	0a9b      	lsrs	r3, r3, #10
 8009850:	f003 0307 	and.w	r3, r3, #7
 8009854:	4903      	ldr	r1, [pc, #12]	@ (8009864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009856:	5ccb      	ldrb	r3, [r1, r3]
 8009858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800985c:	4618      	mov	r0, r3
 800985e:	bd80      	pop	{r7, pc}
 8009860:	40023800 	.word	0x40023800
 8009864:	0800f400 	.word	0x0800f400

08009868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e041      	b.n	80098fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7f9 fa9a 	bl	8002dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f000 fab2 	bl	8009e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b01      	cmp	r3, #1
 800991a:	d001      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e044      	b.n	80099aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0201 	orr.w	r2, r2, #1
 8009936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1e      	ldr	r2, [pc, #120]	@ (80099b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d018      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x6c>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800994a:	d013      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x6c>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a1a      	ldr	r2, [pc, #104]	@ (80099bc <HAL_TIM_Base_Start_IT+0xb4>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d00e      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x6c>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a19      	ldr	r2, [pc, #100]	@ (80099c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d009      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x6c>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a17      	ldr	r2, [pc, #92]	@ (80099c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d004      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x6c>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a16      	ldr	r2, [pc, #88]	@ (80099c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d111      	bne.n	8009998 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 0307 	and.w	r3, r3, #7
 800997e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b06      	cmp	r3, #6
 8009984:	d010      	beq.n	80099a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f042 0201 	orr.w	r2, r2, #1
 8009994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009996:	e007      	b.n	80099a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f042 0201 	orr.w	r2, r2, #1
 80099a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	40010000 	.word	0x40010000
 80099bc:	40000400 	.word	0x40000400
 80099c0:	40000800 	.word	0x40000800
 80099c4:	40000c00 	.word	0x40000c00
 80099c8:	40014000 	.word	0x40014000

080099cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d020      	beq.n	8009a30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d01b      	beq.n	8009a30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0202 	mvn.w	r2, #2
 8009a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f9db 	bl	8009dd2 <HAL_TIM_IC_CaptureCallback>
 8009a1c:	e005      	b.n	8009a2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f9cd 	bl	8009dbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f9de 	bl	8009de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d020      	beq.n	8009a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01b      	beq.n	8009a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f06f 0204 	mvn.w	r2, #4
 8009a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2202      	movs	r2, #2
 8009a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f9b5 	bl	8009dd2 <HAL_TIM_IC_CaptureCallback>
 8009a68:	e005      	b.n	8009a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f9a7 	bl	8009dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f9b8 	bl	8009de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d020      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f003 0308 	and.w	r3, r3, #8
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01b      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f06f 0208 	mvn.w	r2, #8
 8009a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f98f 	bl	8009dd2 <HAL_TIM_IC_CaptureCallback>
 8009ab4:	e005      	b.n	8009ac2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f981 	bl	8009dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f992 	bl	8009de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f003 0310 	and.w	r3, r3, #16
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d020      	beq.n	8009b14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01b      	beq.n	8009b14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f06f 0210 	mvn.w	r2, #16
 8009ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2208      	movs	r2, #8
 8009aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f969 	bl	8009dd2 <HAL_TIM_IC_CaptureCallback>
 8009b00:	e005      	b.n	8009b0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f95b 	bl	8009dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f96c 	bl	8009de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00c      	beq.n	8009b38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d007      	beq.n	8009b38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f06f 0201 	mvn.w	r2, #1
 8009b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7f7 f970 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00c      	beq.n	8009b5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d007      	beq.n	8009b5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fb84 	bl	800a264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00c      	beq.n	8009b80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d007      	beq.n	8009b80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f93d 	bl	8009dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00c      	beq.n	8009ba4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d007      	beq.n	8009ba4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f06f 0220 	mvn.w	r2, #32
 8009b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fb56 	bl	800a250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ba4:	bf00      	nop
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e0b4      	b.n	8009d32 <HAL_TIM_ConfigClockSource+0x186>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c00:	d03e      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0xd4>
 8009c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c06:	f200 8087 	bhi.w	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
 8009c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c0e:	f000 8086 	beq.w	8009d1e <HAL_TIM_ConfigClockSource+0x172>
 8009c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c16:	d87f      	bhi.n	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
 8009c18:	2b70      	cmp	r3, #112	@ 0x70
 8009c1a:	d01a      	beq.n	8009c52 <HAL_TIM_ConfigClockSource+0xa6>
 8009c1c:	2b70      	cmp	r3, #112	@ 0x70
 8009c1e:	d87b      	bhi.n	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
 8009c20:	2b60      	cmp	r3, #96	@ 0x60
 8009c22:	d050      	beq.n	8009cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8009c24:	2b60      	cmp	r3, #96	@ 0x60
 8009c26:	d877      	bhi.n	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
 8009c28:	2b50      	cmp	r3, #80	@ 0x50
 8009c2a:	d03c      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8009c2c:	2b50      	cmp	r3, #80	@ 0x50
 8009c2e:	d873      	bhi.n	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
 8009c30:	2b40      	cmp	r3, #64	@ 0x40
 8009c32:	d058      	beq.n	8009ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8009c34:	2b40      	cmp	r3, #64	@ 0x40
 8009c36:	d86f      	bhi.n	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
 8009c38:	2b30      	cmp	r3, #48	@ 0x30
 8009c3a:	d064      	beq.n	8009d06 <HAL_TIM_ConfigClockSource+0x15a>
 8009c3c:	2b30      	cmp	r3, #48	@ 0x30
 8009c3e:	d86b      	bhi.n	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d060      	beq.n	8009d06 <HAL_TIM_ConfigClockSource+0x15a>
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	d867      	bhi.n	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d05c      	beq.n	8009d06 <HAL_TIM_ConfigClockSource+0x15a>
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d05a      	beq.n	8009d06 <HAL_TIM_ConfigClockSource+0x15a>
 8009c50:	e062      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c62:	f000 fa66 	bl	800a132 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	609a      	str	r2, [r3, #8]
      break;
 8009c7e:	e04f      	b.n	8009d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c90:	f000 fa4f 	bl	800a132 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ca2:	609a      	str	r2, [r3, #8]
      break;
 8009ca4:	e03c      	b.n	8009d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f000 f9c3 	bl	800a03e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2150      	movs	r1, #80	@ 0x50
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 fa1c 	bl	800a0fc <TIM_ITRx_SetConfig>
      break;
 8009cc4:	e02c      	b.n	8009d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f000 f9e2 	bl	800a09c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2160      	movs	r1, #96	@ 0x60
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fa0c 	bl	800a0fc <TIM_ITRx_SetConfig>
      break;
 8009ce4:	e01c      	b.n	8009d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f000 f9a3 	bl	800a03e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2140      	movs	r1, #64	@ 0x40
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 f9fc 	bl	800a0fc <TIM_ITRx_SetConfig>
      break;
 8009d04:	e00c      	b.n	8009d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4610      	mov	r0, r2
 8009d12:	f000 f9f3 	bl	800a0fc <TIM_ITRx_SetConfig>
      break;
 8009d16:	e003      	b.n	8009d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1c:	e000      	b.n	8009d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d101      	bne.n	8009d52 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009d4e:	2302      	movs	r3, #2
 8009d50:	e031      	b.n	8009db6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f8d9 	bl	8009f1c <TIM_SlaveTimer_SetConfig>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d009      	beq.n	8009d84 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e018      	b.n	8009db6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d92:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68da      	ldr	r2, [r3, #12]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009da2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009dee:	bf00      	nop
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
	...

08009e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a37      	ldr	r2, [pc, #220]	@ (8009f00 <TIM_Base_SetConfig+0xf0>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00f      	beq.n	8009e48 <TIM_Base_SetConfig+0x38>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e2e:	d00b      	beq.n	8009e48 <TIM_Base_SetConfig+0x38>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a34      	ldr	r2, [pc, #208]	@ (8009f04 <TIM_Base_SetConfig+0xf4>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d007      	beq.n	8009e48 <TIM_Base_SetConfig+0x38>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a33      	ldr	r2, [pc, #204]	@ (8009f08 <TIM_Base_SetConfig+0xf8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d003      	beq.n	8009e48 <TIM_Base_SetConfig+0x38>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a32      	ldr	r2, [pc, #200]	@ (8009f0c <TIM_Base_SetConfig+0xfc>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d108      	bne.n	8009e5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a28      	ldr	r2, [pc, #160]	@ (8009f00 <TIM_Base_SetConfig+0xf0>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d01b      	beq.n	8009e9a <TIM_Base_SetConfig+0x8a>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e68:	d017      	beq.n	8009e9a <TIM_Base_SetConfig+0x8a>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a25      	ldr	r2, [pc, #148]	@ (8009f04 <TIM_Base_SetConfig+0xf4>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d013      	beq.n	8009e9a <TIM_Base_SetConfig+0x8a>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a24      	ldr	r2, [pc, #144]	@ (8009f08 <TIM_Base_SetConfig+0xf8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d00f      	beq.n	8009e9a <TIM_Base_SetConfig+0x8a>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a23      	ldr	r2, [pc, #140]	@ (8009f0c <TIM_Base_SetConfig+0xfc>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d00b      	beq.n	8009e9a <TIM_Base_SetConfig+0x8a>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a22      	ldr	r2, [pc, #136]	@ (8009f10 <TIM_Base_SetConfig+0x100>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d007      	beq.n	8009e9a <TIM_Base_SetConfig+0x8a>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a21      	ldr	r2, [pc, #132]	@ (8009f14 <TIM_Base_SetConfig+0x104>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d003      	beq.n	8009e9a <TIM_Base_SetConfig+0x8a>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a20      	ldr	r2, [pc, #128]	@ (8009f18 <TIM_Base_SetConfig+0x108>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d108      	bne.n	8009eac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	689a      	ldr	r2, [r3, #8]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8009f00 <TIM_Base_SetConfig+0xf0>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d103      	bne.n	8009eda <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f043 0204 	orr.w	r2, r3, #4
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	601a      	str	r2, [r3, #0]
}
 8009ef2:	bf00      	nop
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	40010000 	.word	0x40010000
 8009f04:	40000400 	.word	0x40000400
 8009f08:	40000800 	.word	0x40000800
 8009f0c:	40000c00 	.word	0x40000c00
 8009f10:	40014000 	.word	0x40014000
 8009f14:	40014400 	.word	0x40014400
 8009f18:	40014800 	.word	0x40014800

08009f1c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f38:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b70      	cmp	r3, #112	@ 0x70
 8009f64:	d01a      	beq.n	8009f9c <TIM_SlaveTimer_SetConfig+0x80>
 8009f66:	2b70      	cmp	r3, #112	@ 0x70
 8009f68:	d860      	bhi.n	800a02c <TIM_SlaveTimer_SetConfig+0x110>
 8009f6a:	2b60      	cmp	r3, #96	@ 0x60
 8009f6c:	d054      	beq.n	800a018 <TIM_SlaveTimer_SetConfig+0xfc>
 8009f6e:	2b60      	cmp	r3, #96	@ 0x60
 8009f70:	d85c      	bhi.n	800a02c <TIM_SlaveTimer_SetConfig+0x110>
 8009f72:	2b50      	cmp	r3, #80	@ 0x50
 8009f74:	d046      	beq.n	800a004 <TIM_SlaveTimer_SetConfig+0xe8>
 8009f76:	2b50      	cmp	r3, #80	@ 0x50
 8009f78:	d858      	bhi.n	800a02c <TIM_SlaveTimer_SetConfig+0x110>
 8009f7a:	2b40      	cmp	r3, #64	@ 0x40
 8009f7c:	d019      	beq.n	8009fb2 <TIM_SlaveTimer_SetConfig+0x96>
 8009f7e:	2b40      	cmp	r3, #64	@ 0x40
 8009f80:	d854      	bhi.n	800a02c <TIM_SlaveTimer_SetConfig+0x110>
 8009f82:	2b30      	cmp	r3, #48	@ 0x30
 8009f84:	d055      	beq.n	800a032 <TIM_SlaveTimer_SetConfig+0x116>
 8009f86:	2b30      	cmp	r3, #48	@ 0x30
 8009f88:	d850      	bhi.n	800a02c <TIM_SlaveTimer_SetConfig+0x110>
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	d051      	beq.n	800a032 <TIM_SlaveTimer_SetConfig+0x116>
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	d84c      	bhi.n	800a02c <TIM_SlaveTimer_SetConfig+0x110>
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d04d      	beq.n	800a032 <TIM_SlaveTimer_SetConfig+0x116>
 8009f96:	2b10      	cmp	r3, #16
 8009f98:	d04b      	beq.n	800a032 <TIM_SlaveTimer_SetConfig+0x116>
 8009f9a:	e047      	b.n	800a02c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009fac:	f000 f8c1 	bl	800a132 <TIM_ETR_SetConfig>
      break;
 8009fb0:	e040      	b.n	800a034 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b05      	cmp	r3, #5
 8009fb8:	d101      	bne.n	8009fbe <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e03b      	b.n	800a036 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6a1a      	ldr	r2, [r3, #32]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 0201 	bic.w	r2, r2, #1
 8009fd4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fe4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	621a      	str	r2, [r3, #32]
      break;
 800a002:	e017      	b.n	800a034 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a010:	461a      	mov	r2, r3
 800a012:	f000 f814 	bl	800a03e <TIM_TI1_ConfigInputStage>
      break;
 800a016:	e00d      	b.n	800a034 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a024:	461a      	mov	r2, r3
 800a026:	f000 f839 	bl	800a09c <TIM_TI2_ConfigInputStage>
      break;
 800a02a:	e003      	b.n	800a034 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	75fb      	strb	r3, [r7, #23]
      break;
 800a030:	e000      	b.n	800a034 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a032:	bf00      	nop
  }

  return status;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a03e:	b480      	push	{r7}
 800a040:	b087      	sub	sp, #28
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	f023 0201 	bic.w	r2, r3, #1
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	011b      	lsls	r3, r3, #4
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	4313      	orrs	r3, r2
 800a072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f023 030a 	bic.w	r3, r3, #10
 800a07a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	4313      	orrs	r3, r2
 800a082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	621a      	str	r2, [r3, #32]
}
 800a090:	bf00      	nop
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f023 0210 	bic.w	r2, r3, #16
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	031b      	lsls	r3, r3, #12
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a0d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	011b      	lsls	r3, r3, #4
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	621a      	str	r2, [r3, #32]
}
 800a0f0:	bf00      	nop
 800a0f2:	371c      	adds	r7, #28
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a112:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4313      	orrs	r3, r2
 800a11a:	f043 0307 	orr.w	r3, r3, #7
 800a11e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	609a      	str	r2, [r3, #8]
}
 800a126:	bf00      	nop
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a132:	b480      	push	{r7}
 800a134:	b087      	sub	sp, #28
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	607a      	str	r2, [r7, #4]
 800a13e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a14c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	021a      	lsls	r2, r3, #8
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	431a      	orrs	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4313      	orrs	r3, r2
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	609a      	str	r2, [r3, #8]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
	...

0800a174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a184:	2b01      	cmp	r3, #1
 800a186:	d101      	bne.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a188:	2302      	movs	r3, #2
 800a18a:	e050      	b.n	800a22e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a1c      	ldr	r2, [pc, #112]	@ (800a23c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d018      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d8:	d013      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a18      	ldr	r2, [pc, #96]	@ (800a240 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00e      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a16      	ldr	r2, [pc, #88]	@ (800a244 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d009      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a15      	ldr	r2, [pc, #84]	@ (800a248 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d004      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a13      	ldr	r2, [pc, #76]	@ (800a24c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d10c      	bne.n	800a21c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4313      	orrs	r3, r2
 800a212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	40010000 	.word	0x40010000
 800a240:	40000400 	.word	0x40000400
 800a244:	40000800 	.word	0x40000800
 800a248:	40000c00 	.word	0x40000c00
 800a24c:	40014000 	.word	0x40014000

0800a250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a278:	b084      	sub	sp, #16
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	f107 001c 	add.w	r0, r7, #28
 800a286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a28a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d123      	bne.n	800a2da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a296:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a2a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a2ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d105      	bne.n	800a2ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 fae8 	bl	800b8a4 <USB_CoreReset>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
 800a2d8:	e01b      	b.n	800a312 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f001 fadc 	bl	800b8a4 <USB_CoreReset>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a2f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	639a      	str	r2, [r3, #56]	@ 0x38
 800a304:	e005      	b.n	800a312 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a312:	7fbb      	ldrb	r3, [r7, #30]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d10b      	bne.n	800a330 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f043 0206 	orr.w	r2, r3, #6
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f043 0220 	orr.w	r2, r3, #32
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a33c:	b004      	add	sp, #16
 800a33e:	4770      	bx	lr

0800a340 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	4613      	mov	r3, r2
 800a34c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	2b02      	cmp	r3, #2
 800a352:	d165      	bne.n	800a420 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4a41      	ldr	r2, [pc, #260]	@ (800a45c <USB_SetTurnaroundTime+0x11c>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d906      	bls.n	800a36a <USB_SetTurnaroundTime+0x2a>
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	4a40      	ldr	r2, [pc, #256]	@ (800a460 <USB_SetTurnaroundTime+0x120>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d202      	bcs.n	800a36a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a364:	230f      	movs	r3, #15
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e062      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	4a3c      	ldr	r2, [pc, #240]	@ (800a460 <USB_SetTurnaroundTime+0x120>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d306      	bcc.n	800a380 <USB_SetTurnaroundTime+0x40>
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	4a3b      	ldr	r2, [pc, #236]	@ (800a464 <USB_SetTurnaroundTime+0x124>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d202      	bcs.n	800a380 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a37a:	230e      	movs	r3, #14
 800a37c:	617b      	str	r3, [r7, #20]
 800a37e:	e057      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	4a38      	ldr	r2, [pc, #224]	@ (800a464 <USB_SetTurnaroundTime+0x124>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d306      	bcc.n	800a396 <USB_SetTurnaroundTime+0x56>
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4a37      	ldr	r2, [pc, #220]	@ (800a468 <USB_SetTurnaroundTime+0x128>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d202      	bcs.n	800a396 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a390:	230d      	movs	r3, #13
 800a392:	617b      	str	r3, [r7, #20]
 800a394:	e04c      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	4a33      	ldr	r2, [pc, #204]	@ (800a468 <USB_SetTurnaroundTime+0x128>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d306      	bcc.n	800a3ac <USB_SetTurnaroundTime+0x6c>
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	4a32      	ldr	r2, [pc, #200]	@ (800a46c <USB_SetTurnaroundTime+0x12c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d802      	bhi.n	800a3ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	e041      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	4a2f      	ldr	r2, [pc, #188]	@ (800a46c <USB_SetTurnaroundTime+0x12c>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d906      	bls.n	800a3c2 <USB_SetTurnaroundTime+0x82>
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	4a2e      	ldr	r2, [pc, #184]	@ (800a470 <USB_SetTurnaroundTime+0x130>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d802      	bhi.n	800a3c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a3bc:	230b      	movs	r3, #11
 800a3be:	617b      	str	r3, [r7, #20]
 800a3c0:	e036      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	4a2a      	ldr	r2, [pc, #168]	@ (800a470 <USB_SetTurnaroundTime+0x130>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d906      	bls.n	800a3d8 <USB_SetTurnaroundTime+0x98>
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	4a29      	ldr	r2, [pc, #164]	@ (800a474 <USB_SetTurnaroundTime+0x134>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d802      	bhi.n	800a3d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	617b      	str	r3, [r7, #20]
 800a3d6:	e02b      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	4a26      	ldr	r2, [pc, #152]	@ (800a474 <USB_SetTurnaroundTime+0x134>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d906      	bls.n	800a3ee <USB_SetTurnaroundTime+0xae>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	4a25      	ldr	r2, [pc, #148]	@ (800a478 <USB_SetTurnaroundTime+0x138>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d202      	bcs.n	800a3ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a3e8:	2309      	movs	r3, #9
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e020      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	4a21      	ldr	r2, [pc, #132]	@ (800a478 <USB_SetTurnaroundTime+0x138>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d306      	bcc.n	800a404 <USB_SetTurnaroundTime+0xc4>
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	4a20      	ldr	r2, [pc, #128]	@ (800a47c <USB_SetTurnaroundTime+0x13c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d802      	bhi.n	800a404 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a3fe:	2308      	movs	r3, #8
 800a400:	617b      	str	r3, [r7, #20]
 800a402:	e015      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	4a1d      	ldr	r2, [pc, #116]	@ (800a47c <USB_SetTurnaroundTime+0x13c>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d906      	bls.n	800a41a <USB_SetTurnaroundTime+0xda>
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	4a1c      	ldr	r2, [pc, #112]	@ (800a480 <USB_SetTurnaroundTime+0x140>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d202      	bcs.n	800a41a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a414:	2307      	movs	r3, #7
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	e00a      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a41a:	2306      	movs	r3, #6
 800a41c:	617b      	str	r3, [r7, #20]
 800a41e:	e007      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d102      	bne.n	800a42c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a426:	2309      	movs	r3, #9
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	e001      	b.n	800a430 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a42c:	2309      	movs	r3, #9
 800a42e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	68da      	ldr	r2, [r3, #12]
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	029b      	lsls	r3, r3, #10
 800a444:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a448:	431a      	orrs	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	00d8acbf 	.word	0x00d8acbf
 800a460:	00e4e1c0 	.word	0x00e4e1c0
 800a464:	00f42400 	.word	0x00f42400
 800a468:	01067380 	.word	0x01067380
 800a46c:	011a499f 	.word	0x011a499f
 800a470:	01312cff 	.word	0x01312cff
 800a474:	014ca43f 	.word	0x014ca43f
 800a478:	016e3600 	.word	0x016e3600
 800a47c:	01a6ab1f 	.word	0x01a6ab1f
 800a480:	01e84800 	.word	0x01e84800

0800a484 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	f043 0201 	orr.w	r2, r3, #1
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	370c      	adds	r7, #12
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f023 0201 	bic.w	r2, r3, #1
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d115      	bne.n	800a516 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a4f6:	200a      	movs	r0, #10
 800a4f8:	f7f9 f8ce 	bl	8003698 <HAL_Delay>
      ms += 10U;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	330a      	adds	r3, #10
 800a500:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 f93f 	bl	800b786 <USB_GetMode>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d01e      	beq.n	800a54c <USB_SetCurrentMode+0x84>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2bc7      	cmp	r3, #199	@ 0xc7
 800a512:	d9f0      	bls.n	800a4f6 <USB_SetCurrentMode+0x2e>
 800a514:	e01a      	b.n	800a54c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a516:	78fb      	ldrb	r3, [r7, #3]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d115      	bne.n	800a548 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a528:	200a      	movs	r0, #10
 800a52a:	f7f9 f8b5 	bl	8003698 <HAL_Delay>
      ms += 10U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	330a      	adds	r3, #10
 800a532:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f001 f926 	bl	800b786 <USB_GetMode>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d005      	beq.n	800a54c <USB_SetCurrentMode+0x84>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2bc7      	cmp	r3, #199	@ 0xc7
 800a544:	d9f0      	bls.n	800a528 <USB_SetCurrentMode+0x60>
 800a546:	e001      	b.n	800a54c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e005      	b.n	800a558 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2bc8      	cmp	r3, #200	@ 0xc8
 800a550:	d101      	bne.n	800a556 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e000      	b.n	800a558 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a560:	b084      	sub	sp, #16
 800a562:	b580      	push	{r7, lr}
 800a564:	b086      	sub	sp, #24
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a56e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a57a:	2300      	movs	r3, #0
 800a57c:	613b      	str	r3, [r7, #16]
 800a57e:	e009      	b.n	800a594 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	3340      	adds	r3, #64	@ 0x40
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	2200      	movs	r2, #0
 800a58c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	3301      	adds	r3, #1
 800a592:	613b      	str	r3, [r7, #16]
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	2b0e      	cmp	r3, #14
 800a598:	d9f2      	bls.n	800a580 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a59a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d11c      	bne.n	800a5dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5b0:	f043 0302 	orr.w	r3, r3, #2
 800a5b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	639a      	str	r2, [r3, #56]	@ 0x38
 800a5da:	e00b      	b.n	800a5f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a600:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a604:	2b01      	cmp	r3, #1
 800a606:	d10d      	bne.n	800a624 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a610:	2100      	movs	r1, #0
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f968 	bl	800a8e8 <USB_SetDevSpeed>
 800a618:	e008      	b.n	800a62c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a61a:	2101      	movs	r1, #1
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f963 	bl	800a8e8 <USB_SetDevSpeed>
 800a622:	e003      	b.n	800a62c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a624:	2103      	movs	r1, #3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f95e 	bl	800a8e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a62c:	2110      	movs	r1, #16
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f8fa 	bl	800a828 <USB_FlushTxFifo>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f924 	bl	800a88c <USB_FlushRxFifo>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a654:	461a      	mov	r2, r3
 800a656:	2300      	movs	r3, #0
 800a658:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a660:	461a      	mov	r2, r3
 800a662:	2300      	movs	r3, #0
 800a664:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a66c:	461a      	mov	r2, r3
 800a66e:	2300      	movs	r3, #0
 800a670:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a672:	2300      	movs	r3, #0
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	e043      	b.n	800a700 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a68a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a68e:	d118      	bne.n	800a6c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a6a8:	6013      	str	r3, [r2, #0]
 800a6aa:	e013      	b.n	800a6d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	e008      	b.n	800a6d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a6f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a704:	461a      	mov	r2, r3
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	4293      	cmp	r3, r2
 800a70a:	d3b5      	bcc.n	800a678 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a70c:	2300      	movs	r3, #0
 800a70e:	613b      	str	r3, [r7, #16]
 800a710:	e043      	b.n	800a79a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a728:	d118      	bne.n	800a75c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a73c:	461a      	mov	r2, r3
 800a73e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	e013      	b.n	800a76e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	015a      	lsls	r2, r3, #5
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	4413      	add	r3, r2
 800a74e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a752:	461a      	mov	r2, r3
 800a754:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	e008      	b.n	800a76e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a768:	461a      	mov	r2, r3
 800a76a:	2300      	movs	r3, #0
 800a76c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a77a:	461a      	mov	r2, r3
 800a77c:	2300      	movs	r3, #0
 800a77e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a78c:	461a      	mov	r2, r3
 800a78e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	3301      	adds	r3, #1
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a79e:	461a      	mov	r2, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d3b5      	bcc.n	800a712 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a7c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d105      	bne.n	800a7dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	f043 0210 	orr.w	r2, r3, #16
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	699a      	ldr	r2, [r3, #24]
 800a7e0:	4b10      	ldr	r3, [pc, #64]	@ (800a824 <USB_DevInit+0x2c4>)
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a7e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	f043 0208 	orr.w	r2, r3, #8
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a7fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a800:	2b01      	cmp	r3, #1
 800a802:	d107      	bne.n	800a814 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a80c:	f043 0304 	orr.w	r3, r3, #4
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a814:	7dfb      	ldrb	r3, [r7, #23]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a820:	b004      	add	sp, #16
 800a822:	4770      	bx	lr
 800a824:	803c3800 	.word	0x803c3800

0800a828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3301      	adds	r3, #1
 800a83a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a842:	d901      	bls.n	800a848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a844:	2303      	movs	r3, #3
 800a846:	e01b      	b.n	800a880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	daf2      	bge.n	800a836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	019b      	lsls	r3, r3, #6
 800a858:	f043 0220 	orr.w	r2, r3, #32
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3301      	adds	r3, #1
 800a864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a86c:	d901      	bls.n	800a872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e006      	b.n	800a880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f003 0320 	and.w	r3, r3, #32
 800a87a:	2b20      	cmp	r3, #32
 800a87c:	d0f0      	beq.n	800a860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3301      	adds	r3, #1
 800a89c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8a4:	d901      	bls.n	800a8aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e018      	b.n	800a8dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	daf2      	bge.n	800a898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2210      	movs	r2, #16
 800a8ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8c8:	d901      	bls.n	800a8ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e006      	b.n	800a8dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	f003 0310 	and.w	r3, r3, #16
 800a8d6:	2b10      	cmp	r3, #16
 800a8d8:	d0f0      	beq.n	800a8bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	68f9      	ldr	r1, [r7, #12]
 800a904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a908:	4313      	orrs	r3, r2
 800a90a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b087      	sub	sp, #28
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f003 0306 	and.w	r3, r3, #6
 800a932:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d102      	bne.n	800a940 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a93a:	2300      	movs	r3, #0
 800a93c:	75fb      	strb	r3, [r7, #23]
 800a93e:	e00a      	b.n	800a956 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d002      	beq.n	800a94c <USB_GetDevSpeed+0x32>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2b06      	cmp	r3, #6
 800a94a:	d102      	bne.n	800a952 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a94c:	2302      	movs	r3, #2
 800a94e:	75fb      	strb	r3, [r7, #23]
 800a950:	e001      	b.n	800a956 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a952:	230f      	movs	r3, #15
 800a954:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a956:	7dfb      	ldrb	r3, [r7, #23]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	785b      	ldrb	r3, [r3, #1]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d13a      	bne.n	800a9f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a986:	69da      	ldr	r2, [r3, #28]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f003 030f 	and.w	r3, r3, #15
 800a990:	2101      	movs	r1, #1
 800a992:	fa01 f303 	lsl.w	r3, r1, r3
 800a996:	b29b      	uxth	r3, r3
 800a998:	68f9      	ldr	r1, [r7, #12]
 800a99a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d155      	bne.n	800aa64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	791b      	ldrb	r3, [r3, #4]
 800a9d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	059b      	lsls	r3, r3, #22
 800a9da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	0151      	lsls	r1, r2, #5
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	440a      	add	r2, r1
 800a9e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	e036      	b.n	800aa64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9fc:	69da      	ldr	r2, [r3, #28]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	f003 030f 	and.w	r3, r3, #15
 800aa06:	2101      	movs	r1, #1
 800aa08:	fa01 f303 	lsl.w	r3, r1, r3
 800aa0c:	041b      	lsls	r3, r3, #16
 800aa0e:	68f9      	ldr	r1, [r7, #12]
 800aa10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa14:	4313      	orrs	r3, r2
 800aa16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d11a      	bne.n	800aa64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	791b      	ldrb	r3, [r3, #4]
 800aa48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa4a:	430b      	orrs	r3, r1
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	0151      	lsls	r1, r2, #5
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	440a      	add	r2, r1
 800aa56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
	...

0800aa74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	785b      	ldrb	r3, [r3, #1]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d161      	bne.n	800ab54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaa6:	d11f      	bne.n	800aae8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aac2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aac6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	0151      	lsls	r1, r2, #5
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	440a      	add	r2, r1
 800aade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aae2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aae6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	2101      	movs	r1, #1
 800aafa:	fa01 f303 	lsl.w	r3, r1, r3
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	43db      	mvns	r3, r3
 800ab02:	68f9      	ldr	r1, [r7, #12]
 800ab04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab08:	4013      	ands	r3, r2
 800ab0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab12:	69da      	ldr	r2, [r3, #28]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f003 030f 	and.w	r3, r3, #15
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	43db      	mvns	r3, r3
 800ab26:	68f9      	ldr	r1, [r7, #12]
 800ab28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	0159      	lsls	r1, r3, #5
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	440b      	add	r3, r1
 800ab46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4b35      	ldr	r3, [pc, #212]	@ (800ac24 <USB_DeactivateEndpoint+0x1b0>)
 800ab4e:	4013      	ands	r3, r2
 800ab50:	600b      	str	r3, [r1, #0]
 800ab52:	e060      	b.n	800ac16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab6a:	d11f      	bne.n	800abac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	015a      	lsls	r2, r3, #5
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	0151      	lsls	r1, r2, #5
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	440a      	add	r2, r1
 800ab82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	0151      	lsls	r1, r2, #5
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	440a      	add	r2, r1
 800aba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aba6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800abaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	f003 030f 	and.w	r3, r3, #15
 800abbc:	2101      	movs	r1, #1
 800abbe:	fa01 f303 	lsl.w	r3, r1, r3
 800abc2:	041b      	lsls	r3, r3, #16
 800abc4:	43db      	mvns	r3, r3
 800abc6:	68f9      	ldr	r1, [r7, #12]
 800abc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abcc:	4013      	ands	r3, r2
 800abce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd6:	69da      	ldr	r2, [r3, #28]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	2101      	movs	r1, #1
 800abe2:	fa01 f303 	lsl.w	r3, r1, r3
 800abe6:	041b      	lsls	r3, r3, #16
 800abe8:	43db      	mvns	r3, r3
 800abea:	68f9      	ldr	r1, [r7, #12]
 800abec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abf0:	4013      	ands	r3, r2
 800abf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	0159      	lsls	r1, r3, #5
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	440b      	add	r3, r1
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4b05      	ldr	r3, [pc, #20]	@ (800ac28 <USB_DeactivateEndpoint+0x1b4>)
 800ac12:	4013      	ands	r3, r2
 800ac14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	ec337800 	.word	0xec337800
 800ac28:	eff37800 	.word	0xeff37800

0800ac2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	@ 0x28
 800ac30:	af02      	add	r7, sp, #8
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	4613      	mov	r3, r2
 800ac38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	f040 817f 	bne.w	800af4c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d132      	bne.n	800acbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	69fa      	ldr	r2, [r7, #28]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ac74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	0151      	lsls	r1, r2, #5
 800ac8c:	69fa      	ldr	r2, [r7, #28]
 800ac8e:	440a      	add	r2, r1
 800ac90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	0151      	lsls	r1, r2, #5
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	440a      	add	r2, r1
 800acb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acb4:	0cdb      	lsrs	r3, r3, #19
 800acb6:	04db      	lsls	r3, r3, #19
 800acb8:	6113      	str	r3, [r2, #16]
 800acba:	e097      	b.n	800adec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	015a      	lsls	r2, r3, #5
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	0151      	lsls	r1, r2, #5
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	440a      	add	r2, r1
 800acd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acd6:	0cdb      	lsrs	r3, r3, #19
 800acd8:	04db      	lsls	r3, r3, #19
 800acda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	0151      	lsls	r1, r2, #5
 800acee:	69fa      	ldr	r2, [r7, #28]
 800acf0:	440a      	add	r2, r1
 800acf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acf6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800acfa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800acfe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d11a      	bne.n	800ad3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	691a      	ldr	r2, [r3, #16]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d903      	bls.n	800ad1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	689a      	ldr	r2, [r3, #8]
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	015a      	lsls	r2, r3, #5
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	4413      	add	r3, r2
 800ad22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	0151      	lsls	r1, r2, #5
 800ad2c:	69fa      	ldr	r2, [r7, #28]
 800ad2e:	440a      	add	r2, r1
 800ad30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad38:	6113      	str	r3, [r2, #16]
 800ad3a:	e044      	b.n	800adc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	691a      	ldr	r2, [r3, #16]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	4413      	add	r3, r2
 800ad46:	1e5a      	subs	r2, r3, #1
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5e:	691a      	ldr	r2, [r3, #16]
 800ad60:	8afb      	ldrh	r3, [r7, #22]
 800ad62:	04d9      	lsls	r1, r3, #19
 800ad64:	4ba4      	ldr	r3, [pc, #656]	@ (800aff8 <USB_EPStartXfer+0x3cc>)
 800ad66:	400b      	ands	r3, r1
 800ad68:	69b9      	ldr	r1, [r7, #24]
 800ad6a:	0148      	lsls	r0, r1, #5
 800ad6c:	69f9      	ldr	r1, [r7, #28]
 800ad6e:	4401      	add	r1, r0
 800ad70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ad74:	4313      	orrs	r3, r2
 800ad76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	791b      	ldrb	r3, [r3, #4]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d122      	bne.n	800adc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	0151      	lsls	r1, r2, #5
 800ad92:	69fa      	ldr	r2, [r7, #28]
 800ad94:	440a      	add	r2, r1
 800ad96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ad9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adac:	691a      	ldr	r2, [r3, #16]
 800adae:	8afb      	ldrh	r3, [r7, #22]
 800adb0:	075b      	lsls	r3, r3, #29
 800adb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800adb6:	69b9      	ldr	r1, [r7, #24]
 800adb8:	0148      	lsls	r0, r1, #5
 800adba:	69f9      	ldr	r1, [r7, #28]
 800adbc:	4401      	add	r1, r0
 800adbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800adc2:	4313      	orrs	r3, r2
 800adc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800add2:	691a      	ldr	r2, [r3, #16]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800addc:	69b9      	ldr	r1, [r7, #24]
 800adde:	0148      	lsls	r0, r1, #5
 800ade0:	69f9      	ldr	r1, [r7, #28]
 800ade2:	4401      	add	r1, r0
 800ade4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ade8:	4313      	orrs	r3, r2
 800adea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d14b      	bne.n	800ae8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d009      	beq.n	800ae0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	015a      	lsls	r2, r3, #5
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	4413      	add	r3, r2
 800ae02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae06:	461a      	mov	r2, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	791b      	ldrb	r3, [r3, #4]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d128      	bne.n	800ae68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d110      	bne.n	800ae48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	69ba      	ldr	r2, [r7, #24]
 800ae36:	0151      	lsls	r1, r2, #5
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	440a      	add	r2, r1
 800ae3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	e00f      	b.n	800ae68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	0151      	lsls	r1, r2, #5
 800ae5a:	69fa      	ldr	r2, [r7, #28]
 800ae5c:	440a      	add	r2, r1
 800ae5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	0151      	lsls	r1, r2, #5
 800ae7a:	69fa      	ldr	r2, [r7, #28]
 800ae7c:	440a      	add	r2, r1
 800ae7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	e166      	b.n	800b158 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	0151      	lsls	r1, r2, #5
 800ae9c:	69fa      	ldr	r2, [r7, #28]
 800ae9e:	440a      	add	r2, r1
 800aea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aea4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aea8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	791b      	ldrb	r3, [r3, #4]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d015      	beq.n	800aede <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 814e 	beq.w	800b158 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	f003 030f 	and.w	r3, r3, #15
 800aecc:	2101      	movs	r1, #1
 800aece:	fa01 f303 	lsl.w	r3, r1, r3
 800aed2:	69f9      	ldr	r1, [r7, #28]
 800aed4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aed8:	4313      	orrs	r3, r2
 800aeda:	634b      	str	r3, [r1, #52]	@ 0x34
 800aedc:	e13c      	b.n	800b158 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d110      	bne.n	800af10 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	015a      	lsls	r2, r3, #5
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	4413      	add	r3, r2
 800aef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	0151      	lsls	r1, r2, #5
 800af00:	69fa      	ldr	r2, [r7, #28]
 800af02:	440a      	add	r2, r1
 800af04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af0c:	6013      	str	r3, [r2, #0]
 800af0e:	e00f      	b.n	800af30 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	015a      	lsls	r2, r3, #5
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	4413      	add	r3, r2
 800af18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	0151      	lsls	r1, r2, #5
 800af22:	69fa      	ldr	r2, [r7, #28]
 800af24:	440a      	add	r2, r1
 800af26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af2e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	68d9      	ldr	r1, [r3, #12]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	781a      	ldrb	r2, [r3, #0]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	b298      	uxth	r0, r3
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	4603      	mov	r3, r0
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f9b9 	bl	800b2bc <USB_WritePacket>
 800af4a:	e105      	b.n	800b158 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	69ba      	ldr	r2, [r7, #24]
 800af5c:	0151      	lsls	r1, r2, #5
 800af5e:	69fa      	ldr	r2, [r7, #28]
 800af60:	440a      	add	r2, r1
 800af62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af66:	0cdb      	lsrs	r3, r3, #19
 800af68:	04db      	lsls	r3, r3, #19
 800af6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	4413      	add	r3, r2
 800af74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	0151      	lsls	r1, r2, #5
 800af7e:	69fa      	ldr	r2, [r7, #28]
 800af80:	440a      	add	r2, r1
 800af82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800af8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800af8e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d132      	bne.n	800affc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d003      	beq.n	800afa6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	689a      	ldr	r2, [r3, #8]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	689a      	ldr	r2, [r3, #8]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	015a      	lsls	r2, r3, #5
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	4413      	add	r3, r2
 800afb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afba:	691a      	ldr	r2, [r3, #16]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afc4:	69b9      	ldr	r1, [r7, #24]
 800afc6:	0148      	lsls	r0, r1, #5
 800afc8:	69f9      	ldr	r1, [r7, #28]
 800afca:	4401      	add	r1, r0
 800afcc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800afd0:	4313      	orrs	r3, r2
 800afd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	0151      	lsls	r1, r2, #5
 800afe6:	69fa      	ldr	r2, [r7, #28]
 800afe8:	440a      	add	r2, r1
 800afea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aff2:	6113      	str	r3, [r2, #16]
 800aff4:	e062      	b.n	800b0bc <USB_EPStartXfer+0x490>
 800aff6:	bf00      	nop
 800aff8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d123      	bne.n	800b04c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b010:	691a      	ldr	r2, [r3, #16]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b01a:	69b9      	ldr	r1, [r7, #24]
 800b01c:	0148      	lsls	r0, r1, #5
 800b01e:	69f9      	ldr	r1, [r7, #28]
 800b020:	4401      	add	r1, r0
 800b022:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b026:	4313      	orrs	r3, r2
 800b028:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	4413      	add	r3, r2
 800b032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	0151      	lsls	r1, r2, #5
 800b03c:	69fa      	ldr	r2, [r7, #28]
 800b03e:	440a      	add	r2, r1
 800b040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b044:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b048:	6113      	str	r3, [r2, #16]
 800b04a:	e037      	b.n	800b0bc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	691a      	ldr	r2, [r3, #16]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	4413      	add	r3, r2
 800b056:	1e5a      	subs	r2, r3, #1
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b060:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	8afa      	ldrh	r2, [r7, #22]
 800b068:	fb03 f202 	mul.w	r2, r3, r2
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	4413      	add	r3, r2
 800b078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b07c:	691a      	ldr	r2, [r3, #16]
 800b07e:	8afb      	ldrh	r3, [r7, #22]
 800b080:	04d9      	lsls	r1, r3, #19
 800b082:	4b38      	ldr	r3, [pc, #224]	@ (800b164 <USB_EPStartXfer+0x538>)
 800b084:	400b      	ands	r3, r1
 800b086:	69b9      	ldr	r1, [r7, #24]
 800b088:	0148      	lsls	r0, r1, #5
 800b08a:	69f9      	ldr	r1, [r7, #28]
 800b08c:	4401      	add	r1, r0
 800b08e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b092:	4313      	orrs	r3, r2
 800b094:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	015a      	lsls	r2, r3, #5
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	4413      	add	r3, r2
 800b09e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0a2:	691a      	ldr	r2, [r3, #16]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0ac:	69b9      	ldr	r1, [r7, #24]
 800b0ae:	0148      	lsls	r0, r1, #5
 800b0b0:	69f9      	ldr	r1, [r7, #28]
 800b0b2:	4401      	add	r1, r0
 800b0b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d10d      	bne.n	800b0de <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d009      	beq.n	800b0de <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	68d9      	ldr	r1, [r3, #12]
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	015a      	lsls	r2, r3, #5
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0da:	460a      	mov	r2, r1
 800b0dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	791b      	ldrb	r3, [r3, #4]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d128      	bne.n	800b138 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d110      	bne.n	800b118 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	015a      	lsls	r2, r3, #5
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	69ba      	ldr	r2, [r7, #24]
 800b106:	0151      	lsls	r1, r2, #5
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	440a      	add	r2, r1
 800b10c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b110:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b114:	6013      	str	r3, [r2, #0]
 800b116:	e00f      	b.n	800b138 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	69ba      	ldr	r2, [r7, #24]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b136:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	69ba      	ldr	r2, [r7, #24]
 800b148:	0151      	lsls	r1, r2, #5
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	440a      	add	r2, r1
 800b14e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b152:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b156:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3720      	adds	r7, #32
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	1ff80000 	.word	0x1ff80000

0800b168 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b168:	b480      	push	{r7}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d14a      	bne.n	800b21c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b19a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b19e:	f040 8086 	bne.w	800b2ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	7812      	ldrb	r2, [r2, #0]
 800b1b6:	0151      	lsls	r1, r2, #5
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	440a      	add	r2, r1
 800b1bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	7812      	ldrb	r2, [r2, #0]
 800b1da:	0151      	lsls	r1, r2, #5
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	440a      	add	r2, r1
 800b1e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b1e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d902      	bls.n	800b200 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	75fb      	strb	r3, [r7, #23]
          break;
 800b1fe:	e056      	b.n	800b2ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b218:	d0e7      	beq.n	800b1ea <USB_EPStopXfer+0x82>
 800b21a:	e048      	b.n	800b2ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b234:	d13b      	bne.n	800b2ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	7812      	ldrb	r2, [r2, #0]
 800b24a:	0151      	lsls	r1, r2, #5
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	440a      	add	r2, r1
 800b250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b254:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b258:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	015a      	lsls	r2, r3, #5
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	4413      	add	r3, r2
 800b264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	7812      	ldrb	r2, [r2, #0]
 800b26e:	0151      	lsls	r1, r2, #5
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	440a      	add	r2, r1
 800b274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b278:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b27c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	3301      	adds	r3, #1
 800b282:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d902      	bls.n	800b294 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	75fb      	strb	r3, [r7, #23]
          break;
 800b292:	e00c      	b.n	800b2ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	015a      	lsls	r2, r3, #5
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	4413      	add	r3, r2
 800b29e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2ac:	d0e7      	beq.n	800b27e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	371c      	adds	r7, #28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b089      	sub	sp, #36	@ 0x24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	71fb      	strb	r3, [r7, #7]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b2da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d123      	bne.n	800b32a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b2e2:	88bb      	ldrh	r3, [r7, #4]
 800b2e4:	3303      	adds	r3, #3
 800b2e6:	089b      	lsrs	r3, r3, #2
 800b2e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61bb      	str	r3, [r7, #24]
 800b2ee:	e018      	b.n	800b322 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b2f0:	79fb      	ldrb	r3, [r7, #7]
 800b2f2:	031a      	lsls	r2, r3, #12
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	3301      	adds	r3, #1
 800b308:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	3301      	adds	r3, #1
 800b30e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	3301      	adds	r3, #1
 800b314:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	3301      	adds	r3, #1
 800b31a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	3301      	adds	r3, #1
 800b320:	61bb      	str	r3, [r7, #24]
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	429a      	cmp	r2, r3
 800b328:	d3e2      	bcc.n	800b2f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3724      	adds	r7, #36	@ 0x24
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b338:	b480      	push	{r7}
 800b33a:	b08b      	sub	sp, #44	@ 0x2c
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	4613      	mov	r3, r2
 800b344:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b34e:	88fb      	ldrh	r3, [r7, #6]
 800b350:	089b      	lsrs	r3, r3, #2
 800b352:	b29b      	uxth	r3, r3
 800b354:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b356:	88fb      	ldrh	r3, [r7, #6]
 800b358:	f003 0303 	and.w	r3, r3, #3
 800b35c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b35e:	2300      	movs	r3, #0
 800b360:	623b      	str	r3, [r7, #32]
 800b362:	e014      	b.n	800b38e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	3301      	adds	r3, #1
 800b374:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b378:	3301      	adds	r3, #1
 800b37a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37e:	3301      	adds	r3, #1
 800b380:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b384:	3301      	adds	r3, #1
 800b386:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	3301      	adds	r3, #1
 800b38c:	623b      	str	r3, [r7, #32]
 800b38e:	6a3a      	ldr	r2, [r7, #32]
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	429a      	cmp	r2, r3
 800b394:	d3e6      	bcc.n	800b364 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b396:	8bfb      	ldrh	r3, [r7, #30]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d01e      	beq.n	800b3da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f107 0310 	add.w	r3, r7, #16
 800b3ac:	6812      	ldr	r2, [r2, #0]
 800b3ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3bc:	b2da      	uxtb	r2, r3
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	701a      	strb	r2, [r3, #0]
      i++;
 800b3c2:	6a3b      	ldr	r3, [r7, #32]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b3ce:	8bfb      	ldrh	r3, [r7, #30]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b3d4:	8bfb      	ldrh	r3, [r7, #30]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1ea      	bne.n	800b3b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	372c      	adds	r7, #44	@ 0x2c
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	785b      	ldrb	r3, [r3, #1]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d12c      	bne.n	800b45e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	015a      	lsls	r2, r3, #5
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	db12      	blt.n	800b43c <USB_EPSetStall+0x54>
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00f      	beq.n	800b43c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	0151      	lsls	r1, r2, #5
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	440a      	add	r2, r1
 800b432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b436:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b43a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	0151      	lsls	r1, r2, #5
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	440a      	add	r2, r1
 800b452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b456:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	e02b      	b.n	800b4b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	015a      	lsls	r2, r3, #5
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	4413      	add	r3, r2
 800b466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	db12      	blt.n	800b496 <USB_EPSetStall+0xae>
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00f      	beq.n	800b496 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	015a      	lsls	r2, r3, #5
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	4413      	add	r3, r2
 800b47e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	0151      	lsls	r1, r2, #5
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	440a      	add	r2, r1
 800b48c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b490:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b494:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	0151      	lsls	r1, r2, #5
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	440a      	add	r2, r1
 800b4ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b4b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	785b      	ldrb	r3, [r3, #1]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d128      	bne.n	800b532 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	0151      	lsls	r1, r2, #5
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	440a      	add	r2, r1
 800b4f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b4fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	791b      	ldrb	r3, [r3, #4]
 800b504:	2b03      	cmp	r3, #3
 800b506:	d003      	beq.n	800b510 <USB_EPClearStall+0x4c>
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	791b      	ldrb	r3, [r3, #4]
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d138      	bne.n	800b582 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	440a      	add	r2, r1
 800b526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b52a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	e027      	b.n	800b582 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	015a      	lsls	r2, r3, #5
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	4413      	add	r3, r2
 800b53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	0151      	lsls	r1, r2, #5
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	440a      	add	r2, r1
 800b548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b54c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b550:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	791b      	ldrb	r3, [r3, #4]
 800b556:	2b03      	cmp	r3, #3
 800b558:	d003      	beq.n	800b562 <USB_EPClearStall+0x9e>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	791b      	ldrb	r3, [r3, #4]
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d10f      	bne.n	800b582 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	015a      	lsls	r2, r3, #5
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	4413      	add	r3, r2
 800b56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	0151      	lsls	r1, r2, #5
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	440a      	add	r2, r1
 800b578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b57c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b580:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b5b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	011b      	lsls	r3, r3, #4
 800b5c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b5c4:	68f9      	ldr	r1, [r7, #12]
 800b5c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b5f6:	f023 0303 	bic.w	r3, r3, #3
 800b5fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b60a:	f023 0302 	bic.w	r3, r3, #2
 800b60e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b61e:	b480      	push	{r7}
 800b620:	b085      	sub	sp, #20
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b638:	f023 0303 	bic.w	r3, r3, #3
 800b63c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b64c:	f043 0302 	orr.w	r3, r3, #2
 800b650:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	699b      	ldr	r3, [r3, #24]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	4013      	ands	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b678:	68fb      	ldr	r3, [r7, #12]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b686:	b480      	push	{r7}
 800b688:	b085      	sub	sp, #20
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6a2:	69db      	ldr	r3, [r3, #28]
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	0c1b      	lsrs	r3, r3, #16
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	4013      	ands	r3, r2
 800b6dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	b29b      	uxth	r3, r3
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b6fe:	78fb      	ldrb	r3, [r7, #3]
 800b700:	015a      	lsls	r2, r3, #5
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4413      	add	r3, r2
 800b706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	4013      	ands	r3, r2
 800b71a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b71c:	68bb      	ldr	r3, [r7, #8]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b087      	sub	sp, #28
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b74a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b74c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	f003 030f 	and.w	r3, r3, #15
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	fa22 f303 	lsr.w	r3, r2, r3
 800b75a:	01db      	lsls	r3, r3, #7
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	4313      	orrs	r3, r2
 800b762:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	4013      	ands	r3, r2
 800b776:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b778:	68bb      	ldr	r3, [r7, #8]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	371c      	adds	r7, #28
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	f003 0301 	and.w	r3, r3, #1
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b085      	sub	sp, #20
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b7c0:	f023 0307 	bic.w	r3, r3, #7
 800b7c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	333c      	adds	r3, #60	@ 0x3c
 800b7fe:	3304      	adds	r3, #4
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	4a26      	ldr	r2, [pc, #152]	@ (800b8a0 <USB_EP0_OutStart+0xb8>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d90a      	bls.n	800b822 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b81c:	d101      	bne.n	800b822 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	e037      	b.n	800b892 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b828:	461a      	mov	r2, r3
 800b82a:	2300      	movs	r3, #0
 800b82c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b83c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b850:	f043 0318 	orr.w	r3, r3, #24
 800b854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b864:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b868:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d10f      	bne.n	800b890 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b876:	461a      	mov	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b88a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b88e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	4f54300a 	.word	0x4f54300a

0800b8a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8bc:	d901      	bls.n	800b8c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e022      	b.n	800b908 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	daf2      	bge.n	800b8b0 <USB_CoreReset+0xc>

  count = 10U;
 800b8ca:	230a      	movs	r3, #10
 800b8cc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b8ce:	e002      	b.n	800b8d6 <USB_CoreReset+0x32>
  {
    count--;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1f9      	bne.n	800b8d0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	f043 0201 	orr.w	r2, r3, #1
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8f4:	d901      	bls.n	800b8fa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	e006      	b.n	800b908 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b01      	cmp	r3, #1
 800b904:	d0f0      	beq.n	800b8e8 <USB_CoreReset+0x44>

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b920:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b924:	f002 fd1e 	bl	800e364 <USBD_static_malloc>
 800b928:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d109      	bne.n	800b944 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	32b0      	adds	r2, #176	@ 0xb0
 800b93a:	2100      	movs	r1, #0
 800b93c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b940:	2302      	movs	r3, #2
 800b942:	e0d4      	b.n	800baee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b944:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b948:	2100      	movs	r1, #0
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f002 fd9e 	bl	800e48c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32b0      	adds	r2, #176	@ 0xb0
 800b95a:	68f9      	ldr	r1, [r7, #12]
 800b95c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	32b0      	adds	r2, #176	@ 0xb0
 800b96a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7c1b      	ldrb	r3, [r3, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d138      	bne.n	800b9ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b97c:	4b5e      	ldr	r3, [pc, #376]	@ (800baf8 <USBD_CDC_Init+0x1e4>)
 800b97e:	7819      	ldrb	r1, [r3, #0]
 800b980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b984:	2202      	movs	r2, #2
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f002 fbc9 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b98c:	4b5a      	ldr	r3, [pc, #360]	@ (800baf8 <USBD_CDC_Init+0x1e4>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	f003 020f 	and.w	r2, r3, #15
 800b994:	6879      	ldr	r1, [r7, #4]
 800b996:	4613      	mov	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	440b      	add	r3, r1
 800b9a0:	3323      	adds	r3, #35	@ 0x23
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b9a6:	4b55      	ldr	r3, [pc, #340]	@ (800bafc <USBD_CDC_Init+0x1e8>)
 800b9a8:	7819      	ldrb	r1, [r3, #0]
 800b9aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f002 fbb4 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b9b6:	4b51      	ldr	r3, [pc, #324]	@ (800bafc <USBD_CDC_Init+0x1e8>)
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	f003 020f 	and.w	r2, r3, #15
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	440b      	add	r3, r1
 800b9ca:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b9d2:	4b4b      	ldr	r3, [pc, #300]	@ (800bb00 <USBD_CDC_Init+0x1ec>)
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	f003 020f 	and.w	r2, r3, #15
 800b9da:	6879      	ldr	r1, [r7, #4]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	440b      	add	r3, r1
 800b9e6:	331c      	adds	r3, #28
 800b9e8:	2210      	movs	r2, #16
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	e035      	b.n	800ba5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b9ee:	4b42      	ldr	r3, [pc, #264]	@ (800baf8 <USBD_CDC_Init+0x1e4>)
 800b9f0:	7819      	ldrb	r1, [r3, #0]
 800b9f2:	2340      	movs	r3, #64	@ 0x40
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f002 fb91 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b9fc:	4b3e      	ldr	r3, [pc, #248]	@ (800baf8 <USBD_CDC_Init+0x1e4>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	f003 020f 	and.w	r2, r3, #15
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	440b      	add	r3, r1
 800ba10:	3323      	adds	r3, #35	@ 0x23
 800ba12:	2201      	movs	r2, #1
 800ba14:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba16:	4b39      	ldr	r3, [pc, #228]	@ (800bafc <USBD_CDC_Init+0x1e8>)
 800ba18:	7819      	ldrb	r1, [r3, #0]
 800ba1a:	2340      	movs	r3, #64	@ 0x40
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f002 fb7d 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba24:	4b35      	ldr	r3, [pc, #212]	@ (800bafc <USBD_CDC_Init+0x1e8>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	f003 020f 	and.w	r2, r3, #15
 800ba2c:	6879      	ldr	r1, [r7, #4]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	440b      	add	r3, r1
 800ba38:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ba40:	4b2f      	ldr	r3, [pc, #188]	@ (800bb00 <USBD_CDC_Init+0x1ec>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	f003 020f 	and.w	r2, r3, #15
 800ba48:	6879      	ldr	r1, [r7, #4]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	440b      	add	r3, r1
 800ba54:	331c      	adds	r3, #28
 800ba56:	2210      	movs	r2, #16
 800ba58:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ba5a:	4b29      	ldr	r3, [pc, #164]	@ (800bb00 <USBD_CDC_Init+0x1ec>)
 800ba5c:	7819      	ldrb	r1, [r3, #0]
 800ba5e:	2308      	movs	r3, #8
 800ba60:	2203      	movs	r2, #3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f002 fb5b 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ba68:	4b25      	ldr	r3, [pc, #148]	@ (800bb00 <USBD_CDC_Init+0x1ec>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	f003 020f 	and.w	r2, r3, #15
 800ba70:	6879      	ldr	r1, [r7, #4]
 800ba72:	4613      	mov	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	440b      	add	r3, r1
 800ba7c:	3323      	adds	r3, #35	@ 0x23
 800ba7e:	2201      	movs	r2, #1
 800ba80:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	33b0      	adds	r3, #176	@ 0xb0
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	4413      	add	r3, r2
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bab8:	2302      	movs	r3, #2
 800baba:	e018      	b.n	800baee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	7c1b      	ldrb	r3, [r3, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bac4:	4b0d      	ldr	r3, [pc, #52]	@ (800bafc <USBD_CDC_Init+0x1e8>)
 800bac6:	7819      	ldrb	r1, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f002 fc12 	bl	800e2fc <USBD_LL_PrepareReceive>
 800bad8:	e008      	b.n	800baec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bada:	4b08      	ldr	r3, [pc, #32]	@ (800bafc <USBD_CDC_Init+0x1e8>)
 800badc:	7819      	ldrb	r1, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bae4:	2340      	movs	r3, #64	@ 0x40
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f002 fc08 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	200000c3 	.word	0x200000c3
 800bafc:	200000c4 	.word	0x200000c4
 800bb00:	200000c5 	.word	0x200000c5

0800bb04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bb10:	4b3a      	ldr	r3, [pc, #232]	@ (800bbfc <USBD_CDC_DeInit+0xf8>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	4619      	mov	r1, r3
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f002 fb27 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bb1c:	4b37      	ldr	r3, [pc, #220]	@ (800bbfc <USBD_CDC_DeInit+0xf8>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 020f 	and.w	r2, r3, #15
 800bb24:	6879      	ldr	r1, [r7, #4]
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	440b      	add	r3, r1
 800bb30:	3323      	adds	r3, #35	@ 0x23
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bb36:	4b32      	ldr	r3, [pc, #200]	@ (800bc00 <USBD_CDC_DeInit+0xfc>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f002 fb14 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bb42:	4b2f      	ldr	r3, [pc, #188]	@ (800bc00 <USBD_CDC_DeInit+0xfc>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	f003 020f 	and.w	r2, r3, #15
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	440b      	add	r3, r1
 800bb56:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bb5e:	4b29      	ldr	r3, [pc, #164]	@ (800bc04 <USBD_CDC_DeInit+0x100>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f002 fb00 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bb6a:	4b26      	ldr	r3, [pc, #152]	@ (800bc04 <USBD_CDC_DeInit+0x100>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	f003 020f 	and.w	r2, r3, #15
 800bb72:	6879      	ldr	r1, [r7, #4]
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	440b      	add	r3, r1
 800bb7e:	3323      	adds	r3, #35	@ 0x23
 800bb80:	2200      	movs	r2, #0
 800bb82:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bb84:	4b1f      	ldr	r3, [pc, #124]	@ (800bc04 <USBD_CDC_DeInit+0x100>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	f003 020f 	and.w	r2, r3, #15
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	440b      	add	r3, r1
 800bb98:	331c      	adds	r3, #28
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	32b0      	adds	r2, #176	@ 0xb0
 800bba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01f      	beq.n	800bbf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	33b0      	adds	r3, #176	@ 0xb0
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	32b0      	adds	r2, #176	@ 0xb0
 800bbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f002 fbd4 	bl	800e380 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	32b0      	adds	r2, #176	@ 0xb0
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	200000c3 	.word	0x200000c3
 800bc00:	200000c4 	.word	0x200000c4
 800bc04:	200000c5 	.word	0x200000c5

0800bc08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	32b0      	adds	r2, #176	@ 0xb0
 800bc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bc22:	2300      	movs	r3, #0
 800bc24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bc26:	2300      	movs	r3, #0
 800bc28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e0bf      	b.n	800bdb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d050      	beq.n	800bce6 <USBD_CDC_Setup+0xde>
 800bc44:	2b20      	cmp	r3, #32
 800bc46:	f040 80af 	bne.w	800bda8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	88db      	ldrh	r3, [r3, #6]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d03a      	beq.n	800bcc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	b25b      	sxtb	r3, r3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	da1b      	bge.n	800bc94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	33b0      	adds	r3, #176	@ 0xb0
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bc72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	88d2      	ldrh	r2, [r2, #6]
 800bc78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	88db      	ldrh	r3, [r3, #6]
 800bc7e:	2b07      	cmp	r3, #7
 800bc80:	bf28      	it	cs
 800bc82:	2307      	movcs	r3, #7
 800bc84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	89fa      	ldrh	r2, [r7, #14]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f001 fda9 	bl	800d7e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bc92:	e090      	b.n	800bdb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	785a      	ldrb	r2, [r3, #1]
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	88db      	ldrh	r3, [r3, #6]
 800bca2:	2b3f      	cmp	r3, #63	@ 0x3f
 800bca4:	d803      	bhi.n	800bcae <USBD_CDC_Setup+0xa6>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	88db      	ldrh	r3, [r3, #6]
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	e000      	b.n	800bcb0 <USBD_CDC_Setup+0xa8>
 800bcae:	2240      	movs	r2, #64	@ 0x40
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bcb6:	6939      	ldr	r1, [r7, #16]
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f001 fdbe 	bl	800d842 <USBD_CtlPrepareRx>
      break;
 800bcc6:	e076      	b.n	800bdb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	33b0      	adds	r3, #176	@ 0xb0
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	7850      	ldrb	r0, [r2, #1]
 800bcde:	2200      	movs	r2, #0
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	4798      	blx	r3
      break;
 800bce4:	e067      	b.n	800bdb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	785b      	ldrb	r3, [r3, #1]
 800bcea:	2b0b      	cmp	r3, #11
 800bcec:	d851      	bhi.n	800bd92 <USBD_CDC_Setup+0x18a>
 800bcee:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf4 <USBD_CDC_Setup+0xec>)
 800bcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf4:	0800bd25 	.word	0x0800bd25
 800bcf8:	0800bda1 	.word	0x0800bda1
 800bcfc:	0800bd93 	.word	0x0800bd93
 800bd00:	0800bd93 	.word	0x0800bd93
 800bd04:	0800bd93 	.word	0x0800bd93
 800bd08:	0800bd93 	.word	0x0800bd93
 800bd0c:	0800bd93 	.word	0x0800bd93
 800bd10:	0800bd93 	.word	0x0800bd93
 800bd14:	0800bd93 	.word	0x0800bd93
 800bd18:	0800bd93 	.word	0x0800bd93
 800bd1c:	0800bd4f 	.word	0x0800bd4f
 800bd20:	0800bd79 	.word	0x0800bd79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d107      	bne.n	800bd40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bd30:	f107 030a 	add.w	r3, r7, #10
 800bd34:	2202      	movs	r2, #2
 800bd36:	4619      	mov	r1, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f001 fd53 	bl	800d7e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd3e:	e032      	b.n	800bda6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f001 fcd1 	bl	800d6ea <USBD_CtlError>
            ret = USBD_FAIL;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	75fb      	strb	r3, [r7, #23]
          break;
 800bd4c:	e02b      	b.n	800bda6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	d107      	bne.n	800bd6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bd5a:	f107 030d 	add.w	r3, r7, #13
 800bd5e:	2201      	movs	r2, #1
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f001 fd3e 	bl	800d7e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd68:	e01d      	b.n	800bda6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bd6a:	6839      	ldr	r1, [r7, #0]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f001 fcbc 	bl	800d6ea <USBD_CtlError>
            ret = USBD_FAIL;
 800bd72:	2303      	movs	r3, #3
 800bd74:	75fb      	strb	r3, [r7, #23]
          break;
 800bd76:	e016      	b.n	800bda6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d00f      	beq.n	800bda4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 fcaf 	bl	800d6ea <USBD_CtlError>
            ret = USBD_FAIL;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bd90:	e008      	b.n	800bda4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f001 fca8 	bl	800d6ea <USBD_CtlError>
          ret = USBD_FAIL;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	75fb      	strb	r3, [r7, #23]
          break;
 800bd9e:	e002      	b.n	800bda6 <USBD_CDC_Setup+0x19e>
          break;
 800bda0:	bf00      	nop
 800bda2:	e008      	b.n	800bdb6 <USBD_CDC_Setup+0x1ae>
          break;
 800bda4:	bf00      	nop
      }
      break;
 800bda6:	e006      	b.n	800bdb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 fc9d 	bl	800d6ea <USBD_CtlError>
      ret = USBD_FAIL;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	75fb      	strb	r3, [r7, #23]
      break;
 800bdb4:	bf00      	nop
  }

  return (uint8_t)ret;
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	32b0      	adds	r2, #176	@ 0xb0
 800bdde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e065      	b.n	800beb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	32b0      	adds	r2, #176	@ 0xb0
 800bdf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	f003 020f 	and.w	r2, r3, #15
 800be00:	6879      	ldr	r1, [r7, #4]
 800be02:	4613      	mov	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	440b      	add	r3, r1
 800be0c:	3314      	adds	r3, #20
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d02f      	beq.n	800be74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800be14:	78fb      	ldrb	r3, [r7, #3]
 800be16:	f003 020f 	and.w	r2, r3, #15
 800be1a:	6879      	ldr	r1, [r7, #4]
 800be1c:	4613      	mov	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	440b      	add	r3, r1
 800be26:	3314      	adds	r3, #20
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	78fb      	ldrb	r3, [r7, #3]
 800be2c:	f003 010f 	and.w	r1, r3, #15
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	460b      	mov	r3, r1
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	440b      	add	r3, r1
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4403      	add	r3, r0
 800be3c:	331c      	adds	r3, #28
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	fbb2 f1f3 	udiv	r1, r2, r3
 800be44:	fb01 f303 	mul.w	r3, r1, r3
 800be48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d112      	bne.n	800be74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800be4e:	78fb      	ldrb	r3, [r7, #3]
 800be50:	f003 020f 	and.w	r2, r3, #15
 800be54:	6879      	ldr	r1, [r7, #4]
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	440b      	add	r3, r1
 800be60:	3314      	adds	r3, #20
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800be66:	78f9      	ldrb	r1, [r7, #3]
 800be68:	2300      	movs	r3, #0
 800be6a:	2200      	movs	r2, #0
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f002 fa24 	bl	800e2ba <USBD_LL_Transmit>
 800be72:	e01f      	b.n	800beb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2200      	movs	r2, #0
 800be78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	33b0      	adds	r3, #176	@ 0xb0
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d010      	beq.n	800beb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	33b0      	adds	r3, #176	@ 0xb0
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4413      	add	r3, r2
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800beb0:	78fa      	ldrb	r2, [r7, #3]
 800beb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b084      	sub	sp, #16
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	460b      	mov	r3, r1
 800bec8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	32b0      	adds	r2, #176	@ 0xb0
 800bed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	32b0      	adds	r2, #176	@ 0xb0
 800bee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800beec:	2303      	movs	r3, #3
 800beee:	e01a      	b.n	800bf26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bef0:	78fb      	ldrb	r3, [r7, #3]
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f002 fa22 	bl	800e33e <USBD_LL_GetRxDataSize>
 800befa:	4602      	mov	r2, r0
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	33b0      	adds	r3, #176	@ 0xb0
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bf20:	4611      	mov	r1, r2
 800bf22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	32b0      	adds	r2, #176	@ 0xb0
 800bf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e024      	b.n	800bf9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	33b0      	adds	r3, #176	@ 0xb0
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d019      	beq.n	800bf98 <USBD_CDC_EP0_RxReady+0x6a>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bf6a:	2bff      	cmp	r3, #255	@ 0xff
 800bf6c:	d014      	beq.n	800bf98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	33b0      	adds	r3, #176	@ 0xb0
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bf86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	22ff      	movs	r2, #255	@ 0xff
 800bf94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bfac:	2182      	movs	r1, #130	@ 0x82
 800bfae:	4818      	ldr	r0, [pc, #96]	@ (800c010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bfb0:	f000 fd62 	bl	800ca78 <USBD_GetEpDesc>
 800bfb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	4815      	ldr	r0, [pc, #84]	@ (800c010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bfba:	f000 fd5d 	bl	800ca78 <USBD_GetEpDesc>
 800bfbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bfc0:	2181      	movs	r1, #129	@ 0x81
 800bfc2:	4813      	ldr	r0, [pc, #76]	@ (800c010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bfc4:	f000 fd58 	bl	800ca78 <USBD_GetEpDesc>
 800bfc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d002      	beq.n	800bfd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	2210      	movs	r2, #16
 800bfd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d006      	beq.n	800bfea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfe4:	711a      	strb	r2, [r3, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d006      	beq.n	800bffe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bff8:	711a      	strb	r2, [r3, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2243      	movs	r2, #67	@ 0x43
 800c002:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c004:	4b02      	ldr	r3, [pc, #8]	@ (800c010 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c006:	4618      	mov	r0, r3
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	20000080 	.word	0x20000080

0800c014 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c01c:	2182      	movs	r1, #130	@ 0x82
 800c01e:	4818      	ldr	r0, [pc, #96]	@ (800c080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c020:	f000 fd2a 	bl	800ca78 <USBD_GetEpDesc>
 800c024:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c026:	2101      	movs	r1, #1
 800c028:	4815      	ldr	r0, [pc, #84]	@ (800c080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c02a:	f000 fd25 	bl	800ca78 <USBD_GetEpDesc>
 800c02e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c030:	2181      	movs	r1, #129	@ 0x81
 800c032:	4813      	ldr	r0, [pc, #76]	@ (800c080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c034:	f000 fd20 	bl	800ca78 <USBD_GetEpDesc>
 800c038:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d002      	beq.n	800c046 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	2210      	movs	r2, #16
 800c044:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d006      	beq.n	800c05a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	2200      	movs	r2, #0
 800c050:	711a      	strb	r2, [r3, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f042 0202 	orr.w	r2, r2, #2
 800c058:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d006      	beq.n	800c06e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	711a      	strb	r2, [r3, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f042 0202 	orr.w	r2, r2, #2
 800c06c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2243      	movs	r2, #67	@ 0x43
 800c072:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c074:	4b02      	ldr	r3, [pc, #8]	@ (800c080 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c076:	4618      	mov	r0, r3
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20000080 	.word	0x20000080

0800c084 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c08c:	2182      	movs	r1, #130	@ 0x82
 800c08e:	4818      	ldr	r0, [pc, #96]	@ (800c0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c090:	f000 fcf2 	bl	800ca78 <USBD_GetEpDesc>
 800c094:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c096:	2101      	movs	r1, #1
 800c098:	4815      	ldr	r0, [pc, #84]	@ (800c0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c09a:	f000 fced 	bl	800ca78 <USBD_GetEpDesc>
 800c09e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c0a0:	2181      	movs	r1, #129	@ 0x81
 800c0a2:	4813      	ldr	r0, [pc, #76]	@ (800c0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c0a4:	f000 fce8 	bl	800ca78 <USBD_GetEpDesc>
 800c0a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	2210      	movs	r2, #16
 800c0b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d006      	beq.n	800c0ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0c4:	711a      	strb	r2, [r3, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d006      	beq.n	800c0de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0d8:	711a      	strb	r2, [r3, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2243      	movs	r2, #67	@ 0x43
 800c0e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0e4:	4b02      	ldr	r3, [pc, #8]	@ (800c0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20000080 	.word	0x20000080

0800c0f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	220a      	movs	r2, #10
 800c100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c102:	4b03      	ldr	r3, [pc, #12]	@ (800c110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c104:	4618      	mov	r0, r3
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	2000003c 	.word	0x2000003c

0800c114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c124:	2303      	movs	r3, #3
 800c126:	e009      	b.n	800c13c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	33b0      	adds	r3, #176	@ 0xb0
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c148:	b480      	push	{r7}
 800c14a:	b087      	sub	sp, #28
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	32b0      	adds	r2, #176	@ 0xb0
 800c15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c162:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c16a:	2303      	movs	r3, #3
 800c16c:	e008      	b.n	800c180 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	371c      	adds	r7, #28
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	32b0      	adds	r2, #176	@ 0xb0
 800c1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e004      	b.n	800c1ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	32b0      	adds	r2, #176	@ 0xb0
 800c1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	e025      	b.n	800c23a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d11f      	bne.n	800c238 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c200:	4b10      	ldr	r3, [pc, #64]	@ (800c244 <USBD_CDC_TransmitPacket+0x7c>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f003 020f 	and.w	r2, r3, #15
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4403      	add	r3, r0
 800c21a:	3314      	adds	r3, #20
 800c21c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c21e:	4b09      	ldr	r3, [pc, #36]	@ (800c244 <USBD_CDC_TransmitPacket+0x7c>)
 800c220:	7819      	ldrb	r1, [r3, #0]
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f002 f843 	bl	800e2ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c238:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	200000c3 	.word	0x200000c3

0800c248 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	32b0      	adds	r2, #176	@ 0xb0
 800c25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c25e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	32b0      	adds	r2, #176	@ 0xb0
 800c26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c272:	2303      	movs	r3, #3
 800c274:	e018      	b.n	800c2a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	7c1b      	ldrb	r3, [r3, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c27e:	4b0c      	ldr	r3, [pc, #48]	@ (800c2b0 <USBD_CDC_ReceivePacket+0x68>)
 800c280:	7819      	ldrb	r1, [r3, #0]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f002 f835 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c292:	e008      	b.n	800c2a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c294:	4b06      	ldr	r3, [pc, #24]	@ (800c2b0 <USBD_CDC_ReceivePacket+0x68>)
 800c296:	7819      	ldrb	r1, [r3, #0]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c29e:	2340      	movs	r3, #64	@ 0x40
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f002 f82b 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	200000c4 	.word	0x200000c4

0800c2b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e01f      	b.n	800c30c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d003      	beq.n	800c2f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	79fa      	ldrb	r2, [r7, #7]
 800c2fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f001 fea5 	bl	800e050 <USBD_LL_Init>
 800c306:	4603      	mov	r3, r0
 800c308:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	e025      	b.n	800c378 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	32ae      	adds	r2, #174	@ 0xae
 800c33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00f      	beq.n	800c368 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	32ae      	adds	r2, #174	@ 0xae
 800c352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c358:	f107 020e 	add.w	r2, r7, #14
 800c35c:	4610      	mov	r0, r2
 800c35e:	4798      	blx	r3
 800c360:	4602      	mov	r2, r0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 fead 	bl	800e0e8 <USBD_LL_Start>
 800c38e:	4603      	mov	r3, r0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d009      	beq.n	800c3dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	78fa      	ldrb	r2, [r7, #3]
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	4798      	blx	r3
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	78fa      	ldrb	r2, [r7, #3]
 800c400:	4611      	mov	r1, r2
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	4798      	blx	r3
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c40c:	2303      	movs	r3, #3
 800c40e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c410:	7bfb      	ldrb	r3, [r7, #15]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f001 f922 	bl	800d676 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c440:	461a      	mov	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c44e:	f003 031f 	and.w	r3, r3, #31
 800c452:	2b02      	cmp	r3, #2
 800c454:	d01a      	beq.n	800c48c <USBD_LL_SetupStage+0x72>
 800c456:	2b02      	cmp	r3, #2
 800c458:	d822      	bhi.n	800c4a0 <USBD_LL_SetupStage+0x86>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <USBD_LL_SetupStage+0x4a>
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d00a      	beq.n	800c478 <USBD_LL_SetupStage+0x5e>
 800c462:	e01d      	b.n	800c4a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fb77 	bl	800cb60 <USBD_StdDevReq>
 800c472:	4603      	mov	r3, r0
 800c474:	73fb      	strb	r3, [r7, #15]
      break;
 800c476:	e020      	b.n	800c4ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fbdf 	bl	800cc44 <USBD_StdItfReq>
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]
      break;
 800c48a:	e016      	b.n	800c4ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c492:	4619      	mov	r1, r3
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fc41 	bl	800cd1c <USBD_StdEPReq>
 800c49a:	4603      	mov	r3, r0
 800c49c:	73fb      	strb	r3, [r7, #15]
      break;
 800c49e:	e00c      	b.n	800c4ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c4a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f001 fe7a 	bl	800e1a8 <USBD_LL_StallEP>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b8:	bf00      	nop
  }

  return ret;
 800c4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c4d6:	7afb      	ldrb	r3, [r7, #11]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d177      	bne.n	800c5cc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c4e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	f040 80a1 	bne.w	800c632 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	8992      	ldrh	r2, [r2, #12]
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d91c      	bls.n	800c536 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	8992      	ldrh	r2, [r2, #12]
 800c504:	1a9a      	subs	r2, r3, r2
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	693a      	ldr	r2, [r7, #16]
 800c510:	8992      	ldrh	r2, [r2, #12]
 800c512:	441a      	add	r2, r3
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	6919      	ldr	r1, [r3, #16]
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	899b      	ldrh	r3, [r3, #12]
 800c520:	461a      	mov	r2, r3
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	4293      	cmp	r3, r2
 800c528:	bf38      	it	cc
 800c52a:	4613      	movcc	r3, r2
 800c52c:	461a      	mov	r2, r3
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f001 f9a8 	bl	800d884 <USBD_CtlContinueRx>
 800c534:	e07d      	b.n	800c632 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c53c:	f003 031f 	and.w	r3, r3, #31
 800c540:	2b02      	cmp	r3, #2
 800c542:	d014      	beq.n	800c56e <USBD_LL_DataOutStage+0xaa>
 800c544:	2b02      	cmp	r3, #2
 800c546:	d81d      	bhi.n	800c584 <USBD_LL_DataOutStage+0xc0>
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <USBD_LL_DataOutStage+0x8e>
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d003      	beq.n	800c558 <USBD_LL_DataOutStage+0x94>
 800c550:	e018      	b.n	800c584 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c552:	2300      	movs	r3, #0
 800c554:	75bb      	strb	r3, [r7, #22]
            break;
 800c556:	e018      	b.n	800c58a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	4619      	mov	r1, r3
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 fa6e 	bl	800ca44 <USBD_CoreFindIF>
 800c568:	4603      	mov	r3, r0
 800c56a:	75bb      	strb	r3, [r7, #22]
            break;
 800c56c:	e00d      	b.n	800c58a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c574:	b2db      	uxtb	r3, r3
 800c576:	4619      	mov	r1, r3
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f000 fa70 	bl	800ca5e <USBD_CoreFindEP>
 800c57e:	4603      	mov	r3, r0
 800c580:	75bb      	strb	r3, [r7, #22]
            break;
 800c582:	e002      	b.n	800c58a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c584:	2300      	movs	r3, #0
 800c586:	75bb      	strb	r3, [r7, #22]
            break;
 800c588:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c58a:	7dbb      	ldrb	r3, [r7, #22]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d119      	bne.n	800c5c4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d113      	bne.n	800c5c4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c59c:	7dba      	ldrb	r2, [r7, #22]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	32ae      	adds	r2, #174	@ 0xae
 800c5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00b      	beq.n	800c5c4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c5ac:	7dba      	ldrb	r2, [r7, #22]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c5b4:	7dba      	ldrb	r2, [r7, #22]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	32ae      	adds	r2, #174	@ 0xae
 800c5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f001 f96e 	bl	800d8a6 <USBD_CtlSendStatus>
 800c5ca:	e032      	b.n	800c632 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c5cc:	7afb      	ldrb	r3, [r7, #11]
 800c5ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f000 fa41 	bl	800ca5e <USBD_CoreFindEP>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5e0:	7dbb      	ldrb	r3, [r7, #22]
 800c5e2:	2bff      	cmp	r3, #255	@ 0xff
 800c5e4:	d025      	beq.n	800c632 <USBD_LL_DataOutStage+0x16e>
 800c5e6:	7dbb      	ldrb	r3, [r7, #22]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d122      	bne.n	800c632 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b03      	cmp	r3, #3
 800c5f6:	d117      	bne.n	800c628 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c5f8:	7dba      	ldrb	r2, [r7, #22]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	32ae      	adds	r2, #174	@ 0xae
 800c5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00f      	beq.n	800c628 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c608:	7dba      	ldrb	r2, [r7, #22]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c610:	7dba      	ldrb	r2, [r7, #22]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	32ae      	adds	r2, #174	@ 0xae
 800c616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	7afa      	ldrb	r2, [r7, #11]
 800c61e:	4611      	mov	r1, r2
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	4798      	blx	r3
 800c624:	4603      	mov	r3, r0
 800c626:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c62e:	7dfb      	ldrb	r3, [r7, #23]
 800c630:	e000      	b.n	800c634 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	460b      	mov	r3, r1
 800c646:	607a      	str	r2, [r7, #4]
 800c648:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c64a:	7afb      	ldrb	r3, [r7, #11]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d178      	bne.n	800c742 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3314      	adds	r3, #20
 800c654:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d163      	bne.n	800c728 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	8992      	ldrh	r2, [r2, #12]
 800c668:	4293      	cmp	r3, r2
 800c66a:	d91c      	bls.n	800c6a6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	8992      	ldrh	r2, [r2, #12]
 800c674:	1a9a      	subs	r2, r3, r2
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	8992      	ldrh	r2, [r2, #12]
 800c682:	441a      	add	r2, r3
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	6919      	ldr	r1, [r3, #16]
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	461a      	mov	r2, r3
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f001 f8c4 	bl	800d820 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c698:	2300      	movs	r3, #0
 800c69a:	2200      	movs	r2, #0
 800c69c:	2100      	movs	r1, #0
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f001 fe2c 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c6a4:	e040      	b.n	800c728 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	899b      	ldrh	r3, [r3, #12]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d11c      	bne.n	800c6ee <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d316      	bcc.n	800c6ee <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d20f      	bcs.n	800c6ee <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f001 f8a4 	bl	800d820 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f001 fe08 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c6ec:	e01c      	b.n	800c728 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d10f      	bne.n	800c71a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c71a:	2180      	movs	r1, #128	@ 0x80
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f001 fd43 	bl	800e1a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f001 f8d2 	bl	800d8cc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d03a      	beq.n	800c7a8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f7ff fe30 	bl	800c398 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c740:	e032      	b.n	800c7a8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c742:	7afb      	ldrb	r3, [r7, #11]
 800c744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	4619      	mov	r1, r3
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f000 f986 	bl	800ca5e <USBD_CoreFindEP>
 800c752:	4603      	mov	r3, r0
 800c754:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	2bff      	cmp	r3, #255	@ 0xff
 800c75a:	d025      	beq.n	800c7a8 <USBD_LL_DataInStage+0x16c>
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d122      	bne.n	800c7a8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b03      	cmp	r3, #3
 800c76c:	d11c      	bne.n	800c7a8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c76e:	7dfa      	ldrb	r2, [r7, #23]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	32ae      	adds	r2, #174	@ 0xae
 800c774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d014      	beq.n	800c7a8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c77e:	7dfa      	ldrb	r2, [r7, #23]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c786:	7dfa      	ldrb	r2, [r7, #23]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	32ae      	adds	r2, #174	@ 0xae
 800c78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	7afa      	ldrb	r2, [r7, #11]
 800c794:	4611      	mov	r1, r2
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	4798      	blx	r3
 800c79a:	4603      	mov	r3, r0
 800c79c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c79e:	7dbb      	ldrb	r3, [r7, #22]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c7a4:	7dbb      	ldrb	r3, [r7, #22]
 800c7a6:	e000      	b.n	800c7aa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3718      	adds	r7, #24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b084      	sub	sp, #16
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d014      	beq.n	800c818 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00e      	beq.n	800c818 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	6852      	ldr	r2, [r2, #4]
 800c806:	b2d2      	uxtb	r2, r2
 800c808:	4611      	mov	r1, r2
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	4798      	blx	r3
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c814:	2303      	movs	r3, #3
 800c816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c818:	2340      	movs	r3, #64	@ 0x40
 800c81a:	2200      	movs	r2, #0
 800c81c:	2100      	movs	r1, #0
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f001 fc7d 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2240      	movs	r2, #64	@ 0x40
 800c830:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c834:	2340      	movs	r3, #64	@ 0x40
 800c836:	2200      	movs	r2, #0
 800c838:	2180      	movs	r1, #128	@ 0x80
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f001 fc6f 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2240      	movs	r2, #64	@ 0x40
 800c84c:	841a      	strh	r2, [r3, #32]

  return ret;
 800c84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	460b      	mov	r3, r1
 800c862:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	78fa      	ldrb	r2, [r7, #3]
 800c868:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c886:	b2db      	uxtb	r3, r3
 800c888:	2b04      	cmp	r3, #4
 800c88a:	d006      	beq.n	800c89a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c892:	b2da      	uxtb	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2204      	movs	r2, #4
 800c89e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b04      	cmp	r3, #4
 800c8c2:	d106      	bne.n	800c8d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d110      	bne.n	800c916 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00b      	beq.n	800c916 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c904:	69db      	ldr	r3, [r3, #28]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d005      	beq.n	800c916 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c910:	69db      	ldr	r3, [r3, #28]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	32ae      	adds	r2, #174	@ 0xae
 800c936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c93e:	2303      	movs	r3, #3
 800c940:	e01c      	b.n	800c97c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d115      	bne.n	800c97a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	32ae      	adds	r2, #174	@ 0xae
 800c958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00b      	beq.n	800c97a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	32ae      	adds	r2, #174	@ 0xae
 800c96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c970:	6a1b      	ldr	r3, [r3, #32]
 800c972:	78fa      	ldrb	r2, [r7, #3]
 800c974:	4611      	mov	r1, r2
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	32ae      	adds	r2, #174	@ 0xae
 800c99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	e01c      	b.n	800c9e0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d115      	bne.n	800c9de <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	32ae      	adds	r2, #174	@ 0xae
 800c9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00b      	beq.n	800c9de <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	32ae      	adds	r2, #174	@ 0xae
 800c9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d6:	78fa      	ldrb	r2, [r7, #3]
 800c9d8:	4611      	mov	r1, r2
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ca06:	2300      	movs	r3, #0
 800ca08:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00e      	beq.n	800ca3a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	6852      	ldr	r2, [r2, #4]
 800ca28:	b2d2      	uxtb	r2, r2
 800ca2a:	4611      	mov	r1, r2
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	4798      	blx	r3
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ca36:	2303      	movs	r3, #3
 800ca38:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b083      	sub	sp, #12
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	460b      	mov	r3, r1
 800ca68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	885b      	ldrh	r3, [r3, #2]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	7812      	ldrb	r2, [r2, #0]
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d91f      	bls.n	800cade <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800caa4:	e013      	b.n	800cace <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800caa6:	f107 030a 	add.w	r3, r7, #10
 800caaa:	4619      	mov	r1, r3
 800caac:	6978      	ldr	r0, [r7, #20]
 800caae:	f000 f81b 	bl	800cae8 <USBD_GetNextDesc>
 800cab2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	785b      	ldrb	r3, [r3, #1]
 800cab8:	2b05      	cmp	r3, #5
 800caba:	d108      	bne.n	800cace <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	789b      	ldrb	r3, [r3, #2]
 800cac4:	78fa      	ldrb	r2, [r7, #3]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d008      	beq.n	800cadc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800caca:	2300      	movs	r3, #0
 800cacc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	885b      	ldrh	r3, [r3, #2]
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	897b      	ldrh	r3, [r7, #10]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d8e5      	bhi.n	800caa6 <USBD_GetEpDesc+0x2e>
 800cada:	e000      	b.n	800cade <USBD_GetEpDesc+0x66>
          break;
 800cadc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cade:	693b      	ldr	r3, [r7, #16]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	7812      	ldrb	r2, [r2, #0]
 800cafe:	4413      	add	r3, r2
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4413      	add	r3, r2
 800cb10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cb12:	68fb      	ldr	r3, [r7, #12]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3714      	adds	r7, #20
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b087      	sub	sp, #28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	3301      	adds	r3, #1
 800cb36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cb42:	021b      	lsls	r3, r3, #8
 800cb44:	b21a      	sxth	r2, r3
 800cb46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	b21b      	sxth	r3, r3
 800cb4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cb50:	89fb      	ldrh	r3, [r7, #14]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	371c      	adds	r7, #28
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
	...

0800cb60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb76:	2b40      	cmp	r3, #64	@ 0x40
 800cb78:	d005      	beq.n	800cb86 <USBD_StdDevReq+0x26>
 800cb7a:	2b40      	cmp	r3, #64	@ 0x40
 800cb7c:	d857      	bhi.n	800cc2e <USBD_StdDevReq+0xce>
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00f      	beq.n	800cba2 <USBD_StdDevReq+0x42>
 800cb82:	2b20      	cmp	r3, #32
 800cb84:	d153      	bne.n	800cc2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	32ae      	adds	r2, #174	@ 0xae
 800cb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	6839      	ldr	r1, [r7, #0]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	4798      	blx	r3
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]
      break;
 800cba0:	e04a      	b.n	800cc38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	785b      	ldrb	r3, [r3, #1]
 800cba6:	2b09      	cmp	r3, #9
 800cba8:	d83b      	bhi.n	800cc22 <USBD_StdDevReq+0xc2>
 800cbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800cbb0 <USBD_StdDevReq+0x50>)
 800cbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb0:	0800cc05 	.word	0x0800cc05
 800cbb4:	0800cc19 	.word	0x0800cc19
 800cbb8:	0800cc23 	.word	0x0800cc23
 800cbbc:	0800cc0f 	.word	0x0800cc0f
 800cbc0:	0800cc23 	.word	0x0800cc23
 800cbc4:	0800cbe3 	.word	0x0800cbe3
 800cbc8:	0800cbd9 	.word	0x0800cbd9
 800cbcc:	0800cc23 	.word	0x0800cc23
 800cbd0:	0800cbfb 	.word	0x0800cbfb
 800cbd4:	0800cbed 	.word	0x0800cbed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fa3e 	bl	800d05c <USBD_GetDescriptor>
          break;
 800cbe0:	e024      	b.n	800cc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fba3 	bl	800d330 <USBD_SetAddress>
          break;
 800cbea:	e01f      	b.n	800cc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fbe2 	bl	800d3b8 <USBD_SetConfig>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73fb      	strb	r3, [r7, #15]
          break;
 800cbf8:	e018      	b.n	800cc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fc85 	bl	800d50c <USBD_GetConfig>
          break;
 800cc02:	e013      	b.n	800cc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc04:	6839      	ldr	r1, [r7, #0]
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 fcb6 	bl	800d578 <USBD_GetStatus>
          break;
 800cc0c:	e00e      	b.n	800cc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fce5 	bl	800d5e0 <USBD_SetFeature>
          break;
 800cc16:	e009      	b.n	800cc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fd09 	bl	800d632 <USBD_ClrFeature>
          break;
 800cc20:	e004      	b.n	800cc2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fd60 	bl	800d6ea <USBD_CtlError>
          break;
 800cc2a:	bf00      	nop
      }
      break;
 800cc2c:	e004      	b.n	800cc38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 fd5a 	bl	800d6ea <USBD_CtlError>
      break;
 800cc36:	bf00      	nop
  }

  return ret;
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop

0800cc44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc5a:	2b40      	cmp	r3, #64	@ 0x40
 800cc5c:	d005      	beq.n	800cc6a <USBD_StdItfReq+0x26>
 800cc5e:	2b40      	cmp	r3, #64	@ 0x40
 800cc60:	d852      	bhi.n	800cd08 <USBD_StdItfReq+0xc4>
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <USBD_StdItfReq+0x26>
 800cc66:	2b20      	cmp	r3, #32
 800cc68:	d14e      	bne.n	800cd08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	3b01      	subs	r3, #1
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d840      	bhi.n	800ccfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	889b      	ldrh	r3, [r3, #4]
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d836      	bhi.n	800ccf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	889b      	ldrh	r3, [r3, #4]
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7ff feda 	bl	800ca44 <USBD_CoreFindIF>
 800cc90:	4603      	mov	r3, r0
 800cc92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	2bff      	cmp	r3, #255	@ 0xff
 800cc98:	d01d      	beq.n	800ccd6 <USBD_StdItfReq+0x92>
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d11a      	bne.n	800ccd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cca0:	7bba      	ldrb	r2, [r7, #14]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	32ae      	adds	r2, #174	@ 0xae
 800cca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00f      	beq.n	800ccd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ccb0:	7bba      	ldrb	r2, [r7, #14]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ccb8:	7bba      	ldrb	r2, [r7, #14]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	32ae      	adds	r2, #174	@ 0xae
 800ccbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	4798      	blx	r3
 800ccca:	4603      	mov	r3, r0
 800cccc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ccce:	e004      	b.n	800ccda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ccd4:	e001      	b.n	800ccda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	88db      	ldrh	r3, [r3, #6]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d110      	bne.n	800cd04 <USBD_StdItfReq+0xc0>
 800cce2:	7bfb      	ldrb	r3, [r7, #15]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10d      	bne.n	800cd04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 fddc 	bl	800d8a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ccee:	e009      	b.n	800cd04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ccf0:	6839      	ldr	r1, [r7, #0]
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fcf9 	bl	800d6ea <USBD_CtlError>
          break;
 800ccf8:	e004      	b.n	800cd04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ccfa:	6839      	ldr	r1, [r7, #0]
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fcf4 	bl	800d6ea <USBD_CtlError>
          break;
 800cd02:	e000      	b.n	800cd06 <USBD_StdItfReq+0xc2>
          break;
 800cd04:	bf00      	nop
      }
      break;
 800cd06:	e004      	b.n	800cd12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 fced 	bl	800d6ea <USBD_CtlError>
      break;
 800cd10:	bf00      	nop
  }

  return ret;
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	889b      	ldrh	r3, [r3, #4]
 800cd2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd38:	2b40      	cmp	r3, #64	@ 0x40
 800cd3a:	d007      	beq.n	800cd4c <USBD_StdEPReq+0x30>
 800cd3c:	2b40      	cmp	r3, #64	@ 0x40
 800cd3e:	f200 8181 	bhi.w	800d044 <USBD_StdEPReq+0x328>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d02a      	beq.n	800cd9c <USBD_StdEPReq+0x80>
 800cd46:	2b20      	cmp	r3, #32
 800cd48:	f040 817c 	bne.w	800d044 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd4c:	7bbb      	ldrb	r3, [r7, #14]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff fe84 	bl	800ca5e <USBD_CoreFindEP>
 800cd56:	4603      	mov	r3, r0
 800cd58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd5a:	7b7b      	ldrb	r3, [r7, #13]
 800cd5c:	2bff      	cmp	r3, #255	@ 0xff
 800cd5e:	f000 8176 	beq.w	800d04e <USBD_StdEPReq+0x332>
 800cd62:	7b7b      	ldrb	r3, [r7, #13]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f040 8172 	bne.w	800d04e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800cd6a:	7b7a      	ldrb	r2, [r7, #13]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cd72:	7b7a      	ldrb	r2, [r7, #13]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	32ae      	adds	r2, #174	@ 0xae
 800cd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f000 8165 	beq.w	800d04e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cd84:	7b7a      	ldrb	r2, [r7, #13]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	32ae      	adds	r2, #174	@ 0xae
 800cd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	4798      	blx	r3
 800cd96:	4603      	mov	r3, r0
 800cd98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cd9a:	e158      	b.n	800d04e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	785b      	ldrb	r3, [r3, #1]
 800cda0:	2b03      	cmp	r3, #3
 800cda2:	d008      	beq.n	800cdb6 <USBD_StdEPReq+0x9a>
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	f300 8147 	bgt.w	800d038 <USBD_StdEPReq+0x31c>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 809b 	beq.w	800cee6 <USBD_StdEPReq+0x1ca>
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d03c      	beq.n	800ce2e <USBD_StdEPReq+0x112>
 800cdb4:	e140      	b.n	800d038 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d002      	beq.n	800cdc8 <USBD_StdEPReq+0xac>
 800cdc2:	2b03      	cmp	r3, #3
 800cdc4:	d016      	beq.n	800cdf4 <USBD_StdEPReq+0xd8>
 800cdc6:	e02c      	b.n	800ce22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdc8:	7bbb      	ldrb	r3, [r7, #14]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00d      	beq.n	800cdea <USBD_StdEPReq+0xce>
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
 800cdd0:	2b80      	cmp	r3, #128	@ 0x80
 800cdd2:	d00a      	beq.n	800cdea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdd4:	7bbb      	ldrb	r3, [r7, #14]
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f001 f9e5 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdde:	2180      	movs	r1, #128	@ 0x80
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 f9e1 	bl	800e1a8 <USBD_LL_StallEP>
 800cde6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cde8:	e020      	b.n	800ce2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cdea:	6839      	ldr	r1, [r7, #0]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 fc7c 	bl	800d6ea <USBD_CtlError>
              break;
 800cdf2:	e01b      	b.n	800ce2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	885b      	ldrh	r3, [r3, #2]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10e      	bne.n	800ce1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cdfc:	7bbb      	ldrb	r3, [r7, #14]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00b      	beq.n	800ce1a <USBD_StdEPReq+0xfe>
 800ce02:	7bbb      	ldrb	r3, [r7, #14]
 800ce04:	2b80      	cmp	r3, #128	@ 0x80
 800ce06:	d008      	beq.n	800ce1a <USBD_StdEPReq+0xfe>
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	88db      	ldrh	r3, [r3, #6]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d104      	bne.n	800ce1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce10:	7bbb      	ldrb	r3, [r7, #14]
 800ce12:	4619      	mov	r1, r3
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f001 f9c7 	bl	800e1a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fd43 	bl	800d8a6 <USBD_CtlSendStatus>

              break;
 800ce20:	e004      	b.n	800ce2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fc60 	bl	800d6ea <USBD_CtlError>
              break;
 800ce2a:	bf00      	nop
          }
          break;
 800ce2c:	e109      	b.n	800d042 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d002      	beq.n	800ce40 <USBD_StdEPReq+0x124>
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d016      	beq.n	800ce6c <USBD_StdEPReq+0x150>
 800ce3e:	e04b      	b.n	800ced8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00d      	beq.n	800ce62 <USBD_StdEPReq+0x146>
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
 800ce48:	2b80      	cmp	r3, #128	@ 0x80
 800ce4a:	d00a      	beq.n	800ce62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce4c:	7bbb      	ldrb	r3, [r7, #14]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 f9a9 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce56:	2180      	movs	r1, #128	@ 0x80
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f001 f9a5 	bl	800e1a8 <USBD_LL_StallEP>
 800ce5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce60:	e040      	b.n	800cee4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fc40 	bl	800d6ea <USBD_CtlError>
              break;
 800ce6a:	e03b      	b.n	800cee4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	885b      	ldrh	r3, [r3, #2]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d136      	bne.n	800cee2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce74:	7bbb      	ldrb	r3, [r7, #14]
 800ce76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d004      	beq.n	800ce88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f001 f9af 	bl	800e1e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fd0c 	bl	800d8a6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ce8e:	7bbb      	ldrb	r3, [r7, #14]
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff fde3 	bl	800ca5e <USBD_CoreFindEP>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce9c:	7b7b      	ldrb	r3, [r7, #13]
 800ce9e:	2bff      	cmp	r3, #255	@ 0xff
 800cea0:	d01f      	beq.n	800cee2 <USBD_StdEPReq+0x1c6>
 800cea2:	7b7b      	ldrb	r3, [r7, #13]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d11c      	bne.n	800cee2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cea8:	7b7a      	ldrb	r2, [r7, #13]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ceb0:	7b7a      	ldrb	r2, [r7, #13]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	32ae      	adds	r2, #174	@ 0xae
 800ceb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d010      	beq.n	800cee2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cec0:	7b7a      	ldrb	r2, [r7, #13]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	32ae      	adds	r2, #174	@ 0xae
 800cec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	4798      	blx	r3
 800ced2:	4603      	mov	r3, r0
 800ced4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ced6:	e004      	b.n	800cee2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fc05 	bl	800d6ea <USBD_CtlError>
              break;
 800cee0:	e000      	b.n	800cee4 <USBD_StdEPReq+0x1c8>
              break;
 800cee2:	bf00      	nop
          }
          break;
 800cee4:	e0ad      	b.n	800d042 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d002      	beq.n	800cef8 <USBD_StdEPReq+0x1dc>
 800cef2:	2b03      	cmp	r3, #3
 800cef4:	d033      	beq.n	800cf5e <USBD_StdEPReq+0x242>
 800cef6:	e099      	b.n	800d02c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cef8:	7bbb      	ldrb	r3, [r7, #14]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d007      	beq.n	800cf0e <USBD_StdEPReq+0x1f2>
 800cefe:	7bbb      	ldrb	r3, [r7, #14]
 800cf00:	2b80      	cmp	r3, #128	@ 0x80
 800cf02:	d004      	beq.n	800cf0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fbef 	bl	800d6ea <USBD_CtlError>
                break;
 800cf0c:	e093      	b.n	800d036 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	da0b      	bge.n	800cf2e <USBD_StdEPReq+0x212>
 800cf16:	7bbb      	ldrb	r3, [r7, #14]
 800cf18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	3310      	adds	r3, #16
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	4413      	add	r3, r2
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	e00b      	b.n	800cf46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf2e:	7bbb      	ldrb	r3, [r7, #14]
 800cf30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf34:	4613      	mov	r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	4413      	add	r3, r2
 800cf44:	3304      	adds	r3, #4
 800cf46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	330e      	adds	r3, #14
 800cf52:	2202      	movs	r2, #2
 800cf54:	4619      	mov	r1, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fc44 	bl	800d7e4 <USBD_CtlSendData>
              break;
 800cf5c:	e06b      	b.n	800d036 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cf5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	da11      	bge.n	800cf8a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf66:	7bbb      	ldrb	r3, [r7, #14]
 800cf68:	f003 020f 	and.w	r2, r3, #15
 800cf6c:	6879      	ldr	r1, [r7, #4]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	440b      	add	r3, r1
 800cf78:	3323      	adds	r3, #35	@ 0x23
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d117      	bne.n	800cfb0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cf80:	6839      	ldr	r1, [r7, #0]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fbb1 	bl	800d6ea <USBD_CtlError>
                  break;
 800cf88:	e055      	b.n	800d036 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf8a:	7bbb      	ldrb	r3, [r7, #14]
 800cf8c:	f003 020f 	and.w	r2, r3, #15
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	440b      	add	r3, r1
 800cf9c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d104      	bne.n	800cfb0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cfa6:	6839      	ldr	r1, [r7, #0]
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 fb9e 	bl	800d6ea <USBD_CtlError>
                  break;
 800cfae:	e042      	b.n	800d036 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	da0b      	bge.n	800cfd0 <USBD_StdEPReq+0x2b4>
 800cfb8:	7bbb      	ldrb	r3, [r7, #14]
 800cfba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	4413      	add	r3, r2
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	3310      	adds	r3, #16
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	4413      	add	r3, r2
 800cfcc:	3304      	adds	r3, #4
 800cfce:	e00b      	b.n	800cfe8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cfd0:	7bbb      	ldrb	r3, [r7, #14]
 800cfd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cfea:	7bbb      	ldrb	r3, [r7, #14]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <USBD_StdEPReq+0x2da>
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	2b80      	cmp	r3, #128	@ 0x80
 800cff4:	d103      	bne.n	800cffe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	2200      	movs	r2, #0
 800cffa:	739a      	strb	r2, [r3, #14]
 800cffc:	e00e      	b.n	800d01c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cffe:	7bbb      	ldrb	r3, [r7, #14]
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f001 f90e 	bl	800e224 <USBD_LL_IsStallEP>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d003      	beq.n	800d016 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	2201      	movs	r2, #1
 800d012:	739a      	strb	r2, [r3, #14]
 800d014:	e002      	b.n	800d01c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2200      	movs	r2, #0
 800d01a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	330e      	adds	r3, #14
 800d020:	2202      	movs	r2, #2
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 fbdd 	bl	800d7e4 <USBD_CtlSendData>
              break;
 800d02a:	e004      	b.n	800d036 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800d02c:	6839      	ldr	r1, [r7, #0]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fb5b 	bl	800d6ea <USBD_CtlError>
              break;
 800d034:	bf00      	nop
          }
          break;
 800d036:	e004      	b.n	800d042 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fb55 	bl	800d6ea <USBD_CtlError>
          break;
 800d040:	bf00      	nop
      }
      break;
 800d042:	e005      	b.n	800d050 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800d044:	6839      	ldr	r1, [r7, #0]
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fb4f 	bl	800d6ea <USBD_CtlError>
      break;
 800d04c:	e000      	b.n	800d050 <USBD_StdEPReq+0x334>
      break;
 800d04e:	bf00      	nop
  }

  return ret;
 800d050:	7bfb      	ldrb	r3, [r7, #15]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d066:	2300      	movs	r3, #0
 800d068:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d06e:	2300      	movs	r3, #0
 800d070:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	885b      	ldrh	r3, [r3, #2]
 800d076:	0a1b      	lsrs	r3, r3, #8
 800d078:	b29b      	uxth	r3, r3
 800d07a:	3b01      	subs	r3, #1
 800d07c:	2b06      	cmp	r3, #6
 800d07e:	f200 8128 	bhi.w	800d2d2 <USBD_GetDescriptor+0x276>
 800d082:	a201      	add	r2, pc, #4	@ (adr r2, 800d088 <USBD_GetDescriptor+0x2c>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d0a5 	.word	0x0800d0a5
 800d08c:	0800d0bd 	.word	0x0800d0bd
 800d090:	0800d0fd 	.word	0x0800d0fd
 800d094:	0800d2d3 	.word	0x0800d2d3
 800d098:	0800d2d3 	.word	0x0800d2d3
 800d09c:	0800d273 	.word	0x0800d273
 800d0a0:	0800d29f 	.word	0x0800d29f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	7c12      	ldrb	r2, [r2, #16]
 800d0b0:	f107 0108 	add.w	r1, r7, #8
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
 800d0b8:	60f8      	str	r0, [r7, #12]
      break;
 800d0ba:	e112      	b.n	800d2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	7c1b      	ldrb	r3, [r3, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10d      	bne.n	800d0e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0cc:	f107 0208 	add.w	r2, r7, #8
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	4798      	blx	r3
 800d0d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	2202      	movs	r2, #2
 800d0dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d0de:	e100      	b.n	800d2e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0e8:	f107 0208 	add.w	r2, r7, #8
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	4798      	blx	r3
 800d0f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	701a      	strb	r2, [r3, #0]
      break;
 800d0fa:	e0f2      	b.n	800d2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	885b      	ldrh	r3, [r3, #2]
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b05      	cmp	r3, #5
 800d104:	f200 80ac 	bhi.w	800d260 <USBD_GetDescriptor+0x204>
 800d108:	a201      	add	r2, pc, #4	@ (adr r2, 800d110 <USBD_GetDescriptor+0xb4>)
 800d10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10e:	bf00      	nop
 800d110:	0800d129 	.word	0x0800d129
 800d114:	0800d15d 	.word	0x0800d15d
 800d118:	0800d191 	.word	0x0800d191
 800d11c:	0800d1c5 	.word	0x0800d1c5
 800d120:	0800d1f9 	.word	0x0800d1f9
 800d124:	0800d22d 	.word	0x0800d22d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00b      	beq.n	800d14c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	7c12      	ldrb	r2, [r2, #16]
 800d140:	f107 0108 	add.w	r1, r7, #8
 800d144:	4610      	mov	r0, r2
 800d146:	4798      	blx	r3
 800d148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d14a:	e091      	b.n	800d270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 facb 	bl	800d6ea <USBD_CtlError>
            err++;
 800d154:	7afb      	ldrb	r3, [r7, #11]
 800d156:	3301      	adds	r3, #1
 800d158:	72fb      	strb	r3, [r7, #11]
          break;
 800d15a:	e089      	b.n	800d270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00b      	beq.n	800d180 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	7c12      	ldrb	r2, [r2, #16]
 800d174:	f107 0108 	add.w	r1, r7, #8
 800d178:	4610      	mov	r0, r2
 800d17a:	4798      	blx	r3
 800d17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d17e:	e077      	b.n	800d270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fab1 	bl	800d6ea <USBD_CtlError>
            err++;
 800d188:	7afb      	ldrb	r3, [r7, #11]
 800d18a:	3301      	adds	r3, #1
 800d18c:	72fb      	strb	r3, [r7, #11]
          break;
 800d18e:	e06f      	b.n	800d270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00b      	beq.n	800d1b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	7c12      	ldrb	r2, [r2, #16]
 800d1a8:	f107 0108 	add.w	r1, r7, #8
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4798      	blx	r3
 800d1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1b2:	e05d      	b.n	800d270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fa97 	bl	800d6ea <USBD_CtlError>
            err++;
 800d1bc:	7afb      	ldrb	r3, [r7, #11]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1c2:	e055      	b.n	800d270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00b      	beq.n	800d1e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1d6:	691b      	ldr	r3, [r3, #16]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	7c12      	ldrb	r2, [r2, #16]
 800d1dc:	f107 0108 	add.w	r1, r7, #8
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	4798      	blx	r3
 800d1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1e6:	e043      	b.n	800d270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fa7d 	bl	800d6ea <USBD_CtlError>
            err++;
 800d1f0:	7afb      	ldrb	r3, [r7, #11]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d1f6:	e03b      	b.n	800d270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1fe:	695b      	ldr	r3, [r3, #20]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00b      	beq.n	800d21c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	7c12      	ldrb	r2, [r2, #16]
 800d210:	f107 0108 	add.w	r1, r7, #8
 800d214:	4610      	mov	r0, r2
 800d216:	4798      	blx	r3
 800d218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d21a:	e029      	b.n	800d270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d21c:	6839      	ldr	r1, [r7, #0]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fa63 	bl	800d6ea <USBD_CtlError>
            err++;
 800d224:	7afb      	ldrb	r3, [r7, #11]
 800d226:	3301      	adds	r3, #1
 800d228:	72fb      	strb	r3, [r7, #11]
          break;
 800d22a:	e021      	b.n	800d270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00b      	beq.n	800d250 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	7c12      	ldrb	r2, [r2, #16]
 800d244:	f107 0108 	add.w	r1, r7, #8
 800d248:	4610      	mov	r0, r2
 800d24a:	4798      	blx	r3
 800d24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d24e:	e00f      	b.n	800d270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fa49 	bl	800d6ea <USBD_CtlError>
            err++;
 800d258:	7afb      	ldrb	r3, [r7, #11]
 800d25a:	3301      	adds	r3, #1
 800d25c:	72fb      	strb	r3, [r7, #11]
          break;
 800d25e:	e007      	b.n	800d270 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d260:	6839      	ldr	r1, [r7, #0]
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fa41 	bl	800d6ea <USBD_CtlError>
          err++;
 800d268:	7afb      	ldrb	r3, [r7, #11]
 800d26a:	3301      	adds	r3, #1
 800d26c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d26e:	bf00      	nop
      }
      break;
 800d270:	e037      	b.n	800d2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	7c1b      	ldrb	r3, [r3, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d109      	bne.n	800d28e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d282:	f107 0208 	add.w	r2, r7, #8
 800d286:	4610      	mov	r0, r2
 800d288:	4798      	blx	r3
 800d28a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d28c:	e029      	b.n	800d2e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 fa2a 	bl	800d6ea <USBD_CtlError>
        err++;
 800d296:	7afb      	ldrb	r3, [r7, #11]
 800d298:	3301      	adds	r3, #1
 800d29a:	72fb      	strb	r3, [r7, #11]
      break;
 800d29c:	e021      	b.n	800d2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	7c1b      	ldrb	r3, [r3, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10d      	bne.n	800d2c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ae:	f107 0208 	add.w	r2, r7, #8
 800d2b2:	4610      	mov	r0, r2
 800d2b4:	4798      	blx	r3
 800d2b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	2207      	movs	r2, #7
 800d2be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2c0:	e00f      	b.n	800d2e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 fa10 	bl	800d6ea <USBD_CtlError>
        err++;
 800d2ca:	7afb      	ldrb	r3, [r7, #11]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800d2d0:	e007      	b.n	800d2e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fa08 	bl	800d6ea <USBD_CtlError>
      err++;
 800d2da:	7afb      	ldrb	r3, [r7, #11]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	72fb      	strb	r3, [r7, #11]
      break;
 800d2e0:	bf00      	nop
  }

  if (err != 0U)
 800d2e2:	7afb      	ldrb	r3, [r7, #11]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d11e      	bne.n	800d326 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	88db      	ldrh	r3, [r3, #6]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d016      	beq.n	800d31e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d2f0:	893b      	ldrh	r3, [r7, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00e      	beq.n	800d314 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	88da      	ldrh	r2, [r3, #6]
 800d2fa:	893b      	ldrh	r3, [r7, #8]
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	bf28      	it	cs
 800d300:	4613      	movcs	r3, r2
 800d302:	b29b      	uxth	r3, r3
 800d304:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d306:	893b      	ldrh	r3, [r7, #8]
 800d308:	461a      	mov	r2, r3
 800d30a:	68f9      	ldr	r1, [r7, #12]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fa69 	bl	800d7e4 <USBD_CtlSendData>
 800d312:	e009      	b.n	800d328 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f9e7 	bl	800d6ea <USBD_CtlError>
 800d31c:	e004      	b.n	800d328 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fac1 	bl	800d8a6 <USBD_CtlSendStatus>
 800d324:	e000      	b.n	800d328 <USBD_GetDescriptor+0x2cc>
    return;
 800d326:	bf00      	nop
  }
}
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop

0800d330 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	889b      	ldrh	r3, [r3, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d131      	bne.n	800d3a6 <USBD_SetAddress+0x76>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	88db      	ldrh	r3, [r3, #6]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d12d      	bne.n	800d3a6 <USBD_SetAddress+0x76>
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	885b      	ldrh	r3, [r3, #2]
 800d34e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d350:	d829      	bhi.n	800d3a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	885b      	ldrh	r3, [r3, #2]
 800d356:	b2db      	uxtb	r3, r3
 800d358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d35c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b03      	cmp	r3, #3
 800d368:	d104      	bne.n	800d374 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f9bc 	bl	800d6ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d372:	e01d      	b.n	800d3b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7bfa      	ldrb	r2, [r7, #15]
 800d378:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
 800d37e:	4619      	mov	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 ff7b 	bl	800e27c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fa8d 	bl	800d8a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d004      	beq.n	800d39c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2202      	movs	r2, #2
 800d396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d39a:	e009      	b.n	800d3b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3a4:	e004      	b.n	800d3b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f99e 	bl	800d6ea <USBD_CtlError>
  }
}
 800d3ae:	bf00      	nop
 800d3b0:	bf00      	nop
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	885b      	ldrh	r3, [r3, #2]
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	4b4e      	ldr	r3, [pc, #312]	@ (800d508 <USBD_SetConfig+0x150>)
 800d3ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d3d0:	4b4d      	ldr	r3, [pc, #308]	@ (800d508 <USBD_SetConfig+0x150>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d905      	bls.n	800d3e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 f985 	bl	800d6ea <USBD_CtlError>
    return USBD_FAIL;
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	e08c      	b.n	800d4fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d002      	beq.n	800d3f6 <USBD_SetConfig+0x3e>
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d029      	beq.n	800d448 <USBD_SetConfig+0x90>
 800d3f4:	e075      	b.n	800d4e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d3f6:	4b44      	ldr	r3, [pc, #272]	@ (800d508 <USBD_SetConfig+0x150>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d020      	beq.n	800d440 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d3fe:	4b42      	ldr	r3, [pc, #264]	@ (800d508 <USBD_SetConfig+0x150>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d408:	4b3f      	ldr	r3, [pc, #252]	@ (800d508 <USBD_SetConfig+0x150>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	4619      	mov	r1, r3
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7fe ffcd 	bl	800c3ae <USBD_SetClassConfig>
 800d414:	4603      	mov	r3, r0
 800d416:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d418:	7bfb      	ldrb	r3, [r7, #15]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d008      	beq.n	800d430 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d41e:	6839      	ldr	r1, [r7, #0]
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f962 	bl	800d6ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2202      	movs	r2, #2
 800d42a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d42e:	e065      	b.n	800d4fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 fa38 	bl	800d8a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2203      	movs	r2, #3
 800d43a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d43e:	e05d      	b.n	800d4fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 fa30 	bl	800d8a6 <USBD_CtlSendStatus>
      break;
 800d446:	e059      	b.n	800d4fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d448:	4b2f      	ldr	r3, [pc, #188]	@ (800d508 <USBD_SetConfig+0x150>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d112      	bne.n	800d476 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d458:	4b2b      	ldr	r3, [pc, #172]	@ (800d508 <USBD_SetConfig+0x150>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	461a      	mov	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d462:	4b29      	ldr	r3, [pc, #164]	@ (800d508 <USBD_SetConfig+0x150>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	4619      	mov	r1, r3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f7fe ffbc 	bl	800c3e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fa19 	bl	800d8a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d474:	e042      	b.n	800d4fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d476:	4b24      	ldr	r3, [pc, #144]	@ (800d508 <USBD_SetConfig+0x150>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	461a      	mov	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	429a      	cmp	r2, r3
 800d482:	d02a      	beq.n	800d4da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	4619      	mov	r1, r3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7fe ffaa 	bl	800c3e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d492:	4b1d      	ldr	r3, [pc, #116]	@ (800d508 <USBD_SetConfig+0x150>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d49c:	4b1a      	ldr	r3, [pc, #104]	@ (800d508 <USBD_SetConfig+0x150>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7fe ff83 	bl	800c3ae <USBD_SetClassConfig>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00f      	beq.n	800d4d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d4b2:	6839      	ldr	r1, [r7, #0]
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 f918 	bl	800d6ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7fe ff8f 	bl	800c3e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2202      	movs	r2, #2
 800d4cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d4d0:	e014      	b.n	800d4fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f9e7 	bl	800d8a6 <USBD_CtlSendStatus>
      break;
 800d4d8:	e010      	b.n	800d4fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f9e3 	bl	800d8a6 <USBD_CtlSendStatus>
      break;
 800d4e0:	e00c      	b.n	800d4fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f900 	bl	800d6ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4ea:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <USBD_SetConfig+0x150>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7fe ff78 	bl	800c3e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d4fa:	bf00      	nop
  }

  return ret;
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20000ae8 	.word	0x20000ae8

0800d50c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	88db      	ldrh	r3, [r3, #6]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d004      	beq.n	800d528 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f8e2 	bl	800d6ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d526:	e023      	b.n	800d570 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	2b02      	cmp	r3, #2
 800d532:	dc02      	bgt.n	800d53a <USBD_GetConfig+0x2e>
 800d534:	2b00      	cmp	r3, #0
 800d536:	dc03      	bgt.n	800d540 <USBD_GetConfig+0x34>
 800d538:	e015      	b.n	800d566 <USBD_GetConfig+0x5a>
 800d53a:	2b03      	cmp	r3, #3
 800d53c:	d00b      	beq.n	800d556 <USBD_GetConfig+0x4a>
 800d53e:	e012      	b.n	800d566 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	3308      	adds	r3, #8
 800d54a:	2201      	movs	r2, #1
 800d54c:	4619      	mov	r1, r3
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f948 	bl	800d7e4 <USBD_CtlSendData>
        break;
 800d554:	e00c      	b.n	800d570 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	3304      	adds	r3, #4
 800d55a:	2201      	movs	r2, #1
 800d55c:	4619      	mov	r1, r3
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f940 	bl	800d7e4 <USBD_CtlSendData>
        break;
 800d564:	e004      	b.n	800d570 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f8be 	bl	800d6ea <USBD_CtlError>
        break;
 800d56e:	bf00      	nop
}
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	3b01      	subs	r3, #1
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d81e      	bhi.n	800d5ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	88db      	ldrh	r3, [r3, #6]
 800d594:	2b02      	cmp	r3, #2
 800d596:	d004      	beq.n	800d5a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 f8a5 	bl	800d6ea <USBD_CtlError>
        break;
 800d5a0:	e01a      	b.n	800d5d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d005      	beq.n	800d5be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	f043 0202 	orr.w	r2, r3, #2
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	330c      	adds	r3, #12
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f90c 	bl	800d7e4 <USBD_CtlSendData>
      break;
 800d5cc:	e004      	b.n	800d5d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 f88a 	bl	800d6ea <USBD_CtlError>
      break;
 800d5d6:	bf00      	nop
  }
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	885b      	ldrh	r3, [r3, #2]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d107      	bne.n	800d602 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f953 	bl	800d8a6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d600:	e013      	b.n	800d62a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	885b      	ldrh	r3, [r3, #2]
 800d606:	2b02      	cmp	r3, #2
 800d608:	d10b      	bne.n	800d622 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	889b      	ldrh	r3, [r3, #4]
 800d60e:	0a1b      	lsrs	r3, r3, #8
 800d610:	b29b      	uxth	r3, r3
 800d612:	b2da      	uxtb	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f943 	bl	800d8a6 <USBD_CtlSendStatus>
}
 800d620:	e003      	b.n	800d62a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d622:	6839      	ldr	r1, [r7, #0]
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 f860 	bl	800d6ea <USBD_CtlError>
}
 800d62a:	bf00      	nop
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b082      	sub	sp, #8
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d642:	b2db      	uxtb	r3, r3
 800d644:	3b01      	subs	r3, #1
 800d646:	2b02      	cmp	r3, #2
 800d648:	d80b      	bhi.n	800d662 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	885b      	ldrh	r3, [r3, #2]
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d10c      	bne.n	800d66c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f923 	bl	800d8a6 <USBD_CtlSendStatus>
      }
      break;
 800d660:	e004      	b.n	800d66c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f840 	bl	800d6ea <USBD_CtlError>
      break;
 800d66a:	e000      	b.n	800d66e <USBD_ClrFeature+0x3c>
      break;
 800d66c:	bf00      	nop
  }
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b084      	sub	sp, #16
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	781a      	ldrb	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	3301      	adds	r3, #1
 800d690:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	781a      	ldrb	r2, [r3, #0]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	3301      	adds	r3, #1
 800d69e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	f7ff fa3d 	bl	800cb20 <SWAPBYTE>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f7ff fa30 	bl	800cb20 <SWAPBYTE>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f7ff fa23 	bl	800cb20 <SWAPBYTE>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	461a      	mov	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	80da      	strh	r2, [r3, #6]
}
 800d6e2:	bf00      	nop
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6f4:	2180      	movs	r1, #128	@ 0x80
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 fd56 	bl	800e1a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 fd52 	bl	800e1a8 <USBD_LL_StallEP>
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d718:	2300      	movs	r3, #0
 800d71a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d042      	beq.n	800d7a8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d726:	6938      	ldr	r0, [r7, #16]
 800d728:	f000 f842 	bl	800d7b0 <USBD_GetLen>
 800d72c:	4603      	mov	r3, r0
 800d72e:	3301      	adds	r3, #1
 800d730:	005b      	lsls	r3, r3, #1
 800d732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d736:	d808      	bhi.n	800d74a <USBD_GetString+0x3e>
 800d738:	6938      	ldr	r0, [r7, #16]
 800d73a:	f000 f839 	bl	800d7b0 <USBD_GetLen>
 800d73e:	4603      	mov	r3, r0
 800d740:	3301      	adds	r3, #1
 800d742:	b29b      	uxth	r3, r3
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	b29a      	uxth	r2, r3
 800d748:	e001      	b.n	800d74e <USBD_GetString+0x42>
 800d74a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	4413      	add	r3, r2
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	7812      	ldrb	r2, [r2, #0]
 800d75c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d75e:	7dfb      	ldrb	r3, [r7, #23]
 800d760:	3301      	adds	r3, #1
 800d762:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d764:	7dfb      	ldrb	r3, [r7, #23]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	4413      	add	r3, r2
 800d76a:	2203      	movs	r2, #3
 800d76c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d76e:	7dfb      	ldrb	r3, [r7, #23]
 800d770:	3301      	adds	r3, #1
 800d772:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d774:	e013      	b.n	800d79e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	4413      	add	r3, r2
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	7812      	ldrb	r2, [r2, #0]
 800d780:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	3301      	adds	r3, #1
 800d786:	613b      	str	r3, [r7, #16]
    idx++;
 800d788:	7dfb      	ldrb	r3, [r7, #23]
 800d78a:	3301      	adds	r3, #1
 800d78c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d78e:	7dfb      	ldrb	r3, [r7, #23]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	4413      	add	r3, r2
 800d794:	2200      	movs	r2, #0
 800d796:	701a      	strb	r2, [r3, #0]
    idx++;
 800d798:	7dfb      	ldrb	r3, [r7, #23]
 800d79a:	3301      	adds	r3, #1
 800d79c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1e7      	bne.n	800d776 <USBD_GetString+0x6a>
 800d7a6:	e000      	b.n	800d7aa <USBD_GetString+0x9e>
    return;
 800d7a8:	bf00      	nop
  }
}
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d7c0:	e005      	b.n	800d7ce <USBD_GetLen+0x1e>
  {
    len++;
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1f5      	bne.n	800d7c2 <USBD_GetLen+0x12>
  }

  return len;
 800d7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3714      	adds	r7, #20
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	2100      	movs	r1, #0
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 fd52 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	68ba      	ldr	r2, [r7, #8]
 800d830:	2100      	movs	r1, #0
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f000 fd41 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b084      	sub	sp, #16
 800d846:	af00      	add	r7, sp, #0
 800d848:	60f8      	str	r0, [r7, #12]
 800d84a:	60b9      	str	r1, [r7, #8]
 800d84c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2203      	movs	r2, #3
 800d852:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	68ba      	ldr	r2, [r7, #8]
 800d862:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68ba      	ldr	r2, [r7, #8]
 800d872:	2100      	movs	r1, #0
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 fd41 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	2100      	movs	r1, #0
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 fd30 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b082      	sub	sp, #8
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2204      	movs	r2, #4
 800d8b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fcfc 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2205      	movs	r2, #5
 800d8d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8dc:	2300      	movs	r3, #0
 800d8de:	2200      	movs	r2, #0
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fd0a 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	4912      	ldr	r1, [pc, #72]	@ (800d944 <MX_USB_DEVICE_Init+0x50>)
 800d8fc:	4812      	ldr	r0, [pc, #72]	@ (800d948 <MX_USB_DEVICE_Init+0x54>)
 800d8fe:	f7fe fcd9 	bl	800c2b4 <USBD_Init>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d908:	f7f4 fb32 	bl	8001f70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d90c:	490f      	ldr	r1, [pc, #60]	@ (800d94c <MX_USB_DEVICE_Init+0x58>)
 800d90e:	480e      	ldr	r0, [pc, #56]	@ (800d948 <MX_USB_DEVICE_Init+0x54>)
 800d910:	f7fe fd00 	bl	800c314 <USBD_RegisterClass>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d001      	beq.n	800d91e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d91a:	f7f4 fb29 	bl	8001f70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d91e:	490c      	ldr	r1, [pc, #48]	@ (800d950 <MX_USB_DEVICE_Init+0x5c>)
 800d920:	4809      	ldr	r0, [pc, #36]	@ (800d948 <MX_USB_DEVICE_Init+0x54>)
 800d922:	f7fe fbf7 	bl	800c114 <USBD_CDC_RegisterInterface>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d92c:	f7f4 fb20 	bl	8001f70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d930:	4805      	ldr	r0, [pc, #20]	@ (800d948 <MX_USB_DEVICE_Init+0x54>)
 800d932:	f7fe fd25 	bl	800c380 <USBD_Start>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d93c:	f7f4 fb18 	bl	8001f70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d940:	bf00      	nop
 800d942:	bd80      	pop	{r7, pc}
 800d944:	200000e4 	.word	0x200000e4
 800d948:	20000aec 	.word	0x20000aec
 800d94c:	20000048 	.word	0x20000048
 800d950:	200000d0 	.word	0x200000d0

0800d954 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d958:	2200      	movs	r2, #0
 800d95a:	4905      	ldr	r1, [pc, #20]	@ (800d970 <CDC_Init_FS+0x1c>)
 800d95c:	4805      	ldr	r0, [pc, #20]	@ (800d974 <CDC_Init_FS+0x20>)
 800d95e:	f7fe fbf3 	bl	800c148 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d962:	4905      	ldr	r1, [pc, #20]	@ (800d978 <CDC_Init_FS+0x24>)
 800d964:	4803      	ldr	r0, [pc, #12]	@ (800d974 <CDC_Init_FS+0x20>)
 800d966:	f7fe fc11 	bl	800c18c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d96a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	20000fc8 	.word	0x20000fc8
 800d974:	20000aec 	.word	0x20000aec
 800d978:	20000dc8 	.word	0x20000dc8

0800d97c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d980:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d982:	4618      	mov	r0, r3
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	4603      	mov	r3, r0
 800d994:	6039      	str	r1, [r7, #0]
 800d996:	71fb      	strb	r3, [r7, #7]
 800d998:	4613      	mov	r3, r2
 800d99a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d99c:	79fb      	ldrb	r3, [r7, #7]
 800d99e:	2b23      	cmp	r3, #35	@ 0x23
 800d9a0:	f200 8098 	bhi.w	800dad4 <CDC_Control_FS+0x148>
 800d9a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d9ac <CDC_Control_FS+0x20>)
 800d9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9aa:	bf00      	nop
 800d9ac:	0800dad5 	.word	0x0800dad5
 800d9b0:	0800dad5 	.word	0x0800dad5
 800d9b4:	0800dad5 	.word	0x0800dad5
 800d9b8:	0800dad5 	.word	0x0800dad5
 800d9bc:	0800dad5 	.word	0x0800dad5
 800d9c0:	0800dad5 	.word	0x0800dad5
 800d9c4:	0800dad5 	.word	0x0800dad5
 800d9c8:	0800dad5 	.word	0x0800dad5
 800d9cc:	0800dad5 	.word	0x0800dad5
 800d9d0:	0800dad5 	.word	0x0800dad5
 800d9d4:	0800dad5 	.word	0x0800dad5
 800d9d8:	0800dad5 	.word	0x0800dad5
 800d9dc:	0800dad5 	.word	0x0800dad5
 800d9e0:	0800dad5 	.word	0x0800dad5
 800d9e4:	0800dad5 	.word	0x0800dad5
 800d9e8:	0800dad5 	.word	0x0800dad5
 800d9ec:	0800dad5 	.word	0x0800dad5
 800d9f0:	0800dad5 	.word	0x0800dad5
 800d9f4:	0800dad5 	.word	0x0800dad5
 800d9f8:	0800dad5 	.word	0x0800dad5
 800d9fc:	0800dad5 	.word	0x0800dad5
 800da00:	0800dad5 	.word	0x0800dad5
 800da04:	0800dad5 	.word	0x0800dad5
 800da08:	0800dad5 	.word	0x0800dad5
 800da0c:	0800dad5 	.word	0x0800dad5
 800da10:	0800dad5 	.word	0x0800dad5
 800da14:	0800dad5 	.word	0x0800dad5
 800da18:	0800dad5 	.word	0x0800dad5
 800da1c:	0800dad5 	.word	0x0800dad5
 800da20:	0800dad5 	.word	0x0800dad5
 800da24:	0800dad5 	.word	0x0800dad5
 800da28:	0800dad5 	.word	0x0800dad5
 800da2c:	0800da3d 	.word	0x0800da3d
 800da30:	0800da81 	.word	0x0800da81
 800da34:	0800dad5 	.word	0x0800dad5
 800da38:	0800dad5 	.word	0x0800dad5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	461a      	mov	r2, r3
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	3301      	adds	r3, #1
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	021b      	lsls	r3, r3, #8
 800da4a:	431a      	orrs	r2, r3
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	3302      	adds	r3, #2
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	041b      	lsls	r3, r3, #16
 800da54:	431a      	orrs	r2, r3
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	3303      	adds	r3, #3
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	061b      	lsls	r3, r3, #24
 800da5e:	4313      	orrs	r3, r2
 800da60:	461a      	mov	r2, r3
 800da62:	4b20      	ldr	r3, [pc, #128]	@ (800dae4 <CDC_Control_FS+0x158>)
 800da64:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	791a      	ldrb	r2, [r3, #4]
 800da6a:	4b1e      	ldr	r3, [pc, #120]	@ (800dae4 <CDC_Control_FS+0x158>)
 800da6c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	795a      	ldrb	r2, [r3, #5]
 800da72:	4b1c      	ldr	r3, [pc, #112]	@ (800dae4 <CDC_Control_FS+0x158>)
 800da74:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	799a      	ldrb	r2, [r3, #6]
 800da7a:	4b1a      	ldr	r3, [pc, #104]	@ (800dae4 <CDC_Control_FS+0x158>)
 800da7c:	719a      	strb	r2, [r3, #6]
    break;
 800da7e:	e02a      	b.n	800dad6 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800da80:	4b18      	ldr	r3, [pc, #96]	@ (800dae4 <CDC_Control_FS+0x158>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	b2da      	uxtb	r2, r3
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800da8a:	4b16      	ldr	r3, [pc, #88]	@ (800dae4 <CDC_Control_FS+0x158>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	0a1a      	lsrs	r2, r3, #8
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	3301      	adds	r3, #1
 800da94:	b2d2      	uxtb	r2, r2
 800da96:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800da98:	4b12      	ldr	r3, [pc, #72]	@ (800dae4 <CDC_Control_FS+0x158>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	0c1a      	lsrs	r2, r3, #16
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	3302      	adds	r3, #2
 800daa2:	b2d2      	uxtb	r2, r2
 800daa4:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800daa6:	4b0f      	ldr	r3, [pc, #60]	@ (800dae4 <CDC_Control_FS+0x158>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	0e1a      	lsrs	r2, r3, #24
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	3303      	adds	r3, #3
 800dab0:	b2d2      	uxtb	r2, r2
 800dab2:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	3304      	adds	r3, #4
 800dab8:	4a0a      	ldr	r2, [pc, #40]	@ (800dae4 <CDC_Control_FS+0x158>)
 800daba:	7912      	ldrb	r2, [r2, #4]
 800dabc:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	3305      	adds	r3, #5
 800dac2:	4a08      	ldr	r2, [pc, #32]	@ (800dae4 <CDC_Control_FS+0x158>)
 800dac4:	7952      	ldrb	r2, [r2, #5]
 800dac6:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	3306      	adds	r3, #6
 800dacc:	4a05      	ldr	r2, [pc, #20]	@ (800dae4 <CDC_Control_FS+0x158>)
 800dace:	7992      	ldrb	r2, [r2, #6]
 800dad0:	701a      	strb	r2, [r3, #0]
    break;
 800dad2:	e000      	b.n	800dad6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dad4:	bf00      	nop
  }

  return (USBD_OK);
 800dad6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dad8:	4618      	mov	r0, r3
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	200000c8 	.word	0x200000c8

0800dae8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800daf2:	4b0b      	ldr	r3, [pc, #44]	@ (800db20 <CDC_Receive_FS+0x38>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d006      	beq.n	800db08 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800dafa:	4b09      	ldr	r3, [pc, #36]	@ (800db20 <CDC_Receive_FS+0x38>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	6812      	ldr	r2, [r2, #0]
 800db02:	4611      	mov	r1, r2
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	4806      	ldr	r0, [pc, #24]	@ (800db24 <CDC_Receive_FS+0x3c>)
 800db0c:	f7fe fb3e 	bl	800c18c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800db10:	4804      	ldr	r0, [pc, #16]	@ (800db24 <CDC_Receive_FS+0x3c>)
 800db12:	f7fe fb99 	bl	800c248 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800db16:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	200011c8 	.word	0x200011c8
 800db24:	20000aec 	.word	0x20000aec

0800db28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800db34:	2300      	movs	r3, #0
 800db36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800db38:	4b0d      	ldr	r3, [pc, #52]	@ (800db70 <CDC_Transmit_FS+0x48>)
 800db3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e00b      	b.n	800db66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800db4e:	887b      	ldrh	r3, [r7, #2]
 800db50:	461a      	mov	r2, r3
 800db52:	6879      	ldr	r1, [r7, #4]
 800db54:	4806      	ldr	r0, [pc, #24]	@ (800db70 <CDC_Transmit_FS+0x48>)
 800db56:	f7fe faf7 	bl	800c148 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800db5a:	4805      	ldr	r0, [pc, #20]	@ (800db70 <CDC_Transmit_FS+0x48>)
 800db5c:	f7fe fb34 	bl	800c1c8 <USBD_CDC_TransmitPacket>
 800db60:	4603      	mov	r3, r0
 800db62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800db64:	7bfb      	ldrb	r3, [r7, #15]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	20000aec 	.word	0x20000aec

0800db74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800db74:	b480      	push	{r7}
 800db76:	b087      	sub	sp, #28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	4613      	mov	r3, r2
 800db80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800db82:	2300      	movs	r3, #0
 800db84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800db86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	371c      	adds	r7, #28
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
	...

0800db98 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800dba0:	4a04      	ldr	r2, [pc, #16]	@ (800dbb4 <CDC_Attach_Rx+0x1c>)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6013      	str	r3, [r2, #0]
}
 800dba6:	bf00      	nop
 800dba8:	370c      	adds	r7, #12
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	200011c8 	.word	0x200011c8

0800dbb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	6039      	str	r1, [r7, #0]
 800dbc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2212      	movs	r2, #18
 800dbc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dbca:	4b03      	ldr	r3, [pc, #12]	@ (800dbd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	20000100 	.word	0x20000100

0800dbdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	6039      	str	r1, [r7, #0]
 800dbe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	2204      	movs	r2, #4
 800dbec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dbee:	4b03      	ldr	r3, [pc, #12]	@ (800dbfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr
 800dbfc:	20000114 	.word	0x20000114

0800dc00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	4603      	mov	r3, r0
 800dc08:	6039      	str	r1, [r7, #0]
 800dc0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d105      	bne.n	800dc1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	4907      	ldr	r1, [pc, #28]	@ (800dc34 <USBD_FS_ProductStrDescriptor+0x34>)
 800dc16:	4808      	ldr	r0, [pc, #32]	@ (800dc38 <USBD_FS_ProductStrDescriptor+0x38>)
 800dc18:	f7ff fd78 	bl	800d70c <USBD_GetString>
 800dc1c:	e004      	b.n	800dc28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	4904      	ldr	r1, [pc, #16]	@ (800dc34 <USBD_FS_ProductStrDescriptor+0x34>)
 800dc22:	4805      	ldr	r0, [pc, #20]	@ (800dc38 <USBD_FS_ProductStrDescriptor+0x38>)
 800dc24:	f7ff fd72 	bl	800d70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc28:	4b02      	ldr	r3, [pc, #8]	@ (800dc34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	200011cc 	.word	0x200011cc
 800dc38:	0800ed9c 	.word	0x0800ed9c

0800dc3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	4603      	mov	r3, r0
 800dc44:	6039      	str	r1, [r7, #0]
 800dc46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dc48:	683a      	ldr	r2, [r7, #0]
 800dc4a:	4904      	ldr	r1, [pc, #16]	@ (800dc5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dc4c:	4804      	ldr	r0, [pc, #16]	@ (800dc60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dc4e:	f7ff fd5d 	bl	800d70c <USBD_GetString>
  return USBD_StrDesc;
 800dc52:	4b02      	ldr	r3, [pc, #8]	@ (800dc5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	200011cc 	.word	0x200011cc
 800dc60:	0800edb4 	.word	0x0800edb4

0800dc64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	6039      	str	r1, [r7, #0]
 800dc6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	221a      	movs	r2, #26
 800dc74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc76:	f000 f843 	bl	800dd00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc7a:	4b02      	ldr	r3, [pc, #8]	@ (800dc84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	20000118 	.word	0x20000118

0800dc88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	4603      	mov	r3, r0
 800dc90:	6039      	str	r1, [r7, #0]
 800dc92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc94:	79fb      	ldrb	r3, [r7, #7]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d105      	bne.n	800dca6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	4907      	ldr	r1, [pc, #28]	@ (800dcbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc9e:	4808      	ldr	r0, [pc, #32]	@ (800dcc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dca0:	f7ff fd34 	bl	800d70c <USBD_GetString>
 800dca4:	e004      	b.n	800dcb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	4904      	ldr	r1, [pc, #16]	@ (800dcbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800dcaa:	4805      	ldr	r0, [pc, #20]	@ (800dcc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dcac:	f7ff fd2e 	bl	800d70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcb0:	4b02      	ldr	r3, [pc, #8]	@ (800dcbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	200011cc 	.word	0x200011cc
 800dcc0:	0800edc8 	.word	0x0800edc8

0800dcc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	4603      	mov	r3, r0
 800dccc:	6039      	str	r1, [r7, #0]
 800dcce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dcd0:	79fb      	ldrb	r3, [r7, #7]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d105      	bne.n	800dce2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dcd6:	683a      	ldr	r2, [r7, #0]
 800dcd8:	4907      	ldr	r1, [pc, #28]	@ (800dcf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dcda:	4808      	ldr	r0, [pc, #32]	@ (800dcfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dcdc:	f7ff fd16 	bl	800d70c <USBD_GetString>
 800dce0:	e004      	b.n	800dcec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	4904      	ldr	r1, [pc, #16]	@ (800dcf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dce6:	4805      	ldr	r0, [pc, #20]	@ (800dcfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dce8:	f7ff fd10 	bl	800d70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcec:	4b02      	ldr	r3, [pc, #8]	@ (800dcf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	200011cc 	.word	0x200011cc
 800dcfc:	0800edd4 	.word	0x0800edd4

0800dd00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dd06:	4b0f      	ldr	r3, [pc, #60]	@ (800dd44 <Get_SerialNum+0x44>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dd0c:	4b0e      	ldr	r3, [pc, #56]	@ (800dd48 <Get_SerialNum+0x48>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dd12:	4b0e      	ldr	r3, [pc, #56]	@ (800dd4c <Get_SerialNum+0x4c>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d009      	beq.n	800dd3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dd26:	2208      	movs	r2, #8
 800dd28:	4909      	ldr	r1, [pc, #36]	@ (800dd50 <Get_SerialNum+0x50>)
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f000 f814 	bl	800dd58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dd30:	2204      	movs	r2, #4
 800dd32:	4908      	ldr	r1, [pc, #32]	@ (800dd54 <Get_SerialNum+0x54>)
 800dd34:	68b8      	ldr	r0, [r7, #8]
 800dd36:	f000 f80f 	bl	800dd58 <IntToUnicode>
  }
}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	1fff7a10 	.word	0x1fff7a10
 800dd48:	1fff7a14 	.word	0x1fff7a14
 800dd4c:	1fff7a18 	.word	0x1fff7a18
 800dd50:	2000011a 	.word	0x2000011a
 800dd54:	2000012a 	.word	0x2000012a

0800dd58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	4613      	mov	r3, r2
 800dd64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	75fb      	strb	r3, [r7, #23]
 800dd6e:	e027      	b.n	800ddc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	0f1b      	lsrs	r3, r3, #28
 800dd74:	2b09      	cmp	r3, #9
 800dd76:	d80b      	bhi.n	800dd90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	0f1b      	lsrs	r3, r3, #28
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
 800dd80:	005b      	lsls	r3, r3, #1
 800dd82:	4619      	mov	r1, r3
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	440b      	add	r3, r1
 800dd88:	3230      	adds	r2, #48	@ 0x30
 800dd8a:	b2d2      	uxtb	r2, r2
 800dd8c:	701a      	strb	r2, [r3, #0]
 800dd8e:	e00a      	b.n	800dda6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	0f1b      	lsrs	r3, r3, #28
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	440b      	add	r3, r1
 800dda0:	3237      	adds	r2, #55	@ 0x37
 800dda2:	b2d2      	uxtb	r2, r2
 800dda4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	011b      	lsls	r3, r3, #4
 800ddaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ddac:	7dfb      	ldrb	r3, [r7, #23]
 800ddae:	005b      	lsls	r3, r3, #1
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	75fb      	strb	r3, [r7, #23]
 800ddc0:	7dfa      	ldrb	r2, [r7, #23]
 800ddc2:	79fb      	ldrb	r3, [r7, #7]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d3d3      	bcc.n	800dd70 <IntToUnicode+0x18>
  }
}
 800ddc8:	bf00      	nop
 800ddca:	bf00      	nop
 800ddcc:	371c      	adds	r7, #28
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
	...

0800ddd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	@ 0x28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dde0:	f107 0314 	add.w	r3, r7, #20
 800dde4:	2200      	movs	r2, #0
 800dde6:	601a      	str	r2, [r3, #0]
 800dde8:	605a      	str	r2, [r3, #4]
 800ddea:	609a      	str	r2, [r3, #8]
 800ddec:	60da      	str	r2, [r3, #12]
 800ddee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ddf8:	d13a      	bne.n	800de70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	613b      	str	r3, [r7, #16]
 800ddfe:	4b1e      	ldr	r3, [pc, #120]	@ (800de78 <HAL_PCD_MspInit+0xa0>)
 800de00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de02:	4a1d      	ldr	r2, [pc, #116]	@ (800de78 <HAL_PCD_MspInit+0xa0>)
 800de04:	f043 0301 	orr.w	r3, r3, #1
 800de08:	6313      	str	r3, [r2, #48]	@ 0x30
 800de0a:	4b1b      	ldr	r3, [pc, #108]	@ (800de78 <HAL_PCD_MspInit+0xa0>)
 800de0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	613b      	str	r3, [r7, #16]
 800de14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800de16:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800de1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de1c:	2302      	movs	r3, #2
 800de1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de20:	2300      	movs	r3, #0
 800de22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de24:	2303      	movs	r3, #3
 800de26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800de28:	230a      	movs	r3, #10
 800de2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de2c:	f107 0314 	add.w	r3, r7, #20
 800de30:	4619      	mov	r1, r3
 800de32:	4812      	ldr	r0, [pc, #72]	@ (800de7c <HAL_PCD_MspInit+0xa4>)
 800de34:	f7f6 fe32 	bl	8004a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800de38:	4b0f      	ldr	r3, [pc, #60]	@ (800de78 <HAL_PCD_MspInit+0xa0>)
 800de3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de3c:	4a0e      	ldr	r2, [pc, #56]	@ (800de78 <HAL_PCD_MspInit+0xa0>)
 800de3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de42:	6353      	str	r3, [r2, #52]	@ 0x34
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	4b0b      	ldr	r3, [pc, #44]	@ (800de78 <HAL_PCD_MspInit+0xa0>)
 800de4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de4c:	4a0a      	ldr	r2, [pc, #40]	@ (800de78 <HAL_PCD_MspInit+0xa0>)
 800de4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800de52:	6453      	str	r3, [r2, #68]	@ 0x44
 800de54:	4b08      	ldr	r3, [pc, #32]	@ (800de78 <HAL_PCD_MspInit+0xa0>)
 800de56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de5c:	60fb      	str	r3, [r7, #12]
 800de5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800de60:	2200      	movs	r2, #0
 800de62:	2100      	movs	r1, #0
 800de64:	2043      	movs	r0, #67	@ 0x43
 800de66:	f7f6 fa36 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de6a:	2043      	movs	r0, #67	@ 0x43
 800de6c:	f7f6 fa4f 	bl	800430e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de70:	bf00      	nop
 800de72:	3728      	adds	r7, #40	@ 0x28
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	40023800 	.word	0x40023800
 800de7c:	40020000 	.word	0x40020000

0800de80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800de94:	4619      	mov	r1, r3
 800de96:	4610      	mov	r0, r2
 800de98:	f7fe fabf 	bl	800c41a <USBD_LL_SetupStage>
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800deb6:	78fa      	ldrb	r2, [r7, #3]
 800deb8:	6879      	ldr	r1, [r7, #4]
 800deba:	4613      	mov	r3, r2
 800debc:	00db      	lsls	r3, r3, #3
 800debe:	4413      	add	r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	440b      	add	r3, r1
 800dec4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	78fb      	ldrb	r3, [r7, #3]
 800decc:	4619      	mov	r1, r3
 800dece:	f7fe faf9 	bl	800c4c4 <USBD_LL_DataOutStage>
}
 800ded2:	bf00      	nop
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b082      	sub	sp, #8
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800deec:	78fa      	ldrb	r2, [r7, #3]
 800deee:	6879      	ldr	r1, [r7, #4]
 800def0:	4613      	mov	r3, r2
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	4413      	add	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	440b      	add	r3, r1
 800defa:	3320      	adds	r3, #32
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	78fb      	ldrb	r3, [r7, #3]
 800df00:	4619      	mov	r1, r3
 800df02:	f7fe fb9b 	bl	800c63c <USBD_LL_DataInStage>
}
 800df06:	bf00      	nop
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fe fcdf 	bl	800c8e0 <USBD_LL_SOF>
}
 800df22:	bf00      	nop
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b084      	sub	sp, #16
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800df32:	2301      	movs	r3, #1
 800df34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	79db      	ldrb	r3, [r3, #7]
 800df3a:	2b02      	cmp	r3, #2
 800df3c:	d001      	beq.n	800df42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800df3e:	f7f4 f817 	bl	8001f70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df48:	7bfa      	ldrb	r2, [r7, #15]
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fc83 	bl	800c858 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe fc2a 	bl	800c7b2 <USBD_LL_Reset>
}
 800df5e:	bf00      	nop
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe fc7e 	bl	800c878 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	6812      	ldr	r2, [r2, #0]
 800df8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df8e:	f043 0301 	orr.w	r3, r3, #1
 800df92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	7adb      	ldrb	r3, [r3, #11]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d005      	beq.n	800dfa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df9c:	4b04      	ldr	r3, [pc, #16]	@ (800dfb0 <HAL_PCD_SuspendCallback+0x48>)
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	4a03      	ldr	r2, [pc, #12]	@ (800dfb0 <HAL_PCD_SuspendCallback+0x48>)
 800dfa2:	f043 0306 	orr.w	r3, r3, #6
 800dfa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	e000ed00 	.word	0xe000ed00

0800dfb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fe fc74 	bl	800c8b0 <USBD_LL_Resume>
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfe2:	78fa      	ldrb	r2, [r7, #3]
 800dfe4:	4611      	mov	r1, r2
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fe fccc 	bl	800c984 <USBD_LL_IsoOUTIncomplete>
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e006:	78fa      	ldrb	r2, [r7, #3]
 800e008:	4611      	mov	r1, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fe fc88 	bl	800c920 <USBD_LL_IsoINIncomplete>
}
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e026:	4618      	mov	r0, r3
 800e028:	f7fe fcde 	bl	800c9e8 <USBD_LL_DevConnected>
}
 800e02c:	bf00      	nop
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e042:	4618      	mov	r0, r3
 800e044:	f7fe fcdb 	bl	800c9fe <USBD_LL_DevDisconnected>
}
 800e048:	bf00      	nop
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d13c      	bne.n	800e0da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e060:	4a20      	ldr	r2, [pc, #128]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a1e      	ldr	r2, [pc, #120]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e06c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e070:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e072:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e076:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e078:	4b1a      	ldr	r3, [pc, #104]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e07a:	2204      	movs	r2, #4
 800e07c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e07e:	4b19      	ldr	r3, [pc, #100]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e080:	2202      	movs	r2, #2
 800e082:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e084:	4b17      	ldr	r3, [pc, #92]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e086:	2200      	movs	r2, #0
 800e088:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e08a:	4b16      	ldr	r3, [pc, #88]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e08c:	2202      	movs	r2, #2
 800e08e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e090:	4b14      	ldr	r3, [pc, #80]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e092:	2200      	movs	r2, #0
 800e094:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e096:	4b13      	ldr	r3, [pc, #76]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e098:	2200      	movs	r2, #0
 800e09a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e09c:	4b11      	ldr	r3, [pc, #68]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e0a2:	4b10      	ldr	r3, [pc, #64]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e0ae:	480d      	ldr	r0, [pc, #52]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0b0:	f7f9 fd44 	bl	8007b3c <HAL_PCD_Init>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e0ba:	f7f3 ff59 	bl	8001f70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e0be:	2180      	movs	r1, #128	@ 0x80
 800e0c0:	4808      	ldr	r0, [pc, #32]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0c2:	f7fa ff70 	bl	8008fa6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e0c6:	2240      	movs	r2, #64	@ 0x40
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	4806      	ldr	r0, [pc, #24]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0cc:	f7fa ff24 	bl	8008f18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e0d0:	2280      	movs	r2, #128	@ 0x80
 800e0d2:	2101      	movs	r1, #1
 800e0d4:	4803      	ldr	r0, [pc, #12]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0d6:	f7fa ff1f 	bl	8008f18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	200013cc 	.word	0x200013cc

0800e0e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7f9 fe2b 	bl	8007d5a <HAL_PCD_Start>
 800e104:	4603      	mov	r3, r0
 800e106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f942 	bl	800e394 <USBD_Get_USB_Status>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e114:	7bbb      	ldrb	r3, [r7, #14]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	461a      	mov	r2, r3
 800e12c:	4603      	mov	r3, r0
 800e12e:	70fb      	strb	r3, [r7, #3]
 800e130:	460b      	mov	r3, r1
 800e132:	70bb      	strb	r3, [r7, #2]
 800e134:	4613      	mov	r3, r2
 800e136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e146:	78bb      	ldrb	r3, [r7, #2]
 800e148:	883a      	ldrh	r2, [r7, #0]
 800e14a:	78f9      	ldrb	r1, [r7, #3]
 800e14c:	f7fa faff 	bl	800874e <HAL_PCD_EP_Open>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	4618      	mov	r0, r3
 800e158:	f000 f91c 	bl	800e394 <USBD_Get_USB_Status>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e160:	7bbb      	ldrb	r3, [r7, #14]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e184:	78fa      	ldrb	r2, [r7, #3]
 800e186:	4611      	mov	r1, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fa fb4a 	bl	8008822 <HAL_PCD_EP_Close>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f8fd 	bl	800e394 <USBD_Get_USB_Status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1c2:	78fa      	ldrb	r2, [r7, #3]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fa fc02 	bl	80089d0 <HAL_PCD_EP_SetStall>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 f8de 	bl	800e394 <USBD_Get_USB_Status>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e200:	78fa      	ldrb	r2, [r7, #3]
 800e202:	4611      	mov	r1, r2
 800e204:	4618      	mov	r0, r3
 800e206:	f7fa fc46 	bl	8008a96 <HAL_PCD_EP_ClrStall>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
 800e210:	4618      	mov	r0, r3
 800e212:	f000 f8bf 	bl	800e394 <USBD_Get_USB_Status>
 800e216:	4603      	mov	r3, r0
 800e218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	da0b      	bge.n	800e258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e246:	68f9      	ldr	r1, [r7, #12]
 800e248:	4613      	mov	r3, r2
 800e24a:	00db      	lsls	r3, r3, #3
 800e24c:	4413      	add	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	440b      	add	r3, r1
 800e252:	3316      	adds	r3, #22
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	e00b      	b.n	800e270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e258:	78fb      	ldrb	r3, [r7, #3]
 800e25a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	4613      	mov	r3, r2
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e26e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e296:	78fa      	ldrb	r2, [r7, #3]
 800e298:	4611      	mov	r1, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fa fa33 	bl	8008706 <HAL_PCD_SetAddress>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 f874 	bl	800e394 <USBD_Get_USB_Status>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b086      	sub	sp, #24
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	603b      	str	r3, [r7, #0]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e2d8:	7af9      	ldrb	r1, [r7, #11]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	f7fa fb3d 	bl	800895c <HAL_PCD_EP_Transmit>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 f853 	bl	800e394 <USBD_Get_USB_Status>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	607a      	str	r2, [r7, #4]
 800e306:	603b      	str	r3, [r7, #0]
 800e308:	460b      	mov	r3, r1
 800e30a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e31a:	7af9      	ldrb	r1, [r7, #11]
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	f7fa fac9 	bl	80088b6 <HAL_PCD_EP_Receive>
 800e324:	4603      	mov	r3, r0
 800e326:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f832 	bl	800e394 <USBD_Get_USB_Status>
 800e330:	4603      	mov	r3, r0
 800e332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e334:	7dbb      	ldrb	r3, [r7, #22]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3718      	adds	r7, #24
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e350:	78fa      	ldrb	r2, [r7, #3]
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7fa fae9 	bl	800892c <HAL_PCD_EP_GetRxCount>
 800e35a:	4603      	mov	r3, r0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e36c:	4b03      	ldr	r3, [pc, #12]	@ (800e37c <USBD_static_malloc+0x18>)
}
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	200018b0 	.word	0x200018b0

0800e380 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]

}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3a2:	79fb      	ldrb	r3, [r7, #7]
 800e3a4:	2b03      	cmp	r3, #3
 800e3a6:	d817      	bhi.n	800e3d8 <USBD_Get_USB_Status+0x44>
 800e3a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e3b0 <USBD_Get_USB_Status+0x1c>)
 800e3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ae:	bf00      	nop
 800e3b0:	0800e3c1 	.word	0x0800e3c1
 800e3b4:	0800e3c7 	.word	0x0800e3c7
 800e3b8:	0800e3cd 	.word	0x0800e3cd
 800e3bc:	0800e3d3 	.word	0x0800e3d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3c4:	e00b      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ca:	e008      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d0:	e005      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d6:	e002      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e3d8:	2303      	movs	r3, #3
 800e3da:	73fb      	strb	r3, [r7, #15]
    break;
 800e3dc:	bf00      	nop
  }
  return usb_status;
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <sniprintf>:
 800e3ec:	b40c      	push	{r2, r3}
 800e3ee:	b530      	push	{r4, r5, lr}
 800e3f0:	4b18      	ldr	r3, [pc, #96]	@ (800e454 <sniprintf+0x68>)
 800e3f2:	1e0c      	subs	r4, r1, #0
 800e3f4:	681d      	ldr	r5, [r3, #0]
 800e3f6:	b09d      	sub	sp, #116	@ 0x74
 800e3f8:	da08      	bge.n	800e40c <sniprintf+0x20>
 800e3fa:	238b      	movs	r3, #139	@ 0x8b
 800e3fc:	602b      	str	r3, [r5, #0]
 800e3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e402:	b01d      	add	sp, #116	@ 0x74
 800e404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e408:	b002      	add	sp, #8
 800e40a:	4770      	bx	lr
 800e40c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e410:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e414:	f04f 0300 	mov.w	r3, #0
 800e418:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e41a:	bf14      	ite	ne
 800e41c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e420:	4623      	moveq	r3, r4
 800e422:	9304      	str	r3, [sp, #16]
 800e424:	9307      	str	r3, [sp, #28]
 800e426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e42a:	9002      	str	r0, [sp, #8]
 800e42c:	9006      	str	r0, [sp, #24]
 800e42e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e432:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e434:	ab21      	add	r3, sp, #132	@ 0x84
 800e436:	a902      	add	r1, sp, #8
 800e438:	4628      	mov	r0, r5
 800e43a:	9301      	str	r3, [sp, #4]
 800e43c:	f000 f9bc 	bl	800e7b8 <_svfiprintf_r>
 800e440:	1c43      	adds	r3, r0, #1
 800e442:	bfbc      	itt	lt
 800e444:	238b      	movlt	r3, #139	@ 0x8b
 800e446:	602b      	strlt	r3, [r5, #0]
 800e448:	2c00      	cmp	r4, #0
 800e44a:	d0da      	beq.n	800e402 <sniprintf+0x16>
 800e44c:	9b02      	ldr	r3, [sp, #8]
 800e44e:	2200      	movs	r2, #0
 800e450:	701a      	strb	r2, [r3, #0]
 800e452:	e7d6      	b.n	800e402 <sniprintf+0x16>
 800e454:	20000134 	.word	0x20000134

0800e458 <memmove>:
 800e458:	4288      	cmp	r0, r1
 800e45a:	b510      	push	{r4, lr}
 800e45c:	eb01 0402 	add.w	r4, r1, r2
 800e460:	d902      	bls.n	800e468 <memmove+0x10>
 800e462:	4284      	cmp	r4, r0
 800e464:	4623      	mov	r3, r4
 800e466:	d807      	bhi.n	800e478 <memmove+0x20>
 800e468:	1e43      	subs	r3, r0, #1
 800e46a:	42a1      	cmp	r1, r4
 800e46c:	d008      	beq.n	800e480 <memmove+0x28>
 800e46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e472:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e476:	e7f8      	b.n	800e46a <memmove+0x12>
 800e478:	4402      	add	r2, r0
 800e47a:	4601      	mov	r1, r0
 800e47c:	428a      	cmp	r2, r1
 800e47e:	d100      	bne.n	800e482 <memmove+0x2a>
 800e480:	bd10      	pop	{r4, pc}
 800e482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e48a:	e7f7      	b.n	800e47c <memmove+0x24>

0800e48c <memset>:
 800e48c:	4402      	add	r2, r0
 800e48e:	4603      	mov	r3, r0
 800e490:	4293      	cmp	r3, r2
 800e492:	d100      	bne.n	800e496 <memset+0xa>
 800e494:	4770      	bx	lr
 800e496:	f803 1b01 	strb.w	r1, [r3], #1
 800e49a:	e7f9      	b.n	800e490 <memset+0x4>

0800e49c <__errno>:
 800e49c:	4b01      	ldr	r3, [pc, #4]	@ (800e4a4 <__errno+0x8>)
 800e49e:	6818      	ldr	r0, [r3, #0]
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	20000134 	.word	0x20000134

0800e4a8 <__libc_init_array>:
 800e4a8:	b570      	push	{r4, r5, r6, lr}
 800e4aa:	4d0d      	ldr	r5, [pc, #52]	@ (800e4e0 <__libc_init_array+0x38>)
 800e4ac:	4c0d      	ldr	r4, [pc, #52]	@ (800e4e4 <__libc_init_array+0x3c>)
 800e4ae:	1b64      	subs	r4, r4, r5
 800e4b0:	10a4      	asrs	r4, r4, #2
 800e4b2:	2600      	movs	r6, #0
 800e4b4:	42a6      	cmp	r6, r4
 800e4b6:	d109      	bne.n	800e4cc <__libc_init_array+0x24>
 800e4b8:	4d0b      	ldr	r5, [pc, #44]	@ (800e4e8 <__libc_init_array+0x40>)
 800e4ba:	4c0c      	ldr	r4, [pc, #48]	@ (800e4ec <__libc_init_array+0x44>)
 800e4bc:	f000 fc4a 	bl	800ed54 <_init>
 800e4c0:	1b64      	subs	r4, r4, r5
 800e4c2:	10a4      	asrs	r4, r4, #2
 800e4c4:	2600      	movs	r6, #0
 800e4c6:	42a6      	cmp	r6, r4
 800e4c8:	d105      	bne.n	800e4d6 <__libc_init_array+0x2e>
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}
 800e4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4d0:	4798      	blx	r3
 800e4d2:	3601      	adds	r6, #1
 800e4d4:	e7ee      	b.n	800e4b4 <__libc_init_array+0xc>
 800e4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4da:	4798      	blx	r3
 800e4dc:	3601      	adds	r6, #1
 800e4de:	e7f2      	b.n	800e4c6 <__libc_init_array+0x1e>
 800e4e0:	0800f44c 	.word	0x0800f44c
 800e4e4:	0800f44c 	.word	0x0800f44c
 800e4e8:	0800f44c 	.word	0x0800f44c
 800e4ec:	0800f450 	.word	0x0800f450

0800e4f0 <__retarget_lock_acquire_recursive>:
 800e4f0:	4770      	bx	lr

0800e4f2 <__retarget_lock_release_recursive>:
 800e4f2:	4770      	bx	lr

0800e4f4 <memcpy>:
 800e4f4:	440a      	add	r2, r1
 800e4f6:	4291      	cmp	r1, r2
 800e4f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4fc:	d100      	bne.n	800e500 <memcpy+0xc>
 800e4fe:	4770      	bx	lr
 800e500:	b510      	push	{r4, lr}
 800e502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e50a:	4291      	cmp	r1, r2
 800e50c:	d1f9      	bne.n	800e502 <memcpy+0xe>
 800e50e:	bd10      	pop	{r4, pc}

0800e510 <_free_r>:
 800e510:	b538      	push	{r3, r4, r5, lr}
 800e512:	4605      	mov	r5, r0
 800e514:	2900      	cmp	r1, #0
 800e516:	d041      	beq.n	800e59c <_free_r+0x8c>
 800e518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e51c:	1f0c      	subs	r4, r1, #4
 800e51e:	2b00      	cmp	r3, #0
 800e520:	bfb8      	it	lt
 800e522:	18e4      	addlt	r4, r4, r3
 800e524:	f000 f8e0 	bl	800e6e8 <__malloc_lock>
 800e528:	4a1d      	ldr	r2, [pc, #116]	@ (800e5a0 <_free_r+0x90>)
 800e52a:	6813      	ldr	r3, [r2, #0]
 800e52c:	b933      	cbnz	r3, 800e53c <_free_r+0x2c>
 800e52e:	6063      	str	r3, [r4, #4]
 800e530:	6014      	str	r4, [r2, #0]
 800e532:	4628      	mov	r0, r5
 800e534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e538:	f000 b8dc 	b.w	800e6f4 <__malloc_unlock>
 800e53c:	42a3      	cmp	r3, r4
 800e53e:	d908      	bls.n	800e552 <_free_r+0x42>
 800e540:	6820      	ldr	r0, [r4, #0]
 800e542:	1821      	adds	r1, r4, r0
 800e544:	428b      	cmp	r3, r1
 800e546:	bf01      	itttt	eq
 800e548:	6819      	ldreq	r1, [r3, #0]
 800e54a:	685b      	ldreq	r3, [r3, #4]
 800e54c:	1809      	addeq	r1, r1, r0
 800e54e:	6021      	streq	r1, [r4, #0]
 800e550:	e7ed      	b.n	800e52e <_free_r+0x1e>
 800e552:	461a      	mov	r2, r3
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	b10b      	cbz	r3, 800e55c <_free_r+0x4c>
 800e558:	42a3      	cmp	r3, r4
 800e55a:	d9fa      	bls.n	800e552 <_free_r+0x42>
 800e55c:	6811      	ldr	r1, [r2, #0]
 800e55e:	1850      	adds	r0, r2, r1
 800e560:	42a0      	cmp	r0, r4
 800e562:	d10b      	bne.n	800e57c <_free_r+0x6c>
 800e564:	6820      	ldr	r0, [r4, #0]
 800e566:	4401      	add	r1, r0
 800e568:	1850      	adds	r0, r2, r1
 800e56a:	4283      	cmp	r3, r0
 800e56c:	6011      	str	r1, [r2, #0]
 800e56e:	d1e0      	bne.n	800e532 <_free_r+0x22>
 800e570:	6818      	ldr	r0, [r3, #0]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	6053      	str	r3, [r2, #4]
 800e576:	4408      	add	r0, r1
 800e578:	6010      	str	r0, [r2, #0]
 800e57a:	e7da      	b.n	800e532 <_free_r+0x22>
 800e57c:	d902      	bls.n	800e584 <_free_r+0x74>
 800e57e:	230c      	movs	r3, #12
 800e580:	602b      	str	r3, [r5, #0]
 800e582:	e7d6      	b.n	800e532 <_free_r+0x22>
 800e584:	6820      	ldr	r0, [r4, #0]
 800e586:	1821      	adds	r1, r4, r0
 800e588:	428b      	cmp	r3, r1
 800e58a:	bf04      	itt	eq
 800e58c:	6819      	ldreq	r1, [r3, #0]
 800e58e:	685b      	ldreq	r3, [r3, #4]
 800e590:	6063      	str	r3, [r4, #4]
 800e592:	bf04      	itt	eq
 800e594:	1809      	addeq	r1, r1, r0
 800e596:	6021      	streq	r1, [r4, #0]
 800e598:	6054      	str	r4, [r2, #4]
 800e59a:	e7ca      	b.n	800e532 <_free_r+0x22>
 800e59c:	bd38      	pop	{r3, r4, r5, pc}
 800e59e:	bf00      	nop
 800e5a0:	20001c14 	.word	0x20001c14

0800e5a4 <sbrk_aligned>:
 800e5a4:	b570      	push	{r4, r5, r6, lr}
 800e5a6:	4e0f      	ldr	r6, [pc, #60]	@ (800e5e4 <sbrk_aligned+0x40>)
 800e5a8:	460c      	mov	r4, r1
 800e5aa:	6831      	ldr	r1, [r6, #0]
 800e5ac:	4605      	mov	r5, r0
 800e5ae:	b911      	cbnz	r1, 800e5b6 <sbrk_aligned+0x12>
 800e5b0:	f000 fb8a 	bl	800ecc8 <_sbrk_r>
 800e5b4:	6030      	str	r0, [r6, #0]
 800e5b6:	4621      	mov	r1, r4
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	f000 fb85 	bl	800ecc8 <_sbrk_r>
 800e5be:	1c43      	adds	r3, r0, #1
 800e5c0:	d103      	bne.n	800e5ca <sbrk_aligned+0x26>
 800e5c2:	f04f 34ff 	mov.w	r4, #4294967295
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ca:	1cc4      	adds	r4, r0, #3
 800e5cc:	f024 0403 	bic.w	r4, r4, #3
 800e5d0:	42a0      	cmp	r0, r4
 800e5d2:	d0f8      	beq.n	800e5c6 <sbrk_aligned+0x22>
 800e5d4:	1a21      	subs	r1, r4, r0
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	f000 fb76 	bl	800ecc8 <_sbrk_r>
 800e5dc:	3001      	adds	r0, #1
 800e5de:	d1f2      	bne.n	800e5c6 <sbrk_aligned+0x22>
 800e5e0:	e7ef      	b.n	800e5c2 <sbrk_aligned+0x1e>
 800e5e2:	bf00      	nop
 800e5e4:	20001c10 	.word	0x20001c10

0800e5e8 <_malloc_r>:
 800e5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5ec:	1ccd      	adds	r5, r1, #3
 800e5ee:	f025 0503 	bic.w	r5, r5, #3
 800e5f2:	3508      	adds	r5, #8
 800e5f4:	2d0c      	cmp	r5, #12
 800e5f6:	bf38      	it	cc
 800e5f8:	250c      	movcc	r5, #12
 800e5fa:	2d00      	cmp	r5, #0
 800e5fc:	4606      	mov	r6, r0
 800e5fe:	db01      	blt.n	800e604 <_malloc_r+0x1c>
 800e600:	42a9      	cmp	r1, r5
 800e602:	d904      	bls.n	800e60e <_malloc_r+0x26>
 800e604:	230c      	movs	r3, #12
 800e606:	6033      	str	r3, [r6, #0]
 800e608:	2000      	movs	r0, #0
 800e60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e60e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e6e4 <_malloc_r+0xfc>
 800e612:	f000 f869 	bl	800e6e8 <__malloc_lock>
 800e616:	f8d8 3000 	ldr.w	r3, [r8]
 800e61a:	461c      	mov	r4, r3
 800e61c:	bb44      	cbnz	r4, 800e670 <_malloc_r+0x88>
 800e61e:	4629      	mov	r1, r5
 800e620:	4630      	mov	r0, r6
 800e622:	f7ff ffbf 	bl	800e5a4 <sbrk_aligned>
 800e626:	1c43      	adds	r3, r0, #1
 800e628:	4604      	mov	r4, r0
 800e62a:	d158      	bne.n	800e6de <_malloc_r+0xf6>
 800e62c:	f8d8 4000 	ldr.w	r4, [r8]
 800e630:	4627      	mov	r7, r4
 800e632:	2f00      	cmp	r7, #0
 800e634:	d143      	bne.n	800e6be <_malloc_r+0xd6>
 800e636:	2c00      	cmp	r4, #0
 800e638:	d04b      	beq.n	800e6d2 <_malloc_r+0xea>
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	4639      	mov	r1, r7
 800e63e:	4630      	mov	r0, r6
 800e640:	eb04 0903 	add.w	r9, r4, r3
 800e644:	f000 fb40 	bl	800ecc8 <_sbrk_r>
 800e648:	4581      	cmp	r9, r0
 800e64a:	d142      	bne.n	800e6d2 <_malloc_r+0xea>
 800e64c:	6821      	ldr	r1, [r4, #0]
 800e64e:	1a6d      	subs	r5, r5, r1
 800e650:	4629      	mov	r1, r5
 800e652:	4630      	mov	r0, r6
 800e654:	f7ff ffa6 	bl	800e5a4 <sbrk_aligned>
 800e658:	3001      	adds	r0, #1
 800e65a:	d03a      	beq.n	800e6d2 <_malloc_r+0xea>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	442b      	add	r3, r5
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	f8d8 3000 	ldr.w	r3, [r8]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	bb62      	cbnz	r2, 800e6c4 <_malloc_r+0xdc>
 800e66a:	f8c8 7000 	str.w	r7, [r8]
 800e66e:	e00f      	b.n	800e690 <_malloc_r+0xa8>
 800e670:	6822      	ldr	r2, [r4, #0]
 800e672:	1b52      	subs	r2, r2, r5
 800e674:	d420      	bmi.n	800e6b8 <_malloc_r+0xd0>
 800e676:	2a0b      	cmp	r2, #11
 800e678:	d917      	bls.n	800e6aa <_malloc_r+0xc2>
 800e67a:	1961      	adds	r1, r4, r5
 800e67c:	42a3      	cmp	r3, r4
 800e67e:	6025      	str	r5, [r4, #0]
 800e680:	bf18      	it	ne
 800e682:	6059      	strne	r1, [r3, #4]
 800e684:	6863      	ldr	r3, [r4, #4]
 800e686:	bf08      	it	eq
 800e688:	f8c8 1000 	streq.w	r1, [r8]
 800e68c:	5162      	str	r2, [r4, r5]
 800e68e:	604b      	str	r3, [r1, #4]
 800e690:	4630      	mov	r0, r6
 800e692:	f000 f82f 	bl	800e6f4 <__malloc_unlock>
 800e696:	f104 000b 	add.w	r0, r4, #11
 800e69a:	1d23      	adds	r3, r4, #4
 800e69c:	f020 0007 	bic.w	r0, r0, #7
 800e6a0:	1ac2      	subs	r2, r0, r3
 800e6a2:	bf1c      	itt	ne
 800e6a4:	1a1b      	subne	r3, r3, r0
 800e6a6:	50a3      	strne	r3, [r4, r2]
 800e6a8:	e7af      	b.n	800e60a <_malloc_r+0x22>
 800e6aa:	6862      	ldr	r2, [r4, #4]
 800e6ac:	42a3      	cmp	r3, r4
 800e6ae:	bf0c      	ite	eq
 800e6b0:	f8c8 2000 	streq.w	r2, [r8]
 800e6b4:	605a      	strne	r2, [r3, #4]
 800e6b6:	e7eb      	b.n	800e690 <_malloc_r+0xa8>
 800e6b8:	4623      	mov	r3, r4
 800e6ba:	6864      	ldr	r4, [r4, #4]
 800e6bc:	e7ae      	b.n	800e61c <_malloc_r+0x34>
 800e6be:	463c      	mov	r4, r7
 800e6c0:	687f      	ldr	r7, [r7, #4]
 800e6c2:	e7b6      	b.n	800e632 <_malloc_r+0x4a>
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	42a3      	cmp	r3, r4
 800e6ca:	d1fb      	bne.n	800e6c4 <_malloc_r+0xdc>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	6053      	str	r3, [r2, #4]
 800e6d0:	e7de      	b.n	800e690 <_malloc_r+0xa8>
 800e6d2:	230c      	movs	r3, #12
 800e6d4:	6033      	str	r3, [r6, #0]
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	f000 f80c 	bl	800e6f4 <__malloc_unlock>
 800e6dc:	e794      	b.n	800e608 <_malloc_r+0x20>
 800e6de:	6005      	str	r5, [r0, #0]
 800e6e0:	e7d6      	b.n	800e690 <_malloc_r+0xa8>
 800e6e2:	bf00      	nop
 800e6e4:	20001c14 	.word	0x20001c14

0800e6e8 <__malloc_lock>:
 800e6e8:	4801      	ldr	r0, [pc, #4]	@ (800e6f0 <__malloc_lock+0x8>)
 800e6ea:	f7ff bf01 	b.w	800e4f0 <__retarget_lock_acquire_recursive>
 800e6ee:	bf00      	nop
 800e6f0:	20001c0c 	.word	0x20001c0c

0800e6f4 <__malloc_unlock>:
 800e6f4:	4801      	ldr	r0, [pc, #4]	@ (800e6fc <__malloc_unlock+0x8>)
 800e6f6:	f7ff befc 	b.w	800e4f2 <__retarget_lock_release_recursive>
 800e6fa:	bf00      	nop
 800e6fc:	20001c0c 	.word	0x20001c0c

0800e700 <__ssputs_r>:
 800e700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e704:	688e      	ldr	r6, [r1, #8]
 800e706:	461f      	mov	r7, r3
 800e708:	42be      	cmp	r6, r7
 800e70a:	680b      	ldr	r3, [r1, #0]
 800e70c:	4682      	mov	sl, r0
 800e70e:	460c      	mov	r4, r1
 800e710:	4690      	mov	r8, r2
 800e712:	d82d      	bhi.n	800e770 <__ssputs_r+0x70>
 800e714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e718:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e71c:	d026      	beq.n	800e76c <__ssputs_r+0x6c>
 800e71e:	6965      	ldr	r5, [r4, #20]
 800e720:	6909      	ldr	r1, [r1, #16]
 800e722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e726:	eba3 0901 	sub.w	r9, r3, r1
 800e72a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e72e:	1c7b      	adds	r3, r7, #1
 800e730:	444b      	add	r3, r9
 800e732:	106d      	asrs	r5, r5, #1
 800e734:	429d      	cmp	r5, r3
 800e736:	bf38      	it	cc
 800e738:	461d      	movcc	r5, r3
 800e73a:	0553      	lsls	r3, r2, #21
 800e73c:	d527      	bpl.n	800e78e <__ssputs_r+0x8e>
 800e73e:	4629      	mov	r1, r5
 800e740:	f7ff ff52 	bl	800e5e8 <_malloc_r>
 800e744:	4606      	mov	r6, r0
 800e746:	b360      	cbz	r0, 800e7a2 <__ssputs_r+0xa2>
 800e748:	6921      	ldr	r1, [r4, #16]
 800e74a:	464a      	mov	r2, r9
 800e74c:	f7ff fed2 	bl	800e4f4 <memcpy>
 800e750:	89a3      	ldrh	r3, [r4, #12]
 800e752:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e75a:	81a3      	strh	r3, [r4, #12]
 800e75c:	6126      	str	r6, [r4, #16]
 800e75e:	6165      	str	r5, [r4, #20]
 800e760:	444e      	add	r6, r9
 800e762:	eba5 0509 	sub.w	r5, r5, r9
 800e766:	6026      	str	r6, [r4, #0]
 800e768:	60a5      	str	r5, [r4, #8]
 800e76a:	463e      	mov	r6, r7
 800e76c:	42be      	cmp	r6, r7
 800e76e:	d900      	bls.n	800e772 <__ssputs_r+0x72>
 800e770:	463e      	mov	r6, r7
 800e772:	6820      	ldr	r0, [r4, #0]
 800e774:	4632      	mov	r2, r6
 800e776:	4641      	mov	r1, r8
 800e778:	f7ff fe6e 	bl	800e458 <memmove>
 800e77c:	68a3      	ldr	r3, [r4, #8]
 800e77e:	1b9b      	subs	r3, r3, r6
 800e780:	60a3      	str	r3, [r4, #8]
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	4433      	add	r3, r6
 800e786:	6023      	str	r3, [r4, #0]
 800e788:	2000      	movs	r0, #0
 800e78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e78e:	462a      	mov	r2, r5
 800e790:	f000 faaa 	bl	800ece8 <_realloc_r>
 800e794:	4606      	mov	r6, r0
 800e796:	2800      	cmp	r0, #0
 800e798:	d1e0      	bne.n	800e75c <__ssputs_r+0x5c>
 800e79a:	6921      	ldr	r1, [r4, #16]
 800e79c:	4650      	mov	r0, sl
 800e79e:	f7ff feb7 	bl	800e510 <_free_r>
 800e7a2:	230c      	movs	r3, #12
 800e7a4:	f8ca 3000 	str.w	r3, [sl]
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7ae:	81a3      	strh	r3, [r4, #12]
 800e7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b4:	e7e9      	b.n	800e78a <__ssputs_r+0x8a>
	...

0800e7b8 <_svfiprintf_r>:
 800e7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	4698      	mov	r8, r3
 800e7be:	898b      	ldrh	r3, [r1, #12]
 800e7c0:	061b      	lsls	r3, r3, #24
 800e7c2:	b09d      	sub	sp, #116	@ 0x74
 800e7c4:	4607      	mov	r7, r0
 800e7c6:	460d      	mov	r5, r1
 800e7c8:	4614      	mov	r4, r2
 800e7ca:	d510      	bpl.n	800e7ee <_svfiprintf_r+0x36>
 800e7cc:	690b      	ldr	r3, [r1, #16]
 800e7ce:	b973      	cbnz	r3, 800e7ee <_svfiprintf_r+0x36>
 800e7d0:	2140      	movs	r1, #64	@ 0x40
 800e7d2:	f7ff ff09 	bl	800e5e8 <_malloc_r>
 800e7d6:	6028      	str	r0, [r5, #0]
 800e7d8:	6128      	str	r0, [r5, #16]
 800e7da:	b930      	cbnz	r0, 800e7ea <_svfiprintf_r+0x32>
 800e7dc:	230c      	movs	r3, #12
 800e7de:	603b      	str	r3, [r7, #0]
 800e7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e4:	b01d      	add	sp, #116	@ 0x74
 800e7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ea:	2340      	movs	r3, #64	@ 0x40
 800e7ec:	616b      	str	r3, [r5, #20]
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7f2:	2320      	movs	r3, #32
 800e7f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7fc:	2330      	movs	r3, #48	@ 0x30
 800e7fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e99c <_svfiprintf_r+0x1e4>
 800e802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e806:	f04f 0901 	mov.w	r9, #1
 800e80a:	4623      	mov	r3, r4
 800e80c:	469a      	mov	sl, r3
 800e80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e812:	b10a      	cbz	r2, 800e818 <_svfiprintf_r+0x60>
 800e814:	2a25      	cmp	r2, #37	@ 0x25
 800e816:	d1f9      	bne.n	800e80c <_svfiprintf_r+0x54>
 800e818:	ebba 0b04 	subs.w	fp, sl, r4
 800e81c:	d00b      	beq.n	800e836 <_svfiprintf_r+0x7e>
 800e81e:	465b      	mov	r3, fp
 800e820:	4622      	mov	r2, r4
 800e822:	4629      	mov	r1, r5
 800e824:	4638      	mov	r0, r7
 800e826:	f7ff ff6b 	bl	800e700 <__ssputs_r>
 800e82a:	3001      	adds	r0, #1
 800e82c:	f000 80a7 	beq.w	800e97e <_svfiprintf_r+0x1c6>
 800e830:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e832:	445a      	add	r2, fp
 800e834:	9209      	str	r2, [sp, #36]	@ 0x24
 800e836:	f89a 3000 	ldrb.w	r3, [sl]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f000 809f 	beq.w	800e97e <_svfiprintf_r+0x1c6>
 800e840:	2300      	movs	r3, #0
 800e842:	f04f 32ff 	mov.w	r2, #4294967295
 800e846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e84a:	f10a 0a01 	add.w	sl, sl, #1
 800e84e:	9304      	str	r3, [sp, #16]
 800e850:	9307      	str	r3, [sp, #28]
 800e852:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e856:	931a      	str	r3, [sp, #104]	@ 0x68
 800e858:	4654      	mov	r4, sl
 800e85a:	2205      	movs	r2, #5
 800e85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e860:	484e      	ldr	r0, [pc, #312]	@ (800e99c <_svfiprintf_r+0x1e4>)
 800e862:	f7f1 fcbd 	bl	80001e0 <memchr>
 800e866:	9a04      	ldr	r2, [sp, #16]
 800e868:	b9d8      	cbnz	r0, 800e8a2 <_svfiprintf_r+0xea>
 800e86a:	06d0      	lsls	r0, r2, #27
 800e86c:	bf44      	itt	mi
 800e86e:	2320      	movmi	r3, #32
 800e870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e874:	0711      	lsls	r1, r2, #28
 800e876:	bf44      	itt	mi
 800e878:	232b      	movmi	r3, #43	@ 0x2b
 800e87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e87e:	f89a 3000 	ldrb.w	r3, [sl]
 800e882:	2b2a      	cmp	r3, #42	@ 0x2a
 800e884:	d015      	beq.n	800e8b2 <_svfiprintf_r+0xfa>
 800e886:	9a07      	ldr	r2, [sp, #28]
 800e888:	4654      	mov	r4, sl
 800e88a:	2000      	movs	r0, #0
 800e88c:	f04f 0c0a 	mov.w	ip, #10
 800e890:	4621      	mov	r1, r4
 800e892:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e896:	3b30      	subs	r3, #48	@ 0x30
 800e898:	2b09      	cmp	r3, #9
 800e89a:	d94b      	bls.n	800e934 <_svfiprintf_r+0x17c>
 800e89c:	b1b0      	cbz	r0, 800e8cc <_svfiprintf_r+0x114>
 800e89e:	9207      	str	r2, [sp, #28]
 800e8a0:	e014      	b.n	800e8cc <_svfiprintf_r+0x114>
 800e8a2:	eba0 0308 	sub.w	r3, r0, r8
 800e8a6:	fa09 f303 	lsl.w	r3, r9, r3
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	9304      	str	r3, [sp, #16]
 800e8ae:	46a2      	mov	sl, r4
 800e8b0:	e7d2      	b.n	800e858 <_svfiprintf_r+0xa0>
 800e8b2:	9b03      	ldr	r3, [sp, #12]
 800e8b4:	1d19      	adds	r1, r3, #4
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	9103      	str	r1, [sp, #12]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	bfbb      	ittet	lt
 800e8be:	425b      	neglt	r3, r3
 800e8c0:	f042 0202 	orrlt.w	r2, r2, #2
 800e8c4:	9307      	strge	r3, [sp, #28]
 800e8c6:	9307      	strlt	r3, [sp, #28]
 800e8c8:	bfb8      	it	lt
 800e8ca:	9204      	strlt	r2, [sp, #16]
 800e8cc:	7823      	ldrb	r3, [r4, #0]
 800e8ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8d0:	d10a      	bne.n	800e8e8 <_svfiprintf_r+0x130>
 800e8d2:	7863      	ldrb	r3, [r4, #1]
 800e8d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8d6:	d132      	bne.n	800e93e <_svfiprintf_r+0x186>
 800e8d8:	9b03      	ldr	r3, [sp, #12]
 800e8da:	1d1a      	adds	r2, r3, #4
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	9203      	str	r2, [sp, #12]
 800e8e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8e4:	3402      	adds	r4, #2
 800e8e6:	9305      	str	r3, [sp, #20]
 800e8e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e9ac <_svfiprintf_r+0x1f4>
 800e8ec:	7821      	ldrb	r1, [r4, #0]
 800e8ee:	2203      	movs	r2, #3
 800e8f0:	4650      	mov	r0, sl
 800e8f2:	f7f1 fc75 	bl	80001e0 <memchr>
 800e8f6:	b138      	cbz	r0, 800e908 <_svfiprintf_r+0x150>
 800e8f8:	9b04      	ldr	r3, [sp, #16]
 800e8fa:	eba0 000a 	sub.w	r0, r0, sl
 800e8fe:	2240      	movs	r2, #64	@ 0x40
 800e900:	4082      	lsls	r2, r0
 800e902:	4313      	orrs	r3, r2
 800e904:	3401      	adds	r4, #1
 800e906:	9304      	str	r3, [sp, #16]
 800e908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e90c:	4824      	ldr	r0, [pc, #144]	@ (800e9a0 <_svfiprintf_r+0x1e8>)
 800e90e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e912:	2206      	movs	r2, #6
 800e914:	f7f1 fc64 	bl	80001e0 <memchr>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d036      	beq.n	800e98a <_svfiprintf_r+0x1d2>
 800e91c:	4b21      	ldr	r3, [pc, #132]	@ (800e9a4 <_svfiprintf_r+0x1ec>)
 800e91e:	bb1b      	cbnz	r3, 800e968 <_svfiprintf_r+0x1b0>
 800e920:	9b03      	ldr	r3, [sp, #12]
 800e922:	3307      	adds	r3, #7
 800e924:	f023 0307 	bic.w	r3, r3, #7
 800e928:	3308      	adds	r3, #8
 800e92a:	9303      	str	r3, [sp, #12]
 800e92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92e:	4433      	add	r3, r6
 800e930:	9309      	str	r3, [sp, #36]	@ 0x24
 800e932:	e76a      	b.n	800e80a <_svfiprintf_r+0x52>
 800e934:	fb0c 3202 	mla	r2, ip, r2, r3
 800e938:	460c      	mov	r4, r1
 800e93a:	2001      	movs	r0, #1
 800e93c:	e7a8      	b.n	800e890 <_svfiprintf_r+0xd8>
 800e93e:	2300      	movs	r3, #0
 800e940:	3401      	adds	r4, #1
 800e942:	9305      	str	r3, [sp, #20]
 800e944:	4619      	mov	r1, r3
 800e946:	f04f 0c0a 	mov.w	ip, #10
 800e94a:	4620      	mov	r0, r4
 800e94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e950:	3a30      	subs	r2, #48	@ 0x30
 800e952:	2a09      	cmp	r2, #9
 800e954:	d903      	bls.n	800e95e <_svfiprintf_r+0x1a6>
 800e956:	2b00      	cmp	r3, #0
 800e958:	d0c6      	beq.n	800e8e8 <_svfiprintf_r+0x130>
 800e95a:	9105      	str	r1, [sp, #20]
 800e95c:	e7c4      	b.n	800e8e8 <_svfiprintf_r+0x130>
 800e95e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e962:	4604      	mov	r4, r0
 800e964:	2301      	movs	r3, #1
 800e966:	e7f0      	b.n	800e94a <_svfiprintf_r+0x192>
 800e968:	ab03      	add	r3, sp, #12
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	462a      	mov	r2, r5
 800e96e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a8 <_svfiprintf_r+0x1f0>)
 800e970:	a904      	add	r1, sp, #16
 800e972:	4638      	mov	r0, r7
 800e974:	f3af 8000 	nop.w
 800e978:	1c42      	adds	r2, r0, #1
 800e97a:	4606      	mov	r6, r0
 800e97c:	d1d6      	bne.n	800e92c <_svfiprintf_r+0x174>
 800e97e:	89ab      	ldrh	r3, [r5, #12]
 800e980:	065b      	lsls	r3, r3, #25
 800e982:	f53f af2d 	bmi.w	800e7e0 <_svfiprintf_r+0x28>
 800e986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e988:	e72c      	b.n	800e7e4 <_svfiprintf_r+0x2c>
 800e98a:	ab03      	add	r3, sp, #12
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	462a      	mov	r2, r5
 800e990:	4b05      	ldr	r3, [pc, #20]	@ (800e9a8 <_svfiprintf_r+0x1f0>)
 800e992:	a904      	add	r1, sp, #16
 800e994:	4638      	mov	r0, r7
 800e996:	f000 f879 	bl	800ea8c <_printf_i>
 800e99a:	e7ed      	b.n	800e978 <_svfiprintf_r+0x1c0>
 800e99c:	0800f410 	.word	0x0800f410
 800e9a0:	0800f41a 	.word	0x0800f41a
 800e9a4:	00000000 	.word	0x00000000
 800e9a8:	0800e701 	.word	0x0800e701
 800e9ac:	0800f416 	.word	0x0800f416

0800e9b0 <_printf_common>:
 800e9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b4:	4616      	mov	r6, r2
 800e9b6:	4698      	mov	r8, r3
 800e9b8:	688a      	ldr	r2, [r1, #8]
 800e9ba:	690b      	ldr	r3, [r1, #16]
 800e9bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	bfb8      	it	lt
 800e9c4:	4613      	movlt	r3, r2
 800e9c6:	6033      	str	r3, [r6, #0]
 800e9c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e9cc:	4607      	mov	r7, r0
 800e9ce:	460c      	mov	r4, r1
 800e9d0:	b10a      	cbz	r2, 800e9d6 <_printf_common+0x26>
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	6033      	str	r3, [r6, #0]
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	0699      	lsls	r1, r3, #26
 800e9da:	bf42      	ittt	mi
 800e9dc:	6833      	ldrmi	r3, [r6, #0]
 800e9de:	3302      	addmi	r3, #2
 800e9e0:	6033      	strmi	r3, [r6, #0]
 800e9e2:	6825      	ldr	r5, [r4, #0]
 800e9e4:	f015 0506 	ands.w	r5, r5, #6
 800e9e8:	d106      	bne.n	800e9f8 <_printf_common+0x48>
 800e9ea:	f104 0a19 	add.w	sl, r4, #25
 800e9ee:	68e3      	ldr	r3, [r4, #12]
 800e9f0:	6832      	ldr	r2, [r6, #0]
 800e9f2:	1a9b      	subs	r3, r3, r2
 800e9f4:	42ab      	cmp	r3, r5
 800e9f6:	dc26      	bgt.n	800ea46 <_printf_common+0x96>
 800e9f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e9fc:	6822      	ldr	r2, [r4, #0]
 800e9fe:	3b00      	subs	r3, #0
 800ea00:	bf18      	it	ne
 800ea02:	2301      	movne	r3, #1
 800ea04:	0692      	lsls	r2, r2, #26
 800ea06:	d42b      	bmi.n	800ea60 <_printf_common+0xb0>
 800ea08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea0c:	4641      	mov	r1, r8
 800ea0e:	4638      	mov	r0, r7
 800ea10:	47c8      	blx	r9
 800ea12:	3001      	adds	r0, #1
 800ea14:	d01e      	beq.n	800ea54 <_printf_common+0xa4>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	6922      	ldr	r2, [r4, #16]
 800ea1a:	f003 0306 	and.w	r3, r3, #6
 800ea1e:	2b04      	cmp	r3, #4
 800ea20:	bf02      	ittt	eq
 800ea22:	68e5      	ldreq	r5, [r4, #12]
 800ea24:	6833      	ldreq	r3, [r6, #0]
 800ea26:	1aed      	subeq	r5, r5, r3
 800ea28:	68a3      	ldr	r3, [r4, #8]
 800ea2a:	bf0c      	ite	eq
 800ea2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea30:	2500      	movne	r5, #0
 800ea32:	4293      	cmp	r3, r2
 800ea34:	bfc4      	itt	gt
 800ea36:	1a9b      	subgt	r3, r3, r2
 800ea38:	18ed      	addgt	r5, r5, r3
 800ea3a:	2600      	movs	r6, #0
 800ea3c:	341a      	adds	r4, #26
 800ea3e:	42b5      	cmp	r5, r6
 800ea40:	d11a      	bne.n	800ea78 <_printf_common+0xc8>
 800ea42:	2000      	movs	r0, #0
 800ea44:	e008      	b.n	800ea58 <_printf_common+0xa8>
 800ea46:	2301      	movs	r3, #1
 800ea48:	4652      	mov	r2, sl
 800ea4a:	4641      	mov	r1, r8
 800ea4c:	4638      	mov	r0, r7
 800ea4e:	47c8      	blx	r9
 800ea50:	3001      	adds	r0, #1
 800ea52:	d103      	bne.n	800ea5c <_printf_common+0xac>
 800ea54:	f04f 30ff 	mov.w	r0, #4294967295
 800ea58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea5c:	3501      	adds	r5, #1
 800ea5e:	e7c6      	b.n	800e9ee <_printf_common+0x3e>
 800ea60:	18e1      	adds	r1, r4, r3
 800ea62:	1c5a      	adds	r2, r3, #1
 800ea64:	2030      	movs	r0, #48	@ 0x30
 800ea66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea6a:	4422      	add	r2, r4
 800ea6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea74:	3302      	adds	r3, #2
 800ea76:	e7c7      	b.n	800ea08 <_printf_common+0x58>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	4622      	mov	r2, r4
 800ea7c:	4641      	mov	r1, r8
 800ea7e:	4638      	mov	r0, r7
 800ea80:	47c8      	blx	r9
 800ea82:	3001      	adds	r0, #1
 800ea84:	d0e6      	beq.n	800ea54 <_printf_common+0xa4>
 800ea86:	3601      	adds	r6, #1
 800ea88:	e7d9      	b.n	800ea3e <_printf_common+0x8e>
	...

0800ea8c <_printf_i>:
 800ea8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea90:	7e0f      	ldrb	r7, [r1, #24]
 800ea92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea94:	2f78      	cmp	r7, #120	@ 0x78
 800ea96:	4691      	mov	r9, r2
 800ea98:	4680      	mov	r8, r0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	469a      	mov	sl, r3
 800ea9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eaa2:	d807      	bhi.n	800eab4 <_printf_i+0x28>
 800eaa4:	2f62      	cmp	r7, #98	@ 0x62
 800eaa6:	d80a      	bhi.n	800eabe <_printf_i+0x32>
 800eaa8:	2f00      	cmp	r7, #0
 800eaaa:	f000 80d1 	beq.w	800ec50 <_printf_i+0x1c4>
 800eaae:	2f58      	cmp	r7, #88	@ 0x58
 800eab0:	f000 80b8 	beq.w	800ec24 <_printf_i+0x198>
 800eab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eabc:	e03a      	b.n	800eb34 <_printf_i+0xa8>
 800eabe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eac2:	2b15      	cmp	r3, #21
 800eac4:	d8f6      	bhi.n	800eab4 <_printf_i+0x28>
 800eac6:	a101      	add	r1, pc, #4	@ (adr r1, 800eacc <_printf_i+0x40>)
 800eac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eacc:	0800eb25 	.word	0x0800eb25
 800ead0:	0800eb39 	.word	0x0800eb39
 800ead4:	0800eab5 	.word	0x0800eab5
 800ead8:	0800eab5 	.word	0x0800eab5
 800eadc:	0800eab5 	.word	0x0800eab5
 800eae0:	0800eab5 	.word	0x0800eab5
 800eae4:	0800eb39 	.word	0x0800eb39
 800eae8:	0800eab5 	.word	0x0800eab5
 800eaec:	0800eab5 	.word	0x0800eab5
 800eaf0:	0800eab5 	.word	0x0800eab5
 800eaf4:	0800eab5 	.word	0x0800eab5
 800eaf8:	0800ec37 	.word	0x0800ec37
 800eafc:	0800eb63 	.word	0x0800eb63
 800eb00:	0800ebf1 	.word	0x0800ebf1
 800eb04:	0800eab5 	.word	0x0800eab5
 800eb08:	0800eab5 	.word	0x0800eab5
 800eb0c:	0800ec59 	.word	0x0800ec59
 800eb10:	0800eab5 	.word	0x0800eab5
 800eb14:	0800eb63 	.word	0x0800eb63
 800eb18:	0800eab5 	.word	0x0800eab5
 800eb1c:	0800eab5 	.word	0x0800eab5
 800eb20:	0800ebf9 	.word	0x0800ebf9
 800eb24:	6833      	ldr	r3, [r6, #0]
 800eb26:	1d1a      	adds	r2, r3, #4
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	6032      	str	r2, [r6, #0]
 800eb2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb34:	2301      	movs	r3, #1
 800eb36:	e09c      	b.n	800ec72 <_printf_i+0x1e6>
 800eb38:	6833      	ldr	r3, [r6, #0]
 800eb3a:	6820      	ldr	r0, [r4, #0]
 800eb3c:	1d19      	adds	r1, r3, #4
 800eb3e:	6031      	str	r1, [r6, #0]
 800eb40:	0606      	lsls	r6, r0, #24
 800eb42:	d501      	bpl.n	800eb48 <_printf_i+0xbc>
 800eb44:	681d      	ldr	r5, [r3, #0]
 800eb46:	e003      	b.n	800eb50 <_printf_i+0xc4>
 800eb48:	0645      	lsls	r5, r0, #25
 800eb4a:	d5fb      	bpl.n	800eb44 <_printf_i+0xb8>
 800eb4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb50:	2d00      	cmp	r5, #0
 800eb52:	da03      	bge.n	800eb5c <_printf_i+0xd0>
 800eb54:	232d      	movs	r3, #45	@ 0x2d
 800eb56:	426d      	negs	r5, r5
 800eb58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb5c:	4858      	ldr	r0, [pc, #352]	@ (800ecc0 <_printf_i+0x234>)
 800eb5e:	230a      	movs	r3, #10
 800eb60:	e011      	b.n	800eb86 <_printf_i+0xfa>
 800eb62:	6821      	ldr	r1, [r4, #0]
 800eb64:	6833      	ldr	r3, [r6, #0]
 800eb66:	0608      	lsls	r0, r1, #24
 800eb68:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb6c:	d402      	bmi.n	800eb74 <_printf_i+0xe8>
 800eb6e:	0649      	lsls	r1, r1, #25
 800eb70:	bf48      	it	mi
 800eb72:	b2ad      	uxthmi	r5, r5
 800eb74:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb76:	4852      	ldr	r0, [pc, #328]	@ (800ecc0 <_printf_i+0x234>)
 800eb78:	6033      	str	r3, [r6, #0]
 800eb7a:	bf14      	ite	ne
 800eb7c:	230a      	movne	r3, #10
 800eb7e:	2308      	moveq	r3, #8
 800eb80:	2100      	movs	r1, #0
 800eb82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eb86:	6866      	ldr	r6, [r4, #4]
 800eb88:	60a6      	str	r6, [r4, #8]
 800eb8a:	2e00      	cmp	r6, #0
 800eb8c:	db05      	blt.n	800eb9a <_printf_i+0x10e>
 800eb8e:	6821      	ldr	r1, [r4, #0]
 800eb90:	432e      	orrs	r6, r5
 800eb92:	f021 0104 	bic.w	r1, r1, #4
 800eb96:	6021      	str	r1, [r4, #0]
 800eb98:	d04b      	beq.n	800ec32 <_printf_i+0x1a6>
 800eb9a:	4616      	mov	r6, r2
 800eb9c:	fbb5 f1f3 	udiv	r1, r5, r3
 800eba0:	fb03 5711 	mls	r7, r3, r1, r5
 800eba4:	5dc7      	ldrb	r7, [r0, r7]
 800eba6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebaa:	462f      	mov	r7, r5
 800ebac:	42bb      	cmp	r3, r7
 800ebae:	460d      	mov	r5, r1
 800ebb0:	d9f4      	bls.n	800eb9c <_printf_i+0x110>
 800ebb2:	2b08      	cmp	r3, #8
 800ebb4:	d10b      	bne.n	800ebce <_printf_i+0x142>
 800ebb6:	6823      	ldr	r3, [r4, #0]
 800ebb8:	07df      	lsls	r7, r3, #31
 800ebba:	d508      	bpl.n	800ebce <_printf_i+0x142>
 800ebbc:	6923      	ldr	r3, [r4, #16]
 800ebbe:	6861      	ldr	r1, [r4, #4]
 800ebc0:	4299      	cmp	r1, r3
 800ebc2:	bfde      	ittt	le
 800ebc4:	2330      	movle	r3, #48	@ 0x30
 800ebc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ebca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ebce:	1b92      	subs	r2, r2, r6
 800ebd0:	6122      	str	r2, [r4, #16]
 800ebd2:	f8cd a000 	str.w	sl, [sp]
 800ebd6:	464b      	mov	r3, r9
 800ebd8:	aa03      	add	r2, sp, #12
 800ebda:	4621      	mov	r1, r4
 800ebdc:	4640      	mov	r0, r8
 800ebde:	f7ff fee7 	bl	800e9b0 <_printf_common>
 800ebe2:	3001      	adds	r0, #1
 800ebe4:	d14a      	bne.n	800ec7c <_printf_i+0x1f0>
 800ebe6:	f04f 30ff 	mov.w	r0, #4294967295
 800ebea:	b004      	add	sp, #16
 800ebec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf0:	6823      	ldr	r3, [r4, #0]
 800ebf2:	f043 0320 	orr.w	r3, r3, #32
 800ebf6:	6023      	str	r3, [r4, #0]
 800ebf8:	4832      	ldr	r0, [pc, #200]	@ (800ecc4 <_printf_i+0x238>)
 800ebfa:	2778      	movs	r7, #120	@ 0x78
 800ebfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec00:	6823      	ldr	r3, [r4, #0]
 800ec02:	6831      	ldr	r1, [r6, #0]
 800ec04:	061f      	lsls	r7, r3, #24
 800ec06:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec0a:	d402      	bmi.n	800ec12 <_printf_i+0x186>
 800ec0c:	065f      	lsls	r7, r3, #25
 800ec0e:	bf48      	it	mi
 800ec10:	b2ad      	uxthmi	r5, r5
 800ec12:	6031      	str	r1, [r6, #0]
 800ec14:	07d9      	lsls	r1, r3, #31
 800ec16:	bf44      	itt	mi
 800ec18:	f043 0320 	orrmi.w	r3, r3, #32
 800ec1c:	6023      	strmi	r3, [r4, #0]
 800ec1e:	b11d      	cbz	r5, 800ec28 <_printf_i+0x19c>
 800ec20:	2310      	movs	r3, #16
 800ec22:	e7ad      	b.n	800eb80 <_printf_i+0xf4>
 800ec24:	4826      	ldr	r0, [pc, #152]	@ (800ecc0 <_printf_i+0x234>)
 800ec26:	e7e9      	b.n	800ebfc <_printf_i+0x170>
 800ec28:	6823      	ldr	r3, [r4, #0]
 800ec2a:	f023 0320 	bic.w	r3, r3, #32
 800ec2e:	6023      	str	r3, [r4, #0]
 800ec30:	e7f6      	b.n	800ec20 <_printf_i+0x194>
 800ec32:	4616      	mov	r6, r2
 800ec34:	e7bd      	b.n	800ebb2 <_printf_i+0x126>
 800ec36:	6833      	ldr	r3, [r6, #0]
 800ec38:	6825      	ldr	r5, [r4, #0]
 800ec3a:	6961      	ldr	r1, [r4, #20]
 800ec3c:	1d18      	adds	r0, r3, #4
 800ec3e:	6030      	str	r0, [r6, #0]
 800ec40:	062e      	lsls	r6, r5, #24
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	d501      	bpl.n	800ec4a <_printf_i+0x1be>
 800ec46:	6019      	str	r1, [r3, #0]
 800ec48:	e002      	b.n	800ec50 <_printf_i+0x1c4>
 800ec4a:	0668      	lsls	r0, r5, #25
 800ec4c:	d5fb      	bpl.n	800ec46 <_printf_i+0x1ba>
 800ec4e:	8019      	strh	r1, [r3, #0]
 800ec50:	2300      	movs	r3, #0
 800ec52:	6123      	str	r3, [r4, #16]
 800ec54:	4616      	mov	r6, r2
 800ec56:	e7bc      	b.n	800ebd2 <_printf_i+0x146>
 800ec58:	6833      	ldr	r3, [r6, #0]
 800ec5a:	1d1a      	adds	r2, r3, #4
 800ec5c:	6032      	str	r2, [r6, #0]
 800ec5e:	681e      	ldr	r6, [r3, #0]
 800ec60:	6862      	ldr	r2, [r4, #4]
 800ec62:	2100      	movs	r1, #0
 800ec64:	4630      	mov	r0, r6
 800ec66:	f7f1 fabb 	bl	80001e0 <memchr>
 800ec6a:	b108      	cbz	r0, 800ec70 <_printf_i+0x1e4>
 800ec6c:	1b80      	subs	r0, r0, r6
 800ec6e:	6060      	str	r0, [r4, #4]
 800ec70:	6863      	ldr	r3, [r4, #4]
 800ec72:	6123      	str	r3, [r4, #16]
 800ec74:	2300      	movs	r3, #0
 800ec76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec7a:	e7aa      	b.n	800ebd2 <_printf_i+0x146>
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	4632      	mov	r2, r6
 800ec80:	4649      	mov	r1, r9
 800ec82:	4640      	mov	r0, r8
 800ec84:	47d0      	blx	sl
 800ec86:	3001      	adds	r0, #1
 800ec88:	d0ad      	beq.n	800ebe6 <_printf_i+0x15a>
 800ec8a:	6823      	ldr	r3, [r4, #0]
 800ec8c:	079b      	lsls	r3, r3, #30
 800ec8e:	d413      	bmi.n	800ecb8 <_printf_i+0x22c>
 800ec90:	68e0      	ldr	r0, [r4, #12]
 800ec92:	9b03      	ldr	r3, [sp, #12]
 800ec94:	4298      	cmp	r0, r3
 800ec96:	bfb8      	it	lt
 800ec98:	4618      	movlt	r0, r3
 800ec9a:	e7a6      	b.n	800ebea <_printf_i+0x15e>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	4632      	mov	r2, r6
 800eca0:	4649      	mov	r1, r9
 800eca2:	4640      	mov	r0, r8
 800eca4:	47d0      	blx	sl
 800eca6:	3001      	adds	r0, #1
 800eca8:	d09d      	beq.n	800ebe6 <_printf_i+0x15a>
 800ecaa:	3501      	adds	r5, #1
 800ecac:	68e3      	ldr	r3, [r4, #12]
 800ecae:	9903      	ldr	r1, [sp, #12]
 800ecb0:	1a5b      	subs	r3, r3, r1
 800ecb2:	42ab      	cmp	r3, r5
 800ecb4:	dcf2      	bgt.n	800ec9c <_printf_i+0x210>
 800ecb6:	e7eb      	b.n	800ec90 <_printf_i+0x204>
 800ecb8:	2500      	movs	r5, #0
 800ecba:	f104 0619 	add.w	r6, r4, #25
 800ecbe:	e7f5      	b.n	800ecac <_printf_i+0x220>
 800ecc0:	0800f421 	.word	0x0800f421
 800ecc4:	0800f432 	.word	0x0800f432

0800ecc8 <_sbrk_r>:
 800ecc8:	b538      	push	{r3, r4, r5, lr}
 800ecca:	4d06      	ldr	r5, [pc, #24]	@ (800ece4 <_sbrk_r+0x1c>)
 800eccc:	2300      	movs	r3, #0
 800ecce:	4604      	mov	r4, r0
 800ecd0:	4608      	mov	r0, r1
 800ecd2:	602b      	str	r3, [r5, #0]
 800ecd4:	f7f4 f9a4 	bl	8003020 <_sbrk>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d102      	bne.n	800ece2 <_sbrk_r+0x1a>
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	b103      	cbz	r3, 800ece2 <_sbrk_r+0x1a>
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	bd38      	pop	{r3, r4, r5, pc}
 800ece4:	20001c08 	.word	0x20001c08

0800ece8 <_realloc_r>:
 800ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecec:	4607      	mov	r7, r0
 800ecee:	4614      	mov	r4, r2
 800ecf0:	460d      	mov	r5, r1
 800ecf2:	b921      	cbnz	r1, 800ecfe <_realloc_r+0x16>
 800ecf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	4611      	mov	r1, r2
 800ecfa:	f7ff bc75 	b.w	800e5e8 <_malloc_r>
 800ecfe:	b92a      	cbnz	r2, 800ed0c <_realloc_r+0x24>
 800ed00:	f7ff fc06 	bl	800e510 <_free_r>
 800ed04:	4625      	mov	r5, r4
 800ed06:	4628      	mov	r0, r5
 800ed08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0c:	f000 f81a 	bl	800ed44 <_malloc_usable_size_r>
 800ed10:	4284      	cmp	r4, r0
 800ed12:	4606      	mov	r6, r0
 800ed14:	d802      	bhi.n	800ed1c <_realloc_r+0x34>
 800ed16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed1a:	d8f4      	bhi.n	800ed06 <_realloc_r+0x1e>
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	4638      	mov	r0, r7
 800ed20:	f7ff fc62 	bl	800e5e8 <_malloc_r>
 800ed24:	4680      	mov	r8, r0
 800ed26:	b908      	cbnz	r0, 800ed2c <_realloc_r+0x44>
 800ed28:	4645      	mov	r5, r8
 800ed2a:	e7ec      	b.n	800ed06 <_realloc_r+0x1e>
 800ed2c:	42b4      	cmp	r4, r6
 800ed2e:	4622      	mov	r2, r4
 800ed30:	4629      	mov	r1, r5
 800ed32:	bf28      	it	cs
 800ed34:	4632      	movcs	r2, r6
 800ed36:	f7ff fbdd 	bl	800e4f4 <memcpy>
 800ed3a:	4629      	mov	r1, r5
 800ed3c:	4638      	mov	r0, r7
 800ed3e:	f7ff fbe7 	bl	800e510 <_free_r>
 800ed42:	e7f1      	b.n	800ed28 <_realloc_r+0x40>

0800ed44 <_malloc_usable_size_r>:
 800ed44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed48:	1f18      	subs	r0, r3, #4
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	bfbc      	itt	lt
 800ed4e:	580b      	ldrlt	r3, [r1, r0]
 800ed50:	18c0      	addlt	r0, r0, r3
 800ed52:	4770      	bx	lr

0800ed54 <_init>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	bf00      	nop
 800ed58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5a:	bc08      	pop	{r3}
 800ed5c:	469e      	mov	lr, r3
 800ed5e:	4770      	bx	lr

0800ed60 <_fini>:
 800ed60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed62:	bf00      	nop
 800ed64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed66:	bc08      	pop	{r3}
 800ed68:	469e      	mov	lr, r3
 800ed6a:	4770      	bx	lr
