
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800ebd0  0800ebd0  0000fbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2a8  0800f2a8  00011180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f2a8  0800f2a8  000102a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2b0  0800f2b0  00011180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2b0  0800f2b0  000102b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f2b4  0800f2b4  000102b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0800f2b8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f4  20000180  0800f438  00011180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b74  0800f438  00011b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aedc  00000000  00000000  000111b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004432  00000000  00000000  0002c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  000304c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001be09  00000000  00000000  00031d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001fd12  00000000  00000000  0004db19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009ffe5  00000000  00000000  0006d82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010d810  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000012ab  00000000  00000000  0010d853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c78  00000000  00000000  0010eb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00115778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ebb8 	.word	0x0800ebb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800ebb8 	.word	0x0800ebb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e00a      	b.n	8000dbc <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	ddf1      	ble.n	8000da6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200003a4 	.word	0x200003a4
 8000dd4:	200003b4 	.word	0x200003b4

08000dd8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200005e1 	.word	0x200005e1

08000df8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200005e2 	.word	0x200005e2

08000e18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d116      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e34:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b28      	cmp	r3, #40	@ 0x28
 8000e3c:	d107      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000e44:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e46:	7813      	ldrb	r3, [r2, #0]
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4906      	ldr	r1, [pc, #24]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e54:	f002 fa3a 	bl	80032cc <HAL_ADC_Start_DMA>
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40010000 	.word	0x40010000
 8000e64:	200003a0 	.word	0x200003a0
 8000e68:	200005e0 	.word	0x200005e0
 8000e6c:	200003a4 	.word	0x200003a4
 8000e70:	2000019c 	.word	0x2000019c

08000e74 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e018      	b.n	8000eb6 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	441a      	add	r2, r3
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <USBRxData+0x58>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <USBRxData+0x58>)
 8000e90:	795b      	ldrb	r3, [r3, #5]
 8000e92:	1c58      	adds	r0, r3, #1
 8000e94:	b2c4      	uxtb	r4, r0
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <USBRxData+0x58>)
 8000e98:	7144      	strb	r4, [r0, #5]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <USBRxData+0x58>)
 8000ea2:	795a      	ldrb	r2, [r3, #5]
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <USBRxData+0x58>)
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <USBRxData+0x58>)
 8000eae:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8e2      	bhi.n	8000e84 <USBRxData+0x10>
	}

}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc90      	pop	{r4, r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200003d0 	.word	0x200003d0

08000ed0 <USBTask>:

void USBTask() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0c2      	sub	sp, #264	@ 0x108
 8000ed4:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000ed6:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <USBTask+0x90>)
 8000ed8:	791a      	ldrb	r2, [r3, #4]
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <USBTask+0x90>)
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d039      	beq.n	8000f56 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000ee2:	481f      	ldr	r0, [pc, #124]	@ (8000f60 <USBTask+0x90>)
 8000ee4:	f001 fea8 	bl	8002c38 <unerPrtcl_DecodeHeader>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000eee:	491d      	ldr	r1, [pc, #116]	@ (8000f64 <USBTask+0x94>)
 8000ef0:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <USBTask+0x90>)
 8000ef2:	f000 f839 	bl	8000f68 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000efc:	e01d      	b.n	8000f3a <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <USBTask+0x94>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <USBTask+0x94>)
 8000f04:	7a1b      	ldrb	r3, [r3, #8]
 8000f06:	1c59      	adds	r1, r3, #1
 8000f08:	b2c8      	uxtb	r0, r1
 8000f0a:	4916      	ldr	r1, [pc, #88]	@ (8000f64 <USBTask+0x94>)
 8000f0c:	7208      	strb	r0, [r1, #8]
 8000f0e:	441a      	add	r2, r3
 8000f10:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f14:	7811      	ldrb	r1, [r2, #0]
 8000f16:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000f1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000f1e:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <USBTask+0x94>)
 8000f22:	7a1a      	ldrb	r2, [r3, #8]
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <USBTask+0x94>)
 8000f26:	799b      	ldrb	r3, [r3, #6]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <USBTask+0x94>)
 8000f2e:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000f30:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <USBTask+0x94>)
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3db      	bcc.n	8000efe <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <USBTask+0x94>)
 8000f48:	79db      	ldrb	r3, [r3, #7]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00c fd1b 	bl	800d98c <CDC_Transmit_FS>
	}

}
 8000f56:	bf00      	nop
 8000f58:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200003d0 	.word	0x200003d0
 8000f64:	200003c4 	.word	0x200003c4

08000f68 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	7a12      	ldrb	r2, [r2, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2bf2      	cmp	r3, #242	@ 0xf2
 8000f80:	d027      	beq.n	8000fd2 <decodeCommand+0x6a>
 8000f82:	2bf2      	cmp	r3, #242	@ 0xf2
 8000f84:	f300 809d 	bgt.w	80010c2 <decodeCommand+0x15a>
 8000f88:	2bf0      	cmp	r3, #240	@ 0xf0
 8000f8a:	d002      	beq.n	8000f92 <decodeCommand+0x2a>
 8000f8c:	2bf1      	cmp	r3, #241	@ 0xf1
 8000f8e:	d010      	beq.n	8000fb2 <decodeCommand+0x4a>
 8000f90:	e097      	b.n	80010c2 <decodeCommand+0x15a>
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000f92:	2202      	movs	r2, #2
 8000f94:	21f0      	movs	r1, #240	@ 0xf0
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f001 fd2c 	bl	80029f4 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000f9c:	210d      	movs	r1, #13
 8000f9e:	6838      	ldr	r0, [r7, #0]
 8000fa0:	f001 fdd7 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	7a5b      	ldrb	r3, [r3, #9]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f001 fdd1 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		break;
 8000fb0:	e09d      	b.n	80010ee <decodeCommand+0x186>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000fb2:	220d      	movs	r2, #13
 8000fb4:	21f1      	movs	r1, #241	@ 0xf1
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f001 fd1c 	bl	80029f4 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000fbc:	494e      	ldr	r1, [pc, #312]	@ (80010f8 <decodeCommand+0x190>)
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f001 fdf5 	bl	8002bae <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	7a5b      	ldrb	r3, [r3, #9]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f001 fdc1 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		break;
 8000fd0:	e08d      	b.n	80010ee <decodeCommand+0x186>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000fd2:	220d      	movs	r2, #13
 8000fd4:	21f2      	movs	r1, #242	@ 0xf2
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f001 fd0c 	bl	80029f4 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = ax;
 8000fdc:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <decodeCommand+0x194>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b46      	ldr	r3, [pc, #280]	@ (8001100 <decodeCommand+0x198>)
 8000fe6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fe8:	4b45      	ldr	r3, [pc, #276]	@ (8001100 <decodeCommand+0x198>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f001 fdaf 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000ff4:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <decodeCommand+0x198>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f001 fda9 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = ay;
 8001000:	4b40      	ldr	r3, [pc, #256]	@ (8001104 <decodeCommand+0x19c>)
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b3d      	ldr	r3, [pc, #244]	@ (8001100 <decodeCommand+0x198>)
 800100a:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800100c:	4b3c      	ldr	r3, [pc, #240]	@ (8001100 <decodeCommand+0x198>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f001 fd9d 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001018:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <decodeCommand+0x198>)
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	4619      	mov	r1, r3
 800101e:	6838      	ldr	r0, [r7, #0]
 8001020:	f001 fd97 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = az;
 8001024:	4b38      	ldr	r3, [pc, #224]	@ (8001108 <decodeCommand+0x1a0>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <decodeCommand+0x198>)
 800102e:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001030:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <decodeCommand+0x198>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f001 fd8b 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800103c:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <decodeCommand+0x198>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	4619      	mov	r1, r3
 8001042:	6838      	ldr	r0, [r7, #0]
 8001044:	f001 fd85 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gx;
 8001048:	4b30      	ldr	r3, [pc, #192]	@ (800110c <decodeCommand+0x1a4>)
 800104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <decodeCommand+0x198>)
 8001052:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <decodeCommand+0x198>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f001 fd79 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <decodeCommand+0x198>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	4619      	mov	r1, r3
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f001 fd73 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gy;
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <decodeCommand+0x1a8>)
 800106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <decodeCommand+0x198>)
 8001076:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <decodeCommand+0x198>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f001 fd67 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <decodeCommand+0x198>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	4619      	mov	r1, r3
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f001 fd61 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gz;
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <decodeCommand+0x1ac>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <decodeCommand+0x198>)
 800109a:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <decodeCommand+0x198>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f001 fd55 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <decodeCommand+0x198>)
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	4619      	mov	r1, r3
 80010ae:	6838      	ldr	r0, [r7, #0]
 80010b0:	f001 fd4f 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	7a5b      	ldrb	r3, [r3, #9]
 80010b8:	4619      	mov	r1, r3
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f001 fd49 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		break;
 80010c0:	e015      	b.n	80010ee <decodeCommand+0x186>
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	7a12      	ldrb	r2, [r2, #8]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4619      	mov	r1, r3
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	f001 fc8e 	bl	80029f4 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 80010d8:	21ff      	movs	r1, #255	@ 0xff
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f001 fd39 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7a5b      	ldrb	r3, [r3, #9]
 80010e4:	4619      	mov	r1, r3
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f001 fd33 	bl	8002b52 <unerPrtcl_PutByteOnTx>
		break;
 80010ec:	bf00      	nop
	}
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	0800f244 	.word	0x0800f244
 80010fc:	200005e4 	.word	0x200005e4
 8001100:	200005dc 	.word	0x200005dc
 8001104:	200005e6 	.word	0x200005e6
 8001108:	200005e8 	.word	0x200005e8
 800110c:	200005ea 	.word	0x200005ea
 8001110:	200005ec 	.word	0x200005ec
 8001114:	200005ee 	.word	0x200005ee

08001118 <do10ms>:

void do10ms() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	if (IS10MS) {
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <do10ms+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02a      	beq.n	8001180 <do10ms+0x68>
		IS10MS = FALSE;
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <do10ms+0x6c>)
 800112c:	7813      	ldrb	r3, [r2, #0]
 800112e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001132:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <do10ms+0x70>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <do10ms+0x70>)
 800113e:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <do10ms+0x74>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <do10ms+0x74>)
 800114a:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <do10ms+0x74>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <do10ms+0x4c>
			tmo20ms = 2;
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <do10ms+0x74>)
 8001156:	2202      	movs	r2, #2
 8001158:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <do10ms+0x6c>)
 800115c:	7813      	ldrb	r3, [r2, #0]
 800115e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001162:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <do10ms+0x70>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d109      	bne.n	8001180 <do10ms+0x68>
			tmo100ms = 10;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <do10ms+0x70>)
 800116e:	220a      	movs	r2, #10
 8001170:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 8001172:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <do10ms+0x6c>)
 8001174:	7813      	ldrb	r3, [r2, #0]
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800117c:	f000 f808 	bl	8001190 <heartBeatTask>
		}
	}
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200005e0 	.word	0x200005e0
 8001188:	20000028 	.word	0x20000028
 800118c:	20000029 	.word	0x20000029

08001190 <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <heartBeatTask+0x44>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	43db      	mvns	r3, r3
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <heartBeatTask+0x48>)
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	4611      	mov	r1, r2
 80011a0:	2201      	movs	r2, #1
 80011a2:	408a      	lsls	r2, r1
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80011aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ae:	480b      	ldr	r0, [pc, #44]	@ (80011dc <heartBeatTask+0x4c>)
 80011b0:	f003 fab3 	bl	800471a <HAL_GPIO_TogglePin>

	times++;
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <heartBeatTask+0x48>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <heartBeatTask+0x48>)
 80011be:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <heartBeatTask+0x48>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <heartBeatTask+0x48>)
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000000 	.word	0x20000000
 80011d8:	200005f0 	.word	0x200005f0
 80011dc:	40020800 	.word	0x40020800

080011e0 <displayTask>:

void displayTask() {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
	static uint8_t init = TRUE;
	uint8_t y = 0, x = 2;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	2302      	movs	r3, #2
 80011ec:	73bb      	strb	r3, [r7, #14]
	if (IS100MS) {
 80011ee:	4b65      	ldr	r3, [pc, #404]	@ (8001384 <displayTask+0x1a4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a4 	beq.w	8001346 <displayTask+0x166>
		ONDISPLAY=TRUE;
 80011fe:	4a61      	ldr	r2, [pc, #388]	@ (8001384 <displayTask+0x1a4>)
 8001200:	7813      	ldrb	r3, [r2, #0]
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	7013      	strb	r3, [r2, #0]
		IS100MS=FALSE;
 8001208:	4a5e      	ldr	r2, [pc, #376]	@ (8001384 <displayTask+0x1a4>)
 800120a:	7813      	ldrb	r3, [r2, #0]
 800120c:	f023 0320 	bic.w	r3, r3, #32
 8001210:	7013      	strb	r3, [r2, #0]
		if (init) {
 8001212:	4b5d      	ldr	r3, [pc, #372]	@ (8001388 <displayTask+0x1a8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <displayTask+0x48>
			init = FALSE;
 800121a:	4b5b      	ldr	r3, [pc, #364]	@ (8001388 <displayTask+0x1a8>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
			ssd1306_Fill(White);
 8001220:	2001      	movs	r0, #1
 8001222:	f000 ff69 	bl	80020f8 <ssd1306_Fill>
 8001226:	e08e      	b.n	8001346 <displayTask+0x166>
			//ssd1306_DrawBitmap(0, 0, chat_gpt_128x64, 128, 64, White);
		} else {
			char data[8];
			ssd1306_SetCursor(x, y);
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f001 f90e 	bl	8002450 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "ax:%u", ax);
 8001234:	4b55      	ldr	r3, [pc, #340]	@ (800138c <displayTask+0x1ac>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	1d38      	adds	r0, r7, #4
 800123c:	4a54      	ldr	r2, [pc, #336]	@ (8001390 <displayTask+0x1b0>)
 800123e:	2108      	movs	r1, #8
 8001240:	f00d f806 	bl	800e250 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 8001244:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <displayTask+0x1b4>)
 8001246:	1d38      	adds	r0, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	9200      	str	r2, [sp, #0]
 800124c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800124e:	f001 f8d9 	bl	8002404 <ssd1306_WriteString>
			x += 48;
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	3330      	adds	r3, #48	@ 0x30
 8001256:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f8f6 	bl	8002450 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gx:%u", gx);
 8001264:	4b4c      	ldr	r3, [pc, #304]	@ (8001398 <displayTask+0x1b8>)
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	1d38      	adds	r0, r7, #4
 800126c:	4a4b      	ldr	r2, [pc, #300]	@ (800139c <displayTask+0x1bc>)
 800126e:	2108      	movs	r1, #8
 8001270:	f00c ffee 	bl	800e250 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 8001274:	4b47      	ldr	r3, [pc, #284]	@ (8001394 <displayTask+0x1b4>)
 8001276:	1d38      	adds	r0, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	9200      	str	r2, [sp, #0]
 800127c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127e:	f001 f8c1 	bl	8002404 <ssd1306_WriteString>
			x = 2;
 8001282:	2302      	movs	r3, #2
 8001284:	73bb      	strb	r3, [r7, #14]
			y += 8;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3308      	adds	r3, #8
 800128a:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(2, y);
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	4619      	mov	r1, r3
 8001290:	2002      	movs	r0, #2
 8001292:	f001 f8dd 	bl	8002450 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "ay:%u", ay);
 8001296:	4b42      	ldr	r3, [pc, #264]	@ (80013a0 <displayTask+0x1c0>)
 8001298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129c:	1d38      	adds	r0, r7, #4
 800129e:	4a41      	ldr	r2, [pc, #260]	@ (80013a4 <displayTask+0x1c4>)
 80012a0:	2108      	movs	r1, #8
 80012a2:	f00c ffd5 	bl	800e250 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 80012a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001394 <displayTask+0x1b4>)
 80012a8:	1d38      	adds	r0, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b0:	f001 f8a8 	bl	8002404 <ssd1306_WriteString>
			x += 48;
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	3330      	adds	r3, #48	@ 0x30
 80012b8:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 f8c5 	bl	8002450 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gy:%u", gy);
 80012c6:	4b38      	ldr	r3, [pc, #224]	@ (80013a8 <displayTask+0x1c8>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	1d38      	adds	r0, r7, #4
 80012ce:	4a37      	ldr	r2, [pc, #220]	@ (80013ac <displayTask+0x1cc>)
 80012d0:	2108      	movs	r1, #8
 80012d2:	f00c ffbd 	bl	800e250 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 80012d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <displayTask+0x1b4>)
 80012d8:	1d38      	adds	r0, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	9200      	str	r2, [sp, #0]
 80012de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e0:	f001 f890 	bl	8002404 <ssd1306_WriteString>
			x = 2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	73bb      	strb	r3, [r7, #14]
			y += 8;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	3308      	adds	r3, #8
 80012ec:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(2, y);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	4619      	mov	r1, r3
 80012f2:	2002      	movs	r0, #2
 80012f4:	f001 f8ac 	bl	8002450 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "az:%u", az);
 80012f8:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <displayTask+0x1d0>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	1d38      	adds	r0, r7, #4
 8001300:	4a2c      	ldr	r2, [pc, #176]	@ (80013b4 <displayTask+0x1d4>)
 8001302:	2108      	movs	r1, #8
 8001304:	f00c ffa4 	bl	800e250 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <displayTask+0x1b4>)
 800130a:	1d38      	adds	r0, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001312:	f001 f877 	bl	8002404 <ssd1306_WriteString>
			x += 48;
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	3330      	adds	r3, #48	@ 0x30
 800131a:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f894 	bl	8002450 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gz:%u", gz);
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <displayTask+0x1d8>)
 800132a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132e:	1d38      	adds	r0, r7, #4
 8001330:	4a22      	ldr	r2, [pc, #136]	@ (80013bc <displayTask+0x1dc>)
 8001332:	2108      	movs	r1, #8
 8001334:	f00c ff8c 	bl	800e250 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 8001338:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <displayTask+0x1b4>)
 800133a:	1d38      	adds	r0, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001342:	f001 f85f 	bl	8002404 <ssd1306_WriteString>
		}
	}
	if (ONDISPLAY) {
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <displayTask+0x1a4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <displayTask+0x19c>
		ONMPU=FALSE;
 8001354:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <displayTask+0x1a4>)
 8001356:	7813      	ldrb	r3, [r2, #0]
 8001358:	f023 0302 	bic.w	r3, r3, #2
 800135c:	7013      	strb	r3, [r2, #0]
		if (ssd1306_UpdateScreenDMA()){
 800135e:	f000 ff0b 	bl	8002178 <ssd1306_UpdateScreenDMA>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <displayTask+0x19c>
			ONDISPLAY = FALSE; //Sali de la pantalla
 8001368:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <displayTask+0x1a4>)
 800136a:	7813      	ldrb	r3, [r2, #0]
 800136c:	f023 0304 	bic.w	r3, r3, #4
 8001370:	7013      	strb	r3, [r2, #0]
			ONMPU=TRUE; //Permite obtención de datos MPU posterior a actualizar pantalla
 8001372:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <displayTask+0x1a4>)
 8001374:	7813      	ldrb	r3, [r2, #0]
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	7013      	strb	r3, [r2, #0]
		}
	}
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200005e0 	.word	0x200005e0
 8001388:	2000002a 	.word	0x2000002a
 800138c:	200005e4 	.word	0x200005e4
 8001390:	0800ebd0 	.word	0x0800ebd0
 8001394:	0800f238 	.word	0x0800f238
 8001398:	200005ea 	.word	0x200005ea
 800139c:	0800ebd8 	.word	0x0800ebd8
 80013a0:	200005e6 	.word	0x200005e6
 80013a4:	0800ebe0 	.word	0x0800ebe0
 80013a8:	200005ec 	.word	0x200005ec
 80013ac:	0800ebe8 	.word	0x0800ebe8
 80013b0:	200005e8 	.word	0x200005e8
 80013b4:	0800ebf0 	.word	0x0800ebf0
 80013b8:	200005ee 	.word	0x200005ee
 80013bc:	0800ebf8 	.word	0x0800ebf8

080013c0 <displayMemWrite>:


void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	6039      	str	r1, [r7, #0]
 80013c8:	4611      	mov	r1, r2
 80013ca:	461a      	mov	r2, r3
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	460b      	mov	r3, r1
 80013d2:	71bb      	strb	r3, [r7, #6]
 80013d4:	4613      	mov	r3, r2
 80013d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	b299      	uxth	r1, r3
 80013dc:	797b      	ldrb	r3, [r7, #5]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	9002      	str	r0, [sp, #8]
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <displayMemWrite+0x40>)
 80013f4:	f003 fb06 	bl	8004a04 <HAL_I2C_Mem_Write>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000244 	.word	0x20000244

08001404 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af02      	add	r7, sp, #8
 800140a:	6039      	str	r1, [r7, #0]
 800140c:	4611      	mov	r1, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	460b      	mov	r3, r1
 8001416:	71bb      	strb	r3, [r7, #6]
 8001418:	4613      	mov	r3, r2
 800141a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	b299      	uxth	r1, r3
 8001420:	797b      	ldrb	r3, [r7, #5]
 8001422:	b29a      	uxth	r2, r3
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	b29b      	uxth	r3, r3
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	4803      	ldr	r0, [pc, #12]	@ (8001440 <displayMemWriteDMA+0x3c>)
 8001432:	f003 fe13 	bl	800505c <HAL_I2C_Mem_Write_DMA>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000244 	.word	0x20000244

08001444 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af04      	add	r7, sp, #16
 800144a:	6039      	str	r1, [r7, #0]
 800144c:	4611      	mov	r1, r2
 800144e:	461a      	mov	r2, r3
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	460b      	mov	r3, r1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	4613      	mov	r3, r2
 800145a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	b299      	uxth	r1, r3
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	b29a      	uxth	r2, r3
 8001464:	79bb      	ldrb	r3, [r7, #6]
 8001466:	b29b      	uxth	r3, r3
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	9002      	str	r0, [sp, #8]
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	4803      	ldr	r0, [pc, #12]	@ (8001484 <mpuMemWrite+0x40>)
 8001478:	f003 fac4 	bl	8004a04 <HAL_I2C_Mem_Write>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000244 	.word	0x20000244

08001488 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af02      	add	r7, sp, #8
 800148e:	6039      	str	r1, [r7, #0]
 8001490:	4611      	mov	r1, r2
 8001492:	461a      	mov	r2, r3
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	460b      	mov	r3, r1
 800149a:	71bb      	strb	r3, [r7, #6]
 800149c:	4613      	mov	r3, r2
 800149e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	b299      	uxth	r1, r3
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	79bb      	ldrb	r3, [r7, #6]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <mpuMemReadDMA+0x3c>)
 80014b6:	f003 ff2f 	bl	8005318 <HAL_I2C_Mem_Read_DMA>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000244 	.word	0x20000244

080014c8 <mpuTask>:

void mpuTask(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af02      	add	r7, sp, #8
//		ONMPU=TRUE;
//		IS20MS = FALSE;
//	}


	if (ONMPU) {
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <mpuTask+0x60>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d010      	beq.n	80014fe <mpuTask+0x36>
		ONDISPLAY=FALSE;
 80014dc:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <mpuTask+0x60>)
 80014de:	7813      	ldrb	r3, [r2, #0]
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	7013      	strb	r3, [r2, #0]
			mpu6050_Read();
 80014e6:	f000 fb47 	bl	8001b78 <mpu6050_Read>
			mpu6050_GetData(&ax, &ay, &az, &gx, &gy, &gz);
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <mpuTask+0x64>)
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <mpuTask+0x68>)
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <mpuTask+0x6c>)
 80014f4:	4a10      	ldr	r2, [pc, #64]	@ (8001538 <mpuTask+0x70>)
 80014f6:	4911      	ldr	r1, [pc, #68]	@ (800153c <mpuTask+0x74>)
 80014f8:	4811      	ldr	r0, [pc, #68]	@ (8001540 <mpuTask+0x78>)
 80014fa:	f000 fcc5 	bl	8001e88 <mpu6050_GetData>
	}
	if (IS20MS) {
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <mpuTask+0x60>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <mpuTask+0x58>
		ONMPU=TRUE;
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <mpuTask+0x60>)
 800150e:	7813      	ldrb	r3, [r2, #0]
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	7013      	strb	r3, [r2, #0]
		IS20MS = FALSE;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <mpuTask+0x60>)
 8001518:	7813      	ldrb	r3, [r2, #0]
 800151a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800151e:	7013      	strb	r3, [r2, #0]
	}

}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200005e0 	.word	0x200005e0
 800152c:	200005ee 	.word	0x200005ee
 8001530:	200005ec 	.word	0x200005ec
 8001534:	200005ea 	.word	0x200005ea
 8001538:	200005e8 	.word	0x200005e8
 800153c:	200005e6 	.word	0x200005e6
 8001540:	200005e4 	.word	0x200005e4

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001548:	f001 fcd6 	bl	8002ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154c:	f000 f85e 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f000 fa4a 	bl	80019e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001554:	f000 fa0a 	bl	800196c <MX_DMA_Init>
  MX_ADC1_Init();
 8001558:	f000 f8c0 	bl	80016dc <MX_ADC1_Init>
  MX_I2C1_Init();
 800155c:	f000 f972 	bl	8001844 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001560:	f000 f99e 	bl	80018a0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001564:	f00c f8f8 	bl	800d758 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8001568:	481a      	ldr	r0, [pc, #104]	@ (80015d4 <main+0x90>)
 800156a:	f00c fa47 	bl	800d9fc <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 800156e:	481a      	ldr	r0, [pc, #104]	@ (80015d8 <main+0x94>)
 8001570:	f008 f8fc 	bl	800976c <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157a:	4818      	ldr	r0, [pc, #96]	@ (80015dc <main+0x98>)
 800157c:	f003 f8b4 	bl	80046e8 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8001580:	4817      	ldr	r0, [pc, #92]	@ (80015e0 <main+0x9c>)
 8001582:	f000 fd3f 	bl	8002004 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 8001586:	4817      	ldr	r0, [pc, #92]	@ (80015e4 <main+0xa0>)
 8001588:	f000 fd2c 	bl	8001fe4 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 800158c:	4816      	ldr	r0, [pc, #88]	@ (80015e8 <main+0xa4>)
 800158e:	f000 fd19 	bl	8001fc4 <ssd1306_Attach_MemWriteDMA>

	ssd1306_Init();
 8001592:	f000 fd47 	bl	8002024 <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 8001596:	4815      	ldr	r0, [pc, #84]	@ (80015ec <main+0xa8>)
 8001598:	f000 faac 	bl	8001af4 <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 800159c:	4814      	ldr	r0, [pc, #80]	@ (80015f0 <main+0xac>)
 800159e:	f000 fa99 	bl	8001ad4 <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 80015a2:	4814      	ldr	r0, [pc, #80]	@ (80015f4 <main+0xb0>)
 80015a4:	f000 fa86 	bl	8001ab4 <mpu6050_Attach_MemReadDMA>

	MPU6050_Init();
 80015a8:	f000 fac8 	bl	8001b3c <MPU6050_Init>


	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <main+0xb4>)
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <main+0xb8>)
 80015b0:	4913      	ldr	r1, [pc, #76]	@ (8001600 <main+0xbc>)
 80015b2:	4814      	ldr	r0, [pc, #80]	@ (8001604 <main+0xc0>)
 80015b4:	f001 fc3e 	bl	8002e34 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <main+0xc4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 80015be:	f7ff fdab 	bl	8001118 <do10ms>
		USBTask();
 80015c2:	f7ff fc85 	bl	8000ed0 <USBTask>

		mpuTask();
 80015c6:	f7ff ff7f 	bl	80014c8 <mpuTask>
		displayTask();
 80015ca:	f7ff fe09 	bl	80011e0 <displayTask>
		do10ms();
 80015ce:	bf00      	nop
 80015d0:	e7f5      	b.n	80015be <main+0x7a>
 80015d2:	bf00      	nop
 80015d4:	08000e75 	.word	0x08000e75
 80015d8:	20000358 	.word	0x20000358
 80015dc:	40020800 	.word	0x40020800
 80015e0:	200005e1 	.word	0x200005e1
 80015e4:	080013c1 	.word	0x080013c1
 80015e8:	08001405 	.word	0x08001405
 80015ec:	200005e2 	.word	0x200005e2
 80015f0:	08001445 	.word	0x08001445
 80015f4:	08001489 	.word	0x08001489
 80015f8:	200003dc 	.word	0x200003dc
 80015fc:	200004dc 	.word	0x200004dc
 8001600:	200003c4 	.word	0x200003c4
 8001604:	200003d0 	.word	0x200003d0
 8001608:	200005e0 	.word	0x200005e0

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	@ 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2230      	movs	r2, #48	@ 0x30
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f00c fe68 	bl	800e2f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <SystemClock_Config+0xc8>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	4a26      	ldr	r2, [pc, #152]	@ (80016d4 <SystemClock_Config+0xc8>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001640:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <SystemClock_Config+0xc8>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <SystemClock_Config+0xcc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a20      	ldr	r2, [pc, #128]	@ (80016d8 <SystemClock_Config+0xcc>)
 8001656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <SystemClock_Config+0xcc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800166c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001672:	2302      	movs	r3, #2
 8001674:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001676:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800167a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800167c:	2319      	movs	r3, #25
 800167e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001680:	23c0      	movs	r3, #192	@ 0xc0
 8001682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001684:	2302      	movs	r3, #2
 8001686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4618      	mov	r0, r3
 8001692:	f007 fbd7 	bl	8008e44 <HAL_RCC_OscConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800169c:	f000 fa04 	bl	8001aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a0:	230f      	movs	r3, #15
 80016a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a4:	2302      	movs	r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2103      	movs	r1, #3
 80016bc:	4618      	mov	r0, r3
 80016be:	f007 fe39 	bl	8009334 <HAL_RCC_ClockConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016c8:	f000 f9ee 	bl	8001aa8 <Error_Handler>
  }
}
 80016cc:	bf00      	nop
 80016ce:	3750      	adds	r7, #80	@ 0x50
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e2:	463b      	mov	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ee:	4b52      	ldr	r3, [pc, #328]	@ (8001838 <MX_ADC1_Init+0x15c>)
 80016f0:	4a52      	ldr	r2, [pc, #328]	@ (800183c <MX_ADC1_Init+0x160>)
 80016f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016f4:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <MX_ADC1_Init+0x15c>)
 80016f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001838 <MX_ADC1_Init+0x15c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001702:	4b4d      	ldr	r3, [pc, #308]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001704:	2201      	movs	r2, #1
 8001706:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001708:	4b4b      	ldr	r3, [pc, #300]	@ (8001838 <MX_ADC1_Init+0x15c>)
 800170a:	2200      	movs	r2, #0
 800170c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800170e:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001716:	4b48      	ldr	r3, [pc, #288]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800171c:	4b46      	ldr	r3, [pc, #280]	@ (8001838 <MX_ADC1_Init+0x15c>)
 800171e:	4a48      	ldr	r2, [pc, #288]	@ (8001840 <MX_ADC1_Init+0x164>)
 8001720:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001722:	4b45      	ldr	r3, [pc, #276]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001728:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <MX_ADC1_Init+0x15c>)
 800172a:	2208      	movs	r2, #8
 800172c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800172e:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001738:	2201      	movs	r2, #1
 800173a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800173c:	483e      	ldr	r0, [pc, #248]	@ (8001838 <MX_ADC1_Init+0x15c>)
 800173e:	f001 fc71 	bl	8003024 <HAL_ADC_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001748:	f000 f9ae 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800174c:	2300      	movs	r3, #0
 800174e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4836      	ldr	r0, [pc, #216]	@ (8001838 <MX_ADC1_Init+0x15c>)
 800175e:	f001 fec7 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001768:	f000 f99e 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800176c:	2301      	movs	r3, #1
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001770:	2302      	movs	r3, #2
 8001772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	482f      	ldr	r0, [pc, #188]	@ (8001838 <MX_ADC1_Init+0x15c>)
 800177a:	f001 feb9 	bl	80034f0 <HAL_ADC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001784:	f000 f990 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001788:	2302      	movs	r3, #2
 800178a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800178c:	2303      	movs	r3, #3
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4828      	ldr	r0, [pc, #160]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001796:	f001 feab 	bl	80034f0 <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80017a0:	f000 f982 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017a4:	2303      	movs	r3, #3
 80017a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017a8:	2304      	movs	r3, #4
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4821      	ldr	r0, [pc, #132]	@ (8001838 <MX_ADC1_Init+0x15c>)
 80017b2:	f001 fe9d 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80017bc:	f000 f974 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017c4:	2305      	movs	r3, #5
 80017c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	481a      	ldr	r0, [pc, #104]	@ (8001838 <MX_ADC1_Init+0x15c>)
 80017ce:	f001 fe8f 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80017d8:	f000 f966 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017dc:	2305      	movs	r3, #5
 80017de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017e0:	2306      	movs	r3, #6
 80017e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4813      	ldr	r0, [pc, #76]	@ (8001838 <MX_ADC1_Init+0x15c>)
 80017ea:	f001 fe81 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80017f4:	f000 f958 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017f8:	2306      	movs	r3, #6
 80017fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80017fc:	2307      	movs	r3, #7
 80017fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001806:	f001 fe73 	bl	80034f0 <HAL_ADC_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001810:	f000 f94a 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001814:	2307      	movs	r3, #7
 8001816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001818:	2308      	movs	r3, #8
 800181a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_ADC1_Init+0x15c>)
 8001822:	f001 fe65 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800182c:	f000 f93c 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000019c 	.word	0x2000019c
 800183c:	40012000 	.word	0x40012000
 8001840:	0f000001 	.word	0x0f000001

08001844 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <MX_I2C1_Init+0x50>)
 800184a:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <MX_I2C1_Init+0x54>)
 800184c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001850:	4a12      	ldr	r2, [pc, #72]	@ (800189c <MX_I2C1_Init+0x58>)
 8001852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <MX_I2C1_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_I2C1_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001882:	f002 ff65 	bl	8004750 <HAL_I2C_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800188c:	f000 f90c 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000244 	.word	0x20000244
 8001898:	40005400 	.word	0x40005400
 800189c:	00061a80 	.word	0x00061a80

080018a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <MX_TIM1_Init+0xc4>)
 80018ce:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <MX_TIM1_Init+0xc8>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80018d2:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <MX_TIM1_Init+0xc4>)
 80018d4:	225f      	movs	r2, #95	@ 0x5f
 80018d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <MX_TIM1_Init+0xc4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <MX_TIM1_Init+0xc4>)
 80018e0:	22f9      	movs	r2, #249	@ 0xf9
 80018e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <MX_TIM1_Init+0xc4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <MX_TIM1_Init+0xc4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001964 <MX_TIM1_Init+0xc4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018f6:	481b      	ldr	r0, [pc, #108]	@ (8001964 <MX_TIM1_Init+0xc4>)
 80018f8:	f007 fee8 	bl	80096cc <HAL_TIM_Base_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001902:	f000 f8d1 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4619      	mov	r1, r3
 8001912:	4814      	ldr	r0, [pc, #80]	@ (8001964 <MX_TIM1_Init+0xc4>)
 8001914:	f008 f87c 	bl	8009a10 <HAL_TIM_ConfigClockSource>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800191e:	f000 f8c3 	bl	8001aa8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4619      	mov	r1, r3
 8001930:	480c      	ldr	r0, [pc, #48]	@ (8001964 <MX_TIM1_Init+0xc4>)
 8001932:	f008 f934 	bl	8009b9e <HAL_TIM_SlaveConfigSynchro>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 800193c:	f000 f8b4 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_TIM1_Init+0xc4>)
 800194e:	f008 fb43 	bl	8009fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001958:	f000 f8a6 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3730      	adds	r7, #48	@ 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000358 	.word	0x20000358
 8001968:	40010000 	.word	0x40010000

0800196c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <MX_DMA_Init+0x78>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <MX_DMA_Init+0x78>)
 800197c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <MX_DMA_Init+0x78>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <MX_DMA_Init+0x78>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a13      	ldr	r2, [pc, #76]	@ (80019e4 <MX_DMA_Init+0x78>)
 8001998:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <MX_DMA_Init+0x78>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	200b      	movs	r0, #11
 80019b0:	f002 f933 	bl	8003c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019b4:	200b      	movs	r0, #11
 80019b6:	f002 f94c 	bl	8003c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	200c      	movs	r0, #12
 80019c0:	f002 f92b 	bl	8003c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019c4:	200c      	movs	r0, #12
 80019c6:	f002 f944 	bl	8003c52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2038      	movs	r0, #56	@ 0x38
 80019d0:	f002 f923 	bl	8003c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019d4:	2038      	movs	r0, #56	@ 0x38
 80019d6:	f002 f93c 	bl	8003c52 <HAL_NVIC_EnableIRQ>

}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a11      	ldr	r2, [pc, #68]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <MX_GPIO_Init+0xb8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a74:	480b      	ldr	r0, [pc, #44]	@ (8001aa4 <MX_GPIO_Init+0xbc>)
 8001a76:	f002 fe37 	bl	80046e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_GPIO_Init+0xbc>)
 8001a94:	f002 fca4 	bl	80043e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020800 	.word	0x40020800

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <Error_Handler+0x8>

08001ab4 <mpu6050_Attach_MemReadDMA>:

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;


void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <mpu6050_Attach_MemReadDMA+0x1c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200005fc 	.word	0x200005fc

08001ad4 <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001adc:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <mpu6050_Attach_MemWrite+0x1c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200005f8 	.word	0x200005f8

08001af4 <mpu6050_ADC_ConfCpltCallback>:

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	MPU6050_RxCplt = (uint8_t *)PtrRx;
 8001afc:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200005f4 	.word	0x200005f4

08001b14 <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <mpu6050_WriteData+0x24>)
 8001b22:	681c      	ldr	r4, [r3, #0]
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	2201      	movs	r2, #1
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	20d0      	movs	r0, #208	@ 0xd0
 8001b2c:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200005f8 	.word	0x200005f8

08001b3c <MPU6050_Init>:
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}


void MPU6050_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 8001b42:	2300      	movs	r3, #0
 8001b44:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 8001b46:	1dfb      	adds	r3, r7, #7
 8001b48:	216b      	movs	r1, #107	@ 0x6b
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ffe2 	bl	8001b14 <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 8001b50:	2300      	movs	r3, #0
 8001b52:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	211c      	movs	r1, #28
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ffdb 	bl	8001b14 <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	211b      	movs	r1, #27
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ffd4 	bl	8001b14 <mpu6050_WriteData>

}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	0000      	movs	r0, r0
	...

08001b78 <mpu6050_Read>:

void mpu6050_Read(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[14];

    // Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, HAL_MAX_DELAY);
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	230e      	movs	r3, #14
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	463b      	mov	r3, r7
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	223b      	movs	r2, #59	@ 0x3b
 8001b90:	21d0      	movs	r1, #208	@ 0xd0
 8001b92:	48ab      	ldr	r0, [pc, #684]	@ (8001e40 <mpu6050_Read+0x2c8>)
 8001b94:	f003 f830 	bl	8004bf8 <HAL_I2C_Mem_Read>

    // Combinar bytes altos y bajos en variables de 16 bits con signo
    ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001b98:	783b      	ldrb	r3, [r7, #0]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4ba6      	ldr	r3, [pc, #664]	@ (8001e44 <mpu6050_Read+0x2cc>)
 8001bac:	601a      	str	r2, [r3, #0]
    ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001bae:	78bb      	ldrb	r3, [r7, #2]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4ba1      	ldr	r3, [pc, #644]	@ (8001e48 <mpu6050_Read+0x2d0>)
 8001bc2:	601a      	str	r2, [r3, #0]
    az = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001bc4:	793b      	ldrb	r3, [r7, #4]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	797b      	ldrb	r3, [r7, #5]
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b9d      	ldr	r3, [pc, #628]	@ (8001e4c <mpu6050_Read+0x2d4>)
 8001bd8:	601a      	str	r2, [r3, #0]


    // Combinar bytes altos y bajos
    gx = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001bda:	7a3b      	ldrb	r3, [r7, #8]
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	7a7b      	ldrb	r3, [r7, #9]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b98      	ldr	r3, [pc, #608]	@ (8001e50 <mpu6050_Read+0x2d8>)
 8001bee:	601a      	str	r2, [r3, #0]
    gy = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001bf0:	7abb      	ldrb	r3, [r7, #10]
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b94      	ldr	r3, [pc, #592]	@ (8001e54 <mpu6050_Read+0x2dc>)
 8001c04:	601a      	str	r2, [r3, #0]
    gz = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001c06:	7b3b      	ldrb	r3, [r7, #12]
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	7b7b      	ldrb	r3, [r7, #13]
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b8f      	ldr	r3, [pc, #572]	@ (8001e58 <mpu6050_Read+0x2e0>)
 8001c1a:	601a      	str	r2, [r3, #0]


    // Aplicar offset y escalar a m/s² (con 2 decimales fijos)
    if (abs(ax) <= OFFSET_AX)
 8001c1c:	4b89      	ldr	r3, [pc, #548]	@ (8001e44 <mpu6050_Read+0x2cc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001c24:	db08      	blt.n	8001c38 <mpu6050_Read+0xc0>
 8001c26:	4b87      	ldr	r3, [pc, #540]	@ (8001e44 <mpu6050_Read+0x2cc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001c2e:	dc03      	bgt.n	8001c38 <mpu6050_Read+0xc0>
        ax_real = 0;
 8001c30:	4b8a      	ldr	r3, [pc, #552]	@ (8001e5c <mpu6050_Read+0x2e4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	e025      	b.n	8001c84 <mpu6050_Read+0x10c>
    else
        ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001c38:	4b82      	ldr	r3, [pc, #520]	@ (8001e44 <mpu6050_Read+0x2cc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001e60 <mpu6050_Read+0x2e8>
 8001c48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c4c:	ee16 0a90 	vmov	r0, s13
 8001c50:	f7fe fc7a 	bl	8000548 <__aeabi_f2d>
 8001c54:	a378      	add	r3, pc, #480	@ (adr r3, 8001e38 <mpu6050_Read+0x2c0>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fccd 	bl	80005f8 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e64 <mpu6050_Read+0x2ec>)
 8001c6c:	f7fe fcc4 	bl	80005f8 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7fe fed0 	bl	8000a1c <__aeabi_d2iz>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	4b76      	ldr	r3, [pc, #472]	@ (8001e5c <mpu6050_Read+0x2e4>)
 8001c82:	801a      	strh	r2, [r3, #0]

    if (abs(ay) <= OFFSET_AY)
 8001c84:	4b70      	ldr	r3, [pc, #448]	@ (8001e48 <mpu6050_Read+0x2d0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001c8c:	db08      	blt.n	8001ca0 <mpu6050_Read+0x128>
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e48 <mpu6050_Read+0x2d0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001c96:	dc03      	bgt.n	8001ca0 <mpu6050_Read+0x128>
        ay_real = 0;
 8001c98:	4b73      	ldr	r3, [pc, #460]	@ (8001e68 <mpu6050_Read+0x2f0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	801a      	strh	r2, [r3, #0]
 8001c9e:	e025      	b.n	8001cec <mpu6050_Read+0x174>
    else
        ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001ca0:	4b69      	ldr	r3, [pc, #420]	@ (8001e48 <mpu6050_Read+0x2d0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cac:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001e60 <mpu6050_Read+0x2e8>
 8001cb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cb4:	ee16 0a90 	vmov	r0, s13
 8001cb8:	f7fe fc46 	bl	8000548 <__aeabi_f2d>
 8001cbc:	a35e      	add	r3, pc, #376	@ (adr r3, 8001e38 <mpu6050_Read+0x2c0>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fc99 	bl	80005f8 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4b64      	ldr	r3, [pc, #400]	@ (8001e64 <mpu6050_Read+0x2ec>)
 8001cd4:	f7fe fc90 	bl	80005f8 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe fe9c 	bl	8000a1c <__aeabi_d2iz>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e68 <mpu6050_Read+0x2f0>)
 8001cea:	801a      	strh	r2, [r3, #0]

    if (abs(az) <= OFFSET_AZ)
 8001cec:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <mpu6050_Read+0x2d4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8001e6c <mpu6050_Read+0x2f4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	db0a      	blt.n	8001d0c <mpu6050_Read+0x194>
 8001cf6:	4b55      	ldr	r3, [pc, #340]	@ (8001e4c <mpu6050_Read+0x2d4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	dc04      	bgt.n	8001d0c <mpu6050_Read+0x194>
        az_real = 9.81 * MULTIPLICADORFLOAT;  // en reposo debería medir ~1g hacia Z
 8001d02:	4b5b      	ldr	r3, [pc, #364]	@ (8001e70 <mpu6050_Read+0x2f8>)
 8001d04:	f240 32d5 	movw	r2, #981	@ 0x3d5
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	e025      	b.n	8001d58 <mpu6050_Read+0x1e0>
    else
        az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e4c <mpu6050_Read+0x2d4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d18:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001e60 <mpu6050_Read+0x2e8>
 8001d1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d20:	ee16 0a90 	vmov	r0, s13
 8001d24:	f7fe fc10 	bl	8000548 <__aeabi_f2d>
 8001d28:	a343      	add	r3, pc, #268	@ (adr r3, 8001e38 <mpu6050_Read+0x2c0>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc63 	bl	80005f8 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b49      	ldr	r3, [pc, #292]	@ (8001e64 <mpu6050_Read+0x2ec>)
 8001d40:	f7fe fc5a 	bl	80005f8 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7fe fe66 	bl	8000a1c <__aeabi_d2iz>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	4b46      	ldr	r3, [pc, #280]	@ (8001e70 <mpu6050_Read+0x2f8>)
 8001d56:	801a      	strh	r2, [r3, #0]

    // Aplicar offset y escalar a grados/segundo (centésimas)
    if (abs(gx) <= OFFSET_GX)
 8001d58:	4b3d      	ldr	r3, [pc, #244]	@ (8001e50 <mpu6050_Read+0x2d8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001d60:	db08      	blt.n	8001d74 <mpu6050_Read+0x1fc>
 8001d62:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <mpu6050_Read+0x2d8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001d6a:	dc03      	bgt.n	8001d74 <mpu6050_Read+0x1fc>
        gx_real = 0;
 8001d6c:	4b41      	ldr	r3, [pc, #260]	@ (8001e74 <mpu6050_Read+0x2fc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	e014      	b.n	8001d9e <mpu6050_Read+0x226>
    else
        gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 8001d74:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <mpu6050_Read+0x2d8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d80:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001e78 <mpu6050_Read+0x300>
 8001d84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d88:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001e7c <mpu6050_Read+0x304>
 8001d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	4b36      	ldr	r3, [pc, #216]	@ (8001e74 <mpu6050_Read+0x2fc>)
 8001d9c:	801a      	strh	r2, [r3, #0]

    if (abs(gy) <= OFFSET_GY)
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <mpu6050_Read+0x2dc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001da6:	db08      	blt.n	8001dba <mpu6050_Read+0x242>
 8001da8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <mpu6050_Read+0x2dc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001db0:	dc03      	bgt.n	8001dba <mpu6050_Read+0x242>
        gy_real = 0;
 8001db2:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <mpu6050_Read+0x308>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	801a      	strh	r2, [r3, #0]
 8001db8:	e014      	b.n	8001de4 <mpu6050_Read+0x26c>
    else
        gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <mpu6050_Read+0x2dc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc6:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001e78 <mpu6050_Read+0x300>
 8001dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dce:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001e7c <mpu6050_Read+0x304>
 8001dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dda:	ee17 3a90 	vmov	r3, s15
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <mpu6050_Read+0x308>)
 8001de2:	801a      	strh	r2, [r3, #0]

    if (abs(gz) <= OFFSET_GZ)
 8001de4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <mpu6050_Read+0x2e0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001dec:	db08      	blt.n	8001e00 <mpu6050_Read+0x288>
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <mpu6050_Read+0x2e0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001df6:	dc03      	bgt.n	8001e00 <mpu6050_Read+0x288>
        gz_real = 0;
 8001df8:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <mpu6050_Read+0x30c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	e015      	b.n	8001e2c <mpu6050_Read+0x2b4>
    else
        gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <mpu6050_Read+0x2e0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0c:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001e78 <mpu6050_Read+0x300>
 8001e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e14:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001e7c <mpu6050_Read+0x304>
 8001e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e20:	ee17 3a90 	vmov	r3, s15
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <mpu6050_Read+0x30c>)
 8001e28:	801a      	strh	r2, [r3, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	f3af 8000 	nop.w
 8001e38:	51eb851f 	.word	0x51eb851f
 8001e3c:	40239eb8 	.word	0x40239eb8
 8001e40:	20000244 	.word	0x20000244
 8001e44:	2000060c 	.word	0x2000060c
 8001e48:	20000610 	.word	0x20000610
 8001e4c:	20000614 	.word	0x20000614
 8001e50:	20000618 	.word	0x20000618
 8001e54:	2000061c 	.word	0x2000061c
 8001e58:	20000620 	.word	0x20000620
 8001e5c:	20000600 	.word	0x20000600
 8001e60:	46800000 	.word	0x46800000
 8001e64:	40590000 	.word	0x40590000
 8001e68:	20000602 	.word	0x20000602
 8001e6c:	ffffb1e0 	.word	0xffffb1e0
 8001e70:	20000604 	.word	0x20000604
 8001e74:	20000606 	.word	0x20000606
 8001e78:	43030000 	.word	0x43030000
 8001e7c:	42c80000 	.word	0x42c80000
 8001e80:	20000608 	.word	0x20000608
 8001e84:	2000060a 	.word	0x2000060a

08001e88 <mpu6050_GetData>:

void mpu6050_GetData(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
    if (ax) *ax = ax_real;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <mpu6050_GetData+0x1e>
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <mpu6050_GetData+0x7c>)
 8001e9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	801a      	strh	r2, [r3, #0]
    if (ay) *ay = ay_real;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <mpu6050_GetData+0x2e>
 8001eac:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <mpu6050_GetData+0x80>)
 8001eae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	801a      	strh	r2, [r3, #0]
    if (az) *az = az_real;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <mpu6050_GetData+0x3e>
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <mpu6050_GetData+0x84>)
 8001ebe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	801a      	strh	r2, [r3, #0]

    if (gx) *gx = gx_real;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <mpu6050_GetData+0x4e>
 8001ecc:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <mpu6050_GetData+0x88>)
 8001ece:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	801a      	strh	r2, [r3, #0]
    if (gy) *gy = gy_real;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <mpu6050_GetData+0x5e>
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <mpu6050_GetData+0x8c>)
 8001ede:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	801a      	strh	r2, [r3, #0]
    if (gz) *gz = gz_real;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <mpu6050_GetData+0x6e>
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <mpu6050_GetData+0x90>)
 8001eee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	801a      	strh	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000600 	.word	0x20000600
 8001f08:	20000602 	.word	0x20000602
 8001f0c:	20000604 	.word	0x20000604
 8001f10:	20000606 	.word	0x20000606
 8001f14:	20000608 	.word	0x20000608
 8001f18:	2000060a 	.word	0x2000060a

08001f1c <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8001f36:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <ssd1306_WriteCommand+0x20>)
 8001f38:	681c      	ldr	r4, [r3, #0]
 8001f3a:	1df9      	adds	r1, r7, #7
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2078      	movs	r0, #120	@ 0x78
 8001f42:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	20000628 	.word	0x20000628

08001f50 <ssd1306_WriteCommandDMA>:

void ssd1306_WriteCommandDMA(uint8_t byte) {
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8001f5a:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <ssd1306_WriteCommandDMA+0x20>)
 8001f5c:	681c      	ldr	r4, [r3, #0]
 8001f5e:	1df9      	adds	r1, r7, #7
 8001f60:	2300      	movs	r3, #0
 8001f62:	2201      	movs	r2, #1
 8001f64:	2078      	movs	r0, #120	@ 0x78
 8001f66:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	2000062c 	.word	0x2000062c

08001f74 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <ssd1306_WriteData+0x24>)
 8001f80:	681c      	ldr	r4, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	2340      	movs	r3, #64	@ 0x40
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	2078      	movs	r0, #120	@ 0x78
 8001f8c:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000628 	.word	0x20000628

08001f9c <ssd1306_WriteDataDMA>:

void ssd1306_WriteDataDMA(uint8_t* buffer, size_t buff_size) {
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	memWriteDMA(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <ssd1306_WriteDataDMA+0x24>)
 8001fa8:	681c      	ldr	r4, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	2340      	movs	r3, #64	@ 0x40
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	2078      	movs	r0, #120	@ 0x78
 8001fb4:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000062c 	.word	0x2000062c

08001fc4 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <ssd1306_Attach_MemWriteDMA+0x1c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	2000062c 	.word	0x2000062c

08001fe4 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <ssd1306_Attach_MemWrite+0x1c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000628 	.word	0x20000628

08002004 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 800200c:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000624 	.word	0x20000624

08002024 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002028:	f7ff ff78 	bl	8001f1c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800202c:	2064      	movs	r0, #100	@ 0x64
 800202e:	f000 ffd5 	bl	8002fdc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002032:	2000      	movs	r0, #0
 8002034:	f000 fa38 	bl	80024a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002038:	2020      	movs	r0, #32
 800203a:	f7ff ff77 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff ff74 	bl	8001f2c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002044:	20b0      	movs	r0, #176	@ 0xb0
 8002046:	f7ff ff71 	bl	8001f2c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800204a:	20c8      	movs	r0, #200	@ 0xc8
 800204c:	f7ff ff6e 	bl	8001f2c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff ff6b 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002056:	2010      	movs	r0, #16
 8002058:	f7ff ff68 	bl	8001f2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800205c:	2040      	movs	r0, #64	@ 0x40
 800205e:	f7ff ff65 	bl	8001f2c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002062:	20ff      	movs	r0, #255	@ 0xff
 8002064:	f000 fa0c 	bl	8002480 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002068:	20a1      	movs	r0, #161	@ 0xa1
 800206a:	f7ff ff5f 	bl	8001f2c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800206e:	20a6      	movs	r0, #166	@ 0xa6
 8002070:	f7ff ff5c 	bl	8001f2c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002074:	20a8      	movs	r0, #168	@ 0xa8
 8002076:	f7ff ff59 	bl	8001f2c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800207a:	203f      	movs	r0, #63	@ 0x3f
 800207c:	f7ff ff56 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002080:	20a4      	movs	r0, #164	@ 0xa4
 8002082:	f7ff ff53 	bl	8001f2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002086:	20d3      	movs	r0, #211	@ 0xd3
 8002088:	f7ff ff50 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff ff4d 	bl	8001f2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002092:	20d5      	movs	r0, #213	@ 0xd5
 8002094:	f7ff ff4a 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002098:	20f0      	movs	r0, #240	@ 0xf0
 800209a:	f7ff ff47 	bl	8001f2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800209e:	20d9      	movs	r0, #217	@ 0xd9
 80020a0:	f7ff ff44 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80020a4:	2022      	movs	r0, #34	@ 0x22
 80020a6:	f7ff ff41 	bl	8001f2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80020aa:	20da      	movs	r0, #218	@ 0xda
 80020ac:	f7ff ff3e 	bl	8001f2c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80020b0:	2012      	movs	r0, #18
 80020b2:	f7ff ff3b 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80020b6:	20db      	movs	r0, #219	@ 0xdb
 80020b8:	f7ff ff38 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80020bc:	2020      	movs	r0, #32
 80020be:	f7ff ff35 	bl	8001f2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80020c2:	208d      	movs	r0, #141	@ 0x8d
 80020c4:	f7ff ff32 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80020c8:	2014      	movs	r0, #20
 80020ca:	f7ff ff2f 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80020ce:	2001      	movs	r0, #1
 80020d0:	f000 f9ea 	bl	80024a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 f80f 	bl	80020f8 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80020da:	f000 f825 	bl	8002128 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <ssd1306_Init+0xd0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <ssd1306_Init+0xd0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80020ea:	4b02      	ldr	r3, [pc, #8]	@ (80020f4 <ssd1306_Init+0xd0>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	711a      	strb	r2, [r3, #4]
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000a30 	.word	0x20000a30

080020f8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <ssd1306_Fill+0x14>
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <ssd1306_Fill+0x16>
 800210c:	23ff      	movs	r3, #255	@ 0xff
 800210e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002112:	4619      	mov	r1, r3
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <ssd1306_Fill+0x2c>)
 8002116:	f00c f8eb 	bl	800e2f0 <memset>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000630 	.word	0x20000630

08002128 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800212e:	2300      	movs	r3, #0
 8002130:	71fb      	strb	r3, [r7, #7]
 8002132:	e016      	b.n	8002162 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	3b50      	subs	r3, #80	@ 0x50
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fef6 	bl	8001f2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fef3 	bl	8001f2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002146:	2010      	movs	r0, #16
 8002148:	f7ff fef0 	bl	8001f2c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	01db      	lsls	r3, r3, #7
 8002150:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <ssd1306_UpdateScreen+0x4c>)
 8002152:	4413      	add	r3, r2
 8002154:	2180      	movs	r1, #128	@ 0x80
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff0c 	bl	8001f74 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	3301      	adds	r3, #1
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b07      	cmp	r3, #7
 8002166:	d9e5      	bls.n	8002134 <ssd1306_UpdateScreen+0xc>
    }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000630 	.word	0x20000630

08002178 <ssd1306_UpdateScreenDMA>:


/* Write the screenbuffer with changed to the screen */
char ssd1306_UpdateScreenDMA(void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction

	if (*SSD1306_TxCplt || state == 1) {
 800217c:	4b2a      	ldr	r3, [pc, #168]	@ (8002228 <ssd1306_UpdateScreenDMA+0xb0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <ssd1306_UpdateScreenDMA+0x16>
 8002186:	4b29      	ldr	r3, [pc, #164]	@ (800222c <ssd1306_UpdateScreenDMA+0xb4>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d149      	bne.n	8002222 <ssd1306_UpdateScreenDMA+0xaa>
		*SSD1306_TxCplt = 0;  // Reset completion flag
 800218e:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <ssd1306_UpdateScreenDMA+0xb0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]

		switch (state) {
 8002196:	4b25      	ldr	r3, [pc, #148]	@ (800222c <ssd1306_UpdateScreenDMA+0xb4>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3b01      	subs	r3, #1
 800219c:	2b03      	cmp	r3, #3
 800219e:	d840      	bhi.n	8002222 <ssd1306_UpdateScreenDMA+0xaa>
 80021a0:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <ssd1306_UpdateScreenDMA+0x30>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021cf 	.word	0x080021cf
 80021b0:	080021dd 	.word	0x080021dd
 80021b4:	080021eb 	.word	0x080021eb
		case 1:  // Set page address
			ssd1306_WriteCommandDMA(0xB0 + current_page);
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <ssd1306_UpdateScreenDMA+0xb8>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	3b50      	subs	r3, #80	@ 0x50
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fec5 	bl	8001f50 <ssd1306_WriteCommandDMA>
			state = 2;
 80021c6:	4b19      	ldr	r3, [pc, #100]	@ (800222c <ssd1306_UpdateScreenDMA+0xb4>)
 80021c8:	2202      	movs	r2, #2
 80021ca:	701a      	strb	r2, [r3, #0]
			break;
 80021cc:	e029      	b.n	8002222 <ssd1306_UpdateScreenDMA+0xaa>
		case 2:  // Set column address low nibble
			ssd1306_WriteCommandDMA(0x00 + SSD1306_X_OFFSET_LOWER);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff febe 	bl	8001f50 <ssd1306_WriteCommandDMA>
			state = 3;
 80021d4:	4b15      	ldr	r3, [pc, #84]	@ (800222c <ssd1306_UpdateScreenDMA+0xb4>)
 80021d6:	2203      	movs	r2, #3
 80021d8:	701a      	strb	r2, [r3, #0]
			break;
 80021da:	e022      	b.n	8002222 <ssd1306_UpdateScreenDMA+0xaa>
		case 3:  // Set column address high nibble
			ssd1306_WriteCommandDMA(0x10 + SSD1306_X_OFFSET_UPPER);
 80021dc:	2010      	movs	r0, #16
 80021de:	f7ff feb7 	bl	8001f50 <ssd1306_WriteCommandDMA>
			state = 4;
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <ssd1306_UpdateScreenDMA+0xb4>)
 80021e4:	2204      	movs	r2, #4
 80021e6:	701a      	strb	r2, [r3, #0]
			break;
 80021e8:	e01b      	b.n	8002222 <ssd1306_UpdateScreenDMA+0xaa>
		case 4:  // Write page data
			ssd1306_WriteDataDMA(&SSD1306_Buffer[SSD1306_WIDTH*current_page],SSD1306_WIDTH);
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <ssd1306_UpdateScreenDMA+0xb8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	01db      	lsls	r3, r3, #7
 80021f0:	4a10      	ldr	r2, [pc, #64]	@ (8002234 <ssd1306_UpdateScreenDMA+0xbc>)
 80021f2:	4413      	add	r3, r2
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fed0 	bl	8001f9c <ssd1306_WriteDataDMA>
			current_page++;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <ssd1306_UpdateScreenDMA+0xb8>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <ssd1306_UpdateScreenDMA+0xb8>)
 8002206:	701a      	strb	r2, [r3, #0]

			if (current_page > 7){//SSD1306_HEIGHT/8) {
 8002208:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <ssd1306_UpdateScreenDMA+0xb8>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b07      	cmp	r3, #7
 800220e:	d904      	bls.n	800221a <ssd1306_UpdateScreenDMA+0xa2>
				current_page = 0;
 8002210:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <ssd1306_UpdateScreenDMA+0xb8>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
				return 1;
 8002216:	2301      	movs	r3, #1
 8002218:	e004      	b.n	8002224 <ssd1306_UpdateScreenDMA+0xac>
			}
			state = 1;  // Start over with next page
 800221a:	4b04      	ldr	r3, [pc, #16]	@ (800222c <ssd1306_UpdateScreenDMA+0xb4>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
			break;
 8002220:	bf00      	nop
		}
	}
	return 0;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000624 	.word	0x20000624
 800222c:	2000002b 	.word	0x2000002b
 8002230:	20000a36 	.word	0x20000a36
 8002234:	20000630 	.word	0x20000630

08002238 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
 8002242:	460b      	mov	r3, r1
 8002244:	71bb      	strb	r3, [r7, #6]
 8002246:	4613      	mov	r3, r2
 8002248:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db3d      	blt.n	80022ce <ssd1306_DrawPixel+0x96>
 8002252:	79bb      	ldrb	r3, [r7, #6]
 8002254:	2b3f      	cmp	r3, #63	@ 0x3f
 8002256:	d83a      	bhi.n	80022ce <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002258:	797b      	ldrb	r3, [r7, #5]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d11a      	bne.n	8002294 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800225e:	79fa      	ldrb	r2, [r7, #7]
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	08db      	lsrs	r3, r3, #3
 8002264:	b2d8      	uxtb	r0, r3
 8002266:	4603      	mov	r3, r0
 8002268:	01db      	lsls	r3, r3, #7
 800226a:	4413      	add	r3, r2
 800226c:	4a1b      	ldr	r2, [pc, #108]	@ (80022dc <ssd1306_DrawPixel+0xa4>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	b25a      	sxtb	r2, r3
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	b25b      	sxtb	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b259      	sxtb	r1, r3
 8002284:	79fa      	ldrb	r2, [r7, #7]
 8002286:	4603      	mov	r3, r0
 8002288:	01db      	lsls	r3, r3, #7
 800228a:	4413      	add	r3, r2
 800228c:	b2c9      	uxtb	r1, r1
 800228e:	4a13      	ldr	r2, [pc, #76]	@ (80022dc <ssd1306_DrawPixel+0xa4>)
 8002290:	54d1      	strb	r1, [r2, r3]
 8002292:	e01d      	b.n	80022d0 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002294:	79fa      	ldrb	r2, [r7, #7]
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	b2d8      	uxtb	r0, r3
 800229c:	4603      	mov	r3, r0
 800229e:	01db      	lsls	r3, r3, #7
 80022a0:	4413      	add	r3, r2
 80022a2:	4a0e      	ldr	r2, [pc, #56]	@ (80022dc <ssd1306_DrawPixel+0xa4>)
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	b25a      	sxtb	r2, r3
 80022a8:	79bb      	ldrb	r3, [r7, #6]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	b25b      	sxtb	r3, r3
 80022ba:	4013      	ands	r3, r2
 80022bc:	b259      	sxtb	r1, r3
 80022be:	79fa      	ldrb	r2, [r7, #7]
 80022c0:	4603      	mov	r3, r0
 80022c2:	01db      	lsls	r3, r3, #7
 80022c4:	4413      	add	r3, r2
 80022c6:	b2c9      	uxtb	r1, r1
 80022c8:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <ssd1306_DrawPixel+0xa4>)
 80022ca:	54d1      	strb	r1, [r2, r3]
 80022cc:	e000      	b.n	80022d0 <ssd1306_DrawPixel+0x98>
        return;
 80022ce:	bf00      	nop
    }
}
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000630 	.word	0x20000630

080022e0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4604      	mov	r4, r0
 80022e8:	4638      	mov	r0, r7
 80022ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80022ee:	4623      	mov	r3, r4
 80022f0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b1f      	cmp	r3, #31
 80022f6:	d902      	bls.n	80022fe <ssd1306_WriteChar+0x1e>
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b7e      	cmp	r3, #126	@ 0x7e
 80022fc:	d901      	bls.n	8002302 <ssd1306_WriteChar+0x22>
        return 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	e079      	b.n	80023f6 <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <ssd1306_WriteChar+0x34>
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	3b20      	subs	r3, #32
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	e000      	b.n	8002316 <ssd1306_WriteChar+0x36>
 8002314:	783b      	ldrb	r3, [r7, #0]
 8002316:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002318:	4b39      	ldr	r3, [pc, #228]	@ (8002400 <ssd1306_WriteChar+0x120>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	4413      	add	r3, r2
 8002322:	2b80      	cmp	r3, #128	@ 0x80
 8002324:	dc06      	bgt.n	8002334 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002326:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <ssd1306_WriteChar+0x120>)
 8002328:	885b      	ldrh	r3, [r3, #2]
 800232a:	461a      	mov	r2, r3
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002330:	2b40      	cmp	r3, #64	@ 0x40
 8002332:	dd01      	ble.n	8002338 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002334:	2300      	movs	r3, #0
 8002336:	e05e      	b.n	80023f6 <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	e04d      	b.n	80023da <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	3b20      	subs	r3, #32
 8002344:	7879      	ldrb	r1, [r7, #1]
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4619      	mov	r1, r3
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	440b      	add	r3, r1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	e036      	b.n	80023cc <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d013      	beq.n	8002396 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800236e:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <ssd1306_WriteChar+0x120>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4413      	add	r3, r2
 800237a:	b2d8      	uxtb	r0, r3
 800237c:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <ssd1306_WriteChar+0x120>)
 800237e:	885b      	ldrh	r3, [r3, #2]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4413      	add	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800238e:	4619      	mov	r1, r3
 8002390:	f7ff ff52 	bl	8002238 <ssd1306_DrawPixel>
 8002394:	e017      	b.n	80023c6 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002396:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <ssd1306_WriteChar+0x120>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	b2d8      	uxtb	r0, r3
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <ssd1306_WriteChar+0x120>)
 80023a6:	885b      	ldrh	r3, [r3, #2]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	b2d9      	uxtb	r1, r3
 80023b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	f7ff ff39 	bl	8002238 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3c4      	bcc.n	800235e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	787b      	ldrb	r3, [r7, #1]
 80023dc:	461a      	mov	r2, r3
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d3ac      	bcc.n	800233e <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <ssd1306_WriteChar+0x120>)
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <ssd1306_WriteChar+0x120>)
 80023f2:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd90      	pop	{r4, r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000a30 	.word	0x20000a30

08002404 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	4638      	mov	r0, r7
 800240e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002412:	e013      	b.n	800243c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	7818      	ldrb	r0, [r3, #0]
 8002418:	7e3b      	ldrb	r3, [r7, #24]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	463b      	mov	r3, r7
 800241e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002420:	f7ff ff5e 	bl	80022e0 <ssd1306_WriteChar>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d002      	beq.n	8002436 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	e008      	b.n	8002448 <ssd1306_WriteString+0x44>
        }
        str++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e7      	bne.n	8002414 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	781b      	ldrb	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	460a      	mov	r2, r1
 800245a:	71fb      	strb	r3, [r7, #7]
 800245c:	4613      	mov	r3, r2
 800245e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <ssd1306_SetCursor+0x2c>)
 8002466:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002468:	79bb      	ldrb	r3, [r7, #6]
 800246a:	b29a      	uxth	r2, r3
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <ssd1306_SetCursor+0x2c>)
 800246e:	805a      	strh	r2, [r3, #2]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	20000a30 	.word	0x20000a30

08002480 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800248a:	2381      	movs	r3, #129	@ 0x81
 800248c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fd4b 	bl	8001f2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fd47 	bl	8001f2c <ssd1306_WriteCommand>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80024b8:	23af      	movs	r3, #175	@ 0xaf
 80024ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <ssd1306_SetDisplayOn+0x38>)
 80024be:	2201      	movs	r2, #1
 80024c0:	715a      	strb	r2, [r3, #5]
 80024c2:	e004      	b.n	80024ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80024c4:	23ae      	movs	r3, #174	@ 0xae
 80024c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <ssd1306_SetDisplayOn+0x38>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fd2b 	bl	8001f2c <ssd1306_WriteCommand>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000a30 	.word	0x20000a30

080024e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <HAL_MspInit+0x4c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002530 <HAL_MspInit+0x4c>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <HAL_MspInit+0x4c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_MspInit+0x4c>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <HAL_MspInit+0x4c>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	@ 0x40
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_MspInit+0x4c>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800

08002534 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	@ 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a32      	ldr	r2, [pc, #200]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d15e      	bne.n	8002614 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	4b31      	ldr	r3, [pc, #196]	@ (8002620 <HAL_ADC_MspInit+0xec>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	4a30      	ldr	r2, [pc, #192]	@ (8002620 <HAL_ADC_MspInit+0xec>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002564:	6453      	str	r3, [r2, #68]	@ 0x44
 8002566:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <HAL_ADC_MspInit+0xec>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b2a      	ldr	r3, [pc, #168]	@ (8002620 <HAL_ADC_MspInit+0xec>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a29      	ldr	r2, [pc, #164]	@ (8002620 <HAL_ADC_MspInit+0xec>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <HAL_ADC_MspInit+0xec>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800258e:	23ff      	movs	r3, #255	@ 0xff
 8002590:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002592:	2303      	movs	r3, #3
 8002594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	4820      	ldr	r0, [pc, #128]	@ (8002624 <HAL_ADC_MspInit+0xf0>)
 80025a2:	f001 ff1d 	bl	80043e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025a8:	4a20      	ldr	r2, [pc, #128]	@ (800262c <HAL_ADC_MspInit+0xf8>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025c6:	4b18      	ldr	r3, [pc, #96]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025ce:	4b16      	ldr	r3, [pc, #88]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80025d6:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025d8:	2200      	movs	r2, #0
 80025da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025dc:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e2:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025e8:	480f      	ldr	r0, [pc, #60]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025ea:	f001 fb4d 	bl	8003c88 <HAL_DMA_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80025f4:	f7ff fa58 	bl	8001aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 80025fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <HAL_ADC_MspInit+0xf4>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	2012      	movs	r0, #18
 800260a:	f001 fb06 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800260e:	2012      	movs	r0, #18
 8002610:	f001 fb1f 	bl	8003c52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	@ 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40012000 	.word	0x40012000
 8002620:	40023800 	.word	0x40023800
 8002624:	40020000 	.word	0x40020000
 8002628:	200001e4 	.word	0x200001e4
 800262c:	40026410 	.word	0x40026410

08002630 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a4f      	ldr	r2, [pc, #316]	@ (800278c <HAL_I2C_MspInit+0x15c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	f040 8097 	bne.w	8002782 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	4b4d      	ldr	r3, [pc, #308]	@ (8002790 <HAL_I2C_MspInit+0x160>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	4a4c      	ldr	r2, [pc, #304]	@ (8002790 <HAL_I2C_MspInit+0x160>)
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	6313      	str	r3, [r2, #48]	@ 0x30
 8002664:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <HAL_I2C_MspInit+0x160>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002670:	23c0      	movs	r3, #192	@ 0xc0
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002674:	2312      	movs	r3, #18
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002680:	2304      	movs	r3, #4
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	4842      	ldr	r0, [pc, #264]	@ (8002794 <HAL_I2C_MspInit+0x164>)
 800268c:	f001 fea8 	bl	80043e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b3e      	ldr	r3, [pc, #248]	@ (8002790 <HAL_I2C_MspInit+0x160>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	4a3d      	ldr	r2, [pc, #244]	@ (8002790 <HAL_I2C_MspInit+0x160>)
 800269a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800269e:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002790 <HAL_I2C_MspInit+0x160>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80026ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026ae:	4a3b      	ldr	r2, [pc, #236]	@ (800279c <HAL_I2C_MspInit+0x16c>)
 80026b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80026b2:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026b8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ba:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c0:	4b35      	ldr	r3, [pc, #212]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c6:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ce:	4b32      	ldr	r3, [pc, #200]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d4:	4b30      	ldr	r3, [pc, #192]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80026da:	4b2f      	ldr	r3, [pc, #188]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026dc:	2200      	movs	r2, #0
 80026de:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80026ec:	482a      	ldr	r0, [pc, #168]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 80026ee:	f001 facb 	bl	8003c88 <HAL_DMA_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80026f8:	f7ff f9d6 	bl	8001aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 8002700:	639a      	str	r2, [r3, #56]	@ 0x38
 8002702:	4a25      	ldr	r2, [pc, #148]	@ (8002798 <HAL_I2C_MspInit+0x168>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002708:	4b25      	ldr	r3, [pc, #148]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 800270a:	4a26      	ldr	r2, [pc, #152]	@ (80027a4 <HAL_I2C_MspInit+0x174>)
 800270c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002714:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 8002716:	2240      	movs	r2, #64	@ 0x40
 8002718:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800271a:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002720:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 8002722:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002726:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002728:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272e:	4b1c      	ldr	r3, [pc, #112]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002734:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800273a:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002746:	4816      	ldr	r0, [pc, #88]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 8002748:	f001 fa9e 	bl	8003c88 <HAL_DMA_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002752:	f7ff f9a9 	bl	8001aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 800275a:	635a      	str	r2, [r3, #52]	@ 0x34
 800275c:	4a10      	ldr	r2, [pc, #64]	@ (80027a0 <HAL_I2C_MspInit+0x170>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	201f      	movs	r0, #31
 8002768:	f001 fa57 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800276c:	201f      	movs	r0, #31
 800276e:	f001 fa70 	bl	8003c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	2020      	movs	r0, #32
 8002778:	f001 fa4f 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800277c:	2020      	movs	r0, #32
 800277e:	f001 fa68 	bl	8003c52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	@ 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40005400 	.word	0x40005400
 8002790:	40023800 	.word	0x40023800
 8002794:	40020400 	.word	0x40020400
 8002798:	20000298 	.word	0x20000298
 800279c:	40026010 	.word	0x40026010
 80027a0:	200002f8 	.word	0x200002f8
 80027a4:	40026028 	.word	0x40026028

080027a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <HAL_TIM_Base_MspInit+0x78>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d12d      	bne.n	8002816 <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_TIM_Base_MspInit+0x7c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <HAL_TIM_Base_MspInit+0x7c>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ca:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_TIM_Base_MspInit+0x7c>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2018      	movs	r0, #24
 80027dc:	f001 fa1d 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80027e0:	2018      	movs	r0, #24
 80027e2:	f001 fa36 	bl	8003c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	2019      	movs	r0, #25
 80027ec:	f001 fa15 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027f0:	2019      	movs	r0, #25
 80027f2:	f001 fa2e 	bl	8003c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	201a      	movs	r0, #26
 80027fc:	f001 fa0d 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002800:	201a      	movs	r0, #26
 8002802:	f001 fa26 	bl	8003c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	201b      	movs	r0, #27
 800280c:	f001 fa05 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002810:	201b      	movs	r0, #27
 8002812:	f001 fa1e 	bl	8003c52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000
 8002824:	40023800 	.word	0x40023800

08002828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <NMI_Handler+0x4>

08002830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002834:	bf00      	nop
 8002836:	e7fd      	b.n	8002834 <HardFault_Handler+0x4>

08002838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <MemManage_Handler+0x4>

08002840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <BusFault_Handler+0x4>

08002848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <UsageFault_Handler+0x4>

08002850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800287e:	f000 fb8d 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <DMA1_Stream0_IRQHandler+0x10>)
 800288e:	f001 fb23 	bl	8003ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000298 	.word	0x20000298

0800289c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80028a0:	4802      	ldr	r0, [pc, #8]	@ (80028ac <DMA1_Stream1_IRQHandler+0x10>)
 80028a2:	f001 fb19 	bl	8003ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200002f8 	.word	0x200002f8

080028b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028b4:	4802      	ldr	r0, [pc, #8]	@ (80028c0 <ADC_IRQHandler+0x10>)
 80028b6:	f000 fbf8 	bl	80030aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	2000019c 	.word	0x2000019c

080028c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028c8:	4802      	ldr	r0, [pc, #8]	@ (80028d4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80028ca:	f006 ffb1 	bl	8009830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000358 	.word	0x20000358

080028d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028dc:	4802      	ldr	r0, [pc, #8]	@ (80028e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028de:	f006 ffa7 	bl	8009830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000358 	.word	0x20000358

080028ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028f0:	4802      	ldr	r0, [pc, #8]	@ (80028fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80028f2:	f006 ff9d 	bl	8009830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000358 	.word	0x20000358

08002900 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002904:	4802      	ldr	r0, [pc, #8]	@ (8002910 <TIM1_CC_IRQHandler+0x10>)
 8002906:	f006 ff93 	bl	8009830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000358 	.word	0x20000358

08002914 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002918:	4802      	ldr	r0, [pc, #8]	@ (8002924 <I2C1_EV_IRQHandler+0x10>)
 800291a:	f002 fe8d 	bl	8005638 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000244 	.word	0x20000244

08002928 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800292c:	4802      	ldr	r0, [pc, #8]	@ (8002938 <I2C1_ER_IRQHandler+0x10>)
 800292e:	f002 fff4 	bl	800591a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000244 	.word	0x20000244

0800293c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002940:	4802      	ldr	r0, [pc, #8]	@ (800294c <DMA2_Stream0_IRQHandler+0x10>)
 8002942:	f001 fac9 	bl	8003ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200001e4 	.word	0x200001e4

08002950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002954:	4802      	ldr	r0, [pc, #8]	@ (8002960 <OTG_FS_IRQHandler+0x10>)
 8002956:	f005 f966 	bl	8007c26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20001328 	.word	0x20001328

08002964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800296c:	4a14      	ldr	r2, [pc, #80]	@ (80029c0 <_sbrk+0x5c>)
 800296e:	4b15      	ldr	r3, [pc, #84]	@ (80029c4 <_sbrk+0x60>)
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002978:	4b13      	ldr	r3, [pc, #76]	@ (80029c8 <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <_sbrk+0x64>)
 8002982:	4a12      	ldr	r2, [pc, #72]	@ (80029cc <_sbrk+0x68>)
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	429a      	cmp	r2, r3
 8002992:	d207      	bcs.n	80029a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002994:	f00b fcb4 	bl	800e300 <__errno>
 8002998:	4603      	mov	r3, r0
 800299a:	220c      	movs	r2, #12
 800299c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e009      	b.n	80029b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a4:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029aa:	4b07      	ldr	r3, [pc, #28]	@ (80029c8 <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a05      	ldr	r2, [pc, #20]	@ (80029c8 <_sbrk+0x64>)
 80029b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20020000 	.word	0x20020000
 80029c4:	00000400 	.word	0x00000400
 80029c8:	20000a38 	.word	0x20000a38
 80029cc:	20001b78 	.word	0x20001b78

080029d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <SystemInit+0x20>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029da:	4a05      	ldr	r2, [pc, #20]	@ (80029f0 <SystemInit+0x20>)
 80029dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
 8002a00:	4613      	mov	r3, r2
 8002a02:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8002a04:	78bb      	ldrb	r3, [r7, #2]
 8002a06:	3301      	adds	r3, #1
 8002a08:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	795a      	ldrb	r2, [r3, #5]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	795b      	ldrb	r3, [r3, #5]
 8002a20:	1c59      	adds	r1, r3, #1
 8002a22:	b2c8      	uxtb	r0, r1
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	7148      	strb	r0, [r1, #5]
 8002a28:	4413      	add	r3, r2
 8002a2a:	2255      	movs	r2, #85	@ 0x55
 8002a2c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	795a      	ldrb	r2, [r3, #5]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	799b      	ldrb	r3, [r3, #6]
 8002a36:	4013      	ands	r3, r2
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	795b      	ldrb	r3, [r3, #5]
 8002a46:	1c59      	adds	r1, r3, #1
 8002a48:	b2c8      	uxtb	r0, r1
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	7148      	strb	r0, [r1, #5]
 8002a4e:	4413      	add	r3, r2
 8002a50:	224e      	movs	r2, #78	@ 0x4e
 8002a52:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	795a      	ldrb	r2, [r3, #5]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	799b      	ldrb	r3, [r3, #6]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	795b      	ldrb	r3, [r3, #5]
 8002a6c:	1c59      	adds	r1, r3, #1
 8002a6e:	b2c8      	uxtb	r0, r1
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	7148      	strb	r0, [r1, #5]
 8002a74:	4413      	add	r3, r2
 8002a76:	2245      	movs	r2, #69	@ 0x45
 8002a78:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	795a      	ldrb	r2, [r3, #5]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	799b      	ldrb	r3, [r3, #6]
 8002a82:	4013      	ands	r3, r2
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	795b      	ldrb	r3, [r3, #5]
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	b2c8      	uxtb	r0, r1
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	7148      	strb	r0, [r1, #5]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	2252      	movs	r2, #82	@ 0x52
 8002a9e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	795a      	ldrb	r2, [r3, #5]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	799b      	ldrb	r3, [r3, #6]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	795b      	ldrb	r3, [r3, #5]
 8002ab8:	1c59      	adds	r1, r3, #1
 8002aba:	b2c8      	uxtb	r0, r1
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	7148      	strb	r0, [r1, #5]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	78ba      	ldrb	r2, [r7, #2]
 8002ac4:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	795a      	ldrb	r2, [r3, #5]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	799b      	ldrb	r3, [r3, #6]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	795b      	ldrb	r3, [r3, #5]
 8002ade:	1c59      	adds	r1, r3, #1
 8002ae0:	b2c8      	uxtb	r0, r1
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	7148      	strb	r0, [r1, #5]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	223a      	movs	r2, #58	@ 0x3a
 8002aea:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	795a      	ldrb	r2, [r3, #5]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	799b      	ldrb	r3, [r3, #6]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	795b      	ldrb	r3, [r3, #5]
 8002b04:	1c59      	adds	r1, r3, #1
 8002b06:	b2c8      	uxtb	r0, r1
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	7148      	strb	r0, [r1, #5]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	795a      	ldrb	r2, [r3, #5]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	799b      	ldrb	r3, [r3, #6]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2207      	movs	r2, #7
 8002b26:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7a5a      	ldrb	r2, [r3, #9]
 8002b2c:	78b9      	ldrb	r1, [r7, #2]
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	404b      	eors	r3, r1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4053      	eors	r3, r2
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7a5b      	ldrb	r3, [r3, #9]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	79db      	ldrb	r3, [r3, #7]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	795b      	ldrb	r3, [r3, #5]
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	b2c8      	uxtb	r0, r1
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	7148      	strb	r0, [r1, #5]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	795a      	ldrb	r2, [r3, #5]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	799b      	ldrb	r3, [r3, #6]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7a5a      	ldrb	r2, [r3, #9]
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	4053      	eors	r3, r2
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7a5b      	ldrb	r3, [r3, #9]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 8002bae:	b490      	push	{r4, r7}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8002bbc:	e02c      	b.n	8002c18 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	79db      	ldrb	r3, [r3, #7]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	441a      	add	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6819      	ldr	r1, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	795b      	ldrb	r3, [r3, #5]
 8002bdc:	1c58      	adds	r0, r3, #1
 8002bde:	b2c4      	uxtb	r4, r0
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	7144      	strb	r4, [r0, #5]
 8002be4:	440b      	add	r3, r1
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	795a      	ldrb	r2, [r3, #5]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	799b      	ldrb	r3, [r3, #6]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	73fa      	strb	r2, [r7, #15]
 8002c04:	461a      	mov	r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7a5b      	ldrb	r3, [r3, #9]
 8002c10:	4053      	eors	r3, r2
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ca      	bne.n	8002bbe <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7a5b      	ldrb	r3, [r3, #9]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc90      	pop	{r4, r7}
 8002c34:	4770      	bx	lr
	...

08002c38 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	795b      	ldrb	r3, [r3, #5]
 8002c48:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8002c4a:	e0e4      	b.n	8002e16 <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8002c4c:	4b78      	ldr	r3, [pc, #480]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b07      	cmp	r3, #7
 8002c52:	f200 80c9 	bhi.w	8002de8 <unerPrtcl_DecodeHeader+0x1b0>
 8002c56:	a201      	add	r2, pc, #4	@ (adr r2, 8002c5c <unerPrtcl_DecodeHeader+0x24>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c7d 	.word	0x08002c7d
 8002c60:	08002c97 	.word	0x08002c97
 8002c64:	08002cd5 	.word	0x08002cd5
 8002c68:	08002d01 	.word	0x08002d01
 8002c6c:	08002d2d 	.word	0x08002d2d
 8002c70:	08002d43 	.word	0x08002d43
 8002c74:	08002de9 	.word	0x08002de9
 8002c78:	08002da5 	.word	0x08002da5
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	7912      	ldrb	r2, [r2, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b55      	cmp	r3, #85	@ 0x55
 8002c8a:	f040 80b1 	bne.w	8002df0 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 8002c8e:	4b68      	ldr	r3, [pc, #416]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
                }
            break;
 8002c94:	e0ac      	b.n	8002df0 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	7912      	ldrb	r2, [r2, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b4e      	cmp	r3, #78	@ 0x4e
 8002ca4:	d103      	bne.n	8002cae <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8002ca6:	4b62      	ldr	r3, [pc, #392]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002ca8:	2202      	movs	r2, #2
 8002caa:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8002cac:	e0a2      	b.n	8002df4 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	7912      	ldrb	r2, [r2, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b55      	cmp	r3, #85	@ 0x55
 8002cbc:	f000 809a 	beq.w	8002df4 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	711a      	strb	r2, [r3, #4]
            break;
 8002cd2:	e08f      	b.n	8002df4 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	7912      	ldrb	r2, [r2, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b45      	cmp	r3, #69	@ 0x45
 8002ce2:	d103      	bne.n	8002cec <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8002ce4:	4b52      	ldr	r3, [pc, #328]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002cea:	e086      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002cec:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	791b      	ldrb	r3, [r3, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	711a      	strb	r2, [r3, #4]
            break;
 8002cfe:	e07c      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	7912      	ldrb	r2, [r2, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b52      	cmp	r3, #82	@ 0x52
 8002d0e:	d103      	bne.n	8002d18 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 8002d10:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002d12:	2204      	movs	r2, #4
 8002d14:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002d16:	e070      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002d18:	4b45      	ldr	r3, [pc, #276]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	791b      	ldrb	r3, [r3, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	711a      	strb	r2, [r3, #4]
            break;
 8002d2a:	e066      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	7912      	ldrb	r2, [r2, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	701a      	strb	r2, [r3, #0]
            break;
 8002d40:	e05b      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	7912      	ldrb	r2, [r2, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8002d50:	d11e      	bne.n	8002d90 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 8002d52:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002d54:	2207      	movs	r2, #7
 8002d56:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	791b      	ldrb	r3, [r3, #4]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7a1a      	ldrb	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	799b      	ldrb	r3, [r3, #6]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7a5a      	ldrb	r2, [r3, #9]
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	4053      	eors	r3, r2
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002d8e:	e034      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002d90:	4b27      	ldr	r3, [pc, #156]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	791b      	ldrb	r3, [r3, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	711a      	strb	r2, [r3, #4]
            break;
 8002da2:	e02a      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7a5a      	ldrb	r2, [r3, #9]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	7909      	ldrb	r1, [r1, #4]
 8002dbc:	440b      	add	r3, r1
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4053      	eors	r3, r2
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8002dc8:	e016      	b.n	8002df8 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 8002dca:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	7912      	ldrb	r2, [r2, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7a5b      	ldrb	r3, [r3, #9]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d109      	bne.n	8002df8 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e01d      	b.n	8002e24 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8002de8:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <unerPrtcl_DecodeHeader+0x1f8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
            break;
 8002dee:	e004      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002df0:	bf00      	nop
 8002df2:	e002      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002df4:	bf00      	nop
 8002df6:	e000      	b.n	8002dfa <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002df8:	bf00      	nop
        }
        dataRx->indexR++;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	791b      	ldrb	r3, [r3, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	791a      	ldrb	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	799b      	ldrb	r3, [r3, #6]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	7bba      	ldrb	r2, [r7, #14]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	f47f af15 	bne.w	8002c4c <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	20000a3c 	.word	0x20000a3c

08002e34 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	22ff      	movs	r2, #255	@ 0xff
 8002e64:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	22ff      	movs	r2, #255	@ 0xff
 8002e8e:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2200      	movs	r2, #0
 8002e94:	725a      	strb	r2, [r3, #9]

}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ea4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002edc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ea8:	f7ff fd92 	bl	80029d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eac:	480c      	ldr	r0, [pc, #48]	@ (8002ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eae:	490d      	ldr	r1, [pc, #52]	@ (8002ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb4:	e002      	b.n	8002ebc <LoopCopyDataInit>

08002eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eba:	3304      	adds	r3, #4

08002ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec0:	d3f9      	bcc.n	8002eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec8:	e001      	b.n	8002ece <LoopFillZerobss>

08002eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ecc:	3204      	adds	r2, #4

08002ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed0:	d3fb      	bcc.n	8002eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ed2:	f00b fa1b 	bl	800e30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed6:	f7fe fb35 	bl	8001544 <main>
  bx  lr    
 8002eda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002ee8:	0800f2b8 	.word	0x0800f2b8
  ldr r2, =_sbss
 8002eec:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002ef0:	20001b74 	.word	0x20001b74

08002ef4 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <DMA1_Stream2_IRQHandler>
	...

08002ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002efc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0d      	ldr	r2, [pc, #52]	@ (8002f38 <HAL_Init+0x40>)
 8002f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <HAL_Init+0x40>)
 8002f0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <HAL_Init+0x40>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f20:	2003      	movs	r0, #3
 8002f22:	f000 fe6f 	bl	8003c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f26:	200f      	movs	r0, #15
 8002f28:	f000 f808 	bl	8002f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f2c:	f7ff fada 	bl	80024e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023c00 	.word	0x40023c00

08002f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_InitTick+0x54>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <HAL_InitTick+0x58>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fe87 	bl	8003c6e <HAL_SYSTICK_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00e      	b.n	8002f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d80a      	bhi.n	8002f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f70:	2200      	movs	r2, #0
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	f000 fe4f 	bl	8003c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f7c:	4a06      	ldr	r2, [pc, #24]	@ (8002f98 <HAL_InitTick+0x5c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2000002c 	.word	0x2000002c
 8002f94:	20000034 	.word	0x20000034
 8002f98:	20000030 	.word	0x20000030

08002f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_IncTick+0x20>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <HAL_IncTick+0x24>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <HAL_IncTick+0x24>)
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000034 	.word	0x20000034
 8002fc0:	20000a40 	.word	0x20000a40

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000a40 	.word	0x20000a40

08002fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff ffee 	bl	8002fc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d005      	beq.n	8003002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_Delay+0x44>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003002:	bf00      	nop
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	d8f7      	bhi.n	8003004 <HAL_Delay+0x28>
  {
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000034 	.word	0x20000034

08003024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e033      	b.n	80030a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fa76 	bl	8002534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d118      	bne.n	8003094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800306a:	f023 0302 	bic.w	r3, r3, #2
 800306e:	f043 0202 	orr.w	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fb6c 	bl	8003754 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40
 8003092:	e001      	b.n	8003098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d049      	beq.n	8003174 <HAL_ADC_IRQHandler+0xca>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d046      	beq.n	8003174 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d12b      	bne.n	8003164 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003110:	2b00      	cmp	r3, #0
 8003112:	d127      	bne.n	8003164 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800312c:	2b00      	cmp	r3, #0
 800312e:	d119      	bne.n	8003164 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0220 	bic.w	r2, r2, #32
 800313e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd fe17 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0212 	mvn.w	r2, #18
 8003172:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003182:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d057      	beq.n	800323a <HAL_ADC_IRQHandler+0x190>
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d054      	beq.n	800323a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d139      	bne.n	800322a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d12b      	bne.n	800322a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d124      	bne.n	800322a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11d      	bne.n	800322a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d119      	bne.n	800322a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003204:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fc10 	bl	8003a50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 020c 	mvn.w	r2, #12
 8003238:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003248:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <HAL_ADC_IRQHandler+0x1d6>
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d014      	beq.n	8003280 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10d      	bne.n	8003280 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f929 	bl	80034c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0201 	mvn.w	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800328e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d015      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x218>
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d012      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a0:	f043 0202 	orr.w	r2, r3, #2
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0220 	mvn.w	r2, #32
 80032b0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f912 	bl	80034dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0220 	mvn.w	r2, #32
 80032c0:	601a      	str	r2, [r3, #0]
  }
}
 80032c2:	bf00      	nop
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Start_DMA+0x22>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0d0      	b.n	8003490 <HAL_ADC_Start_DMA+0x1c4>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d018      	beq.n	8003336 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003314:	4b60      	ldr	r3, [pc, #384]	@ (8003498 <HAL_ADC_Start_DMA+0x1cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a60      	ldr	r2, [pc, #384]	@ (800349c <HAL_ADC_Start_DMA+0x1d0>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0c9a      	lsrs	r2, r3, #18
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003328:	e002      	b.n	8003330 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3b01      	subs	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f9      	bne.n	800332a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003344:	d107      	bne.n	8003356 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003354:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	f040 8088 	bne.w	8003476 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003390:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a4:	d106      	bne.n	80033b4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f023 0206 	bic.w	r2, r3, #6
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80033b2:	e002      	b.n	80033ba <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033c2:	4b37      	ldr	r3, [pc, #220]	@ (80034a0 <HAL_ADC_Start_DMA+0x1d4>)
 80033c4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	4a36      	ldr	r2, [pc, #216]	@ (80034a4 <HAL_ADC_Start_DMA+0x1d8>)
 80033cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	4a35      	ldr	r2, [pc, #212]	@ (80034a8 <HAL_ADC_Start_DMA+0x1dc>)
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	4a34      	ldr	r2, [pc, #208]	@ (80034ac <HAL_ADC_Start_DMA+0x1e0>)
 80033dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80033e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80033f6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003406:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	334c      	adds	r3, #76	@ 0x4c
 8003412:	4619      	mov	r1, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f000 fce4 	bl	8003de4 <HAL_DMA_Start_IT>
 800341c:	4603      	mov	r3, r0
 800341e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d129      	bne.n	800348e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	e020      	b.n	800348e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <HAL_ADC_Start_DMA+0x1e4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d11b      	bne.n	800348e <HAL_ADC_Start_DMA+0x1c2>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d114      	bne.n	800348e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	e00b      	b.n	800348e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800348e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3720      	adds	r7, #32
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	2000002c 	.word	0x2000002c
 800349c:	431bde83 	.word	0x431bde83
 80034a0:	40012300 	.word	0x40012300
 80034a4:	0800394d 	.word	0x0800394d
 80034a8:	08003a07 	.word	0x08003a07
 80034ac:	08003a23 	.word	0x08003a23
 80034b0:	40012000 	.word	0x40012000

080034b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1c>
 8003508:	2302      	movs	r3, #2
 800350a:	e113      	b.n	8003734 <HAL_ADC_ConfigChannel+0x244>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b09      	cmp	r3, #9
 800351a:	d925      	bls.n	8003568 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68d9      	ldr	r1, [r3, #12]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	3b1e      	subs	r3, #30
 8003532:	2207      	movs	r2, #7
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43da      	mvns	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	400a      	ands	r2, r1
 8003540:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68d9      	ldr	r1, [r3, #12]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	4603      	mov	r3, r0
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4403      	add	r3, r0
 800355a:	3b1e      	subs	r3, #30
 800355c:	409a      	lsls	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	e022      	b.n	80035ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6919      	ldr	r1, [r3, #16]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	2207      	movs	r2, #7
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	400a      	ands	r2, r1
 800358a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6919      	ldr	r1, [r3, #16]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4403      	add	r3, r0
 80035a4:	409a      	lsls	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d824      	bhi.n	8003600 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	3b05      	subs	r3, #5
 80035c8:	221f      	movs	r2, #31
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	400a      	ands	r2, r1
 80035d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	3b05      	subs	r3, #5
 80035f2:	fa00 f203 	lsl.w	r2, r0, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80035fe:	e04c      	b.n	800369a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d824      	bhi.n	8003652 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	3b23      	subs	r3, #35	@ 0x23
 800361a:	221f      	movs	r2, #31
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43da      	mvns	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	400a      	ands	r2, r1
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	4618      	mov	r0, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	3b23      	subs	r3, #35	@ 0x23
 8003644:	fa00 f203 	lsl.w	r2, r0, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003650:	e023      	b.n	800369a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	3b41      	subs	r3, #65	@ 0x41
 8003664:	221f      	movs	r2, #31
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43da      	mvns	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	400a      	ands	r2, r1
 8003672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	4618      	mov	r0, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3b41      	subs	r3, #65	@ 0x41
 800368e:	fa00 f203 	lsl.w	r2, r0, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800369a:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <HAL_ADC_ConfigChannel+0x250>)
 800369c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <HAL_ADC_ConfigChannel+0x254>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10f      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x1d8>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b12      	cmp	r3, #18
 80036ae:	d10b      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <HAL_ADC_ConfigChannel+0x254>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d12b      	bne.n	800372a <HAL_ADC_ConfigChannel+0x23a>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003748 <HAL_ADC_ConfigChannel+0x258>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x1f4>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b11      	cmp	r3, #17
 80036e2:	d122      	bne.n	800372a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a11      	ldr	r2, [pc, #68]	@ (8003748 <HAL_ADC_ConfigChannel+0x258>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d111      	bne.n	800372a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003706:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_ADC_ConfigChannel+0x25c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a11      	ldr	r2, [pc, #68]	@ (8003750 <HAL_ADC_ConfigChannel+0x260>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	0c9a      	lsrs	r2, r3, #18
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800371c:	e002      	b.n	8003724 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	3b01      	subs	r3, #1
 8003722:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f9      	bne.n	800371e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40012300 	.word	0x40012300
 8003744:	40012000 	.word	0x40012000
 8003748:	10000012 	.word	0x10000012
 800374c:	2000002c 	.word	0x2000002c
 8003750:	431bde83 	.word	0x431bde83

08003754 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800375c:	4b79      	ldr	r3, [pc, #484]	@ (8003944 <ADC_Init+0x1f0>)
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6899      	ldr	r1, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	4a58      	ldr	r2, [pc, #352]	@ (8003948 <ADC_Init+0x1f4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800381c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6899      	ldr	r1, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	e00f      	b.n	8003852 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003850:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0202 	bic.w	r2, r2, #2
 8003860:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6899      	ldr	r1, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7e1b      	ldrb	r3, [r3, #24]
 800386c:	005a      	lsls	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800388e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800389e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	3b01      	subs	r3, #1
 80038ac:	035a      	lsls	r2, r3, #13
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e007      	b.n	80038c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	051a      	lsls	r2, r3, #20
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800390a:	025a      	lsls	r2, r3, #9
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003922:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6899      	ldr	r1, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	029a      	lsls	r2, r3, #10
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40012300 	.word	0x40012300
 8003948:	0f000001 	.word	0x0f000001

0800394c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003962:	2b00      	cmp	r3, #0
 8003964:	d13c      	bne.n	80039e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d12b      	bne.n	80039d8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003984:	2b00      	cmp	r3, #0
 8003986:	d127      	bne.n	80039d8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d119      	bne.n	80039d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0220 	bic.w	r2, r2, #32
 80039b2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7fd f9dd 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039de:	e00e      	b.n	80039fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f7ff fd75 	bl	80034dc <HAL_ADC_ErrorCallback>
}
 80039f2:	e004      	b.n	80039fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fd4d 	bl	80034b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2240      	movs	r2, #64	@ 0x40
 8003a34:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fd4a 	bl	80034dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a74:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a80:	4013      	ands	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a96:	4a04      	ldr	r2, [pc, #16]	@ (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	60d3      	str	r3, [r2, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab0:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	f003 0307 	and.w	r3, r3, #7
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	db0b      	blt.n	8003af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	4907      	ldr	r1, [pc, #28]	@ (8003b00 <__NVIC_EnableIRQ+0x38>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2001      	movs	r0, #1
 8003aea:	fa00 f202 	lsl.w	r2, r0, r2
 8003aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000e100 	.word	0xe000e100

08003b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db0a      	blt.n	8003b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	490c      	ldr	r1, [pc, #48]	@ (8003b50 <__NVIC_SetPriority+0x4c>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	0112      	lsls	r2, r2, #4
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	440b      	add	r3, r1
 8003b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b2c:	e00a      	b.n	8003b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4908      	ldr	r1, [pc, #32]	@ (8003b54 <__NVIC_SetPriority+0x50>)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	761a      	strb	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	@ 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f1c3 0307 	rsb	r3, r3, #7
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	bf28      	it	cs
 8003b76:	2304      	movcs	r3, #4
 8003b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d902      	bls.n	8003b88 <NVIC_EncodePriority+0x30>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3b03      	subs	r3, #3
 8003b86:	e000      	b.n	8003b8a <NVIC_EncodePriority+0x32>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	43d9      	mvns	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb0:	4313      	orrs	r3, r2
         );
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3724      	adds	r7, #36	@ 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd0:	d301      	bcc.n	8003bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e00f      	b.n	8003bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c00 <SysTick_Config+0x40>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bde:	210f      	movs	r1, #15
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	f7ff ff8e 	bl	8003b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be8:	4b05      	ldr	r3, [pc, #20]	@ (8003c00 <SysTick_Config+0x40>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bee:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <SysTick_Config+0x40>)
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000e010 	.word	0xe000e010

08003c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff29 	bl	8003a64 <__NVIC_SetPriorityGrouping>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c2c:	f7ff ff3e 	bl	8003aac <__NVIC_GetPriorityGrouping>
 8003c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	6978      	ldr	r0, [r7, #20]
 8003c38:	f7ff ff8e 	bl	8003b58 <NVIC_EncodePriority>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff5d 	bl	8003b04 <__NVIC_SetPriority>
}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff31 	bl	8003ac8 <__NVIC_EnableIRQ>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ffa2 	bl	8003bc0 <SysTick_Config>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7ff f996 	bl	8002fc4 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e099      	b.n	8003dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc4:	e00f      	b.n	8003ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc6:	f7ff f97d 	bl	8002fc4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d908      	bls.n	8003ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e078      	b.n	8003dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e8      	bne.n	8003cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4b38      	ldr	r3, [pc, #224]	@ (8003de0 <HAL_DMA_Init+0x158>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d107      	bne.n	8003d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d117      	bne.n	8003daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 faab 	bl	80042e8 <DMA_CheckFifoParam>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2240      	movs	r2, #64	@ 0x40
 8003d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003da6:	2301      	movs	r3, #1
 8003da8:	e016      	b.n	8003dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa62 	bl	800427c <DMA_CalcBaseAndBitshift>
 8003db8:	4603      	mov	r3, r0
 8003dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	223f      	movs	r2, #63	@ 0x3f
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	f010803f 	.word	0xf010803f

08003de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_Start_IT+0x26>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e040      	b.n	8003e8c <HAL_DMA_Start_IT+0xa8>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d12f      	bne.n	8003e7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f9f4 	bl	8004220 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3c:	223f      	movs	r2, #63	@ 0x3f
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0216 	orr.w	r2, r2, #22
 8003e52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0208 	orr.w	r2, r2, #8
 8003e6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e005      	b.n	8003e8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
 8003e88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2280      	movs	r2, #128	@ 0x80
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00c      	b.n	8003ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8004120 <HAL_DMA_IRQHandler+0x248>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a8e      	ldr	r2, [pc, #568]	@ (8004124 <HAL_DMA_IRQHandler+0x24c>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0a9b      	lsrs	r3, r3, #10
 8003ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f02:	2208      	movs	r2, #8
 8003f04:	409a      	lsls	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01a      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	2208      	movs	r2, #8
 8003f32:	409a      	lsls	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3c:	f043 0201 	orr.w	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f66:	2201      	movs	r2, #1
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	f043 0202 	orr.w	r2, r3, #2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7e:	2204      	movs	r2, #4
 8003f80:	409a      	lsls	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d012      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d043      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d03c      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d018      	beq.n	800401a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d108      	bne.n	8004008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d024      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
 8004006:	e01f      	b.n	8004048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
 8004018:	e016      	b.n	8004048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0208 	bic.w	r2, r2, #8
 8004036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	2220      	movs	r2, #32
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 808f 	beq.w	8004178 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8087 	beq.w	8004178 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406e:	2220      	movs	r2, #32
 8004070:	409a      	lsls	r2, r3
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b05      	cmp	r3, #5
 8004080:	d136      	bne.n	80040f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0216 	bic.w	r2, r2, #22
 8004090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x1da>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0208 	bic.w	r2, r2, #8
 80040c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c6:	223f      	movs	r2, #63	@ 0x3f
 80040c8:	409a      	lsls	r2, r3
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d07e      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
        }
        return;
 80040ee:	e079      	b.n	80041e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01d      	beq.n	800413a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004110:	2b00      	cmp	r3, #0
 8004112:	d031      	beq.n	8004178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
 800411c:	e02c      	b.n	8004178 <HAL_DMA_IRQHandler+0x2a0>
 800411e:	bf00      	nop
 8004120:	2000002c 	.word	0x2000002c
 8004124:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d023      	beq.n	8004178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
 8004138:	e01e      	b.n	8004178 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10f      	bne.n	8004168 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0210 	bic.w	r2, r2, #16
 8004156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417c:	2b00      	cmp	r3, #0
 800417e:	d032      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2205      	movs	r2, #5
 8004190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3301      	adds	r3, #1
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d307      	bcc.n	80041c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f2      	bne.n	80041a4 <HAL_DMA_IRQHandler+0x2cc>
 80041be:	e000      	b.n	80041c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
 80041e2:	e000      	b.n	80041e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80041e4:	bf00      	nop
    }
  }
}
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041fa:	b2db      	uxtb	r3, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800423c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b40      	cmp	r3, #64	@ 0x40
 800424c:	d108      	bne.n	8004260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800425e:	e007      	b.n	8004270 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	3b10      	subs	r3, #16
 800428c:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <DMA_CalcBaseAndBitshift+0x64>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004296:	4a13      	ldr	r2, [pc, #76]	@ (80042e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d909      	bls.n	80042be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80042bc:	e007      	b.n	80042ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	aaaaaaab 	.word	0xaaaaaaab
 80042e4:	0800f26c 	.word	0x0800f26c

080042e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d11f      	bne.n	8004342 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d856      	bhi.n	80043b6 <DMA_CheckFifoParam+0xce>
 8004308:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <DMA_CheckFifoParam+0x28>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004321 	.word	0x08004321
 8004314:	08004333 	.word	0x08004333
 8004318:	08004321 	.word	0x08004321
 800431c:	080043b7 	.word	0x080043b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d046      	beq.n	80043ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004330:	e043      	b.n	80043ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800433a:	d140      	bne.n	80043be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004340:	e03d      	b.n	80043be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434a:	d121      	bne.n	8004390 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d837      	bhi.n	80043c2 <DMA_CheckFifoParam+0xda>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <DMA_CheckFifoParam+0x70>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	0800436f 	.word	0x0800436f
 8004360:	08004369 	.word	0x08004369
 8004364:	08004381 	.word	0x08004381
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      break;
 800436c:	e030      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d025      	beq.n	80043c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437e:	e022      	b.n	80043c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004388:	d11f      	bne.n	80043ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800438e:	e01c      	b.n	80043ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d903      	bls.n	800439e <DMA_CheckFifoParam+0xb6>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d003      	beq.n	80043a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800439c:	e018      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
      break;
 80043a2:	e015      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00e      	beq.n	80043ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e00b      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      break;
 80043b6:	bf00      	nop
 80043b8:	e00a      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043ba:	bf00      	nop
 80043bc:	e008      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043be:	bf00      	nop
 80043c0:	e006      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043ce:	bf00      	nop
    }
  } 
  
  return status; 
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b089      	sub	sp, #36	@ 0x24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	e159      	b.n	80046b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043fc:	2201      	movs	r2, #1
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	429a      	cmp	r2, r3
 8004416:	f040 8148 	bne.w	80046aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d005      	beq.n	8004432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800442e:	2b02      	cmp	r3, #2
 8004430:	d130      	bne.n	8004494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	2203      	movs	r2, #3
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004468:	2201      	movs	r2, #1
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 0201 	and.w	r2, r3, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b03      	cmp	r3, #3
 800449e:	d017      	beq.n	80044d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d123      	bne.n	8004524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	08da      	lsrs	r2, r3, #3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3208      	adds	r2, #8
 80044e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	220f      	movs	r2, #15
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	08da      	lsrs	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3208      	adds	r2, #8
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	2203      	movs	r2, #3
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 0203 	and.w	r2, r3, #3
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80a2 	beq.w	80046aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	4b57      	ldr	r3, [pc, #348]	@ (80046c8 <HAL_GPIO_Init+0x2e8>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456e:	4a56      	ldr	r2, [pc, #344]	@ (80046c8 <HAL_GPIO_Init+0x2e8>)
 8004570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004574:	6453      	str	r3, [r2, #68]	@ 0x44
 8004576:	4b54      	ldr	r3, [pc, #336]	@ (80046c8 <HAL_GPIO_Init+0x2e8>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004582:	4a52      	ldr	r2, [pc, #328]	@ (80046cc <HAL_GPIO_Init+0x2ec>)
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	3302      	adds	r3, #2
 800458a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	220f      	movs	r2, #15
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a49      	ldr	r2, [pc, #292]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d019      	beq.n	80045e2 <HAL_GPIO_Init+0x202>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a48      	ldr	r2, [pc, #288]	@ (80046d4 <HAL_GPIO_Init+0x2f4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_GPIO_Init+0x1fe>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a47      	ldr	r2, [pc, #284]	@ (80046d8 <HAL_GPIO_Init+0x2f8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00d      	beq.n	80045da <HAL_GPIO_Init+0x1fa>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a46      	ldr	r2, [pc, #280]	@ (80046dc <HAL_GPIO_Init+0x2fc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <HAL_GPIO_Init+0x1f6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a45      	ldr	r2, [pc, #276]	@ (80046e0 <HAL_GPIO_Init+0x300>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <HAL_GPIO_Init+0x1f2>
 80045ce:	2304      	movs	r3, #4
 80045d0:	e008      	b.n	80045e4 <HAL_GPIO_Init+0x204>
 80045d2:	2307      	movs	r3, #7
 80045d4:	e006      	b.n	80045e4 <HAL_GPIO_Init+0x204>
 80045d6:	2303      	movs	r3, #3
 80045d8:	e004      	b.n	80045e4 <HAL_GPIO_Init+0x204>
 80045da:	2302      	movs	r3, #2
 80045dc:	e002      	b.n	80045e4 <HAL_GPIO_Init+0x204>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_GPIO_Init+0x204>
 80045e2:	2300      	movs	r3, #0
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	f002 0203 	and.w	r2, r2, #3
 80045ea:	0092      	lsls	r2, r2, #2
 80045ec:	4093      	lsls	r3, r2
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045f4:	4935      	ldr	r1, [pc, #212]	@ (80046cc <HAL_GPIO_Init+0x2ec>)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	3302      	adds	r3, #2
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004602:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <HAL_GPIO_Init+0x304>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004626:	4a2f      	ldr	r2, [pc, #188]	@ (80046e4 <HAL_GPIO_Init+0x304>)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800462c:	4b2d      	ldr	r3, [pc, #180]	@ (80046e4 <HAL_GPIO_Init+0x304>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004650:	4a24      	ldr	r2, [pc, #144]	@ (80046e4 <HAL_GPIO_Init+0x304>)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004656:	4b23      	ldr	r3, [pc, #140]	@ (80046e4 <HAL_GPIO_Init+0x304>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	43db      	mvns	r3, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4013      	ands	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800467a:	4a1a      	ldr	r2, [pc, #104]	@ (80046e4 <HAL_GPIO_Init+0x304>)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004680:	4b18      	ldr	r3, [pc, #96]	@ (80046e4 <HAL_GPIO_Init+0x304>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046a4:	4a0f      	ldr	r2, [pc, #60]	@ (80046e4 <HAL_GPIO_Init+0x304>)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	2b0f      	cmp	r3, #15
 80046b4:	f67f aea2 	bls.w	80043fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	3724      	adds	r7, #36	@ 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40013800 	.word	0x40013800
 80046d0:	40020000 	.word	0x40020000
 80046d4:	40020400 	.word	0x40020400
 80046d8:	40020800 	.word	0x40020800
 80046dc:	40020c00 	.word	0x40020c00
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40013c00 	.word	0x40013c00

080046e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	807b      	strh	r3, [r7, #2]
 80046f4:	4613      	mov	r3, r2
 80046f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046f8:	787b      	ldrb	r3, [r7, #1]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046fe:	887a      	ldrh	r2, [r7, #2]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004704:	e003      	b.n	800470e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004706:	887b      	ldrh	r3, [r7, #2]
 8004708:	041a      	lsls	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	619a      	str	r2, [r3, #24]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	460b      	mov	r3, r1
 8004724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800472c:	887a      	ldrh	r2, [r7, #2]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	041a      	lsls	r2, r3, #16
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	43d9      	mvns	r1, r3
 8004738:	887b      	ldrh	r3, [r7, #2]
 800473a:	400b      	ands	r3, r1
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	619a      	str	r2, [r3, #24]
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e12b      	b.n	80049ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fd ff5a 	bl	8002630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2224      	movs	r2, #36	@ 0x24
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047b4:	f004 ff76 	bl	80096a4 <HAL_RCC_GetPCLK1Freq>
 80047b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4a81      	ldr	r2, [pc, #516]	@ (80049c4 <HAL_I2C_Init+0x274>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d807      	bhi.n	80047d4 <HAL_I2C_Init+0x84>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a80      	ldr	r2, [pc, #512]	@ (80049c8 <HAL_I2C_Init+0x278>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bf94      	ite	ls
 80047cc:	2301      	movls	r3, #1
 80047ce:	2300      	movhi	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e006      	b.n	80047e2 <HAL_I2C_Init+0x92>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4a7d      	ldr	r2, [pc, #500]	@ (80049cc <HAL_I2C_Init+0x27c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	bf94      	ite	ls
 80047dc:	2301      	movls	r3, #1
 80047de:	2300      	movhi	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0e7      	b.n	80049ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a78      	ldr	r2, [pc, #480]	@ (80049d0 <HAL_I2C_Init+0x280>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	0c9b      	lsrs	r3, r3, #18
 80047f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a6a      	ldr	r2, [pc, #424]	@ (80049c4 <HAL_I2C_Init+0x274>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d802      	bhi.n	8004824 <HAL_I2C_Init+0xd4>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3301      	adds	r3, #1
 8004822:	e009      	b.n	8004838 <HAL_I2C_Init+0xe8>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	4a69      	ldr	r2, [pc, #420]	@ (80049d4 <HAL_I2C_Init+0x284>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	3301      	adds	r3, #1
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	430b      	orrs	r3, r1
 800483e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800484a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	495c      	ldr	r1, [pc, #368]	@ (80049c4 <HAL_I2C_Init+0x274>)
 8004854:	428b      	cmp	r3, r1
 8004856:	d819      	bhi.n	800488c <HAL_I2C_Init+0x13c>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e59      	subs	r1, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	fbb1 f3f3 	udiv	r3, r1, r3
 8004866:	1c59      	adds	r1, r3, #1
 8004868:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800486c:	400b      	ands	r3, r1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_I2C_Init+0x138>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1e59      	subs	r1, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004880:	3301      	adds	r3, #1
 8004882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004886:	e051      	b.n	800492c <HAL_I2C_Init+0x1dc>
 8004888:	2304      	movs	r3, #4
 800488a:	e04f      	b.n	800492c <HAL_I2C_Init+0x1dc>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d111      	bne.n	80048b8 <HAL_I2C_Init+0x168>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1e58      	subs	r0, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	440b      	add	r3, r1
 80048a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e012      	b.n	80048de <HAL_I2C_Init+0x18e>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1e58      	subs	r0, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	0099      	lsls	r1, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ce:	3301      	adds	r3, #1
 80048d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Init+0x196>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e022      	b.n	800492c <HAL_I2C_Init+0x1dc>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10e      	bne.n	800490c <HAL_I2C_Init+0x1bc>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e58      	subs	r0, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	440b      	add	r3, r1
 80048fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004900:	3301      	adds	r3, #1
 8004902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800490a:	e00f      	b.n	800492c <HAL_I2C_Init+0x1dc>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e58      	subs	r0, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6859      	ldr	r1, [r3, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	0099      	lsls	r1, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	6809      	ldr	r1, [r1, #0]
 8004930:	4313      	orrs	r3, r2
 8004932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800495a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6911      	ldr	r1, [r2, #16]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68d2      	ldr	r2, [r2, #12]
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	430b      	orrs	r3, r1
 800496e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	000186a0 	.word	0x000186a0
 80049c8:	001e847f 	.word	0x001e847f
 80049cc:	003d08ff 	.word	0x003d08ff
 80049d0:	431bde83 	.word	0x431bde83
 80049d4:	10624dd3 	.word	0x10624dd3

080049d8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ea:	2b80      	cmp	r3, #128	@ 0x80
 80049ec:	d103      	bne.n	80049f6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]
  }
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	817b      	strh	r3, [r7, #10]
 8004a16:	460b      	mov	r3, r1
 8004a18:	813b      	strh	r3, [r7, #8]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a1e:	f7fe fad1 	bl	8002fc4 <HAL_GetTick>
 8004a22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	f040 80d9 	bne.w	8004be4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2319      	movs	r3, #25
 8004a38:	2201      	movs	r2, #1
 8004a3a:	496d      	ldr	r1, [pc, #436]	@ (8004bf0 <HAL_I2C_Mem_Write+0x1ec>)
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f002 fd2b 	bl	8007498 <I2C_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e0cc      	b.n	8004be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_I2C_Mem_Write+0x56>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e0c5      	b.n	8004be6 <HAL_I2C_Mem_Write+0x1e2>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d007      	beq.n	8004a80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2221      	movs	r2, #33	@ 0x21
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2240      	movs	r2, #64	@ 0x40
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a4d      	ldr	r2, [pc, #308]	@ (8004bf4 <HAL_I2C_Mem_Write+0x1f0>)
 8004ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ac2:	88f8      	ldrh	r0, [r7, #6]
 8004ac4:	893a      	ldrh	r2, [r7, #8]
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f002 f99e 	bl	8006e14 <I2C_RequestMemoryWrite>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d052      	beq.n	8004b84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e081      	b.n	8004be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f002 fdf0 	bl	80076cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d107      	bne.n	8004b0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e06b      	b.n	8004be6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	781a      	ldrb	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d11b      	bne.n	8004b84 <HAL_I2C_Mem_Write+0x180>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d017      	beq.n	8004b84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1aa      	bne.n	8004ae2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f002 fde3 	bl	800775c <I2C_WaitOnBTFFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00d      	beq.n	8004bb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d107      	bne.n	8004bb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e016      	b.n	8004be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	00100002 	.word	0x00100002
 8004bf4:	ffff0000 	.word	0xffff0000

08004bf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	@ 0x30
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	817b      	strh	r3, [r7, #10]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	813b      	strh	r3, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c12:	f7fe f9d7 	bl	8002fc4 <HAL_GetTick>
 8004c16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	f040 8214 	bne.w	800504e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2319      	movs	r3, #25
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	497b      	ldr	r1, [pc, #492]	@ (8004e1c <HAL_I2C_Mem_Read+0x224>)
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f002 fc31 	bl	8007498 <I2C_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e207      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_I2C_Mem_Read+0x56>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e200      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d007      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2222      	movs	r2, #34	@ 0x22
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2240      	movs	r2, #64	@ 0x40
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a5b      	ldr	r2, [pc, #364]	@ (8004e20 <HAL_I2C_Mem_Read+0x228>)
 8004cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cb6:	88f8      	ldrh	r0, [r7, #6]
 8004cb8:	893a      	ldrh	r2, [r7, #8]
 8004cba:	8979      	ldrh	r1, [r7, #10]
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f002 f93a 	bl	8006f40 <I2C_RequestMemoryRead>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1bc      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d113      	bne.n	8004d06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	623b      	str	r3, [r7, #32]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	623b      	str	r3, [r7, #32]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e190      	b.n	8005028 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d11b      	bne.n	8004d46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e170      	b.n	8005028 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d11b      	bne.n	8004d86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	e150      	b.n	8005028 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d9c:	e144      	b.n	8005028 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	f200 80f1 	bhi.w	8004f8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d123      	bne.n	8004df8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f002 fd4b 	bl	8007850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e145      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004df6:	e117      	b.n	8005028 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d14e      	bne.n	8004e9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e06:	2200      	movs	r2, #0
 8004e08:	4906      	ldr	r1, [pc, #24]	@ (8004e24 <HAL_I2C_Mem_Read+0x22c>)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f002 fb44 	bl	8007498 <I2C_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e11a      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
 8004e1a:	bf00      	nop
 8004e1c:	00100002 	.word	0x00100002
 8004e20:	ffff0000 	.word	0xffff0000
 8004e24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e9c:	e0c4      	b.n	8005028 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	496c      	ldr	r1, [pc, #432]	@ (8005058 <HAL_I2C_Mem_Read+0x460>)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f002 faf5 	bl	8007498 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0cb      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f00:	2200      	movs	r2, #0
 8004f02:	4955      	ldr	r1, [pc, #340]	@ (8005058 <HAL_I2C_Mem_Read+0x460>)
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f002 fac7 	bl	8007498 <I2C_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e09d      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f88:	e04e      	b.n	8005028 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f002 fc5e 	bl	8007850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e058      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d124      	bne.n	8005028 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d107      	bne.n	8004ff6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	f47f aeb6 	bne.w	8004d9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800504e:	2302      	movs	r3, #2
  }
}
 8005050:	4618      	mov	r0, r3
 8005052:	3728      	adds	r7, #40	@ 0x28
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	00010004 	.word	0x00010004

0800505c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	@ 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4603      	mov	r3, r0
 800506c:	817b      	strh	r3, [r7, #10]
 800506e:	460b      	mov	r3, r1
 8005070:	813b      	strh	r3, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800507a:	f7fd ffa3 	bl	8002fc4 <HAL_GetTick>
 800507e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b20      	cmp	r3, #32
 800508a:	f040 8136 	bne.w	80052fa <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800508e:	4b9d      	ldr	r3, [pc, #628]	@ (8005304 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	08db      	lsrs	r3, r3, #3
 8005094:	4a9c      	ldr	r2, [pc, #624]	@ (8005308 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0a1a      	lsrs	r2, r3, #8
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009a      	lsls	r2, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d112      	bne.n	80050da <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80050d6:	2302      	movs	r3, #2
 80050d8:	e110      	b.n	80052fc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d0df      	beq.n	80050a8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_I2C_Mem_Write_DMA+0x9a>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e102      	b.n	80052fc <HAL_I2C_Mem_Write_DMA+0x2a0>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d007      	beq.n	800511c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800512a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2221      	movs	r2, #33	@ 0x21
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2240      	movs	r2, #64	@ 0x40
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005146:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800514c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a6c      	ldr	r2, [pc, #432]	@ (800530c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800515c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800515e:	897a      	ldrh	r2, [r7, #10]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005164:	893a      	ldrh	r2, [r7, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 80a9 	beq.w	80052d2 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02a      	beq.n	80051de <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518c:	4a60      	ldr	r2, [pc, #384]	@ (8005310 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800518e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005194:	4a5f      	ldr	r2, [pc, #380]	@ (8005314 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8005196:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	2200      	movs	r2, #0
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a4:	2200      	movs	r2, #0
 80051a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ac:	2200      	movs	r2, #0
 80051ae:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b4:	2200      	movs	r2, #0
 80051b6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	4619      	mov	r1, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3310      	adds	r3, #16
 80051c8:	461a      	mov	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ce:	f7fe fe09 	bl	8003de4 <HAL_DMA_Start_IT>
 80051d2:	4603      	mov	r3, r0
 80051d4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80051d6:	7efb      	ldrb	r3, [r7, #27]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d166      	bne.n	80052aa <HAL_I2C_Mem_Write_DMA+0x24e>
 80051dc:	e013      	b.n	8005206 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e07a      	b.n	80052fc <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005206:	88f8      	ldrh	r0, [r7, #6]
 8005208:	893a      	ldrh	r2, [r7, #8]
 800520a:	8979      	ldrh	r1, [r7, #10]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	2323      	movs	r3, #35	@ 0x23
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	4603      	mov	r3, r0
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f001 fdfc 	bl	8006e14 <I2C_RequestMemoryWrite>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d022      	beq.n	8005268 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fe34 	bl	8003e94 <HAL_DMA_Abort_IT>
 800522c:	4603      	mov	r3, r0
 800522e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005234:	2200      	movs	r2, #0
 8005236:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005246:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e049      	b.n	80052fc <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005294:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052a4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e028      	b.n	80052fc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	f043 0210 	orr.w	r2, r3, #16
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e014      	b.n	80052fc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
  }
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3720      	adds	r7, #32
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	2000002c 	.word	0x2000002c
 8005308:	14f8b589 	.word	0x14f8b589
 800530c:	ffff0000 	.word	0xffff0000
 8005310:	08007111 	.word	0x08007111
 8005314:	080072cf 	.word	0x080072cf

08005318 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	@ 0x30
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	4608      	mov	r0, r1
 8005322:	4611      	mov	r1, r2
 8005324:	461a      	mov	r2, r3
 8005326:	4603      	mov	r3, r0
 8005328:	817b      	strh	r3, [r7, #10]
 800532a:	460b      	mov	r3, r1
 800532c:	813b      	strh	r3, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005332:	f7fd fe47 	bl	8002fc4 <HAL_GetTick>
 8005336:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b20      	cmp	r3, #32
 8005346:	f040 8172 	bne.w	800562e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800534a:	4b93      	ldr	r3, [pc, #588]	@ (8005598 <HAL_I2C_Mem_Read_DMA+0x280>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	08db      	lsrs	r3, r3, #3
 8005350:	4a92      	ldr	r2, [pc, #584]	@ (800559c <HAL_I2C_Mem_Read_DMA+0x284>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	0a1a      	lsrs	r2, r3, #8
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009a      	lsls	r2, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	3b01      	subs	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d112      	bne.n	8005396 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	e14c      	b.n	8005630 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d0df      	beq.n	8005364 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_I2C_Mem_Read_DMA+0x9a>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e13e      	b.n	8005630 <HAL_I2C_Mem_Read_DMA+0x318>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d007      	beq.n	80053d8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2222      	movs	r2, #34	@ 0x22
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2240      	movs	r2, #64	@ 0x40
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a62      	ldr	r2, [pc, #392]	@ (80055a0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005418:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800541a:	897a      	ldrh	r2, [r7, #10]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005420:	893a      	ldrh	r2, [r7, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 80cc 	beq.w	80055d4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02d      	beq.n	80054a0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	4a56      	ldr	r2, [pc, #344]	@ (80055a4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800544a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005450:	4a55      	ldr	r2, [pc, #340]	@ (80055a8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005452:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005458:	2200      	movs	r2, #0
 800545a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005460:	2200      	movs	r2, #0
 8005462:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005468:	2200      	movs	r2, #0
 800546a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	2200      	movs	r2, #0
 8005472:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3310      	adds	r3, #16
 800547e:	4619      	mov	r1, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	461a      	mov	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548a:	f7fe fcab 	bl	8003de4 <HAL_DMA_Start_IT>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005494:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 8087 	bne.w	80055ac <HAL_I2C_Mem_Read_DMA+0x294>
 800549e:	e013      	b.n	80054c8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0b3      	b.n	8005630 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80054c8:	88f8      	ldrh	r0, [r7, #6]
 80054ca:	893a      	ldrh	r2, [r7, #8]
 80054cc:	8979      	ldrh	r1, [r7, #10]
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	2323      	movs	r3, #35	@ 0x23
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4603      	mov	r3, r0
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f001 fd31 	bl	8006f40 <I2C_RequestMemoryRead>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d023      	beq.n	800552c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe fcd3 	bl	8003e94 <HAL_DMA_Abort_IT>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	2200      	movs	r2, #0
 80054fa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800550a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e081      	b.n	8005630 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005530:	2b01      	cmp	r3, #1
 8005532:	d108      	bne.n	8005546 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e007      	b.n	8005556 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005554:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005582:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e049      	b.n	800562a <HAL_I2C_Mem_Read_DMA+0x312>
 8005596:	bf00      	nop
 8005598:	2000002c 	.word	0x2000002c
 800559c:	14f8b589 	.word	0x14f8b589
 80055a0:	ffff0000 	.word	0xffff0000
 80055a4:	08007111 	.word	0x08007111
 80055a8:	080072cf 	.word	0x080072cf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	f043 0210 	orr.w	r2, r3, #16
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e02d      	b.n	8005630 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80055d4:	88f8      	ldrh	r0, [r7, #6]
 80055d6:	893a      	ldrh	r2, [r7, #8]
 80055d8:	8979      	ldrh	r1, [r7, #10]
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	2323      	movs	r3, #35	@ 0x23
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	4603      	mov	r3, r0
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f001 fcab 	bl	8006f40 <I2C_RequestMemoryRead>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e01d      	b.n	8005630 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005618:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3728      	adds	r7, #40	@ 0x28
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005658:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005660:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b10      	cmp	r3, #16
 8005666:	d003      	beq.n	8005670 <HAL_I2C_EV_IRQHandler+0x38>
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b40      	cmp	r3, #64	@ 0x40
 800566c:	f040 80c1 	bne.w	80057f2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10d      	bne.n	80056a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005690:	d003      	beq.n	800569a <HAL_I2C_EV_IRQHandler+0x62>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005698:	d101      	bne.n	800569e <HAL_I2C_EV_IRQHandler+0x66>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_I2C_EV_IRQHandler+0x68>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	f000 8132 	beq.w	800590a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00c      	beq.n	80056ca <HAL_I2C_EV_IRQHandler+0x92>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	0a5b      	lsrs	r3, r3, #9
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f002 f953 	bl	8007968 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fd87 	bl	80061d6 <I2C_Master_SB>
 80056c8:	e092      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	08db      	lsrs	r3, r3, #3
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_I2C_EV_IRQHandler+0xb2>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	0a5b      	lsrs	r3, r3, #9
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fdfd 	bl	80062e2 <I2C_Master_ADD10>
 80056e8:	e082      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_I2C_EV_IRQHandler+0xd2>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	0a5b      	lsrs	r3, r3, #9
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fe17 	bl	8006336 <I2C_Master_ADDR>
 8005708:	e072      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d03b      	beq.n	800578e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005724:	f000 80f3 	beq.w	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	09db      	lsrs	r3, r3, #7
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00f      	beq.n	8005754 <HAL_I2C_EV_IRQHandler+0x11c>
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	0a9b      	lsrs	r3, r3, #10
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d009      	beq.n	8005754 <HAL_I2C_EV_IRQHandler+0x11c>
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f9df 	bl	8005b10 <I2C_MasterTransmit_TXE>
 8005752:	e04d      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	089b      	lsrs	r3, r3, #2
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80d6 	beq.w	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	0a5b      	lsrs	r3, r3, #9
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80cf 	beq.w	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	2b21      	cmp	r3, #33	@ 0x21
 8005774:	d103      	bne.n	800577e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fa66 	bl	8005c48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800577c:	e0c7      	b.n	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b40      	cmp	r3, #64	@ 0x40
 8005782:	f040 80c4 	bne.w	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fad4 	bl	8005d34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800578c:	e0bf      	b.n	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800579c:	f000 80b7 	beq.w	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00f      	beq.n	80057cc <HAL_I2C_EV_IRQHandler+0x194>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	0a9b      	lsrs	r3, r3, #10
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d009      	beq.n	80057cc <HAL_I2C_EV_IRQHandler+0x194>
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fb4d 	bl	8005e64 <I2C_MasterReceive_RXNE>
 80057ca:	e011      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 809a 	beq.w	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	0a5b      	lsrs	r3, r3, #9
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8093 	beq.w	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fc03 	bl	8005ff4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ee:	e08e      	b.n	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
 80057f0:	e08d      	b.n	800590e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	e007      	b.n	8005814 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d012      	beq.n	8005846 <HAL_I2C_EV_IRQHandler+0x20e>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	0a5b      	lsrs	r3, r3, #9
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00c      	beq.n	8005846 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800583c:	69b9      	ldr	r1, [r7, #24]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 ffc8 	bl	80067d4 <I2C_Slave_ADDR>
 8005844:	e066      	b.n	8005914 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <HAL_I2C_EV_IRQHandler+0x22e>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	0a5b      	lsrs	r3, r3, #9
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 f802 	bl	8006868 <I2C_Slave_STOPF>
 8005864:	e056      	b.n	8005914 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005866:	7bbb      	ldrb	r3, [r7, #14]
 8005868:	2b21      	cmp	r3, #33	@ 0x21
 800586a:	d002      	beq.n	8005872 <HAL_I2C_EV_IRQHandler+0x23a>
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b29      	cmp	r3, #41	@ 0x29
 8005870:	d125      	bne.n	80058be <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	09db      	lsrs	r3, r3, #7
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <HAL_I2C_EV_IRQHandler+0x266>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	0a9b      	lsrs	r3, r3, #10
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <HAL_I2C_EV_IRQHandler+0x266>
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	089b      	lsrs	r3, r3, #2
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fede 	bl	8006658 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800589c:	e039      	b.n	8005912 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	089b      	lsrs	r3, r3, #2
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d033      	beq.n	8005912 <HAL_I2C_EV_IRQHandler+0x2da>
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	0a5b      	lsrs	r3, r3, #9
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d02d      	beq.n	8005912 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 ff0b 	bl	80066d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058bc:	e029      	b.n	8005912 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	099b      	lsrs	r3, r3, #6
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00f      	beq.n	80058ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	0a9b      	lsrs	r3, r3, #10
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	089b      	lsrs	r3, r3, #2
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 ff16 	bl	8006714 <I2C_SlaveReceive_RXNE>
 80058e8:	e014      	b.n	8005914 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00e      	beq.n	8005914 <HAL_I2C_EV_IRQHandler+0x2dc>
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	0a5b      	lsrs	r3, r3, #9
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 ff44 	bl	8006790 <I2C_SlaveReceive_BTF>
 8005908:	e004      	b.n	8005914 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800590a:	bf00      	nop
 800590c:	e002      	b.n	8005914 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005912:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b08a      	sub	sp, #40	@ 0x28
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005932:	2300      	movs	r3, #0
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800593c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00e      	beq.n	8005968 <HAL_I2C_ER_IRQHandler+0x4e>
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	0a1b      	lsrs	r3, r3, #8
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005966:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	0a5b      	lsrs	r3, r3, #9
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <HAL_I2C_ER_IRQHandler+0x78>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	f043 0302 	orr.w	r3, r3, #2
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005990:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	0a9b      	lsrs	r3, r3, #10
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d03f      	beq.n	8005a1e <HAL_I2C_ER_IRQHandler+0x104>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	0a1b      	lsrs	r3, r3, #8
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d039      	beq.n	8005a1e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80059aa:	7efb      	ldrb	r3, [r7, #27]
 80059ac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059bc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059c4:	7ebb      	ldrb	r3, [r7, #26]
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d112      	bne.n	80059f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10f      	bne.n	80059f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
 80059d2:	2b21      	cmp	r3, #33	@ 0x21
 80059d4:	d008      	beq.n	80059e8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80059d6:	7cfb      	ldrb	r3, [r7, #19]
 80059d8:	2b29      	cmp	r3, #41	@ 0x29
 80059da:	d005      	beq.n	80059e8 <HAL_I2C_ER_IRQHandler+0xce>
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	2b28      	cmp	r3, #40	@ 0x28
 80059e0:	d106      	bne.n	80059f0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b21      	cmp	r3, #33	@ 0x21
 80059e6:	d103      	bne.n	80059f0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 f86d 	bl	8006ac8 <I2C_Slave_AF>
 80059ee:	e016      	b.n	8005a1e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059f8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	f043 0304 	orr.w	r3, r3, #4
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a02:	7efb      	ldrb	r3, [r7, #27]
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d002      	beq.n	8005a0e <HAL_I2C_ER_IRQHandler+0xf4>
 8005a08:	7efb      	ldrb	r3, [r7, #27]
 8005a0a:	2b40      	cmp	r3, #64	@ 0x40
 8005a0c:	d107      	bne.n	8005a1e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	0adb      	lsrs	r3, r3, #11
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00e      	beq.n	8005a48 <HAL_I2C_ER_IRQHandler+0x12e>
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	f043 0308 	orr.w	r3, r3, #8
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005a46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 f8a8 	bl	8006bb0 <I2C_ITError>
  }
}
 8005a60:	bf00      	nop
 8005a62:	3728      	adds	r7, #40	@ 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d150      	bne.n	8005bd8 <I2C_MasterTransmit_TXE+0xc8>
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b21      	cmp	r3, #33	@ 0x21
 8005b3a:	d14d      	bne.n	8005bd8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d01d      	beq.n	8005b7e <I2C_MasterTransmit_TXE+0x6e>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d01a      	beq.n	8005b7e <I2C_MasterTransmit_TXE+0x6e>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b4e:	d016      	beq.n	8005b7e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b5e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2211      	movs	r2, #17
 8005b64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff ff76 	bl	8005a68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b7c:	e060      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b8c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b40      	cmp	r3, #64	@ 0x40
 8005bb6:	d107      	bne.n	8005bc8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fb f909 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bc6:	e03b      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff49 	bl	8005a68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bd6:	e033      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b21      	cmp	r3, #33	@ 0x21
 8005bdc:	d005      	beq.n	8005bea <I2C_MasterTransmit_TXE+0xda>
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	d12d      	bne.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b22      	cmp	r3, #34	@ 0x22
 8005be8:	d12a      	bne.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d108      	bne.n	8005c06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c04:	e01c      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b40      	cmp	r3, #64	@ 0x40
 8005c10:	d103      	bne.n	8005c1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f88e 	bl	8005d34 <I2C_MemoryTransmit_TXE_BTF>
}
 8005c18:	e012      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1e:	781a      	ldrb	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005c3e:	e7ff      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b21      	cmp	r3, #33	@ 0x21
 8005c60:	d164      	bne.n	8005d2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d012      	beq.n	8005c92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005c90:	e04c      	b.n	8005d2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d01d      	beq.n	8005cd4 <I2C_MasterTransmit_BTF+0x8c>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d01a      	beq.n	8005cd4 <I2C_MasterTransmit_BTF+0x8c>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ca4:	d016      	beq.n	8005cd4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cb4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2211      	movs	r2, #17
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff fecb 	bl	8005a68 <HAL_I2C_MasterTxCpltCallback>
}
 8005cd2:	e02b      	b.n	8005d2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ce2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cf2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b40      	cmp	r3, #64	@ 0x40
 8005d0c:	d107      	bne.n	8005d1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fb f85e 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 8005d1c:	e006      	b.n	8005d2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fe9e 	bl	8005a68 <HAL_I2C_MasterTxCpltCallback>
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11d      	bne.n	8005d88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d10b      	bne.n	8005d6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005d6a:	e077      	b.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	121b      	asrs	r3, r3, #8
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005d86:	e069      	b.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10b      	bne.n	8005da8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005da6:	e059      	b.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d152      	bne.n	8005e56 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b22      	cmp	r3, #34	@ 0x22
 8005db4:	d10d      	bne.n	8005dd2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dc4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005dd0:	e044      	b.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d015      	beq.n	8005e08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b21      	cmp	r3, #33	@ 0x21
 8005de0:	d112      	bne.n	8005e08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	781a      	ldrb	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005e06:	e029      	b.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d124      	bne.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b21      	cmp	r3, #33	@ 0x21
 8005e16:	d121      	bne.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e26:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fa ffc2 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 8005e54:	e002      	b.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fe fdbe 	bl	80049d8 <I2C_Flush_DR>
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b22      	cmp	r3, #34	@ 0x22
 8005e76:	f040 80b9 	bne.w	8005fec <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d921      	bls.n	8005ed2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	f040 8096 	bne.w	8005fec <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ece:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005ed0:	e08c      	b.n	8005fec <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d07f      	beq.n	8005fda <I2C_MasterReceive_RXNE+0x176>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d002      	beq.n	8005ee6 <I2C_MasterReceive_RXNE+0x82>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d179      	bne.n	8005fda <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 fc80 	bl	80077ec <I2C_WaitOnSTOPRequestThroughIT>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d14c      	bne.n	8005f8c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f00:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	d10a      	bne.n	8005f62 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fa ff4c 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f60:	e044      	b.n	8005fec <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d002      	beq.n	8005f76 <I2C_MasterReceive_RXNE+0x112>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d103      	bne.n	8005f7e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f7c:	e002      	b.n	8005f84 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2212      	movs	r2, #18
 8005f82:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fd79 	bl	8005a7c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f8a:	e02f      	b.n	8005fec <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fd88 	bl	8005ae8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fd8:	e008      	b.n	8005fec <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fe8:	605a      	str	r2, [r3, #4]
}
 8005fea:	e7ff      	b.n	8005fec <I2C_MasterReceive_RXNE+0x188>
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11b      	bne.n	8006044 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800601a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006042:	e0c4      	b.n	80061ce <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b03      	cmp	r3, #3
 800604c:	d129      	bne.n	80060a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800605c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b04      	cmp	r3, #4
 8006062:	d00a      	beq.n	800607a <I2C_MasterReceive_BTF+0x86>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d007      	beq.n	800607a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006078:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80060a0:	e095      	b.n	80061ce <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d17d      	bne.n	80061a8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d002      	beq.n	80060b8 <I2C_MasterReceive_BTF+0xc4>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d108      	bne.n	80060ca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e016      	b.n	80060f8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d002      	beq.n	80060d6 <I2C_MasterReceive_BTF+0xe2>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d108      	bne.n	80060e8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e007      	b.n	80060f8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006152:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b40      	cmp	r3, #64	@ 0x40
 8006166:	d10a      	bne.n	800617e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fa fe3e 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 800617c:	e027      	b.n	80061ce <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d002      	beq.n	8006192 <I2C_MasterReceive_BTF+0x19e>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b20      	cmp	r3, #32
 8006190:	d103      	bne.n	800619a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	@ 0x30
 8006198:	e002      	b.n	80061a0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2212      	movs	r2, #18
 800619e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff fc6b 	bl	8005a7c <HAL_I2C_MasterRxCpltCallback>
}
 80061a6:	e012      	b.n	80061ce <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b40      	cmp	r3, #64	@ 0x40
 80061e8:	d117      	bne.n	800621a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006202:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006204:	e067      	b.n	80062d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	611a      	str	r2, [r3, #16]
}
 8006218:	e05d      	b.n	80062d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006222:	d133      	bne.n	800628c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b21      	cmp	r3, #33	@ 0x21
 800622e:	d109      	bne.n	8006244 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006234:	b2db      	uxtb	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006240:	611a      	str	r2, [r3, #16]
 8006242:	e008      	b.n	8006256 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <I2C_Master_SB+0x92>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d108      	bne.n	800627a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d032      	beq.n	80062d6 <I2C_Master_SB+0x100>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02d      	beq.n	80062d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006288:	605a      	str	r2, [r3, #4]
}
 800628a:	e024      	b.n	80062d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10e      	bne.n	80062b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006298:	b29b      	uxth	r3, r3
 800629a:	11db      	asrs	r3, r3, #7
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0306 	and.w	r3, r3, #6
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f063 030f 	orn	r3, r3, #15
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	611a      	str	r2, [r3, #16]
}
 80062b0:	e011      	b.n	80062d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d10d      	bne.n	80062d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	b29b      	uxth	r3, r3
 80062c0:	11db      	asrs	r3, r3, #7
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 0306 	and.w	r3, r3, #6
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f063 030e 	orn	r3, r3, #14
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	611a      	str	r2, [r3, #16]
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <I2C_Master_ADD10+0x26>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00c      	beq.n	800632a <I2C_Master_ADD10+0x48>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006328:	605a      	str	r2, [r3, #4]
  }
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006336:	b480      	push	{r7}
 8006338:	b091      	sub	sp, #68	@ 0x44
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006344:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006352:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b22      	cmp	r3, #34	@ 0x22
 800635e:	f040 8169 	bne.w	8006634 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <I2C_Master_ADDR+0x54>
 800636a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800636e:	2b40      	cmp	r3, #64	@ 0x40
 8006370:	d10b      	bne.n	800638a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006372:	2300      	movs	r3, #0
 8006374:	633b      	str	r3, [r7, #48]	@ 0x30
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	633b      	str	r3, [r7, #48]	@ 0x30
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	633b      	str	r3, [r7, #48]	@ 0x30
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	e160      	b.n	800664c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11d      	bne.n	80063ce <I2C_Master_ADDR+0x98>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800639a:	d118      	bne.n	80063ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639c:	2300      	movs	r3, #0
 800639e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80063cc:	e13e      	b.n	800664c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d113      	bne.n	8006400 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d8:	2300      	movs	r3, #0
 80063da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e115      	b.n	800662c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	f040 808a 	bne.w	8006520 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006412:	d137      	bne.n	8006484 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006422:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800642e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006432:	d113      	bne.n	800645c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006442:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006444:	2300      	movs	r3, #0
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	e0e7      	b.n	800662c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645c:	2300      	movs	r3, #0
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	623b      	str	r3, [r7, #32]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e0d3      	b.n	800662c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006486:	2b08      	cmp	r3, #8
 8006488:	d02e      	beq.n	80064e8 <I2C_Master_ADDR+0x1b2>
 800648a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648c:	2b20      	cmp	r3, #32
 800648e:	d02b      	beq.n	80064e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006492:	2b12      	cmp	r3, #18
 8006494:	d102      	bne.n	800649c <I2C_Master_ADDR+0x166>
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	2b01      	cmp	r3, #1
 800649a:	d125      	bne.n	80064e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d00e      	beq.n	80064c0 <I2C_Master_ADDR+0x18a>
 80064a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d00b      	beq.n	80064c0 <I2C_Master_ADDR+0x18a>
 80064a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d008      	beq.n	80064c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e007      	b.n	80064d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	e0a1      	b.n	800662c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f8:	2300      	movs	r3, #0
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e085      	b.n	800662c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d14d      	bne.n	80065c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	2b04      	cmp	r3, #4
 800652e:	d016      	beq.n	800655e <I2C_Master_ADDR+0x228>
 8006530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006532:	2b02      	cmp	r3, #2
 8006534:	d013      	beq.n	800655e <I2C_Master_ADDR+0x228>
 8006536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006538:	2b10      	cmp	r3, #16
 800653a:	d010      	beq.n	800655e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800654a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e007      	b.n	800656e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800656c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800657c:	d117      	bne.n	80065ae <I2C_Master_ADDR+0x278>
 800657e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006580:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006584:	d00b      	beq.n	800659e <I2C_Master_ADDR+0x268>
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	2b01      	cmp	r3, #1
 800658a:	d008      	beq.n	800659e <I2C_Master_ADDR+0x268>
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	2b08      	cmp	r3, #8
 8006590:	d005      	beq.n	800659e <I2C_Master_ADDR+0x268>
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	2b10      	cmp	r3, #16
 8006596:	d002      	beq.n	800659e <I2C_Master_ADDR+0x268>
 8006598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659a:	2b20      	cmp	r3, #32
 800659c:	d107      	bne.n	80065ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	e032      	b.n	800662c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e4:	d117      	bne.n	8006616 <I2C_Master_ADDR+0x2e0>
 80065e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065ec:	d00b      	beq.n	8006606 <I2C_Master_ADDR+0x2d0>
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d008      	beq.n	8006606 <I2C_Master_ADDR+0x2d0>
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d005      	beq.n	8006606 <I2C_Master_ADDR+0x2d0>
 80065fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d002      	beq.n	8006606 <I2C_Master_ADDR+0x2d0>
 8006600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006602:	2b20      	cmp	r3, #32
 8006604:	d107      	bne.n	8006616 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006614:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006632:	e00b      	b.n	800664c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
}
 800664a:	e7ff      	b.n	800664c <I2C_Master_ADDR+0x316>
 800664c:	bf00      	nop
 800664e:	3744      	adds	r7, #68	@ 0x44
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006666:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d02b      	beq.n	80066ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	781a      	ldrb	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d114      	bne.n	80066ca <I2C_SlaveTransmit_TXE+0x72>
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b29      	cmp	r3, #41	@ 0x29
 80066a4:	d111      	bne.n	80066ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2221      	movs	r2, #33	@ 0x21
 80066ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2228      	movs	r2, #40	@ 0x28
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff f9e3 	bl	8005a90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006722:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d02c      	beq.n	8006788 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d114      	bne.n	8006788 <I2C_SlaveReceive_RXNE+0x74>
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b2a      	cmp	r3, #42	@ 0x2a
 8006762:	d111      	bne.n	8006788 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006772:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2222      	movs	r2, #34	@ 0x22
 8006778:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2228      	movs	r2, #40	@ 0x28
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff f98e 	bl	8005aa4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d012      	beq.n	80067c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067ee:	2b28      	cmp	r3, #40	@ 0x28
 80067f0:	d127      	bne.n	8006842 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006800:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	81bb      	strh	r3, [r7, #12]
 8006824:	e002      	b.n	800682c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006834:	89ba      	ldrh	r2, [r7, #12]
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff f93c 	bl	8005ab8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006840:	e00e      	b.n	8006860 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006842:	2300      	movs	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006876:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006886:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006888:	2300      	movs	r3, #0
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	60bb      	str	r3, [r7, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068c4:	d172      	bne.n	80069ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b22      	cmp	r3, #34	@ 0x22
 80068ca:	d002      	beq.n	80068d2 <I2C_Slave_STOPF+0x6a>
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d0:	d135      	bne.n	800693e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	b29a      	uxth	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ee:	f043 0204 	orr.w	r2, r3, #4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006904:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690a:	4618      	mov	r0, r3
 800690c:	f7fd fc6e 	bl	80041ec <HAL_DMA_GetState>
 8006910:	4603      	mov	r3, r0
 8006912:	2b01      	cmp	r3, #1
 8006914:	d049      	beq.n	80069aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691a:	4a69      	ldr	r2, [pc, #420]	@ (8006ac0 <I2C_Slave_STOPF+0x258>)
 800691c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006922:	4618      	mov	r0, r3
 8006924:	f7fd fab6 	bl	8003e94 <HAL_DMA_Abort_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d03d      	beq.n	80069aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800693c:	e035      	b.n	80069aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	f043 0204 	orr.w	r2, r3, #4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006970:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006976:	4618      	mov	r0, r3
 8006978:	f7fd fc38 	bl	80041ec <HAL_DMA_GetState>
 800697c:	4603      	mov	r3, r0
 800697e:	2b01      	cmp	r3, #1
 8006980:	d014      	beq.n	80069ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006986:	4a4e      	ldr	r2, [pc, #312]	@ (8006ac0 <I2C_Slave_STOPF+0x258>)
 8006988:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800698e:	4618      	mov	r0, r3
 8006990:	f7fd fa80 	bl	8003e94 <HAL_DMA_Abort_IT>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800699e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	e000      	b.n	80069ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d03e      	beq.n	8006a34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d112      	bne.n	80069ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f4:	2b40      	cmp	r3, #64	@ 0x40
 80069f6:	d112      	bne.n	8006a1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2c:	f043 0204 	orr.w	r2, r3, #4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8b7 	bl	8006bb0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a42:	e039      	b.n	8006ab8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a48:	d109      	bne.n	8006a5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2228      	movs	r2, #40	@ 0x28
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff f823 	bl	8005aa4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b28      	cmp	r3, #40	@ 0x28
 8006a68:	d111      	bne.n	8006a8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a15      	ldr	r2, [pc, #84]	@ (8006ac4 <I2C_Slave_STOPF+0x25c>)
 8006a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff f824 	bl	8005ad4 <HAL_I2C_ListenCpltCallback>
}
 8006a8c:	e014      	b.n	8006ab8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	2b22      	cmp	r3, #34	@ 0x22
 8006a94:	d002      	beq.n	8006a9c <I2C_Slave_STOPF+0x234>
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	2b22      	cmp	r3, #34	@ 0x22
 8006a9a:	d10d      	bne.n	8006ab8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fe fff6 	bl	8005aa4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	08007349 	.word	0x08007349
 8006ac4:	ffff0000 	.word	0xffff0000

08006ac8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d002      	beq.n	8006aea <I2C_Slave_AF+0x22>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	d129      	bne.n	8006b3e <I2C_Slave_AF+0x76>
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b28      	cmp	r3, #40	@ 0x28
 8006aee:	d126      	bne.n	8006b3e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a2e      	ldr	r2, [pc, #184]	@ (8006bac <I2C_Slave_AF+0xe4>)
 8006af4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b04:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b0e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b1e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fe ffcc 	bl	8005ad4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b3c:	e031      	b.n	8006ba2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b21      	cmp	r3, #33	@ 0x21
 8006b42:	d129      	bne.n	8006b98 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a19      	ldr	r2, [pc, #100]	@ (8006bac <I2C_Slave_AF+0xe4>)
 8006b48:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2221      	movs	r2, #33	@ 0x21
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b6e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b78:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b88:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fd ff24 	bl	80049d8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fe ff7d 	bl	8005a90 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b96:	e004      	b.n	8006ba2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ba0:	615a      	str	r2, [r3, #20]
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	ffff0000 	.word	0xffff0000

08006bb0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bbe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bc6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	d002      	beq.n	8006bd4 <I2C_ITError+0x24>
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b40      	cmp	r3, #64	@ 0x40
 8006bd2:	d10a      	bne.n	8006bea <I2C_ITError+0x3a>
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b22      	cmp	r3, #34	@ 0x22
 8006bd8:	d107      	bne.n	8006bea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006be8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006bf0:	2b28      	cmp	r3, #40	@ 0x28
 8006bf2:	d107      	bne.n	8006c04 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2228      	movs	r2, #40	@ 0x28
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c02:	e015      	b.n	8006c30 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c12:	d00a      	beq.n	8006c2a <I2C_ITError+0x7a>
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b60      	cmp	r3, #96	@ 0x60
 8006c18:	d007      	beq.n	8006c2a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c3e:	d162      	bne.n	8006d06 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c4e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d020      	beq.n	8006ca0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c62:	4a6a      	ldr	r2, [pc, #424]	@ (8006e0c <I2C_ITError+0x25c>)
 8006c64:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fd f912 	bl	8003e94 <HAL_DMA_Abort_IT>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8089 	beq.w	8006d8a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	4798      	blx	r3
 8006c9e:	e074      	b.n	8006d8a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca4:	4a59      	ldr	r2, [pc, #356]	@ (8006e0c <I2C_ITError+0x25c>)
 8006ca6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fd f8f1 	bl	8003e94 <HAL_DMA_Abort_IT>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d068      	beq.n	8006d8a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc2:	2b40      	cmp	r3, #64	@ 0x40
 8006cc4:	d10b      	bne.n	8006cde <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
 8006d04:	e041      	b.n	8006d8a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b60      	cmp	r3, #96	@ 0x60
 8006d10:	d125      	bne.n	8006d5e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2a:	2b40      	cmp	r3, #64	@ 0x40
 8006d2c:	d10b      	bne.n	8006d46 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fe fed0 	bl	8005afc <HAL_I2C_AbortCpltCallback>
 8006d5c:	e015      	b.n	8006d8a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d68:	2b40      	cmp	r3, #64	@ 0x40
 8006d6a:	d10b      	bne.n	8006d84 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691a      	ldr	r2, [r3, #16]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fe feaf 	bl	8005ae8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10e      	bne.n	8006db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d109      	bne.n	8006db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006dc6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d113      	bne.n	8006e04 <I2C_ITError+0x254>
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b28      	cmp	r3, #40	@ 0x28
 8006de0:	d110      	bne.n	8006e04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a0a      	ldr	r2, [pc, #40]	@ (8006e10 <I2C_ITError+0x260>)
 8006de6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fe fe68 	bl	8005ad4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e04:	bf00      	nop
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08007349 	.word	0x08007349
 8006e10:	ffff0000 	.word	0xffff0000

08006e14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	817b      	strh	r3, [r7, #10]
 8006e26:	460b      	mov	r3, r1
 8006e28:	813b      	strh	r3, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fb24 	bl	8007498 <I2C_WaitOnFlagUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00d      	beq.n	8006e72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e64:	d103      	bne.n	8006e6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e05f      	b.n	8006f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e72:	897b      	ldrh	r3, [r7, #10]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	6a3a      	ldr	r2, [r7, #32]
 8006e86:	492d      	ldr	r1, [pc, #180]	@ (8006f3c <I2C_RequestMemoryWrite+0x128>)
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fb7f 	bl	800758c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e04c      	b.n	8006f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb0:	6a39      	ldr	r1, [r7, #32]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fc0a 	bl	80076cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00d      	beq.n	8006eda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d107      	bne.n	8006ed6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e02b      	b.n	8006f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d105      	bne.n	8006eec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ee0:	893b      	ldrh	r3, [r7, #8]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	611a      	str	r2, [r3, #16]
 8006eea:	e021      	b.n	8006f30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006eec:	893b      	ldrh	r3, [r7, #8]
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006efc:	6a39      	ldr	r1, [r7, #32]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 fbe4 	bl	80076cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00d      	beq.n	8006f26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d107      	bne.n	8006f22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e005      	b.n	8006f32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f26:	893b      	ldrh	r3, [r7, #8]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	00010002 	.word	0x00010002

08006f40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	817b      	strh	r3, [r7, #10]
 8006f52:	460b      	mov	r3, r1
 8006f54:	813b      	strh	r3, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 fa86 	bl	8007498 <I2C_WaitOnFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00d      	beq.n	8006fae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fa0:	d103      	bne.n	8006faa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e0aa      	b.n	8007104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fae:	897b      	ldrh	r3, [r7, #10]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006fbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	6a3a      	ldr	r2, [r7, #32]
 8006fc2:	4952      	ldr	r1, [pc, #328]	@ (800710c <I2C_RequestMemoryRead+0x1cc>)
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 fae1 	bl	800758c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e097      	b.n	8007104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fec:	6a39      	ldr	r1, [r7, #32]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fb6c 	bl	80076cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00d      	beq.n	8007016 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d107      	bne.n	8007012 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e076      	b.n	8007104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d105      	bne.n	8007028 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800701c:	893b      	ldrh	r3, [r7, #8]
 800701e:	b2da      	uxtb	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	611a      	str	r2, [r3, #16]
 8007026:	e021      	b.n	800706c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007028:	893b      	ldrh	r3, [r7, #8]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	b29b      	uxth	r3, r3
 800702e:	b2da      	uxtb	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007038:	6a39      	ldr	r1, [r7, #32]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fb46 	bl	80076cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00d      	beq.n	8007062 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	2b04      	cmp	r3, #4
 800704c:	d107      	bne.n	800705e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800705c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e050      	b.n	8007104 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007062:	893b      	ldrh	r3, [r7, #8]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800706c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706e:	6a39      	ldr	r1, [r7, #32]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fb2b 	bl	80076cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007080:	2b04      	cmp	r3, #4
 8007082:	d107      	bne.n	8007094 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007092:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e035      	b.n	8007104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f9ef 	bl	8007498 <I2C_WaitOnFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ce:	d103      	bne.n	80070d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e013      	b.n	8007104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070dc:	897b      	ldrh	r3, [r7, #10]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	4906      	ldr	r1, [pc, #24]	@ (800710c <I2C_RequestMemoryRead+0x1cc>)
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 fa4a 	bl	800758c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	00010002 	.word	0x00010002

08007110 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007124:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800712c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007142:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007150:	2200      	movs	r2, #0
 8007152:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	2200      	movs	r2, #0
 8007162:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007164:	7cfb      	ldrb	r3, [r7, #19]
 8007166:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800716a:	2b21      	cmp	r3, #33	@ 0x21
 800716c:	d007      	beq.n	800717e <I2C_DMAXferCplt+0x6e>
 800716e:	7cfb      	ldrb	r3, [r7, #19]
 8007170:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007174:	2b22      	cmp	r3, #34	@ 0x22
 8007176:	d131      	bne.n	80071dc <I2C_DMAXferCplt+0xcc>
 8007178:	7cbb      	ldrb	r3, [r7, #18]
 800717a:	2b20      	cmp	r3, #32
 800717c:	d12e      	bne.n	80071dc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800718c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007194:	7cfb      	ldrb	r3, [r7, #19]
 8007196:	2b29      	cmp	r3, #41	@ 0x29
 8007198:	d10a      	bne.n	80071b0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2221      	movs	r2, #33	@ 0x21
 800719e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2228      	movs	r2, #40	@ 0x28
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80071a8:	6978      	ldr	r0, [r7, #20]
 80071aa:	f7fe fc71 	bl	8005a90 <HAL_I2C_SlaveTxCpltCallback>
 80071ae:	e00c      	b.n	80071ca <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80071b0:	7cfb      	ldrb	r3, [r7, #19]
 80071b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80071b4:	d109      	bne.n	80071ca <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2222      	movs	r2, #34	@ 0x22
 80071ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2228      	movs	r2, #40	@ 0x28
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071c4:	6978      	ldr	r0, [r7, #20]
 80071c6:	f7fe fc6d 	bl	8005aa4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80071d8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80071da:	e074      	b.n	80072c6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d06e      	beq.n	80072c6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d107      	bne.n	8007202 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007200:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007210:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007218:	d009      	beq.n	800722e <I2C_DMAXferCplt+0x11e>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d006      	beq.n	800722e <I2C_DMAXferCplt+0x11e>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007226:	d002      	beq.n	800722e <I2C_DMAXferCplt+0x11e>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b20      	cmp	r3, #32
 800722c:	d107      	bne.n	800723e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800723c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800724c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800725c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800726c:	6978      	ldr	r0, [r7, #20]
 800726e:	f7fe fc3b 	bl	8005ae8 <HAL_I2C_ErrorCallback>
}
 8007272:	e028      	b.n	80072c6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b40      	cmp	r3, #64	@ 0x40
 8007286:	d10a      	bne.n	800729e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007296:	6978      	ldr	r0, [r7, #20]
 8007298:	f7f9 fdae 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 800729c:	e013      	b.n	80072c6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d002      	beq.n	80072b2 <I2C_DMAXferCplt+0x1a2>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d103      	bne.n	80072ba <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2200      	movs	r2, #0
 80072b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80072b8:	e002      	b.n	80072c0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2212      	movs	r2, #18
 80072be:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80072c0:	6978      	ldr	r0, [r7, #20]
 80072c2:	f7fe fbdb 	bl	8005a7c <HAL_I2C_MasterRxCpltCallback>
}
 80072c6:	bf00      	nop
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072da:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e8:	2200      	movs	r2, #0
 80072ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f8:	2200      	movs	r2, #0
 80072fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7fc ff83 	bl	8004208 <HAL_DMA_GetError>
 8007302:	4603      	mov	r3, r0
 8007304:	2b02      	cmp	r3, #2
 8007306:	d01b      	beq.n	8007340 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007316:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	f043 0210 	orr.w	r2, r3, #16
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f7fe fbd4 	bl	8005ae8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007360:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007362:	4b4b      	ldr	r3, [pc, #300]	@ (8007490 <I2C_DMAAbort+0x148>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	08db      	lsrs	r3, r3, #3
 8007368:	4a4a      	ldr	r2, [pc, #296]	@ (8007494 <I2C_DMAAbort+0x14c>)
 800736a:	fba2 2303 	umull	r2, r3, r2, r3
 800736e:	0a1a      	lsrs	r2, r3, #8
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	00da      	lsls	r2, r3, #3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	f043 0220 	orr.w	r2, r3, #32
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800738e:	e00a      	b.n	80073a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3b01      	subs	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073a4:	d0ea      	beq.n	800737c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b2:	2200      	movs	r2, #0
 80073b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c2:	2200      	movs	r2, #0
 80073c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2200      	movs	r2, #0
 80073da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e8:	2200      	movs	r2, #0
 80073ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f8:	2200      	movs	r2, #0
 80073fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0201 	bic.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b60      	cmp	r3, #96	@ 0x60
 8007416:	d10e      	bne.n	8007436 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2200      	movs	r2, #0
 800742c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800742e:	6978      	ldr	r0, [r7, #20]
 8007430:	f7fe fb64 	bl	8005afc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007434:	e027      	b.n	8007486 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007436:	7cfb      	ldrb	r3, [r7, #19]
 8007438:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800743c:	2b28      	cmp	r3, #40	@ 0x28
 800743e:	d117      	bne.n	8007470 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800745e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2200      	movs	r2, #0
 8007464:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2228      	movs	r2, #40	@ 0x28
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800746e:	e007      	b.n	8007480 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007480:	6978      	ldr	r0, [r7, #20]
 8007482:	f7fe fb31 	bl	8005ae8 <HAL_I2C_ErrorCallback>
}
 8007486:	bf00      	nop
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	2000002c 	.word	0x2000002c
 8007494:	14f8b589 	.word	0x14f8b589

08007498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074a8:	e048      	b.n	800753c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b0:	d044      	beq.n	800753c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b2:	f7fb fd87 	bl	8002fc4 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d302      	bcc.n	80074c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d139      	bne.n	800753c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d10d      	bne.n	80074ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	43da      	mvns	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bf0c      	ite	eq
 80074e4:	2301      	moveq	r3, #1
 80074e6:	2300      	movne	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	e00c      	b.n	8007508 <I2C_WaitOnFlagUntilTimeout+0x70>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	43da      	mvns	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4013      	ands	r3, r2
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf0c      	ite	eq
 8007500:	2301      	moveq	r3, #1
 8007502:	2300      	movne	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	429a      	cmp	r2, r3
 800750c:	d116      	bne.n	800753c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007528:	f043 0220 	orr.w	r2, r3, #32
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e023      	b.n	8007584 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	d10d      	bne.n	8007562 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	43da      	mvns	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4013      	ands	r3, r2
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	e00c      	b.n	800757c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	43da      	mvns	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	4013      	ands	r3, r2
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	bf0c      	ite	eq
 8007574:	2301      	moveq	r3, #1
 8007576:	2300      	movne	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	429a      	cmp	r2, r3
 8007580:	d093      	beq.n	80074aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800759a:	e071      	b.n	8007680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075aa:	d123      	bne.n	80075f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e0:	f043 0204 	orr.w	r2, r3, #4
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e067      	b.n	80076c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d041      	beq.n	8007680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fc:	f7fb fce2 	bl	8002fc4 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d136      	bne.n	8007680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	d10c      	bne.n	8007636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	43da      	mvns	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4013      	ands	r3, r2
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	bf14      	ite	ne
 800762e:	2301      	movne	r3, #1
 8007630:	2300      	moveq	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	e00b      	b.n	800764e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	43da      	mvns	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4013      	ands	r3, r2
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	bf14      	ite	ne
 8007648:	2301      	movne	r3, #1
 800764a:	2300      	moveq	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d016      	beq.n	8007680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766c:	f043 0220 	orr.w	r2, r3, #32
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e021      	b.n	80076c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	0c1b      	lsrs	r3, r3, #16
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b01      	cmp	r3, #1
 8007688:	d10c      	bne.n	80076a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	43da      	mvns	r2, r3
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf14      	ite	ne
 800769c:	2301      	movne	r3, #1
 800769e:	2300      	moveq	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	e00b      	b.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	43da      	mvns	r2, r3
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4013      	ands	r3, r2
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bf14      	ite	ne
 80076b6:	2301      	movne	r3, #1
 80076b8:	2300      	moveq	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f47f af6d 	bne.w	800759c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076d8:	e034      	b.n	8007744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f915 	bl	800790a <I2C_IsAcknowledgeFailed>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e034      	b.n	8007754 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d028      	beq.n	8007744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f2:	f7fb fc67 	bl	8002fc4 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d302      	bcc.n	8007708 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11d      	bne.n	8007744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007712:	2b80      	cmp	r3, #128	@ 0x80
 8007714:	d016      	beq.n	8007744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007730:	f043 0220 	orr.w	r2, r3, #32
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e007      	b.n	8007754 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774e:	2b80      	cmp	r3, #128	@ 0x80
 8007750:	d1c3      	bne.n	80076da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007768:	e034      	b.n	80077d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f8cd 	bl	800790a <I2C_IsAcknowledgeFailed>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e034      	b.n	80077e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d028      	beq.n	80077d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007782:	f7fb fc1f 	bl	8002fc4 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	d302      	bcc.n	8007798 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d11d      	bne.n	80077d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d016      	beq.n	80077d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c0:	f043 0220 	orr.w	r2, r3, #32
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e007      	b.n	80077e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d1c3      	bne.n	800776a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80077f8:	4b13      	ldr	r3, [pc, #76]	@ (8007848 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	08db      	lsrs	r3, r3, #3
 80077fe:	4a13      	ldr	r2, [pc, #76]	@ (800784c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007800:	fba2 2303 	umull	r2, r3, r2, r3
 8007804:	0a1a      	lsrs	r2, r3, #8
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3b01      	subs	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d107      	bne.n	800782a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	f043 0220 	orr.w	r2, r3, #32
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e008      	b.n	800783c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007838:	d0e9      	beq.n	800780e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	2000002c 	.word	0x2000002c
 800784c:	14f8b589 	.word	0x14f8b589

08007850 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800785c:	e049      	b.n	80078f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b10      	cmp	r3, #16
 800786a:	d119      	bne.n	80078a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0210 	mvn.w	r2, #16
 8007874:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e030      	b.n	8007902 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a0:	f7fb fb90 	bl	8002fc4 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d302      	bcc.n	80078b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11d      	bne.n	80078f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c0:	2b40      	cmp	r3, #64	@ 0x40
 80078c2:	d016      	beq.n	80078f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	f043 0220 	orr.w	r2, r3, #32
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e007      	b.n	8007902 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fc:	2b40      	cmp	r3, #64	@ 0x40
 80078fe:	d1ae      	bne.n	800785e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800791c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007920:	d11b      	bne.n	800795a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800792a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007946:	f043 0204 	orr.w	r2, r3, #4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007978:	d103      	bne.n	8007982 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007980:	e007      	b.n	8007992 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007986:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800798a:	d102      	bne.n	8007992 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2208      	movs	r2, #8
 8007990:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b086      	sub	sp, #24
 80079a2:	af02      	add	r7, sp, #8
 80079a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e101      	b.n	8007bb4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f006 f936 	bl	800dc3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2203      	movs	r2, #3
 80079d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079de:	d102      	bne.n	80079e6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f002 fc8d 	bl	800a30a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7c1a      	ldrb	r2, [r3, #16]
 80079f8:	f88d 2000 	strb.w	r2, [sp]
 80079fc:	3304      	adds	r3, #4
 80079fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a00:	f002 fb6c 	bl	800a0dc <USB_CoreInit>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e0ce      	b.n	8007bb4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f002 fc85 	bl	800a32c <USB_SetCurrentMode>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e0bf      	b.n	8007bb4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]
 8007a38:	e04a      	b.n	8007ad0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a3a:	7bfa      	ldrb	r2, [r7, #15]
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	3315      	adds	r3, #21
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007a4e:	7bfa      	ldrb	r2, [r7, #15]
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	3314      	adds	r3, #20
 8007a5e:	7bfa      	ldrb	r2, [r7, #15]
 8007a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a62:	7bfa      	ldrb	r2, [r7, #15]
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	b298      	uxth	r0, r3
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	00db      	lsls	r3, r3, #3
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	440b      	add	r3, r1
 8007a74:	332e      	adds	r3, #46	@ 0x2e
 8007a76:	4602      	mov	r2, r0
 8007a78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a7a:	7bfa      	ldrb	r2, [r7, #15]
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	440b      	add	r3, r1
 8007a88:	3318      	adds	r3, #24
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a8e:	7bfa      	ldrb	r2, [r7, #15]
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	331c      	adds	r3, #28
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007aa2:	7bfa      	ldrb	r2, [r7, #15]
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	440b      	add	r3, r1
 8007ab0:	3320      	adds	r3, #32
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007ab6:	7bfa      	ldrb	r2, [r7, #15]
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3324      	adds	r3, #36	@ 0x24
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	3301      	adds	r3, #1
 8007ace:	73fb      	strb	r3, [r7, #15]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	791b      	ldrb	r3, [r3, #4]
 8007ad4:	7bfa      	ldrb	r2, [r7, #15]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d3af      	bcc.n	8007a3a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
 8007ade:	e044      	b.n	8007b6a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ae0:	7bfa      	ldrb	r2, [r7, #15]
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007af6:	7bfa      	ldrb	r2, [r7, #15]
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	440b      	add	r3, r1
 8007b04:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007b08:	7bfa      	ldrb	r2, [r7, #15]
 8007b0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007b0c:	7bfa      	ldrb	r2, [r7, #15]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b22:	7bfa      	ldrb	r2, [r7, #15]
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	4613      	mov	r3, r2
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	440b      	add	r3, r1
 8007b30:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b38:	7bfa      	ldrb	r2, [r7, #15]
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007b4e:	7bfa      	ldrb	r2, [r7, #15]
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	3301      	adds	r3, #1
 8007b68:	73fb      	strb	r3, [r7, #15]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	791b      	ldrb	r3, [r3, #4]
 8007b6e:	7bfa      	ldrb	r2, [r7, #15]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d3b5      	bcc.n	8007ae0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7c1a      	ldrb	r2, [r3, #16]
 8007b7c:	f88d 2000 	strb.w	r2, [sp]
 8007b80:	3304      	adds	r3, #4
 8007b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b84:	f002 fc1e 	bl	800a3c4 <USB_DevInit>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2202      	movs	r2, #2
 8007b92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e00c      	b.n	8007bb4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f003 fc68 	bl	800b482 <USB_DevDisconnect>

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_PCD_Start+0x1c>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	e022      	b.n	8007c1e <HAL_PCD_Start+0x62>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d009      	beq.n	8007c00 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d105      	bne.n	8007c00 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f002 fb6f 	bl	800a2e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f003 fc16 	bl	800b440 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007c26:	b590      	push	{r4, r7, lr}
 8007c28:	b08d      	sub	sp, #52	@ 0x34
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f003 fcd4 	bl	800b5ea <USB_GetMode>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f040 848c 	bne.w	8008562 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f003 fc38 	bl	800b4c4 <USB_ReadInterrupts>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 8482 	beq.w	8008560 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	0a1b      	lsrs	r3, r3, #8
 8007c66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f003 fc25 	bl	800b4c4 <USB_ReadInterrupts>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d107      	bne.n	8007c94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695a      	ldr	r2, [r3, #20]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f002 0202 	and.w	r2, r2, #2
 8007c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f003 fc13 	bl	800b4c4 <USB_ReadInterrupts>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f003 0310 	and.w	r3, r3, #16
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d161      	bne.n	8007d6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699a      	ldr	r2, [r3, #24]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0210 	bic.w	r2, r2, #16
 8007cb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	f003 020f 	and.w	r2, r3, #15
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007cde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ce2:	d124      	bne.n	8007d2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d035      	beq.n	8007d5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	091b      	lsrs	r3, r3, #4
 8007cf8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	6a38      	ldr	r0, [r7, #32]
 8007d04:	f003 fa4a 	bl	800b19c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d14:	441a      	add	r2, r3
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	695a      	ldr	r2, [r3, #20]
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	091b      	lsrs	r3, r3, #4
 8007d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d26:	441a      	add	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	615a      	str	r2, [r3, #20]
 8007d2c:	e016      	b.n	8007d5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007d34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007d38:	d110      	bne.n	8007d5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d40:	2208      	movs	r2, #8
 8007d42:	4619      	mov	r1, r3
 8007d44:	6a38      	ldr	r0, [r7, #32]
 8007d46:	f003 fa29 	bl	800b19c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	695a      	ldr	r2, [r3, #20]
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	091b      	lsrs	r3, r3, #4
 8007d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d56:	441a      	add	r2, r3
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0210 	orr.w	r2, r2, #16
 8007d6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f003 fba7 	bl	800b4c4 <USB_ReadInterrupts>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007d80:	f040 80a7 	bne.w	8007ed2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f003 fbac 	bl	800b4ea <USB_ReadDevAllOutEpInterrupt>
 8007d92:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007d94:	e099      	b.n	8007eca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 808e 	beq.w	8007ebe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da8:	b2d2      	uxtb	r2, r2
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f003 fbd0 	bl	800b552 <USB_ReadDevOutEPInterrupt>
 8007db2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00c      	beq.n	8007dd8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dca:	461a      	mov	r2, r3
 8007dcc:	2301      	movs	r3, #1
 8007dce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007dd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fea4 	bl	8008b20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00c      	beq.n	8007dfc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dee:	461a      	mov	r2, r3
 8007df0:	2308      	movs	r3, #8
 8007df2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007df4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 ff7a 	bl	8008cf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e12:	461a      	mov	r2, r3
 8007e14:	2310      	movs	r3, #16
 8007e16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d030      	beq.n	8007e84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2a:	2b80      	cmp	r3, #128	@ 0x80
 8007e2c:	d109      	bne.n	8007e42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e44:	4613      	mov	r3, r2
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	4413      	add	r3, r2
 8007e54:	3304      	adds	r3, #4
 8007e56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	78db      	ldrb	r3, [r3, #3]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d108      	bne.n	8007e72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2200      	movs	r2, #0
 8007e64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f005 ffe1 	bl	800de34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e7e:	461a      	mov	r2, r3
 8007e80:	2302      	movs	r3, #2
 8007e82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d008      	beq.n	8007ea0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	2320      	movs	r3, #32
 8007e9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d009      	beq.n	8007ebe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ebc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec6:	085b      	lsrs	r3, r3, #1
 8007ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f47f af62 	bne.w	8007d96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f003 faf4 	bl	800b4c4 <USB_ReadInterrupts>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ee2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ee6:	f040 80db 	bne.w	80080a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f003 fb15 	bl	800b51e <USB_ReadDevAllInEpInterrupt>
 8007ef4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007efa:	e0cd      	b.n	8008098 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80c2 	beq.w	800808c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	4611      	mov	r1, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f003 fb3b 	bl	800b58e <USB_ReadDevInEPInterrupt>
 8007f18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d057      	beq.n	8007fd4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	43db      	mvns	r3, r3
 8007f3e:	69f9      	ldr	r1, [r7, #28]
 8007f40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f44:	4013      	ands	r3, r2
 8007f46:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f54:	461a      	mov	r2, r3
 8007f56:	2301      	movs	r3, #1
 8007f58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	799b      	ldrb	r3, [r3, #6]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d132      	bne.n	8007fc8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f66:	4613      	mov	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	3320      	adds	r3, #32
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f78:	4613      	mov	r3, r2
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4403      	add	r3, r0
 8007f82:	331c      	adds	r3, #28
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4419      	add	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4403      	add	r3, r0
 8007f96:	3320      	adds	r3, #32
 8007f98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d113      	bne.n	8007fc8 <HAL_PCD_IRQHandler+0x3a2>
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	3324      	adds	r3, #36	@ 0x24
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d108      	bne.n	8007fc8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	f003 fb42 	bl	800b64c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f005 feb5 	bl	800dd3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f003 0308 	and.w	r3, r3, #8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fea:	461a      	mov	r2, r3
 8007fec:	2308      	movs	r3, #8
 8007fee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f003 0310 	and.w	r3, r3, #16
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d008      	beq.n	800800c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008006:	461a      	mov	r2, r3
 8008008:	2310      	movs	r3, #16
 800800a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d008      	beq.n	8008028 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008022:	461a      	mov	r2, r3
 8008024:	2340      	movs	r3, #64	@ 0x40
 8008026:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d023      	beq.n	800807a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008032:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008034:	6a38      	ldr	r0, [r7, #32]
 8008036:	f002 fb29 	bl	800a68c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800803a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800803c:	4613      	mov	r3, r2
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	3310      	adds	r3, #16
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	4413      	add	r3, r2
 800804a:	3304      	adds	r3, #4
 800804c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	78db      	ldrb	r3, [r3, #3]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d108      	bne.n	8008068 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2200      	movs	r2, #0
 800805a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	b2db      	uxtb	r3, r3
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f005 fef8 	bl	800de58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008074:	461a      	mov	r2, r3
 8008076:	2302      	movs	r3, #2
 8008078:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008084:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fcbd 	bl	8008a06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	3301      	adds	r3, #1
 8008090:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809a:	2b00      	cmp	r3, #0
 800809c:	f47f af2e 	bne.w	8007efc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f003 fa0d 	bl	800b4c4 <USB_ReadInterrupts>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080b4:	d122      	bne.n	80080fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d108      	bne.n	80080e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fea4 	bl	8008e2c <HAL_PCDEx_LPM_Callback>
 80080e4:	e002      	b.n	80080ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f005 fe96 	bl	800de18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695a      	ldr	r2, [r3, #20]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80080fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f003 f9df 	bl	800b4c4 <USB_ReadInterrupts>
 8008106:	4603      	mov	r3, r0
 8008108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800810c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008110:	d112      	bne.n	8008138 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b01      	cmp	r3, #1
 8008120:	d102      	bne.n	8008128 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f005 fe52 	bl	800ddcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695a      	ldr	r2, [r3, #20]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008136:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f003 f9c1 	bl	800b4c4 <USB_ReadInterrupts>
 8008142:	4603      	mov	r3, r0
 8008144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800814c:	f040 80b7 	bne.w	80082be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2110      	movs	r1, #16
 800816a:	4618      	mov	r0, r3
 800816c:	f002 fa8e 	bl	800a68c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008170:	2300      	movs	r3, #0
 8008172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008174:	e046      	b.n	8008204 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008182:	461a      	mov	r2, r3
 8008184:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008188:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800818a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80081aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b6:	461a      	mov	r2, r3
 80081b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80081be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ce:	0151      	lsls	r1, r2, #5
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	440a      	add	r2, r1
 80081d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008200:	3301      	adds	r3, #1
 8008202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	791b      	ldrb	r3, [r3, #4]
 8008208:	461a      	mov	r2, r3
 800820a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820c:	4293      	cmp	r3, r2
 800820e:	d3b2      	bcc.n	8008176 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800821e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008222:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7bdb      	ldrb	r3, [r3, #15]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d016      	beq.n	800825a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800823c:	f043 030b 	orr.w	r3, r3, #11
 8008240:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800824a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008252:	f043 030b 	orr.w	r3, r3, #11
 8008256:	6453      	str	r3, [r2, #68]	@ 0x44
 8008258:	e015      	b.n	8008286 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008268:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800826c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008270:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008280:	f043 030b 	orr.w	r3, r3, #11
 8008284:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008294:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008298:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80082a8:	461a      	mov	r2, r3
 80082aa:	f003 f9cf 	bl	800b64c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695a      	ldr	r2, [r3, #20]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80082bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f003 f8fe 	bl	800b4c4 <USB_ReadInterrupts>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d2:	d123      	bne.n	800831c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f003 f994 	bl	800b606 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f002 fa4b 	bl	800a77e <USB_GetDevSpeed>
 80082e8:	4603      	mov	r3, r0
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681c      	ldr	r4, [r3, #0]
 80082f4:	f001 f9ca 	bl	800968c <HAL_RCC_GetHCLKFreq>
 80082f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80082fe:	461a      	mov	r2, r3
 8008300:	4620      	mov	r0, r4
 8008302:	f001 ff4f 	bl	800a1a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f005 fd41 	bl	800dd8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800831a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f003 f8cf 	bl	800b4c4 <USB_ReadInterrupts>
 8008326:	4603      	mov	r3, r0
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b08      	cmp	r3, #8
 800832e:	d10a      	bne.n	8008346 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f005 fd1e 	bl	800dd72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695a      	ldr	r2, [r3, #20]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f002 0208 	and.w	r2, r2, #8
 8008344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f003 f8ba 	bl	800b4c4 <USB_ReadInterrupts>
 8008350:	4603      	mov	r3, r0
 8008352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008356:	2b80      	cmp	r3, #128	@ 0x80
 8008358:	d123      	bne.n	80083a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008366:	2301      	movs	r3, #1
 8008368:	627b      	str	r3, [r7, #36]	@ 0x24
 800836a:	e014      	b.n	8008396 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008370:	4613      	mov	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d105      	bne.n	8008390 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	b2db      	uxtb	r3, r3
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fb0a 	bl	80089a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008392:	3301      	adds	r3, #1
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	791b      	ldrb	r3, [r3, #4]
 800839a:	461a      	mov	r2, r3
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	4293      	cmp	r3, r2
 80083a0:	d3e4      	bcc.n	800836c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f003 f88c 	bl	800b4c4 <USB_ReadInterrupts>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083b6:	d13c      	bne.n	8008432 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083b8:	2301      	movs	r3, #1
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80083bc:	e02b      	b.n	8008416 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d2:	4613      	mov	r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	3318      	adds	r3, #24
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d115      	bne.n	8008410 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80083e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da12      	bge.n	8008410 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ee:	4613      	mov	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	3317      	adds	r3, #23
 80083fa:	2201      	movs	r2, #1
 80083fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008406:	b2db      	uxtb	r3, r3
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 faca 	bl	80089a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008412:	3301      	adds	r3, #1
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	791b      	ldrb	r3, [r3, #4]
 800841a:	461a      	mov	r2, r3
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	4293      	cmp	r3, r2
 8008420:	d3cd      	bcc.n	80083be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	695a      	ldr	r2, [r3, #20]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4618      	mov	r0, r3
 8008438:	f003 f844 	bl	800b4c4 <USB_ReadInterrupts>
 800843c:	4603      	mov	r3, r0
 800843e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008442:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008446:	d156      	bne.n	80084f6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008448:	2301      	movs	r3, #1
 800844a:	627b      	str	r3, [r7, #36]	@ 0x24
 800844c:	e045      	b.n	80084da <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008462:	4613      	mov	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d12e      	bne.n	80084d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008476:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008478:	2b00      	cmp	r3, #0
 800847a:	da2b      	bge.n	80084d4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	0c1a      	lsrs	r2, r3, #16
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008486:	4053      	eors	r3, r2
 8008488:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800848c:	2b00      	cmp	r3, #0
 800848e:	d121      	bne.n	80084d4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008494:	4613      	mov	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80084a2:	2201      	movs	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80084d0:	6053      	str	r3, [r2, #4]
            break;
 80084d2:	e008      	b.n	80084e6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	3301      	adds	r3, #1
 80084d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	791b      	ldrb	r3, [r3, #4]
 80084de:	461a      	mov	r2, r3
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d3b3      	bcc.n	800844e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	695a      	ldr	r2, [r3, #20]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80084f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f002 ffe2 	bl	800b4c4 <USB_ReadInterrupts>
 8008500:	4603      	mov	r3, r0
 8008502:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800850a:	d10a      	bne.n	8008522 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f005 fcb5 	bl	800de7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695a      	ldr	r2, [r3, #20]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f002 ffcc 	bl	800b4c4 <USB_ReadInterrupts>
 800852c:	4603      	mov	r3, r0
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b04      	cmp	r3, #4
 8008534:	d115      	bne.n	8008562 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f005 fca5 	bl	800de98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6859      	ldr	r1, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
 800855e:	e000      	b.n	8008562 <HAL_PCD_IRQHandler+0x93c>
      return;
 8008560:	bf00      	nop
    }
  }
}
 8008562:	3734      	adds	r7, #52	@ 0x34
 8008564:	46bd      	mov	sp, r7
 8008566:	bd90      	pop	{r4, r7, pc}

08008568 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_PCD_SetAddress+0x1a>
 800857e:	2302      	movs	r3, #2
 8008580:	e012      	b.n	80085a8 <HAL_PCD_SetAddress+0x40>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	78fa      	ldrb	r2, [r7, #3]
 8008596:	4611      	mov	r1, r2
 8008598:	4618      	mov	r0, r3
 800859a:	f002 ff2b 	bl	800b3f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	4608      	mov	r0, r1
 80085ba:	4611      	mov	r1, r2
 80085bc:	461a      	mov	r2, r3
 80085be:	4603      	mov	r3, r0
 80085c0:	70fb      	strb	r3, [r7, #3]
 80085c2:	460b      	mov	r3, r1
 80085c4:	803b      	strh	r3, [r7, #0]
 80085c6:	4613      	mov	r3, r2
 80085c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80085ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	da0f      	bge.n	80085f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	f003 020f 	and.w	r2, r3, #15
 80085dc:	4613      	mov	r3, r2
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	3310      	adds	r3, #16
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4413      	add	r3, r2
 80085ea:	3304      	adds	r3, #4
 80085ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	705a      	strb	r2, [r3, #1]
 80085f4:	e00f      	b.n	8008616 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	f003 020f 	and.w	r2, r3, #15
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	4413      	add	r3, r2
 800860c:	3304      	adds	r3, #4
 800860e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	b2da      	uxtb	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008622:	883b      	ldrh	r3, [r7, #0]
 8008624:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	78ba      	ldrb	r2, [r7, #2]
 8008630:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008644:	78bb      	ldrb	r3, [r7, #2]
 8008646:	2b02      	cmp	r3, #2
 8008648:	d102      	bne.n	8008650 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <HAL_PCD_EP_Open+0xae>
 800865a:	2302      	movs	r3, #2
 800865c:	e00e      	b.n	800867c <HAL_PCD_EP_Open+0xcc>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	4618      	mov	r0, r3
 800866e:	f002 f8ab 	bl	800a7c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800867a:	7afb      	ldrb	r3, [r7, #11]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008694:	2b00      	cmp	r3, #0
 8008696:	da0f      	bge.n	80086b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	f003 020f 	and.w	r2, r3, #15
 800869e:	4613      	mov	r3, r2
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	3310      	adds	r3, #16
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4413      	add	r3, r2
 80086ac:	3304      	adds	r3, #4
 80086ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	705a      	strb	r2, [r3, #1]
 80086b6:	e00f      	b.n	80086d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	f003 020f 	and.w	r2, r3, #15
 80086be:	4613      	mov	r3, r2
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	4413      	add	r3, r2
 80086ce:	3304      	adds	r3, #4
 80086d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d101      	bne.n	80086f2 <HAL_PCD_EP_Close+0x6e>
 80086ee:	2302      	movs	r3, #2
 80086f0:	e00e      	b.n	8008710 <HAL_PCD_EP_Close+0x8c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	4618      	mov	r0, r3
 8008702:	f002 f8e9 	bl	800a8d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	460b      	mov	r3, r1
 8008726:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	f003 020f 	and.w	r2, r3, #15
 800872e:	4613      	mov	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4413      	add	r3, r2
 800873e:	3304      	adds	r3, #4
 8008740:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2200      	movs	r2, #0
 8008752:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2200      	movs	r2, #0
 8008758:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800875a:	7afb      	ldrb	r3, [r7, #11]
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	b2da      	uxtb	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	799b      	ldrb	r3, [r3, #6]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d102      	bne.n	8008774 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	799b      	ldrb	r3, [r3, #6]
 800877c:	461a      	mov	r2, r3
 800877e:	6979      	ldr	r1, [r7, #20]
 8008780:	f002 f986 	bl	800aa90 <USB_EPStartXfer>

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80087b0:	681b      	ldr	r3, [r3, #0]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	460b      	mov	r3, r1
 80087cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087ce:	7afb      	ldrb	r3, [r7, #11]
 80087d0:	f003 020f 	and.w	r2, r3, #15
 80087d4:	4613      	mov	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	3310      	adds	r3, #16
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4413      	add	r3, r2
 80087e2:	3304      	adds	r3, #4
 80087e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2200      	movs	r2, #0
 80087f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2201      	movs	r2, #1
 80087fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	b2da      	uxtb	r2, r3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	799b      	ldrb	r3, [r3, #6]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d102      	bne.n	8008818 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6818      	ldr	r0, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	799b      	ldrb	r3, [r3, #6]
 8008820:	461a      	mov	r2, r3
 8008822:	6979      	ldr	r1, [r7, #20]
 8008824:	f002 f934 	bl	800aa90 <USB_EPStartXfer>

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	7912      	ldrb	r2, [r2, #4]
 8008848:	4293      	cmp	r3, r2
 800884a:	d901      	bls.n	8008850 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e04f      	b.n	80088f0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008854:	2b00      	cmp	r3, #0
 8008856:	da0f      	bge.n	8008878 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008858:	78fb      	ldrb	r3, [r7, #3]
 800885a:	f003 020f 	and.w	r2, r3, #15
 800885e:	4613      	mov	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	3310      	adds	r3, #16
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4413      	add	r3, r2
 800886c:	3304      	adds	r3, #4
 800886e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	705a      	strb	r2, [r3, #1]
 8008876:	e00d      	b.n	8008894 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	4613      	mov	r3, r2
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	3304      	adds	r3, #4
 800888c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2201      	movs	r2, #1
 8008898:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	f003 030f 	and.w	r3, r3, #15
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_PCD_EP_SetStall+0x82>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e01d      	b.n	80088f0 <HAL_PCD_EP_SetStall+0xbe>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68f9      	ldr	r1, [r7, #12]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f002 fcc2 	bl	800b24c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7999      	ldrb	r1, [r3, #6]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088e0:	461a      	mov	r2, r3
 80088e2:	f002 feb3 	bl	800b64c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	f003 030f 	and.w	r3, r3, #15
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	7912      	ldrb	r2, [r2, #4]
 800890e:	4293      	cmp	r3, r2
 8008910:	d901      	bls.n	8008916 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e042      	b.n	800899c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800891a:	2b00      	cmp	r3, #0
 800891c:	da0f      	bge.n	800893e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800891e:	78fb      	ldrb	r3, [r7, #3]
 8008920:	f003 020f 	and.w	r2, r3, #15
 8008924:	4613      	mov	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	3310      	adds	r3, #16
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	4413      	add	r3, r2
 8008932:	3304      	adds	r3, #4
 8008934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	705a      	strb	r2, [r3, #1]
 800893c:	e00f      	b.n	800895e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	f003 020f 	and.w	r2, r3, #15
 8008944:	4613      	mov	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	4413      	add	r3, r2
 8008954:	3304      	adds	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	b2da      	uxtb	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_PCD_EP_ClrStall+0x86>
 800897a:	2302      	movs	r3, #2
 800897c:	e00e      	b.n	800899c <HAL_PCD_EP_ClrStall+0xa4>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68f9      	ldr	r1, [r7, #12]
 800898c:	4618      	mov	r0, r3
 800898e:	f002 fccb 	bl	800b328 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80089b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da0c      	bge.n	80089d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	f003 020f 	and.w	r2, r3, #15
 80089be:	4613      	mov	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	3310      	adds	r3, #16
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	4413      	add	r3, r2
 80089cc:	3304      	adds	r3, #4
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	e00c      	b.n	80089ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	f003 020f 	and.w	r2, r3, #15
 80089d8:	4613      	mov	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	4413      	add	r3, r2
 80089e8:	3304      	adds	r3, #4
 80089ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68f9      	ldr	r1, [r7, #12]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f002 faea 	bl	800afcc <USB_EPStopXfer>
 80089f8:	4603      	mov	r3, r0
 80089fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b08a      	sub	sp, #40	@ 0x28
 8008a0a:	af02      	add	r7, sp, #8
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	3310      	adds	r3, #16
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	4413      	add	r3, r2
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	695a      	ldr	r2, [r3, #20]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d901      	bls.n	8008a3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e06b      	b.n	8008b16 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d902      	bls.n	8008a5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	3303      	adds	r3, #3
 8008a5e:	089b      	lsrs	r3, r3, #2
 8008a60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a62:	e02a      	b.n	8008aba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d902      	bls.n	8008a80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	3303      	adds	r3, #3
 8008a84:	089b      	lsrs	r3, r3, #2
 8008a86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68d9      	ldr	r1, [r3, #12]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6978      	ldr	r0, [r7, #20]
 8008a9e:	f002 fb3f 	bl	800b120 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	441a      	add	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	695a      	ldr	r2, [r3, #20]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d809      	bhi.n	8008ae4 <PCD_WriteEmptyTxFifo+0xde>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	695a      	ldr	r2, [r3, #20]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d203      	bcs.n	8008ae4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1bf      	bne.n	8008a64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d811      	bhi.n	8008b14 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	2201      	movs	r2, #1
 8008af8:	fa02 f303 	lsl.w	r3, r2, r3
 8008afc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	6939      	ldr	r1, [r7, #16]
 8008b0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b10:	4013      	ands	r3, r2
 8008b12:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	333c      	adds	r3, #60	@ 0x3c
 8008b38:	3304      	adds	r3, #4
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	799b      	ldrb	r3, [r3, #6]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d17b      	bne.n	8008c4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f003 0308 	and.w	r3, r3, #8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d015      	beq.n	8008b8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	4a61      	ldr	r2, [pc, #388]	@ (8008ce8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	f240 80b9 	bls.w	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80b3 	beq.w	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b82:	461a      	mov	r2, r3
 8008b84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b88:	6093      	str	r3, [r2, #8]
 8008b8a:	e0a7      	b.n	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d009      	beq.n	8008baa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	6093      	str	r3, [r2, #8]
 8008ba8:	e098      	b.n	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f040 8093 	bne.w	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8008ce8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d90f      	bls.n	8008bde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bda:	6093      	str	r3, [r2, #8]
 8008bdc:	e07e      	b.n	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	4413      	add	r3, r2
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1a      	ldr	r2, [r3, #32]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	0159      	lsls	r1, r3, #5
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	440b      	add	r3, r1
 8008c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c0a:	1ad2      	subs	r2, r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d114      	bne.n	8008c40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	f002 fd0e 	bl	800b64c <USB_EP0_OutStart>
 8008c30:	e006      	b.n	8008c40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	441a      	add	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f005 f85e 	bl	800dd08 <HAL_PCD_DataOutStageCallback>
 8008c4c:	e046      	b.n	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	4a26      	ldr	r2, [pc, #152]	@ (8008cec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d124      	bne.n	8008ca0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00a      	beq.n	8008c76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c72:	6093      	str	r3, [r2, #8]
 8008c74:	e032      	b.n	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f003 0320 	and.w	r3, r3, #32
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d008      	beq.n	8008c92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	2320      	movs	r3, #32
 8008c90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f005 f835 	bl	800dd08 <HAL_PCD_DataOutStageCallback>
 8008c9e:	e01d      	b.n	8008cdc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d114      	bne.n	8008cd0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	4613      	mov	r3, r2
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d108      	bne.n	8008cd0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2100      	movs	r1, #0
 8008ccc:	f002 fcbe 	bl	800b64c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f005 f816 	bl	800dd08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	4f54300a 	.word	0x4f54300a
 8008cec:	4f54310a 	.word	0x4f54310a

08008cf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	333c      	adds	r3, #60	@ 0x3c
 8008d08:	3304      	adds	r3, #4
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4a15      	ldr	r2, [pc, #84]	@ (8008d78 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d90e      	bls.n	8008d44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d009      	beq.n	8008d44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f004 ffcd 	bl	800dce4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d78 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d90c      	bls.n	8008d6c <PCD_EP_OutSetupPacket_int+0x7c>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	799b      	ldrb	r3, [r3, #6]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d108      	bne.n	8008d6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d64:	461a      	mov	r2, r3
 8008d66:	2101      	movs	r1, #1
 8008d68:	f002 fc70 	bl	800b64c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	4f54300a 	.word	0x4f54300a

08008d7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d107      	bne.n	8008daa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008d9a:	883b      	ldrh	r3, [r7, #0]
 8008d9c:	0419      	lsls	r1, r3, #16
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	629a      	str	r2, [r3, #40]	@ 0x28
 8008da8:	e028      	b.n	8008dfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db0:	0c1b      	lsrs	r3, r3, #16
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	4413      	add	r3, r2
 8008db6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
 8008dbc:	e00d      	b.n	8008dda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	3340      	adds	r3, #64	@ 0x40
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	0c1b      	lsrs	r3, r3, #16
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	73fb      	strb	r3, [r7, #15]
 8008dda:	7bfa      	ldrb	r2, [r7, #15]
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d3ec      	bcc.n	8008dbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008de4:	883b      	ldrh	r3, [r7, #0]
 8008de6:	0418      	lsls	r0, r3, #16
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6819      	ldr	r1, [r3, #0]
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	4302      	orrs	r2, r0
 8008df4:	3340      	adds	r3, #64	@ 0x40
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	887a      	ldrh	r2, [r7, #2]
 8008e1c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e267      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d075      	beq.n	8008f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008e62:	4b88      	ldr	r3, [pc, #544]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 030c 	and.w	r3, r3, #12
 8008e6a:	2b04      	cmp	r3, #4
 8008e6c:	d00c      	beq.n	8008e88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e6e:	4b85      	ldr	r3, [pc, #532]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008e76:	2b08      	cmp	r3, #8
 8008e78:	d112      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e7a:	4b82      	ldr	r3, [pc, #520]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e86:	d10b      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e88:	4b7e      	ldr	r3, [pc, #504]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d05b      	beq.n	8008f4c <HAL_RCC_OscConfig+0x108>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d157      	bne.n	8008f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e242      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ea8:	d106      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x74>
 8008eaa:	4b76      	ldr	r3, [pc, #472]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a75      	ldr	r2, [pc, #468]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	e01d      	b.n	8008ef4 <HAL_RCC_OscConfig+0xb0>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ec0:	d10c      	bne.n	8008edc <HAL_RCC_OscConfig+0x98>
 8008ec2:	4b70      	ldr	r3, [pc, #448]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a6f      	ldr	r2, [pc, #444]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	4b6d      	ldr	r3, [pc, #436]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a6c      	ldr	r2, [pc, #432]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	e00b      	b.n	8008ef4 <HAL_RCC_OscConfig+0xb0>
 8008edc:	4b69      	ldr	r3, [pc, #420]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a68      	ldr	r2, [pc, #416]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	4b66      	ldr	r3, [pc, #408]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a65      	ldr	r2, [pc, #404]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d013      	beq.n	8008f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008efc:	f7fa f862 	bl	8002fc4 <HAL_GetTick>
 8008f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f02:	e008      	b.n	8008f16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f04:	f7fa f85e 	bl	8002fc4 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b64      	cmp	r3, #100	@ 0x64
 8008f10:	d901      	bls.n	8008f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e207      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f16:	4b5b      	ldr	r3, [pc, #364]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0f0      	beq.n	8008f04 <HAL_RCC_OscConfig+0xc0>
 8008f22:	e014      	b.n	8008f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f24:	f7fa f84e 	bl	8002fc4 <HAL_GetTick>
 8008f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f2a:	e008      	b.n	8008f3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f2c:	f7fa f84a 	bl	8002fc4 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	2b64      	cmp	r3, #100	@ 0x64
 8008f38:	d901      	bls.n	8008f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e1f3      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f3e:	4b51      	ldr	r3, [pc, #324]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f0      	bne.n	8008f2c <HAL_RCC_OscConfig+0xe8>
 8008f4a:	e000      	b.n	8008f4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d063      	beq.n	8009022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f003 030c 	and.w	r3, r3, #12
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00b      	beq.n	8008f7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f66:	4b47      	ldr	r3, [pc, #284]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008f6e:	2b08      	cmp	r3, #8
 8008f70:	d11c      	bne.n	8008fac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f72:	4b44      	ldr	r3, [pc, #272]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d116      	bne.n	8008fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f7e:	4b41      	ldr	r3, [pc, #260]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <HAL_RCC_OscConfig+0x152>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d001      	beq.n	8008f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e1c7      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f96:	4b3b      	ldr	r3, [pc, #236]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	4937      	ldr	r1, [pc, #220]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008faa:	e03a      	b.n	8009022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d020      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fb4:	4b34      	ldr	r3, [pc, #208]	@ (8009088 <HAL_RCC_OscConfig+0x244>)
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fba:	f7fa f803 	bl	8002fc4 <HAL_GetTick>
 8008fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fc0:	e008      	b.n	8008fd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fc2:	f7f9 ffff 	bl	8002fc4 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d901      	bls.n	8008fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e1a8      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0f0      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe0:	4b28      	ldr	r3, [pc, #160]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	4925      	ldr	r1, [pc, #148]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	600b      	str	r3, [r1, #0]
 8008ff4:	e015      	b.n	8009022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ff6:	4b24      	ldr	r3, [pc, #144]	@ (8009088 <HAL_RCC_OscConfig+0x244>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ffc:	f7f9 ffe2 	bl	8002fc4 <HAL_GetTick>
 8009000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009002:	e008      	b.n	8009016 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009004:	f7f9 ffde 	bl	8002fc4 <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b02      	cmp	r3, #2
 8009010:	d901      	bls.n	8009016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e187      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009016:	4b1b      	ldr	r3, [pc, #108]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f0      	bne.n	8009004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d036      	beq.n	800909c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d016      	beq.n	8009064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009036:	4b15      	ldr	r3, [pc, #84]	@ (800908c <HAL_RCC_OscConfig+0x248>)
 8009038:	2201      	movs	r2, #1
 800903a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800903c:	f7f9 ffc2 	bl	8002fc4 <HAL_GetTick>
 8009040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009042:	e008      	b.n	8009056 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009044:	f7f9 ffbe 	bl	8002fc4 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	2b02      	cmp	r3, #2
 8009050:	d901      	bls.n	8009056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e167      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009056:	4b0b      	ldr	r3, [pc, #44]	@ (8009084 <HAL_RCC_OscConfig+0x240>)
 8009058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0f0      	beq.n	8009044 <HAL_RCC_OscConfig+0x200>
 8009062:	e01b      	b.n	800909c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009064:	4b09      	ldr	r3, [pc, #36]	@ (800908c <HAL_RCC_OscConfig+0x248>)
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800906a:	f7f9 ffab 	bl	8002fc4 <HAL_GetTick>
 800906e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009070:	e00e      	b.n	8009090 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009072:	f7f9 ffa7 	bl	8002fc4 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	2b02      	cmp	r3, #2
 800907e:	d907      	bls.n	8009090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e150      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
 8009084:	40023800 	.word	0x40023800
 8009088:	42470000 	.word	0x42470000
 800908c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009090:	4b88      	ldr	r3, [pc, #544]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1ea      	bne.n	8009072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0304 	and.w	r3, r3, #4
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 8097 	beq.w	80091d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090ae:	4b81      	ldr	r3, [pc, #516]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10f      	bne.n	80090da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ba:	2300      	movs	r3, #0
 80090bc:	60bb      	str	r3, [r7, #8]
 80090be:	4b7d      	ldr	r3, [pc, #500]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 80090c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c2:	4a7c      	ldr	r2, [pc, #496]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 80090c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80090ca:	4b7a      	ldr	r3, [pc, #488]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 80090cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090d2:	60bb      	str	r3, [r7, #8]
 80090d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090d6:	2301      	movs	r3, #1
 80090d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090da:	4b77      	ldr	r3, [pc, #476]	@ (80092b8 <HAL_RCC_OscConfig+0x474>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d118      	bne.n	8009118 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090e6:	4b74      	ldr	r3, [pc, #464]	@ (80092b8 <HAL_RCC_OscConfig+0x474>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a73      	ldr	r2, [pc, #460]	@ (80092b8 <HAL_RCC_OscConfig+0x474>)
 80090ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090f2:	f7f9 ff67 	bl	8002fc4 <HAL_GetTick>
 80090f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090f8:	e008      	b.n	800910c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090fa:	f7f9 ff63 	bl	8002fc4 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d901      	bls.n	800910c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e10c      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800910c:	4b6a      	ldr	r3, [pc, #424]	@ (80092b8 <HAL_RCC_OscConfig+0x474>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0f0      	beq.n	80090fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d106      	bne.n	800912e <HAL_RCC_OscConfig+0x2ea>
 8009120:	4b64      	ldr	r3, [pc, #400]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009124:	4a63      	ldr	r2, [pc, #396]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	6713      	str	r3, [r2, #112]	@ 0x70
 800912c:	e01c      	b.n	8009168 <HAL_RCC_OscConfig+0x324>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	2b05      	cmp	r3, #5
 8009134:	d10c      	bne.n	8009150 <HAL_RCC_OscConfig+0x30c>
 8009136:	4b5f      	ldr	r3, [pc, #380]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800913a:	4a5e      	ldr	r2, [pc, #376]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 800913c:	f043 0304 	orr.w	r3, r3, #4
 8009140:	6713      	str	r3, [r2, #112]	@ 0x70
 8009142:	4b5c      	ldr	r3, [pc, #368]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009146:	4a5b      	ldr	r2, [pc, #364]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009148:	f043 0301 	orr.w	r3, r3, #1
 800914c:	6713      	str	r3, [r2, #112]	@ 0x70
 800914e:	e00b      	b.n	8009168 <HAL_RCC_OscConfig+0x324>
 8009150:	4b58      	ldr	r3, [pc, #352]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009154:	4a57      	ldr	r2, [pc, #348]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009156:	f023 0301 	bic.w	r3, r3, #1
 800915a:	6713      	str	r3, [r2, #112]	@ 0x70
 800915c:	4b55      	ldr	r3, [pc, #340]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 800915e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009160:	4a54      	ldr	r2, [pc, #336]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009162:	f023 0304 	bic.w	r3, r3, #4
 8009166:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d015      	beq.n	800919c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009170:	f7f9 ff28 	bl	8002fc4 <HAL_GetTick>
 8009174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009176:	e00a      	b.n	800918e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009178:	f7f9 ff24 	bl	8002fc4 <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009186:	4293      	cmp	r3, r2
 8009188:	d901      	bls.n	800918e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e0cb      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800918e:	4b49      	ldr	r3, [pc, #292]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0ee      	beq.n	8009178 <HAL_RCC_OscConfig+0x334>
 800919a:	e014      	b.n	80091c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800919c:	f7f9 ff12 	bl	8002fc4 <HAL_GetTick>
 80091a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091a2:	e00a      	b.n	80091ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091a4:	f7f9 ff0e 	bl	8002fc4 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d901      	bls.n	80091ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e0b5      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091ba:	4b3e      	ldr	r3, [pc, #248]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 80091bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1ee      	bne.n	80091a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d105      	bne.n	80091d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091cc:	4b39      	ldr	r3, [pc, #228]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 80091ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d0:	4a38      	ldr	r2, [pc, #224]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 80091d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 80a1 	beq.w	8009324 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80091e2:	4b34      	ldr	r3, [pc, #208]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f003 030c 	and.w	r3, r3, #12
 80091ea:	2b08      	cmp	r3, #8
 80091ec:	d05c      	beq.n	80092a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d141      	bne.n	800927a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091f6:	4b31      	ldr	r3, [pc, #196]	@ (80092bc <HAL_RCC_OscConfig+0x478>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091fc:	f7f9 fee2 	bl	8002fc4 <HAL_GetTick>
 8009200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009202:	e008      	b.n	8009216 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009204:	f7f9 fede 	bl	8002fc4 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e087      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009216:	4b27      	ldr	r3, [pc, #156]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f0      	bne.n	8009204 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	69da      	ldr	r2, [r3, #28]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	019b      	lsls	r3, r3, #6
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009238:	085b      	lsrs	r3, r3, #1
 800923a:	3b01      	subs	r3, #1
 800923c:	041b      	lsls	r3, r3, #16
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009244:	061b      	lsls	r3, r3, #24
 8009246:	491b      	ldr	r1, [pc, #108]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 8009248:	4313      	orrs	r3, r2
 800924a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800924c:	4b1b      	ldr	r3, [pc, #108]	@ (80092bc <HAL_RCC_OscConfig+0x478>)
 800924e:	2201      	movs	r2, #1
 8009250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009252:	f7f9 feb7 	bl	8002fc4 <HAL_GetTick>
 8009256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009258:	e008      	b.n	800926c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800925a:	f7f9 feb3 	bl	8002fc4 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d901      	bls.n	800926c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e05c      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800926c:	4b11      	ldr	r3, [pc, #68]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0f0      	beq.n	800925a <HAL_RCC_OscConfig+0x416>
 8009278:	e054      	b.n	8009324 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800927a:	4b10      	ldr	r3, [pc, #64]	@ (80092bc <HAL_RCC_OscConfig+0x478>)
 800927c:	2200      	movs	r2, #0
 800927e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009280:	f7f9 fea0 	bl	8002fc4 <HAL_GetTick>
 8009284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009286:	e008      	b.n	800929a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009288:	f7f9 fe9c 	bl	8002fc4 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d901      	bls.n	800929a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e045      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800929a:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <HAL_RCC_OscConfig+0x470>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1f0      	bne.n	8009288 <HAL_RCC_OscConfig+0x444>
 80092a6:	e03d      	b.n	8009324 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d107      	bne.n	80092c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e038      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
 80092b4:	40023800 	.word	0x40023800
 80092b8:	40007000 	.word	0x40007000
 80092bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80092c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009330 <HAL_RCC_OscConfig+0x4ec>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d028      	beq.n	8009320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092d8:	429a      	cmp	r2, r3
 80092da:	d121      	bne.n	8009320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d11a      	bne.n	8009320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80092f0:	4013      	ands	r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80092f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d111      	bne.n	8009320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009306:	085b      	lsrs	r3, r3, #1
 8009308:	3b01      	subs	r3, #1
 800930a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800930c:	429a      	cmp	r2, r3
 800930e:	d107      	bne.n	8009320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800931c:	429a      	cmp	r2, r3
 800931e:	d001      	beq.n	8009324 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e000      	b.n	8009326 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40023800 	.word	0x40023800

08009334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e0cc      	b.n	80094e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009348:	4b68      	ldr	r3, [pc, #416]	@ (80094ec <HAL_RCC_ClockConfig+0x1b8>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d90c      	bls.n	8009370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009356:	4b65      	ldr	r3, [pc, #404]	@ (80094ec <HAL_RCC_ClockConfig+0x1b8>)
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800935e:	4b63      	ldr	r3, [pc, #396]	@ (80094ec <HAL_RCC_ClockConfig+0x1b8>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	429a      	cmp	r2, r3
 800936a:	d001      	beq.n	8009370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e0b8      	b.n	80094e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0302 	and.w	r3, r3, #2
 8009378:	2b00      	cmp	r3, #0
 800937a:	d020      	beq.n	80093be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009388:	4b59      	ldr	r3, [pc, #356]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	4a58      	ldr	r2, [pc, #352]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 800938e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009392:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80093a0:	4b53      	ldr	r3, [pc, #332]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	4a52      	ldr	r2, [pc, #328]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80093a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80093aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093ac:	4b50      	ldr	r3, [pc, #320]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	494d      	ldr	r1, [pc, #308]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d044      	beq.n	8009454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d107      	bne.n	80093e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093d2:	4b47      	ldr	r3, [pc, #284]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d119      	bne.n	8009412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e07f      	b.n	80094e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d003      	beq.n	80093f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d107      	bne.n	8009402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093f2:	4b3f      	ldr	r3, [pc, #252]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e06f      	b.n	80094e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009402:	4b3b      	ldr	r3, [pc, #236]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e067      	b.n	80094e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009412:	4b37      	ldr	r3, [pc, #220]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f023 0203 	bic.w	r2, r3, #3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4934      	ldr	r1, [pc, #208]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009420:	4313      	orrs	r3, r2
 8009422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009424:	f7f9 fdce 	bl	8002fc4 <HAL_GetTick>
 8009428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800942a:	e00a      	b.n	8009442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800942c:	f7f9 fdca 	bl	8002fc4 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800943a:	4293      	cmp	r3, r2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e04f      	b.n	80094e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009442:	4b2b      	ldr	r3, [pc, #172]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f003 020c 	and.w	r2, r3, #12
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	429a      	cmp	r2, r3
 8009452:	d1eb      	bne.n	800942c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009454:	4b25      	ldr	r3, [pc, #148]	@ (80094ec <HAL_RCC_ClockConfig+0x1b8>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d20c      	bcs.n	800947c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009462:	4b22      	ldr	r3, [pc, #136]	@ (80094ec <HAL_RCC_ClockConfig+0x1b8>)
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800946a:	4b20      	ldr	r3, [pc, #128]	@ (80094ec <HAL_RCC_ClockConfig+0x1b8>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0307 	and.w	r3, r3, #7
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d001      	beq.n	800947c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e032      	b.n	80094e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	d008      	beq.n	800949a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009488:	4b19      	ldr	r3, [pc, #100]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	4916      	ldr	r1, [pc, #88]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009496:	4313      	orrs	r3, r2
 8009498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0308 	and.w	r3, r3, #8
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094a6:	4b12      	ldr	r3, [pc, #72]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	490e      	ldr	r1, [pc, #56]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80094ba:	f000 f821 	bl	8009500 <HAL_RCC_GetSysClockFreq>
 80094be:	4602      	mov	r2, r0
 80094c0:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <HAL_RCC_ClockConfig+0x1bc>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	091b      	lsrs	r3, r3, #4
 80094c6:	f003 030f 	and.w	r3, r3, #15
 80094ca:	490a      	ldr	r1, [pc, #40]	@ (80094f4 <HAL_RCC_ClockConfig+0x1c0>)
 80094cc:	5ccb      	ldrb	r3, [r1, r3]
 80094ce:	fa22 f303 	lsr.w	r3, r2, r3
 80094d2:	4a09      	ldr	r2, [pc, #36]	@ (80094f8 <HAL_RCC_ClockConfig+0x1c4>)
 80094d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80094d6:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <HAL_RCC_ClockConfig+0x1c8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f9 fd2e 	bl	8002f3c <HAL_InitTick>

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	40023c00 	.word	0x40023c00
 80094f0:	40023800 	.word	0x40023800
 80094f4:	0800f254 	.word	0x0800f254
 80094f8:	2000002c 	.word	0x2000002c
 80094fc:	20000030 	.word	0x20000030

08009500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009504:	b090      	sub	sp, #64	@ 0x40
 8009506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009518:	4b59      	ldr	r3, [pc, #356]	@ (8009680 <HAL_RCC_GetSysClockFreq+0x180>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 030c 	and.w	r3, r3, #12
 8009520:	2b08      	cmp	r3, #8
 8009522:	d00d      	beq.n	8009540 <HAL_RCC_GetSysClockFreq+0x40>
 8009524:	2b08      	cmp	r3, #8
 8009526:	f200 80a1 	bhi.w	800966c <HAL_RCC_GetSysClockFreq+0x16c>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <HAL_RCC_GetSysClockFreq+0x34>
 800952e:	2b04      	cmp	r3, #4
 8009530:	d003      	beq.n	800953a <HAL_RCC_GetSysClockFreq+0x3a>
 8009532:	e09b      	b.n	800966c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009534:	4b53      	ldr	r3, [pc, #332]	@ (8009684 <HAL_RCC_GetSysClockFreq+0x184>)
 8009536:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009538:	e09b      	b.n	8009672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800953a:	4b53      	ldr	r3, [pc, #332]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x188>)
 800953c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800953e:	e098      	b.n	8009672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009540:	4b4f      	ldr	r3, [pc, #316]	@ (8009680 <HAL_RCC_GetSysClockFreq+0x180>)
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009548:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800954a:	4b4d      	ldr	r3, [pc, #308]	@ (8009680 <HAL_RCC_GetSysClockFreq+0x180>)
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d028      	beq.n	80095a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009556:	4b4a      	ldr	r3, [pc, #296]	@ (8009680 <HAL_RCC_GetSysClockFreq+0x180>)
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	099b      	lsrs	r3, r3, #6
 800955c:	2200      	movs	r2, #0
 800955e:	623b      	str	r3, [r7, #32]
 8009560:	627a      	str	r2, [r7, #36]	@ 0x24
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009568:	2100      	movs	r1, #0
 800956a:	4b47      	ldr	r3, [pc, #284]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x188>)
 800956c:	fb03 f201 	mul.w	r2, r3, r1
 8009570:	2300      	movs	r3, #0
 8009572:	fb00 f303 	mul.w	r3, r0, r3
 8009576:	4413      	add	r3, r2
 8009578:	4a43      	ldr	r2, [pc, #268]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x188>)
 800957a:	fba0 1202 	umull	r1, r2, r0, r2
 800957e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009580:	460a      	mov	r2, r1
 8009582:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009586:	4413      	add	r3, r2
 8009588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800958a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958c:	2200      	movs	r2, #0
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	61fa      	str	r2, [r7, #28]
 8009592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009596:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800959a:	f7f7 fa67 	bl	8000a6c <__aeabi_uldivmod>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4613      	mov	r3, r2
 80095a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095a6:	e053      	b.n	8009650 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095a8:	4b35      	ldr	r3, [pc, #212]	@ (8009680 <HAL_RCC_GetSysClockFreq+0x180>)
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	099b      	lsrs	r3, r3, #6
 80095ae:	2200      	movs	r2, #0
 80095b0:	613b      	str	r3, [r7, #16]
 80095b2:	617a      	str	r2, [r7, #20]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80095ba:	f04f 0b00 	mov.w	fp, #0
 80095be:	4652      	mov	r2, sl
 80095c0:	465b      	mov	r3, fp
 80095c2:	f04f 0000 	mov.w	r0, #0
 80095c6:	f04f 0100 	mov.w	r1, #0
 80095ca:	0159      	lsls	r1, r3, #5
 80095cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095d0:	0150      	lsls	r0, r2, #5
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	ebb2 080a 	subs.w	r8, r2, sl
 80095da:	eb63 090b 	sbc.w	r9, r3, fp
 80095de:	f04f 0200 	mov.w	r2, #0
 80095e2:	f04f 0300 	mov.w	r3, #0
 80095e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80095ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80095ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80095f2:	ebb2 0408 	subs.w	r4, r2, r8
 80095f6:	eb63 0509 	sbc.w	r5, r3, r9
 80095fa:	f04f 0200 	mov.w	r2, #0
 80095fe:	f04f 0300 	mov.w	r3, #0
 8009602:	00eb      	lsls	r3, r5, #3
 8009604:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009608:	00e2      	lsls	r2, r4, #3
 800960a:	4614      	mov	r4, r2
 800960c:	461d      	mov	r5, r3
 800960e:	eb14 030a 	adds.w	r3, r4, sl
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	eb45 030b 	adc.w	r3, r5, fp
 8009618:	607b      	str	r3, [r7, #4]
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009626:	4629      	mov	r1, r5
 8009628:	028b      	lsls	r3, r1, #10
 800962a:	4621      	mov	r1, r4
 800962c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009630:	4621      	mov	r1, r4
 8009632:	028a      	lsls	r2, r1, #10
 8009634:	4610      	mov	r0, r2
 8009636:	4619      	mov	r1, r3
 8009638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963a:	2200      	movs	r2, #0
 800963c:	60bb      	str	r3, [r7, #8]
 800963e:	60fa      	str	r2, [r7, #12]
 8009640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009644:	f7f7 fa12 	bl	8000a6c <__aeabi_uldivmod>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4613      	mov	r3, r2
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009650:	4b0b      	ldr	r3, [pc, #44]	@ (8009680 <HAL_RCC_GetSysClockFreq+0x180>)
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	0c1b      	lsrs	r3, r3, #16
 8009656:	f003 0303 	and.w	r3, r3, #3
 800965a:	3301      	adds	r3, #1
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009660:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009664:	fbb2 f3f3 	udiv	r3, r2, r3
 8009668:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800966a:	e002      	b.n	8009672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800966c:	4b05      	ldr	r3, [pc, #20]	@ (8009684 <HAL_RCC_GetSysClockFreq+0x184>)
 800966e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009674:	4618      	mov	r0, r3
 8009676:	3740      	adds	r7, #64	@ 0x40
 8009678:	46bd      	mov	sp, r7
 800967a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800967e:	bf00      	nop
 8009680:	40023800 	.word	0x40023800
 8009684:	00f42400 	.word	0x00f42400
 8009688:	017d7840 	.word	0x017d7840

0800968c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009690:	4b03      	ldr	r3, [pc, #12]	@ (80096a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009692:	681b      	ldr	r3, [r3, #0]
}
 8009694:	4618      	mov	r0, r3
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	2000002c 	.word	0x2000002c

080096a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80096a8:	f7ff fff0 	bl	800968c <HAL_RCC_GetHCLKFreq>
 80096ac:	4602      	mov	r2, r0
 80096ae:	4b05      	ldr	r3, [pc, #20]	@ (80096c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	0a9b      	lsrs	r3, r3, #10
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	4903      	ldr	r1, [pc, #12]	@ (80096c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096ba:	5ccb      	ldrb	r3, [r1, r3]
 80096bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	40023800 	.word	0x40023800
 80096c8:	0800f264 	.word	0x0800f264

080096cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e041      	b.n	8009762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d106      	bne.n	80096f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7f9 f858 	bl	80027a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3304      	adds	r3, #4
 8009708:	4619      	mov	r1, r3
 800970a:	4610      	mov	r0, r2
 800970c:	f000 fab2 	bl	8009c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b01      	cmp	r3, #1
 800977e:	d001      	beq.n	8009784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e044      	b.n	800980e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f042 0201 	orr.w	r2, r2, #1
 800979a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1e      	ldr	r2, [pc, #120]	@ (800981c <HAL_TIM_Base_Start_IT+0xb0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d018      	beq.n	80097d8 <HAL_TIM_Base_Start_IT+0x6c>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ae:	d013      	beq.n	80097d8 <HAL_TIM_Base_Start_IT+0x6c>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a1a      	ldr	r2, [pc, #104]	@ (8009820 <HAL_TIM_Base_Start_IT+0xb4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d00e      	beq.n	80097d8 <HAL_TIM_Base_Start_IT+0x6c>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a19      	ldr	r2, [pc, #100]	@ (8009824 <HAL_TIM_Base_Start_IT+0xb8>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d009      	beq.n	80097d8 <HAL_TIM_Base_Start_IT+0x6c>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a17      	ldr	r2, [pc, #92]	@ (8009828 <HAL_TIM_Base_Start_IT+0xbc>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d004      	beq.n	80097d8 <HAL_TIM_Base_Start_IT+0x6c>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a16      	ldr	r2, [pc, #88]	@ (800982c <HAL_TIM_Base_Start_IT+0xc0>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d111      	bne.n	80097fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2b06      	cmp	r3, #6
 80097e8:	d010      	beq.n	800980c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0201 	orr.w	r2, r2, #1
 80097f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097fa:	e007      	b.n	800980c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	40010000 	.word	0x40010000
 8009820:	40000400 	.word	0x40000400
 8009824:	40000800 	.word	0x40000800
 8009828:	40000c00 	.word	0x40000c00
 800982c:	40014000 	.word	0x40014000

08009830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d020      	beq.n	8009894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f003 0302 	and.w	r3, r3, #2
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01b      	beq.n	8009894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f06f 0202 	mvn.w	r2, #2
 8009864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f9db 	bl	8009c36 <HAL_TIM_IC_CaptureCallback>
 8009880:	e005      	b.n	800988e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f9cd 	bl	8009c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f9de 	bl	8009c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	d020      	beq.n	80098e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f003 0304 	and.w	r3, r3, #4
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01b      	beq.n	80098e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f06f 0204 	mvn.w	r2, #4
 80098b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f9b5 	bl	8009c36 <HAL_TIM_IC_CaptureCallback>
 80098cc:	e005      	b.n	80098da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f9a7 	bl	8009c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f9b8 	bl	8009c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d020      	beq.n	800992c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f003 0308 	and.w	r3, r3, #8
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01b      	beq.n	800992c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f06f 0208 	mvn.w	r2, #8
 80098fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2204      	movs	r2, #4
 8009902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f98f 	bl	8009c36 <HAL_TIM_IC_CaptureCallback>
 8009918:	e005      	b.n	8009926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f981 	bl	8009c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f992 	bl	8009c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f003 0310 	and.w	r3, r3, #16
 8009932:	2b00      	cmp	r3, #0
 8009934:	d020      	beq.n	8009978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f003 0310 	and.w	r3, r3, #16
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01b      	beq.n	8009978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f06f 0210 	mvn.w	r2, #16
 8009948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2208      	movs	r2, #8
 800994e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f969 	bl	8009c36 <HAL_TIM_IC_CaptureCallback>
 8009964:	e005      	b.n	8009972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f95b 	bl	8009c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f96c 	bl	8009c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00c      	beq.n	800999c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d007      	beq.n	800999c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f06f 0201 	mvn.w	r2, #1
 8009994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7f7 fa3e 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00c      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80099b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fb84 	bl	800a0c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00c      	beq.n	80099e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80099dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f93d 	bl	8009c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 0320 	and.w	r3, r3, #32
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00c      	beq.n	8009a08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0220 	mvn.w	r2, #32
 8009a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fb56 	bl	800a0b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_TIM_ConfigClockSource+0x1c>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e0b4      	b.n	8009b96 <HAL_TIM_ConfigClockSource+0x186>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a64:	d03e      	beq.n	8009ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8009a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a6a:	f200 8087 	bhi.w	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a72:	f000 8086 	beq.w	8009b82 <HAL_TIM_ConfigClockSource+0x172>
 8009a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a7a:	d87f      	bhi.n	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
 8009a7c:	2b70      	cmp	r3, #112	@ 0x70
 8009a7e:	d01a      	beq.n	8009ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8009a80:	2b70      	cmp	r3, #112	@ 0x70
 8009a82:	d87b      	bhi.n	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
 8009a84:	2b60      	cmp	r3, #96	@ 0x60
 8009a86:	d050      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x11a>
 8009a88:	2b60      	cmp	r3, #96	@ 0x60
 8009a8a:	d877      	bhi.n	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
 8009a8c:	2b50      	cmp	r3, #80	@ 0x50
 8009a8e:	d03c      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0xfa>
 8009a90:	2b50      	cmp	r3, #80	@ 0x50
 8009a92:	d873      	bhi.n	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
 8009a94:	2b40      	cmp	r3, #64	@ 0x40
 8009a96:	d058      	beq.n	8009b4a <HAL_TIM_ConfigClockSource+0x13a>
 8009a98:	2b40      	cmp	r3, #64	@ 0x40
 8009a9a:	d86f      	bhi.n	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
 8009a9c:	2b30      	cmp	r3, #48	@ 0x30
 8009a9e:	d064      	beq.n	8009b6a <HAL_TIM_ConfigClockSource+0x15a>
 8009aa0:	2b30      	cmp	r3, #48	@ 0x30
 8009aa2:	d86b      	bhi.n	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	d060      	beq.n	8009b6a <HAL_TIM_ConfigClockSource+0x15a>
 8009aa8:	2b20      	cmp	r3, #32
 8009aaa:	d867      	bhi.n	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d05c      	beq.n	8009b6a <HAL_TIM_ConfigClockSource+0x15a>
 8009ab0:	2b10      	cmp	r3, #16
 8009ab2:	d05a      	beq.n	8009b6a <HAL_TIM_ConfigClockSource+0x15a>
 8009ab4:	e062      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ac6:	f000 fa66 	bl	8009f96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	609a      	str	r2, [r3, #8]
      break;
 8009ae2:	e04f      	b.n	8009b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009af4:	f000 fa4f 	bl	8009f96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689a      	ldr	r2, [r3, #8]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b06:	609a      	str	r2, [r3, #8]
      break;
 8009b08:	e03c      	b.n	8009b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b16:	461a      	mov	r2, r3
 8009b18:	f000 f9c3 	bl	8009ea2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2150      	movs	r1, #80	@ 0x50
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fa1c 	bl	8009f60 <TIM_ITRx_SetConfig>
      break;
 8009b28:	e02c      	b.n	8009b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b36:	461a      	mov	r2, r3
 8009b38:	f000 f9e2 	bl	8009f00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2160      	movs	r1, #96	@ 0x60
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 fa0c 	bl	8009f60 <TIM_ITRx_SetConfig>
      break;
 8009b48:	e01c      	b.n	8009b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b56:	461a      	mov	r2, r3
 8009b58:	f000 f9a3 	bl	8009ea2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2140      	movs	r1, #64	@ 0x40
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 f9fc 	bl	8009f60 <TIM_ITRx_SetConfig>
      break;
 8009b68:	e00c      	b.n	8009b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4619      	mov	r1, r3
 8009b74:	4610      	mov	r0, r2
 8009b76:	f000 f9f3 	bl	8009f60 <TIM_ITRx_SetConfig>
      break;
 8009b7a:	e003      	b.n	8009b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b80:	e000      	b.n	8009b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e031      	b.n	8009c1a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f8d9 	bl	8009d80 <TIM_SlaveTimer_SetConfig>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d009      	beq.n	8009be8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e018      	b.n	8009c1a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bf6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009c06:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c3e:	bf00      	nop
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c52:	bf00      	nop
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a37      	ldr	r2, [pc, #220]	@ (8009d64 <TIM_Base_SetConfig+0xf0>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d00f      	beq.n	8009cac <TIM_Base_SetConfig+0x38>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c92:	d00b      	beq.n	8009cac <TIM_Base_SetConfig+0x38>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a34      	ldr	r2, [pc, #208]	@ (8009d68 <TIM_Base_SetConfig+0xf4>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d007      	beq.n	8009cac <TIM_Base_SetConfig+0x38>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a33      	ldr	r2, [pc, #204]	@ (8009d6c <TIM_Base_SetConfig+0xf8>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_Base_SetConfig+0x38>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a32      	ldr	r2, [pc, #200]	@ (8009d70 <TIM_Base_SetConfig+0xfc>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d108      	bne.n	8009cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a28      	ldr	r2, [pc, #160]	@ (8009d64 <TIM_Base_SetConfig+0xf0>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d01b      	beq.n	8009cfe <TIM_Base_SetConfig+0x8a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ccc:	d017      	beq.n	8009cfe <TIM_Base_SetConfig+0x8a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a25      	ldr	r2, [pc, #148]	@ (8009d68 <TIM_Base_SetConfig+0xf4>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d013      	beq.n	8009cfe <TIM_Base_SetConfig+0x8a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a24      	ldr	r2, [pc, #144]	@ (8009d6c <TIM_Base_SetConfig+0xf8>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00f      	beq.n	8009cfe <TIM_Base_SetConfig+0x8a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a23      	ldr	r2, [pc, #140]	@ (8009d70 <TIM_Base_SetConfig+0xfc>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00b      	beq.n	8009cfe <TIM_Base_SetConfig+0x8a>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a22      	ldr	r2, [pc, #136]	@ (8009d74 <TIM_Base_SetConfig+0x100>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d007      	beq.n	8009cfe <TIM_Base_SetConfig+0x8a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a21      	ldr	r2, [pc, #132]	@ (8009d78 <TIM_Base_SetConfig+0x104>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d003      	beq.n	8009cfe <TIM_Base_SetConfig+0x8a>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a20      	ldr	r2, [pc, #128]	@ (8009d7c <TIM_Base_SetConfig+0x108>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d108      	bne.n	8009d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	689a      	ldr	r2, [r3, #8]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a0c      	ldr	r2, [pc, #48]	@ (8009d64 <TIM_Base_SetConfig+0xf0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d103      	bne.n	8009d3e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	691a      	ldr	r2, [r3, #16]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f043 0204 	orr.w	r2, r3, #4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	601a      	str	r2, [r3, #0]
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	40010000 	.word	0x40010000
 8009d68:	40000400 	.word	0x40000400
 8009d6c:	40000800 	.word	0x40000800
 8009d70:	40000c00 	.word	0x40000c00
 8009d74:	40014000 	.word	0x40014000
 8009d78:	40014400 	.word	0x40014400
 8009d7c:	40014800 	.word	0x40014800

08009d80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d9c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f023 0307 	bic.w	r3, r3, #7
 8009dae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2b70      	cmp	r3, #112	@ 0x70
 8009dc8:	d01a      	beq.n	8009e00 <TIM_SlaveTimer_SetConfig+0x80>
 8009dca:	2b70      	cmp	r3, #112	@ 0x70
 8009dcc:	d860      	bhi.n	8009e90 <TIM_SlaveTimer_SetConfig+0x110>
 8009dce:	2b60      	cmp	r3, #96	@ 0x60
 8009dd0:	d054      	beq.n	8009e7c <TIM_SlaveTimer_SetConfig+0xfc>
 8009dd2:	2b60      	cmp	r3, #96	@ 0x60
 8009dd4:	d85c      	bhi.n	8009e90 <TIM_SlaveTimer_SetConfig+0x110>
 8009dd6:	2b50      	cmp	r3, #80	@ 0x50
 8009dd8:	d046      	beq.n	8009e68 <TIM_SlaveTimer_SetConfig+0xe8>
 8009dda:	2b50      	cmp	r3, #80	@ 0x50
 8009ddc:	d858      	bhi.n	8009e90 <TIM_SlaveTimer_SetConfig+0x110>
 8009dde:	2b40      	cmp	r3, #64	@ 0x40
 8009de0:	d019      	beq.n	8009e16 <TIM_SlaveTimer_SetConfig+0x96>
 8009de2:	2b40      	cmp	r3, #64	@ 0x40
 8009de4:	d854      	bhi.n	8009e90 <TIM_SlaveTimer_SetConfig+0x110>
 8009de6:	2b30      	cmp	r3, #48	@ 0x30
 8009de8:	d055      	beq.n	8009e96 <TIM_SlaveTimer_SetConfig+0x116>
 8009dea:	2b30      	cmp	r3, #48	@ 0x30
 8009dec:	d850      	bhi.n	8009e90 <TIM_SlaveTimer_SetConfig+0x110>
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	d051      	beq.n	8009e96 <TIM_SlaveTimer_SetConfig+0x116>
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d84c      	bhi.n	8009e90 <TIM_SlaveTimer_SetConfig+0x110>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d04d      	beq.n	8009e96 <TIM_SlaveTimer_SetConfig+0x116>
 8009dfa:	2b10      	cmp	r3, #16
 8009dfc:	d04b      	beq.n	8009e96 <TIM_SlaveTimer_SetConfig+0x116>
 8009dfe:	e047      	b.n	8009e90 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009e10:	f000 f8c1 	bl	8009f96 <TIM_ETR_SetConfig>
      break;
 8009e14:	e040      	b.n	8009e98 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b05      	cmp	r3, #5
 8009e1c:	d101      	bne.n	8009e22 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e03b      	b.n	8009e9a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6a1a      	ldr	r2, [r3, #32]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0201 	bic.w	r2, r2, #1
 8009e38:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e48:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	621a      	str	r2, [r3, #32]
      break;
 8009e66:	e017      	b.n	8009e98 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e74:	461a      	mov	r2, r3
 8009e76:	f000 f814 	bl	8009ea2 <TIM_TI1_ConfigInputStage>
      break;
 8009e7a:	e00d      	b.n	8009e98 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f000 f839 	bl	8009f00 <TIM_TI2_ConfigInputStage>
      break;
 8009e8e:	e003      	b.n	8009e98 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	75fb      	strb	r3, [r7, #23]
      break;
 8009e94:	e000      	b.n	8009e98 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009e96:	bf00      	nop
  }

  return status;
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3718      	adds	r7, #24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b087      	sub	sp, #28
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	f023 0201 	bic.w	r2, r3, #1
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f023 030a 	bic.w	r3, r3, #10
 8009ede:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	621a      	str	r2, [r3, #32]
}
 8009ef4:	bf00      	nop
 8009ef6:	371c      	adds	r7, #28
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	f023 0210 	bic.w	r2, r3, #16
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	031b      	lsls	r3, r3, #12
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	621a      	str	r2, [r3, #32]
}
 8009f54:	bf00      	nop
 8009f56:	371c      	adds	r7, #28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	f043 0307 	orr.w	r3, r3, #7
 8009f82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	609a      	str	r2, [r3, #8]
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b087      	sub	sp, #28
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	607a      	str	r2, [r7, #4]
 8009fa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	021a      	lsls	r2, r3, #8
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	609a      	str	r2, [r3, #8]
}
 8009fca:	bf00      	nop
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
	...

08009fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d101      	bne.n	8009ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fec:	2302      	movs	r3, #2
 8009fee:	e050      	b.n	800a092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	4313      	orrs	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a1c      	ldr	r2, [pc, #112]	@ (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d018      	beq.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a03c:	d013      	beq.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a18      	ldr	r2, [pc, #96]	@ (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d00e      	beq.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a16      	ldr	r2, [pc, #88]	@ (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d009      	beq.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a15      	ldr	r2, [pc, #84]	@ (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d004      	beq.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a13      	ldr	r2, [pc, #76]	@ (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d10c      	bne.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a06c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	4313      	orrs	r3, r2
 800a076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	40010000 	.word	0x40010000
 800a0a4:	40000400 	.word	0x40000400
 800a0a8:	40000800 	.word	0x40000800
 800a0ac:	40000c00 	.word	0x40000c00
 800a0b0:	40014000 	.word	0x40014000

0800a0b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0dc:	b084      	sub	sp, #16
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	f107 001c 	add.w	r0, r7, #28
 800a0ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d123      	bne.n	800a13e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a10a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a11e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a122:	2b01      	cmp	r3, #1
 800a124:	d105      	bne.n	800a132 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 fae8 	bl	800b708 <USB_CoreReset>
 800a138:	4603      	mov	r3, r0
 800a13a:	73fb      	strb	r3, [r7, #15]
 800a13c:	e01b      	b.n	800a176 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 fadc 	bl	800b708 <USB_CoreReset>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a154:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d106      	bne.n	800a16a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a160:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	639a      	str	r2, [r3, #56]	@ 0x38
 800a168:	e005      	b.n	800a176 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a176:	7fbb      	ldrb	r3, [r7, #30]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d10b      	bne.n	800a194 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f043 0206 	orr.w	r2, r3, #6
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f043 0220 	orr.w	r2, r3, #32
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a194:	7bfb      	ldrb	r3, [r7, #15]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1a0:	b004      	add	sp, #16
 800a1a2:	4770      	bx	lr

0800a1a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d165      	bne.n	800a284 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	4a41      	ldr	r2, [pc, #260]	@ (800a2c0 <USB_SetTurnaroundTime+0x11c>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d906      	bls.n	800a1ce <USB_SetTurnaroundTime+0x2a>
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4a40      	ldr	r2, [pc, #256]	@ (800a2c4 <USB_SetTurnaroundTime+0x120>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d202      	bcs.n	800a1ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a1c8:	230f      	movs	r3, #15
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	e062      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	4a3c      	ldr	r2, [pc, #240]	@ (800a2c4 <USB_SetTurnaroundTime+0x120>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d306      	bcc.n	800a1e4 <USB_SetTurnaroundTime+0x40>
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	4a3b      	ldr	r2, [pc, #236]	@ (800a2c8 <USB_SetTurnaroundTime+0x124>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d202      	bcs.n	800a1e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a1de:	230e      	movs	r3, #14
 800a1e0:	617b      	str	r3, [r7, #20]
 800a1e2:	e057      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	4a38      	ldr	r2, [pc, #224]	@ (800a2c8 <USB_SetTurnaroundTime+0x124>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d306      	bcc.n	800a1fa <USB_SetTurnaroundTime+0x56>
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	4a37      	ldr	r2, [pc, #220]	@ (800a2cc <USB_SetTurnaroundTime+0x128>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d202      	bcs.n	800a1fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a1f4:	230d      	movs	r3, #13
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e04c      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	4a33      	ldr	r2, [pc, #204]	@ (800a2cc <USB_SetTurnaroundTime+0x128>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d306      	bcc.n	800a210 <USB_SetTurnaroundTime+0x6c>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4a32      	ldr	r2, [pc, #200]	@ (800a2d0 <USB_SetTurnaroundTime+0x12c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d802      	bhi.n	800a210 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a20a:	230c      	movs	r3, #12
 800a20c:	617b      	str	r3, [r7, #20]
 800a20e:	e041      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	4a2f      	ldr	r2, [pc, #188]	@ (800a2d0 <USB_SetTurnaroundTime+0x12c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d906      	bls.n	800a226 <USB_SetTurnaroundTime+0x82>
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4a2e      	ldr	r2, [pc, #184]	@ (800a2d4 <USB_SetTurnaroundTime+0x130>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d802      	bhi.n	800a226 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a220:	230b      	movs	r3, #11
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	e036      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4a2a      	ldr	r2, [pc, #168]	@ (800a2d4 <USB_SetTurnaroundTime+0x130>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d906      	bls.n	800a23c <USB_SetTurnaroundTime+0x98>
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	4a29      	ldr	r2, [pc, #164]	@ (800a2d8 <USB_SetTurnaroundTime+0x134>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d802      	bhi.n	800a23c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a236:	230a      	movs	r3, #10
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	e02b      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4a26      	ldr	r2, [pc, #152]	@ (800a2d8 <USB_SetTurnaroundTime+0x134>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d906      	bls.n	800a252 <USB_SetTurnaroundTime+0xae>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4a25      	ldr	r2, [pc, #148]	@ (800a2dc <USB_SetTurnaroundTime+0x138>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d202      	bcs.n	800a252 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a24c:	2309      	movs	r3, #9
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	e020      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4a21      	ldr	r2, [pc, #132]	@ (800a2dc <USB_SetTurnaroundTime+0x138>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d306      	bcc.n	800a268 <USB_SetTurnaroundTime+0xc4>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4a20      	ldr	r2, [pc, #128]	@ (800a2e0 <USB_SetTurnaroundTime+0x13c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d802      	bhi.n	800a268 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a262:	2308      	movs	r3, #8
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	e015      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4a1d      	ldr	r2, [pc, #116]	@ (800a2e0 <USB_SetTurnaroundTime+0x13c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d906      	bls.n	800a27e <USB_SetTurnaroundTime+0xda>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	4a1c      	ldr	r2, [pc, #112]	@ (800a2e4 <USB_SetTurnaroundTime+0x140>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d202      	bcs.n	800a27e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a278:	2307      	movs	r3, #7
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	e00a      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a27e:	2306      	movs	r3, #6
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e007      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d102      	bne.n	800a290 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a28a:	2309      	movs	r3, #9
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	e001      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a290:	2309      	movs	r3, #9
 800a292:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	68da      	ldr	r2, [r3, #12]
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	029b      	lsls	r3, r3, #10
 800a2a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a2ac:	431a      	orrs	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	00d8acbf 	.word	0x00d8acbf
 800a2c4:	00e4e1c0 	.word	0x00e4e1c0
 800a2c8:	00f42400 	.word	0x00f42400
 800a2cc:	01067380 	.word	0x01067380
 800a2d0:	011a499f 	.word	0x011a499f
 800a2d4:	01312cff 	.word	0x01312cff
 800a2d8:	014ca43f 	.word	0x014ca43f
 800a2dc:	016e3600 	.word	0x016e3600
 800a2e0:	01a6ab1f 	.word	0x01a6ab1f
 800a2e4:	01e84800 	.word	0x01e84800

0800a2e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f043 0201 	orr.w	r2, r3, #1
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f023 0201 	bic.w	r2, r3, #1
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d115      	bne.n	800a37a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a35a:	200a      	movs	r0, #10
 800a35c:	f7f8 fe3e 	bl	8002fdc <HAL_Delay>
      ms += 10U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	330a      	adds	r3, #10
 800a364:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 f93f 	bl	800b5ea <USB_GetMode>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d01e      	beq.n	800a3b0 <USB_SetCurrentMode+0x84>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2bc7      	cmp	r3, #199	@ 0xc7
 800a376:	d9f0      	bls.n	800a35a <USB_SetCurrentMode+0x2e>
 800a378:	e01a      	b.n	800a3b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d115      	bne.n	800a3ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a38c:	200a      	movs	r0, #10
 800a38e:	f7f8 fe25 	bl	8002fdc <HAL_Delay>
      ms += 10U;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	330a      	adds	r3, #10
 800a396:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 f926 	bl	800b5ea <USB_GetMode>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d005      	beq.n	800a3b0 <USB_SetCurrentMode+0x84>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2bc7      	cmp	r3, #199	@ 0xc7
 800a3a8:	d9f0      	bls.n	800a38c <USB_SetCurrentMode+0x60>
 800a3aa:	e001      	b.n	800a3b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e005      	b.n	800a3bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2bc8      	cmp	r3, #200	@ 0xc8
 800a3b4:	d101      	bne.n	800a3ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b086      	sub	sp, #24
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a3d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a3de:	2300      	movs	r3, #0
 800a3e0:	613b      	str	r3, [r7, #16]
 800a3e2:	e009      	b.n	800a3f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	3340      	adds	r3, #64	@ 0x40
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	613b      	str	r3, [r7, #16]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b0e      	cmp	r3, #14
 800a3fc:	d9f2      	bls.n	800a3e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a3fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a402:	2b00      	cmp	r3, #0
 800a404:	d11c      	bne.n	800a440 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a41e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a436:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a43e:	e00b      	b.n	800a458 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a444:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a450:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a45e:	461a      	mov	r2, r3
 800a460:	2300      	movs	r3, #0
 800a462:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a464:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d10d      	bne.n	800a488 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a46c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a474:	2100      	movs	r1, #0
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f968 	bl	800a74c <USB_SetDevSpeed>
 800a47c:	e008      	b.n	800a490 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a47e:	2101      	movs	r1, #1
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f963 	bl	800a74c <USB_SetDevSpeed>
 800a486:	e003      	b.n	800a490 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a488:	2103      	movs	r1, #3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f95e 	bl	800a74c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a490:	2110      	movs	r1, #16
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f8fa 	bl	800a68c <USB_FlushTxFifo>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f924 	bl	800a6f0 <USB_FlushRxFifo>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	e043      	b.n	800a564 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4f2:	d118      	bne.n	800a526 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a506:	461a      	mov	r2, r3
 800a508:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	e013      	b.n	800a538 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51c:	461a      	mov	r2, r3
 800a51e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	e008      	b.n	800a538 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a532:	461a      	mov	r2, r3
 800a534:	2300      	movs	r3, #0
 800a536:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a544:	461a      	mov	r2, r3
 800a546:	2300      	movs	r3, #0
 800a548:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a556:	461a      	mov	r2, r3
 800a558:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a55c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	3301      	adds	r3, #1
 800a562:	613b      	str	r3, [r7, #16]
 800a564:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a568:	461a      	mov	r2, r3
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d3b5      	bcc.n	800a4dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a570:	2300      	movs	r3, #0
 800a572:	613b      	str	r3, [r7, #16]
 800a574:	e043      	b.n	800a5fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a58c:	d118      	bne.n	800a5c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	015a      	lsls	r2, r3, #5
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4413      	add	r3, r2
 800a59c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	e013      	b.n	800a5d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	e008      	b.n	800a5d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5de:	461a      	mov	r2, r3
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a5f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a602:	461a      	mov	r2, r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	4293      	cmp	r3, r2
 800a608:	d3b5      	bcc.n	800a576 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a61c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a62a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a62c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a630:	2b00      	cmp	r3, #0
 800a632:	d105      	bne.n	800a640 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	f043 0210 	orr.w	r2, r3, #16
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	699a      	ldr	r2, [r3, #24]
 800a644:	4b10      	ldr	r3, [pc, #64]	@ (800a688 <USB_DevInit+0x2c4>)
 800a646:	4313      	orrs	r3, r2
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a64c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a650:	2b00      	cmp	r3, #0
 800a652:	d005      	beq.n	800a660 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	f043 0208 	orr.w	r2, r3, #8
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a660:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a664:	2b01      	cmp	r3, #1
 800a666:	d107      	bne.n	800a678 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a670:	f043 0304 	orr.w	r3, r3, #4
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a678:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a684:	b004      	add	sp, #16
 800a686:	4770      	bx	lr
 800a688:	803c3800 	.word	0x803c3800

0800a68c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3301      	adds	r3, #1
 800a69e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6a6:	d901      	bls.n	800a6ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e01b      	b.n	800a6e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	daf2      	bge.n	800a69a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	019b      	lsls	r3, r3, #6
 800a6bc:	f043 0220 	orr.w	r2, r3, #32
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6d0:	d901      	bls.n	800a6d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e006      	b.n	800a6e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	d0f0      	beq.n	800a6c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3301      	adds	r3, #1
 800a700:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a708:	d901      	bls.n	800a70e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e018      	b.n	800a740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	daf2      	bge.n	800a6fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2210      	movs	r2, #16
 800a71e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3301      	adds	r3, #1
 800a724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a72c:	d901      	bls.n	800a732 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e006      	b.n	800a740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	f003 0310 	and.w	r3, r3, #16
 800a73a:	2b10      	cmp	r3, #16
 800a73c:	d0f0      	beq.n	800a720 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	68f9      	ldr	r1, [r7, #12]
 800a768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a76c:	4313      	orrs	r3, r2
 800a76e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a77e:	b480      	push	{r7}
 800a780:	b087      	sub	sp, #28
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f003 0306 	and.w	r3, r3, #6
 800a796:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d102      	bne.n	800a7a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	75fb      	strb	r3, [r7, #23]
 800a7a2:	e00a      	b.n	800a7ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d002      	beq.n	800a7b0 <USB_GetDevSpeed+0x32>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b06      	cmp	r3, #6
 800a7ae:	d102      	bne.n	800a7b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	75fb      	strb	r3, [r7, #23]
 800a7b4:	e001      	b.n	800a7ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a7b6:	230f      	movs	r3, #15
 800a7b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	371c      	adds	r7, #28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d13a      	bne.n	800a85a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ea:	69da      	ldr	r2, [r3, #28]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f003 030f 	and.w	r3, r3, #15
 800a7f4:	2101      	movs	r1, #1
 800a7f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	68f9      	ldr	r1, [r7, #12]
 800a7fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a802:	4313      	orrs	r3, r2
 800a804:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	015a      	lsls	r2, r3, #5
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	4413      	add	r3, r2
 800a80e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d155      	bne.n	800a8c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	791b      	ldrb	r3, [r3, #4]
 800a836:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a838:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	059b      	lsls	r3, r3, #22
 800a83e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a840:	4313      	orrs	r3, r2
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	0151      	lsls	r1, r2, #5
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	440a      	add	r2, r1
 800a84a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a84e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	e036      	b.n	800a8c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a860:	69da      	ldr	r2, [r3, #28]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	2101      	movs	r1, #1
 800a86c:	fa01 f303 	lsl.w	r3, r1, r3
 800a870:	041b      	lsls	r3, r3, #16
 800a872:	68f9      	ldr	r1, [r7, #12]
 800a874:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a878:	4313      	orrs	r3, r2
 800a87a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d11a      	bne.n	800a8c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	791b      	ldrb	r3, [r3, #4]
 800a8ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8ae:	430b      	orrs	r3, r1
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	0151      	lsls	r1, r2, #5
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	440a      	add	r2, r1
 800a8ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	785b      	ldrb	r3, [r3, #1]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d161      	bne.n	800a9b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a906:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a90a:	d11f      	bne.n	800a94c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	440a      	add	r2, r1
 800a922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a926:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a92a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	0151      	lsls	r1, r2, #5
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	440a      	add	r2, r1
 800a942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a946:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a94a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	f003 030f 	and.w	r3, r3, #15
 800a95c:	2101      	movs	r1, #1
 800a95e:	fa01 f303 	lsl.w	r3, r1, r3
 800a962:	b29b      	uxth	r3, r3
 800a964:	43db      	mvns	r3, r3
 800a966:	68f9      	ldr	r1, [r7, #12]
 800a968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a96c:	4013      	ands	r3, r2
 800a96e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a976:	69da      	ldr	r2, [r3, #28]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	2101      	movs	r1, #1
 800a982:	fa01 f303 	lsl.w	r3, r1, r3
 800a986:	b29b      	uxth	r3, r3
 800a988:	43db      	mvns	r3, r3
 800a98a:	68f9      	ldr	r1, [r7, #12]
 800a98c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a990:	4013      	ands	r3, r2
 800a992:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	0159      	lsls	r1, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	440b      	add	r3, r1
 800a9aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4b35      	ldr	r3, [pc, #212]	@ (800aa88 <USB_DeactivateEndpoint+0x1b0>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	600b      	str	r3, [r1, #0]
 800a9b6:	e060      	b.n	800aa7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9ce:	d11f      	bne.n	800aa10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	0151      	lsls	r1, r2, #5
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	440a      	add	r2, r1
 800a9e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a9ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	0151      	lsls	r1, r2, #5
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	440a      	add	r2, r1
 800aa06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	f003 030f 	and.w	r3, r3, #15
 800aa20:	2101      	movs	r1, #1
 800aa22:	fa01 f303 	lsl.w	r3, r1, r3
 800aa26:	041b      	lsls	r3, r3, #16
 800aa28:	43db      	mvns	r3, r3
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa30:	4013      	ands	r3, r2
 800aa32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa3a:	69da      	ldr	r2, [r3, #28]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	2101      	movs	r1, #1
 800aa46:	fa01 f303 	lsl.w	r3, r1, r3
 800aa4a:	041b      	lsls	r3, r3, #16
 800aa4c:	43db      	mvns	r3, r3
 800aa4e:	68f9      	ldr	r1, [r7, #12]
 800aa50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa54:	4013      	ands	r3, r2
 800aa56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	0159      	lsls	r1, r3, #5
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	440b      	add	r3, r1
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa72:	4619      	mov	r1, r3
 800aa74:	4b05      	ldr	r3, [pc, #20]	@ (800aa8c <USB_DeactivateEndpoint+0x1b4>)
 800aa76:	4013      	ands	r3, r2
 800aa78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	ec337800 	.word	0xec337800
 800aa8c:	eff37800 	.word	0xeff37800

0800aa90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08a      	sub	sp, #40	@ 0x28
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	785b      	ldrb	r3, [r3, #1]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	f040 817f 	bne.w	800adb0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d132      	bne.n	800ab20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	0151      	lsls	r1, r2, #5
 800aacc:	69fa      	ldr	r2, [r7, #28]
 800aace:	440a      	add	r2, r1
 800aad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aad4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aad8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aadc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	0151      	lsls	r1, r2, #5
 800aaf0:	69fa      	ldr	r2, [r7, #28]
 800aaf2:	440a      	add	r2, r1
 800aaf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aafc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	0151      	lsls	r1, r2, #5
 800ab10:	69fa      	ldr	r2, [r7, #28]
 800ab12:	440a      	add	r2, r1
 800ab14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab18:	0cdb      	lsrs	r3, r3, #19
 800ab1a:	04db      	lsls	r3, r3, #19
 800ab1c:	6113      	str	r3, [r2, #16]
 800ab1e:	e097      	b.n	800ac50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	69fa      	ldr	r2, [r7, #28]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab3a:	0cdb      	lsrs	r3, r3, #19
 800ab3c:	04db      	lsls	r3, r3, #19
 800ab3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	69ba      	ldr	r2, [r7, #24]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ab62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d11a      	bne.n	800aba0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	691a      	ldr	r2, [r3, #16]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d903      	bls.n	800ab7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	69ba      	ldr	r2, [r7, #24]
 800ab8e:	0151      	lsls	r1, r2, #5
 800ab90:	69fa      	ldr	r2, [r7, #28]
 800ab92:	440a      	add	r2, r1
 800ab94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab9c:	6113      	str	r3, [r2, #16]
 800ab9e:	e044      	b.n	800ac2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	691a      	ldr	r2, [r3, #16]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	4413      	add	r3, r2
 800abaa:	1e5a      	subs	r2, r3, #1
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc2:	691a      	ldr	r2, [r3, #16]
 800abc4:	8afb      	ldrh	r3, [r7, #22]
 800abc6:	04d9      	lsls	r1, r3, #19
 800abc8:	4ba4      	ldr	r3, [pc, #656]	@ (800ae5c <USB_EPStartXfer+0x3cc>)
 800abca:	400b      	ands	r3, r1
 800abcc:	69b9      	ldr	r1, [r7, #24]
 800abce:	0148      	lsls	r0, r1, #5
 800abd0:	69f9      	ldr	r1, [r7, #28]
 800abd2:	4401      	add	r1, r0
 800abd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800abd8:	4313      	orrs	r3, r2
 800abda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	791b      	ldrb	r3, [r3, #4]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d122      	bne.n	800ac2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	0151      	lsls	r1, r2, #5
 800abf6:	69fa      	ldr	r2, [r7, #28]
 800abf8:	440a      	add	r2, r1
 800abfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abfe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ac02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac10:	691a      	ldr	r2, [r3, #16]
 800ac12:	8afb      	ldrh	r3, [r7, #22]
 800ac14:	075b      	lsls	r3, r3, #29
 800ac16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ac1a:	69b9      	ldr	r1, [r7, #24]
 800ac1c:	0148      	lsls	r0, r1, #5
 800ac1e:	69f9      	ldr	r1, [r7, #28]
 800ac20:	4401      	add	r1, r0
 800ac22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ac26:	4313      	orrs	r3, r2
 800ac28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	015a      	lsls	r2, r3, #5
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	4413      	add	r3, r2
 800ac32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac36:	691a      	ldr	r2, [r3, #16]
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac40:	69b9      	ldr	r1, [r7, #24]
 800ac42:	0148      	lsls	r0, r1, #5
 800ac44:	69f9      	ldr	r1, [r7, #28]
 800ac46:	4401      	add	r1, r0
 800ac48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d14b      	bne.n	800acee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d009      	beq.n	800ac72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	015a      	lsls	r2, r3, #5
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	791b      	ldrb	r3, [r3, #4]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d128      	bne.n	800accc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d110      	bne.n	800acac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	0151      	lsls	r1, r2, #5
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	440a      	add	r2, r1
 800aca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aca4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aca8:	6013      	str	r3, [r2, #0]
 800acaa:	e00f      	b.n	800accc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	69ba      	ldr	r2, [r7, #24]
 800acbc:	0151      	lsls	r1, r2, #5
 800acbe:	69fa      	ldr	r2, [r7, #28]
 800acc0:	440a      	add	r2, r1
 800acc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	0151      	lsls	r1, r2, #5
 800acde:	69fa      	ldr	r2, [r7, #28]
 800ace0:	440a      	add	r2, r1
 800ace2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ace6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	e166      	b.n	800afbc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	69ba      	ldr	r2, [r7, #24]
 800acfe:	0151      	lsls	r1, r2, #5
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	440a      	add	r2, r1
 800ad04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad0c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	791b      	ldrb	r3, [r3, #4]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d015      	beq.n	800ad42 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 814e 	beq.w	800afbc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	f003 030f 	and.w	r3, r3, #15
 800ad30:	2101      	movs	r1, #1
 800ad32:	fa01 f303 	lsl.w	r3, r1, r3
 800ad36:	69f9      	ldr	r1, [r7, #28]
 800ad38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	634b      	str	r3, [r1, #52]	@ 0x34
 800ad40:	e13c      	b.n	800afbc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d110      	bne.n	800ad74 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	0151      	lsls	r1, r2, #5
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	440a      	add	r2, r1
 800ad68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	e00f      	b.n	800ad94 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	0151      	lsls	r1, r2, #5
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	440a      	add	r2, r1
 800ad8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	68d9      	ldr	r1, [r3, #12]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	b298      	uxth	r0, r3
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	4603      	mov	r3, r0
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 f9b9 	bl	800b120 <USB_WritePacket>
 800adae:	e105      	b.n	800afbc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	69ba      	ldr	r2, [r7, #24]
 800adc0:	0151      	lsls	r1, r2, #5
 800adc2:	69fa      	ldr	r2, [r7, #28]
 800adc4:	440a      	add	r2, r1
 800adc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adca:	0cdb      	lsrs	r3, r3, #19
 800adcc:	04db      	lsls	r3, r3, #19
 800adce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	4413      	add	r3, r2
 800add8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	0151      	lsls	r1, r2, #5
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	440a      	add	r2, r1
 800ade6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800adee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800adf2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d132      	bne.n	800ae60 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	689a      	ldr	r2, [r3, #8]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	689a      	ldr	r2, [r3, #8]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae1e:	691a      	ldr	r2, [r3, #16]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae28:	69b9      	ldr	r1, [r7, #24]
 800ae2a:	0148      	lsls	r0, r1, #5
 800ae2c:	69f9      	ldr	r1, [r7, #28]
 800ae2e:	4401      	add	r1, r0
 800ae30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae34:	4313      	orrs	r3, r2
 800ae36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	015a      	lsls	r2, r3, #5
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	69ba      	ldr	r2, [r7, #24]
 800ae48:	0151      	lsls	r1, r2, #5
 800ae4a:	69fa      	ldr	r2, [r7, #28]
 800ae4c:	440a      	add	r2, r1
 800ae4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae56:	6113      	str	r3, [r2, #16]
 800ae58:	e062      	b.n	800af20 <USB_EPStartXfer+0x490>
 800ae5a:	bf00      	nop
 800ae5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d123      	bne.n	800aeb0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae74:	691a      	ldr	r2, [r3, #16]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae7e:	69b9      	ldr	r1, [r7, #24]
 800ae80:	0148      	lsls	r0, r1, #5
 800ae82:	69f9      	ldr	r1, [r7, #28]
 800ae84:	4401      	add	r1, r0
 800ae86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	015a      	lsls	r2, r3, #5
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	4413      	add	r3, r2
 800ae96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	69ba      	ldr	r2, [r7, #24]
 800ae9e:	0151      	lsls	r1, r2, #5
 800aea0:	69fa      	ldr	r2, [r7, #28]
 800aea2:	440a      	add	r2, r1
 800aea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aea8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aeac:	6113      	str	r3, [r2, #16]
 800aeae:	e037      	b.n	800af20 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	691a      	ldr	r2, [r3, #16]
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	1e5a      	subs	r2, r3, #1
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	8afa      	ldrh	r2, [r7, #22]
 800aecc:	fb03 f202 	mul.w	r2, r3, r2
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee0:	691a      	ldr	r2, [r3, #16]
 800aee2:	8afb      	ldrh	r3, [r7, #22]
 800aee4:	04d9      	lsls	r1, r3, #19
 800aee6:	4b38      	ldr	r3, [pc, #224]	@ (800afc8 <USB_EPStartXfer+0x538>)
 800aee8:	400b      	ands	r3, r1
 800aeea:	69b9      	ldr	r1, [r7, #24]
 800aeec:	0148      	lsls	r0, r1, #5
 800aeee:	69f9      	ldr	r1, [r7, #28]
 800aef0:	4401      	add	r1, r0
 800aef2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aef6:	4313      	orrs	r3, r2
 800aef8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af06:	691a      	ldr	r2, [r3, #16]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af10:	69b9      	ldr	r1, [r7, #24]
 800af12:	0148      	lsls	r0, r1, #5
 800af14:	69f9      	ldr	r1, [r7, #28]
 800af16:	4401      	add	r1, r0
 800af18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800af1c:	4313      	orrs	r3, r2
 800af1e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d10d      	bne.n	800af42 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d009      	beq.n	800af42 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	68d9      	ldr	r1, [r3, #12]
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af3e:	460a      	mov	r2, r1
 800af40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	791b      	ldrb	r3, [r3, #4]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d128      	bne.n	800af9c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af56:	2b00      	cmp	r3, #0
 800af58:	d110      	bne.n	800af7c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	015a      	lsls	r2, r3, #5
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	4413      	add	r3, r2
 800af62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	0151      	lsls	r1, r2, #5
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	440a      	add	r2, r1
 800af70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	e00f      	b.n	800af9c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	69ba      	ldr	r2, [r7, #24]
 800af8c:	0151      	lsls	r1, r2, #5
 800af8e:	69fa      	ldr	r2, [r7, #28]
 800af90:	440a      	add	r2, r1
 800af92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	015a      	lsls	r2, r3, #5
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	4413      	add	r3, r2
 800afa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	0151      	lsls	r1, r2, #5
 800afae:	69fa      	ldr	r2, [r7, #28]
 800afb0:	440a      	add	r2, r1
 800afb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800afba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3720      	adds	r7, #32
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	1ff80000 	.word	0x1ff80000

0800afcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800afda:	2300      	movs	r3, #0
 800afdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d14a      	bne.n	800b080 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800affe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b002:	f040 8086 	bne.w	800b112 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	7812      	ldrb	r2, [r2, #0]
 800b01a:	0151      	lsls	r1, r2, #5
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	440a      	add	r2, r1
 800b020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b024:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b028:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	015a      	lsls	r2, r3, #5
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	4413      	add	r3, r2
 800b034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	7812      	ldrb	r2, [r2, #0]
 800b03e:	0151      	lsls	r1, r2, #5
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	440a      	add	r2, r1
 800b044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b048:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b04c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3301      	adds	r3, #1
 800b052:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d902      	bls.n	800b064 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	75fb      	strb	r3, [r7, #23]
          break;
 800b062:	e056      	b.n	800b112 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b07c:	d0e7      	beq.n	800b04e <USB_EPStopXfer+0x82>
 800b07e:	e048      	b.n	800b112 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	015a      	lsls	r2, r3, #5
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	4413      	add	r3, r2
 800b08a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b098:	d13b      	bne.n	800b112 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	7812      	ldrb	r2, [r2, #0]
 800b0ae:	0151      	lsls	r1, r2, #5
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	440a      	add	r2, r1
 800b0b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b0bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	7812      	ldrb	r2, [r2, #0]
 800b0d2:	0151      	lsls	r1, r2, #5
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	440a      	add	r2, r1
 800b0d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b0e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d902      	bls.n	800b0f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b0f6:	e00c      	b.n	800b112 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	4413      	add	r3, r2
 800b102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b10c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b110:	d0e7      	beq.n	800b0e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b112:	7dfb      	ldrb	r3, [r7, #23]
}
 800b114:	4618      	mov	r0, r3
 800b116:	371c      	adds	r7, #28
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b120:	b480      	push	{r7}
 800b122:	b089      	sub	sp, #36	@ 0x24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4611      	mov	r1, r2
 800b12c:	461a      	mov	r2, r3
 800b12e:	460b      	mov	r3, r1
 800b130:	71fb      	strb	r3, [r7, #7]
 800b132:	4613      	mov	r3, r2
 800b134:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b13e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b142:	2b00      	cmp	r3, #0
 800b144:	d123      	bne.n	800b18e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b146:	88bb      	ldrh	r3, [r7, #4]
 800b148:	3303      	adds	r3, #3
 800b14a:	089b      	lsrs	r3, r3, #2
 800b14c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b14e:	2300      	movs	r3, #0
 800b150:	61bb      	str	r3, [r7, #24]
 800b152:	e018      	b.n	800b186 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	031a      	lsls	r2, r3, #12
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	4413      	add	r3, r2
 800b15c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b160:	461a      	mov	r2, r3
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	3301      	adds	r3, #1
 800b16c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3301      	adds	r3, #1
 800b172:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	3301      	adds	r3, #1
 800b178:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	3301      	adds	r3, #1
 800b17e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	3301      	adds	r3, #1
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d3e2      	bcc.n	800b154 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3724      	adds	r7, #36	@ 0x24
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b08b      	sub	sp, #44	@ 0x2c
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b1b2:	88fb      	ldrh	r3, [r7, #6]
 800b1b4:	089b      	lsrs	r3, r3, #2
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b1ba:	88fb      	ldrh	r3, [r7, #6]
 800b1bc:	f003 0303 	and.w	r3, r3, #3
 800b1c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	623b      	str	r3, [r7, #32]
 800b1c6:	e014      	b.n	800b1f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	3301      	adds	r3, #1
 800b1de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	623b      	str	r3, [r7, #32]
 800b1f2:	6a3a      	ldr	r2, [r7, #32]
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d3e6      	bcc.n	800b1c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b1fa:	8bfb      	ldrh	r3, [r7, #30]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01e      	beq.n	800b23e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b20a:	461a      	mov	r2, r3
 800b20c:	f107 0310 	add.w	r3, r7, #16
 800b210:	6812      	ldr	r2, [r2, #0]
 800b212:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	fa22 f303 	lsr.w	r3, r2, r3
 800b220:	b2da      	uxtb	r2, r3
 800b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b224:	701a      	strb	r2, [r3, #0]
      i++;
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	3301      	adds	r3, #1
 800b22a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	3301      	adds	r3, #1
 800b230:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b232:	8bfb      	ldrh	r3, [r7, #30]
 800b234:	3b01      	subs	r3, #1
 800b236:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b238:	8bfb      	ldrh	r3, [r7, #30]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1ea      	bne.n	800b214 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b240:	4618      	mov	r0, r3
 800b242:	372c      	adds	r7, #44	@ 0x2c
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	785b      	ldrb	r3, [r3, #1]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d12c      	bne.n	800b2c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	db12      	blt.n	800b2a0 <USB_EPSetStall+0x54>
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00f      	beq.n	800b2a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	0151      	lsls	r1, r2, #5
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	440a      	add	r2, r1
 800b296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b29a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b29e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	0151      	lsls	r1, r2, #5
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	440a      	add	r2, r1
 800b2b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2be:	6013      	str	r3, [r2, #0]
 800b2c0:	e02b      	b.n	800b31a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	db12      	blt.n	800b2fa <USB_EPSetStall+0xae>
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00f      	beq.n	800b2fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	0151      	lsls	r1, r2, #5
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	440a      	add	r2, r1
 800b2f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b2f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	4413      	add	r3, r2
 800b302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	0151      	lsls	r1, r2, #5
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	440a      	add	r2, r1
 800b310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b314:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b318:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	785b      	ldrb	r3, [r3, #1]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d128      	bne.n	800b396 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	0151      	lsls	r1, r2, #5
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	440a      	add	r2, r1
 800b35a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b35e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b362:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	791b      	ldrb	r3, [r3, #4]
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d003      	beq.n	800b374 <USB_EPClearStall+0x4c>
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	791b      	ldrb	r3, [r3, #4]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d138      	bne.n	800b3e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	015a      	lsls	r2, r3, #5
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	0151      	lsls	r1, r2, #5
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	440a      	add	r2, r1
 800b38a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b38e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	e027      	b.n	800b3e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	0151      	lsls	r1, r2, #5
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	440a      	add	r2, r1
 800b3ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	791b      	ldrb	r3, [r3, #4]
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d003      	beq.n	800b3c6 <USB_EPClearStall+0x9e>
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	791b      	ldrb	r3, [r3, #4]
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d10f      	bne.n	800b3e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	0151      	lsls	r1, r2, #5
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	440a      	add	r2, r1
 800b3dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b412:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b416:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	011b      	lsls	r3, r3, #4
 800b424:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b428:	68f9      	ldr	r1, [r7, #12]
 800b42a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b42e:	4313      	orrs	r3, r2
 800b430:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b45a:	f023 0303 	bic.w	r3, r3, #3
 800b45e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b46e:	f023 0302 	bic.w	r3, r3, #2
 800b472:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b482:	b480      	push	{r7}
 800b484:	b085      	sub	sp, #20
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b49c:	f023 0303 	bic.w	r3, r3, #3
 800b4a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4b0:	f043 0302 	orr.w	r3, r3, #2
 800b4b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	4013      	ands	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b085      	sub	sp, #20
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b506:	69db      	ldr	r3, [r3, #28]
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	4013      	ands	r3, r2
 800b50c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	0c1b      	lsrs	r3, r3, #16
}
 800b512:	4618      	mov	r0, r3
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b51e:	b480      	push	{r7}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b53a:	69db      	ldr	r3, [r3, #28]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	4013      	ands	r3, r2
 800b540:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	b29b      	uxth	r3, r3
}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b552:	b480      	push	{r7}
 800b554:	b085      	sub	sp, #20
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	460b      	mov	r3, r1
 800b55c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b562:	78fb      	ldrb	r3, [r7, #3]
 800b564:	015a      	lsls	r2, r3, #5
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	4413      	add	r3, r2
 800b56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	4013      	ands	r3, r2
 800b57e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b580:	68bb      	ldr	r3, [r7, #8]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b58e:	b480      	push	{r7}
 800b590:	b087      	sub	sp, #28
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b5b2:	78fb      	ldrb	r3, [r7, #3]
 800b5b4:	f003 030f 	and.w	r3, r3, #15
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b5be:	01db      	lsls	r3, r3, #7
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	4013      	ands	r3, r2
 800b5da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	371c      	adds	r7, #28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	f003 0301 	and.w	r3, r3, #1
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b606:	b480      	push	{r7}
 800b608:	b085      	sub	sp, #20
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b620:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b624:	f023 0307 	bic.w	r3, r3, #7
 800b628:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b63c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	460b      	mov	r3, r1
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	333c      	adds	r3, #60	@ 0x3c
 800b662:	3304      	adds	r3, #4
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	4a26      	ldr	r2, [pc, #152]	@ (800b704 <USB_EP0_OutStart+0xb8>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d90a      	bls.n	800b686 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b67c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b680:	d101      	bne.n	800b686 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e037      	b.n	800b6f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b68c:	461a      	mov	r2, r3
 800b68e:	2300      	movs	r3, #0
 800b690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6b4:	f043 0318 	orr.w	r3, r3, #24
 800b6b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b6cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b6ce:	7afb      	ldrb	r3, [r7, #11]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d10f      	bne.n	800b6f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6da:	461a      	mov	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b6f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	4f54300a 	.word	0x4f54300a

0800b708 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3301      	adds	r3, #1
 800b718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b720:	d901      	bls.n	800b726 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	e022      	b.n	800b76c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	daf2      	bge.n	800b714 <USB_CoreReset+0xc>

  count = 10U;
 800b72e:	230a      	movs	r3, #10
 800b730:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b732:	e002      	b.n	800b73a <USB_CoreReset+0x32>
  {
    count--;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3b01      	subs	r3, #1
 800b738:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1f9      	bne.n	800b734 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	f043 0201 	orr.w	r2, r3, #1
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3301      	adds	r3, #1
 800b750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b758:	d901      	bls.n	800b75e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b75a:	2303      	movs	r3, #3
 800b75c:	e006      	b.n	800b76c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b01      	cmp	r3, #1
 800b768:	d0f0      	beq.n	800b74c <USB_CoreReset+0x44>

  return HAL_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b784:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b788:	f002 fd1e 	bl	800e1c8 <USBD_static_malloc>
 800b78c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d109      	bne.n	800b7a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	32b0      	adds	r2, #176	@ 0xb0
 800b79e:	2100      	movs	r1, #0
 800b7a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e0d4      	b.n	800b952 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b7a8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f002 fd9e 	bl	800e2f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	32b0      	adds	r2, #176	@ 0xb0
 800b7be:	68f9      	ldr	r1, [r7, #12]
 800b7c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	32b0      	adds	r2, #176	@ 0xb0
 800b7ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	7c1b      	ldrb	r3, [r3, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d138      	bne.n	800b852 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b7e0:	4b5e      	ldr	r3, [pc, #376]	@ (800b95c <USBD_CDC_Init+0x1e4>)
 800b7e2:	7819      	ldrb	r1, [r3, #0]
 800b7e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f002 fbc9 	bl	800df82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b7f0:	4b5a      	ldr	r3, [pc, #360]	@ (800b95c <USBD_CDC_Init+0x1e4>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	f003 020f 	and.w	r2, r3, #15
 800b7f8:	6879      	ldr	r1, [r7, #4]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	440b      	add	r3, r1
 800b804:	3323      	adds	r3, #35	@ 0x23
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b80a:	4b55      	ldr	r3, [pc, #340]	@ (800b960 <USBD_CDC_Init+0x1e8>)
 800b80c:	7819      	ldrb	r1, [r3, #0]
 800b80e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b812:	2202      	movs	r2, #2
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f002 fbb4 	bl	800df82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b81a:	4b51      	ldr	r3, [pc, #324]	@ (800b960 <USBD_CDC_Init+0x1e8>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	f003 020f 	and.w	r2, r3, #15
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	4613      	mov	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	440b      	add	r3, r1
 800b82e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b832:	2201      	movs	r2, #1
 800b834:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b836:	4b4b      	ldr	r3, [pc, #300]	@ (800b964 <USBD_CDC_Init+0x1ec>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	f003 020f 	and.w	r2, r3, #15
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	4613      	mov	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4413      	add	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	440b      	add	r3, r1
 800b84a:	331c      	adds	r3, #28
 800b84c:	2210      	movs	r2, #16
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	e035      	b.n	800b8be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b852:	4b42      	ldr	r3, [pc, #264]	@ (800b95c <USBD_CDC_Init+0x1e4>)
 800b854:	7819      	ldrb	r1, [r3, #0]
 800b856:	2340      	movs	r3, #64	@ 0x40
 800b858:	2202      	movs	r2, #2
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f002 fb91 	bl	800df82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b860:	4b3e      	ldr	r3, [pc, #248]	@ (800b95c <USBD_CDC_Init+0x1e4>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	f003 020f 	and.w	r2, r3, #15
 800b868:	6879      	ldr	r1, [r7, #4]
 800b86a:	4613      	mov	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4413      	add	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	440b      	add	r3, r1
 800b874:	3323      	adds	r3, #35	@ 0x23
 800b876:	2201      	movs	r2, #1
 800b878:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b87a:	4b39      	ldr	r3, [pc, #228]	@ (800b960 <USBD_CDC_Init+0x1e8>)
 800b87c:	7819      	ldrb	r1, [r3, #0]
 800b87e:	2340      	movs	r3, #64	@ 0x40
 800b880:	2202      	movs	r2, #2
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f002 fb7d 	bl	800df82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b888:	4b35      	ldr	r3, [pc, #212]	@ (800b960 <USBD_CDC_Init+0x1e8>)
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	f003 020f 	and.w	r2, r3, #15
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	440b      	add	r3, r1
 800b89c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b8a4:	4b2f      	ldr	r3, [pc, #188]	@ (800b964 <USBD_CDC_Init+0x1ec>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	f003 020f 	and.w	r2, r3, #15
 800b8ac:	6879      	ldr	r1, [r7, #4]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	440b      	add	r3, r1
 800b8b8:	331c      	adds	r3, #28
 800b8ba:	2210      	movs	r2, #16
 800b8bc:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b8be:	4b29      	ldr	r3, [pc, #164]	@ (800b964 <USBD_CDC_Init+0x1ec>)
 800b8c0:	7819      	ldrb	r1, [r3, #0]
 800b8c2:	2308      	movs	r3, #8
 800b8c4:	2203      	movs	r2, #3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f002 fb5b 	bl	800df82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b8cc:	4b25      	ldr	r3, [pc, #148]	@ (800b964 <USBD_CDC_Init+0x1ec>)
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	f003 020f 	and.w	r2, r3, #15
 800b8d4:	6879      	ldr	r1, [r7, #4]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	440b      	add	r3, r1
 800b8e0:	3323      	adds	r3, #35	@ 0x23
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	33b0      	adds	r3, #176	@ 0xb0
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b91c:	2302      	movs	r3, #2
 800b91e:	e018      	b.n	800b952 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	7c1b      	ldrb	r3, [r3, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10a      	bne.n	800b93e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b928:	4b0d      	ldr	r3, [pc, #52]	@ (800b960 <USBD_CDC_Init+0x1e8>)
 800b92a:	7819      	ldrb	r1, [r3, #0]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b932:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f002 fc12 	bl	800e160 <USBD_LL_PrepareReceive>
 800b93c:	e008      	b.n	800b950 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b93e:	4b08      	ldr	r3, [pc, #32]	@ (800b960 <USBD_CDC_Init+0x1e8>)
 800b940:	7819      	ldrb	r1, [r3, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b948:	2340      	movs	r3, #64	@ 0x40
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f002 fc08 	bl	800e160 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	200000bf 	.word	0x200000bf
 800b960:	200000c0 	.word	0x200000c0
 800b964:	200000c1 	.word	0x200000c1

0800b968 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b974:	4b3a      	ldr	r3, [pc, #232]	@ (800ba60 <USBD_CDC_DeInit+0xf8>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f002 fb27 	bl	800dfce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b980:	4b37      	ldr	r3, [pc, #220]	@ (800ba60 <USBD_CDC_DeInit+0xf8>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	f003 020f 	and.w	r2, r3, #15
 800b988:	6879      	ldr	r1, [r7, #4]
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	440b      	add	r3, r1
 800b994:	3323      	adds	r3, #35	@ 0x23
 800b996:	2200      	movs	r2, #0
 800b998:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b99a:	4b32      	ldr	r3, [pc, #200]	@ (800ba64 <USBD_CDC_DeInit+0xfc>)
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f002 fb14 	bl	800dfce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b9a6:	4b2f      	ldr	r3, [pc, #188]	@ (800ba64 <USBD_CDC_DeInit+0xfc>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	f003 020f 	and.w	r2, r3, #15
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b9be:	2200      	movs	r2, #0
 800b9c0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b9c2:	4b29      	ldr	r3, [pc, #164]	@ (800ba68 <USBD_CDC_DeInit+0x100>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f002 fb00 	bl	800dfce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b9ce:	4b26      	ldr	r3, [pc, #152]	@ (800ba68 <USBD_CDC_DeInit+0x100>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	f003 020f 	and.w	r2, r3, #15
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	440b      	add	r3, r1
 800b9e2:	3323      	adds	r3, #35	@ 0x23
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b9e8:	4b1f      	ldr	r3, [pc, #124]	@ (800ba68 <USBD_CDC_DeInit+0x100>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	f003 020f 	and.w	r2, r3, #15
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	440b      	add	r3, r1
 800b9fc:	331c      	adds	r3, #28
 800b9fe:	2200      	movs	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	32b0      	adds	r2, #176	@ 0xb0
 800ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d01f      	beq.n	800ba54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	33b0      	adds	r3, #176	@ 0xb0
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	32b0      	adds	r2, #176	@ 0xb0
 800ba32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f002 fbd4 	bl	800e1e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	32b0      	adds	r2, #176	@ 0xb0
 800ba46:	2100      	movs	r1, #0
 800ba48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	200000bf 	.word	0x200000bf
 800ba64:	200000c0 	.word	0x200000c0
 800ba68:	200000c1 	.word	0x200000c1

0800ba6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	32b0      	adds	r2, #176	@ 0xb0
 800ba80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	e0bf      	b.n	800bc1c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d050      	beq.n	800bb4a <USBD_CDC_Setup+0xde>
 800baa8:	2b20      	cmp	r3, #32
 800baaa:	f040 80af 	bne.w	800bc0c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	88db      	ldrh	r3, [r3, #6]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d03a      	beq.n	800bb2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	b25b      	sxtb	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	da1b      	bge.n	800baf8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	33b0      	adds	r3, #176	@ 0xb0
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bad6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	88d2      	ldrh	r2, [r2, #6]
 800badc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	88db      	ldrh	r3, [r3, #6]
 800bae2:	2b07      	cmp	r3, #7
 800bae4:	bf28      	it	cs
 800bae6:	2307      	movcs	r3, #7
 800bae8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	89fa      	ldrh	r2, [r7, #14]
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f001 fda9 	bl	800d648 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800baf6:	e090      	b.n	800bc1a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	785a      	ldrb	r2, [r3, #1]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	88db      	ldrh	r3, [r3, #6]
 800bb06:	2b3f      	cmp	r3, #63	@ 0x3f
 800bb08:	d803      	bhi.n	800bb12 <USBD_CDC_Setup+0xa6>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	88db      	ldrh	r3, [r3, #6]
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	e000      	b.n	800bb14 <USBD_CDC_Setup+0xa8>
 800bb12:	2240      	movs	r2, #64	@ 0x40
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bb1a:	6939      	ldr	r1, [r7, #16]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bb22:	461a      	mov	r2, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f001 fdbe 	bl	800d6a6 <USBD_CtlPrepareRx>
      break;
 800bb2a:	e076      	b.n	800bc1a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	33b0      	adds	r3, #176	@ 0xb0
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4413      	add	r3, r2
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	7850      	ldrb	r0, [r2, #1]
 800bb42:	2200      	movs	r2, #0
 800bb44:	6839      	ldr	r1, [r7, #0]
 800bb46:	4798      	blx	r3
      break;
 800bb48:	e067      	b.n	800bc1a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	785b      	ldrb	r3, [r3, #1]
 800bb4e:	2b0b      	cmp	r3, #11
 800bb50:	d851      	bhi.n	800bbf6 <USBD_CDC_Setup+0x18a>
 800bb52:	a201      	add	r2, pc, #4	@ (adr r2, 800bb58 <USBD_CDC_Setup+0xec>)
 800bb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb58:	0800bb89 	.word	0x0800bb89
 800bb5c:	0800bc05 	.word	0x0800bc05
 800bb60:	0800bbf7 	.word	0x0800bbf7
 800bb64:	0800bbf7 	.word	0x0800bbf7
 800bb68:	0800bbf7 	.word	0x0800bbf7
 800bb6c:	0800bbf7 	.word	0x0800bbf7
 800bb70:	0800bbf7 	.word	0x0800bbf7
 800bb74:	0800bbf7 	.word	0x0800bbf7
 800bb78:	0800bbf7 	.word	0x0800bbf7
 800bb7c:	0800bbf7 	.word	0x0800bbf7
 800bb80:	0800bbb3 	.word	0x0800bbb3
 800bb84:	0800bbdd 	.word	0x0800bbdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d107      	bne.n	800bba4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bb94:	f107 030a 	add.w	r3, r7, #10
 800bb98:	2202      	movs	r2, #2
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 fd53 	bl	800d648 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bba2:	e032      	b.n	800bc0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f001 fcd1 	bl	800d54e <USBD_CtlError>
            ret = USBD_FAIL;
 800bbac:	2303      	movs	r3, #3
 800bbae:	75fb      	strb	r3, [r7, #23]
          break;
 800bbb0:	e02b      	b.n	800bc0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d107      	bne.n	800bbce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bbbe:	f107 030d 	add.w	r3, r7, #13
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f001 fd3e 	bl	800d648 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bbcc:	e01d      	b.n	800bc0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f001 fcbc 	bl	800d54e <USBD_CtlError>
            ret = USBD_FAIL;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	75fb      	strb	r3, [r7, #23]
          break;
 800bbda:	e016      	b.n	800bc0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d00f      	beq.n	800bc08 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f001 fcaf 	bl	800d54e <USBD_CtlError>
            ret = USBD_FAIL;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bbf4:	e008      	b.n	800bc08 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f001 fca8 	bl	800d54e <USBD_CtlError>
          ret = USBD_FAIL;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	75fb      	strb	r3, [r7, #23]
          break;
 800bc02:	e002      	b.n	800bc0a <USBD_CDC_Setup+0x19e>
          break;
 800bc04:	bf00      	nop
 800bc06:	e008      	b.n	800bc1a <USBD_CDC_Setup+0x1ae>
          break;
 800bc08:	bf00      	nop
      }
      break;
 800bc0a:	e006      	b.n	800bc1a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f001 fc9d 	bl	800d54e <USBD_CtlError>
      ret = USBD_FAIL;
 800bc14:	2303      	movs	r3, #3
 800bc16:	75fb      	strb	r3, [r7, #23]
      break;
 800bc18:	bf00      	nop
  }

  return (uint8_t)ret;
 800bc1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	32b0      	adds	r2, #176	@ 0xb0
 800bc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	e065      	b.n	800bd1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	32b0      	adds	r2, #176	@ 0xb0
 800bc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	f003 020f 	and.w	r2, r3, #15
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	4613      	mov	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4413      	add	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	440b      	add	r3, r1
 800bc70:	3314      	adds	r3, #20
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d02f      	beq.n	800bcd8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bc78:	78fb      	ldrb	r3, [r7, #3]
 800bc7a:	f003 020f 	and.w	r2, r3, #15
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	4613      	mov	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	440b      	add	r3, r1
 800bc8a:	3314      	adds	r3, #20
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	78fb      	ldrb	r3, [r7, #3]
 800bc90:	f003 010f 	and.w	r1, r3, #15
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	460b      	mov	r3, r1
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	440b      	add	r3, r1
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4403      	add	r3, r0
 800bca0:	331c      	adds	r3, #28
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bca8:	fb01 f303 	mul.w	r3, r1, r3
 800bcac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d112      	bne.n	800bcd8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bcb2:	78fb      	ldrb	r3, [r7, #3]
 800bcb4:	f003 020f 	and.w	r2, r3, #15
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4413      	add	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	440b      	add	r3, r1
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bcca:	78f9      	ldrb	r1, [r7, #3]
 800bccc:	2300      	movs	r3, #0
 800bcce:	2200      	movs	r2, #0
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f002 fa24 	bl	800e11e <USBD_LL_Transmit>
 800bcd6:	e01f      	b.n	800bd18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	33b0      	adds	r3, #176	@ 0xb0
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d010      	beq.n	800bd18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	33b0      	adds	r3, #176	@ 0xb0
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bd14:	78fa      	ldrb	r2, [r7, #3]
 800bd16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b084      	sub	sp, #16
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	32b0      	adds	r2, #176	@ 0xb0
 800bd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	32b0      	adds	r2, #176	@ 0xb0
 800bd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bd50:	2303      	movs	r3, #3
 800bd52:	e01a      	b.n	800bd8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bd54:	78fb      	ldrb	r3, [r7, #3]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f002 fa22 	bl	800e1a2 <USBD_LL_GetRxDataSize>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	33b0      	adds	r3, #176	@ 0xb0
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bd84:	4611      	mov	r1, r2
 800bd86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	32b0      	adds	r2, #176	@ 0xb0
 800bda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e024      	b.n	800bdfe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	33b0      	adds	r3, #176	@ 0xb0
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d019      	beq.n	800bdfc <USBD_CDC_EP0_RxReady+0x6a>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bdce:	2bff      	cmp	r3, #255	@ 0xff
 800bdd0:	d014      	beq.n	800bdfc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	33b0      	adds	r3, #176	@ 0xb0
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bdea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bdf2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	22ff      	movs	r2, #255	@ 0xff
 800bdf8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
	...

0800be08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be10:	2182      	movs	r1, #130	@ 0x82
 800be12:	4818      	ldr	r0, [pc, #96]	@ (800be74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be14:	f000 fd62 	bl	800c8dc <USBD_GetEpDesc>
 800be18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be1a:	2101      	movs	r1, #1
 800be1c:	4815      	ldr	r0, [pc, #84]	@ (800be74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be1e:	f000 fd5d 	bl	800c8dc <USBD_GetEpDesc>
 800be22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be24:	2181      	movs	r1, #129	@ 0x81
 800be26:	4813      	ldr	r0, [pc, #76]	@ (800be74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be28:	f000 fd58 	bl	800c8dc <USBD_GetEpDesc>
 800be2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2210      	movs	r2, #16
 800be38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d006      	beq.n	800be4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	2200      	movs	r2, #0
 800be44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be48:	711a      	strb	r2, [r3, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d006      	beq.n	800be62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be5c:	711a      	strb	r2, [r3, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2243      	movs	r2, #67	@ 0x43
 800be66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be68:	4b02      	ldr	r3, [pc, #8]	@ (800be74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3718      	adds	r7, #24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	2000007c 	.word	0x2000007c

0800be78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be80:	2182      	movs	r1, #130	@ 0x82
 800be82:	4818      	ldr	r0, [pc, #96]	@ (800bee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be84:	f000 fd2a 	bl	800c8dc <USBD_GetEpDesc>
 800be88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be8a:	2101      	movs	r1, #1
 800be8c:	4815      	ldr	r0, [pc, #84]	@ (800bee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be8e:	f000 fd25 	bl	800c8dc <USBD_GetEpDesc>
 800be92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be94:	2181      	movs	r1, #129	@ 0x81
 800be96:	4813      	ldr	r0, [pc, #76]	@ (800bee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be98:	f000 fd20 	bl	800c8dc <USBD_GetEpDesc>
 800be9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	2210      	movs	r2, #16
 800bea8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d006      	beq.n	800bebe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	2200      	movs	r2, #0
 800beb4:	711a      	strb	r2, [r3, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f042 0202 	orr.w	r2, r2, #2
 800bebc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d006      	beq.n	800bed2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	711a      	strb	r2, [r3, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f042 0202 	orr.w	r2, r2, #2
 800bed0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2243      	movs	r2, #67	@ 0x43
 800bed6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bed8:	4b02      	ldr	r3, [pc, #8]	@ (800bee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	2000007c 	.word	0x2000007c

0800bee8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bef0:	2182      	movs	r1, #130	@ 0x82
 800bef2:	4818      	ldr	r0, [pc, #96]	@ (800bf54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bef4:	f000 fcf2 	bl	800c8dc <USBD_GetEpDesc>
 800bef8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800befa:	2101      	movs	r1, #1
 800befc:	4815      	ldr	r0, [pc, #84]	@ (800bf54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800befe:	f000 fced 	bl	800c8dc <USBD_GetEpDesc>
 800bf02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf04:	2181      	movs	r1, #129	@ 0x81
 800bf06:	4813      	ldr	r0, [pc, #76]	@ (800bf54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf08:	f000 fce8 	bl	800c8dc <USBD_GetEpDesc>
 800bf0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	2210      	movs	r2, #16
 800bf18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d006      	beq.n	800bf2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf28:	711a      	strb	r2, [r3, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d006      	beq.n	800bf42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf3c:	711a      	strb	r2, [r3, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2243      	movs	r2, #67	@ 0x43
 800bf46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf48:	4b02      	ldr	r3, [pc, #8]	@ (800bf54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	2000007c 	.word	0x2000007c

0800bf58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	220a      	movs	r2, #10
 800bf64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bf66:	4b03      	ldr	r3, [pc, #12]	@ (800bf74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	20000038 	.word	0x20000038

0800bf78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	e009      	b.n	800bfa0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	33b0      	adds	r3, #176	@ 0xb0
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	32b0      	adds	r2, #176	@ 0xb0
 800bfc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	e008      	b.n	800bfe4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	371c      	adds	r7, #28
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	32b0      	adds	r2, #176	@ 0xb0
 800c004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c008:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c010:	2303      	movs	r3, #3
 800c012:	e004      	b.n	800c01e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
	...

0800c02c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	32b0      	adds	r2, #176	@ 0xb0
 800c03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c042:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c044:	2301      	movs	r3, #1
 800c046:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c04e:	2303      	movs	r3, #3
 800c050:	e025      	b.n	800c09e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d11f      	bne.n	800c09c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2201      	movs	r2, #1
 800c060:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c064:	4b10      	ldr	r3, [pc, #64]	@ (800c0a8 <USBD_CDC_TransmitPacket+0x7c>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f003 020f 	and.w	r2, r3, #15
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	4613      	mov	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4403      	add	r3, r0
 800c07e:	3314      	adds	r3, #20
 800c080:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c082:	4b09      	ldr	r3, [pc, #36]	@ (800c0a8 <USBD_CDC_TransmitPacket+0x7c>)
 800c084:	7819      	ldrb	r1, [r3, #0]
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f002 f843 	bl	800e11e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	200000bf 	.word	0x200000bf

0800c0ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	32b0      	adds	r2, #176	@ 0xb0
 800c0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	32b0      	adds	r2, #176	@ 0xb0
 800c0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e018      	b.n	800c10c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	7c1b      	ldrb	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10a      	bne.n	800c0f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c0e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c114 <USBD_CDC_ReceivePacket+0x68>)
 800c0e4:	7819      	ldrb	r1, [r3, #0]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c0ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f002 f835 	bl	800e160 <USBD_LL_PrepareReceive>
 800c0f6:	e008      	b.n	800c10a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c0f8:	4b06      	ldr	r3, [pc, #24]	@ (800c114 <USBD_CDC_ReceivePacket+0x68>)
 800c0fa:	7819      	ldrb	r1, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c102:	2340      	movs	r3, #64	@ 0x40
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f002 f82b 	bl	800e160 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	200000c0 	.word	0x200000c0

0800c118 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	4613      	mov	r3, r2
 800c124:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e01f      	b.n	800c170 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	79fa      	ldrb	r2, [r7, #7]
 800c162:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f001 fea5 	bl	800deb4 <USBD_LL_Init>
 800c16a:	4603      	mov	r3, r0
 800c16c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3718      	adds	r7, #24
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c182:	2300      	movs	r3, #0
 800c184:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e025      	b.n	800c1dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	32ae      	adds	r2, #174	@ 0xae
 800c1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00f      	beq.n	800c1cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	32ae      	adds	r2, #174	@ 0xae
 800c1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1bc:	f107 020e 	add.w	r2, r7, #14
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	4798      	blx	r3
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c1d2:	1c5a      	adds	r2, r3, #1
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 fead 	bl	800df4c <USBD_LL_Start>
 800c1f2:	4603      	mov	r3, r0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c204:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c206:	4618      	mov	r0, r3
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	460b      	mov	r3, r1
 800c21c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d009      	beq.n	800c240 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	78fa      	ldrb	r2, [r7, #3]
 800c236:	4611      	mov	r1, r2
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	4798      	blx	r3
 800c23c:	4603      	mov	r3, r0
 800c23e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c240:	7bfb      	ldrb	r3, [r7, #15]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	460b      	mov	r3, r1
 800c254:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	78fa      	ldrb	r2, [r7, #3]
 800c264:	4611      	mov	r1, r2
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	4798      	blx	r3
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c270:	2303      	movs	r3, #3
 800c272:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c274:	7bfb      	ldrb	r3, [r7, #15]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	4618      	mov	r0, r3
 800c292:	f001 f922 	bl	800d4da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c2b2:	f003 031f 	and.w	r3, r3, #31
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d01a      	beq.n	800c2f0 <USBD_LL_SetupStage+0x72>
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d822      	bhi.n	800c304 <USBD_LL_SetupStage+0x86>
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <USBD_LL_SetupStage+0x4a>
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d00a      	beq.n	800c2dc <USBD_LL_SetupStage+0x5e>
 800c2c6:	e01d      	b.n	800c304 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fb77 	bl	800c9c4 <USBD_StdDevReq>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c2da:	e020      	b.n	800c31e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fbdf 	bl	800caa8 <USBD_StdItfReq>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c2ee:	e016      	b.n	800c31e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fc41 	bl	800cb80 <USBD_StdEPReq>
 800c2fe:	4603      	mov	r3, r0
 800c300:	73fb      	strb	r3, [r7, #15]
      break;
 800c302:	e00c      	b.n	800c31e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c30a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f001 fe7a 	bl	800e00c <USBD_LL_StallEP>
 800c318:	4603      	mov	r3, r0
 800c31a:	73fb      	strb	r3, [r7, #15]
      break;
 800c31c:	bf00      	nop
  }

  return ret;
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	460b      	mov	r3, r1
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c336:	2300      	movs	r3, #0
 800c338:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c33a:	7afb      	ldrb	r3, [r7, #11]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d177      	bne.n	800c430 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c346:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c34e:	2b03      	cmp	r3, #3
 800c350:	f040 80a1 	bne.w	800c496 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	693a      	ldr	r2, [r7, #16]
 800c35a:	8992      	ldrh	r2, [r2, #12]
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d91c      	bls.n	800c39a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	8992      	ldrh	r2, [r2, #12]
 800c368:	1a9a      	subs	r2, r3, r2
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	693a      	ldr	r2, [r7, #16]
 800c374:	8992      	ldrh	r2, [r2, #12]
 800c376:	441a      	add	r2, r3
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	6919      	ldr	r1, [r3, #16]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	899b      	ldrh	r3, [r3, #12]
 800c384:	461a      	mov	r2, r3
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	4293      	cmp	r3, r2
 800c38c:	bf38      	it	cc
 800c38e:	4613      	movcc	r3, r2
 800c390:	461a      	mov	r2, r3
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f001 f9a8 	bl	800d6e8 <USBD_CtlContinueRx>
 800c398:	e07d      	b.n	800c496 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c3a0:	f003 031f 	and.w	r3, r3, #31
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d014      	beq.n	800c3d2 <USBD_LL_DataOutStage+0xaa>
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d81d      	bhi.n	800c3e8 <USBD_LL_DataOutStage+0xc0>
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <USBD_LL_DataOutStage+0x8e>
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d003      	beq.n	800c3bc <USBD_LL_DataOutStage+0x94>
 800c3b4:	e018      	b.n	800c3e8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	75bb      	strb	r3, [r7, #22]
            break;
 800c3ba:	e018      	b.n	800c3ee <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 fa6e 	bl	800c8a8 <USBD_CoreFindIF>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	75bb      	strb	r3, [r7, #22]
            break;
 800c3d0:	e00d      	b.n	800c3ee <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 fa70 	bl	800c8c2 <USBD_CoreFindEP>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	75bb      	strb	r3, [r7, #22]
            break;
 800c3e6:	e002      	b.n	800c3ee <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	75bb      	strb	r3, [r7, #22]
            break;
 800c3ec:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c3ee:	7dbb      	ldrb	r3, [r7, #22]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d119      	bne.n	800c428 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b03      	cmp	r3, #3
 800c3fe:	d113      	bne.n	800c428 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c400:	7dba      	ldrb	r2, [r7, #22]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	32ae      	adds	r2, #174	@ 0xae
 800c406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00b      	beq.n	800c428 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c410:	7dba      	ldrb	r2, [r7, #22]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c418:	7dba      	ldrb	r2, [r7, #22]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	32ae      	adds	r2, #174	@ 0xae
 800c41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f001 f96e 	bl	800d70a <USBD_CtlSendStatus>
 800c42e:	e032      	b.n	800c496 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c430:	7afb      	ldrb	r3, [r7, #11]
 800c432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c436:	b2db      	uxtb	r3, r3
 800c438:	4619      	mov	r1, r3
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f000 fa41 	bl	800c8c2 <USBD_CoreFindEP>
 800c440:	4603      	mov	r3, r0
 800c442:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c444:	7dbb      	ldrb	r3, [r7, #22]
 800c446:	2bff      	cmp	r3, #255	@ 0xff
 800c448:	d025      	beq.n	800c496 <USBD_LL_DataOutStage+0x16e>
 800c44a:	7dbb      	ldrb	r3, [r7, #22]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d122      	bne.n	800c496 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c456:	b2db      	uxtb	r3, r3
 800c458:	2b03      	cmp	r3, #3
 800c45a:	d117      	bne.n	800c48c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c45c:	7dba      	ldrb	r2, [r7, #22]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	32ae      	adds	r2, #174	@ 0xae
 800c462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00f      	beq.n	800c48c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c46c:	7dba      	ldrb	r2, [r7, #22]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c474:	7dba      	ldrb	r2, [r7, #22]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	32ae      	adds	r2, #174	@ 0xae
 800c47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	7afa      	ldrb	r2, [r7, #11]
 800c482:	4611      	mov	r1, r2
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	4798      	blx	r3
 800c488:	4603      	mov	r3, r0
 800c48a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	e000      	b.n	800c498 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	607a      	str	r2, [r7, #4]
 800c4ac:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c4ae:	7afb      	ldrb	r3, [r7, #11]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d178      	bne.n	800c5a6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3314      	adds	r3, #20
 800c4b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	d163      	bne.n	800c58c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	8992      	ldrh	r2, [r2, #12]
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d91c      	bls.n	800c50a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	8992      	ldrh	r2, [r2, #12]
 800c4d8:	1a9a      	subs	r2, r3, r2
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	8992      	ldrh	r2, [r2, #12]
 800c4e6:	441a      	add	r2, r3
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	6919      	ldr	r1, [r3, #16]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f001 f8c4 	bl	800d684 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	2200      	movs	r2, #0
 800c500:	2100      	movs	r1, #0
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f001 fe2c 	bl	800e160 <USBD_LL_PrepareReceive>
 800c508:	e040      	b.n	800c58c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	899b      	ldrh	r3, [r3, #12]
 800c50e:	461a      	mov	r2, r3
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d11c      	bne.n	800c552 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c520:	4293      	cmp	r3, r2
 800c522:	d316      	bcc.n	800c552 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c52e:	429a      	cmp	r2, r3
 800c530:	d20f      	bcs.n	800c552 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c532:	2200      	movs	r2, #0
 800c534:	2100      	movs	r1, #0
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f001 f8a4 	bl	800d684 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c544:	2300      	movs	r3, #0
 800c546:	2200      	movs	r2, #0
 800c548:	2100      	movs	r1, #0
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f001 fe08 	bl	800e160 <USBD_LL_PrepareReceive>
 800c550:	e01c      	b.n	800c58c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	2b03      	cmp	r3, #3
 800c55c:	d10f      	bne.n	800c57e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d009      	beq.n	800c57e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c57e:	2180      	movs	r1, #128	@ 0x80
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f001 fd43 	bl	800e00c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f001 f8d2 	bl	800d730 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d03a      	beq.n	800c60c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f7ff fe30 	bl	800c1fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c5a4:	e032      	b.n	800c60c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c5a6:	7afb      	ldrb	r3, [r7, #11]
 800c5a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f986 	bl	800c8c2 <USBD_CoreFindEP>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
 800c5bc:	2bff      	cmp	r3, #255	@ 0xff
 800c5be:	d025      	beq.n	800c60c <USBD_LL_DataInStage+0x16c>
 800c5c0:	7dfb      	ldrb	r3, [r7, #23]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d122      	bne.n	800c60c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	d11c      	bne.n	800c60c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c5d2:	7dfa      	ldrb	r2, [r7, #23]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	32ae      	adds	r2, #174	@ 0xae
 800c5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d014      	beq.n	800c60c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c5e2:	7dfa      	ldrb	r2, [r7, #23]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c5ea:	7dfa      	ldrb	r2, [r7, #23]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	32ae      	adds	r2, #174	@ 0xae
 800c5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	7afa      	ldrb	r2, [r7, #11]
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	4798      	blx	r3
 800c5fe:	4603      	mov	r3, r0
 800c600:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c602:	7dbb      	ldrb	r3, [r7, #22]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c608:	7dbb      	ldrb	r3, [r7, #22]
 800c60a:	e000      	b.n	800c60e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3718      	adds	r7, #24
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b084      	sub	sp, #16
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d014      	beq.n	800c67c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00e      	beq.n	800c67c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	6852      	ldr	r2, [r2, #4]
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	4611      	mov	r1, r2
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	4798      	blx	r3
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c678:	2303      	movs	r3, #3
 800c67a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c67c:	2340      	movs	r3, #64	@ 0x40
 800c67e:	2200      	movs	r2, #0
 800c680:	2100      	movs	r1, #0
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f001 fc7d 	bl	800df82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2240      	movs	r2, #64	@ 0x40
 800c694:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c698:	2340      	movs	r3, #64	@ 0x40
 800c69a:	2200      	movs	r2, #0
 800c69c:	2180      	movs	r1, #128	@ 0x80
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f001 fc6f 	bl	800df82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2240      	movs	r2, #64	@ 0x40
 800c6b0:	841a      	strh	r2, [r3, #32]

  return ret;
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	78fa      	ldrb	r2, [r7, #3]
 800c6cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	2b04      	cmp	r3, #4
 800c6ee:	d006      	beq.n	800c6fe <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2204      	movs	r2, #4
 800c702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b04      	cmp	r3, #4
 800c726:	d106      	bne.n	800c736 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b03      	cmp	r3, #3
 800c756:	d110      	bne.n	800c77a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00b      	beq.n	800c77a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d005      	beq.n	800c77a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	460b      	mov	r3, r1
 800c78e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	32ae      	adds	r2, #174	@ 0xae
 800c79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e01c      	b.n	800c7e0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d115      	bne.n	800c7de <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	32ae      	adds	r2, #174	@ 0xae
 800c7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00b      	beq.n	800c7de <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	32ae      	adds	r2, #174	@ 0xae
 800c7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	78fa      	ldrb	r2, [r7, #3]
 800c7d8:	4611      	mov	r1, r2
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	32ae      	adds	r2, #174	@ 0xae
 800c7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c806:	2303      	movs	r3, #3
 800c808:	e01c      	b.n	800c844 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b03      	cmp	r3, #3
 800c814:	d115      	bne.n	800c842 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	32ae      	adds	r2, #174	@ 0xae
 800c820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00b      	beq.n	800c842 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	32ae      	adds	r2, #174	@ 0xae
 800c834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c83a:	78fa      	ldrb	r2, [r7, #3]
 800c83c:	4611      	mov	r1, r2
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	370c      	adds	r7, #12
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00e      	beq.n	800c89e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	6852      	ldr	r2, [r2, #4]
 800c88c:	b2d2      	uxtb	r2, r2
 800c88e:	4611      	mov	r1, r2
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	4798      	blx	r3
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c89a:	2303      	movs	r3, #3
 800c89c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c8b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c8c2:	b480      	push	{r7}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c8ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	885b      	ldrh	r3, [r3, #2]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	7812      	ldrb	r2, [r2, #0]
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d91f      	bls.n	800c942 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c908:	e013      	b.n	800c932 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c90a:	f107 030a 	add.w	r3, r7, #10
 800c90e:	4619      	mov	r1, r3
 800c910:	6978      	ldr	r0, [r7, #20]
 800c912:	f000 f81b 	bl	800c94c <USBD_GetNextDesc>
 800c916:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	785b      	ldrb	r3, [r3, #1]
 800c91c:	2b05      	cmp	r3, #5
 800c91e:	d108      	bne.n	800c932 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	789b      	ldrb	r3, [r3, #2]
 800c928:	78fa      	ldrb	r2, [r7, #3]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d008      	beq.n	800c940 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c92e:	2300      	movs	r3, #0
 800c930:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	885b      	ldrh	r3, [r3, #2]
 800c936:	b29a      	uxth	r2, r3
 800c938:	897b      	ldrh	r3, [r7, #10]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d8e5      	bhi.n	800c90a <USBD_GetEpDesc+0x2e>
 800c93e:	e000      	b.n	800c942 <USBD_GetEpDesc+0x66>
          break;
 800c940:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c942:	693b      	ldr	r3, [r7, #16]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3718      	adds	r7, #24
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	7812      	ldrb	r2, [r2, #0]
 800c962:	4413      	add	r3, r2
 800c964:	b29a      	uxth	r2, r3
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4413      	add	r3, r2
 800c974:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c976:	68fb      	ldr	r3, [r7, #12]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3714      	adds	r7, #20
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c984:	b480      	push	{r7}
 800c986:	b087      	sub	sp, #28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	3301      	adds	r3, #1
 800c99a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c9a6:	021b      	lsls	r3, r3, #8
 800c9a8:	b21a      	sxth	r2, r3
 800c9aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	b21b      	sxth	r3, r3
 800c9b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
	...

0800c9c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9da:	2b40      	cmp	r3, #64	@ 0x40
 800c9dc:	d005      	beq.n	800c9ea <USBD_StdDevReq+0x26>
 800c9de:	2b40      	cmp	r3, #64	@ 0x40
 800c9e0:	d857      	bhi.n	800ca92 <USBD_StdDevReq+0xce>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00f      	beq.n	800ca06 <USBD_StdDevReq+0x42>
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	d153      	bne.n	800ca92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	32ae      	adds	r2, #174	@ 0xae
 800c9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	4798      	blx	r3
 800ca00:	4603      	mov	r3, r0
 800ca02:	73fb      	strb	r3, [r7, #15]
      break;
 800ca04:	e04a      	b.n	800ca9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	785b      	ldrb	r3, [r3, #1]
 800ca0a:	2b09      	cmp	r3, #9
 800ca0c:	d83b      	bhi.n	800ca86 <USBD_StdDevReq+0xc2>
 800ca0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca14 <USBD_StdDevReq+0x50>)
 800ca10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca14:	0800ca69 	.word	0x0800ca69
 800ca18:	0800ca7d 	.word	0x0800ca7d
 800ca1c:	0800ca87 	.word	0x0800ca87
 800ca20:	0800ca73 	.word	0x0800ca73
 800ca24:	0800ca87 	.word	0x0800ca87
 800ca28:	0800ca47 	.word	0x0800ca47
 800ca2c:	0800ca3d 	.word	0x0800ca3d
 800ca30:	0800ca87 	.word	0x0800ca87
 800ca34:	0800ca5f 	.word	0x0800ca5f
 800ca38:	0800ca51 	.word	0x0800ca51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fa3e 	bl	800cec0 <USBD_GetDescriptor>
          break;
 800ca44:	e024      	b.n	800ca90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fba3 	bl	800d194 <USBD_SetAddress>
          break;
 800ca4e:	e01f      	b.n	800ca90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fbe2 	bl	800d21c <USBD_SetConfig>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	73fb      	strb	r3, [r7, #15]
          break;
 800ca5c:	e018      	b.n	800ca90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 fc85 	bl	800d370 <USBD_GetConfig>
          break;
 800ca66:	e013      	b.n	800ca90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca68:	6839      	ldr	r1, [r7, #0]
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fcb6 	bl	800d3dc <USBD_GetStatus>
          break;
 800ca70:	e00e      	b.n	800ca90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fce5 	bl	800d444 <USBD_SetFeature>
          break;
 800ca7a:	e009      	b.n	800ca90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fd09 	bl	800d496 <USBD_ClrFeature>
          break;
 800ca84:	e004      	b.n	800ca90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fd60 	bl	800d54e <USBD_CtlError>
          break;
 800ca8e:	bf00      	nop
      }
      break;
 800ca90:	e004      	b.n	800ca9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 fd5a 	bl	800d54e <USBD_CtlError>
      break;
 800ca9a:	bf00      	nop
  }

  return ret;
 800ca9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop

0800caa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cabe:	2b40      	cmp	r3, #64	@ 0x40
 800cac0:	d005      	beq.n	800cace <USBD_StdItfReq+0x26>
 800cac2:	2b40      	cmp	r3, #64	@ 0x40
 800cac4:	d852      	bhi.n	800cb6c <USBD_StdItfReq+0xc4>
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <USBD_StdItfReq+0x26>
 800caca:	2b20      	cmp	r3, #32
 800cacc:	d14e      	bne.n	800cb6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	3b01      	subs	r3, #1
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d840      	bhi.n	800cb5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	889b      	ldrh	r3, [r3, #4]
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d836      	bhi.n	800cb54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	889b      	ldrh	r3, [r3, #4]
 800caea:	b2db      	uxtb	r3, r3
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7ff feda 	bl	800c8a8 <USBD_CoreFindIF>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	2bff      	cmp	r3, #255	@ 0xff
 800cafc:	d01d      	beq.n	800cb3a <USBD_StdItfReq+0x92>
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d11a      	bne.n	800cb3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cb04:	7bba      	ldrb	r2, [r7, #14]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	32ae      	adds	r2, #174	@ 0xae
 800cb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00f      	beq.n	800cb34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cb14:	7bba      	ldrb	r2, [r7, #14]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb1c:	7bba      	ldrb	r2, [r7, #14]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	32ae      	adds	r2, #174	@ 0xae
 800cb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	4798      	blx	r3
 800cb2e:	4603      	mov	r3, r0
 800cb30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cb32:	e004      	b.n	800cb3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cb34:	2303      	movs	r3, #3
 800cb36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cb38:	e001      	b.n	800cb3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	88db      	ldrh	r3, [r3, #6]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d110      	bne.n	800cb68 <USBD_StdItfReq+0xc0>
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d10d      	bne.n	800cb68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fddc 	bl	800d70a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb52:	e009      	b.n	800cb68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fcf9 	bl	800d54e <USBD_CtlError>
          break;
 800cb5c:	e004      	b.n	800cb68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fcf4 	bl	800d54e <USBD_CtlError>
          break;
 800cb66:	e000      	b.n	800cb6a <USBD_StdItfReq+0xc2>
          break;
 800cb68:	bf00      	nop
      }
      break;
 800cb6a:	e004      	b.n	800cb76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fced 	bl	800d54e <USBD_CtlError>
      break;
 800cb74:	bf00      	nop
  }

  return ret;
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	889b      	ldrh	r3, [r3, #4]
 800cb92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb9c:	2b40      	cmp	r3, #64	@ 0x40
 800cb9e:	d007      	beq.n	800cbb0 <USBD_StdEPReq+0x30>
 800cba0:	2b40      	cmp	r3, #64	@ 0x40
 800cba2:	f200 8181 	bhi.w	800cea8 <USBD_StdEPReq+0x328>
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d02a      	beq.n	800cc00 <USBD_StdEPReq+0x80>
 800cbaa:	2b20      	cmp	r3, #32
 800cbac:	f040 817c 	bne.w	800cea8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cbb0:	7bbb      	ldrb	r3, [r7, #14]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f7ff fe84 	bl	800c8c2 <USBD_CoreFindEP>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbbe:	7b7b      	ldrb	r3, [r7, #13]
 800cbc0:	2bff      	cmp	r3, #255	@ 0xff
 800cbc2:	f000 8176 	beq.w	800ceb2 <USBD_StdEPReq+0x332>
 800cbc6:	7b7b      	ldrb	r3, [r7, #13]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f040 8172 	bne.w	800ceb2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800cbce:	7b7a      	ldrb	r2, [r7, #13]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cbd6:	7b7a      	ldrb	r2, [r7, #13]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	32ae      	adds	r2, #174	@ 0xae
 800cbdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 8165 	beq.w	800ceb2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cbe8:	7b7a      	ldrb	r2, [r7, #13]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	32ae      	adds	r2, #174	@ 0xae
 800cbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	6839      	ldr	r1, [r7, #0]
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	4798      	blx	r3
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cbfe:	e158      	b.n	800ceb2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	785b      	ldrb	r3, [r3, #1]
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d008      	beq.n	800cc1a <USBD_StdEPReq+0x9a>
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	f300 8147 	bgt.w	800ce9c <USBD_StdEPReq+0x31c>
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 809b 	beq.w	800cd4a <USBD_StdEPReq+0x1ca>
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d03c      	beq.n	800cc92 <USBD_StdEPReq+0x112>
 800cc18:	e140      	b.n	800ce9c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d002      	beq.n	800cc2c <USBD_StdEPReq+0xac>
 800cc26:	2b03      	cmp	r3, #3
 800cc28:	d016      	beq.n	800cc58 <USBD_StdEPReq+0xd8>
 800cc2a:	e02c      	b.n	800cc86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc2c:	7bbb      	ldrb	r3, [r7, #14]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00d      	beq.n	800cc4e <USBD_StdEPReq+0xce>
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
 800cc34:	2b80      	cmp	r3, #128	@ 0x80
 800cc36:	d00a      	beq.n	800cc4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc38:	7bbb      	ldrb	r3, [r7, #14]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f001 f9e5 	bl	800e00c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc42:	2180      	movs	r1, #128	@ 0x80
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f001 f9e1 	bl	800e00c <USBD_LL_StallEP>
 800cc4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc4c:	e020      	b.n	800cc90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fc7c 	bl	800d54e <USBD_CtlError>
              break;
 800cc56:	e01b      	b.n	800cc90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	885b      	ldrh	r3, [r3, #2]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10e      	bne.n	800cc7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc60:	7bbb      	ldrb	r3, [r7, #14]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00b      	beq.n	800cc7e <USBD_StdEPReq+0xfe>
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
 800cc68:	2b80      	cmp	r3, #128	@ 0x80
 800cc6a:	d008      	beq.n	800cc7e <USBD_StdEPReq+0xfe>
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	88db      	ldrh	r3, [r3, #6]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d104      	bne.n	800cc7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
 800cc76:	4619      	mov	r1, r3
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f001 f9c7 	bl	800e00c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fd43 	bl	800d70a <USBD_CtlSendStatus>

              break;
 800cc84:	e004      	b.n	800cc90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fc60 	bl	800d54e <USBD_CtlError>
              break;
 800cc8e:	bf00      	nop
          }
          break;
 800cc90:	e109      	b.n	800cea6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d002      	beq.n	800cca4 <USBD_StdEPReq+0x124>
 800cc9e:	2b03      	cmp	r3, #3
 800cca0:	d016      	beq.n	800ccd0 <USBD_StdEPReq+0x150>
 800cca2:	e04b      	b.n	800cd3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00d      	beq.n	800ccc6 <USBD_StdEPReq+0x146>
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
 800ccac:	2b80      	cmp	r3, #128	@ 0x80
 800ccae:	d00a      	beq.n	800ccc6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f001 f9a9 	bl	800e00c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccba:	2180      	movs	r1, #128	@ 0x80
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f001 f9a5 	bl	800e00c <USBD_LL_StallEP>
 800ccc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ccc4:	e040      	b.n	800cd48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fc40 	bl	800d54e <USBD_CtlError>
              break;
 800ccce:	e03b      	b.n	800cd48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	885b      	ldrh	r3, [r3, #2]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d136      	bne.n	800cd46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ccd8:	7bbb      	ldrb	r3, [r7, #14]
 800ccda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d004      	beq.n	800ccec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f001 f9af 	bl	800e04a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fd0c 	bl	800d70a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ccf2:	7bbb      	ldrb	r3, [r7, #14]
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7ff fde3 	bl	800c8c2 <USBD_CoreFindEP>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd00:	7b7b      	ldrb	r3, [r7, #13]
 800cd02:	2bff      	cmp	r3, #255	@ 0xff
 800cd04:	d01f      	beq.n	800cd46 <USBD_StdEPReq+0x1c6>
 800cd06:	7b7b      	ldrb	r3, [r7, #13]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d11c      	bne.n	800cd46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cd0c:	7b7a      	ldrb	r2, [r7, #13]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cd14:	7b7a      	ldrb	r2, [r7, #13]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	32ae      	adds	r2, #174	@ 0xae
 800cd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d010      	beq.n	800cd46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd24:	7b7a      	ldrb	r2, [r7, #13]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	32ae      	adds	r2, #174	@ 0xae
 800cd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	4798      	blx	r3
 800cd36:	4603      	mov	r3, r0
 800cd38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cd3a:	e004      	b.n	800cd46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cd3c:	6839      	ldr	r1, [r7, #0]
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fc05 	bl	800d54e <USBD_CtlError>
              break;
 800cd44:	e000      	b.n	800cd48 <USBD_StdEPReq+0x1c8>
              break;
 800cd46:	bf00      	nop
          }
          break;
 800cd48:	e0ad      	b.n	800cea6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d002      	beq.n	800cd5c <USBD_StdEPReq+0x1dc>
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d033      	beq.n	800cdc2 <USBD_StdEPReq+0x242>
 800cd5a:	e099      	b.n	800ce90 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd5c:	7bbb      	ldrb	r3, [r7, #14]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d007      	beq.n	800cd72 <USBD_StdEPReq+0x1f2>
 800cd62:	7bbb      	ldrb	r3, [r7, #14]
 800cd64:	2b80      	cmp	r3, #128	@ 0x80
 800cd66:	d004      	beq.n	800cd72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fbef 	bl	800d54e <USBD_CtlError>
                break;
 800cd70:	e093      	b.n	800ce9a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	da0b      	bge.n	800cd92 <USBD_StdEPReq+0x212>
 800cd7a:	7bbb      	ldrb	r3, [r7, #14]
 800cd7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd80:	4613      	mov	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	3310      	adds	r3, #16
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	3304      	adds	r3, #4
 800cd90:	e00b      	b.n	800cdaa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd92:	7bbb      	ldrb	r3, [r7, #14]
 800cd94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd98:	4613      	mov	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4413      	add	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	4413      	add	r3, r2
 800cda8:	3304      	adds	r3, #4
 800cdaa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	330e      	adds	r3, #14
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fc44 	bl	800d648 <USBD_CtlSendData>
              break;
 800cdc0:	e06b      	b.n	800ce9a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cdc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	da11      	bge.n	800cdee <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	f003 020f 	and.w	r2, r3, #15
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	440b      	add	r3, r1
 800cddc:	3323      	adds	r3, #35	@ 0x23
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d117      	bne.n	800ce14 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cde4:	6839      	ldr	r1, [r7, #0]
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fbb1 	bl	800d54e <USBD_CtlError>
                  break;
 800cdec:	e055      	b.n	800ce9a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cdee:	7bbb      	ldrb	r3, [r7, #14]
 800cdf0:	f003 020f 	and.w	r2, r3, #15
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	440b      	add	r3, r1
 800ce00:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d104      	bne.n	800ce14 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fb9e 	bl	800d54e <USBD_CtlError>
                  break;
 800ce12:	e042      	b.n	800ce9a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	da0b      	bge.n	800ce34 <USBD_StdEPReq+0x2b4>
 800ce1c:	7bbb      	ldrb	r3, [r7, #14]
 800ce1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce22:	4613      	mov	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	3310      	adds	r3, #16
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	4413      	add	r3, r2
 800ce30:	3304      	adds	r3, #4
 800ce32:	e00b      	b.n	800ce4c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4413      	add	r3, r2
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	4413      	add	r3, r2
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ce4e:	7bbb      	ldrb	r3, [r7, #14]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d002      	beq.n	800ce5a <USBD_StdEPReq+0x2da>
 800ce54:	7bbb      	ldrb	r3, [r7, #14]
 800ce56:	2b80      	cmp	r3, #128	@ 0x80
 800ce58:	d103      	bne.n	800ce62 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	739a      	strb	r2, [r3, #14]
 800ce60:	e00e      	b.n	800ce80 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
 800ce64:	4619      	mov	r1, r3
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f001 f90e 	bl	800e088 <USBD_LL_IsStallEP>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d003      	beq.n	800ce7a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	2201      	movs	r2, #1
 800ce76:	739a      	strb	r2, [r3, #14]
 800ce78:	e002      	b.n	800ce80 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	330e      	adds	r3, #14
 800ce84:	2202      	movs	r2, #2
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fbdd 	bl	800d648 <USBD_CtlSendData>
              break;
 800ce8e:	e004      	b.n	800ce9a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fb5b 	bl	800d54e <USBD_CtlError>
              break;
 800ce98:	bf00      	nop
          }
          break;
 800ce9a:	e004      	b.n	800cea6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fb55 	bl	800d54e <USBD_CtlError>
          break;
 800cea4:	bf00      	nop
      }
      break;
 800cea6:	e005      	b.n	800ceb4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fb4f 	bl	800d54e <USBD_CtlError>
      break;
 800ceb0:	e000      	b.n	800ceb4 <USBD_StdEPReq+0x334>
      break;
 800ceb2:	bf00      	nop
  }

  return ret;
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ceca:	2300      	movs	r3, #0
 800cecc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ced2:	2300      	movs	r3, #0
 800ced4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	885b      	ldrh	r3, [r3, #2]
 800ceda:	0a1b      	lsrs	r3, r3, #8
 800cedc:	b29b      	uxth	r3, r3
 800cede:	3b01      	subs	r3, #1
 800cee0:	2b06      	cmp	r3, #6
 800cee2:	f200 8128 	bhi.w	800d136 <USBD_GetDescriptor+0x276>
 800cee6:	a201      	add	r2, pc, #4	@ (adr r2, 800ceec <USBD_GetDescriptor+0x2c>)
 800cee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceec:	0800cf09 	.word	0x0800cf09
 800cef0:	0800cf21 	.word	0x0800cf21
 800cef4:	0800cf61 	.word	0x0800cf61
 800cef8:	0800d137 	.word	0x0800d137
 800cefc:	0800d137 	.word	0x0800d137
 800cf00:	0800d0d7 	.word	0x0800d0d7
 800cf04:	0800d103 	.word	0x0800d103
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	7c12      	ldrb	r2, [r2, #16]
 800cf14:	f107 0108 	add.w	r1, r7, #8
 800cf18:	4610      	mov	r0, r2
 800cf1a:	4798      	blx	r3
 800cf1c:	60f8      	str	r0, [r7, #12]
      break;
 800cf1e:	e112      	b.n	800d146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7c1b      	ldrb	r3, [r3, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10d      	bne.n	800cf44 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf30:	f107 0208 	add.w	r2, r7, #8
 800cf34:	4610      	mov	r0, r2
 800cf36:	4798      	blx	r3
 800cf38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	2202      	movs	r2, #2
 800cf40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cf42:	e100      	b.n	800d146 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf4c:	f107 0208 	add.w	r2, r7, #8
 800cf50:	4610      	mov	r0, r2
 800cf52:	4798      	blx	r3
 800cf54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	2202      	movs	r2, #2
 800cf5c:	701a      	strb	r2, [r3, #0]
      break;
 800cf5e:	e0f2      	b.n	800d146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	885b      	ldrh	r3, [r3, #2]
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b05      	cmp	r3, #5
 800cf68:	f200 80ac 	bhi.w	800d0c4 <USBD_GetDescriptor+0x204>
 800cf6c:	a201      	add	r2, pc, #4	@ (adr r2, 800cf74 <USBD_GetDescriptor+0xb4>)
 800cf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf72:	bf00      	nop
 800cf74:	0800cf8d 	.word	0x0800cf8d
 800cf78:	0800cfc1 	.word	0x0800cfc1
 800cf7c:	0800cff5 	.word	0x0800cff5
 800cf80:	0800d029 	.word	0x0800d029
 800cf84:	0800d05d 	.word	0x0800d05d
 800cf88:	0800d091 	.word	0x0800d091
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	7c12      	ldrb	r2, [r2, #16]
 800cfa4:	f107 0108 	add.w	r1, r7, #8
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfae:	e091      	b.n	800d0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 facb 	bl	800d54e <USBD_CtlError>
            err++;
 800cfb8:	7afb      	ldrb	r3, [r7, #11]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	72fb      	strb	r3, [r7, #11]
          break;
 800cfbe:	e089      	b.n	800d0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00b      	beq.n	800cfe4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	7c12      	ldrb	r2, [r2, #16]
 800cfd8:	f107 0108 	add.w	r1, r7, #8
 800cfdc:	4610      	mov	r0, r2
 800cfde:	4798      	blx	r3
 800cfe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfe2:	e077      	b.n	800d0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fab1 	bl	800d54e <USBD_CtlError>
            err++;
 800cfec:	7afb      	ldrb	r3, [r7, #11]
 800cfee:	3301      	adds	r3, #1
 800cff0:	72fb      	strb	r3, [r7, #11]
          break;
 800cff2:	e06f      	b.n	800d0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	7c12      	ldrb	r2, [r2, #16]
 800d00c:	f107 0108 	add.w	r1, r7, #8
 800d010:	4610      	mov	r0, r2
 800d012:	4798      	blx	r3
 800d014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d016:	e05d      	b.n	800d0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa97 	bl	800d54e <USBD_CtlError>
            err++;
 800d020:	7afb      	ldrb	r3, [r7, #11]
 800d022:	3301      	adds	r3, #1
 800d024:	72fb      	strb	r3, [r7, #11]
          break;
 800d026:	e055      	b.n	800d0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00b      	beq.n	800d04c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d03a:	691b      	ldr	r3, [r3, #16]
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	7c12      	ldrb	r2, [r2, #16]
 800d040:	f107 0108 	add.w	r1, r7, #8
 800d044:	4610      	mov	r0, r2
 800d046:	4798      	blx	r3
 800d048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d04a:	e043      	b.n	800d0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d04c:	6839      	ldr	r1, [r7, #0]
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa7d 	bl	800d54e <USBD_CtlError>
            err++;
 800d054:	7afb      	ldrb	r3, [r7, #11]
 800d056:	3301      	adds	r3, #1
 800d058:	72fb      	strb	r3, [r7, #11]
          break;
 800d05a:	e03b      	b.n	800d0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d062:	695b      	ldr	r3, [r3, #20]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00b      	beq.n	800d080 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d06e:	695b      	ldr	r3, [r3, #20]
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	7c12      	ldrb	r2, [r2, #16]
 800d074:	f107 0108 	add.w	r1, r7, #8
 800d078:	4610      	mov	r0, r2
 800d07a:	4798      	blx	r3
 800d07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d07e:	e029      	b.n	800d0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fa63 	bl	800d54e <USBD_CtlError>
            err++;
 800d088:	7afb      	ldrb	r3, [r7, #11]
 800d08a:	3301      	adds	r3, #1
 800d08c:	72fb      	strb	r3, [r7, #11]
          break;
 800d08e:	e021      	b.n	800d0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00b      	beq.n	800d0b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	7c12      	ldrb	r2, [r2, #16]
 800d0a8:	f107 0108 	add.w	r1, r7, #8
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4798      	blx	r3
 800d0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0b2:	e00f      	b.n	800d0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0b4:	6839      	ldr	r1, [r7, #0]
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 fa49 	bl	800d54e <USBD_CtlError>
            err++;
 800d0bc:	7afb      	ldrb	r3, [r7, #11]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d0c2:	e007      	b.n	800d0d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d0c4:	6839      	ldr	r1, [r7, #0]
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fa41 	bl	800d54e <USBD_CtlError>
          err++;
 800d0cc:	7afb      	ldrb	r3, [r7, #11]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d0d2:	bf00      	nop
      }
      break;
 800d0d4:	e037      	b.n	800d146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	7c1b      	ldrb	r3, [r3, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d109      	bne.n	800d0f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0e6:	f107 0208 	add.w	r2, r7, #8
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	4798      	blx	r3
 800d0ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0f0:	e029      	b.n	800d146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d0f2:	6839      	ldr	r1, [r7, #0]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 fa2a 	bl	800d54e <USBD_CtlError>
        err++;
 800d0fa:	7afb      	ldrb	r3, [r7, #11]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d100:	e021      	b.n	800d146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	7c1b      	ldrb	r3, [r3, #16]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10d      	bne.n	800d126 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d112:	f107 0208 	add.w	r2, r7, #8
 800d116:	4610      	mov	r0, r2
 800d118:	4798      	blx	r3
 800d11a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3301      	adds	r3, #1
 800d120:	2207      	movs	r2, #7
 800d122:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d124:	e00f      	b.n	800d146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 fa10 	bl	800d54e <USBD_CtlError>
        err++;
 800d12e:	7afb      	ldrb	r3, [r7, #11]
 800d130:	3301      	adds	r3, #1
 800d132:	72fb      	strb	r3, [r7, #11]
      break;
 800d134:	e007      	b.n	800d146 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d136:	6839      	ldr	r1, [r7, #0]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 fa08 	bl	800d54e <USBD_CtlError>
      err++;
 800d13e:	7afb      	ldrb	r3, [r7, #11]
 800d140:	3301      	adds	r3, #1
 800d142:	72fb      	strb	r3, [r7, #11]
      break;
 800d144:	bf00      	nop
  }

  if (err != 0U)
 800d146:	7afb      	ldrb	r3, [r7, #11]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d11e      	bne.n	800d18a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	88db      	ldrh	r3, [r3, #6]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d016      	beq.n	800d182 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d154:	893b      	ldrh	r3, [r7, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00e      	beq.n	800d178 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	88da      	ldrh	r2, [r3, #6]
 800d15e:	893b      	ldrh	r3, [r7, #8]
 800d160:	4293      	cmp	r3, r2
 800d162:	bf28      	it	cs
 800d164:	4613      	movcs	r3, r2
 800d166:	b29b      	uxth	r3, r3
 800d168:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d16a:	893b      	ldrh	r3, [r7, #8]
 800d16c:	461a      	mov	r2, r3
 800d16e:	68f9      	ldr	r1, [r7, #12]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 fa69 	bl	800d648 <USBD_CtlSendData>
 800d176:	e009      	b.n	800d18c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d178:	6839      	ldr	r1, [r7, #0]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f9e7 	bl	800d54e <USBD_CtlError>
 800d180:	e004      	b.n	800d18c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fac1 	bl	800d70a <USBD_CtlSendStatus>
 800d188:	e000      	b.n	800d18c <USBD_GetDescriptor+0x2cc>
    return;
 800d18a:	bf00      	nop
  }
}
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop

0800d194 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	889b      	ldrh	r3, [r3, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d131      	bne.n	800d20a <USBD_SetAddress+0x76>
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	88db      	ldrh	r3, [r3, #6]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d12d      	bne.n	800d20a <USBD_SetAddress+0x76>
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	885b      	ldrh	r3, [r3, #2]
 800d1b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1b4:	d829      	bhi.n	800d20a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	885b      	ldrh	r3, [r3, #2]
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d104      	bne.n	800d1d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 f9bc 	bl	800d54e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1d6:	e01d      	b.n	800d214 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7bfa      	ldrb	r2, [r7, #15]
 800d1dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 ff7b 	bl	800e0e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fa8d 	bl	800d70a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d004      	beq.n	800d200 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1fe:	e009      	b.n	800d214 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d208:	e004      	b.n	800d214 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d20a:	6839      	ldr	r1, [r7, #0]
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f99e 	bl	800d54e <USBD_CtlError>
  }
}
 800d212:	bf00      	nop
 800d214:	bf00      	nop
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	885b      	ldrh	r3, [r3, #2]
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	4b4e      	ldr	r3, [pc, #312]	@ (800d36c <USBD_SetConfig+0x150>)
 800d232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d234:	4b4d      	ldr	r3, [pc, #308]	@ (800d36c <USBD_SetConfig+0x150>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d905      	bls.n	800d248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f985 	bl	800d54e <USBD_CtlError>
    return USBD_FAIL;
 800d244:	2303      	movs	r3, #3
 800d246:	e08c      	b.n	800d362 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	2b02      	cmp	r3, #2
 800d252:	d002      	beq.n	800d25a <USBD_SetConfig+0x3e>
 800d254:	2b03      	cmp	r3, #3
 800d256:	d029      	beq.n	800d2ac <USBD_SetConfig+0x90>
 800d258:	e075      	b.n	800d346 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d25a:	4b44      	ldr	r3, [pc, #272]	@ (800d36c <USBD_SetConfig+0x150>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d020      	beq.n	800d2a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d262:	4b42      	ldr	r3, [pc, #264]	@ (800d36c <USBD_SetConfig+0x150>)
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	461a      	mov	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d26c:	4b3f      	ldr	r3, [pc, #252]	@ (800d36c <USBD_SetConfig+0x150>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7fe ffcd 	bl	800c212 <USBD_SetClassConfig>
 800d278:	4603      	mov	r3, r0
 800d27a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d27c:	7bfb      	ldrb	r3, [r7, #15]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d008      	beq.n	800d294 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f962 	bl	800d54e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2202      	movs	r2, #2
 800d28e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d292:	e065      	b.n	800d360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fa38 	bl	800d70a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2203      	movs	r2, #3
 800d29e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d2a2:	e05d      	b.n	800d360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fa30 	bl	800d70a <USBD_CtlSendStatus>
      break;
 800d2aa:	e059      	b.n	800d360 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d2ac:	4b2f      	ldr	r3, [pc, #188]	@ (800d36c <USBD_SetConfig+0x150>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d112      	bne.n	800d2da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d2bc:	4b2b      	ldr	r3, [pc, #172]	@ (800d36c <USBD_SetConfig+0x150>)
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2c6:	4b29      	ldr	r3, [pc, #164]	@ (800d36c <USBD_SetConfig+0x150>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7fe ffbc 	bl	800c24a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 fa19 	bl	800d70a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d2d8:	e042      	b.n	800d360 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d2da:	4b24      	ldr	r3, [pc, #144]	@ (800d36c <USBD_SetConfig+0x150>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d02a      	beq.n	800d33e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7fe ffaa 	bl	800c24a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d2f6:	4b1d      	ldr	r3, [pc, #116]	@ (800d36c <USBD_SetConfig+0x150>)
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d300:	4b1a      	ldr	r3, [pc, #104]	@ (800d36c <USBD_SetConfig+0x150>)
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	4619      	mov	r1, r3
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f7fe ff83 	bl	800c212 <USBD_SetClassConfig>
 800d30c:	4603      	mov	r3, r0
 800d30e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d310:	7bfb      	ldrb	r3, [r7, #15]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00f      	beq.n	800d336 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f918 	bl	800d54e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	b2db      	uxtb	r3, r3
 800d324:	4619      	mov	r1, r3
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f7fe ff8f 	bl	800c24a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2202      	movs	r2, #2
 800d330:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d334:	e014      	b.n	800d360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f9e7 	bl	800d70a <USBD_CtlSendStatus>
      break;
 800d33c:	e010      	b.n	800d360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f9e3 	bl	800d70a <USBD_CtlSendStatus>
      break;
 800d344:	e00c      	b.n	800d360 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d346:	6839      	ldr	r1, [r7, #0]
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 f900 	bl	800d54e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d34e:	4b07      	ldr	r3, [pc, #28]	@ (800d36c <USBD_SetConfig+0x150>)
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7fe ff78 	bl	800c24a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d35a:	2303      	movs	r3, #3
 800d35c:	73fb      	strb	r3, [r7, #15]
      break;
 800d35e:	bf00      	nop
  }

  return ret;
 800d360:	7bfb      	ldrb	r3, [r7, #15]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20000a44 	.word	0x20000a44

0800d370 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	88db      	ldrh	r3, [r3, #6]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d004      	beq.n	800d38c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f8e2 	bl	800d54e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d38a:	e023      	b.n	800d3d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b02      	cmp	r3, #2
 800d396:	dc02      	bgt.n	800d39e <USBD_GetConfig+0x2e>
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dc03      	bgt.n	800d3a4 <USBD_GetConfig+0x34>
 800d39c:	e015      	b.n	800d3ca <USBD_GetConfig+0x5a>
 800d39e:	2b03      	cmp	r3, #3
 800d3a0:	d00b      	beq.n	800d3ba <USBD_GetConfig+0x4a>
 800d3a2:	e012      	b.n	800d3ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	3308      	adds	r3, #8
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f948 	bl	800d648 <USBD_CtlSendData>
        break;
 800d3b8:	e00c      	b.n	800d3d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	2201      	movs	r2, #1
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f940 	bl	800d648 <USBD_CtlSendData>
        break;
 800d3c8:	e004      	b.n	800d3d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f8be 	bl	800d54e <USBD_CtlError>
        break;
 800d3d2:	bf00      	nop
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d81e      	bhi.n	800d432 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	88db      	ldrh	r3, [r3, #6]
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d004      	beq.n	800d406 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d3fc:	6839      	ldr	r1, [r7, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f8a5 	bl	800d54e <USBD_CtlError>
        break;
 800d404:	e01a      	b.n	800d43c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2201      	movs	r2, #1
 800d40a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d412:	2b00      	cmp	r3, #0
 800d414:	d005      	beq.n	800d422 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	f043 0202 	orr.w	r2, r3, #2
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	330c      	adds	r3, #12
 800d426:	2202      	movs	r2, #2
 800d428:	4619      	mov	r1, r3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f90c 	bl	800d648 <USBD_CtlSendData>
      break;
 800d430:	e004      	b.n	800d43c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 f88a 	bl	800d54e <USBD_CtlError>
      break;
 800d43a:	bf00      	nop
  }
}
 800d43c:	bf00      	nop
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	885b      	ldrh	r3, [r3, #2]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d107      	bne.n	800d466 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 f953 	bl	800d70a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d464:	e013      	b.n	800d48e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	885b      	ldrh	r3, [r3, #2]
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d10b      	bne.n	800d486 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	889b      	ldrh	r3, [r3, #4]
 800d472:	0a1b      	lsrs	r3, r3, #8
 800d474:	b29b      	uxth	r3, r3
 800d476:	b2da      	uxtb	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 f943 	bl	800d70a <USBD_CtlSendStatus>
}
 800d484:	e003      	b.n	800d48e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 f860 	bl	800d54e <USBD_CtlError>
}
 800d48e:	bf00      	nop
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b082      	sub	sp, #8
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	d80b      	bhi.n	800d4c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	885b      	ldrh	r3, [r3, #2]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d10c      	bne.n	800d4d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f923 	bl	800d70a <USBD_CtlSendStatus>
      }
      break;
 800d4c4:	e004      	b.n	800d4d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f840 	bl	800d54e <USBD_CtlError>
      break;
 800d4ce:	e000      	b.n	800d4d2 <USBD_ClrFeature+0x3c>
      break;
 800d4d0:	bf00      	nop
  }
}
 800d4d2:	bf00      	nop
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b084      	sub	sp, #16
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	781a      	ldrb	r2, [r3, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	781a      	ldrb	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3301      	adds	r3, #1
 800d502:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f7ff fa3d 	bl	800c984 <SWAPBYTE>
 800d50a:	4603      	mov	r3, r0
 800d50c:	461a      	mov	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	3301      	adds	r3, #1
 800d516:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	3301      	adds	r3, #1
 800d51c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f7ff fa30 	bl	800c984 <SWAPBYTE>
 800d524:	4603      	mov	r3, r0
 800d526:	461a      	mov	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	3301      	adds	r3, #1
 800d530:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3301      	adds	r3, #1
 800d536:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f7ff fa23 	bl	800c984 <SWAPBYTE>
 800d53e:	4603      	mov	r3, r0
 800d540:	461a      	mov	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	80da      	strh	r2, [r3, #6]
}
 800d546:	bf00      	nop
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b082      	sub	sp, #8
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
 800d556:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d558:	2180      	movs	r1, #128	@ 0x80
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 fd56 	bl	800e00c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d560:	2100      	movs	r1, #0
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fd52 	bl	800e00c <USBD_LL_StallEP>
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d57c:	2300      	movs	r3, #0
 800d57e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d042      	beq.n	800d60c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d58a:	6938      	ldr	r0, [r7, #16]
 800d58c:	f000 f842 	bl	800d614 <USBD_GetLen>
 800d590:	4603      	mov	r3, r0
 800d592:	3301      	adds	r3, #1
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d59a:	d808      	bhi.n	800d5ae <USBD_GetString+0x3e>
 800d59c:	6938      	ldr	r0, [r7, #16]
 800d59e:	f000 f839 	bl	800d614 <USBD_GetLen>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	e001      	b.n	800d5b2 <USBD_GetString+0x42>
 800d5ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d5b6:	7dfb      	ldrb	r3, [r7, #23]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	7812      	ldrb	r2, [r2, #0]
 800d5c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d5c2:	7dfb      	ldrb	r3, [r7, #23]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	2203      	movs	r2, #3
 800d5d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d5d2:	7dfb      	ldrb	r3, [r7, #23]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d5d8:	e013      	b.n	800d602 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d5da:	7dfb      	ldrb	r3, [r7, #23]
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	4413      	add	r3, r2
 800d5e0:	693a      	ldr	r2, [r7, #16]
 800d5e2:	7812      	ldrb	r2, [r2, #0]
 800d5e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	613b      	str	r3, [r7, #16]
    idx++;
 800d5ec:	7dfb      	ldrb	r3, [r7, #23]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800d5fc:	7dfb      	ldrb	r3, [r7, #23]
 800d5fe:	3301      	adds	r3, #1
 800d600:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1e7      	bne.n	800d5da <USBD_GetString+0x6a>
 800d60a:	e000      	b.n	800d60e <USBD_GetString+0x9e>
    return;
 800d60c:	bf00      	nop
  }
}
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d624:	e005      	b.n	800d632 <USBD_GetLen+0x1e>
  {
    len++;
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	3301      	adds	r3, #1
 800d62a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	3301      	adds	r3, #1
 800d630:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1f5      	bne.n	800d626 <USBD_GetLen+0x12>
  }

  return len;
 800d63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3714      	adds	r7, #20
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2202      	movs	r2, #2
 800d658:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	2100      	movs	r1, #0
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f000 fd52 	bl	800e11e <USBD_LL_Transmit>

  return USBD_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	2100      	movs	r1, #0
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 fd41 	bl	800e11e <USBD_LL_Transmit>

  return USBD_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b084      	sub	sp, #16
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	60f8      	str	r0, [r7, #12]
 800d6ae:	60b9      	str	r1, [r7, #8]
 800d6b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2203      	movs	r2, #3
 800d6b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	68ba      	ldr	r2, [r7, #8]
 800d6c6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f000 fd41 	bl	800e160 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f000 fd30 	bl	800e160 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2204      	movs	r2, #4
 800d716:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d71a:	2300      	movs	r3, #0
 800d71c:	2200      	movs	r2, #0
 800d71e:	2100      	movs	r1, #0
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 fcfc 	bl	800e11e <USBD_LL_Transmit>

  return USBD_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2205      	movs	r2, #5
 800d73c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d740:	2300      	movs	r3, #0
 800d742:	2200      	movs	r2, #0
 800d744:	2100      	movs	r1, #0
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fd0a 	bl	800e160 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
	...

0800d758 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d75c:	2200      	movs	r2, #0
 800d75e:	4912      	ldr	r1, [pc, #72]	@ (800d7a8 <MX_USB_DEVICE_Init+0x50>)
 800d760:	4812      	ldr	r0, [pc, #72]	@ (800d7ac <MX_USB_DEVICE_Init+0x54>)
 800d762:	f7fe fcd9 	bl	800c118 <USBD_Init>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d001      	beq.n	800d770 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d76c:	f7f4 f99c 	bl	8001aa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d770:	490f      	ldr	r1, [pc, #60]	@ (800d7b0 <MX_USB_DEVICE_Init+0x58>)
 800d772:	480e      	ldr	r0, [pc, #56]	@ (800d7ac <MX_USB_DEVICE_Init+0x54>)
 800d774:	f7fe fd00 	bl	800c178 <USBD_RegisterClass>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d77e:	f7f4 f993 	bl	8001aa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d782:	490c      	ldr	r1, [pc, #48]	@ (800d7b4 <MX_USB_DEVICE_Init+0x5c>)
 800d784:	4809      	ldr	r0, [pc, #36]	@ (800d7ac <MX_USB_DEVICE_Init+0x54>)
 800d786:	f7fe fbf7 	bl	800bf78 <USBD_CDC_RegisterInterface>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d790:	f7f4 f98a 	bl	8001aa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d794:	4805      	ldr	r0, [pc, #20]	@ (800d7ac <MX_USB_DEVICE_Init+0x54>)
 800d796:	f7fe fd25 	bl	800c1e4 <USBD_Start>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d7a0:	f7f4 f982 	bl	8001aa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d7a4:	bf00      	nop
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	200000e0 	.word	0x200000e0
 800d7ac:	20000a48 	.word	0x20000a48
 800d7b0:	20000044 	.word	0x20000044
 800d7b4:	200000cc 	.word	0x200000cc

0800d7b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d7bc:	2200      	movs	r2, #0
 800d7be:	4905      	ldr	r1, [pc, #20]	@ (800d7d4 <CDC_Init_FS+0x1c>)
 800d7c0:	4805      	ldr	r0, [pc, #20]	@ (800d7d8 <CDC_Init_FS+0x20>)
 800d7c2:	f7fe fbf3 	bl	800bfac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d7c6:	4905      	ldr	r1, [pc, #20]	@ (800d7dc <CDC_Init_FS+0x24>)
 800d7c8:	4803      	ldr	r0, [pc, #12]	@ (800d7d8 <CDC_Init_FS+0x20>)
 800d7ca:	f7fe fc11 	bl	800bff0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d7ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	20000f24 	.word	0x20000f24
 800d7d8:	20000a48 	.word	0x20000a48
 800d7dc:	20000d24 	.word	0x20000d24

0800d7e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d7e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	6039      	str	r1, [r7, #0]
 800d7fa:	71fb      	strb	r3, [r7, #7]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d800:	79fb      	ldrb	r3, [r7, #7]
 800d802:	2b23      	cmp	r3, #35	@ 0x23
 800d804:	f200 8098 	bhi.w	800d938 <CDC_Control_FS+0x148>
 800d808:	a201      	add	r2, pc, #4	@ (adr r2, 800d810 <CDC_Control_FS+0x20>)
 800d80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d80e:	bf00      	nop
 800d810:	0800d939 	.word	0x0800d939
 800d814:	0800d939 	.word	0x0800d939
 800d818:	0800d939 	.word	0x0800d939
 800d81c:	0800d939 	.word	0x0800d939
 800d820:	0800d939 	.word	0x0800d939
 800d824:	0800d939 	.word	0x0800d939
 800d828:	0800d939 	.word	0x0800d939
 800d82c:	0800d939 	.word	0x0800d939
 800d830:	0800d939 	.word	0x0800d939
 800d834:	0800d939 	.word	0x0800d939
 800d838:	0800d939 	.word	0x0800d939
 800d83c:	0800d939 	.word	0x0800d939
 800d840:	0800d939 	.word	0x0800d939
 800d844:	0800d939 	.word	0x0800d939
 800d848:	0800d939 	.word	0x0800d939
 800d84c:	0800d939 	.word	0x0800d939
 800d850:	0800d939 	.word	0x0800d939
 800d854:	0800d939 	.word	0x0800d939
 800d858:	0800d939 	.word	0x0800d939
 800d85c:	0800d939 	.word	0x0800d939
 800d860:	0800d939 	.word	0x0800d939
 800d864:	0800d939 	.word	0x0800d939
 800d868:	0800d939 	.word	0x0800d939
 800d86c:	0800d939 	.word	0x0800d939
 800d870:	0800d939 	.word	0x0800d939
 800d874:	0800d939 	.word	0x0800d939
 800d878:	0800d939 	.word	0x0800d939
 800d87c:	0800d939 	.word	0x0800d939
 800d880:	0800d939 	.word	0x0800d939
 800d884:	0800d939 	.word	0x0800d939
 800d888:	0800d939 	.word	0x0800d939
 800d88c:	0800d939 	.word	0x0800d939
 800d890:	0800d8a1 	.word	0x0800d8a1
 800d894:	0800d8e5 	.word	0x0800d8e5
 800d898:	0800d939 	.word	0x0800d939
 800d89c:	0800d939 	.word	0x0800d939
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	021b      	lsls	r3, r3, #8
 800d8ae:	431a      	orrs	r2, r3
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	3302      	adds	r3, #2
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	041b      	lsls	r3, r3, #16
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	3303      	adds	r3, #3
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	061b      	lsls	r3, r3, #24
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	4b20      	ldr	r3, [pc, #128]	@ (800d948 <CDC_Control_FS+0x158>)
 800d8c8:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	791a      	ldrb	r2, [r3, #4]
 800d8ce:	4b1e      	ldr	r3, [pc, #120]	@ (800d948 <CDC_Control_FS+0x158>)
 800d8d0:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	795a      	ldrb	r2, [r3, #5]
 800d8d6:	4b1c      	ldr	r3, [pc, #112]	@ (800d948 <CDC_Control_FS+0x158>)
 800d8d8:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	799a      	ldrb	r2, [r3, #6]
 800d8de:	4b1a      	ldr	r3, [pc, #104]	@ (800d948 <CDC_Control_FS+0x158>)
 800d8e0:	719a      	strb	r2, [r3, #6]
    break;
 800d8e2:	e02a      	b.n	800d93a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d8e4:	4b18      	ldr	r3, [pc, #96]	@ (800d948 <CDC_Control_FS+0x158>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d8ee:	4b16      	ldr	r3, [pc, #88]	@ (800d948 <CDC_Control_FS+0x158>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	0a1a      	lsrs	r2, r3, #8
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	b2d2      	uxtb	r2, r2
 800d8fa:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d8fc:	4b12      	ldr	r3, [pc, #72]	@ (800d948 <CDC_Control_FS+0x158>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	0c1a      	lsrs	r2, r3, #16
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	3302      	adds	r3, #2
 800d906:	b2d2      	uxtb	r2, r2
 800d908:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d90a:	4b0f      	ldr	r3, [pc, #60]	@ (800d948 <CDC_Control_FS+0x158>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	0e1a      	lsrs	r2, r3, #24
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	3303      	adds	r3, #3
 800d914:	b2d2      	uxtb	r2, r2
 800d916:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	3304      	adds	r3, #4
 800d91c:	4a0a      	ldr	r2, [pc, #40]	@ (800d948 <CDC_Control_FS+0x158>)
 800d91e:	7912      	ldrb	r2, [r2, #4]
 800d920:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	3305      	adds	r3, #5
 800d926:	4a08      	ldr	r2, [pc, #32]	@ (800d948 <CDC_Control_FS+0x158>)
 800d928:	7952      	ldrb	r2, [r2, #5]
 800d92a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	3306      	adds	r3, #6
 800d930:	4a05      	ldr	r2, [pc, #20]	@ (800d948 <CDC_Control_FS+0x158>)
 800d932:	7992      	ldrb	r2, [r2, #6]
 800d934:	701a      	strb	r2, [r3, #0]
    break;
 800d936:	e000      	b.n	800d93a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d938:	bf00      	nop
  }

  return (USBD_OK);
 800d93a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	200000c4 	.word	0x200000c4

0800d94c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800d956:	4b0b      	ldr	r3, [pc, #44]	@ (800d984 <CDC_Receive_FS+0x38>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d006      	beq.n	800d96c <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800d95e:	4b09      	ldr	r3, [pc, #36]	@ (800d984 <CDC_Receive_FS+0x38>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	6812      	ldr	r2, [r2, #0]
 800d966:	4611      	mov	r1, r2
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d96c:	6879      	ldr	r1, [r7, #4]
 800d96e:	4806      	ldr	r0, [pc, #24]	@ (800d988 <CDC_Receive_FS+0x3c>)
 800d970:	f7fe fb3e 	bl	800bff0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d974:	4804      	ldr	r0, [pc, #16]	@ (800d988 <CDC_Receive_FS+0x3c>)
 800d976:	f7fe fb99 	bl	800c0ac <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800d97a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	20001124 	.word	0x20001124
 800d988:	20000a48 	.word	0x20000a48

0800d98c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d99c:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <CDC_Transmit_FS+0x48>)
 800d99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d9a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e00b      	b.n	800d9ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d9b2:	887b      	ldrh	r3, [r7, #2]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	6879      	ldr	r1, [r7, #4]
 800d9b8:	4806      	ldr	r0, [pc, #24]	@ (800d9d4 <CDC_Transmit_FS+0x48>)
 800d9ba:	f7fe faf7 	bl	800bfac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d9be:	4805      	ldr	r0, [pc, #20]	@ (800d9d4 <CDC_Transmit_FS+0x48>)
 800d9c0:	f7fe fb34 	bl	800c02c <USBD_CDC_TransmitPacket>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20000a48 	.word	0x20000a48

0800d9d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b087      	sub	sp, #28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d9ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	371c      	adds	r7, #28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
	...

0800d9fc <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800da04:	4a04      	ldr	r2, [pc, #16]	@ (800da18 <CDC_Attach_Rx+0x1c>)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6013      	str	r3, [r2, #0]
}
 800da0a:	bf00      	nop
 800da0c:	370c      	adds	r7, #12
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	20001124 	.word	0x20001124

0800da1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	6039      	str	r1, [r7, #0]
 800da26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	2212      	movs	r2, #18
 800da2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da2e:	4b03      	ldr	r3, [pc, #12]	@ (800da3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800da30:	4618      	mov	r0, r3
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr
 800da3c:	200000fc 	.word	0x200000fc

0800da40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	4603      	mov	r3, r0
 800da48:	6039      	str	r1, [r7, #0]
 800da4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2204      	movs	r2, #4
 800da50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da52:	4b03      	ldr	r3, [pc, #12]	@ (800da60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800da54:	4618      	mov	r0, r3
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr
 800da60:	20000110 	.word	0x20000110

0800da64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	6039      	str	r1, [r7, #0]
 800da6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da70:	79fb      	ldrb	r3, [r7, #7]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d105      	bne.n	800da82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	4907      	ldr	r1, [pc, #28]	@ (800da98 <USBD_FS_ProductStrDescriptor+0x34>)
 800da7a:	4808      	ldr	r0, [pc, #32]	@ (800da9c <USBD_FS_ProductStrDescriptor+0x38>)
 800da7c:	f7ff fd78 	bl	800d570 <USBD_GetString>
 800da80:	e004      	b.n	800da8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da82:	683a      	ldr	r2, [r7, #0]
 800da84:	4904      	ldr	r1, [pc, #16]	@ (800da98 <USBD_FS_ProductStrDescriptor+0x34>)
 800da86:	4805      	ldr	r0, [pc, #20]	@ (800da9c <USBD_FS_ProductStrDescriptor+0x38>)
 800da88:	f7ff fd72 	bl	800d570 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da8c:	4b02      	ldr	r3, [pc, #8]	@ (800da98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	20001128 	.word	0x20001128
 800da9c:	0800ec00 	.word	0x0800ec00

0800daa0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	4603      	mov	r3, r0
 800daa8:	6039      	str	r1, [r7, #0]
 800daaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	4904      	ldr	r1, [pc, #16]	@ (800dac0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dab0:	4804      	ldr	r0, [pc, #16]	@ (800dac4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dab2:	f7ff fd5d 	bl	800d570 <USBD_GetString>
  return USBD_StrDesc;
 800dab6:	4b02      	ldr	r3, [pc, #8]	@ (800dac0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	20001128 	.word	0x20001128
 800dac4:	0800ec18 	.word	0x0800ec18

0800dac8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	4603      	mov	r3, r0
 800dad0:	6039      	str	r1, [r7, #0]
 800dad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	221a      	movs	r2, #26
 800dad8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dada:	f000 f843 	bl	800db64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dade:	4b02      	ldr	r3, [pc, #8]	@ (800dae8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	20000114 	.word	0x20000114

0800daec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	4603      	mov	r3, r0
 800daf4:	6039      	str	r1, [r7, #0]
 800daf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d105      	bne.n	800db0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	4907      	ldr	r1, [pc, #28]	@ (800db20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db02:	4808      	ldr	r0, [pc, #32]	@ (800db24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db04:	f7ff fd34 	bl	800d570 <USBD_GetString>
 800db08:	e004      	b.n	800db14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	4904      	ldr	r1, [pc, #16]	@ (800db20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db0e:	4805      	ldr	r0, [pc, #20]	@ (800db24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db10:	f7ff fd2e 	bl	800d570 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db14:	4b02      	ldr	r3, [pc, #8]	@ (800db20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20001128 	.word	0x20001128
 800db24:	0800ec2c 	.word	0x0800ec2c

0800db28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	4603      	mov	r3, r0
 800db30:	6039      	str	r1, [r7, #0]
 800db32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db34:	79fb      	ldrb	r3, [r7, #7]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d105      	bne.n	800db46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	4907      	ldr	r1, [pc, #28]	@ (800db5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db3e:	4808      	ldr	r0, [pc, #32]	@ (800db60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db40:	f7ff fd16 	bl	800d570 <USBD_GetString>
 800db44:	e004      	b.n	800db50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db46:	683a      	ldr	r2, [r7, #0]
 800db48:	4904      	ldr	r1, [pc, #16]	@ (800db5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db4a:	4805      	ldr	r0, [pc, #20]	@ (800db60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db4c:	f7ff fd10 	bl	800d570 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db50:	4b02      	ldr	r3, [pc, #8]	@ (800db5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800db52:	4618      	mov	r0, r3
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	20001128 	.word	0x20001128
 800db60:	0800ec38 	.word	0x0800ec38

0800db64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db6a:	4b0f      	ldr	r3, [pc, #60]	@ (800dba8 <Get_SerialNum+0x44>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db70:	4b0e      	ldr	r3, [pc, #56]	@ (800dbac <Get_SerialNum+0x48>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db76:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb0 <Get_SerialNum+0x4c>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4413      	add	r3, r2
 800db82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d009      	beq.n	800db9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db8a:	2208      	movs	r2, #8
 800db8c:	4909      	ldr	r1, [pc, #36]	@ (800dbb4 <Get_SerialNum+0x50>)
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f000 f814 	bl	800dbbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db94:	2204      	movs	r2, #4
 800db96:	4908      	ldr	r1, [pc, #32]	@ (800dbb8 <Get_SerialNum+0x54>)
 800db98:	68b8      	ldr	r0, [r7, #8]
 800db9a:	f000 f80f 	bl	800dbbc <IntToUnicode>
  }
}
 800db9e:	bf00      	nop
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	1fff7a10 	.word	0x1fff7a10
 800dbac:	1fff7a14 	.word	0x1fff7a14
 800dbb0:	1fff7a18 	.word	0x1fff7a18
 800dbb4:	20000116 	.word	0x20000116
 800dbb8:	20000126 	.word	0x20000126

0800dbbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b087      	sub	sp, #28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dbce:	2300      	movs	r3, #0
 800dbd0:	75fb      	strb	r3, [r7, #23]
 800dbd2:	e027      	b.n	800dc24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	0f1b      	lsrs	r3, r3, #28
 800dbd8:	2b09      	cmp	r3, #9
 800dbda:	d80b      	bhi.n	800dbf4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	0f1b      	lsrs	r3, r3, #28
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	7dfb      	ldrb	r3, [r7, #23]
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	440b      	add	r3, r1
 800dbec:	3230      	adds	r2, #48	@ 0x30
 800dbee:	b2d2      	uxtb	r2, r2
 800dbf0:	701a      	strb	r2, [r3, #0]
 800dbf2:	e00a      	b.n	800dc0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	0f1b      	lsrs	r3, r3, #28
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	7dfb      	ldrb	r3, [r7, #23]
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	4619      	mov	r1, r3
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	440b      	add	r3, r1
 800dc04:	3237      	adds	r2, #55	@ 0x37
 800dc06:	b2d2      	uxtb	r2, r2
 800dc08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	011b      	lsls	r3, r3, #4
 800dc0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	3301      	adds	r3, #1
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	4413      	add	r3, r2
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc1e:	7dfb      	ldrb	r3, [r7, #23]
 800dc20:	3301      	adds	r3, #1
 800dc22:	75fb      	strb	r3, [r7, #23]
 800dc24:	7dfa      	ldrb	r2, [r7, #23]
 800dc26:	79fb      	ldrb	r3, [r7, #7]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d3d3      	bcc.n	800dbd4 <IntToUnicode+0x18>
  }
}
 800dc2c:	bf00      	nop
 800dc2e:	bf00      	nop
 800dc30:	371c      	adds	r7, #28
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
	...

0800dc3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08a      	sub	sp, #40	@ 0x28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc44:	f107 0314 	add.w	r3, r7, #20
 800dc48:	2200      	movs	r2, #0
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	605a      	str	r2, [r3, #4]
 800dc4e:	609a      	str	r2, [r3, #8]
 800dc50:	60da      	str	r2, [r3, #12]
 800dc52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dc5c:	d13a      	bne.n	800dcd4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc5e:	2300      	movs	r3, #0
 800dc60:	613b      	str	r3, [r7, #16]
 800dc62:	4b1e      	ldr	r3, [pc, #120]	@ (800dcdc <HAL_PCD_MspInit+0xa0>)
 800dc64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc66:	4a1d      	ldr	r2, [pc, #116]	@ (800dcdc <HAL_PCD_MspInit+0xa0>)
 800dc68:	f043 0301 	orr.w	r3, r3, #1
 800dc6c:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc6e:	4b1b      	ldr	r3, [pc, #108]	@ (800dcdc <HAL_PCD_MspInit+0xa0>)
 800dc70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc72:	f003 0301 	and.w	r3, r3, #1
 800dc76:	613b      	str	r3, [r7, #16]
 800dc78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dc7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800dc7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc80:	2302      	movs	r3, #2
 800dc82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc84:	2300      	movs	r3, #0
 800dc86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc88:	2303      	movs	r3, #3
 800dc8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dc8c:	230a      	movs	r3, #10
 800dc8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc90:	f107 0314 	add.w	r3, r7, #20
 800dc94:	4619      	mov	r1, r3
 800dc96:	4812      	ldr	r0, [pc, #72]	@ (800dce0 <HAL_PCD_MspInit+0xa4>)
 800dc98:	f7f6 fba2 	bl	80043e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dcdc <HAL_PCD_MspInit+0xa0>)
 800dc9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dca0:	4a0e      	ldr	r2, [pc, #56]	@ (800dcdc <HAL_PCD_MspInit+0xa0>)
 800dca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dca6:	6353      	str	r3, [r2, #52]	@ 0x34
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60fb      	str	r3, [r7, #12]
 800dcac:	4b0b      	ldr	r3, [pc, #44]	@ (800dcdc <HAL_PCD_MspInit+0xa0>)
 800dcae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcb0:	4a0a      	ldr	r2, [pc, #40]	@ (800dcdc <HAL_PCD_MspInit+0xa0>)
 800dcb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dcb6:	6453      	str	r3, [r2, #68]	@ 0x44
 800dcb8:	4b08      	ldr	r3, [pc, #32]	@ (800dcdc <HAL_PCD_MspInit+0xa0>)
 800dcba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcc0:	60fb      	str	r3, [r7, #12]
 800dcc2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	2100      	movs	r1, #0
 800dcc8:	2043      	movs	r0, #67	@ 0x43
 800dcca:	f7f5 ffa6 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dcce:	2043      	movs	r0, #67	@ 0x43
 800dcd0:	f7f5 ffbf 	bl	8003c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dcd4:	bf00      	nop
 800dcd6:	3728      	adds	r7, #40	@ 0x28
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	40023800 	.word	0x40023800
 800dce0:	40020000 	.word	0x40020000

0800dce4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	f7fe fabf 	bl	800c27e <USBD_LL_SetupStage>
}
 800dd00:	bf00      	nop
 800dd02:	3708      	adds	r7, #8
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dd1a:	78fa      	ldrb	r2, [r7, #3]
 800dd1c:	6879      	ldr	r1, [r7, #4]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	00db      	lsls	r3, r3, #3
 800dd22:	4413      	add	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	440b      	add	r3, r1
 800dd28:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	78fb      	ldrb	r3, [r7, #3]
 800dd30:	4619      	mov	r1, r3
 800dd32:	f7fe faf9 	bl	800c328 <USBD_LL_DataOutStage>
}
 800dd36:	bf00      	nop
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b082      	sub	sp, #8
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	460b      	mov	r3, r1
 800dd48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dd50:	78fa      	ldrb	r2, [r7, #3]
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	4613      	mov	r3, r2
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	4413      	add	r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	440b      	add	r3, r1
 800dd5e:	3320      	adds	r3, #32
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	78fb      	ldrb	r3, [r7, #3]
 800dd64:	4619      	mov	r1, r3
 800dd66:	f7fe fb9b 	bl	800c4a0 <USBD_LL_DataInStage>
}
 800dd6a:	bf00      	nop
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fcdf 	bl	800c744 <USBD_LL_SOF>
}
 800dd86:	bf00      	nop
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b084      	sub	sp, #16
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd96:	2301      	movs	r3, #1
 800dd98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	79db      	ldrb	r3, [r3, #7]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	d001      	beq.n	800dda6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dda2:	f7f3 fe81 	bl	8001aa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddac:	7bfa      	ldrb	r2, [r7, #15]
 800ddae:	4611      	mov	r1, r2
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fe fc83 	bl	800c6bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe fc2a 	bl	800c616 <USBD_LL_Reset>
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
	...

0800ddcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fc7e 	bl	800c6dc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	6812      	ldr	r2, [r2, #0]
 800ddee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ddf2:	f043 0301 	orr.w	r3, r3, #1
 800ddf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	7adb      	ldrb	r3, [r3, #11]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d005      	beq.n	800de0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de00:	4b04      	ldr	r3, [pc, #16]	@ (800de14 <HAL_PCD_SuspendCallback+0x48>)
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	4a03      	ldr	r2, [pc, #12]	@ (800de14 <HAL_PCD_SuspendCallback+0x48>)
 800de06:	f043 0306 	orr.w	r3, r3, #6
 800de0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800de0c:	bf00      	nop
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	e000ed00 	.word	0xe000ed00

0800de18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de26:	4618      	mov	r0, r3
 800de28:	f7fe fc74 	bl	800c714 <USBD_LL_Resume>
}
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de46:	78fa      	ldrb	r2, [r7, #3]
 800de48:	4611      	mov	r1, r2
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe fccc 	bl	800c7e8 <USBD_LL_IsoOUTIncomplete>
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	460b      	mov	r3, r1
 800de62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de6a:	78fa      	ldrb	r2, [r7, #3]
 800de6c:	4611      	mov	r1, r2
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fe fc88 	bl	800c784 <USBD_LL_IsoINIncomplete>
}
 800de74:	bf00      	nop
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fe fcde 	bl	800c84c <USBD_LL_DevConnected>
}
 800de90:	bf00      	nop
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fe fcdb 	bl	800c862 <USBD_LL_DevDisconnected>
}
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d13c      	bne.n	800df3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dec4:	4a20      	ldr	r2, [pc, #128]	@ (800df48 <USBD_LL_Init+0x94>)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a1e      	ldr	r2, [pc, #120]	@ (800df48 <USBD_LL_Init+0x94>)
 800ded0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ded4:	4b1c      	ldr	r3, [pc, #112]	@ (800df48 <USBD_LL_Init+0x94>)
 800ded6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800deda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dedc:	4b1a      	ldr	r3, [pc, #104]	@ (800df48 <USBD_LL_Init+0x94>)
 800dede:	2204      	movs	r2, #4
 800dee0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dee2:	4b19      	ldr	r3, [pc, #100]	@ (800df48 <USBD_LL_Init+0x94>)
 800dee4:	2202      	movs	r2, #2
 800dee6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dee8:	4b17      	ldr	r3, [pc, #92]	@ (800df48 <USBD_LL_Init+0x94>)
 800deea:	2200      	movs	r2, #0
 800deec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800deee:	4b16      	ldr	r3, [pc, #88]	@ (800df48 <USBD_LL_Init+0x94>)
 800def0:	2202      	movs	r2, #2
 800def2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800def4:	4b14      	ldr	r3, [pc, #80]	@ (800df48 <USBD_LL_Init+0x94>)
 800def6:	2200      	movs	r2, #0
 800def8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800defa:	4b13      	ldr	r3, [pc, #76]	@ (800df48 <USBD_LL_Init+0x94>)
 800defc:	2200      	movs	r2, #0
 800defe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800df00:	4b11      	ldr	r3, [pc, #68]	@ (800df48 <USBD_LL_Init+0x94>)
 800df02:	2200      	movs	r2, #0
 800df04:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800df06:	4b10      	ldr	r3, [pc, #64]	@ (800df48 <USBD_LL_Init+0x94>)
 800df08:	2200      	movs	r2, #0
 800df0a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800df0c:	4b0e      	ldr	r3, [pc, #56]	@ (800df48 <USBD_LL_Init+0x94>)
 800df0e:	2200      	movs	r2, #0
 800df10:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800df12:	480d      	ldr	r0, [pc, #52]	@ (800df48 <USBD_LL_Init+0x94>)
 800df14:	f7f9 fd43 	bl	800799e <HAL_PCD_Init>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800df1e:	f7f3 fdc3 	bl	8001aa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800df22:	2180      	movs	r1, #128	@ 0x80
 800df24:	4808      	ldr	r0, [pc, #32]	@ (800df48 <USBD_LL_Init+0x94>)
 800df26:	f7fa ff70 	bl	8008e0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800df2a:	2240      	movs	r2, #64	@ 0x40
 800df2c:	2100      	movs	r1, #0
 800df2e:	4806      	ldr	r0, [pc, #24]	@ (800df48 <USBD_LL_Init+0x94>)
 800df30:	f7fa ff24 	bl	8008d7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800df34:	2280      	movs	r2, #128	@ 0x80
 800df36:	2101      	movs	r1, #1
 800df38:	4803      	ldr	r0, [pc, #12]	@ (800df48 <USBD_LL_Init+0x94>)
 800df3a:	f7fa ff1f 	bl	8008d7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	20001328 	.word	0x20001328

0800df4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df54:	2300      	movs	r3, #0
 800df56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df58:	2300      	movs	r3, #0
 800df5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df62:	4618      	mov	r0, r3
 800df64:	f7f9 fe2a 	bl	8007bbc <HAL_PCD_Start>
 800df68:	4603      	mov	r3, r0
 800df6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 f942 	bl	800e1f8 <USBD_Get_USB_Status>
 800df74:	4603      	mov	r3, r0
 800df76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df78:	7bbb      	ldrb	r3, [r7, #14]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b084      	sub	sp, #16
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	4608      	mov	r0, r1
 800df8c:	4611      	mov	r1, r2
 800df8e:	461a      	mov	r2, r3
 800df90:	4603      	mov	r3, r0
 800df92:	70fb      	strb	r3, [r7, #3]
 800df94:	460b      	mov	r3, r1
 800df96:	70bb      	strb	r3, [r7, #2]
 800df98:	4613      	mov	r3, r2
 800df9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dfaa:	78bb      	ldrb	r3, [r7, #2]
 800dfac:	883a      	ldrh	r2, [r7, #0]
 800dfae:	78f9      	ldrb	r1, [r7, #3]
 800dfb0:	f7fa fafe 	bl	80085b0 <HAL_PCD_EP_Open>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 f91c 	bl	800e1f8 <USBD_Get_USB_Status>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3710      	adds	r7, #16
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b084      	sub	sp, #16
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfe8:	78fa      	ldrb	r2, [r7, #3]
 800dfea:	4611      	mov	r1, r2
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fa fb49 	bl	8008684 <HAL_PCD_EP_Close>
 800dff2:	4603      	mov	r3, r0
 800dff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dff6:	7bfb      	ldrb	r3, [r7, #15]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f000 f8fd 	bl	800e1f8 <USBD_Get_USB_Status>
 800dffe:	4603      	mov	r3, r0
 800e000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e002:	7bbb      	ldrb	r3, [r7, #14]
}
 800e004:	4618      	mov	r0, r3
 800e006:	3710      	adds	r7, #16
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	460b      	mov	r3, r1
 800e016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e026:	78fa      	ldrb	r2, [r7, #3]
 800e028:	4611      	mov	r1, r2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fa fc01 	bl	8008832 <HAL_PCD_EP_SetStall>
 800e030:	4603      	mov	r3, r0
 800e032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e034:	7bfb      	ldrb	r3, [r7, #15]
 800e036:	4618      	mov	r0, r3
 800e038:	f000 f8de 	bl	800e1f8 <USBD_Get_USB_Status>
 800e03c:	4603      	mov	r3, r0
 800e03e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e040:	7bbb      	ldrb	r3, [r7, #14]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b084      	sub	sp, #16
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	460b      	mov	r3, r1
 800e054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e056:	2300      	movs	r3, #0
 800e058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e064:	78fa      	ldrb	r2, [r7, #3]
 800e066:	4611      	mov	r1, r2
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fa fc45 	bl	80088f8 <HAL_PCD_EP_ClrStall>
 800e06e:	4603      	mov	r3, r0
 800e070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e072:	7bfb      	ldrb	r3, [r7, #15]
 800e074:	4618      	mov	r0, r3
 800e076:	f000 f8bf 	bl	800e1f8 <USBD_Get_USB_Status>
 800e07a:	4603      	mov	r3, r0
 800e07c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e07e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e09a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e09c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	da0b      	bge.n	800e0bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e0a4:	78fb      	ldrb	r3, [r7, #3]
 800e0a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e0aa:	68f9      	ldr	r1, [r7, #12]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	00db      	lsls	r3, r3, #3
 800e0b0:	4413      	add	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	440b      	add	r3, r1
 800e0b6:	3316      	adds	r3, #22
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	e00b      	b.n	800e0d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e0bc:	78fb      	ldrb	r3, [r7, #3]
 800e0be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e0c2:	68f9      	ldr	r1, [r7, #12]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	4413      	add	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	440b      	add	r3, r1
 800e0ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e0d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3714      	adds	r7, #20
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0fa:	78fa      	ldrb	r2, [r7, #3]
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fa fa32 	bl	8008568 <HAL_PCD_SetAddress>
 800e104:	4603      	mov	r3, r0
 800e106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f874 	bl	800e1f8 <USBD_Get_USB_Status>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e114:	7bbb      	ldrb	r3, [r7, #14]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b086      	sub	sp, #24
 800e122:	af00      	add	r7, sp, #0
 800e124:	60f8      	str	r0, [r7, #12]
 800e126:	607a      	str	r2, [r7, #4]
 800e128:	603b      	str	r3, [r7, #0]
 800e12a:	460b      	mov	r3, r1
 800e12c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e132:	2300      	movs	r3, #0
 800e134:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e13c:	7af9      	ldrb	r1, [r7, #11]
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	f7fa fb3c 	bl	80087be <HAL_PCD_EP_Transmit>
 800e146:	4603      	mov	r3, r0
 800e148:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f000 f853 	bl	800e1f8 <USBD_Get_USB_Status>
 800e152:	4603      	mov	r3, r0
 800e154:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e156:	7dbb      	ldrb	r3, [r7, #22]
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3718      	adds	r7, #24
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	607a      	str	r2, [r7, #4]
 800e16a:	603b      	str	r3, [r7, #0]
 800e16c:	460b      	mov	r3, r1
 800e16e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e17e:	7af9      	ldrb	r1, [r7, #11]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	f7fa fac8 	bl	8008718 <HAL_PCD_EP_Receive>
 800e188:	4603      	mov	r3, r0
 800e18a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e18c:	7dfb      	ldrb	r3, [r7, #23]
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 f832 	bl	800e1f8 <USBD_Get_USB_Status>
 800e194:	4603      	mov	r3, r0
 800e196:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e198:	7dbb      	ldrb	r3, [r7, #22]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1b4:	78fa      	ldrb	r2, [r7, #3]
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fa fae8 	bl	800878e <HAL_PCD_EP_GetRxCount>
 800e1be:	4603      	mov	r3, r0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e1d0:	4b03      	ldr	r3, [pc, #12]	@ (800e1e0 <USBD_static_malloc+0x18>)
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	370c      	adds	r7, #12
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	2000180c 	.word	0x2000180c

0800e1e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]

}
 800e1ec:	bf00      	nop
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	4603      	mov	r3, r0
 800e200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e202:	2300      	movs	r3, #0
 800e204:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e206:	79fb      	ldrb	r3, [r7, #7]
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d817      	bhi.n	800e23c <USBD_Get_USB_Status+0x44>
 800e20c:	a201      	add	r2, pc, #4	@ (adr r2, 800e214 <USBD_Get_USB_Status+0x1c>)
 800e20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e212:	bf00      	nop
 800e214:	0800e225 	.word	0x0800e225
 800e218:	0800e22b 	.word	0x0800e22b
 800e21c:	0800e231 	.word	0x0800e231
 800e220:	0800e237 	.word	0x0800e237
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e224:	2300      	movs	r3, #0
 800e226:	73fb      	strb	r3, [r7, #15]
    break;
 800e228:	e00b      	b.n	800e242 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e22a:	2303      	movs	r3, #3
 800e22c:	73fb      	strb	r3, [r7, #15]
    break;
 800e22e:	e008      	b.n	800e242 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e230:	2301      	movs	r3, #1
 800e232:	73fb      	strb	r3, [r7, #15]
    break;
 800e234:	e005      	b.n	800e242 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e236:	2303      	movs	r3, #3
 800e238:	73fb      	strb	r3, [r7, #15]
    break;
 800e23a:	e002      	b.n	800e242 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e23c:	2303      	movs	r3, #3
 800e23e:	73fb      	strb	r3, [r7, #15]
    break;
 800e240:	bf00      	nop
  }
  return usb_status;
 800e242:	7bfb      	ldrb	r3, [r7, #15]
}
 800e244:	4618      	mov	r0, r3
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <sniprintf>:
 800e250:	b40c      	push	{r2, r3}
 800e252:	b530      	push	{r4, r5, lr}
 800e254:	4b18      	ldr	r3, [pc, #96]	@ (800e2b8 <sniprintf+0x68>)
 800e256:	1e0c      	subs	r4, r1, #0
 800e258:	681d      	ldr	r5, [r3, #0]
 800e25a:	b09d      	sub	sp, #116	@ 0x74
 800e25c:	da08      	bge.n	800e270 <sniprintf+0x20>
 800e25e:	238b      	movs	r3, #139	@ 0x8b
 800e260:	602b      	str	r3, [r5, #0]
 800e262:	f04f 30ff 	mov.w	r0, #4294967295
 800e266:	b01d      	add	sp, #116	@ 0x74
 800e268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e26c:	b002      	add	sp, #8
 800e26e:	4770      	bx	lr
 800e270:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e274:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e278:	f04f 0300 	mov.w	r3, #0
 800e27c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e27e:	bf14      	ite	ne
 800e280:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e284:	4623      	moveq	r3, r4
 800e286:	9304      	str	r3, [sp, #16]
 800e288:	9307      	str	r3, [sp, #28]
 800e28a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e28e:	9002      	str	r0, [sp, #8]
 800e290:	9006      	str	r0, [sp, #24]
 800e292:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e296:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e298:	ab21      	add	r3, sp, #132	@ 0x84
 800e29a:	a902      	add	r1, sp, #8
 800e29c:	4628      	mov	r0, r5
 800e29e:	9301      	str	r3, [sp, #4]
 800e2a0:	f000 f9bc 	bl	800e61c <_svfiprintf_r>
 800e2a4:	1c43      	adds	r3, r0, #1
 800e2a6:	bfbc      	itt	lt
 800e2a8:	238b      	movlt	r3, #139	@ 0x8b
 800e2aa:	602b      	strlt	r3, [r5, #0]
 800e2ac:	2c00      	cmp	r4, #0
 800e2ae:	d0da      	beq.n	800e266 <sniprintf+0x16>
 800e2b0:	9b02      	ldr	r3, [sp, #8]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	701a      	strb	r2, [r3, #0]
 800e2b6:	e7d6      	b.n	800e266 <sniprintf+0x16>
 800e2b8:	20000130 	.word	0x20000130

0800e2bc <memmove>:
 800e2bc:	4288      	cmp	r0, r1
 800e2be:	b510      	push	{r4, lr}
 800e2c0:	eb01 0402 	add.w	r4, r1, r2
 800e2c4:	d902      	bls.n	800e2cc <memmove+0x10>
 800e2c6:	4284      	cmp	r4, r0
 800e2c8:	4623      	mov	r3, r4
 800e2ca:	d807      	bhi.n	800e2dc <memmove+0x20>
 800e2cc:	1e43      	subs	r3, r0, #1
 800e2ce:	42a1      	cmp	r1, r4
 800e2d0:	d008      	beq.n	800e2e4 <memmove+0x28>
 800e2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2da:	e7f8      	b.n	800e2ce <memmove+0x12>
 800e2dc:	4402      	add	r2, r0
 800e2de:	4601      	mov	r1, r0
 800e2e0:	428a      	cmp	r2, r1
 800e2e2:	d100      	bne.n	800e2e6 <memmove+0x2a>
 800e2e4:	bd10      	pop	{r4, pc}
 800e2e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2ee:	e7f7      	b.n	800e2e0 <memmove+0x24>

0800e2f0 <memset>:
 800e2f0:	4402      	add	r2, r0
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d100      	bne.n	800e2fa <memset+0xa>
 800e2f8:	4770      	bx	lr
 800e2fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e2fe:	e7f9      	b.n	800e2f4 <memset+0x4>

0800e300 <__errno>:
 800e300:	4b01      	ldr	r3, [pc, #4]	@ (800e308 <__errno+0x8>)
 800e302:	6818      	ldr	r0, [r3, #0]
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	20000130 	.word	0x20000130

0800e30c <__libc_init_array>:
 800e30c:	b570      	push	{r4, r5, r6, lr}
 800e30e:	4d0d      	ldr	r5, [pc, #52]	@ (800e344 <__libc_init_array+0x38>)
 800e310:	4c0d      	ldr	r4, [pc, #52]	@ (800e348 <__libc_init_array+0x3c>)
 800e312:	1b64      	subs	r4, r4, r5
 800e314:	10a4      	asrs	r4, r4, #2
 800e316:	2600      	movs	r6, #0
 800e318:	42a6      	cmp	r6, r4
 800e31a:	d109      	bne.n	800e330 <__libc_init_array+0x24>
 800e31c:	4d0b      	ldr	r5, [pc, #44]	@ (800e34c <__libc_init_array+0x40>)
 800e31e:	4c0c      	ldr	r4, [pc, #48]	@ (800e350 <__libc_init_array+0x44>)
 800e320:	f000 fc4a 	bl	800ebb8 <_init>
 800e324:	1b64      	subs	r4, r4, r5
 800e326:	10a4      	asrs	r4, r4, #2
 800e328:	2600      	movs	r6, #0
 800e32a:	42a6      	cmp	r6, r4
 800e32c:	d105      	bne.n	800e33a <__libc_init_array+0x2e>
 800e32e:	bd70      	pop	{r4, r5, r6, pc}
 800e330:	f855 3b04 	ldr.w	r3, [r5], #4
 800e334:	4798      	blx	r3
 800e336:	3601      	adds	r6, #1
 800e338:	e7ee      	b.n	800e318 <__libc_init_array+0xc>
 800e33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e33e:	4798      	blx	r3
 800e340:	3601      	adds	r6, #1
 800e342:	e7f2      	b.n	800e32a <__libc_init_array+0x1e>
 800e344:	0800f2b0 	.word	0x0800f2b0
 800e348:	0800f2b0 	.word	0x0800f2b0
 800e34c:	0800f2b0 	.word	0x0800f2b0
 800e350:	0800f2b4 	.word	0x0800f2b4

0800e354 <__retarget_lock_acquire_recursive>:
 800e354:	4770      	bx	lr

0800e356 <__retarget_lock_release_recursive>:
 800e356:	4770      	bx	lr

0800e358 <memcpy>:
 800e358:	440a      	add	r2, r1
 800e35a:	4291      	cmp	r1, r2
 800e35c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e360:	d100      	bne.n	800e364 <memcpy+0xc>
 800e362:	4770      	bx	lr
 800e364:	b510      	push	{r4, lr}
 800e366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e36a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e36e:	4291      	cmp	r1, r2
 800e370:	d1f9      	bne.n	800e366 <memcpy+0xe>
 800e372:	bd10      	pop	{r4, pc}

0800e374 <_free_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4605      	mov	r5, r0
 800e378:	2900      	cmp	r1, #0
 800e37a:	d041      	beq.n	800e400 <_free_r+0x8c>
 800e37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e380:	1f0c      	subs	r4, r1, #4
 800e382:	2b00      	cmp	r3, #0
 800e384:	bfb8      	it	lt
 800e386:	18e4      	addlt	r4, r4, r3
 800e388:	f000 f8e0 	bl	800e54c <__malloc_lock>
 800e38c:	4a1d      	ldr	r2, [pc, #116]	@ (800e404 <_free_r+0x90>)
 800e38e:	6813      	ldr	r3, [r2, #0]
 800e390:	b933      	cbnz	r3, 800e3a0 <_free_r+0x2c>
 800e392:	6063      	str	r3, [r4, #4]
 800e394:	6014      	str	r4, [r2, #0]
 800e396:	4628      	mov	r0, r5
 800e398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e39c:	f000 b8dc 	b.w	800e558 <__malloc_unlock>
 800e3a0:	42a3      	cmp	r3, r4
 800e3a2:	d908      	bls.n	800e3b6 <_free_r+0x42>
 800e3a4:	6820      	ldr	r0, [r4, #0]
 800e3a6:	1821      	adds	r1, r4, r0
 800e3a8:	428b      	cmp	r3, r1
 800e3aa:	bf01      	itttt	eq
 800e3ac:	6819      	ldreq	r1, [r3, #0]
 800e3ae:	685b      	ldreq	r3, [r3, #4]
 800e3b0:	1809      	addeq	r1, r1, r0
 800e3b2:	6021      	streq	r1, [r4, #0]
 800e3b4:	e7ed      	b.n	800e392 <_free_r+0x1e>
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	b10b      	cbz	r3, 800e3c0 <_free_r+0x4c>
 800e3bc:	42a3      	cmp	r3, r4
 800e3be:	d9fa      	bls.n	800e3b6 <_free_r+0x42>
 800e3c0:	6811      	ldr	r1, [r2, #0]
 800e3c2:	1850      	adds	r0, r2, r1
 800e3c4:	42a0      	cmp	r0, r4
 800e3c6:	d10b      	bne.n	800e3e0 <_free_r+0x6c>
 800e3c8:	6820      	ldr	r0, [r4, #0]
 800e3ca:	4401      	add	r1, r0
 800e3cc:	1850      	adds	r0, r2, r1
 800e3ce:	4283      	cmp	r3, r0
 800e3d0:	6011      	str	r1, [r2, #0]
 800e3d2:	d1e0      	bne.n	800e396 <_free_r+0x22>
 800e3d4:	6818      	ldr	r0, [r3, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	6053      	str	r3, [r2, #4]
 800e3da:	4408      	add	r0, r1
 800e3dc:	6010      	str	r0, [r2, #0]
 800e3de:	e7da      	b.n	800e396 <_free_r+0x22>
 800e3e0:	d902      	bls.n	800e3e8 <_free_r+0x74>
 800e3e2:	230c      	movs	r3, #12
 800e3e4:	602b      	str	r3, [r5, #0]
 800e3e6:	e7d6      	b.n	800e396 <_free_r+0x22>
 800e3e8:	6820      	ldr	r0, [r4, #0]
 800e3ea:	1821      	adds	r1, r4, r0
 800e3ec:	428b      	cmp	r3, r1
 800e3ee:	bf04      	itt	eq
 800e3f0:	6819      	ldreq	r1, [r3, #0]
 800e3f2:	685b      	ldreq	r3, [r3, #4]
 800e3f4:	6063      	str	r3, [r4, #4]
 800e3f6:	bf04      	itt	eq
 800e3f8:	1809      	addeq	r1, r1, r0
 800e3fa:	6021      	streq	r1, [r4, #0]
 800e3fc:	6054      	str	r4, [r2, #4]
 800e3fe:	e7ca      	b.n	800e396 <_free_r+0x22>
 800e400:	bd38      	pop	{r3, r4, r5, pc}
 800e402:	bf00      	nop
 800e404:	20001b70 	.word	0x20001b70

0800e408 <sbrk_aligned>:
 800e408:	b570      	push	{r4, r5, r6, lr}
 800e40a:	4e0f      	ldr	r6, [pc, #60]	@ (800e448 <sbrk_aligned+0x40>)
 800e40c:	460c      	mov	r4, r1
 800e40e:	6831      	ldr	r1, [r6, #0]
 800e410:	4605      	mov	r5, r0
 800e412:	b911      	cbnz	r1, 800e41a <sbrk_aligned+0x12>
 800e414:	f000 fb8a 	bl	800eb2c <_sbrk_r>
 800e418:	6030      	str	r0, [r6, #0]
 800e41a:	4621      	mov	r1, r4
 800e41c:	4628      	mov	r0, r5
 800e41e:	f000 fb85 	bl	800eb2c <_sbrk_r>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d103      	bne.n	800e42e <sbrk_aligned+0x26>
 800e426:	f04f 34ff 	mov.w	r4, #4294967295
 800e42a:	4620      	mov	r0, r4
 800e42c:	bd70      	pop	{r4, r5, r6, pc}
 800e42e:	1cc4      	adds	r4, r0, #3
 800e430:	f024 0403 	bic.w	r4, r4, #3
 800e434:	42a0      	cmp	r0, r4
 800e436:	d0f8      	beq.n	800e42a <sbrk_aligned+0x22>
 800e438:	1a21      	subs	r1, r4, r0
 800e43a:	4628      	mov	r0, r5
 800e43c:	f000 fb76 	bl	800eb2c <_sbrk_r>
 800e440:	3001      	adds	r0, #1
 800e442:	d1f2      	bne.n	800e42a <sbrk_aligned+0x22>
 800e444:	e7ef      	b.n	800e426 <sbrk_aligned+0x1e>
 800e446:	bf00      	nop
 800e448:	20001b6c 	.word	0x20001b6c

0800e44c <_malloc_r>:
 800e44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e450:	1ccd      	adds	r5, r1, #3
 800e452:	f025 0503 	bic.w	r5, r5, #3
 800e456:	3508      	adds	r5, #8
 800e458:	2d0c      	cmp	r5, #12
 800e45a:	bf38      	it	cc
 800e45c:	250c      	movcc	r5, #12
 800e45e:	2d00      	cmp	r5, #0
 800e460:	4606      	mov	r6, r0
 800e462:	db01      	blt.n	800e468 <_malloc_r+0x1c>
 800e464:	42a9      	cmp	r1, r5
 800e466:	d904      	bls.n	800e472 <_malloc_r+0x26>
 800e468:	230c      	movs	r3, #12
 800e46a:	6033      	str	r3, [r6, #0]
 800e46c:	2000      	movs	r0, #0
 800e46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e548 <_malloc_r+0xfc>
 800e476:	f000 f869 	bl	800e54c <__malloc_lock>
 800e47a:	f8d8 3000 	ldr.w	r3, [r8]
 800e47e:	461c      	mov	r4, r3
 800e480:	bb44      	cbnz	r4, 800e4d4 <_malloc_r+0x88>
 800e482:	4629      	mov	r1, r5
 800e484:	4630      	mov	r0, r6
 800e486:	f7ff ffbf 	bl	800e408 <sbrk_aligned>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	4604      	mov	r4, r0
 800e48e:	d158      	bne.n	800e542 <_malloc_r+0xf6>
 800e490:	f8d8 4000 	ldr.w	r4, [r8]
 800e494:	4627      	mov	r7, r4
 800e496:	2f00      	cmp	r7, #0
 800e498:	d143      	bne.n	800e522 <_malloc_r+0xd6>
 800e49a:	2c00      	cmp	r4, #0
 800e49c:	d04b      	beq.n	800e536 <_malloc_r+0xea>
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	4639      	mov	r1, r7
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	eb04 0903 	add.w	r9, r4, r3
 800e4a8:	f000 fb40 	bl	800eb2c <_sbrk_r>
 800e4ac:	4581      	cmp	r9, r0
 800e4ae:	d142      	bne.n	800e536 <_malloc_r+0xea>
 800e4b0:	6821      	ldr	r1, [r4, #0]
 800e4b2:	1a6d      	subs	r5, r5, r1
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f7ff ffa6 	bl	800e408 <sbrk_aligned>
 800e4bc:	3001      	adds	r0, #1
 800e4be:	d03a      	beq.n	800e536 <_malloc_r+0xea>
 800e4c0:	6823      	ldr	r3, [r4, #0]
 800e4c2:	442b      	add	r3, r5
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	bb62      	cbnz	r2, 800e528 <_malloc_r+0xdc>
 800e4ce:	f8c8 7000 	str.w	r7, [r8]
 800e4d2:	e00f      	b.n	800e4f4 <_malloc_r+0xa8>
 800e4d4:	6822      	ldr	r2, [r4, #0]
 800e4d6:	1b52      	subs	r2, r2, r5
 800e4d8:	d420      	bmi.n	800e51c <_malloc_r+0xd0>
 800e4da:	2a0b      	cmp	r2, #11
 800e4dc:	d917      	bls.n	800e50e <_malloc_r+0xc2>
 800e4de:	1961      	adds	r1, r4, r5
 800e4e0:	42a3      	cmp	r3, r4
 800e4e2:	6025      	str	r5, [r4, #0]
 800e4e4:	bf18      	it	ne
 800e4e6:	6059      	strne	r1, [r3, #4]
 800e4e8:	6863      	ldr	r3, [r4, #4]
 800e4ea:	bf08      	it	eq
 800e4ec:	f8c8 1000 	streq.w	r1, [r8]
 800e4f0:	5162      	str	r2, [r4, r5]
 800e4f2:	604b      	str	r3, [r1, #4]
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f000 f82f 	bl	800e558 <__malloc_unlock>
 800e4fa:	f104 000b 	add.w	r0, r4, #11
 800e4fe:	1d23      	adds	r3, r4, #4
 800e500:	f020 0007 	bic.w	r0, r0, #7
 800e504:	1ac2      	subs	r2, r0, r3
 800e506:	bf1c      	itt	ne
 800e508:	1a1b      	subne	r3, r3, r0
 800e50a:	50a3      	strne	r3, [r4, r2]
 800e50c:	e7af      	b.n	800e46e <_malloc_r+0x22>
 800e50e:	6862      	ldr	r2, [r4, #4]
 800e510:	42a3      	cmp	r3, r4
 800e512:	bf0c      	ite	eq
 800e514:	f8c8 2000 	streq.w	r2, [r8]
 800e518:	605a      	strne	r2, [r3, #4]
 800e51a:	e7eb      	b.n	800e4f4 <_malloc_r+0xa8>
 800e51c:	4623      	mov	r3, r4
 800e51e:	6864      	ldr	r4, [r4, #4]
 800e520:	e7ae      	b.n	800e480 <_malloc_r+0x34>
 800e522:	463c      	mov	r4, r7
 800e524:	687f      	ldr	r7, [r7, #4]
 800e526:	e7b6      	b.n	800e496 <_malloc_r+0x4a>
 800e528:	461a      	mov	r2, r3
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	42a3      	cmp	r3, r4
 800e52e:	d1fb      	bne.n	800e528 <_malloc_r+0xdc>
 800e530:	2300      	movs	r3, #0
 800e532:	6053      	str	r3, [r2, #4]
 800e534:	e7de      	b.n	800e4f4 <_malloc_r+0xa8>
 800e536:	230c      	movs	r3, #12
 800e538:	6033      	str	r3, [r6, #0]
 800e53a:	4630      	mov	r0, r6
 800e53c:	f000 f80c 	bl	800e558 <__malloc_unlock>
 800e540:	e794      	b.n	800e46c <_malloc_r+0x20>
 800e542:	6005      	str	r5, [r0, #0]
 800e544:	e7d6      	b.n	800e4f4 <_malloc_r+0xa8>
 800e546:	bf00      	nop
 800e548:	20001b70 	.word	0x20001b70

0800e54c <__malloc_lock>:
 800e54c:	4801      	ldr	r0, [pc, #4]	@ (800e554 <__malloc_lock+0x8>)
 800e54e:	f7ff bf01 	b.w	800e354 <__retarget_lock_acquire_recursive>
 800e552:	bf00      	nop
 800e554:	20001b68 	.word	0x20001b68

0800e558 <__malloc_unlock>:
 800e558:	4801      	ldr	r0, [pc, #4]	@ (800e560 <__malloc_unlock+0x8>)
 800e55a:	f7ff befc 	b.w	800e356 <__retarget_lock_release_recursive>
 800e55e:	bf00      	nop
 800e560:	20001b68 	.word	0x20001b68

0800e564 <__ssputs_r>:
 800e564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e568:	688e      	ldr	r6, [r1, #8]
 800e56a:	461f      	mov	r7, r3
 800e56c:	42be      	cmp	r6, r7
 800e56e:	680b      	ldr	r3, [r1, #0]
 800e570:	4682      	mov	sl, r0
 800e572:	460c      	mov	r4, r1
 800e574:	4690      	mov	r8, r2
 800e576:	d82d      	bhi.n	800e5d4 <__ssputs_r+0x70>
 800e578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e57c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e580:	d026      	beq.n	800e5d0 <__ssputs_r+0x6c>
 800e582:	6965      	ldr	r5, [r4, #20]
 800e584:	6909      	ldr	r1, [r1, #16]
 800e586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e58a:	eba3 0901 	sub.w	r9, r3, r1
 800e58e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e592:	1c7b      	adds	r3, r7, #1
 800e594:	444b      	add	r3, r9
 800e596:	106d      	asrs	r5, r5, #1
 800e598:	429d      	cmp	r5, r3
 800e59a:	bf38      	it	cc
 800e59c:	461d      	movcc	r5, r3
 800e59e:	0553      	lsls	r3, r2, #21
 800e5a0:	d527      	bpl.n	800e5f2 <__ssputs_r+0x8e>
 800e5a2:	4629      	mov	r1, r5
 800e5a4:	f7ff ff52 	bl	800e44c <_malloc_r>
 800e5a8:	4606      	mov	r6, r0
 800e5aa:	b360      	cbz	r0, 800e606 <__ssputs_r+0xa2>
 800e5ac:	6921      	ldr	r1, [r4, #16]
 800e5ae:	464a      	mov	r2, r9
 800e5b0:	f7ff fed2 	bl	800e358 <memcpy>
 800e5b4:	89a3      	ldrh	r3, [r4, #12]
 800e5b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e5ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5be:	81a3      	strh	r3, [r4, #12]
 800e5c0:	6126      	str	r6, [r4, #16]
 800e5c2:	6165      	str	r5, [r4, #20]
 800e5c4:	444e      	add	r6, r9
 800e5c6:	eba5 0509 	sub.w	r5, r5, r9
 800e5ca:	6026      	str	r6, [r4, #0]
 800e5cc:	60a5      	str	r5, [r4, #8]
 800e5ce:	463e      	mov	r6, r7
 800e5d0:	42be      	cmp	r6, r7
 800e5d2:	d900      	bls.n	800e5d6 <__ssputs_r+0x72>
 800e5d4:	463e      	mov	r6, r7
 800e5d6:	6820      	ldr	r0, [r4, #0]
 800e5d8:	4632      	mov	r2, r6
 800e5da:	4641      	mov	r1, r8
 800e5dc:	f7ff fe6e 	bl	800e2bc <memmove>
 800e5e0:	68a3      	ldr	r3, [r4, #8]
 800e5e2:	1b9b      	subs	r3, r3, r6
 800e5e4:	60a3      	str	r3, [r4, #8]
 800e5e6:	6823      	ldr	r3, [r4, #0]
 800e5e8:	4433      	add	r3, r6
 800e5ea:	6023      	str	r3, [r4, #0]
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f2:	462a      	mov	r2, r5
 800e5f4:	f000 faaa 	bl	800eb4c <_realloc_r>
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	d1e0      	bne.n	800e5c0 <__ssputs_r+0x5c>
 800e5fe:	6921      	ldr	r1, [r4, #16]
 800e600:	4650      	mov	r0, sl
 800e602:	f7ff feb7 	bl	800e374 <_free_r>
 800e606:	230c      	movs	r3, #12
 800e608:	f8ca 3000 	str.w	r3, [sl]
 800e60c:	89a3      	ldrh	r3, [r4, #12]
 800e60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e612:	81a3      	strh	r3, [r4, #12]
 800e614:	f04f 30ff 	mov.w	r0, #4294967295
 800e618:	e7e9      	b.n	800e5ee <__ssputs_r+0x8a>
	...

0800e61c <_svfiprintf_r>:
 800e61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	4698      	mov	r8, r3
 800e622:	898b      	ldrh	r3, [r1, #12]
 800e624:	061b      	lsls	r3, r3, #24
 800e626:	b09d      	sub	sp, #116	@ 0x74
 800e628:	4607      	mov	r7, r0
 800e62a:	460d      	mov	r5, r1
 800e62c:	4614      	mov	r4, r2
 800e62e:	d510      	bpl.n	800e652 <_svfiprintf_r+0x36>
 800e630:	690b      	ldr	r3, [r1, #16]
 800e632:	b973      	cbnz	r3, 800e652 <_svfiprintf_r+0x36>
 800e634:	2140      	movs	r1, #64	@ 0x40
 800e636:	f7ff ff09 	bl	800e44c <_malloc_r>
 800e63a:	6028      	str	r0, [r5, #0]
 800e63c:	6128      	str	r0, [r5, #16]
 800e63e:	b930      	cbnz	r0, 800e64e <_svfiprintf_r+0x32>
 800e640:	230c      	movs	r3, #12
 800e642:	603b      	str	r3, [r7, #0]
 800e644:	f04f 30ff 	mov.w	r0, #4294967295
 800e648:	b01d      	add	sp, #116	@ 0x74
 800e64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64e:	2340      	movs	r3, #64	@ 0x40
 800e650:	616b      	str	r3, [r5, #20]
 800e652:	2300      	movs	r3, #0
 800e654:	9309      	str	r3, [sp, #36]	@ 0x24
 800e656:	2320      	movs	r3, #32
 800e658:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e65c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e660:	2330      	movs	r3, #48	@ 0x30
 800e662:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e800 <_svfiprintf_r+0x1e4>
 800e666:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e66a:	f04f 0901 	mov.w	r9, #1
 800e66e:	4623      	mov	r3, r4
 800e670:	469a      	mov	sl, r3
 800e672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e676:	b10a      	cbz	r2, 800e67c <_svfiprintf_r+0x60>
 800e678:	2a25      	cmp	r2, #37	@ 0x25
 800e67a:	d1f9      	bne.n	800e670 <_svfiprintf_r+0x54>
 800e67c:	ebba 0b04 	subs.w	fp, sl, r4
 800e680:	d00b      	beq.n	800e69a <_svfiprintf_r+0x7e>
 800e682:	465b      	mov	r3, fp
 800e684:	4622      	mov	r2, r4
 800e686:	4629      	mov	r1, r5
 800e688:	4638      	mov	r0, r7
 800e68a:	f7ff ff6b 	bl	800e564 <__ssputs_r>
 800e68e:	3001      	adds	r0, #1
 800e690:	f000 80a7 	beq.w	800e7e2 <_svfiprintf_r+0x1c6>
 800e694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e696:	445a      	add	r2, fp
 800e698:	9209      	str	r2, [sp, #36]	@ 0x24
 800e69a:	f89a 3000 	ldrb.w	r3, [sl]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f000 809f 	beq.w	800e7e2 <_svfiprintf_r+0x1c6>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6ae:	f10a 0a01 	add.w	sl, sl, #1
 800e6b2:	9304      	str	r3, [sp, #16]
 800e6b4:	9307      	str	r3, [sp, #28]
 800e6b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6bc:	4654      	mov	r4, sl
 800e6be:	2205      	movs	r2, #5
 800e6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6c4:	484e      	ldr	r0, [pc, #312]	@ (800e800 <_svfiprintf_r+0x1e4>)
 800e6c6:	f7f1 fd8b 	bl	80001e0 <memchr>
 800e6ca:	9a04      	ldr	r2, [sp, #16]
 800e6cc:	b9d8      	cbnz	r0, 800e706 <_svfiprintf_r+0xea>
 800e6ce:	06d0      	lsls	r0, r2, #27
 800e6d0:	bf44      	itt	mi
 800e6d2:	2320      	movmi	r3, #32
 800e6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6d8:	0711      	lsls	r1, r2, #28
 800e6da:	bf44      	itt	mi
 800e6dc:	232b      	movmi	r3, #43	@ 0x2b
 800e6de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e6e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6e8:	d015      	beq.n	800e716 <_svfiprintf_r+0xfa>
 800e6ea:	9a07      	ldr	r2, [sp, #28]
 800e6ec:	4654      	mov	r4, sl
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	f04f 0c0a 	mov.w	ip, #10
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6fa:	3b30      	subs	r3, #48	@ 0x30
 800e6fc:	2b09      	cmp	r3, #9
 800e6fe:	d94b      	bls.n	800e798 <_svfiprintf_r+0x17c>
 800e700:	b1b0      	cbz	r0, 800e730 <_svfiprintf_r+0x114>
 800e702:	9207      	str	r2, [sp, #28]
 800e704:	e014      	b.n	800e730 <_svfiprintf_r+0x114>
 800e706:	eba0 0308 	sub.w	r3, r0, r8
 800e70a:	fa09 f303 	lsl.w	r3, r9, r3
 800e70e:	4313      	orrs	r3, r2
 800e710:	9304      	str	r3, [sp, #16]
 800e712:	46a2      	mov	sl, r4
 800e714:	e7d2      	b.n	800e6bc <_svfiprintf_r+0xa0>
 800e716:	9b03      	ldr	r3, [sp, #12]
 800e718:	1d19      	adds	r1, r3, #4
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	9103      	str	r1, [sp, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	bfbb      	ittet	lt
 800e722:	425b      	neglt	r3, r3
 800e724:	f042 0202 	orrlt.w	r2, r2, #2
 800e728:	9307      	strge	r3, [sp, #28]
 800e72a:	9307      	strlt	r3, [sp, #28]
 800e72c:	bfb8      	it	lt
 800e72e:	9204      	strlt	r2, [sp, #16]
 800e730:	7823      	ldrb	r3, [r4, #0]
 800e732:	2b2e      	cmp	r3, #46	@ 0x2e
 800e734:	d10a      	bne.n	800e74c <_svfiprintf_r+0x130>
 800e736:	7863      	ldrb	r3, [r4, #1]
 800e738:	2b2a      	cmp	r3, #42	@ 0x2a
 800e73a:	d132      	bne.n	800e7a2 <_svfiprintf_r+0x186>
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	1d1a      	adds	r2, r3, #4
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	9203      	str	r2, [sp, #12]
 800e744:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e748:	3402      	adds	r4, #2
 800e74a:	9305      	str	r3, [sp, #20]
 800e74c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e810 <_svfiprintf_r+0x1f4>
 800e750:	7821      	ldrb	r1, [r4, #0]
 800e752:	2203      	movs	r2, #3
 800e754:	4650      	mov	r0, sl
 800e756:	f7f1 fd43 	bl	80001e0 <memchr>
 800e75a:	b138      	cbz	r0, 800e76c <_svfiprintf_r+0x150>
 800e75c:	9b04      	ldr	r3, [sp, #16]
 800e75e:	eba0 000a 	sub.w	r0, r0, sl
 800e762:	2240      	movs	r2, #64	@ 0x40
 800e764:	4082      	lsls	r2, r0
 800e766:	4313      	orrs	r3, r2
 800e768:	3401      	adds	r4, #1
 800e76a:	9304      	str	r3, [sp, #16]
 800e76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e770:	4824      	ldr	r0, [pc, #144]	@ (800e804 <_svfiprintf_r+0x1e8>)
 800e772:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e776:	2206      	movs	r2, #6
 800e778:	f7f1 fd32 	bl	80001e0 <memchr>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	d036      	beq.n	800e7ee <_svfiprintf_r+0x1d2>
 800e780:	4b21      	ldr	r3, [pc, #132]	@ (800e808 <_svfiprintf_r+0x1ec>)
 800e782:	bb1b      	cbnz	r3, 800e7cc <_svfiprintf_r+0x1b0>
 800e784:	9b03      	ldr	r3, [sp, #12]
 800e786:	3307      	adds	r3, #7
 800e788:	f023 0307 	bic.w	r3, r3, #7
 800e78c:	3308      	adds	r3, #8
 800e78e:	9303      	str	r3, [sp, #12]
 800e790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e792:	4433      	add	r3, r6
 800e794:	9309      	str	r3, [sp, #36]	@ 0x24
 800e796:	e76a      	b.n	800e66e <_svfiprintf_r+0x52>
 800e798:	fb0c 3202 	mla	r2, ip, r2, r3
 800e79c:	460c      	mov	r4, r1
 800e79e:	2001      	movs	r0, #1
 800e7a0:	e7a8      	b.n	800e6f4 <_svfiprintf_r+0xd8>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	3401      	adds	r4, #1
 800e7a6:	9305      	str	r3, [sp, #20]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	f04f 0c0a 	mov.w	ip, #10
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7b4:	3a30      	subs	r2, #48	@ 0x30
 800e7b6:	2a09      	cmp	r2, #9
 800e7b8:	d903      	bls.n	800e7c2 <_svfiprintf_r+0x1a6>
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d0c6      	beq.n	800e74c <_svfiprintf_r+0x130>
 800e7be:	9105      	str	r1, [sp, #20]
 800e7c0:	e7c4      	b.n	800e74c <_svfiprintf_r+0x130>
 800e7c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e7f0      	b.n	800e7ae <_svfiprintf_r+0x192>
 800e7cc:	ab03      	add	r3, sp, #12
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	462a      	mov	r2, r5
 800e7d2:	4b0e      	ldr	r3, [pc, #56]	@ (800e80c <_svfiprintf_r+0x1f0>)
 800e7d4:	a904      	add	r1, sp, #16
 800e7d6:	4638      	mov	r0, r7
 800e7d8:	f3af 8000 	nop.w
 800e7dc:	1c42      	adds	r2, r0, #1
 800e7de:	4606      	mov	r6, r0
 800e7e0:	d1d6      	bne.n	800e790 <_svfiprintf_r+0x174>
 800e7e2:	89ab      	ldrh	r3, [r5, #12]
 800e7e4:	065b      	lsls	r3, r3, #25
 800e7e6:	f53f af2d 	bmi.w	800e644 <_svfiprintf_r+0x28>
 800e7ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7ec:	e72c      	b.n	800e648 <_svfiprintf_r+0x2c>
 800e7ee:	ab03      	add	r3, sp, #12
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	462a      	mov	r2, r5
 800e7f4:	4b05      	ldr	r3, [pc, #20]	@ (800e80c <_svfiprintf_r+0x1f0>)
 800e7f6:	a904      	add	r1, sp, #16
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	f000 f879 	bl	800e8f0 <_printf_i>
 800e7fe:	e7ed      	b.n	800e7dc <_svfiprintf_r+0x1c0>
 800e800:	0800f274 	.word	0x0800f274
 800e804:	0800f27e 	.word	0x0800f27e
 800e808:	00000000 	.word	0x00000000
 800e80c:	0800e565 	.word	0x0800e565
 800e810:	0800f27a 	.word	0x0800f27a

0800e814 <_printf_common>:
 800e814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e818:	4616      	mov	r6, r2
 800e81a:	4698      	mov	r8, r3
 800e81c:	688a      	ldr	r2, [r1, #8]
 800e81e:	690b      	ldr	r3, [r1, #16]
 800e820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e824:	4293      	cmp	r3, r2
 800e826:	bfb8      	it	lt
 800e828:	4613      	movlt	r3, r2
 800e82a:	6033      	str	r3, [r6, #0]
 800e82c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e830:	4607      	mov	r7, r0
 800e832:	460c      	mov	r4, r1
 800e834:	b10a      	cbz	r2, 800e83a <_printf_common+0x26>
 800e836:	3301      	adds	r3, #1
 800e838:	6033      	str	r3, [r6, #0]
 800e83a:	6823      	ldr	r3, [r4, #0]
 800e83c:	0699      	lsls	r1, r3, #26
 800e83e:	bf42      	ittt	mi
 800e840:	6833      	ldrmi	r3, [r6, #0]
 800e842:	3302      	addmi	r3, #2
 800e844:	6033      	strmi	r3, [r6, #0]
 800e846:	6825      	ldr	r5, [r4, #0]
 800e848:	f015 0506 	ands.w	r5, r5, #6
 800e84c:	d106      	bne.n	800e85c <_printf_common+0x48>
 800e84e:	f104 0a19 	add.w	sl, r4, #25
 800e852:	68e3      	ldr	r3, [r4, #12]
 800e854:	6832      	ldr	r2, [r6, #0]
 800e856:	1a9b      	subs	r3, r3, r2
 800e858:	42ab      	cmp	r3, r5
 800e85a:	dc26      	bgt.n	800e8aa <_printf_common+0x96>
 800e85c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e860:	6822      	ldr	r2, [r4, #0]
 800e862:	3b00      	subs	r3, #0
 800e864:	bf18      	it	ne
 800e866:	2301      	movne	r3, #1
 800e868:	0692      	lsls	r2, r2, #26
 800e86a:	d42b      	bmi.n	800e8c4 <_printf_common+0xb0>
 800e86c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e870:	4641      	mov	r1, r8
 800e872:	4638      	mov	r0, r7
 800e874:	47c8      	blx	r9
 800e876:	3001      	adds	r0, #1
 800e878:	d01e      	beq.n	800e8b8 <_printf_common+0xa4>
 800e87a:	6823      	ldr	r3, [r4, #0]
 800e87c:	6922      	ldr	r2, [r4, #16]
 800e87e:	f003 0306 	and.w	r3, r3, #6
 800e882:	2b04      	cmp	r3, #4
 800e884:	bf02      	ittt	eq
 800e886:	68e5      	ldreq	r5, [r4, #12]
 800e888:	6833      	ldreq	r3, [r6, #0]
 800e88a:	1aed      	subeq	r5, r5, r3
 800e88c:	68a3      	ldr	r3, [r4, #8]
 800e88e:	bf0c      	ite	eq
 800e890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e894:	2500      	movne	r5, #0
 800e896:	4293      	cmp	r3, r2
 800e898:	bfc4      	itt	gt
 800e89a:	1a9b      	subgt	r3, r3, r2
 800e89c:	18ed      	addgt	r5, r5, r3
 800e89e:	2600      	movs	r6, #0
 800e8a0:	341a      	adds	r4, #26
 800e8a2:	42b5      	cmp	r5, r6
 800e8a4:	d11a      	bne.n	800e8dc <_printf_common+0xc8>
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	e008      	b.n	800e8bc <_printf_common+0xa8>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	4652      	mov	r2, sl
 800e8ae:	4641      	mov	r1, r8
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	47c8      	blx	r9
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	d103      	bne.n	800e8c0 <_printf_common+0xac>
 800e8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8c0:	3501      	adds	r5, #1
 800e8c2:	e7c6      	b.n	800e852 <_printf_common+0x3e>
 800e8c4:	18e1      	adds	r1, r4, r3
 800e8c6:	1c5a      	adds	r2, r3, #1
 800e8c8:	2030      	movs	r0, #48	@ 0x30
 800e8ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e8ce:	4422      	add	r2, r4
 800e8d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e8d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e8d8:	3302      	adds	r3, #2
 800e8da:	e7c7      	b.n	800e86c <_printf_common+0x58>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	4622      	mov	r2, r4
 800e8e0:	4641      	mov	r1, r8
 800e8e2:	4638      	mov	r0, r7
 800e8e4:	47c8      	blx	r9
 800e8e6:	3001      	adds	r0, #1
 800e8e8:	d0e6      	beq.n	800e8b8 <_printf_common+0xa4>
 800e8ea:	3601      	adds	r6, #1
 800e8ec:	e7d9      	b.n	800e8a2 <_printf_common+0x8e>
	...

0800e8f0 <_printf_i>:
 800e8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f4:	7e0f      	ldrb	r7, [r1, #24]
 800e8f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e8f8:	2f78      	cmp	r7, #120	@ 0x78
 800e8fa:	4691      	mov	r9, r2
 800e8fc:	4680      	mov	r8, r0
 800e8fe:	460c      	mov	r4, r1
 800e900:	469a      	mov	sl, r3
 800e902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e906:	d807      	bhi.n	800e918 <_printf_i+0x28>
 800e908:	2f62      	cmp	r7, #98	@ 0x62
 800e90a:	d80a      	bhi.n	800e922 <_printf_i+0x32>
 800e90c:	2f00      	cmp	r7, #0
 800e90e:	f000 80d1 	beq.w	800eab4 <_printf_i+0x1c4>
 800e912:	2f58      	cmp	r7, #88	@ 0x58
 800e914:	f000 80b8 	beq.w	800ea88 <_printf_i+0x198>
 800e918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e91c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e920:	e03a      	b.n	800e998 <_printf_i+0xa8>
 800e922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e926:	2b15      	cmp	r3, #21
 800e928:	d8f6      	bhi.n	800e918 <_printf_i+0x28>
 800e92a:	a101      	add	r1, pc, #4	@ (adr r1, 800e930 <_printf_i+0x40>)
 800e92c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e930:	0800e989 	.word	0x0800e989
 800e934:	0800e99d 	.word	0x0800e99d
 800e938:	0800e919 	.word	0x0800e919
 800e93c:	0800e919 	.word	0x0800e919
 800e940:	0800e919 	.word	0x0800e919
 800e944:	0800e919 	.word	0x0800e919
 800e948:	0800e99d 	.word	0x0800e99d
 800e94c:	0800e919 	.word	0x0800e919
 800e950:	0800e919 	.word	0x0800e919
 800e954:	0800e919 	.word	0x0800e919
 800e958:	0800e919 	.word	0x0800e919
 800e95c:	0800ea9b 	.word	0x0800ea9b
 800e960:	0800e9c7 	.word	0x0800e9c7
 800e964:	0800ea55 	.word	0x0800ea55
 800e968:	0800e919 	.word	0x0800e919
 800e96c:	0800e919 	.word	0x0800e919
 800e970:	0800eabd 	.word	0x0800eabd
 800e974:	0800e919 	.word	0x0800e919
 800e978:	0800e9c7 	.word	0x0800e9c7
 800e97c:	0800e919 	.word	0x0800e919
 800e980:	0800e919 	.word	0x0800e919
 800e984:	0800ea5d 	.word	0x0800ea5d
 800e988:	6833      	ldr	r3, [r6, #0]
 800e98a:	1d1a      	adds	r2, r3, #4
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6032      	str	r2, [r6, #0]
 800e990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e998:	2301      	movs	r3, #1
 800e99a:	e09c      	b.n	800ead6 <_printf_i+0x1e6>
 800e99c:	6833      	ldr	r3, [r6, #0]
 800e99e:	6820      	ldr	r0, [r4, #0]
 800e9a0:	1d19      	adds	r1, r3, #4
 800e9a2:	6031      	str	r1, [r6, #0]
 800e9a4:	0606      	lsls	r6, r0, #24
 800e9a6:	d501      	bpl.n	800e9ac <_printf_i+0xbc>
 800e9a8:	681d      	ldr	r5, [r3, #0]
 800e9aa:	e003      	b.n	800e9b4 <_printf_i+0xc4>
 800e9ac:	0645      	lsls	r5, r0, #25
 800e9ae:	d5fb      	bpl.n	800e9a8 <_printf_i+0xb8>
 800e9b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e9b4:	2d00      	cmp	r5, #0
 800e9b6:	da03      	bge.n	800e9c0 <_printf_i+0xd0>
 800e9b8:	232d      	movs	r3, #45	@ 0x2d
 800e9ba:	426d      	negs	r5, r5
 800e9bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9c0:	4858      	ldr	r0, [pc, #352]	@ (800eb24 <_printf_i+0x234>)
 800e9c2:	230a      	movs	r3, #10
 800e9c4:	e011      	b.n	800e9ea <_printf_i+0xfa>
 800e9c6:	6821      	ldr	r1, [r4, #0]
 800e9c8:	6833      	ldr	r3, [r6, #0]
 800e9ca:	0608      	lsls	r0, r1, #24
 800e9cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800e9d0:	d402      	bmi.n	800e9d8 <_printf_i+0xe8>
 800e9d2:	0649      	lsls	r1, r1, #25
 800e9d4:	bf48      	it	mi
 800e9d6:	b2ad      	uxthmi	r5, r5
 800e9d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e9da:	4852      	ldr	r0, [pc, #328]	@ (800eb24 <_printf_i+0x234>)
 800e9dc:	6033      	str	r3, [r6, #0]
 800e9de:	bf14      	ite	ne
 800e9e0:	230a      	movne	r3, #10
 800e9e2:	2308      	moveq	r3, #8
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e9ea:	6866      	ldr	r6, [r4, #4]
 800e9ec:	60a6      	str	r6, [r4, #8]
 800e9ee:	2e00      	cmp	r6, #0
 800e9f0:	db05      	blt.n	800e9fe <_printf_i+0x10e>
 800e9f2:	6821      	ldr	r1, [r4, #0]
 800e9f4:	432e      	orrs	r6, r5
 800e9f6:	f021 0104 	bic.w	r1, r1, #4
 800e9fa:	6021      	str	r1, [r4, #0]
 800e9fc:	d04b      	beq.n	800ea96 <_printf_i+0x1a6>
 800e9fe:	4616      	mov	r6, r2
 800ea00:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea04:	fb03 5711 	mls	r7, r3, r1, r5
 800ea08:	5dc7      	ldrb	r7, [r0, r7]
 800ea0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea0e:	462f      	mov	r7, r5
 800ea10:	42bb      	cmp	r3, r7
 800ea12:	460d      	mov	r5, r1
 800ea14:	d9f4      	bls.n	800ea00 <_printf_i+0x110>
 800ea16:	2b08      	cmp	r3, #8
 800ea18:	d10b      	bne.n	800ea32 <_printf_i+0x142>
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	07df      	lsls	r7, r3, #31
 800ea1e:	d508      	bpl.n	800ea32 <_printf_i+0x142>
 800ea20:	6923      	ldr	r3, [r4, #16]
 800ea22:	6861      	ldr	r1, [r4, #4]
 800ea24:	4299      	cmp	r1, r3
 800ea26:	bfde      	ittt	le
 800ea28:	2330      	movle	r3, #48	@ 0x30
 800ea2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea32:	1b92      	subs	r2, r2, r6
 800ea34:	6122      	str	r2, [r4, #16]
 800ea36:	f8cd a000 	str.w	sl, [sp]
 800ea3a:	464b      	mov	r3, r9
 800ea3c:	aa03      	add	r2, sp, #12
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4640      	mov	r0, r8
 800ea42:	f7ff fee7 	bl	800e814 <_printf_common>
 800ea46:	3001      	adds	r0, #1
 800ea48:	d14a      	bne.n	800eae0 <_printf_i+0x1f0>
 800ea4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea4e:	b004      	add	sp, #16
 800ea50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea54:	6823      	ldr	r3, [r4, #0]
 800ea56:	f043 0320 	orr.w	r3, r3, #32
 800ea5a:	6023      	str	r3, [r4, #0]
 800ea5c:	4832      	ldr	r0, [pc, #200]	@ (800eb28 <_printf_i+0x238>)
 800ea5e:	2778      	movs	r7, #120	@ 0x78
 800ea60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	6831      	ldr	r1, [r6, #0]
 800ea68:	061f      	lsls	r7, r3, #24
 800ea6a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea6e:	d402      	bmi.n	800ea76 <_printf_i+0x186>
 800ea70:	065f      	lsls	r7, r3, #25
 800ea72:	bf48      	it	mi
 800ea74:	b2ad      	uxthmi	r5, r5
 800ea76:	6031      	str	r1, [r6, #0]
 800ea78:	07d9      	lsls	r1, r3, #31
 800ea7a:	bf44      	itt	mi
 800ea7c:	f043 0320 	orrmi.w	r3, r3, #32
 800ea80:	6023      	strmi	r3, [r4, #0]
 800ea82:	b11d      	cbz	r5, 800ea8c <_printf_i+0x19c>
 800ea84:	2310      	movs	r3, #16
 800ea86:	e7ad      	b.n	800e9e4 <_printf_i+0xf4>
 800ea88:	4826      	ldr	r0, [pc, #152]	@ (800eb24 <_printf_i+0x234>)
 800ea8a:	e7e9      	b.n	800ea60 <_printf_i+0x170>
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	f023 0320 	bic.w	r3, r3, #32
 800ea92:	6023      	str	r3, [r4, #0]
 800ea94:	e7f6      	b.n	800ea84 <_printf_i+0x194>
 800ea96:	4616      	mov	r6, r2
 800ea98:	e7bd      	b.n	800ea16 <_printf_i+0x126>
 800ea9a:	6833      	ldr	r3, [r6, #0]
 800ea9c:	6825      	ldr	r5, [r4, #0]
 800ea9e:	6961      	ldr	r1, [r4, #20]
 800eaa0:	1d18      	adds	r0, r3, #4
 800eaa2:	6030      	str	r0, [r6, #0]
 800eaa4:	062e      	lsls	r6, r5, #24
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	d501      	bpl.n	800eaae <_printf_i+0x1be>
 800eaaa:	6019      	str	r1, [r3, #0]
 800eaac:	e002      	b.n	800eab4 <_printf_i+0x1c4>
 800eaae:	0668      	lsls	r0, r5, #25
 800eab0:	d5fb      	bpl.n	800eaaa <_printf_i+0x1ba>
 800eab2:	8019      	strh	r1, [r3, #0]
 800eab4:	2300      	movs	r3, #0
 800eab6:	6123      	str	r3, [r4, #16]
 800eab8:	4616      	mov	r6, r2
 800eaba:	e7bc      	b.n	800ea36 <_printf_i+0x146>
 800eabc:	6833      	ldr	r3, [r6, #0]
 800eabe:	1d1a      	adds	r2, r3, #4
 800eac0:	6032      	str	r2, [r6, #0]
 800eac2:	681e      	ldr	r6, [r3, #0]
 800eac4:	6862      	ldr	r2, [r4, #4]
 800eac6:	2100      	movs	r1, #0
 800eac8:	4630      	mov	r0, r6
 800eaca:	f7f1 fb89 	bl	80001e0 <memchr>
 800eace:	b108      	cbz	r0, 800ead4 <_printf_i+0x1e4>
 800ead0:	1b80      	subs	r0, r0, r6
 800ead2:	6060      	str	r0, [r4, #4]
 800ead4:	6863      	ldr	r3, [r4, #4]
 800ead6:	6123      	str	r3, [r4, #16]
 800ead8:	2300      	movs	r3, #0
 800eada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eade:	e7aa      	b.n	800ea36 <_printf_i+0x146>
 800eae0:	6923      	ldr	r3, [r4, #16]
 800eae2:	4632      	mov	r2, r6
 800eae4:	4649      	mov	r1, r9
 800eae6:	4640      	mov	r0, r8
 800eae8:	47d0      	blx	sl
 800eaea:	3001      	adds	r0, #1
 800eaec:	d0ad      	beq.n	800ea4a <_printf_i+0x15a>
 800eaee:	6823      	ldr	r3, [r4, #0]
 800eaf0:	079b      	lsls	r3, r3, #30
 800eaf2:	d413      	bmi.n	800eb1c <_printf_i+0x22c>
 800eaf4:	68e0      	ldr	r0, [r4, #12]
 800eaf6:	9b03      	ldr	r3, [sp, #12]
 800eaf8:	4298      	cmp	r0, r3
 800eafa:	bfb8      	it	lt
 800eafc:	4618      	movlt	r0, r3
 800eafe:	e7a6      	b.n	800ea4e <_printf_i+0x15e>
 800eb00:	2301      	movs	r3, #1
 800eb02:	4632      	mov	r2, r6
 800eb04:	4649      	mov	r1, r9
 800eb06:	4640      	mov	r0, r8
 800eb08:	47d0      	blx	sl
 800eb0a:	3001      	adds	r0, #1
 800eb0c:	d09d      	beq.n	800ea4a <_printf_i+0x15a>
 800eb0e:	3501      	adds	r5, #1
 800eb10:	68e3      	ldr	r3, [r4, #12]
 800eb12:	9903      	ldr	r1, [sp, #12]
 800eb14:	1a5b      	subs	r3, r3, r1
 800eb16:	42ab      	cmp	r3, r5
 800eb18:	dcf2      	bgt.n	800eb00 <_printf_i+0x210>
 800eb1a:	e7eb      	b.n	800eaf4 <_printf_i+0x204>
 800eb1c:	2500      	movs	r5, #0
 800eb1e:	f104 0619 	add.w	r6, r4, #25
 800eb22:	e7f5      	b.n	800eb10 <_printf_i+0x220>
 800eb24:	0800f285 	.word	0x0800f285
 800eb28:	0800f296 	.word	0x0800f296

0800eb2c <_sbrk_r>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	4d06      	ldr	r5, [pc, #24]	@ (800eb48 <_sbrk_r+0x1c>)
 800eb30:	2300      	movs	r3, #0
 800eb32:	4604      	mov	r4, r0
 800eb34:	4608      	mov	r0, r1
 800eb36:	602b      	str	r3, [r5, #0]
 800eb38:	f7f3 ff14 	bl	8002964 <_sbrk>
 800eb3c:	1c43      	adds	r3, r0, #1
 800eb3e:	d102      	bne.n	800eb46 <_sbrk_r+0x1a>
 800eb40:	682b      	ldr	r3, [r5, #0]
 800eb42:	b103      	cbz	r3, 800eb46 <_sbrk_r+0x1a>
 800eb44:	6023      	str	r3, [r4, #0]
 800eb46:	bd38      	pop	{r3, r4, r5, pc}
 800eb48:	20001b64 	.word	0x20001b64

0800eb4c <_realloc_r>:
 800eb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb50:	4607      	mov	r7, r0
 800eb52:	4614      	mov	r4, r2
 800eb54:	460d      	mov	r5, r1
 800eb56:	b921      	cbnz	r1, 800eb62 <_realloc_r+0x16>
 800eb58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	f7ff bc75 	b.w	800e44c <_malloc_r>
 800eb62:	b92a      	cbnz	r2, 800eb70 <_realloc_r+0x24>
 800eb64:	f7ff fc06 	bl	800e374 <_free_r>
 800eb68:	4625      	mov	r5, r4
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb70:	f000 f81a 	bl	800eba8 <_malloc_usable_size_r>
 800eb74:	4284      	cmp	r4, r0
 800eb76:	4606      	mov	r6, r0
 800eb78:	d802      	bhi.n	800eb80 <_realloc_r+0x34>
 800eb7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb7e:	d8f4      	bhi.n	800eb6a <_realloc_r+0x1e>
 800eb80:	4621      	mov	r1, r4
 800eb82:	4638      	mov	r0, r7
 800eb84:	f7ff fc62 	bl	800e44c <_malloc_r>
 800eb88:	4680      	mov	r8, r0
 800eb8a:	b908      	cbnz	r0, 800eb90 <_realloc_r+0x44>
 800eb8c:	4645      	mov	r5, r8
 800eb8e:	e7ec      	b.n	800eb6a <_realloc_r+0x1e>
 800eb90:	42b4      	cmp	r4, r6
 800eb92:	4622      	mov	r2, r4
 800eb94:	4629      	mov	r1, r5
 800eb96:	bf28      	it	cs
 800eb98:	4632      	movcs	r2, r6
 800eb9a:	f7ff fbdd 	bl	800e358 <memcpy>
 800eb9e:	4629      	mov	r1, r5
 800eba0:	4638      	mov	r0, r7
 800eba2:	f7ff fbe7 	bl	800e374 <_free_r>
 800eba6:	e7f1      	b.n	800eb8c <_realloc_r+0x40>

0800eba8 <_malloc_usable_size_r>:
 800eba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebac:	1f18      	subs	r0, r3, #4
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	bfbc      	itt	lt
 800ebb2:	580b      	ldrlt	r3, [r1, r0]
 800ebb4:	18c0      	addlt	r0, r0, r3
 800ebb6:	4770      	bx	lr

0800ebb8 <_init>:
 800ebb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebba:	bf00      	nop
 800ebbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebbe:	bc08      	pop	{r3}
 800ebc0:	469e      	mov	lr, r3
 800ebc2:	4770      	bx	lr

0800ebc4 <_fini>:
 800ebc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc6:	bf00      	nop
 800ebc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebca:	bc08      	pop	{r3}
 800ebcc:	469e      	mov	lr, r3
 800ebce:	4770      	bx	lr
