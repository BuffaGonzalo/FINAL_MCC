
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  0800e788  0800e788  0000f788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f260  0800f260  00011180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f260  0800f260  00010260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f268  0800f268  00011180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f268  0800f268  00010268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f26c  0800f26c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0800f270  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019dc  20000180  0800f3f0  00011180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b5c  0800f3f0  00011b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac62  00000000  00000000  000111b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043b8  00000000  00000000  0002be12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  000301d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001bdfd  00000000  00000000  000319e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001fc0b  00000000  00000000  0004d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009ff1a  00000000  00000000  0006d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010d30a  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001281  00000000  00000000  0010d34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b60  00000000  00000000  0010e5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00115130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e770 	.word	0x0800e770

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800e770 	.word	0x0800e770

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e00a      	b.n	8000dbc <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	ddf1      	ble.n	8000da6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200003a4 	.word	0x200003a4
 8000dd4:	200003b4 	.word	0x200003b4

08000dd8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    ssd1306_TxCplt = 1;
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200005e1 	.word	0x200005e1

08000df8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200005e2 	.word	0x200005e2

08000e18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d116      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e34:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b28      	cmp	r3, #40	@ 0x28
 8000e3c:	d107      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000e44:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e46:	7813      	ldrb	r3, [r2, #0]
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4906      	ldr	r1, [pc, #24]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e54:	f002 f9a6 	bl	80031a4 <HAL_ADC_Start_DMA>
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40010000 	.word	0x40010000
 8000e64:	200003a0 	.word	0x200003a0
 8000e68:	200005e0 	.word	0x200005e0
 8000e6c:	200003a4 	.word	0x200003a4
 8000e70:	2000019c 	.word	0x2000019c

08000e74 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e018      	b.n	8000eb6 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	441a      	add	r2, r3
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <USBRxData+0x58>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <USBRxData+0x58>)
 8000e90:	795b      	ldrb	r3, [r3, #5]
 8000e92:	1c58      	adds	r0, r3, #1
 8000e94:	b2c4      	uxtb	r4, r0
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <USBRxData+0x58>)
 8000e98:	7144      	strb	r4, [r0, #5]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <USBRxData+0x58>)
 8000ea2:	795a      	ldrb	r2, [r3, #5]
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <USBRxData+0x58>)
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <USBRxData+0x58>)
 8000eae:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8e2      	bhi.n	8000e84 <USBRxData+0x10>
	}

}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc90      	pop	{r4, r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200003d0 	.word	0x200003d0

08000ed0 <USBTask>:

void USBTask() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0c2      	sub	sp, #264	@ 0x108
 8000ed4:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000ed6:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <USBTask+0x90>)
 8000ed8:	791a      	ldrb	r2, [r3, #4]
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <USBTask+0x90>)
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d039      	beq.n	8000f56 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000ee2:	481f      	ldr	r0, [pc, #124]	@ (8000f60 <USBTask+0x90>)
 8000ee4:	f001 fe14 	bl	8002b10 <unerPrtcl_DecodeHeader>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000eee:	491d      	ldr	r1, [pc, #116]	@ (8000f64 <USBTask+0x94>)
 8000ef0:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <USBTask+0x90>)
 8000ef2:	f000 f839 	bl	8000f68 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000efc:	e01d      	b.n	8000f3a <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <USBTask+0x94>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <USBTask+0x94>)
 8000f04:	7a1b      	ldrb	r3, [r3, #8]
 8000f06:	1c59      	adds	r1, r3, #1
 8000f08:	b2c8      	uxtb	r0, r1
 8000f0a:	4916      	ldr	r1, [pc, #88]	@ (8000f64 <USBTask+0x94>)
 8000f0c:	7208      	strb	r0, [r1, #8]
 8000f0e:	441a      	add	r2, r3
 8000f10:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f14:	7811      	ldrb	r1, [r2, #0]
 8000f16:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000f1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000f1e:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <USBTask+0x94>)
 8000f22:	7a1a      	ldrb	r2, [r3, #8]
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <USBTask+0x94>)
 8000f26:	799b      	ldrb	r3, [r3, #6]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <USBTask+0x94>)
 8000f2e:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000f30:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <USBTask+0x94>)
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3db      	bcc.n	8000efe <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <USBTask+0x94>)
 8000f48:	79db      	ldrb	r3, [r3, #7]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00c faf7 	bl	800d544 <CDC_Transmit_FS>
	}

}
 8000f56:	bf00      	nop
 8000f58:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200003d0 	.word	0x200003d0
 8000f64:	200003c4 	.word	0x200003c4

08000f68 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	7a12      	ldrb	r2, [r2, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2bf2      	cmp	r3, #242	@ 0xf2
 8000f80:	d027      	beq.n	8000fd2 <decodeCommand+0x6a>
 8000f82:	2bf2      	cmp	r3, #242	@ 0xf2
 8000f84:	f300 809d 	bgt.w	80010c2 <decodeCommand+0x15a>
 8000f88:	2bf0      	cmp	r3, #240	@ 0xf0
 8000f8a:	d002      	beq.n	8000f92 <decodeCommand+0x2a>
 8000f8c:	2bf1      	cmp	r3, #241	@ 0xf1
 8000f8e:	d010      	beq.n	8000fb2 <decodeCommand+0x4a>
 8000f90:	e097      	b.n	80010c2 <decodeCommand+0x15a>
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000f92:	2202      	movs	r2, #2
 8000f94:	21f0      	movs	r1, #240	@ 0xf0
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f001 fc98 	bl	80028cc <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000f9c:	210d      	movs	r1, #13
 8000f9e:	6838      	ldr	r0, [r7, #0]
 8000fa0:	f001 fd43 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	7a5b      	ldrb	r3, [r3, #9]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f001 fd3d 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		break;
 8000fb0:	e09d      	b.n	80010ee <decodeCommand+0x186>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000fb2:	220d      	movs	r2, #13
 8000fb4:	21f1      	movs	r1, #241	@ 0xf1
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f001 fc88 	bl	80028cc <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000fbc:	494e      	ldr	r1, [pc, #312]	@ (80010f8 <decodeCommand+0x190>)
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f001 fd61 	bl	8002a86 <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	7a5b      	ldrb	r3, [r3, #9]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f001 fd2d 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		break;
 8000fd0:	e08d      	b.n	80010ee <decodeCommand+0x186>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000fd2:	220d      	movs	r2, #13
 8000fd4:	21f2      	movs	r1, #242	@ 0xf2
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f001 fc78 	bl	80028cc <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = ax_real;
 8000fdc:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <decodeCommand+0x194>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b46      	ldr	r3, [pc, #280]	@ (8001100 <decodeCommand+0x198>)
 8000fe6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fe8:	4b45      	ldr	r3, [pc, #276]	@ (8001100 <decodeCommand+0x198>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f001 fd1b 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000ff4:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <decodeCommand+0x198>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f001 fd15 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = ay_real;
 8001000:	4b40      	ldr	r3, [pc, #256]	@ (8001104 <decodeCommand+0x19c>)
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b3d      	ldr	r3, [pc, #244]	@ (8001100 <decodeCommand+0x198>)
 800100a:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800100c:	4b3c      	ldr	r3, [pc, #240]	@ (8001100 <decodeCommand+0x198>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f001 fd09 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001018:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <decodeCommand+0x198>)
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	4619      	mov	r1, r3
 800101e:	6838      	ldr	r0, [r7, #0]
 8001020:	f001 fd03 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = az_real;
 8001024:	4b38      	ldr	r3, [pc, #224]	@ (8001108 <decodeCommand+0x1a0>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <decodeCommand+0x198>)
 800102e:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001030:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <decodeCommand+0x198>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f001 fcf7 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800103c:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <decodeCommand+0x198>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	4619      	mov	r1, r3
 8001042:	6838      	ldr	r0, [r7, #0]
 8001044:	f001 fcf1 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gx_real;
 8001048:	4b30      	ldr	r3, [pc, #192]	@ (800110c <decodeCommand+0x1a4>)
 800104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <decodeCommand+0x198>)
 8001052:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <decodeCommand+0x198>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f001 fce5 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <decodeCommand+0x198>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	4619      	mov	r1, r3
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f001 fcdf 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gy_real;
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <decodeCommand+0x1a8>)
 800106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <decodeCommand+0x198>)
 8001076:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <decodeCommand+0x198>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f001 fcd3 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <decodeCommand+0x198>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	4619      	mov	r1, r3
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f001 fccd 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gz_real;
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <decodeCommand+0x1ac>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <decodeCommand+0x198>)
 800109a:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <decodeCommand+0x198>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f001 fcc1 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <decodeCommand+0x198>)
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	4619      	mov	r1, r3
 80010ae:	6838      	ldr	r0, [r7, #0]
 80010b0:	f001 fcbb 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	7a5b      	ldrb	r3, [r3, #9]
 80010b8:	4619      	mov	r1, r3
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f001 fcb5 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		break;
 80010c0:	e015      	b.n	80010ee <decodeCommand+0x186>
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	7a12      	ldrb	r2, [r2, #8]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4619      	mov	r1, r3
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	f001 fbfa 	bl	80028cc <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 80010d8:	21ff      	movs	r1, #255	@ 0xff
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f001 fca5 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7a5b      	ldrb	r3, [r3, #9]
 80010e4:	4619      	mov	r1, r3
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f001 fc9f 	bl	8002a2a <unerPrtcl_PutByteOnTx>
		break;
 80010ec:	bf00      	nop
	}
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	0800f1fc 	.word	0x0800f1fc
 80010fc:	200005e4 	.word	0x200005e4
 8001100:	200005dc 	.word	0x200005dc
 8001104:	200005e6 	.word	0x200005e6
 8001108:	200005e8 	.word	0x200005e8
 800110c:	200005ea 	.word	0x200005ea
 8001110:	200005ec 	.word	0x200005ec
 8001114:	200005ee 	.word	0x200005ee

08001118 <do10ms>:

void do10ms() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	if (IS10MS) {
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <do10ms+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02a      	beq.n	8001180 <do10ms+0x68>
		IS10MS = FALSE;
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <do10ms+0x6c>)
 800112c:	7813      	ldrb	r3, [r2, #0]
 800112e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001132:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <do10ms+0x70>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <do10ms+0x70>)
 800113e:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <do10ms+0x74>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <do10ms+0x74>)
 800114a:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <do10ms+0x74>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <do10ms+0x4c>
			tmo20ms = 2;
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <do10ms+0x74>)
 8001156:	2202      	movs	r2, #2
 8001158:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <do10ms+0x6c>)
 800115c:	7813      	ldrb	r3, [r2, #0]
 800115e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001162:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <do10ms+0x70>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d109      	bne.n	8001180 <do10ms+0x68>
			tmo100ms = 10;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <do10ms+0x70>)
 800116e:	220a      	movs	r2, #10
 8001170:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 8001172:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <do10ms+0x6c>)
 8001174:	7813      	ldrb	r3, [r2, #0]
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800117c:	f000 f808 	bl	8001190 <heartBeatTask>
		}
	}
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200005e0 	.word	0x200005e0
 8001188:	20000028 	.word	0x20000028
 800118c:	20000029 	.word	0x20000029

08001190 <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <heartBeatTask+0x44>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	43db      	mvns	r3, r3
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <heartBeatTask+0x48>)
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	4611      	mov	r1, r2
 80011a0:	2201      	movs	r2, #1
 80011a2:	408a      	lsls	r2, r1
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80011aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ae:	480b      	ldr	r0, [pc, #44]	@ (80011dc <heartBeatTask+0x4c>)
 80011b0:	f003 fa1f 	bl	80045f2 <HAL_GPIO_TogglePin>

	times++;
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <heartBeatTask+0x48>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <heartBeatTask+0x48>)
 80011be:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <heartBeatTask+0x48>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <heartBeatTask+0x48>)
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000000 	.word	0x20000000
 80011d8:	200005f0 	.word	0x200005f0
 80011dc:	40020800 	.word	0x40020800

080011e0 <displayData>:

void displayData() {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
	static uint8_t init = TRUE;
	uint8_t y = 0, x = 2;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	2302      	movs	r3, #2
 80011ec:	73bb      	strb	r3, [r7, #14]
	if (IS100MS) {
 80011ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001358 <displayData+0x178>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a9 	beq.w	8001350 <displayData+0x170>
		IS100MS=FALSE;
 80011fe:	4a56      	ldr	r2, [pc, #344]	@ (8001358 <displayData+0x178>)
 8001200:	7813      	ldrb	r3, [r2, #0]
 8001202:	f023 0320 	bic.w	r3, r3, #32
 8001206:	7013      	strb	r3, [r2, #0]
		if (init) {
 8001208:	4b54      	ldr	r3, [pc, #336]	@ (800135c <displayData+0x17c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d010      	beq.n	8001232 <displayData+0x52>
			init = FALSE;
 8001210:	4b52      	ldr	r3, [pc, #328]	@ (800135c <displayData+0x17c>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
			ssd1306_Fill(Black);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 fe82 	bl	8001f20 <ssd1306_Fill>
			ssd1306_DrawBitmap(0, 0, chat_gpt_128x64, 128, 64, White);
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2340      	movs	r3, #64	@ 0x40
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	4a4e      	ldr	r2, [pc, #312]	@ (8001360 <displayData+0x180>)
 8001228:	2100      	movs	r1, #0
 800122a:	2000      	movs	r0, #0
 800122c:	f001 f83a 	bl	80022a4 <ssd1306_DrawBitmap>
			ssd1306_SetCursor(x, y);
			snprintf(data, sizeof(data), "gz:%u", gz_real);
			ssd1306_WriteString(data, Font_6x8, Black);
		}
	}
}
 8001230:	e08e      	b.n	8001350 <displayData+0x170>
			ssd1306_SetCursor(x, y);
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f001 f81b 	bl	8002274 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "ax:%u", ax_real);
 800123e:	4b49      	ldr	r3, [pc, #292]	@ (8001364 <displayData+0x184>)
 8001240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001244:	1d38      	adds	r0, r7, #4
 8001246:	4a48      	ldr	r2, [pc, #288]	@ (8001368 <displayData+0x188>)
 8001248:	2108      	movs	r1, #8
 800124a:	f00c fddd 	bl	800de08 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <displayData+0x18c>)
 8001250:	1d38      	adds	r0, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	9200      	str	r2, [sp, #0]
 8001256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001258:	f000 ffe6 	bl	8002228 <ssd1306_WriteString>
			x += 48;
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	3330      	adds	r3, #48	@ 0x30
 8001260:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	7bbb      	ldrb	r3, [r7, #14]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f001 f803 	bl	8002274 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gx:%u", gx_real);
 800126e:	4b40      	ldr	r3, [pc, #256]	@ (8001370 <displayData+0x190>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	1d38      	adds	r0, r7, #4
 8001276:	4a3f      	ldr	r2, [pc, #252]	@ (8001374 <displayData+0x194>)
 8001278:	2108      	movs	r1, #8
 800127a:	f00c fdc5 	bl	800de08 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <displayData+0x18c>)
 8001280:	1d38      	adds	r0, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	9200      	str	r2, [sp, #0]
 8001286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001288:	f000 ffce 	bl	8002228 <ssd1306_WriteString>
			x = 2;
 800128c:	2302      	movs	r3, #2
 800128e:	73bb      	strb	r3, [r7, #14]
			y += 8;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	3308      	adds	r3, #8
 8001294:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(2, y);
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4619      	mov	r1, r3
 800129a:	2002      	movs	r0, #2
 800129c:	f000 ffea 	bl	8002274 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "ay:%u", ay_real);
 80012a0:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <displayData+0x198>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	1d38      	adds	r0, r7, #4
 80012a8:	4a34      	ldr	r2, [pc, #208]	@ (800137c <displayData+0x19c>)
 80012aa:	2108      	movs	r1, #8
 80012ac:	f00c fdac 	bl	800de08 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 80012b0:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <displayData+0x18c>)
 80012b2:	1d38      	adds	r0, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ba:	f000 ffb5 	bl	8002228 <ssd1306_WriteString>
			x += 48;
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	3330      	adds	r3, #48	@ 0x30
 80012c2:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 ffd2 	bl	8002274 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gy:%u", gy_real);
 80012d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <displayData+0x1a0>)
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	1d38      	adds	r0, r7, #4
 80012d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001384 <displayData+0x1a4>)
 80012da:	2108      	movs	r1, #8
 80012dc:	f00c fd94 	bl	800de08 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 80012e0:	4b22      	ldr	r3, [pc, #136]	@ (800136c <displayData+0x18c>)
 80012e2:	1d38      	adds	r0, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ea:	f000 ff9d 	bl	8002228 <ssd1306_WriteString>
			x = 2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	73bb      	strb	r3, [r7, #14]
			y += 8;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3308      	adds	r3, #8
 80012f6:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(2, y);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	4619      	mov	r1, r3
 80012fc:	2002      	movs	r0, #2
 80012fe:	f000 ffb9 	bl	8002274 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "az:%u", az_real);
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <displayData+0x1a8>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	1d38      	adds	r0, r7, #4
 800130a:	4a20      	ldr	r2, [pc, #128]	@ (800138c <displayData+0x1ac>)
 800130c:	2108      	movs	r1, #8
 800130e:	f00c fd7b 	bl	800de08 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <displayData+0x18c>)
 8001314:	1d38      	adds	r0, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800131c:	f000 ff84 	bl	8002228 <ssd1306_WriteString>
			x += 48;
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	3330      	adds	r3, #48	@ 0x30
 8001324:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f000 ffa1 	bl	8002274 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gz:%u", gz_real);
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <displayData+0x1b0>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	1d38      	adds	r0, r7, #4
 800133a:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <displayData+0x1b4>)
 800133c:	2108      	movs	r1, #8
 800133e:	f00c fd63 	bl	800de08 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <displayData+0x18c>)
 8001344:	1d38      	adds	r0, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	9200      	str	r2, [sp, #0]
 800134a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134c:	f000 ff6c 	bl	8002228 <ssd1306_WriteString>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200005e0 	.word	0x200005e0
 800135c:	2000002a 	.word	0x2000002a
 8001360:	0800edfc 	.word	0x0800edfc
 8001364:	200005e4 	.word	0x200005e4
 8001368:	0800e788 	.word	0x0800e788
 800136c:	0800edf0 	.word	0x0800edf0
 8001370:	200005ea 	.word	0x200005ea
 8001374:	0800e790 	.word	0x0800e790
 8001378:	200005e6 	.word	0x200005e6
 800137c:	0800e798 	.word	0x0800e798
 8001380:	200005ec 	.word	0x200005ec
 8001384:	0800e7a0 	.word	0x0800e7a0
 8001388:	200005e8 	.word	0x200005e8
 800138c:	0800e7a8 	.word	0x0800e7a8
 8001390:	200005ee 	.word	0x200005ee
 8001394:	0800e7b0 	.word	0x0800e7b0

08001398 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af02      	add	r7, sp, #8
 800139e:	6039      	str	r1, [r7, #0]
 80013a0:	4611      	mov	r1, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	460b      	mov	r3, r1
 80013aa:	71bb      	strb	r3, [r7, #6]
 80013ac:	4613      	mov	r3, r2
 80013ae:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	b299      	uxth	r1, r3
 80013b4:	797b      	ldrb	r3, [r7, #5]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <displayMemWriteDMA+0x3c>)
 80013c6:	f003 fdb5 	bl	8004f34 <HAL_I2C_Mem_Write_DMA>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000244 	.word	0x20000244

080013d8 <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6039      	str	r1, [r7, #0]
 80013e0:	4611      	mov	r1, r2
 80013e2:	461a      	mov	r2, r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	460b      	mov	r3, r1
 80013ea:	71bb      	strb	r3, [r7, #6]
 80013ec:	4613      	mov	r3, r2
 80013ee:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	b299      	uxth	r1, r3
 80013f4:	797b      	ldrb	r3, [r7, #5]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	9002      	str	r0, [sp, #8]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	4803      	ldr	r0, [pc, #12]	@ (8001418 <displayMemWrite+0x40>)
 800140c:	f003 fa66 	bl	80048dc <HAL_I2C_Mem_Write>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000244 	.word	0x20000244

0800141c <mpuTask>:


void mpuTask(){
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	if (IS20MS) {
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <mpuTask+0x28>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d008      	beq.n	8001440 <mpuTask+0x24>
		IS20MS = FALSE;
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <mpuTask+0x28>)
 8001430:	7813      	ldrb	r3, [r2, #0]
 8001432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001436:	7013      	strb	r3, [r2, #0]
		mpu6050_Read_Accel();
 8001438:	f000 fae6 	bl	8001a08 <mpu6050_Read_Accel>
		mpu6050_Read_Gyro();
 800143c:	f000 fbd0 	bl	8001be0 <mpu6050_Read_Gyro>
	}
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200005e0 	.word	0x200005e0

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f001 fcc0 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f850 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f000 fa3c 	bl	80018d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001458:	f000 f9fc 	bl	8001854 <MX_DMA_Init>
  MX_ADC1_Init();
 800145c:	f000 f8b2 	bl	80015c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001460:	f000 f964 	bl	800172c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001464:	f000 f990 	bl	8001788 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001468:	f00b ff52 	bl	800d310 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <main+0x80>)
 800146e:	f00c f8a1 	bl	800d5b4 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8001472:	4816      	ldr	r0, [pc, #88]	@ (80014cc <main+0x84>)
 8001474:	f007 ff56 	bl	8009324 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800147e:	4814      	ldr	r0, [pc, #80]	@ (80014d0 <main+0x88>)
 8001480:	f003 f89e 	bl	80045c0 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8001484:	4813      	ldr	r0, [pc, #76]	@ (80014d4 <main+0x8c>)
 8001486:	f000 fcd1 	bl	8001e2c <ssd1306_ADC_ConfCpltCallback>

	ssd1306_Attach_MemWrite(displayMemWrite);
 800148a:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <main+0x90>)
 800148c:	f000 fcbe 	bl	8001e0c <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 8001490:	4812      	ldr	r0, [pc, #72]	@ (80014dc <main+0x94>)
 8001492:	f000 fcab 	bl	8001dec <ssd1306_Attach_MemWriteDMA>

	ssd1306_Init();
 8001496:	f000 fcd9 	bl	8001e4c <ssd1306_Init>

	//mpu6050
	mpu6050_Init();
 800149a:	f000 fa7f 	bl	800199c <mpu6050_Init>

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <main+0x98>)
 80014a0:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <main+0x9c>)
 80014a2:	4911      	ldr	r1, [pc, #68]	@ (80014e8 <main+0xa0>)
 80014a4:	4811      	ldr	r0, [pc, #68]	@ (80014ec <main+0xa4>)
 80014a6:	f001 fc31 	bl	8002d0c <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <main+0xa8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 80014b0:	f7ff fe32 	bl	8001118 <do10ms>
		USBTask();
 80014b4:	f7ff fd0c 	bl	8000ed0 <USBTask>

		mpuTask();
 80014b8:	f7ff ffb0 	bl	800141c <mpuTask>
		displayData();
 80014bc:	f7ff fe90 	bl	80011e0 <displayData>
		ssd1306_UpdateScreenDMA();
 80014c0:	f000 fd6e 	bl	8001fa0 <ssd1306_UpdateScreenDMA>
		do10ms();
 80014c4:	bf00      	nop
 80014c6:	e7f3      	b.n	80014b0 <main+0x68>
 80014c8:	08000e75 	.word	0x08000e75
 80014cc:	20000358 	.word	0x20000358
 80014d0:	40020800 	.word	0x40020800
 80014d4:	200005e1 	.word	0x200005e1
 80014d8:	080013d9 	.word	0x080013d9
 80014dc:	08001399 	.word	0x08001399
 80014e0:	200003dc 	.word	0x200003dc
 80014e4:	200004dc 	.word	0x200004dc
 80014e8:	200003c4 	.word	0x200003c4
 80014ec:	200003d0 	.word	0x200003d0
 80014f0:	200005e0 	.word	0x200005e0

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	@ 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	2230      	movs	r2, #48	@ 0x30
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00c fcd0 	bl	800dea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <SystemClock_Config+0xc8>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	4a26      	ldr	r2, [pc, #152]	@ (80015bc <SystemClock_Config+0xc8>)
 8001522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	@ 0x40
 8001528:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <SystemClock_Config+0xc8>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <SystemClock_Config+0xcc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a20      	ldr	r2, [pc, #128]	@ (80015c0 <SystemClock_Config+0xcc>)
 800153e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <SystemClock_Config+0xcc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001564:	2319      	movs	r3, #25
 8001566:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001568:	23c0      	movs	r3, #192	@ 0xc0
 800156a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800156c:	2302      	movs	r3, #2
 800156e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001570:	2304      	movs	r3, #4
 8001572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fa3f 	bl	80089fc <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001584:	f000 fa04 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001588:	230f      	movs	r3, #15
 800158a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2302      	movs	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	2103      	movs	r1, #3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f007 fca1 	bl	8008eec <HAL_RCC_ClockConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015b0:	f000 f9ee 	bl	8001990 <Error_Handler>
  }
}
 80015b4:	bf00      	nop
 80015b6:	3750      	adds	r7, #80	@ 0x50
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40007000 	.word	0x40007000

080015c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015d6:	4b52      	ldr	r3, [pc, #328]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80015d8:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <MX_ADC1_Init+0x160>)
 80015da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015dc:	4b50      	ldr	r3, [pc, #320]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80015de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fe:	4b48      	ldr	r3, [pc, #288]	@ (8001720 <MX_ADC1_Init+0x15c>)
 8001600:	2200      	movs	r2, #0
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001604:	4b46      	ldr	r3, [pc, #280]	@ (8001720 <MX_ADC1_Init+0x15c>)
 8001606:	4a48      	ldr	r2, [pc, #288]	@ (8001728 <MX_ADC1_Init+0x164>)
 8001608:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800160a:	4b45      	ldr	r3, [pc, #276]	@ (8001720 <MX_ADC1_Init+0x15c>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001610:	4b43      	ldr	r3, [pc, #268]	@ (8001720 <MX_ADC1_Init+0x15c>)
 8001612:	2208      	movs	r2, #8
 8001614:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <MX_ADC1_Init+0x15c>)
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161e:	4b40      	ldr	r3, [pc, #256]	@ (8001720 <MX_ADC1_Init+0x15c>)
 8001620:	2201      	movs	r2, #1
 8001622:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001624:	483e      	ldr	r0, [pc, #248]	@ (8001720 <MX_ADC1_Init+0x15c>)
 8001626:	f001 fc69 	bl	8002efc <HAL_ADC_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001630:	f000 f9ae 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4619      	mov	r1, r3
 8001644:	4836      	ldr	r0, [pc, #216]	@ (8001720 <MX_ADC1_Init+0x15c>)
 8001646:	f001 febf 	bl	80033c8 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001650:	f000 f99e 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001654:	2301      	movs	r3, #1
 8001656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	482f      	ldr	r0, [pc, #188]	@ (8001720 <MX_ADC1_Init+0x15c>)
 8001662:	f001 feb1 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800166c:	f000 f990 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001670:	2302      	movs	r3, #2
 8001672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001674:	2303      	movs	r3, #3
 8001676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4828      	ldr	r0, [pc, #160]	@ (8001720 <MX_ADC1_Init+0x15c>)
 800167e:	f001 fea3 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001688:	f000 f982 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800168c:	2303      	movs	r3, #3
 800168e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001690:	2304      	movs	r3, #4
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4821      	ldr	r0, [pc, #132]	@ (8001720 <MX_ADC1_Init+0x15c>)
 800169a:	f001 fe95 	bl	80033c8 <HAL_ADC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016a4:	f000 f974 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016ac:	2305      	movs	r3, #5
 80016ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	481a      	ldr	r0, [pc, #104]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80016b6:	f001 fe87 	bl	80033c8 <HAL_ADC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016c0:	f000 f966 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016c4:	2305      	movs	r3, #5
 80016c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016c8:	2306      	movs	r3, #6
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4813      	ldr	r0, [pc, #76]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80016d2:	f001 fe79 	bl	80033c8 <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016dc:	f000 f958 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016e0:	2306      	movs	r3, #6
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016e4:	2307      	movs	r3, #7
 80016e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <MX_ADC1_Init+0x15c>)
 80016ee:	f001 fe6b 	bl	80033c8 <HAL_ADC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016f8:	f000 f94a 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016fc:	2307      	movs	r3, #7
 80016fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001700:	2308      	movs	r3, #8
 8001702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_ADC1_Init+0x15c>)
 800170a:	f001 fe5d 	bl	80033c8 <HAL_ADC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001714:	f000 f93c 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000019c 	.word	0x2000019c
 8001724:	40012000 	.word	0x40012000
 8001728:	0f000001 	.word	0x0f000001

0800172c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <MX_I2C1_Init+0x50>)
 8001732:	4a13      	ldr	r2, [pc, #76]	@ (8001780 <MX_I2C1_Init+0x54>)
 8001734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_I2C1_Init+0x50>)
 8001738:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <MX_I2C1_Init+0x58>)
 800173a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_I2C1_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_I2C1_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MX_I2C1_Init+0x50>)
 800174a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800174e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <MX_I2C1_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_I2C1_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175c:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MX_I2C1_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <MX_I2C1_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_I2C1_Init+0x50>)
 800176a:	f002 ff5d 	bl	8004628 <HAL_I2C_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001774:	f000 f90c 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000244 	.word	0x20000244
 8001780:	40005400 	.word	0x40005400
 8001784:	00061a80 	.word	0x00061a80

08001788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	@ 0x30
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b4:	4b25      	ldr	r3, [pc, #148]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017b6:	4a26      	ldr	r2, [pc, #152]	@ (8001850 <MX_TIM1_Init+0xc8>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017bc:	225f      	movs	r2, #95	@ 0x5f
 80017be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017c8:	22f9      	movs	r2, #249	@ 0xf9
 80017ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017de:	481b      	ldr	r0, [pc, #108]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017e0:	f007 fd50 	bl	8009284 <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80017ea:	f000 f8d1 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	4619      	mov	r1, r3
 80017fa:	4814      	ldr	r0, [pc, #80]	@ (800184c <MX_TIM1_Init+0xc4>)
 80017fc:	f007 fee4 	bl	80095c8 <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001806:	f000 f8c3 	bl	8001990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <MX_TIM1_Init+0xc4>)
 800181a:	f007 ff9c 	bl	8009756 <HAL_TIM_SlaveConfigSynchro>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001824:	f000 f8b4 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_TIM1_Init+0xc4>)
 8001836:	f008 f9ab 	bl	8009b90 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001840:	f000 f8a6 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3730      	adds	r7, #48	@ 0x30
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000358 	.word	0x20000358
 8001850:	40010000 	.word	0x40010000

08001854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <MX_DMA_Init+0x78>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a1a      	ldr	r2, [pc, #104]	@ (80018cc <MX_DMA_Init+0x78>)
 8001864:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <MX_DMA_Init+0x78>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_DMA_Init+0x78>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a13      	ldr	r2, [pc, #76]	@ (80018cc <MX_DMA_Init+0x78>)
 8001880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_DMA_Init+0x78>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	200b      	movs	r0, #11
 8001898:	f002 f92b 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800189c:	200b      	movs	r0, #11
 800189e:	f002 f944 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	200c      	movs	r0, #12
 80018a8:	f002 f923 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018ac:	200c      	movs	r0, #12
 80018ae:	f002 f93c 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2038      	movs	r0, #56	@ 0x38
 80018b8:	f002 f91b 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018bc:	2038      	movs	r0, #56	@ 0x38
 80018be:	f002 f934 	bl	8003b2a <HAL_NVIC_EnableIRQ>

}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	@ 0x28
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <MX_GPIO_Init+0xb8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a26      	ldr	r2, [pc, #152]	@ (8001988 <MX_GPIO_Init+0xb8>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <MX_GPIO_Init+0xb8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a1f      	ldr	r2, [pc, #124]	@ (8001988 <MX_GPIO_Init+0xb8>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a11      	ldr	r2, [pc, #68]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_GPIO_Init+0xb8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <MX_GPIO_Init+0xbc>)
 800195e:	f002 fe2f 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4804      	ldr	r0, [pc, #16]	@ (800198c <MX_GPIO_Init+0xbc>)
 800197c:	f002 fc9c 	bl	80042b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	@ 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40020800 	.word	0x40020800

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <Error_Handler+0x8>

0800199c <mpu6050_Init>:

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
int32_t ax, ay, az, gx, gy, gz;

void mpu6050_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af04      	add	r7, sp, #16
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2301      	movs	r3, #1
 80019b6:	226b      	movs	r2, #107	@ 0x6b
 80019b8:	21d0      	movs	r1, #208	@ 0xd0
 80019ba:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <mpu6050_Init+0x68>)
 80019bc:	f002 ff8e 	bl	80048dc <HAL_I2C_Mem_Write>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 80019c0:	2300      	movs	r3, #0
 80019c2:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2301      	movs	r3, #1
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	221c      	movs	r2, #28
 80019d6:	21d0      	movs	r1, #208	@ 0xd0
 80019d8:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <mpu6050_Init+0x68>)
 80019da:	f002 ff7f 	bl	80048dc <HAL_I2C_Mem_Write>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	2301      	movs	r3, #1
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	1dfb      	adds	r3, r7, #7
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	221b      	movs	r2, #27
 80019f4:	21d0      	movs	r1, #208	@ 0xd0
 80019f6:	4803      	ldr	r0, [pc, #12]	@ (8001a04 <mpu6050_Init+0x68>)
 80019f8:	f002 ff70 	bl	80048dc <HAL_I2C_Mem_Write>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000244 	.word	0x20000244

08001a08 <mpu6050_Read_Accel>:

void mpu6050_Read_Accel(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    // Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2306      	movs	r3, #6
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	463b      	mov	r3, r7
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	223b      	movs	r2, #59	@ 0x3b
 8001a20:	21d0      	movs	r1, #208	@ 0xd0
 8001a22:	4865      	ldr	r0, [pc, #404]	@ (8001bb8 <mpu6050_Read_Accel+0x1b0>)
 8001a24:	f003 f854 	bl	8004ad0 <HAL_I2C_Mem_Read>

    // Combinar bytes altos y bajos en variables de 16 bits con signo
    ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001a28:	783b      	ldrb	r3, [r7, #0]
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b60      	ldr	r3, [pc, #384]	@ (8001bbc <mpu6050_Read_Accel+0x1b4>)
 8001a3c:	601a      	str	r2, [r3, #0]
    ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001a3e:	78bb      	ldrb	r3, [r7, #2]
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc0 <mpu6050_Read_Accel+0x1b8>)
 8001a52:	601a      	str	r2, [r3, #0]
    az = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001a54:	793b      	ldrb	r3, [r7, #4]
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	797b      	ldrb	r3, [r7, #5]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b57      	ldr	r3, [pc, #348]	@ (8001bc4 <mpu6050_Read_Accel+0x1bc>)
 8001a68:	601a      	str	r2, [r3, #0]

    // Aplicar offset y escalar a m/s² (con 2 decimales fijos)
    if (abs(ax) <= OFFSET_AX)
 8001a6a:	4b54      	ldr	r3, [pc, #336]	@ (8001bbc <mpu6050_Read_Accel+0x1b4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001a72:	db08      	blt.n	8001a86 <mpu6050_Read_Accel+0x7e>
 8001a74:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <mpu6050_Read_Accel+0x1b4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001a7c:	dc03      	bgt.n	8001a86 <mpu6050_Read_Accel+0x7e>
        ax_real = 0;
 8001a7e:	4b52      	ldr	r3, [pc, #328]	@ (8001bc8 <mpu6050_Read_Accel+0x1c0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	801a      	strh	r2, [r3, #0]
 8001a84:	e025      	b.n	8001ad2 <mpu6050_Read_Accel+0xca>
    else
        ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001a86:	4b4d      	ldr	r3, [pc, #308]	@ (8001bbc <mpu6050_Read_Accel+0x1b4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a92:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001bcc <mpu6050_Read_Accel+0x1c4>
 8001a96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a9a:	ee16 0a90 	vmov	r0, s13
 8001a9e:	f7fe fd53 	bl	8000548 <__aeabi_f2d>
 8001aa2:	a343      	add	r3, pc, #268	@ (adr r3, 8001bb0 <mpu6050_Read_Accel+0x1a8>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fda6 	bl	80005f8 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b45      	ldr	r3, [pc, #276]	@ (8001bd0 <mpu6050_Read_Accel+0x1c8>)
 8001aba:	f7fe fd9d 	bl	80005f8 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ffa9 	bl	8000a1c <__aeabi_d2iz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc8 <mpu6050_Read_Accel+0x1c0>)
 8001ad0:	801a      	strh	r2, [r3, #0]

    if (abs(ay) <= OFFSET_AY)
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <mpu6050_Read_Accel+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001ada:	db08      	blt.n	8001aee <mpu6050_Read_Accel+0xe6>
 8001adc:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <mpu6050_Read_Accel+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001ae4:	dc03      	bgt.n	8001aee <mpu6050_Read_Accel+0xe6>
        ay_real = 0;
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd4 <mpu6050_Read_Accel+0x1cc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	801a      	strh	r2, [r3, #0]
 8001aec:	e025      	b.n	8001b3a <mpu6050_Read_Accel+0x132>
    else
        ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001aee:	4b34      	ldr	r3, [pc, #208]	@ (8001bc0 <mpu6050_Read_Accel+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001bcc <mpu6050_Read_Accel+0x1c4>
 8001afe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b02:	ee16 0a90 	vmov	r0, s13
 8001b06:	f7fe fd1f 	bl	8000548 <__aeabi_f2d>
 8001b0a:	a329      	add	r3, pc, #164	@ (adr r3, 8001bb0 <mpu6050_Read_Accel+0x1a8>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fd72 	bl	80005f8 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <mpu6050_Read_Accel+0x1c8>)
 8001b22:	f7fe fd69 	bl	80005f8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ff75 	bl	8000a1c <__aeabi_d2iz>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <mpu6050_Read_Accel+0x1cc>)
 8001b38:	801a      	strh	r2, [r3, #0]

    if (abs(az) <= OFFSET_AZ)
 8001b3a:	4b22      	ldr	r3, [pc, #136]	@ (8001bc4 <mpu6050_Read_Accel+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a26      	ldr	r2, [pc, #152]	@ (8001bd8 <mpu6050_Read_Accel+0x1d0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	db0a      	blt.n	8001b5a <mpu6050_Read_Accel+0x152>
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <mpu6050_Read_Accel+0x1bc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	dc04      	bgt.n	8001b5a <mpu6050_Read_Accel+0x152>
        az_real = 9.81 * MULTIPLICADORFLOAT;  // en reposo debería medir ~1g hacia Z
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <mpu6050_Read_Accel+0x1d4>)
 8001b52:	f240 32d5 	movw	r2, #981	@ 0x3d5
 8001b56:	801a      	strh	r2, [r3, #0]
 8001b58:	e026      	b.n	8001ba8 <mpu6050_Read_Accel+0x1a0>
    else
        az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <mpu6050_Read_Accel+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b66:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001bcc <mpu6050_Read_Accel+0x1c4>
 8001b6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b6e:	ee16 0a90 	vmov	r0, s13
 8001b72:	f7fe fce9 	bl	8000548 <__aeabi_f2d>
 8001b76:	a30e      	add	r3, pc, #56	@ (adr r3, 8001bb0 <mpu6050_Read_Accel+0x1a8>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fd3c 	bl	80005f8 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <mpu6050_Read_Accel+0x1c8>)
 8001b8e:	f7fe fd33 	bl	80005f8 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7fe ff3f 	bl	8000a1c <__aeabi_d2iz>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <mpu6050_Read_Accel+0x1d4>)
 8001ba4:	801a      	strh	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	51eb851f 	.word	0x51eb851f
 8001bb4:	40239eb8 	.word	0x40239eb8
 8001bb8:	20000244 	.word	0x20000244
 8001bbc:	200005f4 	.word	0x200005f4
 8001bc0:	200005f8 	.word	0x200005f8
 8001bc4:	200005fc 	.word	0x200005fc
 8001bc8:	200005e4 	.word	0x200005e4
 8001bcc:	46800000 	.word	0x46800000
 8001bd0:	40590000 	.word	0x40590000
 8001bd4:	200005e6 	.word	0x200005e6
 8001bd8:	ffffb1e0 	.word	0xffffb1e0
 8001bdc:	200005e8 	.word	0x200005e8

08001be0 <mpu6050_Read_Gyro>:

void mpu6050_Read_Gyro(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    // Leer 6 bytes desde GYRO_XOUT_H (registro 0x43)
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	2306      	movs	r3, #6
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2243      	movs	r2, #67	@ 0x43
 8001bf8:	21d0      	movs	r1, #208	@ 0xd0
 8001bfa:	4849      	ldr	r0, [pc, #292]	@ (8001d20 <mpu6050_Read_Gyro+0x140>)
 8001bfc:	f002 ff68 	bl	8004ad0 <HAL_I2C_Mem_Read>

    // Combinar bytes altos y bajos
    gx = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001c00:	783b      	ldrb	r3, [r7, #0]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b44      	ldr	r3, [pc, #272]	@ (8001d24 <mpu6050_Read_Gyro+0x144>)
 8001c14:	601a      	str	r2, [r3, #0]
    gy = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001c16:	78bb      	ldrb	r3, [r7, #2]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b3f      	ldr	r3, [pc, #252]	@ (8001d28 <mpu6050_Read_Gyro+0x148>)
 8001c2a:	601a      	str	r2, [r3, #0]
    gz = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001c2c:	793b      	ldrb	r3, [r7, #4]
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	797b      	ldrb	r3, [r7, #5]
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <mpu6050_Read_Gyro+0x14c>)
 8001c40:	601a      	str	r2, [r3, #0]

    // Aplicar offset y escalar a grados/segundo (centésimas)
    if (abs(gx) <= OFFSET_GX)
 8001c42:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <mpu6050_Read_Gyro+0x144>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001c4a:	db08      	blt.n	8001c5e <mpu6050_Read_Gyro+0x7e>
 8001c4c:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <mpu6050_Read_Gyro+0x144>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001c54:	dc03      	bgt.n	8001c5e <mpu6050_Read_Gyro+0x7e>
        gx_real = 0;
 8001c56:	4b36      	ldr	r3, [pc, #216]	@ (8001d30 <mpu6050_Read_Gyro+0x150>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
 8001c5c:	e014      	b.n	8001c88 <mpu6050_Read_Gyro+0xa8>
    else
        gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 8001c5e:	4b31      	ldr	r3, [pc, #196]	@ (8001d24 <mpu6050_Read_Gyro+0x144>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001d34 <mpu6050_Read_Gyro+0x154>
 8001c6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c72:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d38 <mpu6050_Read_Gyro+0x158>
 8001c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7e:	ee17 3a90 	vmov	r3, s15
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <mpu6050_Read_Gyro+0x150>)
 8001c86:	801a      	strh	r2, [r3, #0]

    if (abs(gy) <= OFFSET_GY)
 8001c88:	4b27      	ldr	r3, [pc, #156]	@ (8001d28 <mpu6050_Read_Gyro+0x148>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001c90:	db08      	blt.n	8001ca4 <mpu6050_Read_Gyro+0xc4>
 8001c92:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <mpu6050_Read_Gyro+0x148>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001c9a:	dc03      	bgt.n	8001ca4 <mpu6050_Read_Gyro+0xc4>
        gy_real = 0;
 8001c9c:	4b27      	ldr	r3, [pc, #156]	@ (8001d3c <mpu6050_Read_Gyro+0x15c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	e014      	b.n	8001cce <mpu6050_Read_Gyro+0xee>
    else
        gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 8001ca4:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <mpu6050_Read_Gyro+0x148>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001d34 <mpu6050_Read_Gyro+0x154>
 8001cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001d38 <mpu6050_Read_Gyro+0x158>
 8001cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc4:	ee17 3a90 	vmov	r3, s15
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <mpu6050_Read_Gyro+0x15c>)
 8001ccc:	801a      	strh	r2, [r3, #0]

    if (abs(gz) <= OFFSET_GZ)
 8001cce:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <mpu6050_Read_Gyro+0x14c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001cd6:	db08      	blt.n	8001cea <mpu6050_Read_Gyro+0x10a>
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <mpu6050_Read_Gyro+0x14c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001ce0:	dc03      	bgt.n	8001cea <mpu6050_Read_Gyro+0x10a>
        gz_real = 0;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <mpu6050_Read_Gyro+0x160>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	e015      	b.n	8001d16 <mpu6050_Read_Gyro+0x136>
    else
        gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <mpu6050_Read_Gyro+0x14c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001d34 <mpu6050_Read_Gyro+0x154>
 8001cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cfe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001d38 <mpu6050_Read_Gyro+0x158>
 8001d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d0a:	ee17 3a90 	vmov	r3, s15
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <mpu6050_Read_Gyro+0x160>)
 8001d12:	801a      	strh	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000244 	.word	0x20000244
 8001d24:	20000600 	.word	0x20000600
 8001d28:	20000604 	.word	0x20000604
 8001d2c:	20000608 	.word	0x20000608
 8001d30:	200005ea 	.word	0x200005ea
 8001d34:	43030000 	.word	0x43030000
 8001d38:	42c80000 	.word	0x42c80000
 8001d3c:	200005ec 	.word	0x200005ec
 8001d40:	200005ee 	.word	0x200005ee

08001d44 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <ssd1306_WriteCommand+0x20>)
 8001d60:	681c      	ldr	r4, [r3, #0]
 8001d62:	1df9      	adds	r1, r7, #7
 8001d64:	2300      	movs	r3, #0
 8001d66:	2201      	movs	r2, #1
 8001d68:	2078      	movs	r0, #120	@ 0x78
 8001d6a:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}
 8001d74:	20000610 	.word	0x20000610

08001d78 <ssd1306_WriteCommandDMA>:

void ssd1306_WriteCommandDMA(uint8_t byte) {
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <ssd1306_WriteCommandDMA+0x20>)
 8001d84:	681c      	ldr	r4, [r3, #0]
 8001d86:	1df9      	adds	r1, r7, #7
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2078      	movs	r0, #120	@ 0x78
 8001d8e:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	20000614 	.word	0x20000614

08001d9c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <ssd1306_WriteData+0x24>)
 8001da8:	681c      	ldr	r4, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	2340      	movs	r3, #64	@ 0x40
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	2078      	movs	r0, #120	@ 0x78
 8001db4:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000610 	.word	0x20000610

08001dc4 <ssd1306_WriteDataDMA>:

void ssd1306_WriteDataDMA(uint8_t* buffer, size_t buff_size) {
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	memWriteDMA(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <ssd1306_WriteDataDMA+0x24>)
 8001dd0:	681c      	ldr	r4, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	2340      	movs	r3, #64	@ 0x40
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	2078      	movs	r0, #120	@ 0x78
 8001ddc:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000614 	.word	0x20000614

08001dec <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <ssd1306_Attach_MemWriteDMA+0x1c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000614 	.word	0x20000614

08001e0c <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <ssd1306_Attach_MemWrite+0x1c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000610 	.word	0x20000610

08001e2c <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000060c 	.word	0x2000060c

08001e4c <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e50:	f7ff ff78 	bl	8001d44 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e54:	2064      	movs	r0, #100	@ 0x64
 8001e56:	f001 f82d 	bl	8002eb4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 fa90 	bl	8002380 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e60:	2020      	movs	r0, #32
 8001e62:	f7ff ff77 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff ff74 	bl	8001d54 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e6c:	20b0      	movs	r0, #176	@ 0xb0
 8001e6e:	f7ff ff71 	bl	8001d54 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e72:	20c8      	movs	r0, #200	@ 0xc8
 8001e74:	f7ff ff6e 	bl	8001d54 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff ff6b 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e7e:	2010      	movs	r0, #16
 8001e80:	f7ff ff68 	bl	8001d54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e84:	2040      	movs	r0, #64	@ 0x40
 8001e86:	f7ff ff65 	bl	8001d54 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001e8a:	20ff      	movs	r0, #255	@ 0xff
 8001e8c:	f000 fa65 	bl	800235a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e90:	20a1      	movs	r0, #161	@ 0xa1
 8001e92:	f7ff ff5f 	bl	8001d54 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e96:	20a6      	movs	r0, #166	@ 0xa6
 8001e98:	f7ff ff5c 	bl	8001d54 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001e9c:	20a8      	movs	r0, #168	@ 0xa8
 8001e9e:	f7ff ff59 	bl	8001d54 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ea2:	203f      	movs	r0, #63	@ 0x3f
 8001ea4:	f7ff ff56 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ea8:	20a4      	movs	r0, #164	@ 0xa4
 8001eaa:	f7ff ff53 	bl	8001d54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001eae:	20d3      	movs	r0, #211	@ 0xd3
 8001eb0:	f7ff ff50 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ff4d 	bl	8001d54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001eba:	20d5      	movs	r0, #213	@ 0xd5
 8001ebc:	f7ff ff4a 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ec0:	20f0      	movs	r0, #240	@ 0xf0
 8001ec2:	f7ff ff47 	bl	8001d54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ec6:	20d9      	movs	r0, #217	@ 0xd9
 8001ec8:	f7ff ff44 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ecc:	2022      	movs	r0, #34	@ 0x22
 8001ece:	f7ff ff41 	bl	8001d54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ed2:	20da      	movs	r0, #218	@ 0xda
 8001ed4:	f7ff ff3e 	bl	8001d54 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ed8:	2012      	movs	r0, #18
 8001eda:	f7ff ff3b 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ede:	20db      	movs	r0, #219	@ 0xdb
 8001ee0:	f7ff ff38 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	f7ff ff35 	bl	8001d54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001eea:	208d      	movs	r0, #141	@ 0x8d
 8001eec:	f7ff ff32 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ef0:	2014      	movs	r0, #20
 8001ef2:	f7ff ff2f 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f000 fa42 	bl	8002380 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 f80f 	bl	8001f20 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f02:	f000 f825 	bl	8001f50 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <ssd1306_Init+0xd0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <ssd1306_Init+0xd0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001f12:	4b02      	ldr	r3, [pc, #8]	@ (8001f1c <ssd1306_Init+0xd0>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	711a      	strb	r2, [r3, #4]
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000a18 	.word	0x20000a18

08001f20 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <ssd1306_Fill+0x14>
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <ssd1306_Fill+0x16>
 8001f34:	23ff      	movs	r3, #255	@ 0xff
 8001f36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4803      	ldr	r0, [pc, #12]	@ (8001f4c <ssd1306_Fill+0x2c>)
 8001f3e:	f00b ffb3 	bl	800dea8 <memset>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000618 	.word	0x20000618

08001f50 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f56:	2300      	movs	r3, #0
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	e016      	b.n	8001f8a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	3b50      	subs	r3, #80	@ 0x50
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fef6 	bl	8001d54 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff fef3 	bl	8001d54 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001f6e:	2010      	movs	r0, #16
 8001f70:	f7ff fef0 	bl	8001d54 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <ssd1306_UpdateScreen+0x4c>)
 8001f7a:	4413      	add	r3, r2
 8001f7c:	2180      	movs	r1, #128	@ 0x80
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff0c 	bl	8001d9c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	3301      	adds	r3, #1
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	d9e5      	bls.n	8001f5c <ssd1306_UpdateScreen+0xc>
    }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000618 	.word	0x20000618

08001fa0 <ssd1306_UpdateScreenDMA>:


/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreenDMA(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction

	if (*SSD1306_TxCplt || state == 1) {
 8001fa4:	4b29      	ldr	r3, [pc, #164]	@ (800204c <ssd1306_UpdateScreenDMA+0xac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <ssd1306_UpdateScreenDMA+0x16>
 8001fae:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <ssd1306_UpdateScreenDMA+0xb0>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d147      	bne.n	8002046 <ssd1306_UpdateScreenDMA+0xa6>
		*SSD1306_TxCplt = 0;  // Reset completion flag
 8001fb6:	4b25      	ldr	r3, [pc, #148]	@ (800204c <ssd1306_UpdateScreenDMA+0xac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]

		switch (state) {
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <ssd1306_UpdateScreenDMA+0xb0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d83e      	bhi.n	8002046 <ssd1306_UpdateScreenDMA+0xa6>
 8001fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd0 <ssd1306_UpdateScreenDMA+0x30>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08001ff7 	.word	0x08001ff7
 8001fd8:	08002005 	.word	0x08002005
 8001fdc:	08002013 	.word	0x08002013
		case 1:  // Set page address
			ssd1306_WriteCommandDMA(0xB0 + current_page);
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <ssd1306_UpdateScreenDMA+0xb4>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	3b50      	subs	r3, #80	@ 0x50
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fec5 	bl	8001d78 <ssd1306_WriteCommandDMA>
			state = 2;
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <ssd1306_UpdateScreenDMA+0xb0>)
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	701a      	strb	r2, [r3, #0]
			break;
 8001ff4:	e027      	b.n	8002046 <ssd1306_UpdateScreenDMA+0xa6>
		case 2:  // Set column address low nibble
			ssd1306_WriteCommandDMA(0x00 + SSD1306_X_OFFSET_LOWER);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff febe 	bl	8001d78 <ssd1306_WriteCommandDMA>
			state = 3;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <ssd1306_UpdateScreenDMA+0xb0>)
 8001ffe:	2203      	movs	r2, #3
 8002000:	701a      	strb	r2, [r3, #0]
			break;
 8002002:	e020      	b.n	8002046 <ssd1306_UpdateScreenDMA+0xa6>
		case 3:  // Set column address high nibble
			ssd1306_WriteCommandDMA(0x10 + SSD1306_X_OFFSET_UPPER);
 8002004:	2010      	movs	r0, #16
 8002006:	f7ff feb7 	bl	8001d78 <ssd1306_WriteCommandDMA>
			state = 4;
 800200a:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <ssd1306_UpdateScreenDMA+0xb0>)
 800200c:	2204      	movs	r2, #4
 800200e:	701a      	strb	r2, [r3, #0]
			break;
 8002010:	e019      	b.n	8002046 <ssd1306_UpdateScreenDMA+0xa6>
		case 4:  // Write page data
			ssd1306_WriteDataDMA(&SSD1306_Buffer[SSD1306_WIDTH*current_page],SSD1306_WIDTH);
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <ssd1306_UpdateScreenDMA+0xb4>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	01db      	lsls	r3, r3, #7
 8002018:	4a0f      	ldr	r2, [pc, #60]	@ (8002058 <ssd1306_UpdateScreenDMA+0xb8>)
 800201a:	4413      	add	r3, r2
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fed0 	bl	8001dc4 <ssd1306_WriteDataDMA>
			current_page++;
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <ssd1306_UpdateScreenDMA+0xb4>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <ssd1306_UpdateScreenDMA+0xb4>)
 800202e:	701a      	strb	r2, [r3, #0]

			if (current_page > 7){//SSD1306_HEIGHT/8) {
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <ssd1306_UpdateScreenDMA+0xb4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b07      	cmp	r3, #7
 8002036:	d902      	bls.n	800203e <ssd1306_UpdateScreenDMA+0x9e>
				current_page = 0;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <ssd1306_UpdateScreenDMA+0xb4>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
			}
			state = 1;  // Start over with next page
 800203e:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <ssd1306_UpdateScreenDMA+0xb0>)
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
			break;
 8002044:	bf00      	nop
		}
	}
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000060c 	.word	0x2000060c
 8002050:	2000002b 	.word	0x2000002b
 8002054:	20000a1e 	.word	0x20000a1e
 8002058:	20000618 	.word	0x20000618

0800205c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
 8002066:	460b      	mov	r3, r1
 8002068:	71bb      	strb	r3, [r7, #6]
 800206a:	4613      	mov	r3, r2
 800206c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db3d      	blt.n	80020f2 <ssd1306_DrawPixel+0x96>
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	2b3f      	cmp	r3, #63	@ 0x3f
 800207a:	d83a      	bhi.n	80020f2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 800207c:	797b      	ldrb	r3, [r7, #5]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d11a      	bne.n	80020b8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002082:	79fa      	ldrb	r2, [r7, #7]
 8002084:	79bb      	ldrb	r3, [r7, #6]
 8002086:	08db      	lsrs	r3, r3, #3
 8002088:	b2d8      	uxtb	r0, r3
 800208a:	4603      	mov	r3, r0
 800208c:	01db      	lsls	r3, r3, #7
 800208e:	4413      	add	r3, r2
 8002090:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <ssd1306_DrawPixel+0xa4>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	b25a      	sxtb	r2, r3
 8002096:	79bb      	ldrb	r3, [r7, #6]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	b259      	sxtb	r1, r3
 80020a8:	79fa      	ldrb	r2, [r7, #7]
 80020aa:	4603      	mov	r3, r0
 80020ac:	01db      	lsls	r3, r3, #7
 80020ae:	4413      	add	r3, r2
 80020b0:	b2c9      	uxtb	r1, r1
 80020b2:	4a13      	ldr	r2, [pc, #76]	@ (8002100 <ssd1306_DrawPixel+0xa4>)
 80020b4:	54d1      	strb	r1, [r2, r3]
 80020b6:	e01d      	b.n	80020f4 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020b8:	79fa      	ldrb	r2, [r7, #7]
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	b2d8      	uxtb	r0, r3
 80020c0:	4603      	mov	r3, r0
 80020c2:	01db      	lsls	r3, r3, #7
 80020c4:	4413      	add	r3, r2
 80020c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002100 <ssd1306_DrawPixel+0xa4>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	4013      	ands	r3, r2
 80020e0:	b259      	sxtb	r1, r3
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	4603      	mov	r3, r0
 80020e6:	01db      	lsls	r3, r3, #7
 80020e8:	4413      	add	r3, r2
 80020ea:	b2c9      	uxtb	r1, r1
 80020ec:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <ssd1306_DrawPixel+0xa4>)
 80020ee:	54d1      	strb	r1, [r2, r3]
 80020f0:	e000      	b.n	80020f4 <ssd1306_DrawPixel+0x98>
        return;
 80020f2:	bf00      	nop
    }
}
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000618 	.word	0x20000618

08002104 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	4604      	mov	r4, r0
 800210c:	4638      	mov	r0, r7
 800210e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002112:	4623      	mov	r3, r4
 8002114:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b1f      	cmp	r3, #31
 800211a:	d902      	bls.n	8002122 <ssd1306_WriteChar+0x1e>
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002120:	d901      	bls.n	8002126 <ssd1306_WriteChar+0x22>
        return 0;
 8002122:	2300      	movs	r3, #0
 8002124:	e079      	b.n	800221a <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <ssd1306_WriteChar+0x34>
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3b20      	subs	r3, #32
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	e000      	b.n	800213a <ssd1306_WriteChar+0x36>
 8002138:	783b      	ldrb	r3, [r7, #0]
 800213a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800213c:	4b39      	ldr	r3, [pc, #228]	@ (8002224 <ssd1306_WriteChar+0x120>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	4413      	add	r3, r2
 8002146:	2b80      	cmp	r3, #128	@ 0x80
 8002148:	dc06      	bgt.n	8002158 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800214a:	4b36      	ldr	r3, [pc, #216]	@ (8002224 <ssd1306_WriteChar+0x120>)
 800214c:	885b      	ldrh	r3, [r3, #2]
 800214e:	461a      	mov	r2, r3
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002154:	2b40      	cmp	r3, #64	@ 0x40
 8002156:	dd01      	ble.n	800215c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002158:	2300      	movs	r3, #0
 800215a:	e05e      	b.n	800221a <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	e04d      	b.n	80021fe <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	3b20      	subs	r3, #32
 8002168:	7879      	ldrb	r1, [r7, #1]
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4619      	mov	r1, r3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	440b      	add	r3, r1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e036      	b.n	80021f0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d013      	beq.n	80021ba <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002192:	4b24      	ldr	r3, [pc, #144]	@ (8002224 <ssd1306_WriteChar+0x120>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4413      	add	r3, r2
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <ssd1306_WriteChar+0x120>)
 80021a2:	885b      	ldrh	r3, [r3, #2]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7ff ff52 	bl	800205c <ssd1306_DrawPixel>
 80021b8:	e017      	b.n	80021ea <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80021ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <ssd1306_WriteChar+0x120>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	b2d8      	uxtb	r0, r3
 80021c8:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <ssd1306_WriteChar+0x120>)
 80021ca:	885b      	ldrh	r3, [r3, #2]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	b2d9      	uxtb	r1, r3
 80021d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	f7ff ff39 	bl	800205c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d3c4      	bcc.n	8002182 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	787b      	ldrb	r3, [r7, #1]
 8002200:	461a      	mov	r2, r3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4293      	cmp	r3, r2
 8002206:	d3ac      	bcc.n	8002162 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <ssd1306_WriteChar+0x120>)
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4413      	add	r3, r2
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <ssd1306_WriteChar+0x120>)
 8002216:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	@ 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	bf00      	nop
 8002224:	20000a18 	.word	0x20000a18

08002228 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	4638      	mov	r0, r7
 8002232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002236:	e013      	b.n	8002260 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	7818      	ldrb	r0, [r3, #0]
 800223c:	7e3b      	ldrb	r3, [r7, #24]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	463b      	mov	r3, r7
 8002242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002244:	f7ff ff5e 	bl	8002104 <ssd1306_WriteChar>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d002      	beq.n	800225a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	e008      	b.n	800226c <ssd1306_WriteString+0x44>
        }
        str++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e7      	bne.n	8002238 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	781b      	ldrb	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	460a      	mov	r2, r1
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	4613      	mov	r3, r2
 8002282:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <ssd1306_SetCursor+0x2c>)
 800228a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800228c:	79bb      	ldrb	r3, [r7, #6]
 800228e:	b29a      	uxth	r2, r3
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <ssd1306_SetCursor+0x2c>)
 8002292:	805a      	strh	r2, [r3, #2]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	20000a18 	.word	0x20000a18

080022a4 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	603a      	str	r2, [r7, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	460b      	mov	r3, r1
 80022b4:	71bb      	strb	r3, [r7, #6]
 80022b6:	4613      	mov	r3, r2
 80022b8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80022ba:	797b      	ldrb	r3, [r7, #5]
 80022bc:	3307      	adds	r3, #7
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da00      	bge.n	80022c4 <ssd1306_DrawBitmap+0x20>
 80022c2:	3307      	adds	r3, #7
 80022c4:	10db      	asrs	r3, r3, #3
 80022c6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db3e      	blt.n	8002352 <ssd1306_DrawBitmap+0xae>
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80022d8:	d83b      	bhi.n	8002352 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80022da:	2300      	movs	r3, #0
 80022dc:	73bb      	strb	r3, [r7, #14]
 80022de:	e033      	b.n	8002348 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80022e0:	2300      	movs	r3, #0
 80022e2:	737b      	strb	r3, [r7, #13]
 80022e4:	e026      	b.n	8002334 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80022e6:	7b7b      	ldrb	r3, [r7, #13]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e00d      	b.n	8002314 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	7b7a      	ldrb	r2, [r7, #13]
 8002304:	08d2      	lsrs	r2, r2, #3
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4413      	add	r3, r2
 800230a:	461a      	mov	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002318:	2b00      	cmp	r3, #0
 800231a:	da08      	bge.n	800232e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800231c:	79fa      	ldrb	r2, [r7, #7]
 800231e:	7b7b      	ldrb	r3, [r7, #13]
 8002320:	4413      	add	r3, r2
 8002322:	b2db      	uxtb	r3, r3
 8002324:	7f3a      	ldrb	r2, [r7, #28]
 8002326:	79b9      	ldrb	r1, [r7, #6]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fe97 	bl	800205c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800232e:	7b7b      	ldrb	r3, [r7, #13]
 8002330:	3301      	adds	r3, #1
 8002332:	737b      	strb	r3, [r7, #13]
 8002334:	7b7a      	ldrb	r2, [r7, #13]
 8002336:	797b      	ldrb	r3, [r7, #5]
 8002338:	429a      	cmp	r2, r3
 800233a:	d3d4      	bcc.n	80022e6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800233c:	7bbb      	ldrb	r3, [r7, #14]
 800233e:	3301      	adds	r3, #1
 8002340:	73bb      	strb	r3, [r7, #14]
 8002342:	79bb      	ldrb	r3, [r7, #6]
 8002344:	3301      	adds	r3, #1
 8002346:	71bb      	strb	r3, [r7, #6]
 8002348:	7bba      	ldrb	r2, [r7, #14]
 800234a:	7e3b      	ldrb	r3, [r7, #24]
 800234c:	429a      	cmp	r2, r3
 800234e:	d3c7      	bcc.n	80022e0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002350:	e000      	b.n	8002354 <ssd1306_DrawBitmap+0xb0>
        return;
 8002352:	bf00      	nop
}
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002364:	2381      	movs	r3, #129	@ 0x81
 8002366:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fcf2 	bl	8001d54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fcee 	bl	8001d54 <ssd1306_WriteCommand>
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002390:	23af      	movs	r3, #175	@ 0xaf
 8002392:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <ssd1306_SetDisplayOn+0x38>)
 8002396:	2201      	movs	r2, #1
 8002398:	715a      	strb	r2, [r3, #5]
 800239a:	e004      	b.n	80023a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800239c:	23ae      	movs	r3, #174	@ 0xae
 800239e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <ssd1306_SetDisplayOn+0x38>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fcd3 	bl	8001d54 <ssd1306_WriteCommand>
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000a18 	.word	0x20000a18

080023bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <HAL_MspInit+0x4c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002408 <HAL_MspInit+0x4c>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_MspInit+0x4c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	@ (8002408 <HAL_MspInit+0x4c>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a32      	ldr	r2, [pc, #200]	@ (80024f4 <HAL_ADC_MspInit+0xe8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d15e      	bne.n	80024ec <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <HAL_ADC_MspInit+0xec>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	4a30      	ldr	r2, [pc, #192]	@ (80024f8 <HAL_ADC_MspInit+0xec>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	6453      	str	r3, [r2, #68]	@ 0x44
 800243e:	4b2e      	ldr	r3, [pc, #184]	@ (80024f8 <HAL_ADC_MspInit+0xec>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b2a      	ldr	r3, [pc, #168]	@ (80024f8 <HAL_ADC_MspInit+0xec>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4a29      	ldr	r2, [pc, #164]	@ (80024f8 <HAL_ADC_MspInit+0xec>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6313      	str	r3, [r2, #48]	@ 0x30
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <HAL_ADC_MspInit+0xec>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002466:	23ff      	movs	r3, #255	@ 0xff
 8002468:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246a:	2303      	movs	r3, #3
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4820      	ldr	r0, [pc, #128]	@ (80024fc <HAL_ADC_MspInit+0xf0>)
 800247a:	f001 ff1d 	bl	80042b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 8002480:	4a20      	ldr	r2, [pc, #128]	@ (8002504 <HAL_ADC_MspInit+0xf8>)
 8002482:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002484:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 8002486:	2200      	movs	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248a:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002496:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 8002498:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800249c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800249e:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 80024a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024a6:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 80024a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024b4:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024c0:	480f      	ldr	r0, [pc, #60]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 80024c2:	f001 fb4d 	bl	8003b60 <HAL_DMA_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80024cc:	f7ff fa60 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 80024d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_ADC_MspInit+0xf4>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	2012      	movs	r0, #18
 80024e2:	f001 fb06 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024e6:	2012      	movs	r0, #18
 80024e8:	f001 fb1f 	bl	8003b2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024ec:	bf00      	nop
 80024ee:	3728      	adds	r7, #40	@ 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40012000 	.word	0x40012000
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000
 8002500:	200001e4 	.word	0x200001e4
 8002504:	40026410 	.word	0x40026410

08002508 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	@ 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a4f      	ldr	r2, [pc, #316]	@ (8002664 <HAL_I2C_MspInit+0x15c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	f040 8097 	bne.w	800265a <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b4d      	ldr	r3, [pc, #308]	@ (8002668 <HAL_I2C_MspInit+0x160>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	4a4c      	ldr	r2, [pc, #304]	@ (8002668 <HAL_I2C_MspInit+0x160>)
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	6313      	str	r3, [r2, #48]	@ 0x30
 800253c:	4b4a      	ldr	r3, [pc, #296]	@ (8002668 <HAL_I2C_MspInit+0x160>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002548:	23c0      	movs	r3, #192	@ 0xc0
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254c:	2312      	movs	r3, #18
 800254e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002558:	2304      	movs	r3, #4
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4619      	mov	r1, r3
 8002562:	4842      	ldr	r0, [pc, #264]	@ (800266c <HAL_I2C_MspInit+0x164>)
 8002564:	f001 fea8 	bl	80042b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	4b3e      	ldr	r3, [pc, #248]	@ (8002668 <HAL_I2C_MspInit+0x160>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	4a3d      	ldr	r2, [pc, #244]	@ (8002668 <HAL_I2C_MspInit+0x160>)
 8002572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002576:	6413      	str	r3, [r2, #64]	@ 0x40
 8002578:	4b3b      	ldr	r3, [pc, #236]	@ (8002668 <HAL_I2C_MspInit+0x160>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002584:	4b3a      	ldr	r3, [pc, #232]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 8002586:	4a3b      	ldr	r2, [pc, #236]	@ (8002674 <HAL_I2C_MspInit+0x16c>)
 8002588:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800258a:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 800258c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002590:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002592:	4b37      	ldr	r3, [pc, #220]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002598:	4b35      	ldr	r3, [pc, #212]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800259e:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025a6:	4b32      	ldr	r3, [pc, #200]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ac:	4b30      	ldr	r3, [pc, #192]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80025b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025be:	4b2c      	ldr	r3, [pc, #176]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80025c4:	482a      	ldr	r0, [pc, #168]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025c6:	f001 facb 	bl	8003b60 <HAL_DMA_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80025d0:	f7ff f9de 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a26      	ldr	r2, [pc, #152]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80025da:	4a25      	ldr	r2, [pc, #148]	@ (8002670 <HAL_I2C_MspInit+0x168>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 80025e2:	4a26      	ldr	r2, [pc, #152]	@ (800267c <HAL_I2C_MspInit+0x174>)
 80025e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ec:	4b22      	ldr	r3, [pc, #136]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f2:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 80025fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025fe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002600:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002606:	4b1c      	ldr	r3, [pc, #112]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800260c:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002612:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002618:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800261e:	4816      	ldr	r0, [pc, #88]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 8002620:	f001 fa9e 	bl	8003b60 <HAL_DMA_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800262a:	f7ff f9b1 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a11      	ldr	r2, [pc, #68]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 8002632:	635a      	str	r2, [r3, #52]	@ 0x34
 8002634:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <HAL_I2C_MspInit+0x170>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	201f      	movs	r0, #31
 8002640:	f001 fa57 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002644:	201f      	movs	r0, #31
 8002646:	f001 fa70 	bl	8003b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2020      	movs	r0, #32
 8002650:	f001 fa4f 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002654:	2020      	movs	r0, #32
 8002656:	f001 fa68 	bl	8003b2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800265a:	bf00      	nop
 800265c:	3728      	adds	r7, #40	@ 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40005400 	.word	0x40005400
 8002668:	40023800 	.word	0x40023800
 800266c:	40020400 	.word	0x40020400
 8002670:	20000298 	.word	0x20000298
 8002674:	40026010 	.word	0x40026010
 8002678:	200002f8 	.word	0x200002f8
 800267c:	40026028 	.word	0x40026028

08002680 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1a      	ldr	r2, [pc, #104]	@ (80026f8 <HAL_TIM_Base_MspInit+0x78>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d12d      	bne.n	80026ee <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_TIM_Base_MspInit+0x7c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <HAL_TIM_Base_MspInit+0x7c>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a2:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_TIM_Base_MspInit+0x7c>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2018      	movs	r0, #24
 80026b4:	f001 fa1d 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80026b8:	2018      	movs	r0, #24
 80026ba:	f001 fa36 	bl	8003b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	2019      	movs	r0, #25
 80026c4:	f001 fa15 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026c8:	2019      	movs	r0, #25
 80026ca:	f001 fa2e 	bl	8003b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	201a      	movs	r0, #26
 80026d4:	f001 fa0d 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026d8:	201a      	movs	r0, #26
 80026da:	f001 fa26 	bl	8003b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	201b      	movs	r0, #27
 80026e4:	f001 fa05 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80026e8:	201b      	movs	r0, #27
 80026ea:	f001 fa1e 	bl	8003b2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40023800 	.word	0x40023800

08002700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <NMI_Handler+0x4>

08002708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <MemManage_Handler+0x4>

08002718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <BusFault_Handler+0x4>

08002720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <UsageFault_Handler+0x4>

08002728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002756:	f000 fb8d 	bl	8002e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <DMA1_Stream0_IRQHandler+0x10>)
 8002766:	f001 fb23 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000298 	.word	0x20000298

08002774 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <DMA1_Stream1_IRQHandler+0x10>)
 800277a:	f001 fb19 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200002f8 	.word	0x200002f8

08002788 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <ADC_IRQHandler+0x10>)
 800278e:	f000 fbf8 	bl	8002f82 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000019c 	.word	0x2000019c

0800279c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80027a2:	f006 fe21 	bl	80093e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000358 	.word	0x20000358

080027b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027b6:	f006 fe17 	bl	80093e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000358 	.word	0x20000358

080027c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027c8:	4802      	ldr	r0, [pc, #8]	@ (80027d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80027ca:	f006 fe0d 	bl	80093e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000358 	.word	0x20000358

080027d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027dc:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <TIM1_CC_IRQHandler+0x10>)
 80027de:	f006 fe03 	bl	80093e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000358 	.word	0x20000358

080027ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80027f0:	4802      	ldr	r0, [pc, #8]	@ (80027fc <I2C1_EV_IRQHandler+0x10>)
 80027f2:	f002 fcfd 	bl	80051f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000244 	.word	0x20000244

08002800 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002804:	4802      	ldr	r0, [pc, #8]	@ (8002810 <I2C1_ER_IRQHandler+0x10>)
 8002806:	f002 fe64 	bl	80054d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000244 	.word	0x20000244

08002814 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002818:	4802      	ldr	r0, [pc, #8]	@ (8002824 <DMA2_Stream0_IRQHandler+0x10>)
 800281a:	f001 fac9 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200001e4 	.word	0x200001e4

08002828 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800282c:	4802      	ldr	r0, [pc, #8]	@ (8002838 <OTG_FS_IRQHandler+0x10>)
 800282e:	f004 ffd6 	bl	80077de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20001310 	.word	0x20001310

0800283c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002844:	4a14      	ldr	r2, [pc, #80]	@ (8002898 <_sbrk+0x5c>)
 8002846:	4b15      	ldr	r3, [pc, #84]	@ (800289c <_sbrk+0x60>)
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <_sbrk+0x64>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <_sbrk+0x64>)
 800285a:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <_sbrk+0x68>)
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800285e:	4b10      	ldr	r3, [pc, #64]	@ (80028a0 <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d207      	bcs.n	800287c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800286c:	f00b fb24 	bl	800deb8 <__errno>
 8002870:	4603      	mov	r3, r0
 8002872:	220c      	movs	r2, #12
 8002874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e009      	b.n	8002890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800287c:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002882:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <_sbrk+0x64>)
 800288c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20020000 	.word	0x20020000
 800289c:	00000400 	.word	0x00000400
 80028a0:	20000a20 	.word	0x20000a20
 80028a4:	20001b60 	.word	0x20001b60

080028a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <SystemInit+0x20>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b2:	4a05      	ldr	r2, [pc, #20]	@ (80028c8 <SystemInit+0x20>)
 80028b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
 80028d8:	4613      	mov	r3, r2
 80028da:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 80028dc:	78bb      	ldrb	r3, [r7, #2]
 80028de:	3301      	adds	r3, #1
 80028e0:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	795a      	ldrb	r2, [r3, #5]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	795b      	ldrb	r3, [r3, #5]
 80028f8:	1c59      	adds	r1, r3, #1
 80028fa:	b2c8      	uxtb	r0, r1
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	7148      	strb	r0, [r1, #5]
 8002900:	4413      	add	r3, r2
 8002902:	2255      	movs	r2, #85	@ 0x55
 8002904:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	795a      	ldrb	r2, [r3, #5]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	799b      	ldrb	r3, [r3, #6]
 800290e:	4013      	ands	r3, r2
 8002910:	b2da      	uxtb	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	795b      	ldrb	r3, [r3, #5]
 800291e:	1c59      	adds	r1, r3, #1
 8002920:	b2c8      	uxtb	r0, r1
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	7148      	strb	r0, [r1, #5]
 8002926:	4413      	add	r3, r2
 8002928:	224e      	movs	r2, #78	@ 0x4e
 800292a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	795a      	ldrb	r2, [r3, #5]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	799b      	ldrb	r3, [r3, #6]
 8002934:	4013      	ands	r3, r2
 8002936:	b2da      	uxtb	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	795b      	ldrb	r3, [r3, #5]
 8002944:	1c59      	adds	r1, r3, #1
 8002946:	b2c8      	uxtb	r0, r1
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	7148      	strb	r0, [r1, #5]
 800294c:	4413      	add	r3, r2
 800294e:	2245      	movs	r2, #69	@ 0x45
 8002950:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	795a      	ldrb	r2, [r3, #5]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	799b      	ldrb	r3, [r3, #6]
 800295a:	4013      	ands	r3, r2
 800295c:	b2da      	uxtb	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	795b      	ldrb	r3, [r3, #5]
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	b2c8      	uxtb	r0, r1
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	7148      	strb	r0, [r1, #5]
 8002972:	4413      	add	r3, r2
 8002974:	2252      	movs	r2, #82	@ 0x52
 8002976:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	795a      	ldrb	r2, [r3, #5]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	799b      	ldrb	r3, [r3, #6]
 8002980:	4013      	ands	r3, r2
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	795b      	ldrb	r3, [r3, #5]
 8002990:	1c59      	adds	r1, r3, #1
 8002992:	b2c8      	uxtb	r0, r1
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	7148      	strb	r0, [r1, #5]
 8002998:	4413      	add	r3, r2
 800299a:	78ba      	ldrb	r2, [r7, #2]
 800299c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	795a      	ldrb	r2, [r3, #5]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	799b      	ldrb	r3, [r3, #6]
 80029a6:	4013      	ands	r3, r2
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	795b      	ldrb	r3, [r3, #5]
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	b2c8      	uxtb	r0, r1
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	7148      	strb	r0, [r1, #5]
 80029be:	4413      	add	r3, r2
 80029c0:	223a      	movs	r2, #58	@ 0x3a
 80029c2:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	795a      	ldrb	r2, [r3, #5]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	799b      	ldrb	r3, [r3, #6]
 80029cc:	4013      	ands	r3, r2
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	795b      	ldrb	r3, [r3, #5]
 80029dc:	1c59      	adds	r1, r3, #1
 80029de:	b2c8      	uxtb	r0, r1
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	7148      	strb	r0, [r1, #5]
 80029e4:	4413      	add	r3, r2
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	795a      	ldrb	r2, [r3, #5]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	799b      	ldrb	r3, [r3, #6]
 80029f2:	4013      	ands	r3, r2
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2207      	movs	r2, #7
 80029fe:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7a5a      	ldrb	r2, [r3, #9]
 8002a04:	78b9      	ldrb	r1, [r7, #2]
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	404b      	eors	r3, r1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4053      	eors	r3, r2
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7a5b      	ldrb	r3, [r3, #9]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	79db      	ldrb	r3, [r3, #7]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	795b      	ldrb	r3, [r3, #5]
 8002a4a:	1c59      	adds	r1, r3, #1
 8002a4c:	b2c8      	uxtb	r0, r1
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	7148      	strb	r0, [r1, #5]
 8002a52:	4413      	add	r3, r2
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	795a      	ldrb	r2, [r3, #5]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	799b      	ldrb	r3, [r3, #6]
 8002a60:	4013      	ands	r3, r2
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7a5a      	ldrb	r2, [r3, #9]
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	4053      	eors	r3, r2
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7a5b      	ldrb	r3, [r3, #9]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 8002a86:	b490      	push	{r4, r7}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8002a94:	e02c      	b.n	8002af0 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	79db      	ldrb	r3, [r3, #7]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	441a      	add	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	795b      	ldrb	r3, [r3, #5]
 8002ab4:	1c58      	adds	r0, r3, #1
 8002ab6:	b2c4      	uxtb	r4, r0
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	7144      	strb	r4, [r0, #5]
 8002abc:	440b      	add	r3, r1
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	795a      	ldrb	r2, [r3, #5]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	799b      	ldrb	r3, [r3, #6]
 8002aca:	4013      	ands	r3, r2
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	73fa      	strb	r2, [r7, #15]
 8002adc:	461a      	mov	r2, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7a5b      	ldrb	r3, [r3, #9]
 8002ae8:	4053      	eors	r3, r2
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ca      	bne.n	8002a96 <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7a5b      	ldrb	r3, [r3, #9]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc90      	pop	{r4, r7}
 8002b0c:	4770      	bx	lr
	...

08002b10 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	795b      	ldrb	r3, [r3, #5]
 8002b20:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8002b22:	e0e4      	b.n	8002cee <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8002b24:	4b78      	ldr	r3, [pc, #480]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	f200 80c9 	bhi.w	8002cc0 <unerPrtcl_DecodeHeader+0x1b0>
 8002b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <unerPrtcl_DecodeHeader+0x24>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b55 	.word	0x08002b55
 8002b38:	08002b6f 	.word	0x08002b6f
 8002b3c:	08002bad 	.word	0x08002bad
 8002b40:	08002bd9 	.word	0x08002bd9
 8002b44:	08002c05 	.word	0x08002c05
 8002b48:	08002c1b 	.word	0x08002c1b
 8002b4c:	08002cc1 	.word	0x08002cc1
 8002b50:	08002c7d 	.word	0x08002c7d
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	7912      	ldrb	r2, [r2, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b55      	cmp	r3, #85	@ 0x55
 8002b62:	f040 80b1 	bne.w	8002cc8 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 8002b66:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
                }
            break;
 8002b6c:	e0ac      	b.n	8002cc8 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	7912      	ldrb	r2, [r2, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b7c:	d103      	bne.n	8002b86 <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8002b7e:	4b62      	ldr	r3, [pc, #392]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b80:	2202      	movs	r2, #2
 8002b82:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8002b84:	e0a2      	b.n	8002ccc <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	7912      	ldrb	r2, [r2, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b55      	cmp	r3, #85	@ 0x55
 8002b94:	f000 809a 	beq.w	8002ccc <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 8002b98:	4b5b      	ldr	r3, [pc, #364]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	791b      	ldrb	r3, [r3, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	711a      	strb	r2, [r3, #4]
            break;
 8002baa:	e08f      	b.n	8002ccc <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	7912      	ldrb	r2, [r2, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b45      	cmp	r3, #69	@ 0x45
 8002bba:	d103      	bne.n	8002bc4 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8002bbc:	4b52      	ldr	r3, [pc, #328]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002bc2:	e086      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002bc4:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	791b      	ldrb	r3, [r3, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	711a      	strb	r2, [r3, #4]
            break;
 8002bd6:	e07c      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	7912      	ldrb	r2, [r2, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b52      	cmp	r3, #82	@ 0x52
 8002be6:	d103      	bne.n	8002bf0 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 8002be8:	4b47      	ldr	r3, [pc, #284]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002bea:	2204      	movs	r2, #4
 8002bec:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002bee:	e070      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002bf0:	4b45      	ldr	r3, [pc, #276]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	791b      	ldrb	r3, [r3, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	711a      	strb	r2, [r3, #4]
            break;
 8002c02:	e066      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	7912      	ldrb	r2, [r2, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8002c12:	4b3d      	ldr	r3, [pc, #244]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002c14:	2205      	movs	r2, #5
 8002c16:	701a      	strb	r2, [r3, #0]
            break;
 8002c18:	e05b      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	7912      	ldrb	r2, [r2, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b3a      	cmp	r3, #58	@ 0x3a
 8002c28:	d11e      	bne.n	8002c68 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 8002c2a:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	3301      	adds	r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7a1a      	ldrb	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	799b      	ldrb	r3, [r3, #6]
 8002c44:	4013      	ands	r3, r2
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7a5a      	ldrb	r2, [r3, #9]
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	4053      	eors	r3, r2
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002c66:	e034      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	791b      	ldrb	r3, [r3, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	711a      	strb	r2, [r3, #4]
            break;
 8002c7a:	e02a      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7a5a      	ldrb	r2, [r3, #9]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	7909      	ldrb	r1, [r1, #4]
 8002c94:	440b      	add	r3, r1
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4053      	eors	r3, r2
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8002ca0:	e016      	b.n	8002cd0 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	7912      	ldrb	r2, [r2, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7a5b      	ldrb	r3, [r3, #9]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d109      	bne.n	8002cd0 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e01d      	b.n	8002cfc <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <unerPrtcl_DecodeHeader+0x1f8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
            break;
 8002cc6:	e004      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002cc8:	bf00      	nop
 8002cca:	e002      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002cd0:	bf00      	nop
        }
        dataRx->indexR++;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	791b      	ldrb	r3, [r3, #4]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	791a      	ldrb	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	799b      	ldrb	r3, [r3, #6]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	791b      	ldrb	r3, [r3, #4]
 8002cf2:	7bba      	ldrb	r2, [r7, #14]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f47f af15 	bne.w	8002b24 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	20000a24 	.word	0x20000a24

08002d0c <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	22ff      	movs	r2, #255	@ 0xff
 8002d3c:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	22ff      	movs	r2, #255	@ 0xff
 8002d66:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	725a      	strb	r2, [r3, #9]

}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002db4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d80:	f7ff fd92 	bl	80028a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d84:	480c      	ldr	r0, [pc, #48]	@ (8002db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d86:	490d      	ldr	r1, [pc, #52]	@ (8002dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d88:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002daa:	f00b f88b 	bl	800dec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dae:	f7fe fb4b 	bl	8001448 <main>
  bx  lr    
 8002db2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002dc0:	0800f270 	.word	0x0800f270
  ldr r2, =_sbss
 8002dc4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002dc8:	20001b5c 	.word	0x20001b5c

08002dcc <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <DMA1_Stream2_IRQHandler>
	...

08002dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <HAL_Init+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e10 <HAL_Init+0x40>)
 8002dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <HAL_Init+0x40>)
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a07      	ldr	r2, [pc, #28]	@ (8002e10 <HAL_Init+0x40>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f000 fe6f 	bl	8003adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfe:	200f      	movs	r0, #15
 8002e00:	f000 f808 	bl	8002e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e04:	f7ff fada 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00

08002e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e1c:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_InitTick+0x54>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <HAL_InitTick+0x58>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fe87 	bl	8003b46 <HAL_SYSTICK_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00e      	b.n	8002e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d80a      	bhi.n	8002e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f000 fe4f 	bl	8003af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e54:	4a06      	ldr	r2, [pc, #24]	@ (8002e70 <HAL_InitTick+0x5c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000002c 	.word	0x2000002c
 8002e6c:	20000034 	.word	0x20000034
 8002e70:	20000030 	.word	0x20000030

08002e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_IncTick+0x20>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_IncTick+0x24>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	4a04      	ldr	r2, [pc, #16]	@ (8002e98 <HAL_IncTick+0x24>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000034 	.word	0x20000034
 8002e98:	20000a28 	.word	0x20000a28

08002e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	@ (8002eb0 <HAL_GetTick+0x14>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000a28 	.word	0x20000a28

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff ffee 	bl	8002e9c <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d005      	beq.n	8002eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_Delay+0x44>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eda:	bf00      	nop
 8002edc:	f7ff ffde 	bl	8002e9c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d8f7      	bhi.n	8002edc <HAL_Delay+0x28>
  {
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000034 	.word	0x20000034

08002efc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e033      	b.n	8002f7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fa76 	bl	800240c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d118      	bne.n	8002f6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f42:	f023 0302 	bic.w	r3, r3, #2
 8002f46:	f043 0202 	orr.w	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fb6c 	bl	800362c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f6a:	e001      	b.n	8002f70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d049      	beq.n	800304c <HAL_ADC_IRQHandler+0xca>
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d046      	beq.n	800304c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d12b      	bne.n	800303c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d127      	bne.n	800303c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003004:	2b00      	cmp	r3, #0
 8003006:	d119      	bne.n	800303c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0220 	bic.w	r2, r2, #32
 8003016:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fd feab 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f06f 0212 	mvn.w	r2, #18
 800304a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d057      	beq.n	8003112 <HAL_ADC_IRQHandler+0x190>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d054      	beq.n	8003112 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d139      	bne.n	8003102 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12b      	bne.n	8003102 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d124      	bne.n	8003102 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11d      	bne.n	8003102 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d119      	bne.n	8003102 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030dc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fc10 	bl	8003928 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 020c 	mvn.w	r2, #12
 8003110:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003120:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d017      	beq.n	8003158 <HAL_ADC_IRQHandler+0x1d6>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d014      	beq.n	8003158 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d10d      	bne.n	8003158 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f929 	bl	80033a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0201 	mvn.w	r2, #1
 8003156:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003166:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_ADC_IRQHandler+0x218>
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d012      	beq.n	800319a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003178:	f043 0202 	orr.w	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0220 	mvn.w	r2, #32
 8003188:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f912 	bl	80033b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0220 	mvn.w	r2, #32
 8003198:	601a      	str	r2, [r3, #0]
  }
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_Start_DMA+0x22>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0d0      	b.n	8003368 <HAL_ADC_Start_DMA+0x1c4>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d018      	beq.n	800320e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ec:	4b60      	ldr	r3, [pc, #384]	@ (8003370 <HAL_ADC_Start_DMA+0x1cc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a60      	ldr	r2, [pc, #384]	@ (8003374 <HAL_ADC_Start_DMA+0x1d0>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0c9a      	lsrs	r2, r3, #18
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003200:	e002      	b.n	8003208 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3b01      	subs	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f9      	bne.n	8003202 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800321c:	d107      	bne.n	800322e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800322c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 8088 	bne.w	800334e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003268:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800327c:	d106      	bne.n	800328c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f023 0206 	bic.w	r2, r3, #6
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
 800328a:	e002      	b.n	8003292 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800329a:	4b37      	ldr	r3, [pc, #220]	@ (8003378 <HAL_ADC_Start_DMA+0x1d4>)
 800329c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	4a36      	ldr	r2, [pc, #216]	@ (800337c <HAL_ADC_Start_DMA+0x1d8>)
 80032a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	4a35      	ldr	r2, [pc, #212]	@ (8003380 <HAL_ADC_Start_DMA+0x1dc>)
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	4a34      	ldr	r2, [pc, #208]	@ (8003384 <HAL_ADC_Start_DMA+0x1e0>)
 80032b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80032be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80032ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	334c      	adds	r3, #76	@ 0x4c
 80032ea:	4619      	mov	r1, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f000 fce4 	bl	8003cbc <HAL_DMA_Start_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10f      	bne.n	8003324 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d129      	bne.n	8003366 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	e020      	b.n	8003366 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a17      	ldr	r2, [pc, #92]	@ (8003388 <HAL_ADC_Start_DMA+0x1e4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d11b      	bne.n	8003366 <HAL_ADC_Start_DMA+0x1c2>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d114      	bne.n	8003366 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	e00b      	b.n	8003366 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	f043 0210 	orr.w	r2, r3, #16
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003366:	7ffb      	ldrb	r3, [r7, #31]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	2000002c 	.word	0x2000002c
 8003374:	431bde83 	.word	0x431bde83
 8003378:	40012300 	.word	0x40012300
 800337c:	08003825 	.word	0x08003825
 8003380:	080038df 	.word	0x080038df
 8003384:	080038fb 	.word	0x080038fb
 8003388:	40012000 	.word	0x40012000

0800338c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1c>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e113      	b.n	800360c <HAL_ADC_ConfigChannel+0x244>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d925      	bls.n	8003440 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	3b1e      	subs	r3, #30
 800340a:	2207      	movs	r2, #7
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43da      	mvns	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68d9      	ldr	r1, [r3, #12]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	4618      	mov	r0, r3
 800342c:	4603      	mov	r3, r0
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4403      	add	r3, r0
 8003432:	3b1e      	subs	r3, #30
 8003434:	409a      	lsls	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e022      	b.n	8003486 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	2207      	movs	r2, #7
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	400a      	ands	r2, r1
 8003462:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6919      	ldr	r1, [r3, #16]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	4603      	mov	r3, r0
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4403      	add	r3, r0
 800347c:	409a      	lsls	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d824      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	3b05      	subs	r3, #5
 80034a0:	221f      	movs	r2, #31
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	400a      	ands	r2, r1
 80034ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4618      	mov	r0, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b05      	subs	r3, #5
 80034ca:	fa00 f203 	lsl.w	r2, r0, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80034d6:	e04c      	b.n	8003572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d824      	bhi.n	800352a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	3b23      	subs	r3, #35	@ 0x23
 80034f2:	221f      	movs	r2, #31
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43da      	mvns	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	400a      	ands	r2, r1
 8003500:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4618      	mov	r0, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	3b23      	subs	r3, #35	@ 0x23
 800351c:	fa00 f203 	lsl.w	r2, r0, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	631a      	str	r2, [r3, #48]	@ 0x30
 8003528:	e023      	b.n	8003572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3b41      	subs	r3, #65	@ 0x41
 800353c:	221f      	movs	r2, #31
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	400a      	ands	r2, r1
 800354a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	3b41      	subs	r3, #65	@ 0x41
 8003566:	fa00 f203 	lsl.w	r2, r0, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003572:	4b29      	ldr	r3, [pc, #164]	@ (8003618 <HAL_ADC_ConfigChannel+0x250>)
 8003574:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a28      	ldr	r2, [pc, #160]	@ (800361c <HAL_ADC_ConfigChannel+0x254>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10f      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x1d8>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b12      	cmp	r3, #18
 8003586:	d10b      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <HAL_ADC_ConfigChannel+0x254>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d12b      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x23a>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003620 <HAL_ADC_ConfigChannel+0x258>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <HAL_ADC_ConfigChannel+0x1f4>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b11      	cmp	r3, #17
 80035ba:	d122      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a11      	ldr	r2, [pc, #68]	@ (8003620 <HAL_ADC_ConfigChannel+0x258>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d111      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035de:	4b11      	ldr	r3, [pc, #68]	@ (8003624 <HAL_ADC_ConfigChannel+0x25c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a11      	ldr	r2, [pc, #68]	@ (8003628 <HAL_ADC_ConfigChannel+0x260>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	0c9a      	lsrs	r2, r3, #18
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035f4:	e002      	b.n	80035fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f9      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40012300 	.word	0x40012300
 800361c:	40012000 	.word	0x40012000
 8003620:	10000012 	.word	0x10000012
 8003624:	2000002c 	.word	0x2000002c
 8003628:	431bde83 	.word	0x431bde83

0800362c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003634:	4b79      	ldr	r3, [pc, #484]	@ (800381c <ADC_Init+0x1f0>)
 8003636:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	021a      	lsls	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036be:	4a58      	ldr	r2, [pc, #352]	@ (8003820 <ADC_Init+0x1f4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	e00f      	b.n	800372a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003728:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0202 	bic.w	r2, r2, #2
 8003738:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e1b      	ldrb	r3, [r3, #24]
 8003744:	005a      	lsls	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01b      	beq.n	8003790 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003766:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003776:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	3b01      	subs	r3, #1
 8003784:	035a      	lsls	r2, r3, #13
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e007      	b.n	80037a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80037ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	051a      	lsls	r2, r3, #20
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037e2:	025a      	lsls	r2, r3, #9
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	029a      	lsls	r2, r3, #10
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40012300 	.word	0x40012300
 8003820:	0f000001 	.word	0x0f000001

08003824 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800383a:	2b00      	cmp	r3, #0
 800383c:	d13c      	bne.n	80038b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d12b      	bne.n	80038b0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800385c:	2b00      	cmp	r3, #0
 800385e:	d127      	bne.n	80038b0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003866:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800386a:	2b00      	cmp	r3, #0
 800386c:	d006      	beq.n	800387c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003878:	2b00      	cmp	r3, #0
 800387a:	d119      	bne.n	80038b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0220 	bic.w	r2, r2, #32
 800388a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f043 0201 	orr.w	r2, r3, #1
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7fd fa71 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038b6:	e00e      	b.n	80038d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff fd75 	bl	80033b4 <HAL_ADC_ErrorCallback>
}
 80038ca:	e004      	b.n	80038d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fd4d 	bl	800338c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003906:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2240      	movs	r2, #64	@ 0x40
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	f043 0204 	orr.w	r2, r3, #4
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fd4a 	bl	80033b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800394c:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800396c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396e:	4a04      	ldr	r2, [pc, #16]	@ (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	60d3      	str	r3, [r2, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b04      	ldr	r3, [pc, #16]	@ (800399c <__NVIC_GetPriorityGrouping+0x18>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0307 	and.w	r3, r3, #7
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db0b      	blt.n	80039ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4907      	ldr	r1, [pc, #28]	@ (80039d8 <__NVIC_EnableIRQ+0x38>)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2001      	movs	r0, #1
 80039c2:	fa00 f202 	lsl.w	r2, r0, r2
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100

080039dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	@ (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	@ (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	@ 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f1c3 0307 	rsb	r3, r3, #7
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf28      	it	cs
 8003a4e:	2304      	movcs	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d902      	bls.n	8003a60 <NVIC_EncodePriority+0x30>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b03      	subs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <NVIC_EncodePriority+0x32>
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43d9      	mvns	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	4313      	orrs	r3, r2
         );
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	@ 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aa8:	d301      	bcc.n	8003aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00f      	b.n	8003ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aae:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad8 <SysTick_Config+0x40>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab6:	210f      	movs	r1, #15
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	f7ff ff8e 	bl	80039dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac0:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <SysTick_Config+0x40>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac6:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <SysTick_Config+0x40>)
 8003ac8:	2207      	movs	r2, #7
 8003aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	e000e010 	.word	0xe000e010

08003adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff29 	bl	800393c <__NVIC_SetPriorityGrouping>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b04:	f7ff ff3e 	bl	8003984 <__NVIC_GetPriorityGrouping>
 8003b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7ff ff8e 	bl	8003a30 <NVIC_EncodePriority>
 8003b14:	4602      	mov	r2, r0
 8003b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff5d 	bl	80039dc <__NVIC_SetPriority>
}
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4603      	mov	r3, r0
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff31 	bl	80039a0 <__NVIC_EnableIRQ>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ffa2 	bl	8003a98 <SysTick_Config>
 8003b54:	4603      	mov	r3, r0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b6c:	f7ff f996 	bl	8002e9c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e099      	b.n	8003cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9c:	e00f      	b.n	8003bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b9e:	f7ff f97d 	bl	8002e9c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d908      	bls.n	8003bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e078      	b.n	8003cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e8      	bne.n	8003b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4b38      	ldr	r3, [pc, #224]	@ (8003cb8 <HAL_DMA_Init+0x158>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d107      	bne.n	8003c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	4313      	orrs	r3, r2
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0307 	bic.w	r3, r3, #7
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d117      	bne.n	8003c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 faab 	bl	80041c0 <DMA_CheckFifoParam>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2240      	movs	r2, #64	@ 0x40
 8003c74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e016      	b.n	8003cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fa62 	bl	8004154 <DMA_CalcBaseAndBitshift>
 8003c90:	4603      	mov	r3, r0
 8003c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c98:	223f      	movs	r2, #63	@ 0x3f
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	f010803f 	.word	0xf010803f

08003cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_DMA_Start_IT+0x26>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e040      	b.n	8003d64 <HAL_DMA_Start_IT+0xa8>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d12f      	bne.n	8003d56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f9f4 	bl	80040f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d14:	223f      	movs	r2, #63	@ 0x3f
 8003d16:	409a      	lsls	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0216 	orr.w	r2, r2, #22
 8003d2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e005      	b.n	8003d62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	@ 0x80
 8003d84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00c      	b.n	8003da4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8003ff8 <HAL_DMA_IRQHandler+0x248>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a8e      	ldr	r2, [pc, #568]	@ (8003ffc <HAL_DMA_IRQHandler+0x24c>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0a9b      	lsrs	r3, r3, #10
 8003dc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dda:	2208      	movs	r2, #8
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01a      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0204 	bic.w	r2, r2, #4
 8003e02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e08:	2208      	movs	r2, #8
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d012      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	2201      	movs	r2, #1
 8003e40:	409a      	lsls	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	2204      	movs	r2, #4
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	2204      	movs	r2, #4
 8003e76:	409a      	lsls	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d043      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03c      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eaa:	2210      	movs	r2, #16
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d108      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d024      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e01f      	b.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
 8003ef0:	e016      	b.n	8003f20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0208 	bic.w	r2, r2, #8
 8003f0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f24:	2220      	movs	r2, #32
 8003f26:	409a      	lsls	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 808f 	beq.w	8004050 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8087 	beq.w	8004050 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f46:	2220      	movs	r2, #32
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d136      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0216 	bic.w	r2, r2, #22
 8003f68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x1da>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0208 	bic.w	r2, r2, #8
 8003f98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	223f      	movs	r2, #63	@ 0x3f
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d07e      	beq.n	80040bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
        }
        return;
 8003fc6:	e079      	b.n	80040bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01d      	beq.n	8004012 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10d      	bne.n	8004000 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d031      	beq.n	8004050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
 8003ff4:	e02c      	b.n	8004050 <HAL_DMA_IRQHandler+0x2a0>
 8003ff6:	bf00      	nop
 8003ff8:	2000002c 	.word	0x2000002c
 8003ffc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d023      	beq.n	8004050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4798      	blx	r3
 8004010:	e01e      	b.n	8004050 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10f      	bne.n	8004040 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0210 	bic.w	r2, r2, #16
 800402e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004054:	2b00      	cmp	r3, #0
 8004056:	d032      	beq.n	80040be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d022      	beq.n	80040aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2205      	movs	r2, #5
 8004068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3301      	adds	r3, #1
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	429a      	cmp	r2, r3
 8004086:	d307      	bcc.n	8004098 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f2      	bne.n	800407c <HAL_DMA_IRQHandler+0x2cc>
 8004096:	e000      	b.n	800409a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004098:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
 80040ba:	e000      	b.n	80040be <HAL_DMA_IRQHandler+0x30e>
        return;
 80040bc:	bf00      	nop
    }
  }
}
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040d2:	b2db      	uxtb	r3, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004114:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b40      	cmp	r3, #64	@ 0x40
 8004124:	d108      	bne.n	8004138 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004136:	e007      	b.n	8004148 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	3b10      	subs	r3, #16
 8004164:	4a14      	ldr	r2, [pc, #80]	@ (80041b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800416e:	4a13      	ldr	r2, [pc, #76]	@ (80041bc <DMA_CalcBaseAndBitshift+0x68>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d909      	bls.n	8004196 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	1d1a      	adds	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	@ 0x58
 8004194:	e007      	b.n	80041a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	aaaaaaab 	.word	0xaaaaaaab
 80041bc:	0800f224 	.word	0x0800f224

080041c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11f      	bne.n	800421a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d856      	bhi.n	800428e <DMA_CheckFifoParam+0xce>
 80041e0:	a201      	add	r2, pc, #4	@ (adr r2, 80041e8 <DMA_CheckFifoParam+0x28>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	0800420b 	.word	0x0800420b
 80041f0:	080041f9 	.word	0x080041f9
 80041f4:	0800428f 	.word	0x0800428f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d046      	beq.n	8004292 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004208:	e043      	b.n	8004292 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004212:	d140      	bne.n	8004296 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e03d      	b.n	8004296 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004222:	d121      	bne.n	8004268 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d837      	bhi.n	800429a <DMA_CheckFifoParam+0xda>
 800422a:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <DMA_CheckFifoParam+0x70>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004241 	.word	0x08004241
 8004234:	08004247 	.word	0x08004247
 8004238:	08004241 	.word	0x08004241
 800423c:	08004259 	.word	0x08004259
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	e030      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d025      	beq.n	800429e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004256:	e022      	b.n	800429e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004260:	d11f      	bne.n	80042a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004266:	e01c      	b.n	80042a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d903      	bls.n	8004276 <DMA_CheckFifoParam+0xb6>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d003      	beq.n	800427c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004274:	e018      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      break;
 800427a:	e015      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	e00b      	b.n	80042a6 <DMA_CheckFifoParam+0xe6>
      break;
 800428e:	bf00      	nop
 8004290:	e00a      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
 8004294:	e008      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004296:	bf00      	nop
 8004298:	e006      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 800429a:	bf00      	nop
 800429c:	e004      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 80042a6:	bf00      	nop
    }
  } 
  
  return status; 
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop

080042b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	@ 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e159      	b.n	8004588 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042d4:	2201      	movs	r2, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f040 8148 	bne.w	8004582 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d005      	beq.n	800430a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	2b02      	cmp	r3, #2
 8004308:	d130      	bne.n	800436c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004340:	2201      	movs	r2, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 0201 	and.w	r2, r3, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b03      	cmp	r3, #3
 8004376:	d017      	beq.n	80043a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d123      	bne.n	80043fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80a2 	beq.w	8004582 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b57      	ldr	r3, [pc, #348]	@ (80045a0 <HAL_GPIO_Init+0x2e8>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	4a56      	ldr	r2, [pc, #344]	@ (80045a0 <HAL_GPIO_Init+0x2e8>)
 8004448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800444c:	6453      	str	r3, [r2, #68]	@ 0x44
 800444e:	4b54      	ldr	r3, [pc, #336]	@ (80045a0 <HAL_GPIO_Init+0x2e8>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800445a:	4a52      	ldr	r2, [pc, #328]	@ (80045a4 <HAL_GPIO_Init+0x2ec>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	3302      	adds	r3, #2
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	220f      	movs	r2, #15
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a49      	ldr	r2, [pc, #292]	@ (80045a8 <HAL_GPIO_Init+0x2f0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d019      	beq.n	80044ba <HAL_GPIO_Init+0x202>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a48      	ldr	r2, [pc, #288]	@ (80045ac <HAL_GPIO_Init+0x2f4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <HAL_GPIO_Init+0x1fe>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a47      	ldr	r2, [pc, #284]	@ (80045b0 <HAL_GPIO_Init+0x2f8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00d      	beq.n	80044b2 <HAL_GPIO_Init+0x1fa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a46      	ldr	r2, [pc, #280]	@ (80045b4 <HAL_GPIO_Init+0x2fc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d007      	beq.n	80044ae <HAL_GPIO_Init+0x1f6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a45      	ldr	r2, [pc, #276]	@ (80045b8 <HAL_GPIO_Init+0x300>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <HAL_GPIO_Init+0x1f2>
 80044a6:	2304      	movs	r3, #4
 80044a8:	e008      	b.n	80044bc <HAL_GPIO_Init+0x204>
 80044aa:	2307      	movs	r3, #7
 80044ac:	e006      	b.n	80044bc <HAL_GPIO_Init+0x204>
 80044ae:	2303      	movs	r3, #3
 80044b0:	e004      	b.n	80044bc <HAL_GPIO_Init+0x204>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e002      	b.n	80044bc <HAL_GPIO_Init+0x204>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <HAL_GPIO_Init+0x204>
 80044ba:	2300      	movs	r3, #0
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	f002 0203 	and.w	r2, r2, #3
 80044c2:	0092      	lsls	r2, r2, #2
 80044c4:	4093      	lsls	r3, r2
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044cc:	4935      	ldr	r1, [pc, #212]	@ (80045a4 <HAL_GPIO_Init+0x2ec>)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	089b      	lsrs	r3, r3, #2
 80044d2:	3302      	adds	r3, #2
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044da:	4b38      	ldr	r3, [pc, #224]	@ (80045bc <HAL_GPIO_Init+0x304>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044fe:	4a2f      	ldr	r2, [pc, #188]	@ (80045bc <HAL_GPIO_Init+0x304>)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004504:	4b2d      	ldr	r3, [pc, #180]	@ (80045bc <HAL_GPIO_Init+0x304>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004528:	4a24      	ldr	r2, [pc, #144]	@ (80045bc <HAL_GPIO_Init+0x304>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800452e:	4b23      	ldr	r3, [pc, #140]	@ (80045bc <HAL_GPIO_Init+0x304>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004552:	4a1a      	ldr	r2, [pc, #104]	@ (80045bc <HAL_GPIO_Init+0x304>)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004558:	4b18      	ldr	r3, [pc, #96]	@ (80045bc <HAL_GPIO_Init+0x304>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800457c:	4a0f      	ldr	r2, [pc, #60]	@ (80045bc <HAL_GPIO_Init+0x304>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3301      	adds	r3, #1
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b0f      	cmp	r3, #15
 800458c:	f67f aea2 	bls.w	80042d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	3724      	adds	r7, #36	@ 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40013800 	.word	0x40013800
 80045a8:	40020000 	.word	0x40020000
 80045ac:	40020400 	.word	0x40020400
 80045b0:	40020800 	.word	0x40020800
 80045b4:	40020c00 	.word	0x40020c00
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40013c00 	.word	0x40013c00

080045c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	807b      	strh	r3, [r7, #2]
 80045cc:	4613      	mov	r3, r2
 80045ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d0:	787b      	ldrb	r3, [r7, #1]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045dc:	e003      	b.n	80045e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045de:	887b      	ldrh	r3, [r7, #2]
 80045e0:	041a      	lsls	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	619a      	str	r2, [r3, #24]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004604:	887a      	ldrh	r2, [r7, #2]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4013      	ands	r3, r2
 800460a:	041a      	lsls	r2, r3, #16
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	43d9      	mvns	r1, r3
 8004610:	887b      	ldrh	r3, [r7, #2]
 8004612:	400b      	ands	r3, r1
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	619a      	str	r2, [r3, #24]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e12b      	b.n	8004892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fd ff5a 	bl	8002508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	@ 0x24
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800467a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800468a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800468c:	f004 fde6 	bl	800925c <HAL_RCC_GetPCLK1Freq>
 8004690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4a81      	ldr	r2, [pc, #516]	@ (800489c <HAL_I2C_Init+0x274>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d807      	bhi.n	80046ac <HAL_I2C_Init+0x84>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a80      	ldr	r2, [pc, #512]	@ (80048a0 <HAL_I2C_Init+0x278>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bf94      	ite	ls
 80046a4:	2301      	movls	r3, #1
 80046a6:	2300      	movhi	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e006      	b.n	80046ba <HAL_I2C_Init+0x92>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a7d      	ldr	r2, [pc, #500]	@ (80048a4 <HAL_I2C_Init+0x27c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf94      	ite	ls
 80046b4:	2301      	movls	r3, #1
 80046b6:	2300      	movhi	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0e7      	b.n	8004892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a78      	ldr	r2, [pc, #480]	@ (80048a8 <HAL_I2C_Init+0x280>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	0c9b      	lsrs	r3, r3, #18
 80046cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4a6a      	ldr	r2, [pc, #424]	@ (800489c <HAL_I2C_Init+0x274>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d802      	bhi.n	80046fc <HAL_I2C_Init+0xd4>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3301      	adds	r3, #1
 80046fa:	e009      	b.n	8004710 <HAL_I2C_Init+0xe8>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a69      	ldr	r2, [pc, #420]	@ (80048ac <HAL_I2C_Init+0x284>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	3301      	adds	r3, #1
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004722:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	495c      	ldr	r1, [pc, #368]	@ (800489c <HAL_I2C_Init+0x274>)
 800472c:	428b      	cmp	r3, r1
 800472e:	d819      	bhi.n	8004764 <HAL_I2C_Init+0x13c>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e59      	subs	r1, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fbb1 f3f3 	udiv	r3, r1, r3
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004744:	400b      	ands	r3, r1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_I2C_Init+0x138>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1e59      	subs	r1, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fbb1 f3f3 	udiv	r3, r1, r3
 8004758:	3301      	adds	r3, #1
 800475a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475e:	e051      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 8004760:	2304      	movs	r3, #4
 8004762:	e04f      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d111      	bne.n	8004790 <HAL_I2C_Init+0x168>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	440b      	add	r3, r1
 800477a:	fbb0 f3f3 	udiv	r3, r0, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e012      	b.n	80047b6 <HAL_I2C_Init+0x18e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	0099      	lsls	r1, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Init+0x196>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e022      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10e      	bne.n	80047e4 <HAL_I2C_Init+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1e58      	subs	r0, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6859      	ldr	r1, [r3, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	440b      	add	r3, r1
 80047d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e2:	e00f      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e58      	subs	r0, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	0099      	lsls	r1, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	6809      	ldr	r1, [r1, #0]
 8004808:	4313      	orrs	r3, r2
 800480a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6911      	ldr	r1, [r2, #16]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68d2      	ldr	r2, [r2, #12]
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	430b      	orrs	r3, r1
 8004846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	000186a0 	.word	0x000186a0
 80048a0:	001e847f 	.word	0x001e847f
 80048a4:	003d08ff 	.word	0x003d08ff
 80048a8:	431bde83 	.word	0x431bde83
 80048ac:	10624dd3 	.word	0x10624dd3

080048b0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c2:	2b80      	cmp	r3, #128	@ 0x80
 80048c4:	d103      	bne.n	80048ce <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	611a      	str	r2, [r3, #16]
  }
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	461a      	mov	r2, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	460b      	mov	r3, r1
 80048f0:	813b      	strh	r3, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f6:	f7fe fad1 	bl	8002e9c <HAL_GetTick>
 80048fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b20      	cmp	r3, #32
 8004906:	f040 80d9 	bne.w	8004abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	2319      	movs	r3, #25
 8004910:	2201      	movs	r2, #1
 8004912:	496d      	ldr	r1, [pc, #436]	@ (8004ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f002 fb9b 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
 8004922:	e0cc      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_I2C_Mem_Write+0x56>
 800492e:	2302      	movs	r3, #2
 8004930:	e0c5      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d007      	beq.n	8004958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2221      	movs	r2, #33	@ 0x21
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2240      	movs	r2, #64	@ 0x40
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a4d      	ldr	r2, [pc, #308]	@ (8004acc <HAL_I2C_Mem_Write+0x1f0>)
 8004998:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800499a:	88f8      	ldrh	r0, [r7, #6]
 800499c:	893a      	ldrh	r2, [r7, #8]
 800499e:	8979      	ldrh	r1, [r7, #10]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	4603      	mov	r3, r0
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f002 f80e 	bl	80069cc <I2C_RequestMemoryWrite>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d052      	beq.n	8004a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e081      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f002 fc60 	bl	8007284 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00d      	beq.n	80049e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d107      	bne.n	80049e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e06b      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	781a      	ldrb	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d11b      	bne.n	8004a5c <HAL_I2C_Mem_Write+0x180>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d017      	beq.n	8004a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1aa      	bne.n	80049ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f002 fc53 	bl	8007314 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d107      	bne.n	8004a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e016      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	00100002 	.word	0x00100002
 8004acc:	ffff0000 	.word	0xffff0000

08004ad0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	@ 0x30
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aea:	f7fe f9d7 	bl	8002e9c <HAL_GetTick>
 8004aee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	f040 8214 	bne.w	8004f26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2319      	movs	r3, #25
 8004b04:	2201      	movs	r2, #1
 8004b06:	497b      	ldr	r1, [pc, #492]	@ (8004cf4 <HAL_I2C_Mem_Read+0x224>)
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f002 faa1 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
 8004b16:	e207      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_I2C_Mem_Read+0x56>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e200      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d007      	beq.n	8004b4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2222      	movs	r2, #34	@ 0x22
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2240      	movs	r2, #64	@ 0x40
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004cf8 <HAL_I2C_Mem_Read+0x228>)
 8004b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b8e:	88f8      	ldrh	r0, [r7, #6]
 8004b90:	893a      	ldrh	r2, [r7, #8]
 8004b92:	8979      	ldrh	r1, [r7, #10]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f001 ffaa 	bl	8006af8 <I2C_RequestMemoryRead>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e1bc      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d113      	bne.n	8004bde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e190      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d11b      	bne.n	8004c1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e170      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d11b      	bne.n	8004c5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	e150      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c74:	e144      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	f200 80f1 	bhi.w	8004e62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d123      	bne.n	8004cd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f002 fbbb 	bl	8007408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e145      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cce:	e117      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d14e      	bne.n	8004d76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4906      	ldr	r1, [pc, #24]	@ (8004cfc <HAL_I2C_Mem_Read+0x22c>)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f002 f9b4 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e11a      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
 8004cf2:	bf00      	nop
 8004cf4:	00100002 	.word	0x00100002
 8004cf8:	ffff0000 	.word	0xffff0000
 8004cfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d74:	e0c4      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	496c      	ldr	r1, [pc, #432]	@ (8004f30 <HAL_I2C_Mem_Read+0x460>)
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f002 f965 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0cb      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4955      	ldr	r1, [pc, #340]	@ (8004f30 <HAL_I2C_Mem_Read+0x460>)
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f002 f937 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e09d      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e60:	e04e      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f002 face 	bl	8007408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e058      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d124      	bne.n	8004f00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d107      	bne.n	8004ece <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ecc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f aeb6 	bne.w	8004c76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
  }
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3728      	adds	r7, #40	@ 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	00010004 	.word	0x00010004

08004f34 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	@ 0x28
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	817b      	strh	r3, [r7, #10]
 8004f46:	460b      	mov	r3, r1
 8004f48:	813b      	strh	r3, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f52:	f7fd ffa3 	bl	8002e9c <HAL_GetTick>
 8004f56:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	f040 8136 	bne.w	80051d2 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f66:	4b9d      	ldr	r3, [pc, #628]	@ (80051dc <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	4a9c      	ldr	r2, [pc, #624]	@ (80051e0 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	0a1a      	lsrs	r2, r3, #8
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009a      	lsls	r2, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d112      	bne.n	8004fb2 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e110      	b.n	80051d4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d0df      	beq.n	8004f80 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_I2C_Mem_Write_DMA+0x9a>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e102      	b.n	80051d4 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d007      	beq.n	8004ff4 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2221      	movs	r2, #33	@ 0x21
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2240      	movs	r2, #64	@ 0x40
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800501e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005024:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a6c      	ldr	r2, [pc, #432]	@ (80051e4 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8005034:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005036:	897a      	ldrh	r2, [r7, #10]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800503c:	893a      	ldrh	r2, [r7, #8]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80a9 	beq.w	80051aa <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02a      	beq.n	80050b6 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005064:	4a60      	ldr	r2, [pc, #384]	@ (80051e8 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8005066:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506c:	4a5f      	ldr	r2, [pc, #380]	@ (80051ec <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800506e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005074:	2200      	movs	r2, #0
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507c:	2200      	movs	r2, #0
 800507e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005084:	2200      	movs	r2, #0
 8005086:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508c:	2200      	movs	r2, #0
 800508e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	4619      	mov	r1, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3310      	adds	r3, #16
 80050a0:	461a      	mov	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a6:	f7fe fe09 	bl	8003cbc <HAL_DMA_Start_IT>
 80050aa:	4603      	mov	r3, r0
 80050ac:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80050ae:	7efb      	ldrb	r3, [r7, #27]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d166      	bne.n	8005182 <HAL_I2C_Mem_Write_DMA+0x24e>
 80050b4:	e013      	b.n	80050de <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07a      	b.n	80051d4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80050de:	88f8      	ldrh	r0, [r7, #6]
 80050e0:	893a      	ldrh	r2, [r7, #8]
 80050e2:	8979      	ldrh	r1, [r7, #10]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	2323      	movs	r3, #35	@ 0x23
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4603      	mov	r3, r0
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f001 fc6c 	bl	80069cc <I2C_RequestMemoryWrite>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d022      	beq.n	8005140 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fe34 	bl	8003d6c <HAL_DMA_Abort_IT>
 8005104:	4603      	mov	r3, r0
 8005106:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510c:	2200      	movs	r2, #0
 800510e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800511e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e049      	b.n	80051d4 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800516c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800517c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e028      	b.n	80051d4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	f043 0210 	orr.w	r2, r3, #16
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e014      	b.n	80051d4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	2000002c 	.word	0x2000002c
 80051e0:	14f8b589 	.word	0x14f8b589
 80051e4:	ffff0000 	.word	0xffff0000
 80051e8:	08006cc9 	.word	0x08006cc9
 80051ec:	08006e87 	.word	0x08006e87

080051f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005210:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005218:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	2b10      	cmp	r3, #16
 800521e:	d003      	beq.n	8005228 <HAL_I2C_EV_IRQHandler+0x38>
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	f040 80c1 	bne.w	80053aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10d      	bne.n	800525e <HAL_I2C_EV_IRQHandler+0x6e>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005248:	d003      	beq.n	8005252 <HAL_I2C_EV_IRQHandler+0x62>
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005250:	d101      	bne.n	8005256 <HAL_I2C_EV_IRQHandler+0x66>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_I2C_EV_IRQHandler+0x68>
 8005256:	2300      	movs	r3, #0
 8005258:	2b01      	cmp	r3, #1
 800525a:	f000 8132 	beq.w	80054c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <HAL_I2C_EV_IRQHandler+0x92>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	0a5b      	lsrs	r3, r3, #9
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f002 f953 	bl	8007520 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fd87 	bl	8005d8e <I2C_Master_SB>
 8005280:	e092      	b.n	80053a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	08db      	lsrs	r3, r3, #3
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	0a5b      	lsrs	r3, r3, #9
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fdfd 	bl	8005e9a <I2C_Master_ADD10>
 80052a0:	e082      	b.n	80053a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	0a5b      	lsrs	r3, r3, #9
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fe17 	bl	8005eee <I2C_Master_ADDR>
 80052c0:	e072      	b.n	80053a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d03b      	beq.n	8005346 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052dc:	f000 80f3 	beq.w	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	09db      	lsrs	r3, r3, #7
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00f      	beq.n	800530c <HAL_I2C_EV_IRQHandler+0x11c>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	0a9b      	lsrs	r3, r3, #10
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d009      	beq.n	800530c <HAL_I2C_EV_IRQHandler+0x11c>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	089b      	lsrs	r3, r3, #2
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f9df 	bl	80056c8 <I2C_MasterTransmit_TXE>
 800530a:	e04d      	b.n	80053a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	089b      	lsrs	r3, r3, #2
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80d6 	beq.w	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	0a5b      	lsrs	r3, r3, #9
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80cf 	beq.w	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	2b21      	cmp	r3, #33	@ 0x21
 800532c:	d103      	bne.n	8005336 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa66 	bl	8005800 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005334:	e0c7      	b.n	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	2b40      	cmp	r3, #64	@ 0x40
 800533a:	f040 80c4 	bne.w	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fad4 	bl	80058ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005344:	e0bf      	b.n	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005354:	f000 80b7 	beq.w	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00f      	beq.n	8005384 <HAL_I2C_EV_IRQHandler+0x194>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	0a9b      	lsrs	r3, r3, #10
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <HAL_I2C_EV_IRQHandler+0x194>
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fb4d 	bl	8005a1c <I2C_MasterReceive_RXNE>
 8005382:	e011      	b.n	80053a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	089b      	lsrs	r3, r3, #2
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 809a 	beq.w	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	0a5b      	lsrs	r3, r3, #9
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 8093 	beq.w	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fc03 	bl	8005bac <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053a6:	e08e      	b.n	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80053a8:	e08d      	b.n	80054c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e007      	b.n	80053cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d012      	beq.n	80053fe <HAL_I2C_EV_IRQHandler+0x20e>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	0a5b      	lsrs	r3, r3, #9
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00c      	beq.n	80053fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80053f4:	69b9      	ldr	r1, [r7, #24]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 ffc8 	bl	800638c <I2C_Slave_ADDR>
 80053fc:	e066      	b.n	80054cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_I2C_EV_IRQHandler+0x22e>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	0a5b      	lsrs	r3, r3, #9
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 f802 	bl	8006420 <I2C_Slave_STOPF>
 800541c:	e056      	b.n	80054cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800541e:	7bbb      	ldrb	r3, [r7, #14]
 8005420:	2b21      	cmp	r3, #33	@ 0x21
 8005422:	d002      	beq.n	800542a <HAL_I2C_EV_IRQHandler+0x23a>
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	2b29      	cmp	r3, #41	@ 0x29
 8005428:	d125      	bne.n	8005476 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	09db      	lsrs	r3, r3, #7
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00f      	beq.n	8005456 <HAL_I2C_EV_IRQHandler+0x266>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	0a9b      	lsrs	r3, r3, #10
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_I2C_EV_IRQHandler+0x266>
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fede 	bl	8006210 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005454:	e039      	b.n	80054ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d033      	beq.n	80054ca <HAL_I2C_EV_IRQHandler+0x2da>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	0a5b      	lsrs	r3, r3, #9
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02d      	beq.n	80054ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 ff0b 	bl	800628a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005474:	e029      	b.n	80054ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	099b      	lsrs	r3, r3, #6
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00f      	beq.n	80054a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	0a9b      	lsrs	r3, r3, #10
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 ff16 	bl	80062cc <I2C_SlaveReceive_RXNE>
 80054a0:	e014      	b.n	80054cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	089b      	lsrs	r3, r3, #2
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00e      	beq.n	80054cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	0a5b      	lsrs	r3, r3, #9
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 ff44 	bl	8006348 <I2C_SlaveReceive_BTF>
 80054c0:	e004      	b.n	80054cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80054c2:	bf00      	nop
 80054c4:	e002      	b.n	80054cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054c6:	bf00      	nop
 80054c8:	e000      	b.n	80054cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b08a      	sub	sp, #40	@ 0x28
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00e      	beq.n	8005520 <HAL_I2C_ER_IRQHandler+0x4e>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d008      	beq.n	8005520 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800551e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	0a5b      	lsrs	r3, r3, #9
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <HAL_I2C_ER_IRQHandler+0x78>
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	f043 0302 	orr.w	r3, r3, #2
 800553e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005548:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	0a9b      	lsrs	r3, r3, #10
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d03f      	beq.n	80055d6 <HAL_I2C_ER_IRQHandler+0x104>
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d039      	beq.n	80055d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005562:	7efb      	ldrb	r3, [r7, #27]
 8005564:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005574:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800557c:	7ebb      	ldrb	r3, [r7, #26]
 800557e:	2b20      	cmp	r3, #32
 8005580:	d112      	bne.n	80055a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10f      	bne.n	80055a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b21      	cmp	r3, #33	@ 0x21
 800558c:	d008      	beq.n	80055a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	2b29      	cmp	r3, #41	@ 0x29
 8005592:	d005      	beq.n	80055a0 <HAL_I2C_ER_IRQHandler+0xce>
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	2b28      	cmp	r3, #40	@ 0x28
 8005598:	d106      	bne.n	80055a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b21      	cmp	r3, #33	@ 0x21
 800559e:	d103      	bne.n	80055a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 f86d 	bl	8006680 <I2C_Slave_AF>
 80055a6:	e016      	b.n	80055d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80055ba:	7efb      	ldrb	r3, [r7, #27]
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d002      	beq.n	80055c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80055c0:	7efb      	ldrb	r3, [r7, #27]
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d107      	bne.n	80055d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	0adb      	lsrs	r3, r3, #11
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00e      	beq.n	8005600 <HAL_I2C_ER_IRQHandler+0x12e>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	f043 0308 	orr.w	r3, r3, #8
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80055fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f001 f8a8 	bl	8006768 <I2C_ITError>
  }
}
 8005618:	bf00      	nop
 800561a:	3728      	adds	r7, #40	@ 0x28
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
 800567c:	4613      	mov	r3, r2
 800567e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d150      	bne.n	8005790 <I2C_MasterTransmit_TXE+0xc8>
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b21      	cmp	r3, #33	@ 0x21
 80056f2:	d14d      	bne.n	8005790 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d01d      	beq.n	8005736 <I2C_MasterTransmit_TXE+0x6e>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d01a      	beq.n	8005736 <I2C_MasterTransmit_TXE+0x6e>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005706:	d016      	beq.n	8005736 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005716:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2211      	movs	r2, #17
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ff76 	bl	8005620 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005734:	e060      	b.n	80057f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005744:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005754:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b40      	cmp	r3, #64	@ 0x40
 800576e:	d107      	bne.n	8005780 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fb fb2d 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800577e:	e03b      	b.n	80057f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff49 	bl	8005620 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800578e:	e033      	b.n	80057f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b21      	cmp	r3, #33	@ 0x21
 8005794:	d005      	beq.n	80057a2 <I2C_MasterTransmit_TXE+0xda>
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	d12d      	bne.n	80057f8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b22      	cmp	r3, #34	@ 0x22
 80057a0:	d12a      	bne.n	80057f8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d108      	bne.n	80057be <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80057bc:	e01c      	b.n	80057f8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b40      	cmp	r3, #64	@ 0x40
 80057c8:	d103      	bne.n	80057d2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f88e 	bl	80058ec <I2C_MemoryTransmit_TXE_BTF>
}
 80057d0:	e012      	b.n	80057f8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	781a      	ldrb	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80057f6:	e7ff      	b.n	80057f8 <I2C_MasterTransmit_TXE+0x130>
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b21      	cmp	r3, #33	@ 0x21
 8005818:	d164      	bne.n	80058e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	781a      	ldrb	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005848:	e04c      	b.n	80058e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d01d      	beq.n	800588c <I2C_MasterTransmit_BTF+0x8c>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b20      	cmp	r3, #32
 8005854:	d01a      	beq.n	800588c <I2C_MasterTransmit_BTF+0x8c>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800585c:	d016      	beq.n	800588c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800586c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2211      	movs	r2, #17
 8005872:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fecb 	bl	8005620 <HAL_I2C_MasterTxCpltCallback>
}
 800588a:	e02b      	b.n	80058e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800589a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b40      	cmp	r3, #64	@ 0x40
 80058c4:	d107      	bne.n	80058d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fa82 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 80058d4:	e006      	b.n	80058e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fe9e 	bl	8005620 <HAL_I2C_MasterTxCpltCallback>
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005900:	2b00      	cmp	r3, #0
 8005902:	d11d      	bne.n	8005940 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10b      	bne.n	8005924 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005910:	b2da      	uxtb	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005922:	e077      	b.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005928:	b29b      	uxth	r3, r3
 800592a:	121b      	asrs	r3, r3, #8
 800592c:	b2da      	uxtb	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800593e:	e069      	b.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10b      	bne.n	8005960 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594c:	b2da      	uxtb	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800595e:	e059      	b.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005964:	2b02      	cmp	r3, #2
 8005966:	d152      	bne.n	8005a0e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b22      	cmp	r3, #34	@ 0x22
 800596c:	d10d      	bne.n	800598a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800597c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005988:	e044      	b.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d015      	beq.n	80059c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b21      	cmp	r3, #33	@ 0x21
 8005998:	d112      	bne.n	80059c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	781a      	ldrb	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80059be:	e029      	b.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d124      	bne.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b21      	cmp	r3, #33	@ 0x21
 80059ce:	d121      	bne.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fb f9e6 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 8005a0c:	e002      	b.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fe ff4e 	bl	80048b0 <I2C_Flush_DR>
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b22      	cmp	r3, #34	@ 0x22
 8005a2e:	f040 80b9 	bne.w	8005ba4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d921      	bls.n	8005a8a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	f040 8096 	bne.w	8005ba4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a86:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005a88:	e08c      	b.n	8005ba4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d07f      	beq.n	8005b92 <I2C_MasterReceive_RXNE+0x176>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d002      	beq.n	8005a9e <I2C_MasterReceive_RXNE+0x82>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d179      	bne.n	8005b92 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f001 fc80 	bl	80073a4 <I2C_WaitOnSTOPRequestThroughIT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d14c      	bne.n	8005b44 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ab8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ac8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b40      	cmp	r3, #64	@ 0x40
 8005b02:	d10a      	bne.n	8005b1a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb f970 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b18:	e044      	b.n	8005ba4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d002      	beq.n	8005b2e <I2C_MasterReceive_RXNE+0x112>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d103      	bne.n	8005b36 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b34:	e002      	b.n	8005b3c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2212      	movs	r2, #18
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fd79 	bl	8005634 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b42:	e02f      	b.n	8005ba4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fd88 	bl	80056a0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b90:	e008      	b.n	8005ba4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ba0:	605a      	str	r2, [r3, #4]
}
 8005ba2:	e7ff      	b.n	8005ba4 <I2C_MasterReceive_RXNE+0x188>
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d11b      	bne.n	8005bfc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005bfa:	e0c4      	b.n	8005d86 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d129      	bne.n	8005c5a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c14:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d00a      	beq.n	8005c32 <I2C_MasterReceive_BTF+0x86>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d007      	beq.n	8005c32 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c30:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005c58:	e095      	b.n	8005d86 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d17d      	bne.n	8005d60 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d002      	beq.n	8005c70 <I2C_MasterReceive_BTF+0xc4>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d108      	bne.n	8005c82 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e016      	b.n	8005cb0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d002      	beq.n	8005c8e <I2C_MasterReceive_BTF+0xe2>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d108      	bne.n	8005ca0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e007      	b.n	8005cb0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005d0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b40      	cmp	r3, #64	@ 0x40
 8005d1e:	d10a      	bne.n	8005d36 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb f862 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 8005d34:	e027      	b.n	8005d86 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d002      	beq.n	8005d4a <I2C_MasterReceive_BTF+0x19e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d103      	bne.n	8005d52 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d50:	e002      	b.n	8005d58 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2212      	movs	r2, #18
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff fc6b 	bl	8005634 <HAL_I2C_MasterRxCpltCallback>
}
 8005d5e:	e012      	b.n	8005d86 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b40      	cmp	r3, #64	@ 0x40
 8005da0:	d117      	bne.n	8005dd2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005dba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005dbc:	e067      	b.n	8005e8e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	611a      	str	r2, [r3, #16]
}
 8005dd0:	e05d      	b.n	8005e8e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dda:	d133      	bne.n	8005e44 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b21      	cmp	r3, #33	@ 0x21
 8005de6:	d109      	bne.n	8005dfc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005df8:	611a      	str	r2, [r3, #16]
 8005dfa:	e008      	b.n	8005e0e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <I2C_Master_SB+0x92>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d108      	bne.n	8005e32 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d032      	beq.n	8005e8e <I2C_Master_SB+0x100>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d02d      	beq.n	8005e8e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e40:	605a      	str	r2, [r3, #4]
}
 8005e42:	e024      	b.n	8005e8e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10e      	bne.n	8005e6a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	11db      	asrs	r3, r3, #7
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f003 0306 	and.w	r3, r3, #6
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f063 030f 	orn	r3, r3, #15
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	611a      	str	r2, [r3, #16]
}
 8005e68:	e011      	b.n	8005e8e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10d      	bne.n	8005e8e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	11db      	asrs	r3, r3, #7
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 0306 	and.w	r3, r3, #6
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f063 030e 	orn	r3, r3, #14
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <I2C_Master_ADD10+0x26>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d108      	bne.n	8005ed2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00c      	beq.n	8005ee2 <I2C_Master_ADD10+0x48>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ee0:	605a      	str	r2, [r3, #4]
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b091      	sub	sp, #68	@ 0x44
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005efc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b22      	cmp	r3, #34	@ 0x22
 8005f16:	f040 8169 	bne.w	80061ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <I2C_Master_ADDR+0x54>
 8005f22:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f26:	2b40      	cmp	r3, #64	@ 0x40
 8005f28:	d10b      	bne.n	8005f42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	e160      	b.n	8006204 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11d      	bne.n	8005f86 <I2C_Master_ADDR+0x98>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f52:	d118      	bne.n	8005f86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f54:	2300      	movs	r3, #0
 8005f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f84:	e13e      	b.n	8006204 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d113      	bne.n	8005fb8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f90:	2300      	movs	r3, #0
 8005f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e115      	b.n	80061e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	f040 808a 	bne.w	80060d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fca:	d137      	bne.n	800603c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fda:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fea:	d113      	bne.n	8006014 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ffa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	e0e7      	b.n	80061e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006014:	2300      	movs	r3, #0
 8006016:	623b      	str	r3, [r7, #32]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	623b      	str	r3, [r7, #32]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e0d3      	b.n	80061e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	2b08      	cmp	r3, #8
 8006040:	d02e      	beq.n	80060a0 <I2C_Master_ADDR+0x1b2>
 8006042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006044:	2b20      	cmp	r3, #32
 8006046:	d02b      	beq.n	80060a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800604a:	2b12      	cmp	r3, #18
 800604c:	d102      	bne.n	8006054 <I2C_Master_ADDR+0x166>
 800604e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006050:	2b01      	cmp	r3, #1
 8006052:	d125      	bne.n	80060a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006056:	2b04      	cmp	r3, #4
 8006058:	d00e      	beq.n	8006078 <I2C_Master_ADDR+0x18a>
 800605a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605c:	2b02      	cmp	r3, #2
 800605e:	d00b      	beq.n	8006078 <I2C_Master_ADDR+0x18a>
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	2b10      	cmp	r3, #16
 8006064:	d008      	beq.n	8006078 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e007      	b.n	8006088 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006086:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	e0a1      	b.n	80061e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e085      	b.n	80061e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d14d      	bne.n	800617e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d016      	beq.n	8006116 <I2C_Master_ADDR+0x228>
 80060e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d013      	beq.n	8006116 <I2C_Master_ADDR+0x228>
 80060ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d010      	beq.n	8006116 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006102:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e007      	b.n	8006126 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006124:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006134:	d117      	bne.n	8006166 <I2C_Master_ADDR+0x278>
 8006136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006138:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800613c:	d00b      	beq.n	8006156 <I2C_Master_ADDR+0x268>
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	2b01      	cmp	r3, #1
 8006142:	d008      	beq.n	8006156 <I2C_Master_ADDR+0x268>
 8006144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006146:	2b08      	cmp	r3, #8
 8006148:	d005      	beq.n	8006156 <I2C_Master_ADDR+0x268>
 800614a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614c:	2b10      	cmp	r3, #16
 800614e:	d002      	beq.n	8006156 <I2C_Master_ADDR+0x268>
 8006150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006152:	2b20      	cmp	r3, #32
 8006154:	d107      	bne.n	8006166 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006164:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	e032      	b.n	80061e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800618c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800619c:	d117      	bne.n	80061ce <I2C_Master_ADDR+0x2e0>
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061a4:	d00b      	beq.n	80061be <I2C_Master_ADDR+0x2d0>
 80061a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d008      	beq.n	80061be <I2C_Master_ADDR+0x2d0>
 80061ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d005      	beq.n	80061be <I2C_Master_ADDR+0x2d0>
 80061b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d002      	beq.n	80061be <I2C_Master_ADDR+0x2d0>
 80061b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d107      	bne.n	80061ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80061cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80061ea:	e00b      	b.n	8006204 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
}
 8006202:	e7ff      	b.n	8006204 <I2C_Master_ADDR+0x316>
 8006204:	bf00      	nop
 8006206:	3744      	adds	r7, #68	@ 0x44
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800621e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d02b      	beq.n	8006282 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d114      	bne.n	8006282 <I2C_SlaveTransmit_TXE+0x72>
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b29      	cmp	r3, #41	@ 0x29
 800625c:	d111      	bne.n	8006282 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800626c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2221      	movs	r2, #33	@ 0x21
 8006272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2228      	movs	r2, #40	@ 0x28
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff f9e3 	bl	8005648 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d011      	beq.n	80062c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d02c      	beq.n	8006340 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d114      	bne.n	8006340 <I2C_SlaveReceive_RXNE+0x74>
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b2a      	cmp	r3, #42	@ 0x2a
 800631a:	d111      	bne.n	8006340 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800632a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2222      	movs	r2, #34	@ 0x22
 8006330:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2228      	movs	r2, #40	@ 0x28
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff f98e 	bl	800565c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d012      	beq.n	8006380 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80063a6:	2b28      	cmp	r3, #40	@ 0x28
 80063a8:	d127      	bne.n	80063fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	089b      	lsrs	r3, r3, #2
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80063c6:	2301      	movs	r3, #1
 80063c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	09db      	lsrs	r3, r3, #7
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	81bb      	strh	r3, [r7, #12]
 80063dc:	e002      	b.n	80063e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80063ec:	89ba      	ldrh	r2, [r7, #12]
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff f93c 	bl	8005670 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80063f8:	e00e      	b.n	8006418 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800642e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800643e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006440:	2300      	movs	r3, #0
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	60bb      	str	r3, [r7, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800646c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647c:	d172      	bne.n	8006564 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b22      	cmp	r3, #34	@ 0x22
 8006482:	d002      	beq.n	800648a <I2C_Slave_STOPF+0x6a>
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b2a      	cmp	r3, #42	@ 0x2a
 8006488:	d135      	bne.n	80064f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a6:	f043 0204 	orr.w	r2, r3, #4
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fd fdfe 	bl	80040c4 <HAL_DMA_GetState>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d049      	beq.n	8006562 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d2:	4a69      	ldr	r2, [pc, #420]	@ (8006678 <I2C_Slave_STOPF+0x258>)
 80064d4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fd fc46 	bl	8003d6c <HAL_DMA_Abort_IT>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d03d      	beq.n	8006562 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80064f0:	4610      	mov	r0, r2
 80064f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064f4:	e035      	b.n	8006562 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	f043 0204 	orr.w	r2, r3, #4
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006528:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652e:	4618      	mov	r0, r3
 8006530:	f7fd fdc8 	bl	80040c4 <HAL_DMA_GetState>
 8006534:	4603      	mov	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d014      	beq.n	8006564 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653e:	4a4e      	ldr	r2, [pc, #312]	@ (8006678 <I2C_Slave_STOPF+0x258>)
 8006540:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006546:	4618      	mov	r0, r3
 8006548:	f7fd fc10 	bl	8003d6c <HAL_DMA_Abort_IT>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800655c:	4610      	mov	r0, r2
 800655e:	4798      	blx	r3
 8006560:	e000      	b.n	8006564 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006562:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d03e      	beq.n	80065ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b04      	cmp	r3, #4
 800657a:	d112      	bne.n	80065a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b40      	cmp	r3, #64	@ 0x40
 80065ae:	d112      	bne.n	80065d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	f043 0204 	orr.w	r2, r3, #4
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f8b7 	bl	8006768 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80065fa:	e039      	b.n	8006670 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006600:	d109      	bne.n	8006616 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2228      	movs	r2, #40	@ 0x28
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff f823 	bl	800565c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b28      	cmp	r3, #40	@ 0x28
 8006620:	d111      	bne.n	8006646 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a15      	ldr	r2, [pc, #84]	@ (800667c <I2C_Slave_STOPF+0x25c>)
 8006626:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff f824 	bl	800568c <HAL_I2C_ListenCpltCallback>
}
 8006644:	e014      	b.n	8006670 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664a:	2b22      	cmp	r3, #34	@ 0x22
 800664c:	d002      	beq.n	8006654 <I2C_Slave_STOPF+0x234>
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	2b22      	cmp	r3, #34	@ 0x22
 8006652:	d10d      	bne.n	8006670 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7fe fff6 	bl	800565c <HAL_I2C_SlaveRxCpltCallback>
}
 8006670:	bf00      	nop
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	08006f01 	.word	0x08006f01
 800667c:	ffff0000 	.word	0xffff0000

08006680 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800668e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d002      	beq.n	80066a2 <I2C_Slave_AF+0x22>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d129      	bne.n	80066f6 <I2C_Slave_AF+0x76>
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b28      	cmp	r3, #40	@ 0x28
 80066a6:	d126      	bne.n	80066f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a2e      	ldr	r2, [pc, #184]	@ (8006764 <I2C_Slave_AF+0xe4>)
 80066ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fe ffcc 	bl	800568c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80066f4:	e031      	b.n	800675a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b21      	cmp	r3, #33	@ 0x21
 80066fa:	d129      	bne.n	8006750 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a19      	ldr	r2, [pc, #100]	@ (8006764 <I2C_Slave_AF+0xe4>)
 8006700:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2221      	movs	r2, #33	@ 0x21
 8006706:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006726:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006730:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006740:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fe f8b4 	bl	80048b0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fe ff7d 	bl	8005648 <HAL_I2C_SlaveTxCpltCallback>
}
 800674e:	e004      	b.n	800675a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006758:	615a      	str	r2, [r3, #20]
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	ffff0000 	.word	0xffff0000

08006768 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006776:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800677e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	2b10      	cmp	r3, #16
 8006784:	d002      	beq.n	800678c <I2C_ITError+0x24>
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	2b40      	cmp	r3, #64	@ 0x40
 800678a:	d10a      	bne.n	80067a2 <I2C_ITError+0x3a>
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	2b22      	cmp	r3, #34	@ 0x22
 8006790:	d107      	bne.n	80067a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067a8:	2b28      	cmp	r3, #40	@ 0x28
 80067aa:	d107      	bne.n	80067bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2228      	movs	r2, #40	@ 0x28
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80067ba:	e015      	b.n	80067e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ca:	d00a      	beq.n	80067e2 <I2C_ITError+0x7a>
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b60      	cmp	r3, #96	@ 0x60
 80067d0:	d007      	beq.n	80067e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f6:	d162      	bne.n	80068be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006806:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	d020      	beq.n	8006858 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800681a:	4a6a      	ldr	r2, [pc, #424]	@ (80069c4 <I2C_ITError+0x25c>)
 800681c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006822:	4618      	mov	r0, r3
 8006824:	f7fd faa2 	bl	8003d6c <HAL_DMA_Abort_IT>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 8089 	beq.w	8006942 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006852:	4610      	mov	r0, r2
 8006854:	4798      	blx	r3
 8006856:	e074      	b.n	8006942 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685c:	4a59      	ldr	r2, [pc, #356]	@ (80069c4 <I2C_ITError+0x25c>)
 800685e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006864:	4618      	mov	r0, r3
 8006866:	f7fd fa81 	bl	8003d6c <HAL_DMA_Abort_IT>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d068      	beq.n	8006942 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687a:	2b40      	cmp	r3, #64	@ 0x40
 800687c:	d10b      	bne.n	8006896 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80068b8:	4610      	mov	r0, r2
 80068ba:	4798      	blx	r3
 80068bc:	e041      	b.n	8006942 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b60      	cmp	r3, #96	@ 0x60
 80068c8:	d125      	bne.n	8006916 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	d10b      	bne.n	80068fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fe fed0 	bl	80056b4 <HAL_I2C_AbortCpltCallback>
 8006914:	e015      	b.n	8006942 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b40      	cmp	r3, #64	@ 0x40
 8006922:	d10b      	bne.n	800693c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fe feaf 	bl	80056a0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10e      	bne.n	8006970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800697e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006986:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b04      	cmp	r3, #4
 8006992:	d113      	bne.n	80069bc <I2C_ITError+0x254>
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b28      	cmp	r3, #40	@ 0x28
 8006998:	d110      	bne.n	80069bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a0a      	ldr	r2, [pc, #40]	@ (80069c8 <I2C_ITError+0x260>)
 800699e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fe fe68 	bl	800568c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	08006f01 	.word	0x08006f01
 80069c8:	ffff0000 	.word	0xffff0000

080069cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	461a      	mov	r2, r3
 80069da:	4603      	mov	r3, r0
 80069dc:	817b      	strh	r3, [r7, #10]
 80069de:	460b      	mov	r3, r1
 80069e0:	813b      	strh	r3, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fb24 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a1c:	d103      	bne.n	8006a26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e05f      	b.n	8006aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a2a:	897b      	ldrh	r3, [r7, #10]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	6a3a      	ldr	r2, [r7, #32]
 8006a3e:	492d      	ldr	r1, [pc, #180]	@ (8006af4 <I2C_RequestMemoryWrite+0x128>)
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fb7f 	bl	8007144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e04c      	b.n	8006aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a68:	6a39      	ldr	r1, [r7, #32]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fc0a 	bl	8007284 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00d      	beq.n	8006a92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d107      	bne.n	8006a8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e02b      	b.n	8006aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d105      	bne.n	8006aa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a98:	893b      	ldrh	r3, [r7, #8]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	611a      	str	r2, [r3, #16]
 8006aa2:	e021      	b.n	8006ae8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	0a1b      	lsrs	r3, r3, #8
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab4:	6a39      	ldr	r1, [r7, #32]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fbe4 	bl	8007284 <I2C_WaitOnTXEFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00d      	beq.n	8006ade <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d107      	bne.n	8006ada <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ad8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e005      	b.n	8006aea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ade:	893b      	ldrh	r3, [r7, #8]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	00010002 	.word	0x00010002

08006af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	817b      	strh	r3, [r7, #10]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	813b      	strh	r3, [r7, #8]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fa86 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b58:	d103      	bne.n	8006b62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e0aa      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b66:	897b      	ldrh	r3, [r7, #10]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	6a3a      	ldr	r2, [r7, #32]
 8006b7a:	4952      	ldr	r1, [pc, #328]	@ (8006cc4 <I2C_RequestMemoryRead+0x1cc>)
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fae1 	bl	8007144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e097      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba4:	6a39      	ldr	r1, [r7, #32]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fb6c 	bl	8007284 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00d      	beq.n	8006bce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d107      	bne.n	8006bca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e076      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d105      	bne.n	8006be0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd4:	893b      	ldrh	r3, [r7, #8]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	611a      	str	r2, [r3, #16]
 8006bde:	e021      	b.n	8006c24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006be0:	893b      	ldrh	r3, [r7, #8]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf0:	6a39      	ldr	r1, [r7, #32]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fb46 	bl	8007284 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d107      	bne.n	8006c16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e050      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c1a:	893b      	ldrh	r3, [r7, #8]
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c26:	6a39      	ldr	r1, [r7, #32]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fb2b 	bl	8007284 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d107      	bne.n	8006c4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e035      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f9ef 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00d      	beq.n	8006c94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c86:	d103      	bne.n	8006c90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e013      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c94:	897b      	ldrh	r3, [r7, #10]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	4906      	ldr	r1, [pc, #24]	@ (8006cc4 <I2C_RequestMemoryRead+0x1cc>)
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fa4a 	bl	8007144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	00010002 	.word	0x00010002

08006cc8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cdc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ce4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006cfa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d08:	2200      	movs	r2, #0
 8006d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	2200      	movs	r2, #0
 8006d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006d1c:	7cfb      	ldrb	r3, [r7, #19]
 8006d1e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006d22:	2b21      	cmp	r3, #33	@ 0x21
 8006d24:	d007      	beq.n	8006d36 <I2C_DMAXferCplt+0x6e>
 8006d26:	7cfb      	ldrb	r3, [r7, #19]
 8006d28:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006d2c:	2b22      	cmp	r3, #34	@ 0x22
 8006d2e:	d131      	bne.n	8006d94 <I2C_DMAXferCplt+0xcc>
 8006d30:	7cbb      	ldrb	r3, [r7, #18]
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d12e      	bne.n	8006d94 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d44:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006d4c:	7cfb      	ldrb	r3, [r7, #19]
 8006d4e:	2b29      	cmp	r3, #41	@ 0x29
 8006d50:	d10a      	bne.n	8006d68 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2221      	movs	r2, #33	@ 0x21
 8006d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2228      	movs	r2, #40	@ 0x28
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d60:	6978      	ldr	r0, [r7, #20]
 8006d62:	f7fe fc71 	bl	8005648 <HAL_I2C_SlaveTxCpltCallback>
 8006d66:	e00c      	b.n	8006d82 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d68:	7cfb      	ldrb	r3, [r7, #19]
 8006d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d6c:	d109      	bne.n	8006d82 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2222      	movs	r2, #34	@ 0x22
 8006d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2228      	movs	r2, #40	@ 0x28
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d7c:	6978      	ldr	r0, [r7, #20]
 8006d7e:	f7fe fc6d 	bl	800565c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006d90:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d92:	e074      	b.n	8006e7e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d06e      	beq.n	8006e7e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d107      	bne.n	8006dba <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006db8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006dc8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006dd0:	d009      	beq.n	8006de6 <I2C_DMAXferCplt+0x11e>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d006      	beq.n	8006de6 <I2C_DMAXferCplt+0x11e>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006dde:	d002      	beq.n	8006de6 <I2C_DMAXferCplt+0x11e>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d107      	bne.n	8006df6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006df4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e04:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e14:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006e24:	6978      	ldr	r0, [r7, #20]
 8006e26:	f7fe fc3b 	bl	80056a0 <HAL_I2C_ErrorCallback>
}
 8006e2a:	e028      	b.n	8006e7e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	d10a      	bne.n	8006e56 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006e4e:	6978      	ldr	r0, [r7, #20]
 8006e50:	f7f9 ffd2 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 8006e54:	e013      	b.n	8006e7e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d002      	beq.n	8006e6a <I2C_DMAXferCplt+0x1a2>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d103      	bne.n	8006e72 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e70:	e002      	b.n	8006e78 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2212      	movs	r2, #18
 8006e76:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e78:	6978      	ldr	r0, [r7, #20]
 8006e7a:	f7fe fbdb 	bl	8005634 <HAL_I2C_MasterRxCpltCallback>
}
 8006e7e:	bf00      	nop
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7fd f913 	bl	80040e0 <HAL_DMA_GetError>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d01b      	beq.n	8006ef8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ece:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	f043 0210 	orr.w	r2, r3, #16
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7fe fbd4 	bl	80056a0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007048 <I2C_DMAAbort+0x148>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	08db      	lsrs	r3, r3, #3
 8006f20:	4a4a      	ldr	r2, [pc, #296]	@ (800704c <I2C_DMAAbort+0x14c>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	0a1a      	lsrs	r2, r3, #8
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	00da      	lsls	r2, r3, #3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3e:	f043 0220 	orr.w	r2, r3, #32
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006f46:	e00a      	b.n	8006f5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f5c:	d0ea      	beq.n	8006f34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b60      	cmp	r3, #96	@ 0x60
 8006fce:	d10e      	bne.n	8006fee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006fe6:	6978      	ldr	r0, [r7, #20]
 8006fe8:	f7fe fb64 	bl	80056b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fec:	e027      	b.n	800703e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fee:	7cfb      	ldrb	r3, [r7, #19]
 8006ff0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ff4:	2b28      	cmp	r3, #40	@ 0x28
 8006ff6:	d117      	bne.n	8007028 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007016:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2228      	movs	r2, #40	@ 0x28
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007026:	e007      	b.n	8007038 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007038:	6978      	ldr	r0, [r7, #20]
 800703a:	f7fe fb31 	bl	80056a0 <HAL_I2C_ErrorCallback>
}
 800703e:	bf00      	nop
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	2000002c 	.word	0x2000002c
 800704c:	14f8b589 	.word	0x14f8b589

08007050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	4613      	mov	r3, r2
 800705e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007060:	e048      	b.n	80070f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d044      	beq.n	80070f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800706a:	f7fb ff17 	bl	8002e9c <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d302      	bcc.n	8007080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d139      	bne.n	80070f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	0c1b      	lsrs	r3, r3, #16
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d10d      	bne.n	80070a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	43da      	mvns	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4013      	ands	r3, r2
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	bf0c      	ite	eq
 800709c:	2301      	moveq	r3, #1
 800709e:	2300      	movne	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	e00c      	b.n	80070c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	43da      	mvns	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4013      	ands	r3, r2
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d116      	bne.n	80070f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e0:	f043 0220 	orr.w	r2, r3, #32
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e023      	b.n	800713c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	0c1b      	lsrs	r3, r3, #16
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d10d      	bne.n	800711a <I2C_WaitOnFlagUntilTimeout+0xca>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	43da      	mvns	r2, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4013      	ands	r3, r2
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf0c      	ite	eq
 8007110:	2301      	moveq	r3, #1
 8007112:	2300      	movne	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	461a      	mov	r2, r3
 8007118:	e00c      	b.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	43da      	mvns	r2, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	4013      	ands	r3, r2
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	429a      	cmp	r2, r3
 8007138:	d093      	beq.n	8007062 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007152:	e071      	b.n	8007238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800715e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007162:	d123      	bne.n	80071ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007172:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800717c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	f043 0204 	orr.w	r2, r3, #4
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e067      	b.n	800727c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d041      	beq.n	8007238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b4:	f7fb fe72 	bl	8002e9c <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d136      	bne.n	8007238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10c      	bne.n	80071ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	43da      	mvns	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4013      	ands	r3, r2
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bf14      	ite	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	2300      	moveq	r3, #0
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	e00b      	b.n	8007206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	43da      	mvns	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	4013      	ands	r3, r2
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf14      	ite	ne
 8007200:	2301      	movne	r3, #1
 8007202:	2300      	moveq	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d016      	beq.n	8007238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007224:	f043 0220 	orr.w	r2, r3, #32
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e021      	b.n	800727c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b01      	cmp	r3, #1
 8007240:	d10c      	bne.n	800725c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	43da      	mvns	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4013      	ands	r3, r2
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	bf14      	ite	ne
 8007254:	2301      	movne	r3, #1
 8007256:	2300      	moveq	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e00b      	b.n	8007274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	43da      	mvns	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4013      	ands	r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	bf14      	ite	ne
 800726e:	2301      	movne	r3, #1
 8007270:	2300      	moveq	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	f47f af6d 	bne.w	8007154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007290:	e034      	b.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f915 	bl	80074c2 <I2C_IsAcknowledgeFailed>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e034      	b.n	800730c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a8:	d028      	beq.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072aa:	f7fb fdf7 	bl	8002e9c <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d302      	bcc.n	80072c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d11d      	bne.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ca:	2b80      	cmp	r3, #128	@ 0x80
 80072cc:	d016      	beq.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	f043 0220 	orr.w	r2, r3, #32
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e007      	b.n	800730c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007306:	2b80      	cmp	r3, #128	@ 0x80
 8007308:	d1c3      	bne.n	8007292 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007320:	e034      	b.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 f8cd 	bl	80074c2 <I2C_IsAcknowledgeFailed>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e034      	b.n	800739c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d028      	beq.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733a:	f7fb fdaf 	bl	8002e9c <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d11d      	bne.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b04      	cmp	r3, #4
 800735c:	d016      	beq.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2220      	movs	r2, #32
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007378:	f043 0220 	orr.w	r2, r3, #32
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e007      	b.n	800739c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d1c3      	bne.n	8007322 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80073b0:	4b13      	ldr	r3, [pc, #76]	@ (8007400 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	08db      	lsrs	r3, r3, #3
 80073b6:	4a13      	ldr	r2, [pc, #76]	@ (8007404 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	0a1a      	lsrs	r2, r3, #8
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d107      	bne.n	80073e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d6:	f043 0220 	orr.w	r2, r3, #32
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e008      	b.n	80073f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073f0:	d0e9      	beq.n	80073c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	2000002c 	.word	0x2000002c
 8007404:	14f8b589 	.word	0x14f8b589

08007408 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007414:	e049      	b.n	80074aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b10      	cmp	r3, #16
 8007422:	d119      	bne.n	8007458 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0210 	mvn.w	r2, #16
 800742c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e030      	b.n	80074ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007458:	f7fb fd20 	bl	8002e9c <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d11d      	bne.n	80074aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007478:	2b40      	cmp	r3, #64	@ 0x40
 800747a:	d016      	beq.n	80074aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	f043 0220 	orr.w	r2, r3, #32
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e007      	b.n	80074ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b4:	2b40      	cmp	r3, #64	@ 0x40
 80074b6:	d1ae      	bne.n	8007416 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d8:	d11b      	bne.n	8007512 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fe:	f043 0204 	orr.w	r2, r3, #4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007530:	d103      	bne.n	800753a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007538:	e007      	b.n	800754a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007542:	d102      	bne.n	800754a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2208      	movs	r2, #8
 8007548:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b086      	sub	sp, #24
 800755a:	af02      	add	r7, sp, #8
 800755c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e101      	b.n	800776c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f006 f936 	bl	800d7f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2203      	movs	r2, #3
 800758c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007596:	d102      	bne.n	800759e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f002 fc8d 	bl	8009ec2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7c1a      	ldrb	r2, [r3, #16]
 80075b0:	f88d 2000 	strb.w	r2, [sp]
 80075b4:	3304      	adds	r3, #4
 80075b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075b8:	f002 fb6c 	bl	8009c94 <USB_CoreInit>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2202      	movs	r2, #2
 80075c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e0ce      	b.n	800776c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f002 fc85 	bl	8009ee4 <USB_SetCurrentMode>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e0bf      	b.n	800776c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
 80075f0:	e04a      	b.n	8007688 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80075f2:	7bfa      	ldrb	r2, [r7, #15]
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	3315      	adds	r3, #21
 8007602:	2201      	movs	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007606:	7bfa      	ldrb	r2, [r7, #15]
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	3314      	adds	r3, #20
 8007616:	7bfa      	ldrb	r2, [r7, #15]
 8007618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800761a:	7bfa      	ldrb	r2, [r7, #15]
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	b298      	uxth	r0, r3
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	332e      	adds	r3, #46	@ 0x2e
 800762e:	4602      	mov	r2, r0
 8007630:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007632:	7bfa      	ldrb	r2, [r7, #15]
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	3318      	adds	r3, #24
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007646:	7bfa      	ldrb	r2, [r7, #15]
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	440b      	add	r3, r1
 8007654:	331c      	adds	r3, #28
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800765a:	7bfa      	ldrb	r2, [r7, #15]
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	4613      	mov	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	3320      	adds	r3, #32
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800766e:	7bfa      	ldrb	r2, [r7, #15]
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	3324      	adds	r3, #36	@ 0x24
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	3301      	adds	r3, #1
 8007686:	73fb      	strb	r3, [r7, #15]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	791b      	ldrb	r3, [r3, #4]
 800768c:	7bfa      	ldrb	r2, [r7, #15]
 800768e:	429a      	cmp	r2, r3
 8007690:	d3af      	bcc.n	80075f2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]
 8007696:	e044      	b.n	8007722 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007698:	7bfa      	ldrb	r2, [r7, #15]
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80076aa:	2200      	movs	r2, #0
 80076ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80076ae:	7bfa      	ldrb	r2, [r7, #15]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80076c0:	7bfa      	ldrb	r2, [r7, #15]
 80076c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80076c4:	7bfa      	ldrb	r2, [r7, #15]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80076da:	7bfa      	ldrb	r2, [r7, #15]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80076f0:	7bfa      	ldrb	r2, [r7, #15]
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	4613      	mov	r3, r2
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007706:	7bfa      	ldrb	r2, [r7, #15]
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	3301      	adds	r3, #1
 8007720:	73fb      	strb	r3, [r7, #15]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	7bfa      	ldrb	r2, [r7, #15]
 8007728:	429a      	cmp	r2, r3
 800772a:	d3b5      	bcc.n	8007698 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	7c1a      	ldrb	r2, [r3, #16]
 8007734:	f88d 2000 	strb.w	r2, [sp]
 8007738:	3304      	adds	r3, #4
 800773a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800773c:	f002 fc1e 	bl	8009f7c <USB_DevInit>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e00c      	b.n	800776c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f003 fc68 	bl	800b03a <USB_DevDisconnect>

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_PCD_Start+0x1c>
 800778c:	2302      	movs	r3, #2
 800778e:	e022      	b.n	80077d6 <HAL_PCD_Start+0x62>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d009      	beq.n	80077b8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d105      	bne.n	80077b8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4618      	mov	r0, r3
 80077be:	f002 fb6f 	bl	8009ea0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f003 fc16 	bl	800aff8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80077de:	b590      	push	{r4, r7, lr}
 80077e0:	b08d      	sub	sp, #52	@ 0x34
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f003 fcd4 	bl	800b1a2 <USB_GetMode>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 848c 	bne.w	800811a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4618      	mov	r0, r3
 8007808:	f003 fc38 	bl	800b07c <USB_ReadInterrupts>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8482 	beq.w	8008118 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	0a1b      	lsrs	r3, r3, #8
 800781e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f003 fc25 	bl	800b07c <USB_ReadInterrupts>
 8007832:	4603      	mov	r3, r0
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b02      	cmp	r3, #2
 800783a:	d107      	bne.n	800784c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f002 0202 	and.w	r2, r2, #2
 800784a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f003 fc13 	bl	800b07c <USB_ReadInterrupts>
 8007856:	4603      	mov	r3, r0
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	2b10      	cmp	r3, #16
 800785e:	d161      	bne.n	8007924 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0210 	bic.w	r2, r2, #16
 800786e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f003 020f 	and.w	r2, r3, #15
 800787c:	4613      	mov	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	4413      	add	r3, r2
 800788c:	3304      	adds	r3, #4
 800788e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007896:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800789a:	d124      	bne.n	80078e6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80078a2:	4013      	ands	r3, r2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d035      	beq.n	8007914 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80078b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	6a38      	ldr	r0, [r7, #32]
 80078bc:	f003 fa4a 	bl	800ad54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	091b      	lsrs	r3, r3, #4
 80078c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078cc:	441a      	add	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	695a      	ldr	r2, [r3, #20]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	091b      	lsrs	r3, r3, #4
 80078da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078de:	441a      	add	r2, r3
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	615a      	str	r2, [r3, #20]
 80078e4:	e016      	b.n	8007914 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80078ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80078f0:	d110      	bne.n	8007914 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078f8:	2208      	movs	r2, #8
 80078fa:	4619      	mov	r1, r3
 80078fc:	6a38      	ldr	r0, [r7, #32]
 80078fe:	f003 fa29 	bl	800ad54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	695a      	ldr	r2, [r3, #20]
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	091b      	lsrs	r3, r3, #4
 800790a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800790e:	441a      	add	r2, r3
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0210 	orr.w	r2, r2, #16
 8007922:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4618      	mov	r0, r3
 800792a:	f003 fba7 	bl	800b07c <USB_ReadInterrupts>
 800792e:	4603      	mov	r3, r0
 8007930:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007934:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007938:	f040 80a7 	bne.w	8007a8a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4618      	mov	r0, r3
 8007946:	f003 fbac 	bl	800b0a2 <USB_ReadDevAllOutEpInterrupt>
 800794a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800794c:	e099      	b.n	8007a82 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 808e 	beq.w	8007a76 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007960:	b2d2      	uxtb	r2, r2
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f003 fbd0 	bl	800b10a <USB_ReadDevOutEPInterrupt>
 800796a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00c      	beq.n	8007990 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007982:	461a      	mov	r2, r3
 8007984:	2301      	movs	r3, #1
 8007986:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007988:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fea4 	bl	80086d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00c      	beq.n	80079b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a6:	461a      	mov	r2, r3
 80079a8:	2308      	movs	r3, #8
 80079aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80079ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 ff7a 	bl	80088a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f003 0310 	and.w	r3, r3, #16
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d008      	beq.n	80079d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ca:	461a      	mov	r2, r3
 80079cc:	2310      	movs	r3, #16
 80079ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d030      	beq.n	8007a3c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e2:	2b80      	cmp	r3, #128	@ 0x80
 80079e4:	d109      	bne.n	80079fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80079fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079fc:	4613      	mov	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	78db      	ldrb	r3, [r3, #3]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d108      	bne.n	8007a2a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f005 ffe1 	bl	800d9ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a36:	461a      	mov	r2, r3
 8007a38:	2302      	movs	r3, #2
 8007a3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a52:	461a      	mov	r2, r3
 8007a54:	2320      	movs	r3, #32
 8007a56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d009      	beq.n	8007a76 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	3301      	adds	r3, #1
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7e:	085b      	lsrs	r3, r3, #1
 8007a80:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f47f af62 	bne.w	800794e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f003 faf4 	bl	800b07c <USB_ReadInterrupts>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a9e:	f040 80db 	bne.w	8007c58 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f003 fb15 	bl	800b0d6 <USB_ReadDevAllInEpInterrupt>
 8007aac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007ab2:	e0cd      	b.n	8007c50 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 80c2 	beq.w	8007c44 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f003 fb3b 	bl	800b146 <USB_ReadDevInEPInterrupt>
 8007ad0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d057      	beq.n	8007b8c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	43db      	mvns	r3, r3
 8007af6:	69f9      	ldr	r1, [r7, #28]
 8007af8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007afc:	4013      	ands	r3, r2
 8007afe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	2301      	movs	r3, #1
 8007b10:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	799b      	ldrb	r3, [r3, #6]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d132      	bne.n	8007b80 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1e:	4613      	mov	r3, r2
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3320      	adds	r3, #32
 8007b2a:	6819      	ldr	r1, [r3, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b30:	4613      	mov	r3, r2
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4403      	add	r3, r0
 8007b3a:	331c      	adds	r3, #28
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4419      	add	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b44:	4613      	mov	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4403      	add	r3, r0
 8007b4e:	3320      	adds	r3, #32
 8007b50:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d113      	bne.n	8007b80 <HAL_PCD_IRQHandler+0x3a2>
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	3324      	adds	r3, #36	@ 0x24
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d108      	bne.n	8007b80 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	f003 fb42 	bl	800b204 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f005 feb5 	bl	800d8f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d008      	beq.n	8007ba8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	2308      	movs	r3, #8
 8007ba6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bda:	461a      	mov	r2, r3
 8007bdc:	2340      	movs	r3, #64	@ 0x40
 8007bde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d023      	beq.n	8007c32 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bec:	6a38      	ldr	r0, [r7, #32]
 8007bee:	f002 fb29 	bl	800a244 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	3310      	adds	r3, #16
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	3304      	adds	r3, #4
 8007c04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	78db      	ldrb	r3, [r3, #3]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d108      	bne.n	8007c20 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2200      	movs	r2, #0
 8007c12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f005 fef8 	bl	800da10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	2302      	movs	r3, #2
 8007c30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fcbd 	bl	80085be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	3301      	adds	r3, #1
 8007c48:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4c:	085b      	lsrs	r3, r3, #1
 8007c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f47f af2e 	bne.w	8007ab4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f003 fa0d 	bl	800b07c <USB_ReadInterrupts>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c6c:	d122      	bne.n	8007cb4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c7c:	f023 0301 	bic.w	r3, r3, #1
 8007c80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d108      	bne.n	8007c9e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007c94:	2100      	movs	r1, #0
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fea4 	bl	80089e4 <HAL_PCDEx_LPM_Callback>
 8007c9c:	e002      	b.n	8007ca4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f005 fe96 	bl	800d9d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695a      	ldr	r2, [r3, #20]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f003 f9df 	bl	800b07c <USB_ReadInterrupts>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc8:	d112      	bne.n	8007cf0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d102      	bne.n	8007ce0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f005 fe52 	bl	800d984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695a      	ldr	r2, [r3, #20]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007cee:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f003 f9c1 	bl	800b07c <USB_ReadInterrupts>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d04:	f040 80b7 	bne.w	8007e76 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d16:	f023 0301 	bic.w	r3, r3, #1
 8007d1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2110      	movs	r1, #16
 8007d22:	4618      	mov	r0, r3
 8007d24:	f002 fa8e 	bl	800a244 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d28:	2300      	movs	r3, #0
 8007d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d2c:	e046      	b.n	8007dbc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d52:	0151      	lsls	r1, r2, #5
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	440a      	add	r2, r1
 8007d58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d74:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007da6:	0151      	lsls	r1, r2, #5
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	440a      	add	r2, r1
 8007dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007db0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007db4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db8:	3301      	adds	r3, #1
 8007dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	791b      	ldrb	r3, [r3, #4]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d3b2      	bcc.n	8007d2e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dd6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007dda:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	7bdb      	ldrb	r3, [r3, #15]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d016      	beq.n	8007e12 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007df4:	f043 030b 	orr.w	r3, r3, #11
 8007df8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e04:	69fa      	ldr	r2, [r7, #28]
 8007e06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e0a:	f043 030b 	orr.w	r3, r3, #11
 8007e0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e10:	e015      	b.n	8007e3e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	69fa      	ldr	r2, [r7, #28]
 8007e1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007e24:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007e28:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	69fa      	ldr	r2, [r7, #28]
 8007e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e38:	f043 030b 	orr.w	r3, r3, #11
 8007e3c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e4c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e50:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e60:	461a      	mov	r2, r3
 8007e62:	f003 f9cf 	bl	800b204 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695a      	ldr	r2, [r3, #20]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f003 f8fe 	bl	800b07c <USB_ReadInterrupts>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e8a:	d123      	bne.n	8007ed4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f003 f994 	bl	800b1be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f002 fa4b 	bl	800a336 <USB_GetDevSpeed>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681c      	ldr	r4, [r3, #0]
 8007eac:	f001 f9ca 	bl	8009244 <HAL_RCC_GetHCLKFreq>
 8007eb0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f001 ff4f 	bl	8009d5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f005 fd41 	bl	800d946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695a      	ldr	r2, [r3, #20]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f003 f8cf 	bl	800b07c <USB_ReadInterrupts>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d10a      	bne.n	8007efe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f005 fd1e 	bl	800d92a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	695a      	ldr	r2, [r3, #20]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f002 0208 	and.w	r2, r2, #8
 8007efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f003 f8ba 	bl	800b07c <USB_ReadInterrupts>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0e:	2b80      	cmp	r3, #128	@ 0x80
 8007f10:	d123      	bne.n	8007f5a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f1e:	2301      	movs	r3, #1
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f22:	e014      	b.n	8007f4e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f28:	4613      	mov	r3, r2
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d105      	bne.n	8007f48 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fb0a 	bl	800855c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	791b      	ldrb	r3, [r3, #4]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d3e4      	bcc.n	8007f24 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f003 f88c 	bl	800b07c <USB_ReadInterrupts>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f6e:	d13c      	bne.n	8007fea <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f70:	2301      	movs	r3, #1
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f74:	e02b      	b.n	8007fce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	3318      	adds	r3, #24
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d115      	bne.n	8007fc8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007f9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	da12      	bge.n	8007fc8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3317      	adds	r3, #23
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 faca 	bl	800855c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	3301      	adds	r3, #1
 8007fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	791b      	ldrb	r3, [r3, #4]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d3cd      	bcc.n	8007f76 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695a      	ldr	r2, [r3, #20]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f003 f844 	bl	800b07c <USB_ReadInterrupts>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ffa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ffe:	d156      	bne.n	80080ae <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008000:	2301      	movs	r3, #1
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
 8008004:	e045      	b.n	8008092 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800801a:	4613      	mov	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d12e      	bne.n	800808c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800802e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008030:	2b00      	cmp	r3, #0
 8008032:	da2b      	bge.n	800808c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	0c1a      	lsrs	r2, r3, #16
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800803e:	4053      	eors	r3, r2
 8008040:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008044:	2b00      	cmp	r3, #0
 8008046:	d121      	bne.n	800808c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804c:	4613      	mov	r3, r2
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800805a:	2201      	movs	r2, #1
 800805c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008084:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008088:	6053      	str	r3, [r2, #4]
            break;
 800808a:	e008      	b.n	800809e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	3301      	adds	r3, #1
 8008090:	627b      	str	r3, [r7, #36]	@ 0x24
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	791b      	ldrb	r3, [r3, #4]
 8008096:	461a      	mov	r2, r3
 8008098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809a:	4293      	cmp	r3, r2
 800809c:	d3b3      	bcc.n	8008006 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695a      	ldr	r2, [r3, #20]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80080ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f002 ffe2 	bl	800b07c <USB_ReadInterrupts>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c2:	d10a      	bne.n	80080da <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f005 fcb5 	bl	800da34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	695a      	ldr	r2, [r3, #20]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80080d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4618      	mov	r0, r3
 80080e0:	f002 ffcc 	bl	800b07c <USB_ReadInterrupts>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d115      	bne.n	800811a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f005 fca5 	bl	800da50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6859      	ldr	r1, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]
 8008116:	e000      	b.n	800811a <HAL_PCD_IRQHandler+0x93c>
      return;
 8008118:	bf00      	nop
    }
  }
}
 800811a:	3734      	adds	r7, #52	@ 0x34
 800811c:	46bd      	mov	sp, r7
 800811e:	bd90      	pop	{r4, r7, pc}

08008120 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_PCD_SetAddress+0x1a>
 8008136:	2302      	movs	r3, #2
 8008138:	e012      	b.n	8008160 <HAL_PCD_SetAddress+0x40>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	78fa      	ldrb	r2, [r7, #3]
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f002 ff2b 	bl	800afac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	4608      	mov	r0, r1
 8008172:	4611      	mov	r1, r2
 8008174:	461a      	mov	r2, r3
 8008176:	4603      	mov	r3, r0
 8008178:	70fb      	strb	r3, [r7, #3]
 800817a:	460b      	mov	r3, r1
 800817c:	803b      	strh	r3, [r7, #0]
 800817e:	4613      	mov	r3, r2
 8008180:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800818a:	2b00      	cmp	r3, #0
 800818c:	da0f      	bge.n	80081ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	f003 020f 	and.w	r2, r3, #15
 8008194:	4613      	mov	r3, r2
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	3310      	adds	r3, #16
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	3304      	adds	r3, #4
 80081a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	705a      	strb	r2, [r3, #1]
 80081ac:	e00f      	b.n	80081ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	f003 020f 	and.w	r2, r3, #15
 80081b4:	4613      	mov	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	3304      	adds	r3, #4
 80081c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80081da:	883b      	ldrh	r3, [r7, #0]
 80081dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	78ba      	ldrb	r2, [r7, #2]
 80081e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80081fc:	78bb      	ldrb	r3, [r7, #2]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d102      	bne.n	8008208 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_PCD_EP_Open+0xae>
 8008212:	2302      	movs	r3, #2
 8008214:	e00e      	b.n	8008234 <HAL_PCD_EP_Open+0xcc>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68f9      	ldr	r1, [r7, #12]
 8008224:	4618      	mov	r0, r3
 8008226:	f002 f8ab 	bl	800a380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008232:	7afb      	ldrb	r3, [r7, #11]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800824c:	2b00      	cmp	r3, #0
 800824e:	da0f      	bge.n	8008270 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	f003 020f 	and.w	r2, r3, #15
 8008256:	4613      	mov	r3, r2
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	3310      	adds	r3, #16
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	4413      	add	r3, r2
 8008264:	3304      	adds	r3, #4
 8008266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	705a      	strb	r2, [r3, #1]
 800826e:	e00f      	b.n	8008290 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	f003 020f 	and.w	r2, r3, #15
 8008276:	4613      	mov	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	3304      	adds	r3, #4
 8008288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	b2da      	uxtb	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_PCD_EP_Close+0x6e>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e00e      	b.n	80082c8 <HAL_PCD_EP_Close+0x8c>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68f9      	ldr	r1, [r7, #12]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f002 f8e9 	bl	800a490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	607a      	str	r2, [r7, #4]
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	460b      	mov	r3, r1
 80082de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	f003 020f 	and.w	r2, r3, #15
 80082e6:	4613      	mov	r3, r2
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4413      	add	r3, r2
 80082f6:	3304      	adds	r3, #4
 80082f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2200      	movs	r2, #0
 800830a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2200      	movs	r2, #0
 8008310:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	f003 030f 	and.w	r3, r3, #15
 8008318:	b2da      	uxtb	r2, r3
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	799b      	ldrb	r3, [r3, #6]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d102      	bne.n	800832c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6818      	ldr	r0, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	799b      	ldrb	r3, [r3, #6]
 8008334:	461a      	mov	r2, r3
 8008336:	6979      	ldr	r1, [r7, #20]
 8008338:	f002 f986 	bl	800a648 <USB_EPStartXfer>

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	f003 020f 	and.w	r2, r3, #15
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008368:	681b      	ldr	r3, [r3, #0]
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
 8008382:	460b      	mov	r3, r1
 8008384:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	f003 020f 	and.w	r2, r3, #15
 800838c:	4613      	mov	r3, r2
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	3310      	adds	r3, #16
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4413      	add	r3, r2
 800839a:	3304      	adds	r3, #4
 800839c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2200      	movs	r2, #0
 80083ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2201      	movs	r2, #1
 80083b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083b6:	7afb      	ldrb	r3, [r7, #11]
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	799b      	ldrb	r3, [r3, #6]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d102      	bne.n	80083d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	799b      	ldrb	r3, [r3, #6]
 80083d8:	461a      	mov	r2, r3
 80083da:	6979      	ldr	r1, [r7, #20]
 80083dc:	f002 f934 	bl	800a648 <USB_EPStartXfer>

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	f003 030f 	and.w	r3, r3, #15
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	7912      	ldrb	r2, [r2, #4]
 8008400:	4293      	cmp	r3, r2
 8008402:	d901      	bls.n	8008408 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e04f      	b.n	80084a8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800840c:	2b00      	cmp	r3, #0
 800840e:	da0f      	bge.n	8008430 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	f003 020f 	and.w	r2, r3, #15
 8008416:	4613      	mov	r3, r2
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	3310      	adds	r3, #16
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	4413      	add	r3, r2
 8008424:	3304      	adds	r3, #4
 8008426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	705a      	strb	r2, [r3, #1]
 800842e:	e00d      	b.n	800844c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	4613      	mov	r3, r2
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	4413      	add	r3, r2
 8008442:	3304      	adds	r3, #4
 8008444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	b2da      	uxtb	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008464:	2b01      	cmp	r3, #1
 8008466:	d101      	bne.n	800846c <HAL_PCD_EP_SetStall+0x82>
 8008468:	2302      	movs	r3, #2
 800846a:	e01d      	b.n	80084a8 <HAL_PCD_EP_SetStall+0xbe>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68f9      	ldr	r1, [r7, #12]
 800847a:	4618      	mov	r0, r3
 800847c:	f002 fcc2 	bl	800ae04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	2b00      	cmp	r3, #0
 8008488:	d109      	bne.n	800849e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7999      	ldrb	r1, [r3, #6]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008498:	461a      	mov	r2, r3
 800849a:	f002 feb3 	bl	800b204 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	7912      	ldrb	r2, [r2, #4]
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d901      	bls.n	80084ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e042      	b.n	8008554 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	da0f      	bge.n	80084f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	f003 020f 	and.w	r2, r3, #15
 80084dc:	4613      	mov	r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	3310      	adds	r3, #16
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	3304      	adds	r3, #4
 80084ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	705a      	strb	r2, [r3, #1]
 80084f4:	e00f      	b.n	8008516 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	f003 020f 	and.w	r2, r3, #15
 80084fc:	4613      	mov	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	4413      	add	r3, r2
 800850c:	3304      	adds	r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	f003 030f 	and.w	r3, r3, #15
 8008522:	b2da      	uxtb	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800852e:	2b01      	cmp	r3, #1
 8008530:	d101      	bne.n	8008536 <HAL_PCD_EP_ClrStall+0x86>
 8008532:	2302      	movs	r3, #2
 8008534:	e00e      	b.n	8008554 <HAL_PCD_EP_ClrStall+0xa4>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68f9      	ldr	r1, [r7, #12]
 8008544:	4618      	mov	r0, r3
 8008546:	f002 fccb 	bl	800aee0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800856c:	2b00      	cmp	r3, #0
 800856e:	da0c      	bge.n	800858a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	f003 020f 	and.w	r2, r3, #15
 8008576:	4613      	mov	r3, r2
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	3310      	adds	r3, #16
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4413      	add	r3, r2
 8008584:	3304      	adds	r3, #4
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	e00c      	b.n	80085a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	4613      	mov	r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	4413      	add	r3, r2
 80085a0:	3304      	adds	r3, #4
 80085a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68f9      	ldr	r1, [r7, #12]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 faea 	bl	800ab84 <USB_EPStopXfer>
 80085b0:	4603      	mov	r3, r0
 80085b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80085b4:	7afb      	ldrb	r3, [r7, #11]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b08a      	sub	sp, #40	@ 0x28
 80085c2:	af02      	add	r7, sp, #8
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4613      	mov	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	3310      	adds	r3, #16
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	3304      	adds	r3, #4
 80085e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	695a      	ldr	r2, [r3, #20]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d901      	bls.n	80085f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e06b      	b.n	80086ce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	691a      	ldr	r2, [r3, #16]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	429a      	cmp	r2, r3
 800860a:	d902      	bls.n	8008612 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	3303      	adds	r3, #3
 8008616:	089b      	lsrs	r3, r3, #2
 8008618:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800861a:	e02a      	b.n	8008672 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	429a      	cmp	r2, r3
 8008630:	d902      	bls.n	8008638 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	3303      	adds	r3, #3
 800863c:	089b      	lsrs	r3, r3, #2
 800863e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68d9      	ldr	r1, [r3, #12]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	b2da      	uxtb	r2, r3
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	4603      	mov	r3, r0
 8008654:	6978      	ldr	r0, [r7, #20]
 8008656:	f002 fb3f 	bl	800acd8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	441a      	add	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	695a      	ldr	r2, [r3, #20]
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	441a      	add	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	429a      	cmp	r2, r3
 8008686:	d809      	bhi.n	800869c <PCD_WriteEmptyTxFifo+0xde>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	695a      	ldr	r2, [r3, #20]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008690:	429a      	cmp	r2, r3
 8008692:	d203      	bcs.n	800869c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1bf      	bne.n	800861c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	691a      	ldr	r2, [r3, #16]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d811      	bhi.n	80086cc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	2201      	movs	r2, #1
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	6939      	ldr	r1, [r7, #16]
 80086c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086c8:	4013      	ands	r3, r2
 80086ca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3720      	adds	r7, #32
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	333c      	adds	r3, #60	@ 0x3c
 80086f0:	3304      	adds	r3, #4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	015a      	lsls	r2, r3, #5
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	799b      	ldrb	r3, [r3, #6]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d17b      	bne.n	8008806 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	2b00      	cmp	r3, #0
 8008716:	d015      	beq.n	8008744 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	4a61      	ldr	r2, [pc, #388]	@ (80088a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	f240 80b9 	bls.w	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80b3 	beq.w	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873a:	461a      	mov	r2, r3
 800873c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008740:	6093      	str	r3, [r2, #8]
 8008742:	e0a7      	b.n	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800875a:	461a      	mov	r2, r3
 800875c:	2320      	movs	r3, #32
 800875e:	6093      	str	r3, [r2, #8]
 8008760:	e098      	b.n	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008768:	2b00      	cmp	r3, #0
 800876a:	f040 8093 	bne.w	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	4a4b      	ldr	r2, [pc, #300]	@ (80088a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d90f      	bls.n	8008796 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878c:	461a      	mov	r2, r3
 800878e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008792:	6093      	str	r3, [r2, #8]
 8008794:	e07e      	b.n	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	4613      	mov	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	4413      	add	r3, r2
 80087a8:	3304      	adds	r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6a1a      	ldr	r2, [r3, #32]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	0159      	lsls	r1, r3, #5
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	440b      	add	r3, r1
 80087b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087c2:	1ad2      	subs	r2, r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d114      	bne.n	80087f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d109      	bne.n	80087ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80087e0:	461a      	mov	r2, r3
 80087e2:	2101      	movs	r1, #1
 80087e4:	f002 fd0e 	bl	800b204 <USB_EP0_OutStart>
 80087e8:	e006      	b.n	80087f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	441a      	add	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f005 f85e 	bl	800d8c0 <HAL_PCD_DataOutStageCallback>
 8008804:	e046      	b.n	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	4a26      	ldr	r2, [pc, #152]	@ (80088a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d124      	bne.n	8008858 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00a      	beq.n	800882e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008824:	461a      	mov	r2, r3
 8008826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800882a:	6093      	str	r3, [r2, #8]
 800882c:	e032      	b.n	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	d008      	beq.n	800884a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008844:	461a      	mov	r2, r3
 8008846:	2320      	movs	r3, #32
 8008848:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f005 f835 	bl	800d8c0 <HAL_PCD_DataOutStageCallback>
 8008856:	e01d      	b.n	8008894 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d114      	bne.n	8008888 <PCD_EP_OutXfrComplete_int+0x1b0>
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	4613      	mov	r3, r2
 8008864:	00db      	lsls	r3, r3, #3
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d108      	bne.n	8008888 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008880:	461a      	mov	r2, r3
 8008882:	2100      	movs	r1, #0
 8008884:	f002 fcbe 	bl	800b204 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f005 f816 	bl	800d8c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3720      	adds	r7, #32
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	4f54300a 	.word	0x4f54300a
 80088a4:	4f54310a 	.word	0x4f54310a

080088a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	333c      	adds	r3, #60	@ 0x3c
 80088c0:	3304      	adds	r3, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4a15      	ldr	r2, [pc, #84]	@ (8008930 <PCD_EP_OutSetupPacket_int+0x88>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d90e      	bls.n	80088fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d009      	beq.n	80088fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f4:	461a      	mov	r2, r3
 80088f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f004 ffcd 	bl	800d89c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	4a0a      	ldr	r2, [pc, #40]	@ (8008930 <PCD_EP_OutSetupPacket_int+0x88>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d90c      	bls.n	8008924 <PCD_EP_OutSetupPacket_int+0x7c>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	799b      	ldrb	r3, [r3, #6]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d108      	bne.n	8008924 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800891c:	461a      	mov	r2, r3
 800891e:	2101      	movs	r1, #1
 8008920:	f002 fc70 	bl	800b204 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	4f54300a 	.word	0x4f54300a

08008934 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
 8008940:	4613      	mov	r3, r2
 8008942:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d107      	bne.n	8008962 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008952:	883b      	ldrh	r3, [r7, #0]
 8008954:	0419      	lsls	r1, r3, #16
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	430a      	orrs	r2, r1
 800895e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008960:	e028      	b.n	80089b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008968:	0c1b      	lsrs	r3, r3, #16
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	4413      	add	r3, r2
 800896e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
 8008974:	e00d      	b.n	8008992 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	3340      	adds	r3, #64	@ 0x40
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	0c1b      	lsrs	r3, r3, #16
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	4413      	add	r3, r2
 800898a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	3301      	adds	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]
 8008992:	7bfa      	ldrb	r2, [r7, #15]
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	3b01      	subs	r3, #1
 8008998:	429a      	cmp	r2, r3
 800899a:	d3ec      	bcc.n	8008976 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800899c:	883b      	ldrh	r3, [r7, #0]
 800899e:	0418      	lsls	r0, r3, #16
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6819      	ldr	r1, [r3, #0]
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	4302      	orrs	r2, r0
 80089ac:	3340      	adds	r3, #64	@ 0x40
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	887a      	ldrh	r2, [r7, #2]
 80089d4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e267      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d075      	beq.n	8008b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008a1a:	4b88      	ldr	r3, [pc, #544]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 030c 	and.w	r3, r3, #12
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d00c      	beq.n	8008a40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a26:	4b85      	ldr	r3, [pc, #532]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008a2e:	2b08      	cmp	r3, #8
 8008a30:	d112      	bne.n	8008a58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a32:	4b82      	ldr	r3, [pc, #520]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a3e:	d10b      	bne.n	8008a58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a40:	4b7e      	ldr	r3, [pc, #504]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d05b      	beq.n	8008b04 <HAL_RCC_OscConfig+0x108>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d157      	bne.n	8008b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e242      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a60:	d106      	bne.n	8008a70 <HAL_RCC_OscConfig+0x74>
 8008a62:	4b76      	ldr	r3, [pc, #472]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a75      	ldr	r2, [pc, #468]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	e01d      	b.n	8008aac <HAL_RCC_OscConfig+0xb0>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a78:	d10c      	bne.n	8008a94 <HAL_RCC_OscConfig+0x98>
 8008a7a:	4b70      	ldr	r3, [pc, #448]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	4b6d      	ldr	r3, [pc, #436]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a6c      	ldr	r2, [pc, #432]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	e00b      	b.n	8008aac <HAL_RCC_OscConfig+0xb0>
 8008a94:	4b69      	ldr	r3, [pc, #420]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a68      	ldr	r2, [pc, #416]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	4b66      	ldr	r3, [pc, #408]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a65      	ldr	r2, [pc, #404]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d013      	beq.n	8008adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ab4:	f7fa f9f2 	bl	8002e9c <HAL_GetTick>
 8008ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008abc:	f7fa f9ee 	bl	8002e9c <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b64      	cmp	r3, #100	@ 0x64
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e207      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ace:	4b5b      	ldr	r3, [pc, #364]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HAL_RCC_OscConfig+0xc0>
 8008ada:	e014      	b.n	8008b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008adc:	f7fa f9de 	bl	8002e9c <HAL_GetTick>
 8008ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ae4:	f7fa f9da 	bl	8002e9c <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b64      	cmp	r3, #100	@ 0x64
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e1f3      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008af6:	4b51      	ldr	r3, [pc, #324]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f0      	bne.n	8008ae4 <HAL_RCC_OscConfig+0xe8>
 8008b02:	e000      	b.n	8008b06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d063      	beq.n	8008bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008b12:	4b4a      	ldr	r3, [pc, #296]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 030c 	and.w	r3, r3, #12
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b1e:	4b47      	ldr	r3, [pc, #284]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008b26:	2b08      	cmp	r3, #8
 8008b28:	d11c      	bne.n	8008b64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b2a:	4b44      	ldr	r3, [pc, #272]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d116      	bne.n	8008b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b36:	4b41      	ldr	r3, [pc, #260]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <HAL_RCC_OscConfig+0x152>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d001      	beq.n	8008b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e1c7      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	4937      	ldr	r1, [pc, #220]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b62:	e03a      	b.n	8008bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d020      	beq.n	8008bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b6c:	4b34      	ldr	r3, [pc, #208]	@ (8008c40 <HAL_RCC_OscConfig+0x244>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b72:	f7fa f993 	bl	8002e9c <HAL_GetTick>
 8008b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b78:	e008      	b.n	8008b8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b7a:	f7fa f98f 	bl	8002e9c <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d901      	bls.n	8008b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e1a8      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0f0      	beq.n	8008b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b98:	4b28      	ldr	r3, [pc, #160]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	4925      	ldr	r1, [pc, #148]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	600b      	str	r3, [r1, #0]
 8008bac:	e015      	b.n	8008bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bae:	4b24      	ldr	r3, [pc, #144]	@ (8008c40 <HAL_RCC_OscConfig+0x244>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb4:	f7fa f972 	bl	8002e9c <HAL_GetTick>
 8008bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bbc:	f7fa f96e 	bl	8002e9c <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e187      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bce:	4b1b      	ldr	r3, [pc, #108]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1f0      	bne.n	8008bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d036      	beq.n	8008c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d016      	beq.n	8008c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bee:	4b15      	ldr	r3, [pc, #84]	@ (8008c44 <HAL_RCC_OscConfig+0x248>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf4:	f7fa f952 	bl	8002e9c <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bfc:	f7fa f94e 	bl	8002e9c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e167      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c3c <HAL_RCC_OscConfig+0x240>)
 8008c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0x200>
 8008c1a:	e01b      	b.n	8008c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c1c:	4b09      	ldr	r3, [pc, #36]	@ (8008c44 <HAL_RCC_OscConfig+0x248>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c22:	f7fa f93b 	bl	8002e9c <HAL_GetTick>
 8008c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c28:	e00e      	b.n	8008c48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c2a:	f7fa f937 	bl	8002e9c <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d907      	bls.n	8008c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e150      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
 8008c3c:	40023800 	.word	0x40023800
 8008c40:	42470000 	.word	0x42470000
 8008c44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c48:	4b88      	ldr	r3, [pc, #544]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1ea      	bne.n	8008c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 8097 	beq.w	8008d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c66:	4b81      	ldr	r3, [pc, #516]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10f      	bne.n	8008c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c72:	2300      	movs	r3, #0
 8008c74:	60bb      	str	r3, [r7, #8]
 8008c76:	4b7d      	ldr	r3, [pc, #500]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c82:	4b7a      	ldr	r3, [pc, #488]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c8a:	60bb      	str	r3, [r7, #8]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c92:	4b77      	ldr	r3, [pc, #476]	@ (8008e70 <HAL_RCC_OscConfig+0x474>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d118      	bne.n	8008cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c9e:	4b74      	ldr	r3, [pc, #464]	@ (8008e70 <HAL_RCC_OscConfig+0x474>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a73      	ldr	r2, [pc, #460]	@ (8008e70 <HAL_RCC_OscConfig+0x474>)
 8008ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008caa:	f7fa f8f7 	bl	8002e9c <HAL_GetTick>
 8008cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cb0:	e008      	b.n	8008cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cb2:	f7fa f8f3 	bl	8002e9c <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d901      	bls.n	8008cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e10c      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8008e70 <HAL_RCC_OscConfig+0x474>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0f0      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d106      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x2ea>
 8008cd8:	4b64      	ldr	r3, [pc, #400]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cdc:	4a63      	ldr	r2, [pc, #396]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008cde:	f043 0301 	orr.w	r3, r3, #1
 8008ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ce4:	e01c      	b.n	8008d20 <HAL_RCC_OscConfig+0x324>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d10c      	bne.n	8008d08 <HAL_RCC_OscConfig+0x30c>
 8008cee:	4b5f      	ldr	r3, [pc, #380]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008cf4:	f043 0304 	orr.w	r3, r3, #4
 8008cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d00:	f043 0301 	orr.w	r3, r3, #1
 8008d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d06:	e00b      	b.n	8008d20 <HAL_RCC_OscConfig+0x324>
 8008d08:	4b58      	ldr	r3, [pc, #352]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d0c:	4a57      	ldr	r2, [pc, #348]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d0e:	f023 0301 	bic.w	r3, r3, #1
 8008d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d14:	4b55      	ldr	r3, [pc, #340]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d18:	4a54      	ldr	r2, [pc, #336]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d1a:	f023 0304 	bic.w	r3, r3, #4
 8008d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d015      	beq.n	8008d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d28:	f7fa f8b8 	bl	8002e9c <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d2e:	e00a      	b.n	8008d46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d30:	f7fa f8b4 	bl	8002e9c <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d901      	bls.n	8008d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e0cb      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d46:	4b49      	ldr	r3, [pc, #292]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0ee      	beq.n	8008d30 <HAL_RCC_OscConfig+0x334>
 8008d52:	e014      	b.n	8008d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d54:	f7fa f8a2 	bl	8002e9c <HAL_GetTick>
 8008d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d5a:	e00a      	b.n	8008d72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d5c:	f7fa f89e 	bl	8002e9c <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e0b5      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d72:	4b3e      	ldr	r3, [pc, #248]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1ee      	bne.n	8008d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d105      	bne.n	8008d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d84:	4b39      	ldr	r3, [pc, #228]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d88:	4a38      	ldr	r2, [pc, #224]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 80a1 	beq.w	8008edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d9a:	4b34      	ldr	r3, [pc, #208]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
 8008da2:	2b08      	cmp	r3, #8
 8008da4:	d05c      	beq.n	8008e60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d141      	bne.n	8008e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dae:	4b31      	ldr	r3, [pc, #196]	@ (8008e74 <HAL_RCC_OscConfig+0x478>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008db4:	f7fa f872 	bl	8002e9c <HAL_GetTick>
 8008db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dbc:	f7fa f86e 	bl	8002e9c <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e087      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dce:	4b27      	ldr	r3, [pc, #156]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1f0      	bne.n	8008dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	69da      	ldr	r2, [r3, #28]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de8:	019b      	lsls	r3, r3, #6
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df0:	085b      	lsrs	r3, r3, #1
 8008df2:	3b01      	subs	r3, #1
 8008df4:	041b      	lsls	r3, r3, #16
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfc:	061b      	lsls	r3, r3, #24
 8008dfe:	491b      	ldr	r1, [pc, #108]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e04:	4b1b      	ldr	r3, [pc, #108]	@ (8008e74 <HAL_RCC_OscConfig+0x478>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e0a:	f7fa f847 	bl	8002e9c <HAL_GetTick>
 8008e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e10:	e008      	b.n	8008e24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e12:	f7fa f843 	bl	8002e9c <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e05c      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e24:	4b11      	ldr	r3, [pc, #68]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0f0      	beq.n	8008e12 <HAL_RCC_OscConfig+0x416>
 8008e30:	e054      	b.n	8008edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e32:	4b10      	ldr	r3, [pc, #64]	@ (8008e74 <HAL_RCC_OscConfig+0x478>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e38:	f7fa f830 	bl	8002e9c <HAL_GetTick>
 8008e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e3e:	e008      	b.n	8008e52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e40:	f7fa f82c 	bl	8002e9c <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d901      	bls.n	8008e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e045      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e52:	4b06      	ldr	r3, [pc, #24]	@ (8008e6c <HAL_RCC_OscConfig+0x470>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1f0      	bne.n	8008e40 <HAL_RCC_OscConfig+0x444>
 8008e5e:	e03d      	b.n	8008edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d107      	bne.n	8008e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e038      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
 8008e6c:	40023800 	.word	0x40023800
 8008e70:	40007000 	.word	0x40007000
 8008e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e78:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee8 <HAL_RCC_OscConfig+0x4ec>)
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d028      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d121      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d11a      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d111      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebe:	085b      	lsrs	r3, r3, #1
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d107      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d001      	beq.n	8008edc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e000      	b.n	8008ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	40023800 	.word	0x40023800

08008eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e0cc      	b.n	800909a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f00:	4b68      	ldr	r3, [pc, #416]	@ (80090a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d90c      	bls.n	8008f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f0e:	4b65      	ldr	r3, [pc, #404]	@ (80090a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	b2d2      	uxtb	r2, r2
 8008f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f16:	4b63      	ldr	r3, [pc, #396]	@ (80090a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d001      	beq.n	8008f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0b8      	b.n	800909a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d020      	beq.n	8008f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f40:	4b59      	ldr	r3, [pc, #356]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	4a58      	ldr	r2, [pc, #352]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008f46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008f4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f58:	4b53      	ldr	r3, [pc, #332]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	4a52      	ldr	r2, [pc, #328]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008f5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f64:	4b50      	ldr	r3, [pc, #320]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	494d      	ldr	r1, [pc, #308]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d044      	beq.n	800900c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d107      	bne.n	8008f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f8a:	4b47      	ldr	r3, [pc, #284]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d119      	bne.n	8008fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e07f      	b.n	800909a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d003      	beq.n	8008faa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d107      	bne.n	8008fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008faa:	4b3f      	ldr	r3, [pc, #252]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d109      	bne.n	8008fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e06f      	b.n	800909a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fba:	4b3b      	ldr	r3, [pc, #236]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e067      	b.n	800909a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fca:	4b37      	ldr	r3, [pc, #220]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f023 0203 	bic.w	r2, r3, #3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	4934      	ldr	r1, [pc, #208]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008fdc:	f7f9 ff5e 	bl	8002e9c <HAL_GetTick>
 8008fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fe2:	e00a      	b.n	8008ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fe4:	f7f9 ff5a 	bl	8002e9c <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e04f      	b.n	800909a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 020c 	and.w	r2, r3, #12
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	429a      	cmp	r2, r3
 800900a:	d1eb      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800900c:	4b25      	ldr	r3, [pc, #148]	@ (80090a4 <HAL_RCC_ClockConfig+0x1b8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0307 	and.w	r3, r3, #7
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d20c      	bcs.n	8009034 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800901a:	4b22      	ldr	r3, [pc, #136]	@ (80090a4 <HAL_RCC_ClockConfig+0x1b8>)
 800901c:	683a      	ldr	r2, [r7, #0]
 800901e:	b2d2      	uxtb	r2, r2
 8009020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009022:	4b20      	ldr	r3, [pc, #128]	@ (80090a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d001      	beq.n	8009034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e032      	b.n	800909a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d008      	beq.n	8009052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009040:	4b19      	ldr	r3, [pc, #100]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	4916      	ldr	r1, [pc, #88]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 800904e:	4313      	orrs	r3, r2
 8009050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800905e:	4b12      	ldr	r3, [pc, #72]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	490e      	ldr	r1, [pc, #56]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 800906e:	4313      	orrs	r3, r2
 8009070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009072:	f000 f821 	bl	80090b8 <HAL_RCC_GetSysClockFreq>
 8009076:	4602      	mov	r2, r0
 8009078:	4b0b      	ldr	r3, [pc, #44]	@ (80090a8 <HAL_RCC_ClockConfig+0x1bc>)
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	091b      	lsrs	r3, r3, #4
 800907e:	f003 030f 	and.w	r3, r3, #15
 8009082:	490a      	ldr	r1, [pc, #40]	@ (80090ac <HAL_RCC_ClockConfig+0x1c0>)
 8009084:	5ccb      	ldrb	r3, [r1, r3]
 8009086:	fa22 f303 	lsr.w	r3, r2, r3
 800908a:	4a09      	ldr	r2, [pc, #36]	@ (80090b0 <HAL_RCC_ClockConfig+0x1c4>)
 800908c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800908e:	4b09      	ldr	r3, [pc, #36]	@ (80090b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4618      	mov	r0, r3
 8009094:	f7f9 febe 	bl	8002e14 <HAL_InitTick>

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40023c00 	.word	0x40023c00
 80090a8:	40023800 	.word	0x40023800
 80090ac:	0800f20c 	.word	0x0800f20c
 80090b0:	2000002c 	.word	0x2000002c
 80090b4:	20000030 	.word	0x20000030

080090b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090bc:	b090      	sub	sp, #64	@ 0x40
 80090be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090d0:	4b59      	ldr	r3, [pc, #356]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x180>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f003 030c 	and.w	r3, r3, #12
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d00d      	beq.n	80090f8 <HAL_RCC_GetSysClockFreq+0x40>
 80090dc:	2b08      	cmp	r3, #8
 80090de:	f200 80a1 	bhi.w	8009224 <HAL_RCC_GetSysClockFreq+0x16c>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <HAL_RCC_GetSysClockFreq+0x34>
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d003      	beq.n	80090f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80090ea:	e09b      	b.n	8009224 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80090ec:	4b53      	ldr	r3, [pc, #332]	@ (800923c <HAL_RCC_GetSysClockFreq+0x184>)
 80090ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80090f0:	e09b      	b.n	800922a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80090f2:	4b53      	ldr	r3, [pc, #332]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x188>)
 80090f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80090f6:	e098      	b.n	800922a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80090f8:	4b4f      	ldr	r3, [pc, #316]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x180>)
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009100:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009102:	4b4d      	ldr	r3, [pc, #308]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x180>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d028      	beq.n	8009160 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800910e:	4b4a      	ldr	r3, [pc, #296]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x180>)
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	099b      	lsrs	r3, r3, #6
 8009114:	2200      	movs	r2, #0
 8009116:	623b      	str	r3, [r7, #32]
 8009118:	627a      	str	r2, [r7, #36]	@ 0x24
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009120:	2100      	movs	r1, #0
 8009122:	4b47      	ldr	r3, [pc, #284]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x188>)
 8009124:	fb03 f201 	mul.w	r2, r3, r1
 8009128:	2300      	movs	r3, #0
 800912a:	fb00 f303 	mul.w	r3, r0, r3
 800912e:	4413      	add	r3, r2
 8009130:	4a43      	ldr	r2, [pc, #268]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x188>)
 8009132:	fba0 1202 	umull	r1, r2, r0, r2
 8009136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009138:	460a      	mov	r2, r1
 800913a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800913c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800913e:	4413      	add	r3, r2
 8009140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009144:	2200      	movs	r2, #0
 8009146:	61bb      	str	r3, [r7, #24]
 8009148:	61fa      	str	r2, [r7, #28]
 800914a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800914e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009152:	f7f7 fc8b 	bl	8000a6c <__aeabi_uldivmod>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4613      	mov	r3, r2
 800915c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800915e:	e053      	b.n	8009208 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009160:	4b35      	ldr	r3, [pc, #212]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x180>)
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	099b      	lsrs	r3, r3, #6
 8009166:	2200      	movs	r2, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	617a      	str	r2, [r7, #20]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009172:	f04f 0b00 	mov.w	fp, #0
 8009176:	4652      	mov	r2, sl
 8009178:	465b      	mov	r3, fp
 800917a:	f04f 0000 	mov.w	r0, #0
 800917e:	f04f 0100 	mov.w	r1, #0
 8009182:	0159      	lsls	r1, r3, #5
 8009184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009188:	0150      	lsls	r0, r2, #5
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	ebb2 080a 	subs.w	r8, r2, sl
 8009192:	eb63 090b 	sbc.w	r9, r3, fp
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	f04f 0300 	mov.w	r3, #0
 800919e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80091a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80091a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80091aa:	ebb2 0408 	subs.w	r4, r2, r8
 80091ae:	eb63 0509 	sbc.w	r5, r3, r9
 80091b2:	f04f 0200 	mov.w	r2, #0
 80091b6:	f04f 0300 	mov.w	r3, #0
 80091ba:	00eb      	lsls	r3, r5, #3
 80091bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091c0:	00e2      	lsls	r2, r4, #3
 80091c2:	4614      	mov	r4, r2
 80091c4:	461d      	mov	r5, r3
 80091c6:	eb14 030a 	adds.w	r3, r4, sl
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	eb45 030b 	adc.w	r3, r5, fp
 80091d0:	607b      	str	r3, [r7, #4]
 80091d2:	f04f 0200 	mov.w	r2, #0
 80091d6:	f04f 0300 	mov.w	r3, #0
 80091da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091de:	4629      	mov	r1, r5
 80091e0:	028b      	lsls	r3, r1, #10
 80091e2:	4621      	mov	r1, r4
 80091e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091e8:	4621      	mov	r1, r4
 80091ea:	028a      	lsls	r2, r1, #10
 80091ec:	4610      	mov	r0, r2
 80091ee:	4619      	mov	r1, r3
 80091f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f2:	2200      	movs	r2, #0
 80091f4:	60bb      	str	r3, [r7, #8]
 80091f6:	60fa      	str	r2, [r7, #12]
 80091f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091fc:	f7f7 fc36 	bl	8000a6c <__aeabi_uldivmod>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4613      	mov	r3, r2
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009208:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x180>)
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	0c1b      	lsrs	r3, r3, #16
 800920e:	f003 0303 	and.w	r3, r3, #3
 8009212:	3301      	adds	r3, #1
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009218:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009222:	e002      	b.n	800922a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <HAL_RCC_GetSysClockFreq+0x184>)
 8009226:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800922c:	4618      	mov	r0, r3
 800922e:	3740      	adds	r7, #64	@ 0x40
 8009230:	46bd      	mov	sp, r7
 8009232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009236:	bf00      	nop
 8009238:	40023800 	.word	0x40023800
 800923c:	00f42400 	.word	0x00f42400
 8009240:	017d7840 	.word	0x017d7840

08009244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009248:	4b03      	ldr	r3, [pc, #12]	@ (8009258 <HAL_RCC_GetHCLKFreq+0x14>)
 800924a:	681b      	ldr	r3, [r3, #0]
}
 800924c:	4618      	mov	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	2000002c 	.word	0x2000002c

0800925c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009260:	f7ff fff0 	bl	8009244 <HAL_RCC_GetHCLKFreq>
 8009264:	4602      	mov	r2, r0
 8009266:	4b05      	ldr	r3, [pc, #20]	@ (800927c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	0a9b      	lsrs	r3, r3, #10
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	4903      	ldr	r1, [pc, #12]	@ (8009280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009272:	5ccb      	ldrb	r3, [r1, r3]
 8009274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009278:	4618      	mov	r0, r3
 800927a:	bd80      	pop	{r7, pc}
 800927c:	40023800 	.word	0x40023800
 8009280:	0800f21c 	.word	0x0800f21c

08009284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e041      	b.n	800931a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7f9 f9e8 	bl	8002680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f000 fab2 	bl	800982c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d001      	beq.n	800933c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e044      	b.n	80093c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0201 	orr.w	r2, r2, #1
 8009352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a1e      	ldr	r2, [pc, #120]	@ (80093d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d018      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x6c>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009366:	d013      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x6c>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1a      	ldr	r2, [pc, #104]	@ (80093d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00e      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x6c>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a19      	ldr	r2, [pc, #100]	@ (80093dc <HAL_TIM_Base_Start_IT+0xb8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d009      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x6c>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a17      	ldr	r2, [pc, #92]	@ (80093e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d004      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x6c>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a16      	ldr	r2, [pc, #88]	@ (80093e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d111      	bne.n	80093b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b06      	cmp	r3, #6
 80093a0:	d010      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0201 	orr.w	r2, r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b2:	e007      	b.n	80093c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	40010000 	.word	0x40010000
 80093d8:	40000400 	.word	0x40000400
 80093dc:	40000800 	.word	0x40000800
 80093e0:	40000c00 	.word	0x40000c00
 80093e4:	40014000 	.word	0x40014000

080093e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d020      	beq.n	800944c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01b      	beq.n	800944c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f06f 0202 	mvn.w	r2, #2
 800941c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f9db 	bl	80097ee <HAL_TIM_IC_CaptureCallback>
 8009438:	e005      	b.n	8009446 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f9cd 	bl	80097da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f9de 	bl	8009802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f003 0304 	and.w	r3, r3, #4
 8009452:	2b00      	cmp	r3, #0
 8009454:	d020      	beq.n	8009498 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01b      	beq.n	8009498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f06f 0204 	mvn.w	r2, #4
 8009468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2202      	movs	r2, #2
 800946e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f9b5 	bl	80097ee <HAL_TIM_IC_CaptureCallback>
 8009484:	e005      	b.n	8009492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9a7 	bl	80097da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f9b8 	bl	8009802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d020      	beq.n	80094e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01b      	beq.n	80094e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0208 	mvn.w	r2, #8
 80094b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2204      	movs	r2, #4
 80094ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f98f 	bl	80097ee <HAL_TIM_IC_CaptureCallback>
 80094d0:	e005      	b.n	80094de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f981 	bl	80097da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f992 	bl	8009802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f003 0310 	and.w	r3, r3, #16
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d020      	beq.n	8009530 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01b      	beq.n	8009530 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0210 	mvn.w	r2, #16
 8009500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2208      	movs	r2, #8
 8009506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f969 	bl	80097ee <HAL_TIM_IC_CaptureCallback>
 800951c:	e005      	b.n	800952a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f95b 	bl	80097da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f96c 	bl	8009802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00c      	beq.n	8009554 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f06f 0201 	mvn.w	r2, #1
 800954c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7f7 fc62 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00c      	beq.n	8009578 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fb84 	bl	8009c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00c      	beq.n	800959c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009588:	2b00      	cmp	r3, #0
 800958a:	d007      	beq.n	800959c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f93d 	bl	8009816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00c      	beq.n	80095c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f06f 0220 	mvn.w	r2, #32
 80095b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fb56 	bl	8009c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095c0:	bf00      	nop
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d101      	bne.n	80095e4 <HAL_TIM_ConfigClockSource+0x1c>
 80095e0:	2302      	movs	r3, #2
 80095e2:	e0b4      	b.n	800974e <HAL_TIM_ConfigClockSource+0x186>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800960a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800961c:	d03e      	beq.n	800969c <HAL_TIM_ConfigClockSource+0xd4>
 800961e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009622:	f200 8087 	bhi.w	8009734 <HAL_TIM_ConfigClockSource+0x16c>
 8009626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800962a:	f000 8086 	beq.w	800973a <HAL_TIM_ConfigClockSource+0x172>
 800962e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009632:	d87f      	bhi.n	8009734 <HAL_TIM_ConfigClockSource+0x16c>
 8009634:	2b70      	cmp	r3, #112	@ 0x70
 8009636:	d01a      	beq.n	800966e <HAL_TIM_ConfigClockSource+0xa6>
 8009638:	2b70      	cmp	r3, #112	@ 0x70
 800963a:	d87b      	bhi.n	8009734 <HAL_TIM_ConfigClockSource+0x16c>
 800963c:	2b60      	cmp	r3, #96	@ 0x60
 800963e:	d050      	beq.n	80096e2 <HAL_TIM_ConfigClockSource+0x11a>
 8009640:	2b60      	cmp	r3, #96	@ 0x60
 8009642:	d877      	bhi.n	8009734 <HAL_TIM_ConfigClockSource+0x16c>
 8009644:	2b50      	cmp	r3, #80	@ 0x50
 8009646:	d03c      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0xfa>
 8009648:	2b50      	cmp	r3, #80	@ 0x50
 800964a:	d873      	bhi.n	8009734 <HAL_TIM_ConfigClockSource+0x16c>
 800964c:	2b40      	cmp	r3, #64	@ 0x40
 800964e:	d058      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x13a>
 8009650:	2b40      	cmp	r3, #64	@ 0x40
 8009652:	d86f      	bhi.n	8009734 <HAL_TIM_ConfigClockSource+0x16c>
 8009654:	2b30      	cmp	r3, #48	@ 0x30
 8009656:	d064      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x15a>
 8009658:	2b30      	cmp	r3, #48	@ 0x30
 800965a:	d86b      	bhi.n	8009734 <HAL_TIM_ConfigClockSource+0x16c>
 800965c:	2b20      	cmp	r3, #32
 800965e:	d060      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x15a>
 8009660:	2b20      	cmp	r3, #32
 8009662:	d867      	bhi.n	8009734 <HAL_TIM_ConfigClockSource+0x16c>
 8009664:	2b00      	cmp	r3, #0
 8009666:	d05c      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x15a>
 8009668:	2b10      	cmp	r3, #16
 800966a:	d05a      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x15a>
 800966c:	e062      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800967e:	f000 fa66 	bl	8009b4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	609a      	str	r2, [r3, #8]
      break;
 800969a:	e04f      	b.n	800973c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096ac:	f000 fa4f 	bl	8009b4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096be:	609a      	str	r2, [r3, #8]
      break;
 80096c0:	e03c      	b.n	800973c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ce:	461a      	mov	r2, r3
 80096d0:	f000 f9c3 	bl	8009a5a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2150      	movs	r1, #80	@ 0x50
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fa1c 	bl	8009b18 <TIM_ITRx_SetConfig>
      break;
 80096e0:	e02c      	b.n	800973c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096ee:	461a      	mov	r2, r3
 80096f0:	f000 f9e2 	bl	8009ab8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2160      	movs	r1, #96	@ 0x60
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fa0c 	bl	8009b18 <TIM_ITRx_SetConfig>
      break;
 8009700:	e01c      	b.n	800973c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800970e:	461a      	mov	r2, r3
 8009710:	f000 f9a3 	bl	8009a5a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2140      	movs	r1, #64	@ 0x40
 800971a:	4618      	mov	r0, r3
 800971c:	f000 f9fc 	bl	8009b18 <TIM_ITRx_SetConfig>
      break;
 8009720:	e00c      	b.n	800973c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4619      	mov	r1, r3
 800972c:	4610      	mov	r0, r2
 800972e:	f000 f9f3 	bl	8009b18 <TIM_ITRx_SetConfig>
      break;
 8009732:	e003      	b.n	800973c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	73fb      	strb	r3, [r7, #15]
      break;
 8009738:	e000      	b.n	800973c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800973a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009766:	2b01      	cmp	r3, #1
 8009768:	d101      	bne.n	800976e <HAL_TIM_SlaveConfigSynchro+0x18>
 800976a:	2302      	movs	r3, #2
 800976c:	e031      	b.n	80097d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2202      	movs	r2, #2
 800977a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f8d9 	bl	8009938 <TIM_SlaveTimer_SetConfig>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d009      	beq.n	80097a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e018      	b.n	80097d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80097be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800981e:	bf00      	nop
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
	...

0800982c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a37      	ldr	r2, [pc, #220]	@ (800991c <TIM_Base_SetConfig+0xf0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00f      	beq.n	8009864 <TIM_Base_SetConfig+0x38>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800984a:	d00b      	beq.n	8009864 <TIM_Base_SetConfig+0x38>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a34      	ldr	r2, [pc, #208]	@ (8009920 <TIM_Base_SetConfig+0xf4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d007      	beq.n	8009864 <TIM_Base_SetConfig+0x38>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a33      	ldr	r2, [pc, #204]	@ (8009924 <TIM_Base_SetConfig+0xf8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_Base_SetConfig+0x38>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a32      	ldr	r2, [pc, #200]	@ (8009928 <TIM_Base_SetConfig+0xfc>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d108      	bne.n	8009876 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800986a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a28      	ldr	r2, [pc, #160]	@ (800991c <TIM_Base_SetConfig+0xf0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d01b      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009884:	d017      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a25      	ldr	r2, [pc, #148]	@ (8009920 <TIM_Base_SetConfig+0xf4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d013      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a24      	ldr	r2, [pc, #144]	@ (8009924 <TIM_Base_SetConfig+0xf8>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00f      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a23      	ldr	r2, [pc, #140]	@ (8009928 <TIM_Base_SetConfig+0xfc>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d00b      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a22      	ldr	r2, [pc, #136]	@ (800992c <TIM_Base_SetConfig+0x100>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d007      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a21      	ldr	r2, [pc, #132]	@ (8009930 <TIM_Base_SetConfig+0x104>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d003      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a20      	ldr	r2, [pc, #128]	@ (8009934 <TIM_Base_SetConfig+0x108>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d108      	bne.n	80098c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	689a      	ldr	r2, [r3, #8]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a0c      	ldr	r2, [pc, #48]	@ (800991c <TIM_Base_SetConfig+0xf0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d103      	bne.n	80098f6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f043 0204 	orr.w	r2, r3, #4
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	601a      	str	r2, [r3, #0]
}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40010000 	.word	0x40010000
 8009920:	40000400 	.word	0x40000400
 8009924:	40000800 	.word	0x40000800
 8009928:	40000c00 	.word	0x40000c00
 800992c:	40014000 	.word	0x40014000
 8009930:	40014400 	.word	0x40014400
 8009934:	40014800 	.word	0x40014800

08009938 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009954:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f023 0307 	bic.w	r3, r3, #7
 8009966:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	4313      	orrs	r3, r2
 8009970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	2b70      	cmp	r3, #112	@ 0x70
 8009980:	d01a      	beq.n	80099b8 <TIM_SlaveTimer_SetConfig+0x80>
 8009982:	2b70      	cmp	r3, #112	@ 0x70
 8009984:	d860      	bhi.n	8009a48 <TIM_SlaveTimer_SetConfig+0x110>
 8009986:	2b60      	cmp	r3, #96	@ 0x60
 8009988:	d054      	beq.n	8009a34 <TIM_SlaveTimer_SetConfig+0xfc>
 800998a:	2b60      	cmp	r3, #96	@ 0x60
 800998c:	d85c      	bhi.n	8009a48 <TIM_SlaveTimer_SetConfig+0x110>
 800998e:	2b50      	cmp	r3, #80	@ 0x50
 8009990:	d046      	beq.n	8009a20 <TIM_SlaveTimer_SetConfig+0xe8>
 8009992:	2b50      	cmp	r3, #80	@ 0x50
 8009994:	d858      	bhi.n	8009a48 <TIM_SlaveTimer_SetConfig+0x110>
 8009996:	2b40      	cmp	r3, #64	@ 0x40
 8009998:	d019      	beq.n	80099ce <TIM_SlaveTimer_SetConfig+0x96>
 800999a:	2b40      	cmp	r3, #64	@ 0x40
 800999c:	d854      	bhi.n	8009a48 <TIM_SlaveTimer_SetConfig+0x110>
 800999e:	2b30      	cmp	r3, #48	@ 0x30
 80099a0:	d055      	beq.n	8009a4e <TIM_SlaveTimer_SetConfig+0x116>
 80099a2:	2b30      	cmp	r3, #48	@ 0x30
 80099a4:	d850      	bhi.n	8009a48 <TIM_SlaveTimer_SetConfig+0x110>
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d051      	beq.n	8009a4e <TIM_SlaveTimer_SetConfig+0x116>
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d84c      	bhi.n	8009a48 <TIM_SlaveTimer_SetConfig+0x110>
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d04d      	beq.n	8009a4e <TIM_SlaveTimer_SetConfig+0x116>
 80099b2:	2b10      	cmp	r3, #16
 80099b4:	d04b      	beq.n	8009a4e <TIM_SlaveTimer_SetConfig+0x116>
 80099b6:	e047      	b.n	8009a48 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80099c8:	f000 f8c1 	bl	8009b4e <TIM_ETR_SetConfig>
      break;
 80099cc:	e040      	b.n	8009a50 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	d101      	bne.n	80099da <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e03b      	b.n	8009a52 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6a1b      	ldr	r3, [r3, #32]
 80099e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6a1a      	ldr	r2, [r3, #32]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0201 	bic.w	r2, r2, #1
 80099f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a00:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	621a      	str	r2, [r3, #32]
      break;
 8009a1e:	e017      	b.n	8009a50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f000 f814 	bl	8009a5a <TIM_TI1_ConfigInputStage>
      break;
 8009a32:	e00d      	b.n	8009a50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a40:	461a      	mov	r2, r3
 8009a42:	f000 f839 	bl	8009ab8 <TIM_TI2_ConfigInputStage>
      break;
 8009a46:	e003      	b.n	8009a50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4c:	e000      	b.n	8009a50 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009a4e:	bf00      	nop
  }

  return status;
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b087      	sub	sp, #28
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	f023 0201 	bic.w	r2, r3, #1
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f023 030a 	bic.w	r3, r3, #10
 8009a96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	621a      	str	r2, [r3, #32]
}
 8009aac:	bf00      	nop
 8009aae:	371c      	adds	r7, #28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	f023 0210 	bic.w	r2, r3, #16
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	031b      	lsls	r3, r3, #12
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009af4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	011b      	lsls	r3, r3, #4
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	621a      	str	r2, [r3, #32]
}
 8009b0c:	bf00      	nop
 8009b0e:	371c      	adds	r7, #28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	f043 0307 	orr.w	r3, r3, #7
 8009b3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	609a      	str	r2, [r3, #8]
}
 8009b42:	bf00      	nop
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b087      	sub	sp, #28
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	607a      	str	r2, [r7, #4]
 8009b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	021a      	lsls	r2, r3, #8
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	431a      	orrs	r2, r3
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	609a      	str	r2, [r3, #8]
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
	...

08009b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e050      	b.n	8009c4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a1c      	ldr	r2, [pc, #112]	@ (8009c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d018      	beq.n	8009c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bf4:	d013      	beq.n	8009c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a18      	ldr	r2, [pc, #96]	@ (8009c5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d00e      	beq.n	8009c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a16      	ldr	r2, [pc, #88]	@ (8009c60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d009      	beq.n	8009c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a15      	ldr	r2, [pc, #84]	@ (8009c64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d004      	beq.n	8009c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a13      	ldr	r2, [pc, #76]	@ (8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d10c      	bne.n	8009c38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	40010000 	.word	0x40010000
 8009c5c:	40000400 	.word	0x40000400
 8009c60:	40000800 	.word	0x40000800
 8009c64:	40000c00 	.word	0x40000c00
 8009c68:	40014000 	.word	0x40014000

08009c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c94:	b084      	sub	sp, #16
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	f107 001c 	add.w	r0, r7, #28
 8009ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ca6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d123      	bne.n	8009cf6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d105      	bne.n	8009cea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f001 fae8 	bl	800b2c0 <USB_CoreReset>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
 8009cf4:	e01b      	b.n	8009d2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fadc 	bl	800b2c0 <USB_CoreReset>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d106      	bne.n	8009d22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d20:	e005      	b.n	8009d2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d2e:	7fbb      	ldrb	r3, [r7, #30]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d10b      	bne.n	8009d4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	f043 0206 	orr.w	r2, r3, #6
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f043 0220 	orr.w	r2, r3, #32
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d58:	b004      	add	sp, #16
 8009d5a:	4770      	bx	lr

08009d5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009d6a:	79fb      	ldrb	r3, [r7, #7]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d165      	bne.n	8009e3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	4a41      	ldr	r2, [pc, #260]	@ (8009e78 <USB_SetTurnaroundTime+0x11c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d906      	bls.n	8009d86 <USB_SetTurnaroundTime+0x2a>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	4a40      	ldr	r2, [pc, #256]	@ (8009e7c <USB_SetTurnaroundTime+0x120>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d202      	bcs.n	8009d86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009d80:	230f      	movs	r3, #15
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e062      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	4a3c      	ldr	r2, [pc, #240]	@ (8009e7c <USB_SetTurnaroundTime+0x120>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d306      	bcc.n	8009d9c <USB_SetTurnaroundTime+0x40>
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4a3b      	ldr	r2, [pc, #236]	@ (8009e80 <USB_SetTurnaroundTime+0x124>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d202      	bcs.n	8009d9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009d96:	230e      	movs	r3, #14
 8009d98:	617b      	str	r3, [r7, #20]
 8009d9a:	e057      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	4a38      	ldr	r2, [pc, #224]	@ (8009e80 <USB_SetTurnaroundTime+0x124>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d306      	bcc.n	8009db2 <USB_SetTurnaroundTime+0x56>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	4a37      	ldr	r2, [pc, #220]	@ (8009e84 <USB_SetTurnaroundTime+0x128>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d202      	bcs.n	8009db2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009dac:	230d      	movs	r3, #13
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	e04c      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	4a33      	ldr	r2, [pc, #204]	@ (8009e84 <USB_SetTurnaroundTime+0x128>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d306      	bcc.n	8009dc8 <USB_SetTurnaroundTime+0x6c>
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	4a32      	ldr	r2, [pc, #200]	@ (8009e88 <USB_SetTurnaroundTime+0x12c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d802      	bhi.n	8009dc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	e041      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4a2f      	ldr	r2, [pc, #188]	@ (8009e88 <USB_SetTurnaroundTime+0x12c>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d906      	bls.n	8009dde <USB_SetTurnaroundTime+0x82>
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8009e8c <USB_SetTurnaroundTime+0x130>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d802      	bhi.n	8009dde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009dd8:	230b      	movs	r3, #11
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	e036      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	4a2a      	ldr	r2, [pc, #168]	@ (8009e8c <USB_SetTurnaroundTime+0x130>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d906      	bls.n	8009df4 <USB_SetTurnaroundTime+0x98>
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	4a29      	ldr	r2, [pc, #164]	@ (8009e90 <USB_SetTurnaroundTime+0x134>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d802      	bhi.n	8009df4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009dee:	230a      	movs	r3, #10
 8009df0:	617b      	str	r3, [r7, #20]
 8009df2:	e02b      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	4a26      	ldr	r2, [pc, #152]	@ (8009e90 <USB_SetTurnaroundTime+0x134>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d906      	bls.n	8009e0a <USB_SetTurnaroundTime+0xae>
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	4a25      	ldr	r2, [pc, #148]	@ (8009e94 <USB_SetTurnaroundTime+0x138>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d202      	bcs.n	8009e0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009e04:	2309      	movs	r3, #9
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	e020      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	4a21      	ldr	r2, [pc, #132]	@ (8009e94 <USB_SetTurnaroundTime+0x138>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d306      	bcc.n	8009e20 <USB_SetTurnaroundTime+0xc4>
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	4a20      	ldr	r2, [pc, #128]	@ (8009e98 <USB_SetTurnaroundTime+0x13c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d802      	bhi.n	8009e20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009e1a:	2308      	movs	r3, #8
 8009e1c:	617b      	str	r3, [r7, #20]
 8009e1e:	e015      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4a1d      	ldr	r2, [pc, #116]	@ (8009e98 <USB_SetTurnaroundTime+0x13c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d906      	bls.n	8009e36 <USB_SetTurnaroundTime+0xda>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8009e9c <USB_SetTurnaroundTime+0x140>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d202      	bcs.n	8009e36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009e30:	2307      	movs	r3, #7
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	e00a      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009e36:	2306      	movs	r3, #6
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	e007      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009e3c:	79fb      	ldrb	r3, [r7, #7]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d102      	bne.n	8009e48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009e42:	2309      	movs	r3, #9
 8009e44:	617b      	str	r3, [r7, #20]
 8009e46:	e001      	b.n	8009e4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009e48:	2309      	movs	r3, #9
 8009e4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	029b      	lsls	r3, r3, #10
 8009e60:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009e64:	431a      	orrs	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	371c      	adds	r7, #28
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	00d8acbf 	.word	0x00d8acbf
 8009e7c:	00e4e1c0 	.word	0x00e4e1c0
 8009e80:	00f42400 	.word	0x00f42400
 8009e84:	01067380 	.word	0x01067380
 8009e88:	011a499f 	.word	0x011a499f
 8009e8c:	01312cff 	.word	0x01312cff
 8009e90:	014ca43f 	.word	0x014ca43f
 8009e94:	016e3600 	.word	0x016e3600
 8009e98:	01a6ab1f 	.word	0x01a6ab1f
 8009e9c:	01e84800 	.word	0x01e84800

08009ea0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f043 0201 	orr.w	r2, r3, #1
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f023 0201 	bic.w	r2, r3, #1
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d115      	bne.n	8009f32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009f12:	200a      	movs	r0, #10
 8009f14:	f7f8 ffce 	bl	8002eb4 <HAL_Delay>
      ms += 10U;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	330a      	adds	r3, #10
 8009f1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 f93f 	bl	800b1a2 <USB_GetMode>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d01e      	beq.n	8009f68 <USB_SetCurrentMode+0x84>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8009f2e:	d9f0      	bls.n	8009f12 <USB_SetCurrentMode+0x2e>
 8009f30:	e01a      	b.n	8009f68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f32:	78fb      	ldrb	r3, [r7, #3]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d115      	bne.n	8009f64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009f44:	200a      	movs	r0, #10
 8009f46:	f7f8 ffb5 	bl	8002eb4 <HAL_Delay>
      ms += 10U;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	330a      	adds	r3, #10
 8009f4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 f926 	bl	800b1a2 <USB_GetMode>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d005      	beq.n	8009f68 <USB_SetCurrentMode+0x84>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009f60:	d9f0      	bls.n	8009f44 <USB_SetCurrentMode+0x60>
 8009f62:	e001      	b.n	8009f68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e005      	b.n	8009f74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2bc8      	cmp	r3, #200	@ 0xc8
 8009f6c:	d101      	bne.n	8009f72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e000      	b.n	8009f74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b086      	sub	sp, #24
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f96:	2300      	movs	r3, #0
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	e009      	b.n	8009fb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	3340      	adds	r3, #64	@ 0x40
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	3301      	adds	r3, #1
 8009fae:	613b      	str	r3, [r7, #16]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2b0e      	cmp	r3, #14
 8009fb4:	d9f2      	bls.n	8009f9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009fb6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d11c      	bne.n	8009ff8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009fcc:	f043 0302 	orr.w	r3, r3, #2
 8009fd0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009ff6:	e00b      	b.n	800a010 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ffc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a008:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a016:	461a      	mov	r2, r3
 800a018:	2300      	movs	r3, #0
 800a01a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a01c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a020:	2b01      	cmp	r3, #1
 800a022:	d10d      	bne.n	800a040 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d104      	bne.n	800a036 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a02c:	2100      	movs	r1, #0
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f968 	bl	800a304 <USB_SetDevSpeed>
 800a034:	e008      	b.n	800a048 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a036:	2101      	movs	r1, #1
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f963 	bl	800a304 <USB_SetDevSpeed>
 800a03e:	e003      	b.n	800a048 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a040:	2103      	movs	r1, #3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f95e 	bl	800a304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a048:	2110      	movs	r1, #16
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f8fa 	bl	800a244 <USB_FlushTxFifo>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f924 	bl	800a2a8 <USB_FlushRxFifo>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a070:	461a      	mov	r2, r3
 800a072:	2300      	movs	r3, #0
 800a074:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a07c:	461a      	mov	r2, r3
 800a07e:	2300      	movs	r3, #0
 800a080:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a088:	461a      	mov	r2, r3
 800a08a:	2300      	movs	r3, #0
 800a08c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a08e:	2300      	movs	r3, #0
 800a090:	613b      	str	r3, [r7, #16]
 800a092:	e043      	b.n	800a11c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0aa:	d118      	bne.n	800a0de <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10a      	bne.n	800a0c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	e013      	b.n	800a0f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	e008      	b.n	800a0f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	015a      	lsls	r2, r3, #5
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	2300      	movs	r3, #0
 800a100:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a10e:	461a      	mov	r2, r3
 800a110:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a114:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	3301      	adds	r3, #1
 800a11a:	613b      	str	r3, [r7, #16]
 800a11c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a120:	461a      	mov	r2, r3
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	4293      	cmp	r3, r2
 800a126:	d3b5      	bcc.n	800a094 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a128:	2300      	movs	r3, #0
 800a12a:	613b      	str	r3, [r7, #16]
 800a12c:	e043      	b.n	800a1b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a140:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a144:	d118      	bne.n	800a178 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a158:	461a      	mov	r2, r3
 800a15a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	e013      	b.n	800a18a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16e:	461a      	mov	r2, r3
 800a170:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	e008      	b.n	800a18a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a184:	461a      	mov	r2, r3
 800a186:	2300      	movs	r3, #0
 800a188:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4413      	add	r3, r2
 800a192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a196:	461a      	mov	r2, r3
 800a198:	2300      	movs	r3, #0
 800a19a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	015a      	lsls	r2, r3, #5
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	613b      	str	r3, [r7, #16]
 800a1b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d3b5      	bcc.n	800a12e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a1e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d105      	bne.n	800a1f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	f043 0210 	orr.w	r2, r3, #16
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	699a      	ldr	r2, [r3, #24]
 800a1fc:	4b10      	ldr	r3, [pc, #64]	@ (800a240 <USB_DevInit+0x2c4>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a204:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d005      	beq.n	800a218 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	f043 0208 	orr.w	r2, r3, #8
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a218:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d107      	bne.n	800a230 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a228:	f043 0304 	orr.w	r3, r3, #4
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a230:	7dfb      	ldrb	r3, [r7, #23]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a23c:	b004      	add	sp, #16
 800a23e:	4770      	bx	lr
 800a240:	803c3800 	.word	0x803c3800

0800a244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3301      	adds	r3, #1
 800a256:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a25e:	d901      	bls.n	800a264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e01b      	b.n	800a29c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	daf2      	bge.n	800a252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	019b      	lsls	r3, r3, #6
 800a274:	f043 0220 	orr.w	r2, r3, #32
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	3301      	adds	r3, #1
 800a280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a288:	d901      	bls.n	800a28e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e006      	b.n	800a29c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f003 0320 	and.w	r3, r3, #32
 800a296:	2b20      	cmp	r3, #32
 800a298:	d0f0      	beq.n	800a27c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2c0:	d901      	bls.n	800a2c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e018      	b.n	800a2f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	daf2      	bge.n	800a2b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2210      	movs	r2, #16
 800a2d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2e4:	d901      	bls.n	800a2ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e006      	b.n	800a2f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	f003 0310 	and.w	r3, r3, #16
 800a2f2:	2b10      	cmp	r3, #16
 800a2f4:	d0f0      	beq.n	800a2d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a324:	4313      	orrs	r3, r2
 800a326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a336:	b480      	push	{r7}
 800a338:	b087      	sub	sp, #28
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f003 0306 	and.w	r3, r3, #6
 800a34e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d102      	bne.n	800a35c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a356:	2300      	movs	r3, #0
 800a358:	75fb      	strb	r3, [r7, #23]
 800a35a:	e00a      	b.n	800a372 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d002      	beq.n	800a368 <USB_GetDevSpeed+0x32>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b06      	cmp	r3, #6
 800a366:	d102      	bne.n	800a36e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a368:	2302      	movs	r3, #2
 800a36a:	75fb      	strb	r3, [r7, #23]
 800a36c:	e001      	b.n	800a372 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a36e:	230f      	movs	r3, #15
 800a370:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a372:	7dfb      	ldrb	r3, [r7, #23]
}
 800a374:	4618      	mov	r0, r3
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	785b      	ldrb	r3, [r3, #1]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d13a      	bne.n	800a412 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3a2:	69da      	ldr	r2, [r3, #28]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	68f9      	ldr	r1, [r7, #12]
 800a3b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d155      	bne.n	800a480 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	791b      	ldrb	r3, [r3, #4]
 800a3ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	059b      	lsls	r3, r3, #22
 800a3f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	440a      	add	r2, r1
 800a402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a40a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	e036      	b.n	800a480 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a418:	69da      	ldr	r2, [r3, #28]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	f003 030f 	and.w	r3, r3, #15
 800a422:	2101      	movs	r1, #1
 800a424:	fa01 f303 	lsl.w	r3, r1, r3
 800a428:	041b      	lsls	r3, r3, #16
 800a42a:	68f9      	ldr	r1, [r7, #12]
 800a42c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a430:	4313      	orrs	r3, r2
 800a432:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	015a      	lsls	r2, r3, #5
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d11a      	bne.n	800a480 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	791b      	ldrb	r3, [r3, #4]
 800a464:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a466:	430b      	orrs	r3, r1
 800a468:	4313      	orrs	r3, r2
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a47a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a47e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
	...

0800a490 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	785b      	ldrb	r3, [r3, #1]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d161      	bne.n	800a570 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4c2:	d11f      	bne.n	800a504 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	0151      	lsls	r1, r2, #5
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	440a      	add	r2, r1
 800a4da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	0151      	lsls	r1, r2, #5
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	440a      	add	r2, r1
 800a4fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a50a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	2101      	movs	r1, #1
 800a516:	fa01 f303 	lsl.w	r3, r1, r3
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	43db      	mvns	r3, r3
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a524:	4013      	ands	r3, r2
 800a526:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a52e:	69da      	ldr	r2, [r3, #28]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	f003 030f 	and.w	r3, r3, #15
 800a538:	2101      	movs	r1, #1
 800a53a:	fa01 f303 	lsl.w	r3, r1, r3
 800a53e:	b29b      	uxth	r3, r3
 800a540:	43db      	mvns	r3, r3
 800a542:	68f9      	ldr	r1, [r7, #12]
 800a544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a548:	4013      	ands	r3, r2
 800a54a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	015a      	lsls	r2, r3, #5
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	4413      	add	r3, r2
 800a554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	0159      	lsls	r1, r3, #5
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	440b      	add	r3, r1
 800a562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a566:	4619      	mov	r1, r3
 800a568:	4b35      	ldr	r3, [pc, #212]	@ (800a640 <USB_DeactivateEndpoint+0x1b0>)
 800a56a:	4013      	ands	r3, r2
 800a56c:	600b      	str	r3, [r1, #0]
 800a56e:	e060      	b.n	800a632 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a582:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a586:	d11f      	bne.n	800a5c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	0151      	lsls	r1, r2, #5
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	440a      	add	r2, r1
 800a59e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a5a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	f003 030f 	and.w	r3, r3, #15
 800a5d8:	2101      	movs	r1, #1
 800a5da:	fa01 f303 	lsl.w	r3, r1, r3
 800a5de:	041b      	lsls	r3, r3, #16
 800a5e0:	43db      	mvns	r3, r3
 800a5e2:	68f9      	ldr	r1, [r7, #12]
 800a5e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5f2:	69da      	ldr	r2, [r3, #28]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	f003 030f 	and.w	r3, r3, #15
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a602:	041b      	lsls	r3, r3, #16
 800a604:	43db      	mvns	r3, r3
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a60c:	4013      	ands	r3, r2
 800a60e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4413      	add	r3, r2
 800a618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	0159      	lsls	r1, r3, #5
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	440b      	add	r3, r1
 800a626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62a:	4619      	mov	r1, r3
 800a62c:	4b05      	ldr	r3, [pc, #20]	@ (800a644 <USB_DeactivateEndpoint+0x1b4>)
 800a62e:	4013      	ands	r3, r2
 800a630:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	ec337800 	.word	0xec337800
 800a644:	eff37800 	.word	0xeff37800

0800a648 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08a      	sub	sp, #40	@ 0x28
 800a64c:	af02      	add	r7, sp, #8
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	4613      	mov	r3, r2
 800a654:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	2b01      	cmp	r3, #1
 800a666:	f040 817f 	bne.w	800a968 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d132      	bne.n	800a6d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	015a      	lsls	r2, r3, #5
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	4413      	add	r3, r2
 800a67a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	0151      	lsls	r1, r2, #5
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	440a      	add	r2, r1
 800a688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a68c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a690:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	69ba      	ldr	r2, [r7, #24]
 800a6a6:	0151      	lsls	r1, r2, #5
 800a6a8:	69fa      	ldr	r2, [r7, #28]
 800a6aa:	440a      	add	r2, r1
 800a6ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	69fa      	ldr	r2, [r7, #28]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6d0:	0cdb      	lsrs	r3, r3, #19
 800a6d2:	04db      	lsls	r3, r3, #19
 800a6d4:	6113      	str	r3, [r2, #16]
 800a6d6:	e097      	b.n	800a808 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	0151      	lsls	r1, r2, #5
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f2:	0cdb      	lsrs	r3, r3, #19
 800a6f4:	04db      	lsls	r3, r3, #19
 800a6f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	0151      	lsls	r1, r2, #5
 800a70a:	69fa      	ldr	r2, [r7, #28]
 800a70c:	440a      	add	r2, r1
 800a70e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a712:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a716:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a71a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d11a      	bne.n	800a758 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d903      	bls.n	800a736 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	0151      	lsls	r1, r2, #5
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	440a      	add	r2, r1
 800a74c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a750:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a754:	6113      	str	r3, [r2, #16]
 800a756:	e044      	b.n	800a7e2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	691a      	ldr	r2, [r3, #16]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	4413      	add	r3, r2
 800a762:	1e5a      	subs	r2, r3, #1
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	fbb2 f3f3 	udiv	r3, r2, r3
 800a76c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77a:	691a      	ldr	r2, [r3, #16]
 800a77c:	8afb      	ldrh	r3, [r7, #22]
 800a77e:	04d9      	lsls	r1, r3, #19
 800a780:	4ba4      	ldr	r3, [pc, #656]	@ (800aa14 <USB_EPStartXfer+0x3cc>)
 800a782:	400b      	ands	r3, r1
 800a784:	69b9      	ldr	r1, [r7, #24]
 800a786:	0148      	lsls	r0, r1, #5
 800a788:	69f9      	ldr	r1, [r7, #28]
 800a78a:	4401      	add	r1, r0
 800a78c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a790:	4313      	orrs	r3, r2
 800a792:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	791b      	ldrb	r3, [r3, #4]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d122      	bne.n	800a7e2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	69ba      	ldr	r2, [r7, #24]
 800a7ac:	0151      	lsls	r1, r2, #5
 800a7ae:	69fa      	ldr	r2, [r7, #28]
 800a7b0:	440a      	add	r2, r1
 800a7b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7b6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a7ba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7c8:	691a      	ldr	r2, [r3, #16]
 800a7ca:	8afb      	ldrh	r3, [r7, #22]
 800a7cc:	075b      	lsls	r3, r3, #29
 800a7ce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a7d2:	69b9      	ldr	r1, [r7, #24]
 800a7d4:	0148      	lsls	r0, r1, #5
 800a7d6:	69f9      	ldr	r1, [r7, #28]
 800a7d8:	4401      	add	r1, r0
 800a7da:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ee:	691a      	ldr	r2, [r3, #16]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f8:	69b9      	ldr	r1, [r7, #24]
 800a7fa:	0148      	lsls	r0, r1, #5
 800a7fc:	69f9      	ldr	r1, [r7, #28]
 800a7fe:	4401      	add	r1, r0
 800a800:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a804:	4313      	orrs	r3, r2
 800a806:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d14b      	bne.n	800a8a6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d009      	beq.n	800a82a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a822:	461a      	mov	r2, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	791b      	ldrb	r3, [r3, #4]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d128      	bne.n	800a884 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d110      	bne.n	800a864 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	0151      	lsls	r1, r2, #5
 800a854:	69fa      	ldr	r2, [r7, #28]
 800a856:	440a      	add	r2, r1
 800a858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a85c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	e00f      	b.n	800a884 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	69ba      	ldr	r2, [r7, #24]
 800a874:	0151      	lsls	r1, r2, #5
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	440a      	add	r2, r1
 800a87a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a87e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a882:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	0151      	lsls	r1, r2, #5
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	440a      	add	r2, r1
 800a89a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a89e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	e166      	b.n	800ab74 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69ba      	ldr	r2, [r7, #24]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	69fa      	ldr	r2, [r7, #28]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a8c4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	791b      	ldrb	r3, [r3, #4]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d015      	beq.n	800a8fa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 814e 	beq.w	800ab74 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	f003 030f 	and.w	r3, r3, #15
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ee:	69f9      	ldr	r1, [r7, #28]
 800a8f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	634b      	str	r3, [r1, #52]	@ 0x34
 800a8f8:	e13c      	b.n	800ab74 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a906:	2b00      	cmp	r3, #0
 800a908:	d110      	bne.n	800a92c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	69ba      	ldr	r2, [r7, #24]
 800a91a:	0151      	lsls	r1, r2, #5
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	440a      	add	r2, r1
 800a920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a924:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e00f      	b.n	800a94c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	0151      	lsls	r1, r2, #5
 800a93e:	69fa      	ldr	r2, [r7, #28]
 800a940:	440a      	add	r2, r1
 800a942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a94a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	68d9      	ldr	r1, [r3, #12]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	781a      	ldrb	r2, [r3, #0]
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	b298      	uxth	r0, r3
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	4603      	mov	r3, r0
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 f9b9 	bl	800acd8 <USB_WritePacket>
 800a966:	e105      	b.n	800ab74 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	0151      	lsls	r1, r2, #5
 800a97a:	69fa      	ldr	r2, [r7, #28]
 800a97c:	440a      	add	r2, r1
 800a97e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a982:	0cdb      	lsrs	r3, r3, #19
 800a984:	04db      	lsls	r3, r3, #19
 800a986:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	0151      	lsls	r1, r2, #5
 800a99a:	69fa      	ldr	r2, [r7, #28]
 800a99c:	440a      	add	r2, r1
 800a99e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a9a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a9aa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d132      	bne.n	800aa18 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	689a      	ldr	r2, [r3, #8]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	689a      	ldr	r2, [r3, #8]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9d6:	691a      	ldr	r2, [r3, #16]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9e0:	69b9      	ldr	r1, [r7, #24]
 800a9e2:	0148      	lsls	r0, r1, #5
 800a9e4:	69f9      	ldr	r1, [r7, #28]
 800a9e6:	4401      	add	r1, r0
 800a9e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	0151      	lsls	r1, r2, #5
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	440a      	add	r2, r1
 800aa06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa0e:	6113      	str	r3, [r2, #16]
 800aa10:	e062      	b.n	800aad8 <USB_EPStartXfer+0x490>
 800aa12:	bf00      	nop
 800aa14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d123      	bne.n	800aa68 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa2c:	691a      	ldr	r2, [r3, #16]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa36:	69b9      	ldr	r1, [r7, #24]
 800aa38:	0148      	lsls	r0, r1, #5
 800aa3a:	69f9      	ldr	r1, [r7, #28]
 800aa3c:	4401      	add	r1, r0
 800aa3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aa42:	4313      	orrs	r3, r2
 800aa44:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	0151      	lsls	r1, r2, #5
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	440a      	add	r2, r1
 800aa5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa64:	6113      	str	r3, [r2, #16]
 800aa66:	e037      	b.n	800aad8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	691a      	ldr	r2, [r3, #16]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	4413      	add	r3, r2
 800aa72:	1e5a      	subs	r2, r3, #1
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa7c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	8afa      	ldrh	r2, [r7, #22]
 800aa84:	fb03 f202 	mul.w	r2, r3, r2
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa98:	691a      	ldr	r2, [r3, #16]
 800aa9a:	8afb      	ldrh	r3, [r7, #22]
 800aa9c:	04d9      	lsls	r1, r3, #19
 800aa9e:	4b38      	ldr	r3, [pc, #224]	@ (800ab80 <USB_EPStartXfer+0x538>)
 800aaa0:	400b      	ands	r3, r1
 800aaa2:	69b9      	ldr	r1, [r7, #24]
 800aaa4:	0148      	lsls	r0, r1, #5
 800aaa6:	69f9      	ldr	r1, [r7, #28]
 800aaa8:	4401      	add	r1, r0
 800aaaa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aaae:	4313      	orrs	r3, r2
 800aab0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	015a      	lsls	r2, r3, #5
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	4413      	add	r3, r2
 800aaba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aabe:	691a      	ldr	r2, [r3, #16]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aac8:	69b9      	ldr	r1, [r7, #24]
 800aaca:	0148      	lsls	r0, r1, #5
 800aacc:	69f9      	ldr	r1, [r7, #28]
 800aace:	4401      	add	r1, r0
 800aad0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aad4:	4313      	orrs	r3, r2
 800aad6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d10d      	bne.n	800aafa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d009      	beq.n	800aafa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	68d9      	ldr	r1, [r3, #12]
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf6:	460a      	mov	r2, r1
 800aaf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	791b      	ldrb	r3, [r3, #4]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d128      	bne.n	800ab54 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d110      	bne.n	800ab34 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	015a      	lsls	r2, r3, #5
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	4413      	add	r3, r2
 800ab1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	0151      	lsls	r1, r2, #5
 800ab24:	69fa      	ldr	r2, [r7, #28]
 800ab26:	440a      	add	r2, r1
 800ab28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	e00f      	b.n	800ab54 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	0151      	lsls	r1, r2, #5
 800ab46:	69fa      	ldr	r2, [r7, #28]
 800ab48:	440a      	add	r2, r1
 800ab4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	69ba      	ldr	r2, [r7, #24]
 800ab64:	0151      	lsls	r1, r2, #5
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	440a      	add	r2, r1
 800ab6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ab72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3720      	adds	r7, #32
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	1ff80000 	.word	0x1ff80000

0800ab84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d14a      	bne.n	800ac38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	015a      	lsls	r2, r3, #5
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	4413      	add	r3, r2
 800abac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abba:	f040 8086 	bne.w	800acca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	7812      	ldrb	r2, [r2, #0]
 800abd2:	0151      	lsls	r1, r2, #5
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	440a      	add	r2, r1
 800abd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abdc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800abe0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	7812      	ldrb	r2, [r2, #0]
 800abf6:	0151      	lsls	r1, r2, #5
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	440a      	add	r2, r1
 800abfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d902      	bls.n	800ac1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	75fb      	strb	r3, [r7, #23]
          break;
 800ac1a:	e056      	b.n	800acca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac34:	d0e7      	beq.n	800ac06 <USB_EPStopXfer+0x82>
 800ac36:	e048      	b.n	800acca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac50:	d13b      	bne.n	800acca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	7812      	ldrb	r2, [r2, #0]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ac74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	015a      	lsls	r2, r3, #5
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	7812      	ldrb	r2, [r2, #0]
 800ac8a:	0151      	lsls	r1, r2, #5
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	440a      	add	r2, r1
 800ac90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d902      	bls.n	800acb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	75fb      	strb	r3, [r7, #23]
          break;
 800acae:	e00c      	b.n	800acca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acc8:	d0e7      	beq.n	800ac9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800acd8:	b480      	push	{r7}
 800acda:	b089      	sub	sp, #36	@ 0x24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4611      	mov	r1, r2
 800ace4:	461a      	mov	r2, r3
 800ace6:	460b      	mov	r3, r1
 800ace8:	71fb      	strb	r3, [r7, #7]
 800acea:	4613      	mov	r3, r2
 800acec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800acf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d123      	bne.n	800ad46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800acfe:	88bb      	ldrh	r3, [r7, #4]
 800ad00:	3303      	adds	r3, #3
 800ad02:	089b      	lsrs	r3, r3, #2
 800ad04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ad06:	2300      	movs	r3, #0
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	e018      	b.n	800ad3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	031a      	lsls	r2, r3, #12
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad18:	461a      	mov	r2, r3
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	3301      	adds	r3, #1
 800ad24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	3301      	adds	r3, #1
 800ad36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	61bb      	str	r3, [r7, #24]
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d3e2      	bcc.n	800ad0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3724      	adds	r7, #36	@ 0x24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b08b      	sub	sp, #44	@ 0x2c
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ad6a:	88fb      	ldrh	r3, [r7, #6]
 800ad6c:	089b      	lsrs	r3, r3, #2
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ad72:	88fb      	ldrh	r3, [r7, #6]
 800ad74:	f003 0303 	and.w	r3, r3, #3
 800ad78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	623b      	str	r3, [r7, #32]
 800ad7e:	e014      	b.n	800adaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8e:	3301      	adds	r3, #1
 800ad90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad94:	3301      	adds	r3, #1
 800ad96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada0:	3301      	adds	r3, #1
 800ada2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	3301      	adds	r3, #1
 800ada8:	623b      	str	r3, [r7, #32]
 800adaa:	6a3a      	ldr	r2, [r7, #32]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d3e6      	bcc.n	800ad80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800adb2:	8bfb      	ldrh	r3, [r7, #30]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d01e      	beq.n	800adf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adc2:	461a      	mov	r2, r3
 800adc4:	f107 0310 	add.w	r3, r7, #16
 800adc8:	6812      	ldr	r2, [r2, #0]
 800adca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	fa22 f303 	lsr.w	r3, r2, r3
 800add8:	b2da      	uxtb	r2, r3
 800adda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800addc:	701a      	strb	r2, [r3, #0]
      i++;
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	3301      	adds	r3, #1
 800ade2:	623b      	str	r3, [r7, #32]
      pDest++;
 800ade4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade6:	3301      	adds	r3, #1
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800adea:	8bfb      	ldrh	r3, [r7, #30]
 800adec:	3b01      	subs	r3, #1
 800adee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800adf0:	8bfb      	ldrh	r3, [r7, #30]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1ea      	bne.n	800adcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	372c      	adds	r7, #44	@ 0x2c
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	785b      	ldrb	r3, [r3, #1]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d12c      	bne.n	800ae7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	db12      	blt.n	800ae58 <USB_EPSetStall+0x54>
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00f      	beq.n	800ae58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	015a      	lsls	r2, r3, #5
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	0151      	lsls	r1, r2, #5
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	440a      	add	r2, r1
 800ae4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ae56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	0151      	lsls	r1, r2, #5
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	440a      	add	r2, r1
 800ae6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	e02b      	b.n	800aed2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	015a      	lsls	r2, r3, #5
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	4413      	add	r3, r2
 800ae82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	db12      	blt.n	800aeb2 <USB_EPSetStall+0xae>
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00f      	beq.n	800aeb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	0151      	lsls	r1, r2, #5
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	440a      	add	r2, r1
 800aea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aeac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aeb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	015a      	lsls	r2, r3, #5
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	4413      	add	r3, r2
 800aeba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	0151      	lsls	r1, r2, #5
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	440a      	add	r2, r1
 800aec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aecc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aed0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	785b      	ldrb	r3, [r3, #1]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d128      	bne.n	800af4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	4413      	add	r3, r2
 800af04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	0151      	lsls	r1, r2, #5
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	440a      	add	r2, r1
 800af12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	791b      	ldrb	r3, [r3, #4]
 800af20:	2b03      	cmp	r3, #3
 800af22:	d003      	beq.n	800af2c <USB_EPClearStall+0x4c>
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	791b      	ldrb	r3, [r3, #4]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d138      	bne.n	800af9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	0151      	lsls	r1, r2, #5
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	440a      	add	r2, r1
 800af42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	e027      	b.n	800af9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4413      	add	r3, r2
 800af56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	0151      	lsls	r1, r2, #5
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	440a      	add	r2, r1
 800af64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	791b      	ldrb	r3, [r3, #4]
 800af72:	2b03      	cmp	r3, #3
 800af74:	d003      	beq.n	800af7e <USB_EPClearStall+0x9e>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	791b      	ldrb	r3, [r3, #4]
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d10f      	bne.n	800af9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	015a      	lsls	r2, r3, #5
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	4413      	add	r3, r2
 800af86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	0151      	lsls	r1, r2, #5
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	440a      	add	r2, r1
 800af94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800afce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	78fb      	ldrb	r3, [r7, #3]
 800afda:	011b      	lsls	r3, r3, #4
 800afdc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800afe0:	68f9      	ldr	r1, [r7, #12]
 800afe2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800afe6:	4313      	orrs	r3, r2
 800afe8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b012:	f023 0303 	bic.w	r3, r3, #3
 800b016:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b026:	f023 0302 	bic.w	r3, r3, #2
 800b02a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3714      	adds	r7, #20
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b085      	sub	sp, #20
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b054:	f023 0303 	bic.w	r3, r3, #3
 800b058:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b068:	f043 0302 	orr.w	r3, r3, #2
 800b06c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	4013      	ands	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b094:	68fb      	ldr	r3, [r7, #12]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b0a2:	b480      	push	{r7}
 800b0a4:	b085      	sub	sp, #20
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	0c1b      	lsrs	r3, r3, #16
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b085      	sub	sp, #20
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	b29b      	uxth	r3, r3
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b10a:	b480      	push	{r7}
 800b10c:	b085      	sub	sp, #20
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	460b      	mov	r3, r1
 800b114:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b11a:	78fb      	ldrb	r3, [r7, #3]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	4013      	ands	r3, r2
 800b136:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b138:	68bb      	ldr	r3, [r7, #8]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b146:	b480      	push	{r7}
 800b148:	b087      	sub	sp, #28
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	460b      	mov	r3, r1
 800b150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b168:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	f003 030f 	and.w	r3, r3, #15
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	fa22 f303 	lsr.w	r3, r2, r3
 800b176:	01db      	lsls	r3, r3, #7
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b180:	78fb      	ldrb	r3, [r7, #3]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	4413      	add	r3, r2
 800b188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	4013      	ands	r3, r2
 800b192:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b194:	68bb      	ldr	r3, [r7, #8]
}
 800b196:	4618      	mov	r0, r3
 800b198:	371c      	adds	r7, #28
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	f003 0301 	and.w	r3, r3, #1
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b085      	sub	sp, #20
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b1dc:	f023 0307 	bic.w	r3, r3, #7
 800b1e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b204:	b480      	push	{r7}
 800b206:	b087      	sub	sp, #28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	460b      	mov	r3, r1
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	333c      	adds	r3, #60	@ 0x3c
 800b21a:	3304      	adds	r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	4a26      	ldr	r2, [pc, #152]	@ (800b2bc <USB_EP0_OutStart+0xb8>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d90a      	bls.n	800b23e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b238:	d101      	bne.n	800b23e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	e037      	b.n	800b2ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b244:	461a      	mov	r2, r3
 800b246:	2300      	movs	r3, #0
 800b248:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b258:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b25c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b26c:	f043 0318 	orr.w	r3, r3, #24
 800b270:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b280:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b284:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b286:	7afb      	ldrb	r3, [r7, #11]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d10f      	bne.n	800b2ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b292:	461a      	mov	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b2aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	371c      	adds	r7, #28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	4f54300a 	.word	0x4f54300a

0800b2c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2d8:	d901      	bls.n	800b2de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e022      	b.n	800b324 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	daf2      	bge.n	800b2cc <USB_CoreReset+0xc>

  count = 10U;
 800b2e6:	230a      	movs	r3, #10
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b2ea:	e002      	b.n	800b2f2 <USB_CoreReset+0x32>
  {
    count--;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1f9      	bne.n	800b2ec <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	f043 0201 	orr.w	r2, r3, #1
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3301      	adds	r3, #1
 800b308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b310:	d901      	bls.n	800b316 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b312:	2303      	movs	r3, #3
 800b314:	e006      	b.n	800b324 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d0f0      	beq.n	800b304 <USB_CoreReset+0x44>

  return HAL_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b33c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b340:	f002 fd1e 	bl	800dd80 <USBD_static_malloc>
 800b344:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d109      	bne.n	800b360 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	32b0      	adds	r2, #176	@ 0xb0
 800b356:	2100      	movs	r1, #0
 800b358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b35c:	2302      	movs	r3, #2
 800b35e:	e0d4      	b.n	800b50a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b360:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b364:	2100      	movs	r1, #0
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f002 fd9e 	bl	800dea8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	32b0      	adds	r2, #176	@ 0xb0
 800b376:	68f9      	ldr	r1, [r7, #12]
 800b378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	32b0      	adds	r2, #176	@ 0xb0
 800b386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	7c1b      	ldrb	r3, [r3, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d138      	bne.n	800b40a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b398:	4b5e      	ldr	r3, [pc, #376]	@ (800b514 <USBD_CDC_Init+0x1e4>)
 800b39a:	7819      	ldrb	r1, [r3, #0]
 800b39c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f002 fbc9 	bl	800db3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b3a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b514 <USBD_CDC_Init+0x1e4>)
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	f003 020f 	and.w	r2, r3, #15
 800b3b0:	6879      	ldr	r1, [r7, #4]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	440b      	add	r3, r1
 800b3bc:	3323      	adds	r3, #35	@ 0x23
 800b3be:	2201      	movs	r2, #1
 800b3c0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b3c2:	4b55      	ldr	r3, [pc, #340]	@ (800b518 <USBD_CDC_Init+0x1e8>)
 800b3c4:	7819      	ldrb	r1, [r3, #0]
 800b3c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f002 fbb4 	bl	800db3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b3d2:	4b51      	ldr	r3, [pc, #324]	@ (800b518 <USBD_CDC_Init+0x1e8>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	f003 020f 	and.w	r2, r3, #15
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	440b      	add	r3, r1
 800b3e6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b3ee:	4b4b      	ldr	r3, [pc, #300]	@ (800b51c <USBD_CDC_Init+0x1ec>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	f003 020f 	and.w	r2, r3, #15
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	440b      	add	r3, r1
 800b402:	331c      	adds	r3, #28
 800b404:	2210      	movs	r2, #16
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	e035      	b.n	800b476 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b40a:	4b42      	ldr	r3, [pc, #264]	@ (800b514 <USBD_CDC_Init+0x1e4>)
 800b40c:	7819      	ldrb	r1, [r3, #0]
 800b40e:	2340      	movs	r3, #64	@ 0x40
 800b410:	2202      	movs	r2, #2
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f002 fb91 	bl	800db3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b418:	4b3e      	ldr	r3, [pc, #248]	@ (800b514 <USBD_CDC_Init+0x1e4>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	f003 020f 	and.w	r2, r3, #15
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	4613      	mov	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	440b      	add	r3, r1
 800b42c:	3323      	adds	r3, #35	@ 0x23
 800b42e:	2201      	movs	r2, #1
 800b430:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b432:	4b39      	ldr	r3, [pc, #228]	@ (800b518 <USBD_CDC_Init+0x1e8>)
 800b434:	7819      	ldrb	r1, [r3, #0]
 800b436:	2340      	movs	r3, #64	@ 0x40
 800b438:	2202      	movs	r2, #2
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f002 fb7d 	bl	800db3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b440:	4b35      	ldr	r3, [pc, #212]	@ (800b518 <USBD_CDC_Init+0x1e8>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	f003 020f 	and.w	r2, r3, #15
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	440b      	add	r3, r1
 800b454:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b458:	2201      	movs	r2, #1
 800b45a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b45c:	4b2f      	ldr	r3, [pc, #188]	@ (800b51c <USBD_CDC_Init+0x1ec>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	f003 020f 	and.w	r2, r3, #15
 800b464:	6879      	ldr	r1, [r7, #4]
 800b466:	4613      	mov	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	440b      	add	r3, r1
 800b470:	331c      	adds	r3, #28
 800b472:	2210      	movs	r2, #16
 800b474:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b476:	4b29      	ldr	r3, [pc, #164]	@ (800b51c <USBD_CDC_Init+0x1ec>)
 800b478:	7819      	ldrb	r1, [r3, #0]
 800b47a:	2308      	movs	r3, #8
 800b47c:	2203      	movs	r2, #3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f002 fb5b 	bl	800db3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b484:	4b25      	ldr	r3, [pc, #148]	@ (800b51c <USBD_CDC_Init+0x1ec>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	f003 020f 	and.w	r2, r3, #15
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	4613      	mov	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	440b      	add	r3, r1
 800b498:	3323      	adds	r3, #35	@ 0x23
 800b49a:	2201      	movs	r2, #1
 800b49c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	33b0      	adds	r3, #176	@ 0xb0
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e018      	b.n	800b50a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	7c1b      	ldrb	r3, [r3, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b518 <USBD_CDC_Init+0x1e8>)
 800b4e2:	7819      	ldrb	r1, [r3, #0]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f002 fc12 	bl	800dd18 <USBD_LL_PrepareReceive>
 800b4f4:	e008      	b.n	800b508 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4f6:	4b08      	ldr	r3, [pc, #32]	@ (800b518 <USBD_CDC_Init+0x1e8>)
 800b4f8:	7819      	ldrb	r1, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b500:	2340      	movs	r3, #64	@ 0x40
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f002 fc08 	bl	800dd18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	200000bf 	.word	0x200000bf
 800b518:	200000c0 	.word	0x200000c0
 800b51c:	200000c1 	.word	0x200000c1

0800b520 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b52c:	4b3a      	ldr	r3, [pc, #232]	@ (800b618 <USBD_CDC_DeInit+0xf8>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f002 fb27 	bl	800db86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b538:	4b37      	ldr	r3, [pc, #220]	@ (800b618 <USBD_CDC_DeInit+0xf8>)
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	f003 020f 	and.w	r2, r3, #15
 800b540:	6879      	ldr	r1, [r7, #4]
 800b542:	4613      	mov	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4413      	add	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	440b      	add	r3, r1
 800b54c:	3323      	adds	r3, #35	@ 0x23
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b552:	4b32      	ldr	r3, [pc, #200]	@ (800b61c <USBD_CDC_DeInit+0xfc>)
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f002 fb14 	bl	800db86 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b55e:	4b2f      	ldr	r3, [pc, #188]	@ (800b61c <USBD_CDC_DeInit+0xfc>)
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	f003 020f 	and.w	r2, r3, #15
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	440b      	add	r3, r1
 800b572:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b57a:	4b29      	ldr	r3, [pc, #164]	@ (800b620 <USBD_CDC_DeInit+0x100>)
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f002 fb00 	bl	800db86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b586:	4b26      	ldr	r3, [pc, #152]	@ (800b620 <USBD_CDC_DeInit+0x100>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	f003 020f 	and.w	r2, r3, #15
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	440b      	add	r3, r1
 800b59a:	3323      	adds	r3, #35	@ 0x23
 800b59c:	2200      	movs	r2, #0
 800b59e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b5a0:	4b1f      	ldr	r3, [pc, #124]	@ (800b620 <USBD_CDC_DeInit+0x100>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	f003 020f 	and.w	r2, r3, #15
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	331c      	adds	r3, #28
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	32b0      	adds	r2, #176	@ 0xb0
 800b5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d01f      	beq.n	800b60c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	33b0      	adds	r3, #176	@ 0xb0
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	32b0      	adds	r2, #176	@ 0xb0
 800b5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f002 fbd4 	bl	800dd9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	32b0      	adds	r2, #176	@ 0xb0
 800b5fe:	2100      	movs	r1, #0
 800b600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	200000bf 	.word	0x200000bf
 800b61c:	200000c0 	.word	0x200000c0
 800b620:	200000c1 	.word	0x200000c1

0800b624 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	32b0      	adds	r2, #176	@ 0xb0
 800b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b650:	2303      	movs	r3, #3
 800b652:	e0bf      	b.n	800b7d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d050      	beq.n	800b702 <USBD_CDC_Setup+0xde>
 800b660:	2b20      	cmp	r3, #32
 800b662:	f040 80af 	bne.w	800b7c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	88db      	ldrh	r3, [r3, #6]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d03a      	beq.n	800b6e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b25b      	sxtb	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	da1b      	bge.n	800b6b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	33b0      	adds	r3, #176	@ 0xb0
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b68e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	88d2      	ldrh	r2, [r2, #6]
 800b694:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	88db      	ldrh	r3, [r3, #6]
 800b69a:	2b07      	cmp	r3, #7
 800b69c:	bf28      	it	cs
 800b69e:	2307      	movcs	r3, #7
 800b6a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	89fa      	ldrh	r2, [r7, #14]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 fda9 	bl	800d200 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b6ae:	e090      	b.n	800b7d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	785a      	ldrb	r2, [r3, #1]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	88db      	ldrh	r3, [r3, #6]
 800b6be:	2b3f      	cmp	r3, #63	@ 0x3f
 800b6c0:	d803      	bhi.n	800b6ca <USBD_CDC_Setup+0xa6>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	88db      	ldrh	r3, [r3, #6]
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	e000      	b.n	800b6cc <USBD_CDC_Setup+0xa8>
 800b6ca:	2240      	movs	r2, #64	@ 0x40
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b6d2:	6939      	ldr	r1, [r7, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b6da:	461a      	mov	r2, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f001 fdbe 	bl	800d25e <USBD_CtlPrepareRx>
      break;
 800b6e2:	e076      	b.n	800b7d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	33b0      	adds	r3, #176	@ 0xb0
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	7850      	ldrb	r0, [r2, #1]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	4798      	blx	r3
      break;
 800b700:	e067      	b.n	800b7d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	2b0b      	cmp	r3, #11
 800b708:	d851      	bhi.n	800b7ae <USBD_CDC_Setup+0x18a>
 800b70a:	a201      	add	r2, pc, #4	@ (adr r2, 800b710 <USBD_CDC_Setup+0xec>)
 800b70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b710:	0800b741 	.word	0x0800b741
 800b714:	0800b7bd 	.word	0x0800b7bd
 800b718:	0800b7af 	.word	0x0800b7af
 800b71c:	0800b7af 	.word	0x0800b7af
 800b720:	0800b7af 	.word	0x0800b7af
 800b724:	0800b7af 	.word	0x0800b7af
 800b728:	0800b7af 	.word	0x0800b7af
 800b72c:	0800b7af 	.word	0x0800b7af
 800b730:	0800b7af 	.word	0x0800b7af
 800b734:	0800b7af 	.word	0x0800b7af
 800b738:	0800b76b 	.word	0x0800b76b
 800b73c:	0800b795 	.word	0x0800b795
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d107      	bne.n	800b75c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b74c:	f107 030a 	add.w	r3, r7, #10
 800b750:	2202      	movs	r2, #2
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f001 fd53 	bl	800d200 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b75a:	e032      	b.n	800b7c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f001 fcd1 	bl	800d106 <USBD_CtlError>
            ret = USBD_FAIL;
 800b764:	2303      	movs	r3, #3
 800b766:	75fb      	strb	r3, [r7, #23]
          break;
 800b768:	e02b      	b.n	800b7c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b770:	b2db      	uxtb	r3, r3
 800b772:	2b03      	cmp	r3, #3
 800b774:	d107      	bne.n	800b786 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b776:	f107 030d 	add.w	r3, r7, #13
 800b77a:	2201      	movs	r2, #1
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f001 fd3e 	bl	800d200 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b784:	e01d      	b.n	800b7c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b786:	6839      	ldr	r1, [r7, #0]
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 fcbc 	bl	800d106 <USBD_CtlError>
            ret = USBD_FAIL;
 800b78e:	2303      	movs	r3, #3
 800b790:	75fb      	strb	r3, [r7, #23]
          break;
 800b792:	e016      	b.n	800b7c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b03      	cmp	r3, #3
 800b79e:	d00f      	beq.n	800b7c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f001 fcaf 	bl	800d106 <USBD_CtlError>
            ret = USBD_FAIL;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b7ac:	e008      	b.n	800b7c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f001 fca8 	bl	800d106 <USBD_CtlError>
          ret = USBD_FAIL;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b7ba:	e002      	b.n	800b7c2 <USBD_CDC_Setup+0x19e>
          break;
 800b7bc:	bf00      	nop
 800b7be:	e008      	b.n	800b7d2 <USBD_CDC_Setup+0x1ae>
          break;
 800b7c0:	bf00      	nop
      }
      break;
 800b7c2:	e006      	b.n	800b7d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f001 fc9d 	bl	800d106 <USBD_CtlError>
      ret = USBD_FAIL;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b7d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	32b0      	adds	r2, #176	@ 0xb0
 800b7fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b802:	2303      	movs	r3, #3
 800b804:	e065      	b.n	800b8d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	32b0      	adds	r2, #176	@ 0xb0
 800b810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b814:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b816:	78fb      	ldrb	r3, [r7, #3]
 800b818:	f003 020f 	and.w	r2, r3, #15
 800b81c:	6879      	ldr	r1, [r7, #4]
 800b81e:	4613      	mov	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	440b      	add	r3, r1
 800b828:	3314      	adds	r3, #20
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d02f      	beq.n	800b890 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	f003 020f 	and.w	r2, r3, #15
 800b836:	6879      	ldr	r1, [r7, #4]
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	440b      	add	r3, r1
 800b842:	3314      	adds	r3, #20
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	78fb      	ldrb	r3, [r7, #3]
 800b848:	f003 010f 	and.w	r1, r3, #15
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	460b      	mov	r3, r1
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	440b      	add	r3, r1
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4403      	add	r3, r0
 800b858:	331c      	adds	r3, #28
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b860:	fb01 f303 	mul.w	r3, r1, r3
 800b864:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b866:	2b00      	cmp	r3, #0
 800b868:	d112      	bne.n	800b890 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b86a:	78fb      	ldrb	r3, [r7, #3]
 800b86c:	f003 020f 	and.w	r2, r3, #15
 800b870:	6879      	ldr	r1, [r7, #4]
 800b872:	4613      	mov	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4413      	add	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	440b      	add	r3, r1
 800b87c:	3314      	adds	r3, #20
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b882:	78f9      	ldrb	r1, [r7, #3]
 800b884:	2300      	movs	r3, #0
 800b886:	2200      	movs	r2, #0
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f002 fa24 	bl	800dcd6 <USBD_LL_Transmit>
 800b88e:	e01f      	b.n	800b8d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2200      	movs	r2, #0
 800b894:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	33b0      	adds	r3, #176	@ 0xb0
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d010      	beq.n	800b8d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	33b0      	adds	r3, #176	@ 0xb0
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b8cc:	78fa      	ldrb	r2, [r7, #3]
 800b8ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	32b0      	adds	r2, #176	@ 0xb0
 800b8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	32b0      	adds	r2, #176	@ 0xb0
 800b900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b908:	2303      	movs	r3, #3
 800b90a:	e01a      	b.n	800b942 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b90c:	78fb      	ldrb	r3, [r7, #3]
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f002 fa22 	bl	800dd5a <USBD_LL_GetRxDataSize>
 800b916:	4602      	mov	r2, r0
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	33b0      	adds	r3, #176	@ 0xb0
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b93c:	4611      	mov	r1, r2
 800b93e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	32b0      	adds	r2, #176	@ 0xb0
 800b95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b960:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b968:	2303      	movs	r3, #3
 800b96a:	e024      	b.n	800b9b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	33b0      	adds	r3, #176	@ 0xb0
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d019      	beq.n	800b9b4 <USBD_CDC_EP0_RxReady+0x6a>
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b986:	2bff      	cmp	r3, #255	@ 0xff
 800b988:	d014      	beq.n	800b9b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	33b0      	adds	r3, #176	@ 0xb0
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b9a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b9aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	22ff      	movs	r2, #255	@ 0xff
 800b9b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
	...

0800b9c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9c8:	2182      	movs	r1, #130	@ 0x82
 800b9ca:	4818      	ldr	r0, [pc, #96]	@ (800ba2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b9cc:	f000 fd62 	bl	800c494 <USBD_GetEpDesc>
 800b9d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	4815      	ldr	r0, [pc, #84]	@ (800ba2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b9d6:	f000 fd5d 	bl	800c494 <USBD_GetEpDesc>
 800b9da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b9dc:	2181      	movs	r1, #129	@ 0x81
 800b9de:	4813      	ldr	r0, [pc, #76]	@ (800ba2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b9e0:	f000 fd58 	bl	800c494 <USBD_GetEpDesc>
 800b9e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2210      	movs	r2, #16
 800b9f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d006      	beq.n	800ba06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba00:	711a      	strb	r2, [r3, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d006      	beq.n	800ba1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba14:	711a      	strb	r2, [r3, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2243      	movs	r2, #67	@ 0x43
 800ba1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba20:	4b02      	ldr	r3, [pc, #8]	@ (800ba2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	2000007c 	.word	0x2000007c

0800ba30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ba38:	2182      	movs	r1, #130	@ 0x82
 800ba3a:	4818      	ldr	r0, [pc, #96]	@ (800ba9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ba3c:	f000 fd2a 	bl	800c494 <USBD_GetEpDesc>
 800ba40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ba42:	2101      	movs	r1, #1
 800ba44:	4815      	ldr	r0, [pc, #84]	@ (800ba9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ba46:	f000 fd25 	bl	800c494 <USBD_GetEpDesc>
 800ba4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ba4c:	2181      	movs	r1, #129	@ 0x81
 800ba4e:	4813      	ldr	r0, [pc, #76]	@ (800ba9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ba50:	f000 fd20 	bl	800c494 <USBD_GetEpDesc>
 800ba54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2210      	movs	r2, #16
 800ba60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d006      	beq.n	800ba76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	711a      	strb	r2, [r3, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f042 0202 	orr.w	r2, r2, #2
 800ba74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d006      	beq.n	800ba8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	711a      	strb	r2, [r3, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f042 0202 	orr.w	r2, r2, #2
 800ba88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2243      	movs	r2, #67	@ 0x43
 800ba8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba90:	4b02      	ldr	r3, [pc, #8]	@ (800ba9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3718      	adds	r7, #24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	2000007c 	.word	0x2000007c

0800baa0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800baa8:	2182      	movs	r1, #130	@ 0x82
 800baaa:	4818      	ldr	r0, [pc, #96]	@ (800bb0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800baac:	f000 fcf2 	bl	800c494 <USBD_GetEpDesc>
 800bab0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bab2:	2101      	movs	r1, #1
 800bab4:	4815      	ldr	r0, [pc, #84]	@ (800bb0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bab6:	f000 fced 	bl	800c494 <USBD_GetEpDesc>
 800baba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800babc:	2181      	movs	r1, #129	@ 0x81
 800babe:	4813      	ldr	r0, [pc, #76]	@ (800bb0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bac0:	f000 fce8 	bl	800c494 <USBD_GetEpDesc>
 800bac4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2210      	movs	r2, #16
 800bad0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d006      	beq.n	800bae6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	2200      	movs	r2, #0
 800badc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bae0:	711a      	strb	r2, [r3, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d006      	beq.n	800bafa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800baf4:	711a      	strb	r2, [r3, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2243      	movs	r2, #67	@ 0x43
 800bafe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bb00:	4b02      	ldr	r3, [pc, #8]	@ (800bb0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	2000007c 	.word	0x2000007c

0800bb10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	220a      	movs	r2, #10
 800bb1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bb1e:	4b03      	ldr	r3, [pc, #12]	@ (800bb2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20000038 	.word	0x20000038

0800bb30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d101      	bne.n	800bb44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bb40:	2303      	movs	r3, #3
 800bb42:	e009      	b.n	800bb58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	33b0      	adds	r3, #176	@ 0xb0
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	32b0      	adds	r2, #176	@ 0xb0
 800bb7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e008      	b.n	800bb9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	371c      	adds	r7, #28
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	32b0      	adds	r2, #176	@ 0xb0
 800bbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e004      	b.n	800bbd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
	...

0800bbe4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	32b0      	adds	r2, #176	@ 0xb0
 800bbf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bc06:	2303      	movs	r3, #3
 800bc08:	e025      	b.n	800bc56 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d11f      	bne.n	800bc54 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bc1c:	4b10      	ldr	r3, [pc, #64]	@ (800bc60 <USBD_CDC_TransmitPacket+0x7c>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	f003 020f 	and.w	r2, r3, #15
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4403      	add	r3, r0
 800bc36:	3314      	adds	r3, #20
 800bc38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bc3a:	4b09      	ldr	r3, [pc, #36]	@ (800bc60 <USBD_CDC_TransmitPacket+0x7c>)
 800bc3c:	7819      	ldrb	r1, [r3, #0]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f002 f843 	bl	800dcd6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200000bf 	.word	0x200000bf

0800bc64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	32b0      	adds	r2, #176	@ 0xb0
 800bc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	32b0      	adds	r2, #176	@ 0xb0
 800bc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e018      	b.n	800bcc4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7c1b      	ldrb	r3, [r3, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10a      	bne.n	800bcb0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bccc <USBD_CDC_ReceivePacket+0x68>)
 800bc9c:	7819      	ldrb	r1, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f002 f835 	bl	800dd18 <USBD_LL_PrepareReceive>
 800bcae:	e008      	b.n	800bcc2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcb0:	4b06      	ldr	r3, [pc, #24]	@ (800bccc <USBD_CDC_ReceivePacket+0x68>)
 800bcb2:	7819      	ldrb	r1, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bcba:	2340      	movs	r3, #64	@ 0x40
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f002 f82b 	bl	800dd18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	200000c0 	.word	0x200000c0

0800bcd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e01f      	b.n	800bd28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	79fa      	ldrb	r2, [r7, #7]
 800bd1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f001 fea5 	bl	800da6c <USBD_LL_Init>
 800bd22:	4603      	mov	r3, r0
 800bd24:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e025      	b.n	800bd94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	32ae      	adds	r2, #174	@ 0xae
 800bd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00f      	beq.n	800bd84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	32ae      	adds	r2, #174	@ 0xae
 800bd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd74:	f107 020e 	add.w	r2, r7, #14
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f001 fead 	bl	800db04 <USBD_LL_Start>
 800bdaa:	4603      	mov	r3, r0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdbc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d009      	beq.n	800bdf8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	78fa      	ldrb	r2, [r7, #3]
 800bdee:	4611      	mov	r1, r2
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	4798      	blx	r3
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	460b      	mov	r3, r1
 800be0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	78fa      	ldrb	r2, [r7, #3]
 800be1c:	4611      	mov	r1, r2
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	4798      	blx	r3
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800be28:	2303      	movs	r3, #3
 800be2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	4618      	mov	r0, r3
 800be4a:	f001 f922 	bl	800d092 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800be5c:	461a      	mov	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be6a:	f003 031f 	and.w	r3, r3, #31
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d01a      	beq.n	800bea8 <USBD_LL_SetupStage+0x72>
 800be72:	2b02      	cmp	r3, #2
 800be74:	d822      	bhi.n	800bebc <USBD_LL_SetupStage+0x86>
 800be76:	2b00      	cmp	r3, #0
 800be78:	d002      	beq.n	800be80 <USBD_LL_SetupStage+0x4a>
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d00a      	beq.n	800be94 <USBD_LL_SetupStage+0x5e>
 800be7e:	e01d      	b.n	800bebc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be86:	4619      	mov	r1, r3
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fb77 	bl	800c57c <USBD_StdDevReq>
 800be8e:	4603      	mov	r3, r0
 800be90:	73fb      	strb	r3, [r7, #15]
      break;
 800be92:	e020      	b.n	800bed6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fbdf 	bl	800c660 <USBD_StdItfReq>
 800bea2:	4603      	mov	r3, r0
 800bea4:	73fb      	strb	r3, [r7, #15]
      break;
 800bea6:	e016      	b.n	800bed6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fc41 	bl	800c738 <USBD_StdEPReq>
 800beb6:	4603      	mov	r3, r0
 800beb8:	73fb      	strb	r3, [r7, #15]
      break;
 800beba:	e00c      	b.n	800bed6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bec2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f001 fe7a 	bl	800dbc4 <USBD_LL_StallEP>
 800bed0:	4603      	mov	r3, r0
 800bed2:	73fb      	strb	r3, [r7, #15]
      break;
 800bed4:	bf00      	nop
  }

  return ret;
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	460b      	mov	r3, r1
 800beea:	607a      	str	r2, [r7, #4]
 800beec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bef2:	7afb      	ldrb	r3, [r7, #11]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d177      	bne.n	800bfe8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800befe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	f040 80a1 	bne.w	800c04e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	8992      	ldrh	r2, [r2, #12]
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d91c      	bls.n	800bf52 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	8992      	ldrh	r2, [r2, #12]
 800bf20:	1a9a      	subs	r2, r3, r2
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	8992      	ldrh	r2, [r2, #12]
 800bf2e:	441a      	add	r2, r3
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	6919      	ldr	r1, [r3, #16]
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	899b      	ldrh	r3, [r3, #12]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	4293      	cmp	r3, r2
 800bf44:	bf38      	it	cc
 800bf46:	4613      	movcc	r3, r2
 800bf48:	461a      	mov	r2, r3
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f001 f9a8 	bl	800d2a0 <USBD_CtlContinueRx>
 800bf50:	e07d      	b.n	800c04e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf58:	f003 031f 	and.w	r3, r3, #31
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d014      	beq.n	800bf8a <USBD_LL_DataOutStage+0xaa>
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d81d      	bhi.n	800bfa0 <USBD_LL_DataOutStage+0xc0>
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <USBD_LL_DataOutStage+0x8e>
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d003      	beq.n	800bf74 <USBD_LL_DataOutStage+0x94>
 800bf6c:	e018      	b.n	800bfa0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	75bb      	strb	r3, [r7, #22]
            break;
 800bf72:	e018      	b.n	800bfa6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f000 fa6e 	bl	800c460 <USBD_CoreFindIF>
 800bf84:	4603      	mov	r3, r0
 800bf86:	75bb      	strb	r3, [r7, #22]
            break;
 800bf88:	e00d      	b.n	800bfa6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	4619      	mov	r1, r3
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 fa70 	bl	800c47a <USBD_CoreFindEP>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	75bb      	strb	r3, [r7, #22]
            break;
 800bf9e:	e002      	b.n	800bfa6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	75bb      	strb	r3, [r7, #22]
            break;
 800bfa4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bfa6:	7dbb      	ldrb	r3, [r7, #22]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d119      	bne.n	800bfe0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d113      	bne.n	800bfe0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bfb8:	7dba      	ldrb	r2, [r7, #22]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	32ae      	adds	r2, #174	@ 0xae
 800bfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00b      	beq.n	800bfe0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bfc8:	7dba      	ldrb	r2, [r7, #22]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bfd0:	7dba      	ldrb	r2, [r7, #22]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	32ae      	adds	r2, #174	@ 0xae
 800bfd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f001 f96e 	bl	800d2c2 <USBD_CtlSendStatus>
 800bfe6:	e032      	b.n	800c04e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bfe8:	7afb      	ldrb	r3, [r7, #11]
 800bfea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	4619      	mov	r1, r3
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f000 fa41 	bl	800c47a <USBD_CoreFindEP>
 800bff8:	4603      	mov	r3, r0
 800bffa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bffc:	7dbb      	ldrb	r3, [r7, #22]
 800bffe:	2bff      	cmp	r3, #255	@ 0xff
 800c000:	d025      	beq.n	800c04e <USBD_LL_DataOutStage+0x16e>
 800c002:	7dbb      	ldrb	r3, [r7, #22]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d122      	bne.n	800c04e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b03      	cmp	r3, #3
 800c012:	d117      	bne.n	800c044 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c014:	7dba      	ldrb	r2, [r7, #22]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	32ae      	adds	r2, #174	@ 0xae
 800c01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00f      	beq.n	800c044 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c024:	7dba      	ldrb	r2, [r7, #22]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c02c:	7dba      	ldrb	r2, [r7, #22]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	32ae      	adds	r2, #174	@ 0xae
 800c032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c036:	699b      	ldr	r3, [r3, #24]
 800c038:	7afa      	ldrb	r2, [r7, #11]
 800c03a:	4611      	mov	r1, r2
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	4798      	blx	r3
 800c040:	4603      	mov	r3, r0
 800c042:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c044:	7dfb      	ldrb	r3, [r7, #23]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	e000      	b.n	800c050 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3718      	adds	r7, #24
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	460b      	mov	r3, r1
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c066:	7afb      	ldrb	r3, [r7, #11]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d178      	bne.n	800c15e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3314      	adds	r3, #20
 800c070:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d163      	bne.n	800c144 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	8992      	ldrh	r2, [r2, #12]
 800c084:	4293      	cmp	r3, r2
 800c086:	d91c      	bls.n	800c0c2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	8992      	ldrh	r2, [r2, #12]
 800c090:	1a9a      	subs	r2, r3, r2
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	8992      	ldrh	r2, [r2, #12]
 800c09e:	441a      	add	r2, r3
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	6919      	ldr	r1, [r3, #16]
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f001 f8c4 	bl	800d23c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f001 fe2c 	bl	800dd18 <USBD_LL_PrepareReceive>
 800c0c0:	e040      	b.n	800c144 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	899b      	ldrh	r3, [r3, #12]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d11c      	bne.n	800c10a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d316      	bcc.n	800c10a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d20f      	bcs.n	800c10a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f001 f8a4 	bl	800d23c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	2200      	movs	r2, #0
 800c100:	2100      	movs	r1, #0
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f001 fe08 	bl	800dd18 <USBD_LL_PrepareReceive>
 800c108:	e01c      	b.n	800c144 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b03      	cmp	r3, #3
 800c114:	d10f      	bne.n	800c136 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d009      	beq.n	800c136 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c136:	2180      	movs	r1, #128	@ 0x80
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f001 fd43 	bl	800dbc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f001 f8d2 	bl	800d2e8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d03a      	beq.n	800c1c4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff fe30 	bl	800bdb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c15c:	e032      	b.n	800c1c4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c15e:	7afb      	ldrb	r3, [r7, #11]
 800c160:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c164:	b2db      	uxtb	r3, r3
 800c166:	4619      	mov	r1, r3
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f000 f986 	bl	800c47a <USBD_CoreFindEP>
 800c16e:	4603      	mov	r3, r0
 800c170:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	2bff      	cmp	r3, #255	@ 0xff
 800c176:	d025      	beq.n	800c1c4 <USBD_LL_DataInStage+0x16c>
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d122      	bne.n	800c1c4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b03      	cmp	r3, #3
 800c188:	d11c      	bne.n	800c1c4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c18a:	7dfa      	ldrb	r2, [r7, #23]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	32ae      	adds	r2, #174	@ 0xae
 800c190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c194:	695b      	ldr	r3, [r3, #20]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d014      	beq.n	800c1c4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c19a:	7dfa      	ldrb	r2, [r7, #23]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c1a2:	7dfa      	ldrb	r2, [r7, #23]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	32ae      	adds	r2, #174	@ 0xae
 800c1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	7afa      	ldrb	r2, [r7, #11]
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	4798      	blx	r3
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c1ba:	7dbb      	ldrb	r3, [r7, #22]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c1c0:	7dbb      	ldrb	r3, [r7, #22]
 800c1c2:	e000      	b.n	800c1c6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b084      	sub	sp, #16
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c206:	2b00      	cmp	r3, #0
 800c208:	d014      	beq.n	800c234 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00e      	beq.n	800c234 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	6852      	ldr	r2, [r2, #4]
 800c222:	b2d2      	uxtb	r2, r2
 800c224:	4611      	mov	r1, r2
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	4798      	blx	r3
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c230:	2303      	movs	r3, #3
 800c232:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c234:	2340      	movs	r3, #64	@ 0x40
 800c236:	2200      	movs	r2, #0
 800c238:	2100      	movs	r1, #0
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 fc7d 	bl	800db3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2240      	movs	r2, #64	@ 0x40
 800c24c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c250:	2340      	movs	r3, #64	@ 0x40
 800c252:	2200      	movs	r2, #0
 800c254:	2180      	movs	r1, #128	@ 0x80
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f001 fc6f 	bl	800db3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2240      	movs	r2, #64	@ 0x40
 800c268:	841a      	strh	r2, [r3, #32]

  return ret;
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	460b      	mov	r3, r1
 800c27e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	78fa      	ldrb	r2, [r7, #3]
 800c284:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	d006      	beq.n	800c2b6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2204      	movs	r2, #4
 800c2ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b04      	cmp	r3, #4
 800c2de:	d106      	bne.n	800c2ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	2b03      	cmp	r3, #3
 800c30e:	d110      	bne.n	800c332 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00b      	beq.n	800c332 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c320:	69db      	ldr	r3, [r3, #28]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d005      	beq.n	800c332 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	32ae      	adds	r2, #174	@ 0xae
 800c352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d101      	bne.n	800c35e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c35a:	2303      	movs	r3, #3
 800c35c:	e01c      	b.n	800c398 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c364:	b2db      	uxtb	r3, r3
 800c366:	2b03      	cmp	r3, #3
 800c368:	d115      	bne.n	800c396 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	32ae      	adds	r2, #174	@ 0xae
 800c374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	32ae      	adds	r2, #174	@ 0xae
 800c388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38c:	6a1b      	ldr	r3, [r3, #32]
 800c38e:	78fa      	ldrb	r2, [r7, #3]
 800c390:	4611      	mov	r1, r2
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3708      	adds	r7, #8
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	32ae      	adds	r2, #174	@ 0xae
 800c3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e01c      	b.n	800c3fc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d115      	bne.n	800c3fa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	32ae      	adds	r2, #174	@ 0xae
 800c3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00b      	beq.n	800c3fa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	32ae      	adds	r2, #174	@ 0xae
 800c3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f2:	78fa      	ldrb	r2, [r7, #3]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	370c      	adds	r7, #12
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr

0800c41a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00e      	beq.n	800c456 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	6852      	ldr	r2, [r2, #4]
 800c444:	b2d2      	uxtb	r2, r2
 800c446:	4611      	mov	r1, r2
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	4798      	blx	r3
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c452:	2303      	movs	r3, #3
 800c454:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c456:	7bfb      	ldrb	r3, [r7, #15]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	460b      	mov	r3, r1
 800c46a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c46c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c46e:	4618      	mov	r0, r3
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	460b      	mov	r3, r1
 800c484:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c486:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	885b      	ldrh	r3, [r3, #2]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	7812      	ldrb	r2, [r2, #0]
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d91f      	bls.n	800c4fa <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c4c0:	e013      	b.n	800c4ea <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c4c2:	f107 030a 	add.w	r3, r7, #10
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	6978      	ldr	r0, [r7, #20]
 800c4ca:	f000 f81b 	bl	800c504 <USBD_GetNextDesc>
 800c4ce:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	785b      	ldrb	r3, [r3, #1]
 800c4d4:	2b05      	cmp	r3, #5
 800c4d6:	d108      	bne.n	800c4ea <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	789b      	ldrb	r3, [r3, #2]
 800c4e0:	78fa      	ldrb	r2, [r7, #3]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d008      	beq.n	800c4f8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	885b      	ldrh	r3, [r3, #2]
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	897b      	ldrh	r3, [r7, #10]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d8e5      	bhi.n	800c4c2 <USBD_GetEpDesc+0x2e>
 800c4f6:	e000      	b.n	800c4fa <USBD_GetEpDesc+0x66>
          break;
 800c4f8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c4fa:	693b      	ldr	r3, [r7, #16]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	7812      	ldrb	r2, [r2, #0]
 800c51a:	4413      	add	r3, r2
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4413      	add	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c52e:	68fb      	ldr	r3, [r7, #12]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b087      	sub	sp, #28
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	3301      	adds	r3, #1
 800c552:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c55a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	b21a      	sxth	r2, r3
 800c562:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c566:	4313      	orrs	r3, r2
 800c568:	b21b      	sxth	r3, r3
 800c56a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c56c:	89fb      	ldrh	r3, [r7, #14]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	371c      	adds	r7, #28
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
	...

0800c57c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c592:	2b40      	cmp	r3, #64	@ 0x40
 800c594:	d005      	beq.n	800c5a2 <USBD_StdDevReq+0x26>
 800c596:	2b40      	cmp	r3, #64	@ 0x40
 800c598:	d857      	bhi.n	800c64a <USBD_StdDevReq+0xce>
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00f      	beq.n	800c5be <USBD_StdDevReq+0x42>
 800c59e:	2b20      	cmp	r3, #32
 800c5a0:	d153      	bne.n	800c64a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	32ae      	adds	r2, #174	@ 0xae
 800c5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	4798      	blx	r3
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c5bc:	e04a      	b.n	800c654 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	785b      	ldrb	r3, [r3, #1]
 800c5c2:	2b09      	cmp	r3, #9
 800c5c4:	d83b      	bhi.n	800c63e <USBD_StdDevReq+0xc2>
 800c5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5cc <USBD_StdDevReq+0x50>)
 800c5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5cc:	0800c621 	.word	0x0800c621
 800c5d0:	0800c635 	.word	0x0800c635
 800c5d4:	0800c63f 	.word	0x0800c63f
 800c5d8:	0800c62b 	.word	0x0800c62b
 800c5dc:	0800c63f 	.word	0x0800c63f
 800c5e0:	0800c5ff 	.word	0x0800c5ff
 800c5e4:	0800c5f5 	.word	0x0800c5f5
 800c5e8:	0800c63f 	.word	0x0800c63f
 800c5ec:	0800c617 	.word	0x0800c617
 800c5f0:	0800c609 	.word	0x0800c609
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fa3e 	bl	800ca78 <USBD_GetDescriptor>
          break;
 800c5fc:	e024      	b.n	800c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c5fe:	6839      	ldr	r1, [r7, #0]
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fba3 	bl	800cd4c <USBD_SetAddress>
          break;
 800c606:	e01f      	b.n	800c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c608:	6839      	ldr	r1, [r7, #0]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fbe2 	bl	800cdd4 <USBD_SetConfig>
 800c610:	4603      	mov	r3, r0
 800c612:	73fb      	strb	r3, [r7, #15]
          break;
 800c614:	e018      	b.n	800c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fc85 	bl	800cf28 <USBD_GetConfig>
          break;
 800c61e:	e013      	b.n	800c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fcb6 	bl	800cf94 <USBD_GetStatus>
          break;
 800c628:	e00e      	b.n	800c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fce5 	bl	800cffc <USBD_SetFeature>
          break;
 800c632:	e009      	b.n	800c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fd09 	bl	800d04e <USBD_ClrFeature>
          break;
 800c63c:	e004      	b.n	800c648 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fd60 	bl	800d106 <USBD_CtlError>
          break;
 800c646:	bf00      	nop
      }
      break;
 800c648:	e004      	b.n	800c654 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fd5a 	bl	800d106 <USBD_CtlError>
      break;
 800c652:	bf00      	nop
  }

  return ret;
 800c654:	7bfb      	ldrb	r3, [r7, #15]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop

0800c660 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c676:	2b40      	cmp	r3, #64	@ 0x40
 800c678:	d005      	beq.n	800c686 <USBD_StdItfReq+0x26>
 800c67a:	2b40      	cmp	r3, #64	@ 0x40
 800c67c:	d852      	bhi.n	800c724 <USBD_StdItfReq+0xc4>
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <USBD_StdItfReq+0x26>
 800c682:	2b20      	cmp	r3, #32
 800c684:	d14e      	bne.n	800c724 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	3b01      	subs	r3, #1
 800c690:	2b02      	cmp	r3, #2
 800c692:	d840      	bhi.n	800c716 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	889b      	ldrh	r3, [r3, #4]
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d836      	bhi.n	800c70c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	889b      	ldrh	r3, [r3, #4]
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff feda 	bl	800c460 <USBD_CoreFindIF>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6b0:	7bbb      	ldrb	r3, [r7, #14]
 800c6b2:	2bff      	cmp	r3, #255	@ 0xff
 800c6b4:	d01d      	beq.n	800c6f2 <USBD_StdItfReq+0x92>
 800c6b6:	7bbb      	ldrb	r3, [r7, #14]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d11a      	bne.n	800c6f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c6bc:	7bba      	ldrb	r2, [r7, #14]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	32ae      	adds	r2, #174	@ 0xae
 800c6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00f      	beq.n	800c6ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c6cc:	7bba      	ldrb	r2, [r7, #14]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c6d4:	7bba      	ldrb	r2, [r7, #14]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	32ae      	adds	r2, #174	@ 0xae
 800c6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	4798      	blx	r3
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c6ea:	e004      	b.n	800c6f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c6f0:	e001      	b.n	800c6f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	88db      	ldrh	r3, [r3, #6]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d110      	bne.n	800c720 <USBD_StdItfReq+0xc0>
 800c6fe:	7bfb      	ldrb	r3, [r7, #15]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10d      	bne.n	800c720 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fddc 	bl	800d2c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c70a:	e009      	b.n	800c720 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fcf9 	bl	800d106 <USBD_CtlError>
          break;
 800c714:	e004      	b.n	800c720 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c716:	6839      	ldr	r1, [r7, #0]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fcf4 	bl	800d106 <USBD_CtlError>
          break;
 800c71e:	e000      	b.n	800c722 <USBD_StdItfReq+0xc2>
          break;
 800c720:	bf00      	nop
      }
      break;
 800c722:	e004      	b.n	800c72e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fced 	bl	800d106 <USBD_CtlError>
      break;
 800c72c:	bf00      	nop
  }

  return ret;
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	889b      	ldrh	r3, [r3, #4]
 800c74a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c754:	2b40      	cmp	r3, #64	@ 0x40
 800c756:	d007      	beq.n	800c768 <USBD_StdEPReq+0x30>
 800c758:	2b40      	cmp	r3, #64	@ 0x40
 800c75a:	f200 8181 	bhi.w	800ca60 <USBD_StdEPReq+0x328>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d02a      	beq.n	800c7b8 <USBD_StdEPReq+0x80>
 800c762:	2b20      	cmp	r3, #32
 800c764:	f040 817c 	bne.w	800ca60 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c768:	7bbb      	ldrb	r3, [r7, #14]
 800c76a:	4619      	mov	r1, r3
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff fe84 	bl	800c47a <USBD_CoreFindEP>
 800c772:	4603      	mov	r3, r0
 800c774:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c776:	7b7b      	ldrb	r3, [r7, #13]
 800c778:	2bff      	cmp	r3, #255	@ 0xff
 800c77a:	f000 8176 	beq.w	800ca6a <USBD_StdEPReq+0x332>
 800c77e:	7b7b      	ldrb	r3, [r7, #13]
 800c780:	2b00      	cmp	r3, #0
 800c782:	f040 8172 	bne.w	800ca6a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c786:	7b7a      	ldrb	r2, [r7, #13]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c78e:	7b7a      	ldrb	r2, [r7, #13]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	32ae      	adds	r2, #174	@ 0xae
 800c794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f000 8165 	beq.w	800ca6a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c7a0:	7b7a      	ldrb	r2, [r7, #13]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	32ae      	adds	r2, #174	@ 0xae
 800c7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	6839      	ldr	r1, [r7, #0]
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	4798      	blx	r3
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c7b6:	e158      	b.n	800ca6a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	785b      	ldrb	r3, [r3, #1]
 800c7bc:	2b03      	cmp	r3, #3
 800c7be:	d008      	beq.n	800c7d2 <USBD_StdEPReq+0x9a>
 800c7c0:	2b03      	cmp	r3, #3
 800c7c2:	f300 8147 	bgt.w	800ca54 <USBD_StdEPReq+0x31c>
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 809b 	beq.w	800c902 <USBD_StdEPReq+0x1ca>
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d03c      	beq.n	800c84a <USBD_StdEPReq+0x112>
 800c7d0:	e140      	b.n	800ca54 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d002      	beq.n	800c7e4 <USBD_StdEPReq+0xac>
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d016      	beq.n	800c810 <USBD_StdEPReq+0xd8>
 800c7e2:	e02c      	b.n	800c83e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00d      	beq.n	800c806 <USBD_StdEPReq+0xce>
 800c7ea:	7bbb      	ldrb	r3, [r7, #14]
 800c7ec:	2b80      	cmp	r3, #128	@ 0x80
 800c7ee:	d00a      	beq.n	800c806 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f001 f9e5 	bl	800dbc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7fa:	2180      	movs	r1, #128	@ 0x80
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f001 f9e1 	bl	800dbc4 <USBD_LL_StallEP>
 800c802:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c804:	e020      	b.n	800c848 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fc7c 	bl	800d106 <USBD_CtlError>
              break;
 800c80e:	e01b      	b.n	800c848 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	885b      	ldrh	r3, [r3, #2]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d10e      	bne.n	800c836 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c818:	7bbb      	ldrb	r3, [r7, #14]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00b      	beq.n	800c836 <USBD_StdEPReq+0xfe>
 800c81e:	7bbb      	ldrb	r3, [r7, #14]
 800c820:	2b80      	cmp	r3, #128	@ 0x80
 800c822:	d008      	beq.n	800c836 <USBD_StdEPReq+0xfe>
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	88db      	ldrh	r3, [r3, #6]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c82c:	7bbb      	ldrb	r3, [r7, #14]
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f001 f9c7 	bl	800dbc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fd43 	bl	800d2c2 <USBD_CtlSendStatus>

              break;
 800c83c:	e004      	b.n	800c848 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fc60 	bl	800d106 <USBD_CtlError>
              break;
 800c846:	bf00      	nop
          }
          break;
 800c848:	e109      	b.n	800ca5e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b02      	cmp	r3, #2
 800c854:	d002      	beq.n	800c85c <USBD_StdEPReq+0x124>
 800c856:	2b03      	cmp	r3, #3
 800c858:	d016      	beq.n	800c888 <USBD_StdEPReq+0x150>
 800c85a:	e04b      	b.n	800c8f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c85c:	7bbb      	ldrb	r3, [r7, #14]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00d      	beq.n	800c87e <USBD_StdEPReq+0x146>
 800c862:	7bbb      	ldrb	r3, [r7, #14]
 800c864:	2b80      	cmp	r3, #128	@ 0x80
 800c866:	d00a      	beq.n	800c87e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c868:	7bbb      	ldrb	r3, [r7, #14]
 800c86a:	4619      	mov	r1, r3
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f001 f9a9 	bl	800dbc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c872:	2180      	movs	r1, #128	@ 0x80
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f001 f9a5 	bl	800dbc4 <USBD_LL_StallEP>
 800c87a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c87c:	e040      	b.n	800c900 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fc40 	bl	800d106 <USBD_CtlError>
              break;
 800c886:	e03b      	b.n	800c900 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	885b      	ldrh	r3, [r3, #2]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d136      	bne.n	800c8fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c890:	7bbb      	ldrb	r3, [r7, #14]
 800c892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c896:	2b00      	cmp	r3, #0
 800c898:	d004      	beq.n	800c8a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c89a:	7bbb      	ldrb	r3, [r7, #14]
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f001 f9af 	bl	800dc02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fd0c 	bl	800d2c2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7ff fde3 	bl	800c47a <USBD_CoreFindEP>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8b8:	7b7b      	ldrb	r3, [r7, #13]
 800c8ba:	2bff      	cmp	r3, #255	@ 0xff
 800c8bc:	d01f      	beq.n	800c8fe <USBD_StdEPReq+0x1c6>
 800c8be:	7b7b      	ldrb	r3, [r7, #13]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d11c      	bne.n	800c8fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c8c4:	7b7a      	ldrb	r2, [r7, #13]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c8cc:	7b7a      	ldrb	r2, [r7, #13]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	32ae      	adds	r2, #174	@ 0xae
 800c8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d010      	beq.n	800c8fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c8dc:	7b7a      	ldrb	r2, [r7, #13]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	32ae      	adds	r2, #174	@ 0xae
 800c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	4798      	blx	r3
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c8f2:	e004      	b.n	800c8fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 fc05 	bl	800d106 <USBD_CtlError>
              break;
 800c8fc:	e000      	b.n	800c900 <USBD_StdEPReq+0x1c8>
              break;
 800c8fe:	bf00      	nop
          }
          break;
 800c900:	e0ad      	b.n	800ca5e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d002      	beq.n	800c914 <USBD_StdEPReq+0x1dc>
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d033      	beq.n	800c97a <USBD_StdEPReq+0x242>
 800c912:	e099      	b.n	800ca48 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c914:	7bbb      	ldrb	r3, [r7, #14]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d007      	beq.n	800c92a <USBD_StdEPReq+0x1f2>
 800c91a:	7bbb      	ldrb	r3, [r7, #14]
 800c91c:	2b80      	cmp	r3, #128	@ 0x80
 800c91e:	d004      	beq.n	800c92a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fbef 	bl	800d106 <USBD_CtlError>
                break;
 800c928:	e093      	b.n	800ca52 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c92a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	da0b      	bge.n	800c94a <USBD_StdEPReq+0x212>
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c938:	4613      	mov	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	4413      	add	r3, r2
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	3310      	adds	r3, #16
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	4413      	add	r3, r2
 800c946:	3304      	adds	r3, #4
 800c948:	e00b      	b.n	800c962 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c94a:	7bbb      	ldrb	r3, [r7, #14]
 800c94c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c950:	4613      	mov	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	4413      	add	r3, r2
 800c960:	3304      	adds	r3, #4
 800c962:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2200      	movs	r2, #0
 800c968:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	330e      	adds	r3, #14
 800c96e:	2202      	movs	r2, #2
 800c970:	4619      	mov	r1, r3
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 fc44 	bl	800d200 <USBD_CtlSendData>
              break;
 800c978:	e06b      	b.n	800ca52 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c97a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	da11      	bge.n	800c9a6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	f003 020f 	and.w	r2, r3, #15
 800c988:	6879      	ldr	r1, [r7, #4]
 800c98a:	4613      	mov	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4413      	add	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	440b      	add	r3, r1
 800c994:	3323      	adds	r3, #35	@ 0x23
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d117      	bne.n	800c9cc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fbb1 	bl	800d106 <USBD_CtlError>
                  break;
 800c9a4:	e055      	b.n	800ca52 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c9a6:	7bbb      	ldrb	r3, [r7, #14]
 800c9a8:	f003 020f 	and.w	r2, r3, #15
 800c9ac:	6879      	ldr	r1, [r7, #4]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	440b      	add	r3, r1
 800c9b8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d104      	bne.n	800c9cc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fb9e 	bl	800d106 <USBD_CtlError>
                  break;
 800c9ca:	e042      	b.n	800ca52 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	da0b      	bge.n	800c9ec <USBD_StdEPReq+0x2b4>
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c9da:	4613      	mov	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	3310      	adds	r3, #16
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	e00b      	b.n	800ca04 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
 800c9ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	4413      	add	r3, r2
 800ca02:	3304      	adds	r3, #4
 800ca04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <USBD_StdEPReq+0x2da>
 800ca0c:	7bbb      	ldrb	r3, [r7, #14]
 800ca0e:	2b80      	cmp	r3, #128	@ 0x80
 800ca10:	d103      	bne.n	800ca1a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2200      	movs	r2, #0
 800ca16:	739a      	strb	r2, [r3, #14]
 800ca18:	e00e      	b.n	800ca38 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ca1a:	7bbb      	ldrb	r3, [r7, #14]
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f001 f90e 	bl	800dc40 <USBD_LL_IsStallEP>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d003      	beq.n	800ca32 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	739a      	strb	r2, [r3, #14]
 800ca30:	e002      	b.n	800ca38 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2200      	movs	r2, #0
 800ca36:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	330e      	adds	r3, #14
 800ca3c:	2202      	movs	r2, #2
 800ca3e:	4619      	mov	r1, r3
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fbdd 	bl	800d200 <USBD_CtlSendData>
              break;
 800ca46:	e004      	b.n	800ca52 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fb5b 	bl	800d106 <USBD_CtlError>
              break;
 800ca50:	bf00      	nop
          }
          break;
 800ca52:	e004      	b.n	800ca5e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fb55 	bl	800d106 <USBD_CtlError>
          break;
 800ca5c:	bf00      	nop
      }
      break;
 800ca5e:	e005      	b.n	800ca6c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fb4f 	bl	800d106 <USBD_CtlError>
      break;
 800ca68:	e000      	b.n	800ca6c <USBD_StdEPReq+0x334>
      break;
 800ca6a:	bf00      	nop
  }

  return ret;
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
	...

0800ca78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ca82:	2300      	movs	r3, #0
 800ca84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	885b      	ldrh	r3, [r3, #2]
 800ca92:	0a1b      	lsrs	r3, r3, #8
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	3b01      	subs	r3, #1
 800ca98:	2b06      	cmp	r3, #6
 800ca9a:	f200 8128 	bhi.w	800ccee <USBD_GetDescriptor+0x276>
 800ca9e:	a201      	add	r2, pc, #4	@ (adr r2, 800caa4 <USBD_GetDescriptor+0x2c>)
 800caa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa4:	0800cac1 	.word	0x0800cac1
 800caa8:	0800cad9 	.word	0x0800cad9
 800caac:	0800cb19 	.word	0x0800cb19
 800cab0:	0800ccef 	.word	0x0800ccef
 800cab4:	0800ccef 	.word	0x0800ccef
 800cab8:	0800cc8f 	.word	0x0800cc8f
 800cabc:	0800ccbb 	.word	0x0800ccbb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	7c12      	ldrb	r2, [r2, #16]
 800cacc:	f107 0108 	add.w	r1, r7, #8
 800cad0:	4610      	mov	r0, r2
 800cad2:	4798      	blx	r3
 800cad4:	60f8      	str	r0, [r7, #12]
      break;
 800cad6:	e112      	b.n	800ccfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7c1b      	ldrb	r3, [r3, #16]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10d      	bne.n	800cafc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae8:	f107 0208 	add.w	r2, r7, #8
 800caec:	4610      	mov	r0, r2
 800caee:	4798      	blx	r3
 800caf0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3301      	adds	r3, #1
 800caf6:	2202      	movs	r2, #2
 800caf8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cafa:	e100      	b.n	800ccfe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb04:	f107 0208 	add.w	r2, r7, #8
 800cb08:	4610      	mov	r0, r2
 800cb0a:	4798      	blx	r3
 800cb0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3301      	adds	r3, #1
 800cb12:	2202      	movs	r2, #2
 800cb14:	701a      	strb	r2, [r3, #0]
      break;
 800cb16:	e0f2      	b.n	800ccfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	885b      	ldrh	r3, [r3, #2]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b05      	cmp	r3, #5
 800cb20:	f200 80ac 	bhi.w	800cc7c <USBD_GetDescriptor+0x204>
 800cb24:	a201      	add	r2, pc, #4	@ (adr r2, 800cb2c <USBD_GetDescriptor+0xb4>)
 800cb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2a:	bf00      	nop
 800cb2c:	0800cb45 	.word	0x0800cb45
 800cb30:	0800cb79 	.word	0x0800cb79
 800cb34:	0800cbad 	.word	0x0800cbad
 800cb38:	0800cbe1 	.word	0x0800cbe1
 800cb3c:	0800cc15 	.word	0x0800cc15
 800cb40:	0800cc49 	.word	0x0800cc49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00b      	beq.n	800cb68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	7c12      	ldrb	r2, [r2, #16]
 800cb5c:	f107 0108 	add.w	r1, r7, #8
 800cb60:	4610      	mov	r0, r2
 800cb62:	4798      	blx	r3
 800cb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb66:	e091      	b.n	800cc8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb68:	6839      	ldr	r1, [r7, #0]
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 facb 	bl	800d106 <USBD_CtlError>
            err++;
 800cb70:	7afb      	ldrb	r3, [r7, #11]
 800cb72:	3301      	adds	r3, #1
 800cb74:	72fb      	strb	r3, [r7, #11]
          break;
 800cb76:	e089      	b.n	800cc8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00b      	beq.n	800cb9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	7c12      	ldrb	r2, [r2, #16]
 800cb90:	f107 0108 	add.w	r1, r7, #8
 800cb94:	4610      	mov	r0, r2
 800cb96:	4798      	blx	r3
 800cb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb9a:	e077      	b.n	800cc8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fab1 	bl	800d106 <USBD_CtlError>
            err++;
 800cba4:	7afb      	ldrb	r3, [r7, #11]
 800cba6:	3301      	adds	r3, #1
 800cba8:	72fb      	strb	r3, [r7, #11]
          break;
 800cbaa:	e06f      	b.n	800cc8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00b      	beq.n	800cbd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	7c12      	ldrb	r2, [r2, #16]
 800cbc4:	f107 0108 	add.w	r1, r7, #8
 800cbc8:	4610      	mov	r0, r2
 800cbca:	4798      	blx	r3
 800cbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbce:	e05d      	b.n	800cc8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fa97 	bl	800d106 <USBD_CtlError>
            err++;
 800cbd8:	7afb      	ldrb	r3, [r7, #11]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800cbde:	e055      	b.n	800cc8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbe6:	691b      	ldr	r3, [r3, #16]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00b      	beq.n	800cc04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	7c12      	ldrb	r2, [r2, #16]
 800cbf8:	f107 0108 	add.w	r1, r7, #8
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	4798      	blx	r3
 800cc00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc02:	e043      	b.n	800cc8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc04:	6839      	ldr	r1, [r7, #0]
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 fa7d 	bl	800d106 <USBD_CtlError>
            err++;
 800cc0c:	7afb      	ldrb	r3, [r7, #11]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	72fb      	strb	r3, [r7, #11]
          break;
 800cc12:	e03b      	b.n	800cc8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00b      	beq.n	800cc38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc26:	695b      	ldr	r3, [r3, #20]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	7c12      	ldrb	r2, [r2, #16]
 800cc2c:	f107 0108 	add.w	r1, r7, #8
 800cc30:	4610      	mov	r0, r2
 800cc32:	4798      	blx	r3
 800cc34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc36:	e029      	b.n	800cc8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc38:	6839      	ldr	r1, [r7, #0]
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fa63 	bl	800d106 <USBD_CtlError>
            err++;
 800cc40:	7afb      	ldrb	r3, [r7, #11]
 800cc42:	3301      	adds	r3, #1
 800cc44:	72fb      	strb	r3, [r7, #11]
          break;
 800cc46:	e021      	b.n	800cc8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc4e:	699b      	ldr	r3, [r3, #24]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00b      	beq.n	800cc6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc5a:	699b      	ldr	r3, [r3, #24]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	7c12      	ldrb	r2, [r2, #16]
 800cc60:	f107 0108 	add.w	r1, r7, #8
 800cc64:	4610      	mov	r0, r2
 800cc66:	4798      	blx	r3
 800cc68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc6a:	e00f      	b.n	800cc8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fa49 	bl	800d106 <USBD_CtlError>
            err++;
 800cc74:	7afb      	ldrb	r3, [r7, #11]
 800cc76:	3301      	adds	r3, #1
 800cc78:	72fb      	strb	r3, [r7, #11]
          break;
 800cc7a:	e007      	b.n	800cc8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fa41 	bl	800d106 <USBD_CtlError>
          err++;
 800cc84:	7afb      	ldrb	r3, [r7, #11]
 800cc86:	3301      	adds	r3, #1
 800cc88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cc8a:	bf00      	nop
      }
      break;
 800cc8c:	e037      	b.n	800ccfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	7c1b      	ldrb	r3, [r3, #16]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d109      	bne.n	800ccaa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc9e:	f107 0208 	add.w	r2, r7, #8
 800cca2:	4610      	mov	r0, r2
 800cca4:	4798      	blx	r3
 800cca6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cca8:	e029      	b.n	800ccfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ccaa:	6839      	ldr	r1, [r7, #0]
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 fa2a 	bl	800d106 <USBD_CtlError>
        err++;
 800ccb2:	7afb      	ldrb	r3, [r7, #11]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	72fb      	strb	r3, [r7, #11]
      break;
 800ccb8:	e021      	b.n	800ccfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	7c1b      	ldrb	r3, [r3, #16]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10d      	bne.n	800ccde <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccca:	f107 0208 	add.w	r2, r7, #8
 800ccce:	4610      	mov	r0, r2
 800ccd0:	4798      	blx	r3
 800ccd2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	2207      	movs	r2, #7
 800ccda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccdc:	e00f      	b.n	800ccfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fa10 	bl	800d106 <USBD_CtlError>
        err++;
 800cce6:	7afb      	ldrb	r3, [r7, #11]
 800cce8:	3301      	adds	r3, #1
 800ccea:	72fb      	strb	r3, [r7, #11]
      break;
 800ccec:	e007      	b.n	800ccfe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fa08 	bl	800d106 <USBD_CtlError>
      err++;
 800ccf6:	7afb      	ldrb	r3, [r7, #11]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	72fb      	strb	r3, [r7, #11]
      break;
 800ccfc:	bf00      	nop
  }

  if (err != 0U)
 800ccfe:	7afb      	ldrb	r3, [r7, #11]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d11e      	bne.n	800cd42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	88db      	ldrh	r3, [r3, #6]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d016      	beq.n	800cd3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cd0c:	893b      	ldrh	r3, [r7, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00e      	beq.n	800cd30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	88da      	ldrh	r2, [r3, #6]
 800cd16:	893b      	ldrh	r3, [r7, #8]
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	bf28      	it	cs
 800cd1c:	4613      	movcs	r3, r2
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cd22:	893b      	ldrh	r3, [r7, #8]
 800cd24:	461a      	mov	r2, r3
 800cd26:	68f9      	ldr	r1, [r7, #12]
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fa69 	bl	800d200 <USBD_CtlSendData>
 800cd2e:	e009      	b.n	800cd44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f9e7 	bl	800d106 <USBD_CtlError>
 800cd38:	e004      	b.n	800cd44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fac1 	bl	800d2c2 <USBD_CtlSendStatus>
 800cd40:	e000      	b.n	800cd44 <USBD_GetDescriptor+0x2cc>
    return;
 800cd42:	bf00      	nop
  }
}
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop

0800cd4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	889b      	ldrh	r3, [r3, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d131      	bne.n	800cdc2 <USBD_SetAddress+0x76>
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	88db      	ldrh	r3, [r3, #6]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d12d      	bne.n	800cdc2 <USBD_SetAddress+0x76>
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	885b      	ldrh	r3, [r3, #2]
 800cd6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd6c:	d829      	bhi.n	800cdc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	885b      	ldrh	r3, [r3, #2]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d104      	bne.n	800cd90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f9bc 	bl	800d106 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd8e:	e01d      	b.n	800cdcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	7bfa      	ldrb	r2, [r7, #15]
 800cd94:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 ff7b 	bl	800dc98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 fa8d 	bl	800d2c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d004      	beq.n	800cdb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdb6:	e009      	b.n	800cdcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc0:	e004      	b.n	800cdcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f99e 	bl	800d106 <USBD_CtlError>
  }
}
 800cdca:	bf00      	nop
 800cdcc:	bf00      	nop
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	885b      	ldrh	r3, [r3, #2]
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	4b4e      	ldr	r3, [pc, #312]	@ (800cf24 <USBD_SetConfig+0x150>)
 800cdea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cdec:	4b4d      	ldr	r3, [pc, #308]	@ (800cf24 <USBD_SetConfig+0x150>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d905      	bls.n	800ce00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 f985 	bl	800d106 <USBD_CtlError>
    return USBD_FAIL;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	e08c      	b.n	800cf1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d002      	beq.n	800ce12 <USBD_SetConfig+0x3e>
 800ce0c:	2b03      	cmp	r3, #3
 800ce0e:	d029      	beq.n	800ce64 <USBD_SetConfig+0x90>
 800ce10:	e075      	b.n	800cefe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ce12:	4b44      	ldr	r3, [pc, #272]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d020      	beq.n	800ce5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ce1a:	4b42      	ldr	r3, [pc, #264]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce24:	4b3f      	ldr	r3, [pc, #252]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7fe ffcd 	bl	800bdca <USBD_SetClassConfig>
 800ce30:	4603      	mov	r3, r0
 800ce32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d008      	beq.n	800ce4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 f962 	bl	800d106 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2202      	movs	r2, #2
 800ce46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ce4a:	e065      	b.n	800cf18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 fa38 	bl	800d2c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2203      	movs	r2, #3
 800ce56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ce5a:	e05d      	b.n	800cf18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fa30 	bl	800d2c2 <USBD_CtlSendStatus>
      break;
 800ce62:	e059      	b.n	800cf18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ce64:	4b2f      	ldr	r3, [pc, #188]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d112      	bne.n	800ce92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ce74:	4b2b      	ldr	r3, [pc, #172]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce7e:	4b29      	ldr	r3, [pc, #164]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	4619      	mov	r1, r3
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7fe ffbc 	bl	800be02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fa19 	bl	800d2c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ce90:	e042      	b.n	800cf18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ce92:	4b24      	ldr	r3, [pc, #144]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	461a      	mov	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d02a      	beq.n	800cef6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	4619      	mov	r1, r3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7fe ffaa 	bl	800be02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ceae:	4b1d      	ldr	r3, [pc, #116]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ceb8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf24 <USBD_SetConfig+0x150>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	4619      	mov	r1, r3
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7fe ff83 	bl	800bdca <USBD_SetClassConfig>
 800cec4:	4603      	mov	r3, r0
 800cec6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00f      	beq.n	800ceee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cece:	6839      	ldr	r1, [r7, #0]
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f918 	bl	800d106 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7fe ff8f 	bl	800be02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2202      	movs	r2, #2
 800cee8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ceec:	e014      	b.n	800cf18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f9e7 	bl	800d2c2 <USBD_CtlSendStatus>
      break;
 800cef4:	e010      	b.n	800cf18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f9e3 	bl	800d2c2 <USBD_CtlSendStatus>
      break;
 800cefc:	e00c      	b.n	800cf18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f900 	bl	800d106 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf06:	4b07      	ldr	r3, [pc, #28]	@ (800cf24 <USBD_SetConfig+0x150>)
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7fe ff78 	bl	800be02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cf12:	2303      	movs	r3, #3
 800cf14:	73fb      	strb	r3, [r7, #15]
      break;
 800cf16:	bf00      	nop
  }

  return ret;
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	20000a2c 	.word	0x20000a2c

0800cf28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	88db      	ldrh	r3, [r3, #6]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d004      	beq.n	800cf44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f8e2 	bl	800d106 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cf42:	e023      	b.n	800cf8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	dc02      	bgt.n	800cf56 <USBD_GetConfig+0x2e>
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	dc03      	bgt.n	800cf5c <USBD_GetConfig+0x34>
 800cf54:	e015      	b.n	800cf82 <USBD_GetConfig+0x5a>
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d00b      	beq.n	800cf72 <USBD_GetConfig+0x4a>
 800cf5a:	e012      	b.n	800cf82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3308      	adds	r3, #8
 800cf66:	2201      	movs	r2, #1
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f948 	bl	800d200 <USBD_CtlSendData>
        break;
 800cf70:	e00c      	b.n	800cf8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	3304      	adds	r3, #4
 800cf76:	2201      	movs	r2, #1
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f940 	bl	800d200 <USBD_CtlSendData>
        break;
 800cf80:	e004      	b.n	800cf8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f8be 	bl	800d106 <USBD_CtlError>
        break;
 800cf8a:	bf00      	nop
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d81e      	bhi.n	800cfea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	88db      	ldrh	r3, [r3, #6]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d004      	beq.n	800cfbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f8a5 	bl	800d106 <USBD_CtlError>
        break;
 800cfbc:	e01a      	b.n	800cff4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d005      	beq.n	800cfda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	f043 0202 	orr.w	r2, r3, #2
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	330c      	adds	r3, #12
 800cfde:	2202      	movs	r2, #2
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f90c 	bl	800d200 <USBD_CtlSendData>
      break;
 800cfe8:	e004      	b.n	800cff4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 f88a 	bl	800d106 <USBD_CtlError>
      break;
 800cff2:	bf00      	nop
  }
}
 800cff4:	bf00      	nop
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	885b      	ldrh	r3, [r3, #2]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d107      	bne.n	800d01e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 f953 	bl	800d2c2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d01c:	e013      	b.n	800d046 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	885b      	ldrh	r3, [r3, #2]
 800d022:	2b02      	cmp	r3, #2
 800d024:	d10b      	bne.n	800d03e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	889b      	ldrh	r3, [r3, #4]
 800d02a:	0a1b      	lsrs	r3, r3, #8
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	b2da      	uxtb	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f943 	bl	800d2c2 <USBD_CtlSendStatus>
}
 800d03c:	e003      	b.n	800d046 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d03e:	6839      	ldr	r1, [r7, #0]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 f860 	bl	800d106 <USBD_CtlError>
}
 800d046:	bf00      	nop
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b082      	sub	sp, #8
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	3b01      	subs	r3, #1
 800d062:	2b02      	cmp	r3, #2
 800d064:	d80b      	bhi.n	800d07e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	885b      	ldrh	r3, [r3, #2]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d10c      	bne.n	800d088 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f923 	bl	800d2c2 <USBD_CtlSendStatus>
      }
      break;
 800d07c:	e004      	b.n	800d088 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f840 	bl	800d106 <USBD_CtlError>
      break;
 800d086:	e000      	b.n	800d08a <USBD_ClrFeature+0x3c>
      break;
 800d088:	bf00      	nop
  }
}
 800d08a:	bf00      	nop
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b084      	sub	sp, #16
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	781a      	ldrb	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	781a      	ldrb	r2, [r3, #0]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f7ff fa3d 	bl	800c53c <SWAPBYTE>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f7ff fa30 	bl	800c53c <SWAPBYTE>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	461a      	mov	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f7ff fa23 	bl	800c53c <SWAPBYTE>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	80da      	strh	r2, [r3, #6]
}
 800d0fe:	bf00      	nop
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d110:	2180      	movs	r1, #128	@ 0x80
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 fd56 	bl	800dbc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d118:	2100      	movs	r1, #0
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fd52 	bl	800dbc4 <USBD_LL_StallEP>
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d134:	2300      	movs	r3, #0
 800d136:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d042      	beq.n	800d1c4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d142:	6938      	ldr	r0, [r7, #16]
 800d144:	f000 f842 	bl	800d1cc <USBD_GetLen>
 800d148:	4603      	mov	r3, r0
 800d14a:	3301      	adds	r3, #1
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d152:	d808      	bhi.n	800d166 <USBD_GetString+0x3e>
 800d154:	6938      	ldr	r0, [r7, #16]
 800d156:	f000 f839 	bl	800d1cc <USBD_GetLen>
 800d15a:	4603      	mov	r3, r0
 800d15c:	3301      	adds	r3, #1
 800d15e:	b29b      	uxth	r3, r3
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	b29a      	uxth	r2, r3
 800d164:	e001      	b.n	800d16a <USBD_GetString+0x42>
 800d166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	4413      	add	r3, r2
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	7812      	ldrb	r2, [r2, #0]
 800d178:	701a      	strb	r2, [r3, #0]
  idx++;
 800d17a:	7dfb      	ldrb	r3, [r7, #23]
 800d17c:	3301      	adds	r3, #1
 800d17e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d180:	7dfb      	ldrb	r3, [r7, #23]
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	4413      	add	r3, r2
 800d186:	2203      	movs	r2, #3
 800d188:	701a      	strb	r2, [r3, #0]
  idx++;
 800d18a:	7dfb      	ldrb	r3, [r7, #23]
 800d18c:	3301      	adds	r3, #1
 800d18e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d190:	e013      	b.n	800d1ba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d192:	7dfb      	ldrb	r3, [r7, #23]
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	4413      	add	r3, r2
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	7812      	ldrb	r2, [r2, #0]
 800d19c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	613b      	str	r3, [r7, #16]
    idx++;
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d1aa:	7dfb      	ldrb	r3, [r7, #23]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e7      	bne.n	800d192 <USBD_GetString+0x6a>
 800d1c2:	e000      	b.n	800d1c6 <USBD_GetString+0x9e>
    return;
 800d1c4:	bf00      	nop
  }
}
 800d1c6:	3718      	adds	r7, #24
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d1dc:	e005      	b.n	800d1ea <USBD_GetLen+0x1e>
  {
    len++;
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1f5      	bne.n	800d1de <USBD_GetLen+0x12>
  }

  return len;
 800d1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2202      	movs	r2, #2
 800d210:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	2100      	movs	r1, #0
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f000 fd52 	bl	800dcd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	2100      	movs	r1, #0
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f000 fd41 	bl	800dcd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b084      	sub	sp, #16
 800d262:	af00      	add	r7, sp, #0
 800d264:	60f8      	str	r0, [r7, #12]
 800d266:	60b9      	str	r1, [r7, #8]
 800d268:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2203      	movs	r2, #3
 800d26e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	2100      	movs	r1, #0
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f000 fd41 	bl	800dd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d296:	2300      	movs	r3, #0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f000 fd30 	bl	800dd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b082      	sub	sp, #8
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2204      	movs	r2, #4
 800d2ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fcfc 	bl	800dcd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2205      	movs	r2, #5
 800d2f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fd0a 	bl	800dd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
	...

0800d310 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d314:	2200      	movs	r2, #0
 800d316:	4912      	ldr	r1, [pc, #72]	@ (800d360 <MX_USB_DEVICE_Init+0x50>)
 800d318:	4812      	ldr	r0, [pc, #72]	@ (800d364 <MX_USB_DEVICE_Init+0x54>)
 800d31a:	f7fe fcd9 	bl	800bcd0 <USBD_Init>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d324:	f7f4 fb34 	bl	8001990 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d328:	490f      	ldr	r1, [pc, #60]	@ (800d368 <MX_USB_DEVICE_Init+0x58>)
 800d32a:	480e      	ldr	r0, [pc, #56]	@ (800d364 <MX_USB_DEVICE_Init+0x54>)
 800d32c:	f7fe fd00 	bl	800bd30 <USBD_RegisterClass>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d336:	f7f4 fb2b 	bl	8001990 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d33a:	490c      	ldr	r1, [pc, #48]	@ (800d36c <MX_USB_DEVICE_Init+0x5c>)
 800d33c:	4809      	ldr	r0, [pc, #36]	@ (800d364 <MX_USB_DEVICE_Init+0x54>)
 800d33e:	f7fe fbf7 	bl	800bb30 <USBD_CDC_RegisterInterface>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d348:	f7f4 fb22 	bl	8001990 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d34c:	4805      	ldr	r0, [pc, #20]	@ (800d364 <MX_USB_DEVICE_Init+0x54>)
 800d34e:	f7fe fd25 	bl	800bd9c <USBD_Start>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d001      	beq.n	800d35c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d358:	f7f4 fb1a 	bl	8001990 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d35c:	bf00      	nop
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	200000e0 	.word	0x200000e0
 800d364:	20000a30 	.word	0x20000a30
 800d368:	20000044 	.word	0x20000044
 800d36c:	200000cc 	.word	0x200000cc

0800d370 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d374:	2200      	movs	r2, #0
 800d376:	4905      	ldr	r1, [pc, #20]	@ (800d38c <CDC_Init_FS+0x1c>)
 800d378:	4805      	ldr	r0, [pc, #20]	@ (800d390 <CDC_Init_FS+0x20>)
 800d37a:	f7fe fbf3 	bl	800bb64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d37e:	4905      	ldr	r1, [pc, #20]	@ (800d394 <CDC_Init_FS+0x24>)
 800d380:	4803      	ldr	r0, [pc, #12]	@ (800d390 <CDC_Init_FS+0x20>)
 800d382:	f7fe fc11 	bl	800bba8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d386:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d388:	4618      	mov	r0, r3
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	20000f0c 	.word	0x20000f0c
 800d390:	20000a30 	.word	0x20000a30
 800d394:	20000d0c 	.word	0x20000d0c

0800d398 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d398:	b480      	push	{r7}
 800d39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d39c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	6039      	str	r1, [r7, #0]
 800d3b2:	71fb      	strb	r3, [r7, #7]
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d3b8:	79fb      	ldrb	r3, [r7, #7]
 800d3ba:	2b23      	cmp	r3, #35	@ 0x23
 800d3bc:	f200 8098 	bhi.w	800d4f0 <CDC_Control_FS+0x148>
 800d3c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3c8 <CDC_Control_FS+0x20>)
 800d3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c6:	bf00      	nop
 800d3c8:	0800d4f1 	.word	0x0800d4f1
 800d3cc:	0800d4f1 	.word	0x0800d4f1
 800d3d0:	0800d4f1 	.word	0x0800d4f1
 800d3d4:	0800d4f1 	.word	0x0800d4f1
 800d3d8:	0800d4f1 	.word	0x0800d4f1
 800d3dc:	0800d4f1 	.word	0x0800d4f1
 800d3e0:	0800d4f1 	.word	0x0800d4f1
 800d3e4:	0800d4f1 	.word	0x0800d4f1
 800d3e8:	0800d4f1 	.word	0x0800d4f1
 800d3ec:	0800d4f1 	.word	0x0800d4f1
 800d3f0:	0800d4f1 	.word	0x0800d4f1
 800d3f4:	0800d4f1 	.word	0x0800d4f1
 800d3f8:	0800d4f1 	.word	0x0800d4f1
 800d3fc:	0800d4f1 	.word	0x0800d4f1
 800d400:	0800d4f1 	.word	0x0800d4f1
 800d404:	0800d4f1 	.word	0x0800d4f1
 800d408:	0800d4f1 	.word	0x0800d4f1
 800d40c:	0800d4f1 	.word	0x0800d4f1
 800d410:	0800d4f1 	.word	0x0800d4f1
 800d414:	0800d4f1 	.word	0x0800d4f1
 800d418:	0800d4f1 	.word	0x0800d4f1
 800d41c:	0800d4f1 	.word	0x0800d4f1
 800d420:	0800d4f1 	.word	0x0800d4f1
 800d424:	0800d4f1 	.word	0x0800d4f1
 800d428:	0800d4f1 	.word	0x0800d4f1
 800d42c:	0800d4f1 	.word	0x0800d4f1
 800d430:	0800d4f1 	.word	0x0800d4f1
 800d434:	0800d4f1 	.word	0x0800d4f1
 800d438:	0800d4f1 	.word	0x0800d4f1
 800d43c:	0800d4f1 	.word	0x0800d4f1
 800d440:	0800d4f1 	.word	0x0800d4f1
 800d444:	0800d4f1 	.word	0x0800d4f1
 800d448:	0800d459 	.word	0x0800d459
 800d44c:	0800d49d 	.word	0x0800d49d
 800d450:	0800d4f1 	.word	0x0800d4f1
 800d454:	0800d4f1 	.word	0x0800d4f1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	461a      	mov	r2, r3
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	3301      	adds	r3, #1
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	021b      	lsls	r3, r3, #8
 800d466:	431a      	orrs	r2, r3
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	3302      	adds	r3, #2
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	041b      	lsls	r3, r3, #16
 800d470:	431a      	orrs	r2, r3
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	3303      	adds	r3, #3
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	061b      	lsls	r3, r3, #24
 800d47a:	4313      	orrs	r3, r2
 800d47c:	461a      	mov	r2, r3
 800d47e:	4b20      	ldr	r3, [pc, #128]	@ (800d500 <CDC_Control_FS+0x158>)
 800d480:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	791a      	ldrb	r2, [r3, #4]
 800d486:	4b1e      	ldr	r3, [pc, #120]	@ (800d500 <CDC_Control_FS+0x158>)
 800d488:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	795a      	ldrb	r2, [r3, #5]
 800d48e:	4b1c      	ldr	r3, [pc, #112]	@ (800d500 <CDC_Control_FS+0x158>)
 800d490:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	799a      	ldrb	r2, [r3, #6]
 800d496:	4b1a      	ldr	r3, [pc, #104]	@ (800d500 <CDC_Control_FS+0x158>)
 800d498:	719a      	strb	r2, [r3, #6]
    break;
 800d49a:	e02a      	b.n	800d4f2 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d49c:	4b18      	ldr	r3, [pc, #96]	@ (800d500 <CDC_Control_FS+0x158>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d4a6:	4b16      	ldr	r3, [pc, #88]	@ (800d500 <CDC_Control_FS+0x158>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	0a1a      	lsrs	r2, r3, #8
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	b2d2      	uxtb	r2, r2
 800d4b2:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d4b4:	4b12      	ldr	r3, [pc, #72]	@ (800d500 <CDC_Control_FS+0x158>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	0c1a      	lsrs	r2, r3, #16
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	3302      	adds	r3, #2
 800d4be:	b2d2      	uxtb	r2, r2
 800d4c0:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d4c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d500 <CDC_Control_FS+0x158>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	0e1a      	lsrs	r2, r3, #24
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	3303      	adds	r3, #3
 800d4cc:	b2d2      	uxtb	r2, r2
 800d4ce:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	3304      	adds	r3, #4
 800d4d4:	4a0a      	ldr	r2, [pc, #40]	@ (800d500 <CDC_Control_FS+0x158>)
 800d4d6:	7912      	ldrb	r2, [r2, #4]
 800d4d8:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	3305      	adds	r3, #5
 800d4de:	4a08      	ldr	r2, [pc, #32]	@ (800d500 <CDC_Control_FS+0x158>)
 800d4e0:	7952      	ldrb	r2, [r2, #5]
 800d4e2:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	3306      	adds	r3, #6
 800d4e8:	4a05      	ldr	r2, [pc, #20]	@ (800d500 <CDC_Control_FS+0x158>)
 800d4ea:	7992      	ldrb	r2, [r2, #6]
 800d4ec:	701a      	strb	r2, [r3, #0]
    break;
 800d4ee:	e000      	b.n	800d4f2 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d4f0:	bf00      	nop
  }

  return (USBD_OK);
 800d4f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	200000c4 	.word	0x200000c4

0800d504 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800d50e:	4b0b      	ldr	r3, [pc, #44]	@ (800d53c <CDC_Receive_FS+0x38>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d006      	beq.n	800d524 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800d516:	4b09      	ldr	r3, [pc, #36]	@ (800d53c <CDC_Receive_FS+0x38>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	683a      	ldr	r2, [r7, #0]
 800d51c:	6812      	ldr	r2, [r2, #0]
 800d51e:	4611      	mov	r1, r2
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d524:	6879      	ldr	r1, [r7, #4]
 800d526:	4806      	ldr	r0, [pc, #24]	@ (800d540 <CDC_Receive_FS+0x3c>)
 800d528:	f7fe fb3e 	bl	800bba8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d52c:	4804      	ldr	r0, [pc, #16]	@ (800d540 <CDC_Receive_FS+0x3c>)
 800d52e:	f7fe fb99 	bl	800bc64 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800d532:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	2000110c 	.word	0x2000110c
 800d540:	20000a30 	.word	0x20000a30

0800d544 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d550:	2300      	movs	r3, #0
 800d552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d554:	4b0d      	ldr	r3, [pc, #52]	@ (800d58c <CDC_Transmit_FS+0x48>)
 800d556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d55a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d566:	2301      	movs	r3, #1
 800d568:	e00b      	b.n	800d582 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d56a:	887b      	ldrh	r3, [r7, #2]
 800d56c:	461a      	mov	r2, r3
 800d56e:	6879      	ldr	r1, [r7, #4]
 800d570:	4806      	ldr	r0, [pc, #24]	@ (800d58c <CDC_Transmit_FS+0x48>)
 800d572:	f7fe faf7 	bl	800bb64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d576:	4805      	ldr	r0, [pc, #20]	@ (800d58c <CDC_Transmit_FS+0x48>)
 800d578:	f7fe fb34 	bl	800bbe4 <USBD_CDC_TransmitPacket>
 800d57c:	4603      	mov	r3, r0
 800d57e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	20000a30 	.word	0x20000a30

0800d590 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	4613      	mov	r3, r2
 800d59c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d5a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	371c      	adds	r7, #28
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
	...

0800d5b4 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800d5bc:	4a04      	ldr	r2, [pc, #16]	@ (800d5d0 <CDC_Attach_Rx+0x1c>)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6013      	str	r3, [r2, #0]
}
 800d5c2:	bf00      	nop
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	2000110c 	.word	0x2000110c

0800d5d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4603      	mov	r3, r0
 800d5dc:	6039      	str	r1, [r7, #0]
 800d5de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2212      	movs	r2, #18
 800d5e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d5e6:	4b03      	ldr	r3, [pc, #12]	@ (800d5f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr
 800d5f4:	200000fc 	.word	0x200000fc

0800d5f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b083      	sub	sp, #12
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2204      	movs	r2, #4
 800d608:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d60a:	4b03      	ldr	r3, [pc, #12]	@ (800d618 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	20000110 	.word	0x20000110

0800d61c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	6039      	str	r1, [r7, #0]
 800d626:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d628:	79fb      	ldrb	r3, [r7, #7]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d105      	bne.n	800d63a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	4907      	ldr	r1, [pc, #28]	@ (800d650 <USBD_FS_ProductStrDescriptor+0x34>)
 800d632:	4808      	ldr	r0, [pc, #32]	@ (800d654 <USBD_FS_ProductStrDescriptor+0x38>)
 800d634:	f7ff fd78 	bl	800d128 <USBD_GetString>
 800d638:	e004      	b.n	800d644 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	4904      	ldr	r1, [pc, #16]	@ (800d650 <USBD_FS_ProductStrDescriptor+0x34>)
 800d63e:	4805      	ldr	r0, [pc, #20]	@ (800d654 <USBD_FS_ProductStrDescriptor+0x38>)
 800d640:	f7ff fd72 	bl	800d128 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d644:	4b02      	ldr	r3, [pc, #8]	@ (800d650 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20001110 	.word	0x20001110
 800d654:	0800e7b8 	.word	0x0800e7b8

0800d658 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	6039      	str	r1, [r7, #0]
 800d662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d664:	683a      	ldr	r2, [r7, #0]
 800d666:	4904      	ldr	r1, [pc, #16]	@ (800d678 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d668:	4804      	ldr	r0, [pc, #16]	@ (800d67c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d66a:	f7ff fd5d 	bl	800d128 <USBD_GetString>
  return USBD_StrDesc;
 800d66e:	4b02      	ldr	r3, [pc, #8]	@ (800d678 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d670:	4618      	mov	r0, r3
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	20001110 	.word	0x20001110
 800d67c:	0800e7d0 	.word	0x0800e7d0

0800d680 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	6039      	str	r1, [r7, #0]
 800d68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	221a      	movs	r2, #26
 800d690:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d692:	f000 f843 	bl	800d71c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d696:	4b02      	ldr	r3, [pc, #8]	@ (800d6a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	20000114 	.word	0x20000114

0800d6a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	6039      	str	r1, [r7, #0]
 800d6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6b0:	79fb      	ldrb	r3, [r7, #7]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d105      	bne.n	800d6c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	4907      	ldr	r1, [pc, #28]	@ (800d6d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6ba:	4808      	ldr	r0, [pc, #32]	@ (800d6dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6bc:	f7ff fd34 	bl	800d128 <USBD_GetString>
 800d6c0:	e004      	b.n	800d6cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	4904      	ldr	r1, [pc, #16]	@ (800d6d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6c6:	4805      	ldr	r0, [pc, #20]	@ (800d6dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6c8:	f7ff fd2e 	bl	800d128 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6cc:	4b02      	ldr	r3, [pc, #8]	@ (800d6d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20001110 	.word	0x20001110
 800d6dc:	0800e7e4 	.word	0x0800e7e4

0800d6e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	6039      	str	r1, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6ec:	79fb      	ldrb	r3, [r7, #7]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d105      	bne.n	800d6fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	4907      	ldr	r1, [pc, #28]	@ (800d714 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6f6:	4808      	ldr	r0, [pc, #32]	@ (800d718 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6f8:	f7ff fd16 	bl	800d128 <USBD_GetString>
 800d6fc:	e004      	b.n	800d708 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	4904      	ldr	r1, [pc, #16]	@ (800d714 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d702:	4805      	ldr	r0, [pc, #20]	@ (800d718 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d704:	f7ff fd10 	bl	800d128 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d708:	4b02      	ldr	r3, [pc, #8]	@ (800d714 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	20001110 	.word	0x20001110
 800d718:	0800e7f0 	.word	0x0800e7f0

0800d71c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d722:	4b0f      	ldr	r3, [pc, #60]	@ (800d760 <Get_SerialNum+0x44>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d728:	4b0e      	ldr	r3, [pc, #56]	@ (800d764 <Get_SerialNum+0x48>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d72e:	4b0e      	ldr	r3, [pc, #56]	@ (800d768 <Get_SerialNum+0x4c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4413      	add	r3, r2
 800d73a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d742:	2208      	movs	r2, #8
 800d744:	4909      	ldr	r1, [pc, #36]	@ (800d76c <Get_SerialNum+0x50>)
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f000 f814 	bl	800d774 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d74c:	2204      	movs	r2, #4
 800d74e:	4908      	ldr	r1, [pc, #32]	@ (800d770 <Get_SerialNum+0x54>)
 800d750:	68b8      	ldr	r0, [r7, #8]
 800d752:	f000 f80f 	bl	800d774 <IntToUnicode>
  }
}
 800d756:	bf00      	nop
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	1fff7a10 	.word	0x1fff7a10
 800d764:	1fff7a14 	.word	0x1fff7a14
 800d768:	1fff7a18 	.word	0x1fff7a18
 800d76c:	20000116 	.word	0x20000116
 800d770:	20000126 	.word	0x20000126

0800d774 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d774:	b480      	push	{r7}
 800d776:	b087      	sub	sp, #28
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	4613      	mov	r3, r2
 800d780:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d782:	2300      	movs	r3, #0
 800d784:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d786:	2300      	movs	r3, #0
 800d788:	75fb      	strb	r3, [r7, #23]
 800d78a:	e027      	b.n	800d7dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	0f1b      	lsrs	r3, r3, #28
 800d790:	2b09      	cmp	r3, #9
 800d792:	d80b      	bhi.n	800d7ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	0f1b      	lsrs	r3, r3, #28
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	7dfb      	ldrb	r3, [r7, #23]
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	4619      	mov	r1, r3
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	440b      	add	r3, r1
 800d7a4:	3230      	adds	r2, #48	@ 0x30
 800d7a6:	b2d2      	uxtb	r2, r2
 800d7a8:	701a      	strb	r2, [r3, #0]
 800d7aa:	e00a      	b.n	800d7c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	0f1b      	lsrs	r3, r3, #28
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	7dfb      	ldrb	r3, [r7, #23]
 800d7b4:	005b      	lsls	r3, r3, #1
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	440b      	add	r3, r1
 800d7bc:	3237      	adds	r2, #55	@ 0x37
 800d7be:	b2d2      	uxtb	r2, r2
 800d7c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	011b      	lsls	r3, r3, #4
 800d7c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7c8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ca:	005b      	lsls	r3, r3, #1
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	75fb      	strb	r3, [r7, #23]
 800d7dc:	7dfa      	ldrb	r2, [r7, #23]
 800d7de:	79fb      	ldrb	r3, [r7, #7]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d3d3      	bcc.n	800d78c <IntToUnicode+0x18>
  }
}
 800d7e4:	bf00      	nop
 800d7e6:	bf00      	nop
 800d7e8:	371c      	adds	r7, #28
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b08a      	sub	sp, #40	@ 0x28
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7fc:	f107 0314 	add.w	r3, r7, #20
 800d800:	2200      	movs	r2, #0
 800d802:	601a      	str	r2, [r3, #0]
 800d804:	605a      	str	r2, [r3, #4]
 800d806:	609a      	str	r2, [r3, #8]
 800d808:	60da      	str	r2, [r3, #12]
 800d80a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d814:	d13a      	bne.n	800d88c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d816:	2300      	movs	r3, #0
 800d818:	613b      	str	r3, [r7, #16]
 800d81a:	4b1e      	ldr	r3, [pc, #120]	@ (800d894 <HAL_PCD_MspInit+0xa0>)
 800d81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d81e:	4a1d      	ldr	r2, [pc, #116]	@ (800d894 <HAL_PCD_MspInit+0xa0>)
 800d820:	f043 0301 	orr.w	r3, r3, #1
 800d824:	6313      	str	r3, [r2, #48]	@ 0x30
 800d826:	4b1b      	ldr	r3, [pc, #108]	@ (800d894 <HAL_PCD_MspInit+0xa0>)
 800d828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d82a:	f003 0301 	and.w	r3, r3, #1
 800d82e:	613b      	str	r3, [r7, #16]
 800d830:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d832:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d838:	2302      	movs	r3, #2
 800d83a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d83c:	2300      	movs	r3, #0
 800d83e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d840:	2303      	movs	r3, #3
 800d842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d844:	230a      	movs	r3, #10
 800d846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d848:	f107 0314 	add.w	r3, r7, #20
 800d84c:	4619      	mov	r1, r3
 800d84e:	4812      	ldr	r0, [pc, #72]	@ (800d898 <HAL_PCD_MspInit+0xa4>)
 800d850:	f7f6 fd32 	bl	80042b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d854:	4b0f      	ldr	r3, [pc, #60]	@ (800d894 <HAL_PCD_MspInit+0xa0>)
 800d856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d858:	4a0e      	ldr	r2, [pc, #56]	@ (800d894 <HAL_PCD_MspInit+0xa0>)
 800d85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d85e:	6353      	str	r3, [r2, #52]	@ 0x34
 800d860:	2300      	movs	r3, #0
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	4b0b      	ldr	r3, [pc, #44]	@ (800d894 <HAL_PCD_MspInit+0xa0>)
 800d866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d868:	4a0a      	ldr	r2, [pc, #40]	@ (800d894 <HAL_PCD_MspInit+0xa0>)
 800d86a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d86e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d870:	4b08      	ldr	r3, [pc, #32]	@ (800d894 <HAL_PCD_MspInit+0xa0>)
 800d872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d878:	60fb      	str	r3, [r7, #12]
 800d87a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d87c:	2200      	movs	r2, #0
 800d87e:	2100      	movs	r1, #0
 800d880:	2043      	movs	r0, #67	@ 0x43
 800d882:	f7f6 f936 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d886:	2043      	movs	r0, #67	@ 0x43
 800d888:	f7f6 f94f 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d88c:	bf00      	nop
 800d88e:	3728      	adds	r7, #40	@ 0x28
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	40023800 	.word	0x40023800
 800d898:	40020000 	.word	0x40020000

0800d89c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	4610      	mov	r0, r2
 800d8b4:	f7fe fabf 	bl	800be36 <USBD_LL_SetupStage>
}
 800d8b8:	bf00      	nop
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d8d2:	78fa      	ldrb	r2, [r7, #3]
 800d8d4:	6879      	ldr	r1, [r7, #4]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	4413      	add	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	440b      	add	r3, r1
 800d8e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	78fb      	ldrb	r3, [r7, #3]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f7fe faf9 	bl	800bee0 <USBD_LL_DataOutStage>
}
 800d8ee:	bf00      	nop
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	460b      	mov	r3, r1
 800d900:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d908:	78fa      	ldrb	r2, [r7, #3]
 800d90a:	6879      	ldr	r1, [r7, #4]
 800d90c:	4613      	mov	r3, r2
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	4413      	add	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	440b      	add	r3, r1
 800d916:	3320      	adds	r3, #32
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	4619      	mov	r1, r3
 800d91e:	f7fe fb9b 	bl	800c058 <USBD_LL_DataInStage>
}
 800d922:	bf00      	nop
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b082      	sub	sp, #8
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fe fcdf 	bl	800c2fc <USBD_LL_SOF>
}
 800d93e:	bf00      	nop
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b084      	sub	sp, #16
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d94e:	2301      	movs	r3, #1
 800d950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	79db      	ldrb	r3, [r3, #7]
 800d956:	2b02      	cmp	r3, #2
 800d958:	d001      	beq.n	800d95e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d95a:	f7f4 f819 	bl	8001990 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d964:	7bfa      	ldrb	r2, [r7, #15]
 800d966:	4611      	mov	r1, r2
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe fc83 	bl	800c274 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d974:	4618      	mov	r0, r3
 800d976:	f7fe fc2a 	bl	800c1ce <USBD_LL_Reset>
}
 800d97a:	bf00      	nop
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
	...

0800d984 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d992:	4618      	mov	r0, r3
 800d994:	f7fe fc7e 	bl	800c294 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	6812      	ldr	r2, [r2, #0]
 800d9a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d9aa:	f043 0301 	orr.w	r3, r3, #1
 800d9ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	7adb      	ldrb	r3, [r3, #11]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9b8:	4b04      	ldr	r3, [pc, #16]	@ (800d9cc <HAL_PCD_SuspendCallback+0x48>)
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	4a03      	ldr	r2, [pc, #12]	@ (800d9cc <HAL_PCD_SuspendCallback+0x48>)
 800d9be:	f043 0306 	orr.w	r3, r3, #6
 800d9c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9c4:	bf00      	nop
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	e000ed00 	.word	0xe000ed00

0800d9d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fe fc74 	bl	800c2cc <USBD_LL_Resume>
}
 800d9e4:	bf00      	nop
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9fe:	78fa      	ldrb	r2, [r7, #3]
 800da00:	4611      	mov	r1, r2
 800da02:	4618      	mov	r0, r3
 800da04:	f7fe fccc 	bl	800c3a0 <USBD_LL_IsoOUTIncomplete>
}
 800da08:	bf00      	nop
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da22:	78fa      	ldrb	r2, [r7, #3]
 800da24:	4611      	mov	r1, r2
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe fc88 	bl	800c33c <USBD_LL_IsoINIncomplete>
}
 800da2c:	bf00      	nop
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe fcde 	bl	800c404 <USBD_LL_DevConnected>
}
 800da48:	bf00      	nop
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fe fcdb 	bl	800c41a <USBD_LL_DevDisconnected>
}
 800da64:	bf00      	nop
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d13c      	bne.n	800daf6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800da7c:	4a20      	ldr	r2, [pc, #128]	@ (800db00 <USBD_LL_Init+0x94>)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a1e      	ldr	r2, [pc, #120]	@ (800db00 <USBD_LL_Init+0x94>)
 800da88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800da8c:	4b1c      	ldr	r3, [pc, #112]	@ (800db00 <USBD_LL_Init+0x94>)
 800da8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800da92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800da94:	4b1a      	ldr	r3, [pc, #104]	@ (800db00 <USBD_LL_Init+0x94>)
 800da96:	2204      	movs	r2, #4
 800da98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800da9a:	4b19      	ldr	r3, [pc, #100]	@ (800db00 <USBD_LL_Init+0x94>)
 800da9c:	2202      	movs	r2, #2
 800da9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800daa0:	4b17      	ldr	r3, [pc, #92]	@ (800db00 <USBD_LL_Init+0x94>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800daa6:	4b16      	ldr	r3, [pc, #88]	@ (800db00 <USBD_LL_Init+0x94>)
 800daa8:	2202      	movs	r2, #2
 800daaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800daac:	4b14      	ldr	r3, [pc, #80]	@ (800db00 <USBD_LL_Init+0x94>)
 800daae:	2200      	movs	r2, #0
 800dab0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dab2:	4b13      	ldr	r3, [pc, #76]	@ (800db00 <USBD_LL_Init+0x94>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dab8:	4b11      	ldr	r3, [pc, #68]	@ (800db00 <USBD_LL_Init+0x94>)
 800daba:	2200      	movs	r2, #0
 800dabc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dabe:	4b10      	ldr	r3, [pc, #64]	@ (800db00 <USBD_LL_Init+0x94>)
 800dac0:	2200      	movs	r2, #0
 800dac2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dac4:	4b0e      	ldr	r3, [pc, #56]	@ (800db00 <USBD_LL_Init+0x94>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800daca:	480d      	ldr	r0, [pc, #52]	@ (800db00 <USBD_LL_Init+0x94>)
 800dacc:	f7f9 fd43 	bl	8007556 <HAL_PCD_Init>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d001      	beq.n	800dada <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dad6:	f7f3 ff5b 	bl	8001990 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dada:	2180      	movs	r1, #128	@ 0x80
 800dadc:	4808      	ldr	r0, [pc, #32]	@ (800db00 <USBD_LL_Init+0x94>)
 800dade:	f7fa ff70 	bl	80089c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dae2:	2240      	movs	r2, #64	@ 0x40
 800dae4:	2100      	movs	r1, #0
 800dae6:	4806      	ldr	r0, [pc, #24]	@ (800db00 <USBD_LL_Init+0x94>)
 800dae8:	f7fa ff24 	bl	8008934 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800daec:	2280      	movs	r2, #128	@ 0x80
 800daee:	2101      	movs	r1, #1
 800daf0:	4803      	ldr	r0, [pc, #12]	@ (800db00 <USBD_LL_Init+0x94>)
 800daf2:	f7fa ff1f 	bl	8008934 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	20001310 	.word	0x20001310

0800db04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db0c:	2300      	movs	r3, #0
 800db0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7f9 fe2a 	bl	8007774 <HAL_PCD_Start>
 800db20:	4603      	mov	r3, r0
 800db22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db24:	7bfb      	ldrb	r3, [r7, #15]
 800db26:	4618      	mov	r0, r3
 800db28:	f000 f942 	bl	800ddb0 <USBD_Get_USB_Status>
 800db2c:	4603      	mov	r3, r0
 800db2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db30:	7bbb      	ldrb	r3, [r7, #14]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b084      	sub	sp, #16
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	4608      	mov	r0, r1
 800db44:	4611      	mov	r1, r2
 800db46:	461a      	mov	r2, r3
 800db48:	4603      	mov	r3, r0
 800db4a:	70fb      	strb	r3, [r7, #3]
 800db4c:	460b      	mov	r3, r1
 800db4e:	70bb      	strb	r3, [r7, #2]
 800db50:	4613      	mov	r3, r2
 800db52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db54:	2300      	movs	r3, #0
 800db56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db62:	78bb      	ldrb	r3, [r7, #2]
 800db64:	883a      	ldrh	r2, [r7, #0]
 800db66:	78f9      	ldrb	r1, [r7, #3]
 800db68:	f7fa fafe 	bl	8008168 <HAL_PCD_EP_Open>
 800db6c:	4603      	mov	r3, r0
 800db6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db70:	7bfb      	ldrb	r3, [r7, #15]
 800db72:	4618      	mov	r0, r3
 800db74:	f000 f91c 	bl	800ddb0 <USBD_Get_USB_Status>
 800db78:	4603      	mov	r3, r0
 800db7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b084      	sub	sp, #16
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	460b      	mov	r3, r1
 800db90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dba0:	78fa      	ldrb	r2, [r7, #3]
 800dba2:	4611      	mov	r1, r2
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fa fb49 	bl	800823c <HAL_PCD_EP_Close>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 f8fd 	bl	800ddb0 <USBD_Get_USB_Status>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbba:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dbde:	78fa      	ldrb	r2, [r7, #3]
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fa fc01 	bl	80083ea <HAL_PCD_EP_SetStall>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbec:	7bfb      	ldrb	r3, [r7, #15]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 f8de 	bl	800ddb0 <USBD_Get_USB_Status>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc1c:	78fa      	ldrb	r2, [r7, #3]
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7fa fc45 	bl	80084b0 <HAL_PCD_EP_ClrStall>
 800dc26:	4603      	mov	r3, r0
 800dc28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 f8bf 	bl	800ddb0 <USBD_Get_USB_Status>
 800dc32:	4603      	mov	r3, r0
 800dc34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc36:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	da0b      	bge.n	800dc74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc5c:	78fb      	ldrb	r3, [r7, #3]
 800dc5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc62:	68f9      	ldr	r1, [r7, #12]
 800dc64:	4613      	mov	r3, r2
 800dc66:	00db      	lsls	r3, r3, #3
 800dc68:	4413      	add	r3, r2
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	440b      	add	r3, r1
 800dc6e:	3316      	adds	r3, #22
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	e00b      	b.n	800dc8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc74:	78fb      	ldrb	r3, [r7, #3]
 800dc76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc7a:	68f9      	ldr	r1, [r7, #12]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	4413      	add	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	440b      	add	r3, r1
 800dc86:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dc8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	460b      	mov	r3, r1
 800dca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcb2:	78fa      	ldrb	r2, [r7, #3]
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fa fa32 	bl	8008120 <HAL_PCD_SetAddress>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 f874 	bl	800ddb0 <USBD_Get_USB_Status>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dccc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b086      	sub	sp, #24
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	60f8      	str	r0, [r7, #12]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
 800dce2:	460b      	mov	r3, r1
 800dce4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dcf4:	7af9      	ldrb	r1, [r7, #11]
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	f7fa fb3c 	bl	8008376 <HAL_PCD_EP_Transmit>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 f853 	bl	800ddb0 <USBD_Get_USB_Status>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	607a      	str	r2, [r7, #4]
 800dd22:	603b      	str	r3, [r7, #0]
 800dd24:	460b      	mov	r3, r1
 800dd26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dd36:	7af9      	ldrb	r1, [r7, #11]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	f7fa fac8 	bl	80082d0 <HAL_PCD_EP_Receive>
 800dd40:	4603      	mov	r3, r0
 800dd42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 f832 	bl	800ddb0 <USBD_Get_USB_Status>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd50:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3718      	adds	r7, #24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b082      	sub	sp, #8
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	460b      	mov	r3, r1
 800dd64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd6c:	78fa      	ldrb	r2, [r7, #3]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fa fae8 	bl	8008346 <HAL_PCD_EP_GetRxCount>
 800dd76:	4603      	mov	r3, r0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd88:	4b03      	ldr	r3, [pc, #12]	@ (800dd98 <USBD_static_malloc+0x18>)
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	370c      	adds	r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	200017f4 	.word	0x200017f4

0800dd9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]

}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddbe:	79fb      	ldrb	r3, [r7, #7]
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d817      	bhi.n	800ddf4 <USBD_Get_USB_Status+0x44>
 800ddc4:	a201      	add	r2, pc, #4	@ (adr r2, 800ddcc <USBD_Get_USB_Status+0x1c>)
 800ddc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddca:	bf00      	nop
 800ddcc:	0800dddd 	.word	0x0800dddd
 800ddd0:	0800dde3 	.word	0x0800dde3
 800ddd4:	0800dde9 	.word	0x0800dde9
 800ddd8:	0800ddef 	.word	0x0800ddef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73fb      	strb	r3, [r7, #15]
    break;
 800dde0:	e00b      	b.n	800ddfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dde2:	2303      	movs	r3, #3
 800dde4:	73fb      	strb	r3, [r7, #15]
    break;
 800dde6:	e008      	b.n	800ddfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dde8:	2301      	movs	r3, #1
 800ddea:	73fb      	strb	r3, [r7, #15]
    break;
 800ddec:	e005      	b.n	800ddfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddee:	2303      	movs	r3, #3
 800ddf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf2:	e002      	b.n	800ddfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	bf00      	nop
  }
  return usb_status;
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3714      	adds	r7, #20
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <sniprintf>:
 800de08:	b40c      	push	{r2, r3}
 800de0a:	b530      	push	{r4, r5, lr}
 800de0c:	4b18      	ldr	r3, [pc, #96]	@ (800de70 <sniprintf+0x68>)
 800de0e:	1e0c      	subs	r4, r1, #0
 800de10:	681d      	ldr	r5, [r3, #0]
 800de12:	b09d      	sub	sp, #116	@ 0x74
 800de14:	da08      	bge.n	800de28 <sniprintf+0x20>
 800de16:	238b      	movs	r3, #139	@ 0x8b
 800de18:	602b      	str	r3, [r5, #0]
 800de1a:	f04f 30ff 	mov.w	r0, #4294967295
 800de1e:	b01d      	add	sp, #116	@ 0x74
 800de20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de24:	b002      	add	sp, #8
 800de26:	4770      	bx	lr
 800de28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800de2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800de30:	f04f 0300 	mov.w	r3, #0
 800de34:	931b      	str	r3, [sp, #108]	@ 0x6c
 800de36:	bf14      	ite	ne
 800de38:	f104 33ff 	addne.w	r3, r4, #4294967295
 800de3c:	4623      	moveq	r3, r4
 800de3e:	9304      	str	r3, [sp, #16]
 800de40:	9307      	str	r3, [sp, #28]
 800de42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de46:	9002      	str	r0, [sp, #8]
 800de48:	9006      	str	r0, [sp, #24]
 800de4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800de4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800de50:	ab21      	add	r3, sp, #132	@ 0x84
 800de52:	a902      	add	r1, sp, #8
 800de54:	4628      	mov	r0, r5
 800de56:	9301      	str	r3, [sp, #4]
 800de58:	f000 f9bc 	bl	800e1d4 <_svfiprintf_r>
 800de5c:	1c43      	adds	r3, r0, #1
 800de5e:	bfbc      	itt	lt
 800de60:	238b      	movlt	r3, #139	@ 0x8b
 800de62:	602b      	strlt	r3, [r5, #0]
 800de64:	2c00      	cmp	r4, #0
 800de66:	d0da      	beq.n	800de1e <sniprintf+0x16>
 800de68:	9b02      	ldr	r3, [sp, #8]
 800de6a:	2200      	movs	r2, #0
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	e7d6      	b.n	800de1e <sniprintf+0x16>
 800de70:	20000130 	.word	0x20000130

0800de74 <memmove>:
 800de74:	4288      	cmp	r0, r1
 800de76:	b510      	push	{r4, lr}
 800de78:	eb01 0402 	add.w	r4, r1, r2
 800de7c:	d902      	bls.n	800de84 <memmove+0x10>
 800de7e:	4284      	cmp	r4, r0
 800de80:	4623      	mov	r3, r4
 800de82:	d807      	bhi.n	800de94 <memmove+0x20>
 800de84:	1e43      	subs	r3, r0, #1
 800de86:	42a1      	cmp	r1, r4
 800de88:	d008      	beq.n	800de9c <memmove+0x28>
 800de8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de92:	e7f8      	b.n	800de86 <memmove+0x12>
 800de94:	4402      	add	r2, r0
 800de96:	4601      	mov	r1, r0
 800de98:	428a      	cmp	r2, r1
 800de9a:	d100      	bne.n	800de9e <memmove+0x2a>
 800de9c:	bd10      	pop	{r4, pc}
 800de9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dea6:	e7f7      	b.n	800de98 <memmove+0x24>

0800dea8 <memset>:
 800dea8:	4402      	add	r2, r0
 800deaa:	4603      	mov	r3, r0
 800deac:	4293      	cmp	r3, r2
 800deae:	d100      	bne.n	800deb2 <memset+0xa>
 800deb0:	4770      	bx	lr
 800deb2:	f803 1b01 	strb.w	r1, [r3], #1
 800deb6:	e7f9      	b.n	800deac <memset+0x4>

0800deb8 <__errno>:
 800deb8:	4b01      	ldr	r3, [pc, #4]	@ (800dec0 <__errno+0x8>)
 800deba:	6818      	ldr	r0, [r3, #0]
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	20000130 	.word	0x20000130

0800dec4 <__libc_init_array>:
 800dec4:	b570      	push	{r4, r5, r6, lr}
 800dec6:	4d0d      	ldr	r5, [pc, #52]	@ (800defc <__libc_init_array+0x38>)
 800dec8:	4c0d      	ldr	r4, [pc, #52]	@ (800df00 <__libc_init_array+0x3c>)
 800deca:	1b64      	subs	r4, r4, r5
 800decc:	10a4      	asrs	r4, r4, #2
 800dece:	2600      	movs	r6, #0
 800ded0:	42a6      	cmp	r6, r4
 800ded2:	d109      	bne.n	800dee8 <__libc_init_array+0x24>
 800ded4:	4d0b      	ldr	r5, [pc, #44]	@ (800df04 <__libc_init_array+0x40>)
 800ded6:	4c0c      	ldr	r4, [pc, #48]	@ (800df08 <__libc_init_array+0x44>)
 800ded8:	f000 fc4a 	bl	800e770 <_init>
 800dedc:	1b64      	subs	r4, r4, r5
 800dede:	10a4      	asrs	r4, r4, #2
 800dee0:	2600      	movs	r6, #0
 800dee2:	42a6      	cmp	r6, r4
 800dee4:	d105      	bne.n	800def2 <__libc_init_array+0x2e>
 800dee6:	bd70      	pop	{r4, r5, r6, pc}
 800dee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800deec:	4798      	blx	r3
 800deee:	3601      	adds	r6, #1
 800def0:	e7ee      	b.n	800ded0 <__libc_init_array+0xc>
 800def2:	f855 3b04 	ldr.w	r3, [r5], #4
 800def6:	4798      	blx	r3
 800def8:	3601      	adds	r6, #1
 800defa:	e7f2      	b.n	800dee2 <__libc_init_array+0x1e>
 800defc:	0800f268 	.word	0x0800f268
 800df00:	0800f268 	.word	0x0800f268
 800df04:	0800f268 	.word	0x0800f268
 800df08:	0800f26c 	.word	0x0800f26c

0800df0c <__retarget_lock_acquire_recursive>:
 800df0c:	4770      	bx	lr

0800df0e <__retarget_lock_release_recursive>:
 800df0e:	4770      	bx	lr

0800df10 <memcpy>:
 800df10:	440a      	add	r2, r1
 800df12:	4291      	cmp	r1, r2
 800df14:	f100 33ff 	add.w	r3, r0, #4294967295
 800df18:	d100      	bne.n	800df1c <memcpy+0xc>
 800df1a:	4770      	bx	lr
 800df1c:	b510      	push	{r4, lr}
 800df1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df26:	4291      	cmp	r1, r2
 800df28:	d1f9      	bne.n	800df1e <memcpy+0xe>
 800df2a:	bd10      	pop	{r4, pc}

0800df2c <_free_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	4605      	mov	r5, r0
 800df30:	2900      	cmp	r1, #0
 800df32:	d041      	beq.n	800dfb8 <_free_r+0x8c>
 800df34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df38:	1f0c      	subs	r4, r1, #4
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	bfb8      	it	lt
 800df3e:	18e4      	addlt	r4, r4, r3
 800df40:	f000 f8e0 	bl	800e104 <__malloc_lock>
 800df44:	4a1d      	ldr	r2, [pc, #116]	@ (800dfbc <_free_r+0x90>)
 800df46:	6813      	ldr	r3, [r2, #0]
 800df48:	b933      	cbnz	r3, 800df58 <_free_r+0x2c>
 800df4a:	6063      	str	r3, [r4, #4]
 800df4c:	6014      	str	r4, [r2, #0]
 800df4e:	4628      	mov	r0, r5
 800df50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df54:	f000 b8dc 	b.w	800e110 <__malloc_unlock>
 800df58:	42a3      	cmp	r3, r4
 800df5a:	d908      	bls.n	800df6e <_free_r+0x42>
 800df5c:	6820      	ldr	r0, [r4, #0]
 800df5e:	1821      	adds	r1, r4, r0
 800df60:	428b      	cmp	r3, r1
 800df62:	bf01      	itttt	eq
 800df64:	6819      	ldreq	r1, [r3, #0]
 800df66:	685b      	ldreq	r3, [r3, #4]
 800df68:	1809      	addeq	r1, r1, r0
 800df6a:	6021      	streq	r1, [r4, #0]
 800df6c:	e7ed      	b.n	800df4a <_free_r+0x1e>
 800df6e:	461a      	mov	r2, r3
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	b10b      	cbz	r3, 800df78 <_free_r+0x4c>
 800df74:	42a3      	cmp	r3, r4
 800df76:	d9fa      	bls.n	800df6e <_free_r+0x42>
 800df78:	6811      	ldr	r1, [r2, #0]
 800df7a:	1850      	adds	r0, r2, r1
 800df7c:	42a0      	cmp	r0, r4
 800df7e:	d10b      	bne.n	800df98 <_free_r+0x6c>
 800df80:	6820      	ldr	r0, [r4, #0]
 800df82:	4401      	add	r1, r0
 800df84:	1850      	adds	r0, r2, r1
 800df86:	4283      	cmp	r3, r0
 800df88:	6011      	str	r1, [r2, #0]
 800df8a:	d1e0      	bne.n	800df4e <_free_r+0x22>
 800df8c:	6818      	ldr	r0, [r3, #0]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	6053      	str	r3, [r2, #4]
 800df92:	4408      	add	r0, r1
 800df94:	6010      	str	r0, [r2, #0]
 800df96:	e7da      	b.n	800df4e <_free_r+0x22>
 800df98:	d902      	bls.n	800dfa0 <_free_r+0x74>
 800df9a:	230c      	movs	r3, #12
 800df9c:	602b      	str	r3, [r5, #0]
 800df9e:	e7d6      	b.n	800df4e <_free_r+0x22>
 800dfa0:	6820      	ldr	r0, [r4, #0]
 800dfa2:	1821      	adds	r1, r4, r0
 800dfa4:	428b      	cmp	r3, r1
 800dfa6:	bf04      	itt	eq
 800dfa8:	6819      	ldreq	r1, [r3, #0]
 800dfaa:	685b      	ldreq	r3, [r3, #4]
 800dfac:	6063      	str	r3, [r4, #4]
 800dfae:	bf04      	itt	eq
 800dfb0:	1809      	addeq	r1, r1, r0
 800dfb2:	6021      	streq	r1, [r4, #0]
 800dfb4:	6054      	str	r4, [r2, #4]
 800dfb6:	e7ca      	b.n	800df4e <_free_r+0x22>
 800dfb8:	bd38      	pop	{r3, r4, r5, pc}
 800dfba:	bf00      	nop
 800dfbc:	20001b58 	.word	0x20001b58

0800dfc0 <sbrk_aligned>:
 800dfc0:	b570      	push	{r4, r5, r6, lr}
 800dfc2:	4e0f      	ldr	r6, [pc, #60]	@ (800e000 <sbrk_aligned+0x40>)
 800dfc4:	460c      	mov	r4, r1
 800dfc6:	6831      	ldr	r1, [r6, #0]
 800dfc8:	4605      	mov	r5, r0
 800dfca:	b911      	cbnz	r1, 800dfd2 <sbrk_aligned+0x12>
 800dfcc:	f000 fb8a 	bl	800e6e4 <_sbrk_r>
 800dfd0:	6030      	str	r0, [r6, #0]
 800dfd2:	4621      	mov	r1, r4
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f000 fb85 	bl	800e6e4 <_sbrk_r>
 800dfda:	1c43      	adds	r3, r0, #1
 800dfdc:	d103      	bne.n	800dfe6 <sbrk_aligned+0x26>
 800dfde:	f04f 34ff 	mov.w	r4, #4294967295
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	bd70      	pop	{r4, r5, r6, pc}
 800dfe6:	1cc4      	adds	r4, r0, #3
 800dfe8:	f024 0403 	bic.w	r4, r4, #3
 800dfec:	42a0      	cmp	r0, r4
 800dfee:	d0f8      	beq.n	800dfe2 <sbrk_aligned+0x22>
 800dff0:	1a21      	subs	r1, r4, r0
 800dff2:	4628      	mov	r0, r5
 800dff4:	f000 fb76 	bl	800e6e4 <_sbrk_r>
 800dff8:	3001      	adds	r0, #1
 800dffa:	d1f2      	bne.n	800dfe2 <sbrk_aligned+0x22>
 800dffc:	e7ef      	b.n	800dfde <sbrk_aligned+0x1e>
 800dffe:	bf00      	nop
 800e000:	20001b54 	.word	0x20001b54

0800e004 <_malloc_r>:
 800e004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e008:	1ccd      	adds	r5, r1, #3
 800e00a:	f025 0503 	bic.w	r5, r5, #3
 800e00e:	3508      	adds	r5, #8
 800e010:	2d0c      	cmp	r5, #12
 800e012:	bf38      	it	cc
 800e014:	250c      	movcc	r5, #12
 800e016:	2d00      	cmp	r5, #0
 800e018:	4606      	mov	r6, r0
 800e01a:	db01      	blt.n	800e020 <_malloc_r+0x1c>
 800e01c:	42a9      	cmp	r1, r5
 800e01e:	d904      	bls.n	800e02a <_malloc_r+0x26>
 800e020:	230c      	movs	r3, #12
 800e022:	6033      	str	r3, [r6, #0]
 800e024:	2000      	movs	r0, #0
 800e026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e02a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e100 <_malloc_r+0xfc>
 800e02e:	f000 f869 	bl	800e104 <__malloc_lock>
 800e032:	f8d8 3000 	ldr.w	r3, [r8]
 800e036:	461c      	mov	r4, r3
 800e038:	bb44      	cbnz	r4, 800e08c <_malloc_r+0x88>
 800e03a:	4629      	mov	r1, r5
 800e03c:	4630      	mov	r0, r6
 800e03e:	f7ff ffbf 	bl	800dfc0 <sbrk_aligned>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	4604      	mov	r4, r0
 800e046:	d158      	bne.n	800e0fa <_malloc_r+0xf6>
 800e048:	f8d8 4000 	ldr.w	r4, [r8]
 800e04c:	4627      	mov	r7, r4
 800e04e:	2f00      	cmp	r7, #0
 800e050:	d143      	bne.n	800e0da <_malloc_r+0xd6>
 800e052:	2c00      	cmp	r4, #0
 800e054:	d04b      	beq.n	800e0ee <_malloc_r+0xea>
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	4639      	mov	r1, r7
 800e05a:	4630      	mov	r0, r6
 800e05c:	eb04 0903 	add.w	r9, r4, r3
 800e060:	f000 fb40 	bl	800e6e4 <_sbrk_r>
 800e064:	4581      	cmp	r9, r0
 800e066:	d142      	bne.n	800e0ee <_malloc_r+0xea>
 800e068:	6821      	ldr	r1, [r4, #0]
 800e06a:	1a6d      	subs	r5, r5, r1
 800e06c:	4629      	mov	r1, r5
 800e06e:	4630      	mov	r0, r6
 800e070:	f7ff ffa6 	bl	800dfc0 <sbrk_aligned>
 800e074:	3001      	adds	r0, #1
 800e076:	d03a      	beq.n	800e0ee <_malloc_r+0xea>
 800e078:	6823      	ldr	r3, [r4, #0]
 800e07a:	442b      	add	r3, r5
 800e07c:	6023      	str	r3, [r4, #0]
 800e07e:	f8d8 3000 	ldr.w	r3, [r8]
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	bb62      	cbnz	r2, 800e0e0 <_malloc_r+0xdc>
 800e086:	f8c8 7000 	str.w	r7, [r8]
 800e08a:	e00f      	b.n	800e0ac <_malloc_r+0xa8>
 800e08c:	6822      	ldr	r2, [r4, #0]
 800e08e:	1b52      	subs	r2, r2, r5
 800e090:	d420      	bmi.n	800e0d4 <_malloc_r+0xd0>
 800e092:	2a0b      	cmp	r2, #11
 800e094:	d917      	bls.n	800e0c6 <_malloc_r+0xc2>
 800e096:	1961      	adds	r1, r4, r5
 800e098:	42a3      	cmp	r3, r4
 800e09a:	6025      	str	r5, [r4, #0]
 800e09c:	bf18      	it	ne
 800e09e:	6059      	strne	r1, [r3, #4]
 800e0a0:	6863      	ldr	r3, [r4, #4]
 800e0a2:	bf08      	it	eq
 800e0a4:	f8c8 1000 	streq.w	r1, [r8]
 800e0a8:	5162      	str	r2, [r4, r5]
 800e0aa:	604b      	str	r3, [r1, #4]
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f000 f82f 	bl	800e110 <__malloc_unlock>
 800e0b2:	f104 000b 	add.w	r0, r4, #11
 800e0b6:	1d23      	adds	r3, r4, #4
 800e0b8:	f020 0007 	bic.w	r0, r0, #7
 800e0bc:	1ac2      	subs	r2, r0, r3
 800e0be:	bf1c      	itt	ne
 800e0c0:	1a1b      	subne	r3, r3, r0
 800e0c2:	50a3      	strne	r3, [r4, r2]
 800e0c4:	e7af      	b.n	800e026 <_malloc_r+0x22>
 800e0c6:	6862      	ldr	r2, [r4, #4]
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	bf0c      	ite	eq
 800e0cc:	f8c8 2000 	streq.w	r2, [r8]
 800e0d0:	605a      	strne	r2, [r3, #4]
 800e0d2:	e7eb      	b.n	800e0ac <_malloc_r+0xa8>
 800e0d4:	4623      	mov	r3, r4
 800e0d6:	6864      	ldr	r4, [r4, #4]
 800e0d8:	e7ae      	b.n	800e038 <_malloc_r+0x34>
 800e0da:	463c      	mov	r4, r7
 800e0dc:	687f      	ldr	r7, [r7, #4]
 800e0de:	e7b6      	b.n	800e04e <_malloc_r+0x4a>
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d1fb      	bne.n	800e0e0 <_malloc_r+0xdc>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	6053      	str	r3, [r2, #4]
 800e0ec:	e7de      	b.n	800e0ac <_malloc_r+0xa8>
 800e0ee:	230c      	movs	r3, #12
 800e0f0:	6033      	str	r3, [r6, #0]
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f000 f80c 	bl	800e110 <__malloc_unlock>
 800e0f8:	e794      	b.n	800e024 <_malloc_r+0x20>
 800e0fa:	6005      	str	r5, [r0, #0]
 800e0fc:	e7d6      	b.n	800e0ac <_malloc_r+0xa8>
 800e0fe:	bf00      	nop
 800e100:	20001b58 	.word	0x20001b58

0800e104 <__malloc_lock>:
 800e104:	4801      	ldr	r0, [pc, #4]	@ (800e10c <__malloc_lock+0x8>)
 800e106:	f7ff bf01 	b.w	800df0c <__retarget_lock_acquire_recursive>
 800e10a:	bf00      	nop
 800e10c:	20001b50 	.word	0x20001b50

0800e110 <__malloc_unlock>:
 800e110:	4801      	ldr	r0, [pc, #4]	@ (800e118 <__malloc_unlock+0x8>)
 800e112:	f7ff befc 	b.w	800df0e <__retarget_lock_release_recursive>
 800e116:	bf00      	nop
 800e118:	20001b50 	.word	0x20001b50

0800e11c <__ssputs_r>:
 800e11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e120:	688e      	ldr	r6, [r1, #8]
 800e122:	461f      	mov	r7, r3
 800e124:	42be      	cmp	r6, r7
 800e126:	680b      	ldr	r3, [r1, #0]
 800e128:	4682      	mov	sl, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4690      	mov	r8, r2
 800e12e:	d82d      	bhi.n	800e18c <__ssputs_r+0x70>
 800e130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e138:	d026      	beq.n	800e188 <__ssputs_r+0x6c>
 800e13a:	6965      	ldr	r5, [r4, #20]
 800e13c:	6909      	ldr	r1, [r1, #16]
 800e13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e142:	eba3 0901 	sub.w	r9, r3, r1
 800e146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e14a:	1c7b      	adds	r3, r7, #1
 800e14c:	444b      	add	r3, r9
 800e14e:	106d      	asrs	r5, r5, #1
 800e150:	429d      	cmp	r5, r3
 800e152:	bf38      	it	cc
 800e154:	461d      	movcc	r5, r3
 800e156:	0553      	lsls	r3, r2, #21
 800e158:	d527      	bpl.n	800e1aa <__ssputs_r+0x8e>
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7ff ff52 	bl	800e004 <_malloc_r>
 800e160:	4606      	mov	r6, r0
 800e162:	b360      	cbz	r0, 800e1be <__ssputs_r+0xa2>
 800e164:	6921      	ldr	r1, [r4, #16]
 800e166:	464a      	mov	r2, r9
 800e168:	f7ff fed2 	bl	800df10 <memcpy>
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	6126      	str	r6, [r4, #16]
 800e17a:	6165      	str	r5, [r4, #20]
 800e17c:	444e      	add	r6, r9
 800e17e:	eba5 0509 	sub.w	r5, r5, r9
 800e182:	6026      	str	r6, [r4, #0]
 800e184:	60a5      	str	r5, [r4, #8]
 800e186:	463e      	mov	r6, r7
 800e188:	42be      	cmp	r6, r7
 800e18a:	d900      	bls.n	800e18e <__ssputs_r+0x72>
 800e18c:	463e      	mov	r6, r7
 800e18e:	6820      	ldr	r0, [r4, #0]
 800e190:	4632      	mov	r2, r6
 800e192:	4641      	mov	r1, r8
 800e194:	f7ff fe6e 	bl	800de74 <memmove>
 800e198:	68a3      	ldr	r3, [r4, #8]
 800e19a:	1b9b      	subs	r3, r3, r6
 800e19c:	60a3      	str	r3, [r4, #8]
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	4433      	add	r3, r6
 800e1a2:	6023      	str	r3, [r4, #0]
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	f000 faaa 	bl	800e704 <_realloc_r>
 800e1b0:	4606      	mov	r6, r0
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d1e0      	bne.n	800e178 <__ssputs_r+0x5c>
 800e1b6:	6921      	ldr	r1, [r4, #16]
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	f7ff feb7 	bl	800df2c <_free_r>
 800e1be:	230c      	movs	r3, #12
 800e1c0:	f8ca 3000 	str.w	r3, [sl]
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ca:	81a3      	strh	r3, [r4, #12]
 800e1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d0:	e7e9      	b.n	800e1a6 <__ssputs_r+0x8a>
	...

0800e1d4 <_svfiprintf_r>:
 800e1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d8:	4698      	mov	r8, r3
 800e1da:	898b      	ldrh	r3, [r1, #12]
 800e1dc:	061b      	lsls	r3, r3, #24
 800e1de:	b09d      	sub	sp, #116	@ 0x74
 800e1e0:	4607      	mov	r7, r0
 800e1e2:	460d      	mov	r5, r1
 800e1e4:	4614      	mov	r4, r2
 800e1e6:	d510      	bpl.n	800e20a <_svfiprintf_r+0x36>
 800e1e8:	690b      	ldr	r3, [r1, #16]
 800e1ea:	b973      	cbnz	r3, 800e20a <_svfiprintf_r+0x36>
 800e1ec:	2140      	movs	r1, #64	@ 0x40
 800e1ee:	f7ff ff09 	bl	800e004 <_malloc_r>
 800e1f2:	6028      	str	r0, [r5, #0]
 800e1f4:	6128      	str	r0, [r5, #16]
 800e1f6:	b930      	cbnz	r0, 800e206 <_svfiprintf_r+0x32>
 800e1f8:	230c      	movs	r3, #12
 800e1fa:	603b      	str	r3, [r7, #0]
 800e1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e200:	b01d      	add	sp, #116	@ 0x74
 800e202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e206:	2340      	movs	r3, #64	@ 0x40
 800e208:	616b      	str	r3, [r5, #20]
 800e20a:	2300      	movs	r3, #0
 800e20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e20e:	2320      	movs	r3, #32
 800e210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e214:	f8cd 800c 	str.w	r8, [sp, #12]
 800e218:	2330      	movs	r3, #48	@ 0x30
 800e21a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e3b8 <_svfiprintf_r+0x1e4>
 800e21e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e222:	f04f 0901 	mov.w	r9, #1
 800e226:	4623      	mov	r3, r4
 800e228:	469a      	mov	sl, r3
 800e22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e22e:	b10a      	cbz	r2, 800e234 <_svfiprintf_r+0x60>
 800e230:	2a25      	cmp	r2, #37	@ 0x25
 800e232:	d1f9      	bne.n	800e228 <_svfiprintf_r+0x54>
 800e234:	ebba 0b04 	subs.w	fp, sl, r4
 800e238:	d00b      	beq.n	800e252 <_svfiprintf_r+0x7e>
 800e23a:	465b      	mov	r3, fp
 800e23c:	4622      	mov	r2, r4
 800e23e:	4629      	mov	r1, r5
 800e240:	4638      	mov	r0, r7
 800e242:	f7ff ff6b 	bl	800e11c <__ssputs_r>
 800e246:	3001      	adds	r0, #1
 800e248:	f000 80a7 	beq.w	800e39a <_svfiprintf_r+0x1c6>
 800e24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e24e:	445a      	add	r2, fp
 800e250:	9209      	str	r2, [sp, #36]	@ 0x24
 800e252:	f89a 3000 	ldrb.w	r3, [sl]
 800e256:	2b00      	cmp	r3, #0
 800e258:	f000 809f 	beq.w	800e39a <_svfiprintf_r+0x1c6>
 800e25c:	2300      	movs	r3, #0
 800e25e:	f04f 32ff 	mov.w	r2, #4294967295
 800e262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e266:	f10a 0a01 	add.w	sl, sl, #1
 800e26a:	9304      	str	r3, [sp, #16]
 800e26c:	9307      	str	r3, [sp, #28]
 800e26e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e272:	931a      	str	r3, [sp, #104]	@ 0x68
 800e274:	4654      	mov	r4, sl
 800e276:	2205      	movs	r2, #5
 800e278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e27c:	484e      	ldr	r0, [pc, #312]	@ (800e3b8 <_svfiprintf_r+0x1e4>)
 800e27e:	f7f1 ffaf 	bl	80001e0 <memchr>
 800e282:	9a04      	ldr	r2, [sp, #16]
 800e284:	b9d8      	cbnz	r0, 800e2be <_svfiprintf_r+0xea>
 800e286:	06d0      	lsls	r0, r2, #27
 800e288:	bf44      	itt	mi
 800e28a:	2320      	movmi	r3, #32
 800e28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e290:	0711      	lsls	r1, r2, #28
 800e292:	bf44      	itt	mi
 800e294:	232b      	movmi	r3, #43	@ 0x2b
 800e296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e29a:	f89a 3000 	ldrb.w	r3, [sl]
 800e29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2a0:	d015      	beq.n	800e2ce <_svfiprintf_r+0xfa>
 800e2a2:	9a07      	ldr	r2, [sp, #28]
 800e2a4:	4654      	mov	r4, sl
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	f04f 0c0a 	mov.w	ip, #10
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2b2:	3b30      	subs	r3, #48	@ 0x30
 800e2b4:	2b09      	cmp	r3, #9
 800e2b6:	d94b      	bls.n	800e350 <_svfiprintf_r+0x17c>
 800e2b8:	b1b0      	cbz	r0, 800e2e8 <_svfiprintf_r+0x114>
 800e2ba:	9207      	str	r2, [sp, #28]
 800e2bc:	e014      	b.n	800e2e8 <_svfiprintf_r+0x114>
 800e2be:	eba0 0308 	sub.w	r3, r0, r8
 800e2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	46a2      	mov	sl, r4
 800e2cc:	e7d2      	b.n	800e274 <_svfiprintf_r+0xa0>
 800e2ce:	9b03      	ldr	r3, [sp, #12]
 800e2d0:	1d19      	adds	r1, r3, #4
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	9103      	str	r1, [sp, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	bfbb      	ittet	lt
 800e2da:	425b      	neglt	r3, r3
 800e2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e2e0:	9307      	strge	r3, [sp, #28]
 800e2e2:	9307      	strlt	r3, [sp, #28]
 800e2e4:	bfb8      	it	lt
 800e2e6:	9204      	strlt	r2, [sp, #16]
 800e2e8:	7823      	ldrb	r3, [r4, #0]
 800e2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2ec:	d10a      	bne.n	800e304 <_svfiprintf_r+0x130>
 800e2ee:	7863      	ldrb	r3, [r4, #1]
 800e2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2f2:	d132      	bne.n	800e35a <_svfiprintf_r+0x186>
 800e2f4:	9b03      	ldr	r3, [sp, #12]
 800e2f6:	1d1a      	adds	r2, r3, #4
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	9203      	str	r2, [sp, #12]
 800e2fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e300:	3402      	adds	r4, #2
 800e302:	9305      	str	r3, [sp, #20]
 800e304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e3c8 <_svfiprintf_r+0x1f4>
 800e308:	7821      	ldrb	r1, [r4, #0]
 800e30a:	2203      	movs	r2, #3
 800e30c:	4650      	mov	r0, sl
 800e30e:	f7f1 ff67 	bl	80001e0 <memchr>
 800e312:	b138      	cbz	r0, 800e324 <_svfiprintf_r+0x150>
 800e314:	9b04      	ldr	r3, [sp, #16]
 800e316:	eba0 000a 	sub.w	r0, r0, sl
 800e31a:	2240      	movs	r2, #64	@ 0x40
 800e31c:	4082      	lsls	r2, r0
 800e31e:	4313      	orrs	r3, r2
 800e320:	3401      	adds	r4, #1
 800e322:	9304      	str	r3, [sp, #16]
 800e324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e328:	4824      	ldr	r0, [pc, #144]	@ (800e3bc <_svfiprintf_r+0x1e8>)
 800e32a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e32e:	2206      	movs	r2, #6
 800e330:	f7f1 ff56 	bl	80001e0 <memchr>
 800e334:	2800      	cmp	r0, #0
 800e336:	d036      	beq.n	800e3a6 <_svfiprintf_r+0x1d2>
 800e338:	4b21      	ldr	r3, [pc, #132]	@ (800e3c0 <_svfiprintf_r+0x1ec>)
 800e33a:	bb1b      	cbnz	r3, 800e384 <_svfiprintf_r+0x1b0>
 800e33c:	9b03      	ldr	r3, [sp, #12]
 800e33e:	3307      	adds	r3, #7
 800e340:	f023 0307 	bic.w	r3, r3, #7
 800e344:	3308      	adds	r3, #8
 800e346:	9303      	str	r3, [sp, #12]
 800e348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e34a:	4433      	add	r3, r6
 800e34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e34e:	e76a      	b.n	800e226 <_svfiprintf_r+0x52>
 800e350:	fb0c 3202 	mla	r2, ip, r2, r3
 800e354:	460c      	mov	r4, r1
 800e356:	2001      	movs	r0, #1
 800e358:	e7a8      	b.n	800e2ac <_svfiprintf_r+0xd8>
 800e35a:	2300      	movs	r3, #0
 800e35c:	3401      	adds	r4, #1
 800e35e:	9305      	str	r3, [sp, #20]
 800e360:	4619      	mov	r1, r3
 800e362:	f04f 0c0a 	mov.w	ip, #10
 800e366:	4620      	mov	r0, r4
 800e368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e36c:	3a30      	subs	r2, #48	@ 0x30
 800e36e:	2a09      	cmp	r2, #9
 800e370:	d903      	bls.n	800e37a <_svfiprintf_r+0x1a6>
 800e372:	2b00      	cmp	r3, #0
 800e374:	d0c6      	beq.n	800e304 <_svfiprintf_r+0x130>
 800e376:	9105      	str	r1, [sp, #20]
 800e378:	e7c4      	b.n	800e304 <_svfiprintf_r+0x130>
 800e37a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e37e:	4604      	mov	r4, r0
 800e380:	2301      	movs	r3, #1
 800e382:	e7f0      	b.n	800e366 <_svfiprintf_r+0x192>
 800e384:	ab03      	add	r3, sp, #12
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	462a      	mov	r2, r5
 800e38a:	4b0e      	ldr	r3, [pc, #56]	@ (800e3c4 <_svfiprintf_r+0x1f0>)
 800e38c:	a904      	add	r1, sp, #16
 800e38e:	4638      	mov	r0, r7
 800e390:	f3af 8000 	nop.w
 800e394:	1c42      	adds	r2, r0, #1
 800e396:	4606      	mov	r6, r0
 800e398:	d1d6      	bne.n	800e348 <_svfiprintf_r+0x174>
 800e39a:	89ab      	ldrh	r3, [r5, #12]
 800e39c:	065b      	lsls	r3, r3, #25
 800e39e:	f53f af2d 	bmi.w	800e1fc <_svfiprintf_r+0x28>
 800e3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3a4:	e72c      	b.n	800e200 <_svfiprintf_r+0x2c>
 800e3a6:	ab03      	add	r3, sp, #12
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	462a      	mov	r2, r5
 800e3ac:	4b05      	ldr	r3, [pc, #20]	@ (800e3c4 <_svfiprintf_r+0x1f0>)
 800e3ae:	a904      	add	r1, sp, #16
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f000 f879 	bl	800e4a8 <_printf_i>
 800e3b6:	e7ed      	b.n	800e394 <_svfiprintf_r+0x1c0>
 800e3b8:	0800f22c 	.word	0x0800f22c
 800e3bc:	0800f236 	.word	0x0800f236
 800e3c0:	00000000 	.word	0x00000000
 800e3c4:	0800e11d 	.word	0x0800e11d
 800e3c8:	0800f232 	.word	0x0800f232

0800e3cc <_printf_common>:
 800e3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	4616      	mov	r6, r2
 800e3d2:	4698      	mov	r8, r3
 800e3d4:	688a      	ldr	r2, [r1, #8]
 800e3d6:	690b      	ldr	r3, [r1, #16]
 800e3d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	bfb8      	it	lt
 800e3e0:	4613      	movlt	r3, r2
 800e3e2:	6033      	str	r3, [r6, #0]
 800e3e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	b10a      	cbz	r2, 800e3f2 <_printf_common+0x26>
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	6033      	str	r3, [r6, #0]
 800e3f2:	6823      	ldr	r3, [r4, #0]
 800e3f4:	0699      	lsls	r1, r3, #26
 800e3f6:	bf42      	ittt	mi
 800e3f8:	6833      	ldrmi	r3, [r6, #0]
 800e3fa:	3302      	addmi	r3, #2
 800e3fc:	6033      	strmi	r3, [r6, #0]
 800e3fe:	6825      	ldr	r5, [r4, #0]
 800e400:	f015 0506 	ands.w	r5, r5, #6
 800e404:	d106      	bne.n	800e414 <_printf_common+0x48>
 800e406:	f104 0a19 	add.w	sl, r4, #25
 800e40a:	68e3      	ldr	r3, [r4, #12]
 800e40c:	6832      	ldr	r2, [r6, #0]
 800e40e:	1a9b      	subs	r3, r3, r2
 800e410:	42ab      	cmp	r3, r5
 800e412:	dc26      	bgt.n	800e462 <_printf_common+0x96>
 800e414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e418:	6822      	ldr	r2, [r4, #0]
 800e41a:	3b00      	subs	r3, #0
 800e41c:	bf18      	it	ne
 800e41e:	2301      	movne	r3, #1
 800e420:	0692      	lsls	r2, r2, #26
 800e422:	d42b      	bmi.n	800e47c <_printf_common+0xb0>
 800e424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e428:	4641      	mov	r1, r8
 800e42a:	4638      	mov	r0, r7
 800e42c:	47c8      	blx	r9
 800e42e:	3001      	adds	r0, #1
 800e430:	d01e      	beq.n	800e470 <_printf_common+0xa4>
 800e432:	6823      	ldr	r3, [r4, #0]
 800e434:	6922      	ldr	r2, [r4, #16]
 800e436:	f003 0306 	and.w	r3, r3, #6
 800e43a:	2b04      	cmp	r3, #4
 800e43c:	bf02      	ittt	eq
 800e43e:	68e5      	ldreq	r5, [r4, #12]
 800e440:	6833      	ldreq	r3, [r6, #0]
 800e442:	1aed      	subeq	r5, r5, r3
 800e444:	68a3      	ldr	r3, [r4, #8]
 800e446:	bf0c      	ite	eq
 800e448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e44c:	2500      	movne	r5, #0
 800e44e:	4293      	cmp	r3, r2
 800e450:	bfc4      	itt	gt
 800e452:	1a9b      	subgt	r3, r3, r2
 800e454:	18ed      	addgt	r5, r5, r3
 800e456:	2600      	movs	r6, #0
 800e458:	341a      	adds	r4, #26
 800e45a:	42b5      	cmp	r5, r6
 800e45c:	d11a      	bne.n	800e494 <_printf_common+0xc8>
 800e45e:	2000      	movs	r0, #0
 800e460:	e008      	b.n	800e474 <_printf_common+0xa8>
 800e462:	2301      	movs	r3, #1
 800e464:	4652      	mov	r2, sl
 800e466:	4641      	mov	r1, r8
 800e468:	4638      	mov	r0, r7
 800e46a:	47c8      	blx	r9
 800e46c:	3001      	adds	r0, #1
 800e46e:	d103      	bne.n	800e478 <_printf_common+0xac>
 800e470:	f04f 30ff 	mov.w	r0, #4294967295
 800e474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e478:	3501      	adds	r5, #1
 800e47a:	e7c6      	b.n	800e40a <_printf_common+0x3e>
 800e47c:	18e1      	adds	r1, r4, r3
 800e47e:	1c5a      	adds	r2, r3, #1
 800e480:	2030      	movs	r0, #48	@ 0x30
 800e482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e486:	4422      	add	r2, r4
 800e488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e48c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e490:	3302      	adds	r3, #2
 800e492:	e7c7      	b.n	800e424 <_printf_common+0x58>
 800e494:	2301      	movs	r3, #1
 800e496:	4622      	mov	r2, r4
 800e498:	4641      	mov	r1, r8
 800e49a:	4638      	mov	r0, r7
 800e49c:	47c8      	blx	r9
 800e49e:	3001      	adds	r0, #1
 800e4a0:	d0e6      	beq.n	800e470 <_printf_common+0xa4>
 800e4a2:	3601      	adds	r6, #1
 800e4a4:	e7d9      	b.n	800e45a <_printf_common+0x8e>
	...

0800e4a8 <_printf_i>:
 800e4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ac:	7e0f      	ldrb	r7, [r1, #24]
 800e4ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e4b0:	2f78      	cmp	r7, #120	@ 0x78
 800e4b2:	4691      	mov	r9, r2
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	460c      	mov	r4, r1
 800e4b8:	469a      	mov	sl, r3
 800e4ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e4be:	d807      	bhi.n	800e4d0 <_printf_i+0x28>
 800e4c0:	2f62      	cmp	r7, #98	@ 0x62
 800e4c2:	d80a      	bhi.n	800e4da <_printf_i+0x32>
 800e4c4:	2f00      	cmp	r7, #0
 800e4c6:	f000 80d1 	beq.w	800e66c <_printf_i+0x1c4>
 800e4ca:	2f58      	cmp	r7, #88	@ 0x58
 800e4cc:	f000 80b8 	beq.w	800e640 <_printf_i+0x198>
 800e4d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e4d8:	e03a      	b.n	800e550 <_printf_i+0xa8>
 800e4da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e4de:	2b15      	cmp	r3, #21
 800e4e0:	d8f6      	bhi.n	800e4d0 <_printf_i+0x28>
 800e4e2:	a101      	add	r1, pc, #4	@ (adr r1, 800e4e8 <_printf_i+0x40>)
 800e4e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4e8:	0800e541 	.word	0x0800e541
 800e4ec:	0800e555 	.word	0x0800e555
 800e4f0:	0800e4d1 	.word	0x0800e4d1
 800e4f4:	0800e4d1 	.word	0x0800e4d1
 800e4f8:	0800e4d1 	.word	0x0800e4d1
 800e4fc:	0800e4d1 	.word	0x0800e4d1
 800e500:	0800e555 	.word	0x0800e555
 800e504:	0800e4d1 	.word	0x0800e4d1
 800e508:	0800e4d1 	.word	0x0800e4d1
 800e50c:	0800e4d1 	.word	0x0800e4d1
 800e510:	0800e4d1 	.word	0x0800e4d1
 800e514:	0800e653 	.word	0x0800e653
 800e518:	0800e57f 	.word	0x0800e57f
 800e51c:	0800e60d 	.word	0x0800e60d
 800e520:	0800e4d1 	.word	0x0800e4d1
 800e524:	0800e4d1 	.word	0x0800e4d1
 800e528:	0800e675 	.word	0x0800e675
 800e52c:	0800e4d1 	.word	0x0800e4d1
 800e530:	0800e57f 	.word	0x0800e57f
 800e534:	0800e4d1 	.word	0x0800e4d1
 800e538:	0800e4d1 	.word	0x0800e4d1
 800e53c:	0800e615 	.word	0x0800e615
 800e540:	6833      	ldr	r3, [r6, #0]
 800e542:	1d1a      	adds	r2, r3, #4
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6032      	str	r2, [r6, #0]
 800e548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e54c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e550:	2301      	movs	r3, #1
 800e552:	e09c      	b.n	800e68e <_printf_i+0x1e6>
 800e554:	6833      	ldr	r3, [r6, #0]
 800e556:	6820      	ldr	r0, [r4, #0]
 800e558:	1d19      	adds	r1, r3, #4
 800e55a:	6031      	str	r1, [r6, #0]
 800e55c:	0606      	lsls	r6, r0, #24
 800e55e:	d501      	bpl.n	800e564 <_printf_i+0xbc>
 800e560:	681d      	ldr	r5, [r3, #0]
 800e562:	e003      	b.n	800e56c <_printf_i+0xc4>
 800e564:	0645      	lsls	r5, r0, #25
 800e566:	d5fb      	bpl.n	800e560 <_printf_i+0xb8>
 800e568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e56c:	2d00      	cmp	r5, #0
 800e56e:	da03      	bge.n	800e578 <_printf_i+0xd0>
 800e570:	232d      	movs	r3, #45	@ 0x2d
 800e572:	426d      	negs	r5, r5
 800e574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e578:	4858      	ldr	r0, [pc, #352]	@ (800e6dc <_printf_i+0x234>)
 800e57a:	230a      	movs	r3, #10
 800e57c:	e011      	b.n	800e5a2 <_printf_i+0xfa>
 800e57e:	6821      	ldr	r1, [r4, #0]
 800e580:	6833      	ldr	r3, [r6, #0]
 800e582:	0608      	lsls	r0, r1, #24
 800e584:	f853 5b04 	ldr.w	r5, [r3], #4
 800e588:	d402      	bmi.n	800e590 <_printf_i+0xe8>
 800e58a:	0649      	lsls	r1, r1, #25
 800e58c:	bf48      	it	mi
 800e58e:	b2ad      	uxthmi	r5, r5
 800e590:	2f6f      	cmp	r7, #111	@ 0x6f
 800e592:	4852      	ldr	r0, [pc, #328]	@ (800e6dc <_printf_i+0x234>)
 800e594:	6033      	str	r3, [r6, #0]
 800e596:	bf14      	ite	ne
 800e598:	230a      	movne	r3, #10
 800e59a:	2308      	moveq	r3, #8
 800e59c:	2100      	movs	r1, #0
 800e59e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e5a2:	6866      	ldr	r6, [r4, #4]
 800e5a4:	60a6      	str	r6, [r4, #8]
 800e5a6:	2e00      	cmp	r6, #0
 800e5a8:	db05      	blt.n	800e5b6 <_printf_i+0x10e>
 800e5aa:	6821      	ldr	r1, [r4, #0]
 800e5ac:	432e      	orrs	r6, r5
 800e5ae:	f021 0104 	bic.w	r1, r1, #4
 800e5b2:	6021      	str	r1, [r4, #0]
 800e5b4:	d04b      	beq.n	800e64e <_printf_i+0x1a6>
 800e5b6:	4616      	mov	r6, r2
 800e5b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5bc:	fb03 5711 	mls	r7, r3, r1, r5
 800e5c0:	5dc7      	ldrb	r7, [r0, r7]
 800e5c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e5c6:	462f      	mov	r7, r5
 800e5c8:	42bb      	cmp	r3, r7
 800e5ca:	460d      	mov	r5, r1
 800e5cc:	d9f4      	bls.n	800e5b8 <_printf_i+0x110>
 800e5ce:	2b08      	cmp	r3, #8
 800e5d0:	d10b      	bne.n	800e5ea <_printf_i+0x142>
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	07df      	lsls	r7, r3, #31
 800e5d6:	d508      	bpl.n	800e5ea <_printf_i+0x142>
 800e5d8:	6923      	ldr	r3, [r4, #16]
 800e5da:	6861      	ldr	r1, [r4, #4]
 800e5dc:	4299      	cmp	r1, r3
 800e5de:	bfde      	ittt	le
 800e5e0:	2330      	movle	r3, #48	@ 0x30
 800e5e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e5e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e5ea:	1b92      	subs	r2, r2, r6
 800e5ec:	6122      	str	r2, [r4, #16]
 800e5ee:	f8cd a000 	str.w	sl, [sp]
 800e5f2:	464b      	mov	r3, r9
 800e5f4:	aa03      	add	r2, sp, #12
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	4640      	mov	r0, r8
 800e5fa:	f7ff fee7 	bl	800e3cc <_printf_common>
 800e5fe:	3001      	adds	r0, #1
 800e600:	d14a      	bne.n	800e698 <_printf_i+0x1f0>
 800e602:	f04f 30ff 	mov.w	r0, #4294967295
 800e606:	b004      	add	sp, #16
 800e608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e60c:	6823      	ldr	r3, [r4, #0]
 800e60e:	f043 0320 	orr.w	r3, r3, #32
 800e612:	6023      	str	r3, [r4, #0]
 800e614:	4832      	ldr	r0, [pc, #200]	@ (800e6e0 <_printf_i+0x238>)
 800e616:	2778      	movs	r7, #120	@ 0x78
 800e618:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e61c:	6823      	ldr	r3, [r4, #0]
 800e61e:	6831      	ldr	r1, [r6, #0]
 800e620:	061f      	lsls	r7, r3, #24
 800e622:	f851 5b04 	ldr.w	r5, [r1], #4
 800e626:	d402      	bmi.n	800e62e <_printf_i+0x186>
 800e628:	065f      	lsls	r7, r3, #25
 800e62a:	bf48      	it	mi
 800e62c:	b2ad      	uxthmi	r5, r5
 800e62e:	6031      	str	r1, [r6, #0]
 800e630:	07d9      	lsls	r1, r3, #31
 800e632:	bf44      	itt	mi
 800e634:	f043 0320 	orrmi.w	r3, r3, #32
 800e638:	6023      	strmi	r3, [r4, #0]
 800e63a:	b11d      	cbz	r5, 800e644 <_printf_i+0x19c>
 800e63c:	2310      	movs	r3, #16
 800e63e:	e7ad      	b.n	800e59c <_printf_i+0xf4>
 800e640:	4826      	ldr	r0, [pc, #152]	@ (800e6dc <_printf_i+0x234>)
 800e642:	e7e9      	b.n	800e618 <_printf_i+0x170>
 800e644:	6823      	ldr	r3, [r4, #0]
 800e646:	f023 0320 	bic.w	r3, r3, #32
 800e64a:	6023      	str	r3, [r4, #0]
 800e64c:	e7f6      	b.n	800e63c <_printf_i+0x194>
 800e64e:	4616      	mov	r6, r2
 800e650:	e7bd      	b.n	800e5ce <_printf_i+0x126>
 800e652:	6833      	ldr	r3, [r6, #0]
 800e654:	6825      	ldr	r5, [r4, #0]
 800e656:	6961      	ldr	r1, [r4, #20]
 800e658:	1d18      	adds	r0, r3, #4
 800e65a:	6030      	str	r0, [r6, #0]
 800e65c:	062e      	lsls	r6, r5, #24
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	d501      	bpl.n	800e666 <_printf_i+0x1be>
 800e662:	6019      	str	r1, [r3, #0]
 800e664:	e002      	b.n	800e66c <_printf_i+0x1c4>
 800e666:	0668      	lsls	r0, r5, #25
 800e668:	d5fb      	bpl.n	800e662 <_printf_i+0x1ba>
 800e66a:	8019      	strh	r1, [r3, #0]
 800e66c:	2300      	movs	r3, #0
 800e66e:	6123      	str	r3, [r4, #16]
 800e670:	4616      	mov	r6, r2
 800e672:	e7bc      	b.n	800e5ee <_printf_i+0x146>
 800e674:	6833      	ldr	r3, [r6, #0]
 800e676:	1d1a      	adds	r2, r3, #4
 800e678:	6032      	str	r2, [r6, #0]
 800e67a:	681e      	ldr	r6, [r3, #0]
 800e67c:	6862      	ldr	r2, [r4, #4]
 800e67e:	2100      	movs	r1, #0
 800e680:	4630      	mov	r0, r6
 800e682:	f7f1 fdad 	bl	80001e0 <memchr>
 800e686:	b108      	cbz	r0, 800e68c <_printf_i+0x1e4>
 800e688:	1b80      	subs	r0, r0, r6
 800e68a:	6060      	str	r0, [r4, #4]
 800e68c:	6863      	ldr	r3, [r4, #4]
 800e68e:	6123      	str	r3, [r4, #16]
 800e690:	2300      	movs	r3, #0
 800e692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e696:	e7aa      	b.n	800e5ee <_printf_i+0x146>
 800e698:	6923      	ldr	r3, [r4, #16]
 800e69a:	4632      	mov	r2, r6
 800e69c:	4649      	mov	r1, r9
 800e69e:	4640      	mov	r0, r8
 800e6a0:	47d0      	blx	sl
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	d0ad      	beq.n	800e602 <_printf_i+0x15a>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	079b      	lsls	r3, r3, #30
 800e6aa:	d413      	bmi.n	800e6d4 <_printf_i+0x22c>
 800e6ac:	68e0      	ldr	r0, [r4, #12]
 800e6ae:	9b03      	ldr	r3, [sp, #12]
 800e6b0:	4298      	cmp	r0, r3
 800e6b2:	bfb8      	it	lt
 800e6b4:	4618      	movlt	r0, r3
 800e6b6:	e7a6      	b.n	800e606 <_printf_i+0x15e>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	4632      	mov	r2, r6
 800e6bc:	4649      	mov	r1, r9
 800e6be:	4640      	mov	r0, r8
 800e6c0:	47d0      	blx	sl
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	d09d      	beq.n	800e602 <_printf_i+0x15a>
 800e6c6:	3501      	adds	r5, #1
 800e6c8:	68e3      	ldr	r3, [r4, #12]
 800e6ca:	9903      	ldr	r1, [sp, #12]
 800e6cc:	1a5b      	subs	r3, r3, r1
 800e6ce:	42ab      	cmp	r3, r5
 800e6d0:	dcf2      	bgt.n	800e6b8 <_printf_i+0x210>
 800e6d2:	e7eb      	b.n	800e6ac <_printf_i+0x204>
 800e6d4:	2500      	movs	r5, #0
 800e6d6:	f104 0619 	add.w	r6, r4, #25
 800e6da:	e7f5      	b.n	800e6c8 <_printf_i+0x220>
 800e6dc:	0800f23d 	.word	0x0800f23d
 800e6e0:	0800f24e 	.word	0x0800f24e

0800e6e4 <_sbrk_r>:
 800e6e4:	b538      	push	{r3, r4, r5, lr}
 800e6e6:	4d06      	ldr	r5, [pc, #24]	@ (800e700 <_sbrk_r+0x1c>)
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	4608      	mov	r0, r1
 800e6ee:	602b      	str	r3, [r5, #0]
 800e6f0:	f7f4 f8a4 	bl	800283c <_sbrk>
 800e6f4:	1c43      	adds	r3, r0, #1
 800e6f6:	d102      	bne.n	800e6fe <_sbrk_r+0x1a>
 800e6f8:	682b      	ldr	r3, [r5, #0]
 800e6fa:	b103      	cbz	r3, 800e6fe <_sbrk_r+0x1a>
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
 800e700:	20001b4c 	.word	0x20001b4c

0800e704 <_realloc_r>:
 800e704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e708:	4607      	mov	r7, r0
 800e70a:	4614      	mov	r4, r2
 800e70c:	460d      	mov	r5, r1
 800e70e:	b921      	cbnz	r1, 800e71a <_realloc_r+0x16>
 800e710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e714:	4611      	mov	r1, r2
 800e716:	f7ff bc75 	b.w	800e004 <_malloc_r>
 800e71a:	b92a      	cbnz	r2, 800e728 <_realloc_r+0x24>
 800e71c:	f7ff fc06 	bl	800df2c <_free_r>
 800e720:	4625      	mov	r5, r4
 800e722:	4628      	mov	r0, r5
 800e724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e728:	f000 f81a 	bl	800e760 <_malloc_usable_size_r>
 800e72c:	4284      	cmp	r4, r0
 800e72e:	4606      	mov	r6, r0
 800e730:	d802      	bhi.n	800e738 <_realloc_r+0x34>
 800e732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e736:	d8f4      	bhi.n	800e722 <_realloc_r+0x1e>
 800e738:	4621      	mov	r1, r4
 800e73a:	4638      	mov	r0, r7
 800e73c:	f7ff fc62 	bl	800e004 <_malloc_r>
 800e740:	4680      	mov	r8, r0
 800e742:	b908      	cbnz	r0, 800e748 <_realloc_r+0x44>
 800e744:	4645      	mov	r5, r8
 800e746:	e7ec      	b.n	800e722 <_realloc_r+0x1e>
 800e748:	42b4      	cmp	r4, r6
 800e74a:	4622      	mov	r2, r4
 800e74c:	4629      	mov	r1, r5
 800e74e:	bf28      	it	cs
 800e750:	4632      	movcs	r2, r6
 800e752:	f7ff fbdd 	bl	800df10 <memcpy>
 800e756:	4629      	mov	r1, r5
 800e758:	4638      	mov	r0, r7
 800e75a:	f7ff fbe7 	bl	800df2c <_free_r>
 800e75e:	e7f1      	b.n	800e744 <_realloc_r+0x40>

0800e760 <_malloc_usable_size_r>:
 800e760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e764:	1f18      	subs	r0, r3, #4
 800e766:	2b00      	cmp	r3, #0
 800e768:	bfbc      	itt	lt
 800e76a:	580b      	ldrlt	r3, [r1, r0]
 800e76c:	18c0      	addlt	r0, r0, r3
 800e76e:	4770      	bx	lr

0800e770 <_init>:
 800e770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e772:	bf00      	nop
 800e774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e776:	bc08      	pop	{r3}
 800e778:	469e      	mov	lr, r3
 800e77a:	4770      	bx	lr

0800e77c <_fini>:
 800e77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77e:	bf00      	nop
 800e780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e782:	bc08      	pop	{r3}
 800e784:	469e      	mov	lr, r3
 800e786:	4770      	bx	lr
