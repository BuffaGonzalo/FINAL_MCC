
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c464  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800c5fc  0800c5fc  0000d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca74  0800ca74  0000e134  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ca74  0800ca74  0000da74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca7c  0800ca7c  0000e134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca7c  0800ca7c  0000da7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca80  0800ca80  0000da80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  0800ca84  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001860  20000134  0800cbb8  0000e134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001994  0800cbb8  0000e994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2d2  00000000  00000000  0000e164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004092  00000000  00000000  00028436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0002c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001234  00000000  00000000  0002dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e1b  00000000  00000000  0002ee8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e260  00000000  00000000  00034ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f78b  00000000  00000000  00052f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b0  00000000  00000000  000f26d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f8a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000134 	.word	0x20000134
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c5e4 	.word	0x0800c5e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000138 	.word	0x20000138
 80001d4:	0800c5e4 	.word	0x0800c5e4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e00a      	b.n	8000528 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <HAL_ADC_ConvCpltCallback+0x3c>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b07      	cmp	r3, #7
 800052c:	ddf1      	ble.n	8000512 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000358 	.word	0x20000358
 8000540:	20000368 	.word	0x20000368

08000544 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    SSD1306_TxCplt = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000591 	.word	0x20000591

08000564 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d116      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000580:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b28      	cmp	r3, #40	@ 0x28
 8000588:	d107      	bne.n	800059a <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000590:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 800059a:	2208      	movs	r2, #8
 800059c:	4906      	ldr	r1, [pc, #24]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005a0:	f001 fd30 	bl	8002004 <HAL_ADC_Start_DMA>
	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010000 	.word	0x40010000
 80005b0:	20000354 	.word	0x20000354
 80005b4:	20000590 	.word	0x20000590
 80005b8:	20000358 	.word	0x20000358
 80005bc:	20000150 	.word	0x20000150

080005c0 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e018      	b.n	8000602 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	441a      	add	r2, r3
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <USBRxData+0x58>)
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <USBRxData+0x58>)
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	1c58      	adds	r0, r3, #1
 80005e0:	b2c4      	uxtb	r4, r0
 80005e2:	480d      	ldr	r0, [pc, #52]	@ (8000618 <USBRxData+0x58>)
 80005e4:	7144      	strb	r4, [r0, #5]
 80005e6:	440b      	add	r3, r1
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <USBRxData+0x58>)
 80005ee:	795a      	ldrb	r2, [r3, #5]
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <USBRxData+0x58>)
 80005f2:	799b      	ldrb	r3, [r3, #6]
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <USBRxData+0x58>)
 80005fa:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3301      	adds	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d8e2      	bhi.n	80005d0 <USBRxData+0x10>
	}

}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bc90      	pop	{r4, r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000384 	.word	0x20000384

0800061c <USBTask>:

void USBTask() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b0c2      	sub	sp, #264	@ 0x108
 8000620:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <USBTask+0x90>)
 8000624:	791a      	ldrb	r2, [r3, #4]
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <USBTask+0x90>)
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	429a      	cmp	r2, r3
 800062c:	d039      	beq.n	80006a2 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 800062e:	481f      	ldr	r0, [pc, #124]	@ (80006ac <USBTask+0x90>)
 8000630:	f001 f99e 	bl	8001970 <unerPrtcl_DecodeHeader>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 800063a:	491d      	ldr	r1, [pc, #116]	@ (80006b0 <USBTask+0x94>)
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <USBTask+0x90>)
 800063e:	f000 f839 	bl	80006b4 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000648:	e01d      	b.n	8000686 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <USBTask+0x94>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <USBTask+0x94>)
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	1c59      	adds	r1, r3, #1
 8000654:	b2c8      	uxtb	r0, r1
 8000656:	4916      	ldr	r1, [pc, #88]	@ (80006b0 <USBTask+0x94>)
 8000658:	7208      	strb	r0, [r1, #8]
 800065a:	441a      	add	r2, r3
 800065c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000660:	7811      	ldrb	r1, [r2, #0]
 8000662:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000666:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800066a:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <USBTask+0x94>)
 800066e:	7a1a      	ldrb	r2, [r3, #8]
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <USBTask+0x94>)
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	4013      	ands	r3, r2
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <USBTask+0x94>)
 800067a:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 800067c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000680:	3301      	adds	r3, #1
 8000682:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <USBTask+0x94>)
 8000688:	79db      	ldrb	r3, [r3, #7]
 800068a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800068e:	429a      	cmp	r2, r3
 8000690:	d3db      	bcc.n	800064a <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <USBTask+0x94>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	461a      	mov	r2, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f00b fb13 	bl	800bcc8 <CDC_Transmit_FS>
	}

}
 80006a2:	bf00      	nop
 80006a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000384 	.word	0x20000384
 80006b0:	20000378 	.word	0x20000378

080006b4 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7a12      	ldrb	r2, [r2, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80006cc:	d002      	beq.n	80006d4 <decodeCommand+0x20>
 80006ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80006d0:	d010      	beq.n	80006f4 <decodeCommand+0x40>
 80006d2:	e01f      	b.n	8000714 <decodeCommand+0x60>
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 80006d4:	2202      	movs	r2, #2
 80006d6:	21f0      	movs	r1, #240	@ 0xf0
 80006d8:	6838      	ldr	r0, [r7, #0]
 80006da:	f001 f827 	bl	800172c <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 80006de:	210d      	movs	r1, #13
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f001 f8d2 	bl	800188a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	4619      	mov	r1, r3
 80006ec:	6838      	ldr	r0, [r7, #0]
 80006ee:	f001 f8cc 	bl	800188a <unerPrtcl_PutByteOnTx>
		break;
 80006f2:	e025      	b.n	8000740 <decodeCommand+0x8c>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 80006f4:	220d      	movs	r2, #13
 80006f6:	21f1      	movs	r1, #241	@ 0xf1
 80006f8:	6838      	ldr	r0, [r7, #0]
 80006fa:	f001 f817 	bl	800172c <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 80006fe:	4912      	ldr	r1, [pc, #72]	@ (8000748 <decodeCommand+0x94>)
 8000700:	6838      	ldr	r0, [r7, #0]
 8000702:	f001 f8f0 	bl	80018e6 <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7a5b      	ldrb	r3, [r3, #9]
 800070a:	4619      	mov	r1, r3
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f001 f8bc 	bl	800188a <unerPrtcl_PutByteOnTx>
		break;
 8000712:	e015      	b.n	8000740 <decodeCommand+0x8c>
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7a12      	ldrb	r2, [r2, #8]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2202      	movs	r2, #2
 8000722:	4619      	mov	r1, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f001 f801 	bl	800172c <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 800072a:	21ff      	movs	r1, #255	@ 0xff
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	f001 f8ac 	bl	800188a <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	7a5b      	ldrb	r3, [r3, #9]
 8000736:	4619      	mov	r1, r3
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f001 f8a6 	bl	800188a <unerPrtcl_PutByteOnTx>
		break;
 800073e:	bf00      	nop
	}
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800ca44 	.word	0x0800ca44

0800074c <do10ms>:

void do10ms() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if(IS10MS){
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <do10ms+0x48>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d017      	beq.n	800078e <do10ms+0x42>
		IS10MS=FALSE;
 800075e:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <do10ms+0x48>)
 8000760:	7813      	ldrb	r3, [r2, #0]
 8000762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000766:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <do10ms+0x4c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <do10ms+0x4c>)
 8000770:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <do10ms+0x4c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d109      	bne.n	800078e <do10ms+0x42>
			tmo100ms = 10;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <do10ms+0x4c>)
 800077c:	220a      	movs	r2, #10
 800077e:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <do10ms+0x48>)
 8000782:	7813      	ldrb	r3, [r2, #0]
 8000784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000788:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800078a:	f000 f807 	bl	800079c <heartBeatTask>
		}
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000590 	.word	0x20000590
 8000798:	20000028 	.word	0x20000028

0800079c <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <heartBeatTask+0x44>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <heartBeatTask+0x48>)
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4013      	ands	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80007b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <heartBeatTask+0x4c>)
 80007bc:	f002 fe49 	bl	8003452 <HAL_GPIO_TogglePin>

	times++;
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <heartBeatTask+0x48>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <heartBeatTask+0x48>)
 80007ca:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <heartBeatTask+0x48>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f003 031f 	and.w	r3, r3, #31
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <heartBeatTask+0x48>)
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000592 	.word	0x20000592
 80007e8:	40020800 	.word	0x40020800

080007ec <ssd1306Data>:

void ssd1306Data() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af02      	add	r7, sp, #8
	static uint8_t init = TRUE;
	if (init) {
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <ssd1306Data+0x34>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00f      	beq.n	800081a <ssd1306Data+0x2e>
		init = FALSE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <ssd1306Data+0x34>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
		ssd1306_Fill(Black);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fbc3 	bl	8000f8c <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, chat_gpt_128x64, 128, 64, White);
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	2340      	movs	r3, #64	@ 0x40
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <ssd1306Data+0x38>)
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fcab 	bl	8001170 <ssd1306_DrawBitmap>
	}
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000002c 	.word	0x2000002c
 8000824:	0800c644 	.word	0x0800c644

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f001 fa00 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f84c 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f000 fa38 	bl	8000ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000838:	f000 f9f8 	bl	8000c2c <MX_DMA_Init>
  MX_ADC1_Init();
 800083c:	f000 f8ae 	bl	800099c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000840:	f000 f960 	bl	8000b04 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000844:	f000 f98c 	bl	8000b60 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000848:	f00b f924 	bl	800ba94 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 800084c:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <main+0x78>)
 800084e:	f00b fa73 	bl	800bd38 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8000852:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <main+0x7c>)
 8000854:	f007 f928 	bl	8007aa8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085e:	4812      	ldr	r0, [pc, #72]	@ (80008a8 <main+0x80>)
 8000860:	f002 fdde 	bl	8003420 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&SSD1306_TxCplt);
 8000864:	4811      	ldr	r0, [pc, #68]	@ (80008ac <main+0x84>)
 8000866:	f000 fb17 	bl	8000e98 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(HAL_I2C_Mem_Write);
 800086a:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <main+0x88>)
 800086c:	f000 fb04 	bl	8000e78 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(HAL_I2C_Mem_Write_DMA);
 8000870:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <main+0x8c>)
 8000872:	f000 faf1 	bl	8000e58 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 8000876:	f000 fb1f 	bl	8000eb8 <ssd1306_Init>


	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <main+0x90>)
 800087c:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <main+0x94>)
 800087e:	4910      	ldr	r1, [pc, #64]	@ (80008c0 <main+0x98>)
 8000880:	4810      	ldr	r0, [pc, #64]	@ (80008c4 <main+0x9c>)
 8000882:	f001 f973 	bl	8001b6c <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <main+0xa0>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 800088c:	f7ff ff5e 	bl	800074c <do10ms>
		USBTask();
 8000890:	f7ff fec4 	bl	800061c <USBTask>
		ssd1306Data();
 8000894:	f7ff ffaa 	bl	80007ec <ssd1306Data>
		ssd1306_UpdateScreenDMA();
 8000898:	f000 fbb8 	bl	800100c <ssd1306_UpdateScreenDMA>
		do10ms();
 800089c:	bf00      	nop
 800089e:	e7f5      	b.n	800088c <main+0x64>
 80008a0:	080005c1 	.word	0x080005c1
 80008a4:	2000030c 	.word	0x2000030c
 80008a8:	40020800 	.word	0x40020800
 80008ac:	20000591 	.word	0x20000591
 80008b0:	0800373d 	.word	0x0800373d
 80008b4:	08003931 	.word	0x08003931
 80008b8:	20000390 	.word	0x20000390
 80008bc:	20000490 	.word	0x20000490
 80008c0:	20000378 	.word	0x20000378
 80008c4:	20000384 	.word	0x20000384
 80008c8:	20000590 	.word	0x20000590

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	@ 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	2230      	movs	r2, #48	@ 0x30
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f00b fe56 	bl	800c58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	4b27      	ldr	r3, [pc, #156]	@ (8000994 <SystemClock_Config+0xc8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	4a26      	ldr	r2, [pc, #152]	@ (8000994 <SystemClock_Config+0xc8>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <SystemClock_Config+0xc8>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <SystemClock_Config+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a20      	ldr	r2, [pc, #128]	@ (8000998 <SystemClock_Config+0xcc>)
 8000916:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <SystemClock_Config+0xcc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800093c:	2319      	movs	r3, #25
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000940:	23c0      	movs	r3, #192	@ 0xc0
 8000942:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	4618      	mov	r0, r3
 8000952:	f006 fc15 	bl	8007180 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800095c:	f000 fa04 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2103      	movs	r1, #3
 800097c:	4618      	mov	r0, r3
 800097e:	f006 fe77 	bl	8007670 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000988:	f000 f9ee 	bl	8000d68 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	@ 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ae:	4b52      	ldr	r3, [pc, #328]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009b0:	4a52      	ldr	r2, [pc, #328]	@ (8000afc <MX_ADC1_Init+0x160>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b4:	4b50      	ldr	r3, [pc, #320]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009bc:	4b4e      	ldr	r3, [pc, #312]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009c2:	4b4d      	ldr	r3, [pc, #308]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c8:	4b4b      	ldr	r3, [pc, #300]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b4a      	ldr	r3, [pc, #296]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d6:	4b48      	ldr	r3, [pc, #288]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b46      	ldr	r3, [pc, #280]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009de:	4a48      	ldr	r2, [pc, #288]	@ (8000b00 <MX_ADC1_Init+0x164>)
 80009e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e2:	4b45      	ldr	r3, [pc, #276]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80009e8:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ee:	4b42      	ldr	r3, [pc, #264]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f6:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fc:	483e      	ldr	r0, [pc, #248]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 80009fe:	f001 f9ad 	bl	8001d5c <HAL_ADC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f9ae 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4836      	ldr	r0, [pc, #216]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 8000a1e:	f001 fc03 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a28:	f000 f99e 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	482f      	ldr	r0, [pc, #188]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 8000a3a:	f001 fbf5 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a44:	f000 f990 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4828      	ldr	r0, [pc, #160]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 8000a56:	f001 fbe7 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a60:	f000 f982 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a64:	2303      	movs	r3, #3
 8000a66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4821      	ldr	r0, [pc, #132]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 8000a72:	f001 fbd9 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a7c:	f000 f974 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a84:	2305      	movs	r3, #5
 8000a86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481a      	ldr	r0, [pc, #104]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 8000a8e:	f001 fbcb 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a98:	f000 f966 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 8000aaa:	f001 fbbd 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000ab4:	f000 f958 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000abc:	2307      	movs	r3, #7
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 8000ac6:	f001 fbaf 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ad0:	f000 f94a 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_ADC1_Init+0x15c>)
 8000ae2:	f001 fba1 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000aec:	f000 f93c 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000150 	.word	0x20000150
 8000afc:	40012000 	.word	0x40012000
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b0a:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <MX_I2C1_Init+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b10:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <MX_I2C1_Init+0x58>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_I2C1_Init+0x50>)
 8000b42:	f002 fca1 	bl	8003488 <HAL_I2C_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b4c:	f000 f90c 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200001f8 	.word	0x200001f8
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	00061a80 	.word	0x00061a80

08000b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8c:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000b8e:	4a26      	ldr	r2, [pc, #152]	@ (8000c28 <MX_TIM1_Init+0xc8>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000b92:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000b94:	225f      	movs	r2, #95	@ 0x5f
 8000b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000ba0:	22f9      	movs	r2, #249	@ 0xf9
 8000ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb6:	481b      	ldr	r0, [pc, #108]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000bb8:	f006 ff26 	bl	8007a08 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000bc2:	f000 f8d1 	bl	8000d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000bd4:	f007 f8ba 	bl	8007d4c <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bde:	f000 f8c3 	bl	8000d68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000bf2:	f007 f972 	bl	8007eda <HAL_TIM_SlaveConfigSynchro>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000bfc:	f000 f8b4 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_TIM1_Init+0xc4>)
 8000c0e:	f007 fb81 	bl	8008314 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000c18:	f000 f8a6 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3730      	adds	r7, #48	@ 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000030c 	.word	0x2000030c
 8000c28:	40010000 	.word	0x40010000

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <MX_DMA_Init+0x78>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca4 <MX_DMA_Init+0x78>)
 8000c3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <MX_DMA_Init+0x78>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_DMA_Init+0x78>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <MX_DMA_Init+0x78>)
 8000c58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_DMA_Init+0x78>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	200b      	movs	r0, #11
 8000c70:	f001 fe6f 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c74:	200b      	movs	r0, #11
 8000c76:	f001 fe88 	bl	800298a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f001 fe67 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c84:	200c      	movs	r0, #12
 8000c86:	f001 fe80 	bl	800298a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2038      	movs	r0, #56	@ 0x38
 8000c90:	f001 fe5f 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c94:	2038      	movs	r0, #56	@ 0x38
 8000c96:	f001 fe78 	bl	800298a <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a26      	ldr	r2, [pc, #152]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b24      	ldr	r3, [pc, #144]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a11      	ldr	r2, [pc, #68]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_GPIO_Init+0xb8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <MX_GPIO_Init+0xbc>)
 8000d36:	f002 fb73 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_GPIO_Init+0xbc>)
 8000d54:	f002 f9e0 	bl	8003118 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	@ 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020800 	.word	0x40020800

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <Error_Handler+0x8>

08000d74 <ssd1306_Reset>:
static HAL_StatusTypeDef (*memWrite)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout) = NULL;
static HAL_StatusTypeDef (*memWriteDMA)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af04      	add	r7, sp, #16
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	memWrite(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <ssd1306_WriteCommand+0x30>)
 8000d90:	681c      	ldr	r4, [r3, #0]
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	2200      	movs	r2, #0
 8000da4:	2178      	movs	r1, #120	@ 0x78
 8000da6:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <ssd1306_WriteCommand+0x34>)
 8000da8:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000598 	.word	0x20000598
 8000db8:	200001f8 	.word	0x200001f8

08000dbc <ssd1306_WriteCommandDMA>:

void ssd1306_WriteCommandDMA(uint8_t byte) {
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	memWriteDMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <ssd1306_WriteCommandDMA+0x28>)
 8000dc8:	681c      	ldr	r4, [r3, #0]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2178      	movs	r1, #120	@ 0x78
 8000dd8:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <ssd1306_WriteCommandDMA+0x2c>)
 8000dda:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	2000059c 	.word	0x2000059c
 8000de8:	200001f8 	.word	0x200001f8

08000dec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    memWrite(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <ssd1306_WriteData+0x30>)
 8000df8:	681c      	ldr	r4, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000e02:	9202      	str	r2, [sp, #8]
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	2240      	movs	r2, #64	@ 0x40
 8000e0e:	2178      	movs	r1, #120	@ 0x78
 8000e10:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <ssd1306_WriteData+0x34>)
 8000e12:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	20000598 	.word	0x20000598
 8000e20:	200001f8 	.word	0x200001f8

08000e24 <ssd1306_WriteDataDMA>:

void ssd1306_WriteDataDMA(uint8_t* buffer, size_t buff_size) {
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	memWriteDMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <ssd1306_WriteDataDMA+0x2c>)
 8000e30:	681c      	ldr	r4, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	2240      	movs	r2, #64	@ 0x40
 8000e40:	2178      	movs	r1, #120	@ 0x78
 8000e42:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <ssd1306_WriteDataDMA+0x30>)
 8000e44:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000059c 	.word	0x2000059c
 8000e54:	200001f8 	.word	0x200001f8

08000e58 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(HAL_StatusTypeDef(*PtrRx)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)){
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <ssd1306_Attach_MemWriteDMA+0x1c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000059c 	.word	0x2000059c

08000e78 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(HAL_StatusTypeDef(*PtrRx)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <ssd1306_Attach_MemWrite+0x1c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000598 	.word	0x20000598

08000e98 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000594 	.word	0x20000594

08000eb8 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ebc:	f7ff ff5a 	bl	8000d74 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ec0:	2064      	movs	r0, #100	@ 0x64
 8000ec2:	f000 ff27 	bl	8001d14 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f9c0 	bl	800124c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ecc:	2020      	movs	r0, #32
 8000ece:	f7ff ff59 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ff56 	bl	8000d84 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ed8:	20b0      	movs	r0, #176	@ 0xb0
 8000eda:	f7ff ff53 	bl	8000d84 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ede:	20c8      	movs	r0, #200	@ 0xc8
 8000ee0:	f7ff ff50 	bl	8000d84 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff ff4d 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000eea:	2010      	movs	r0, #16
 8000eec:	f7ff ff4a 	bl	8000d84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ef0:	2040      	movs	r0, #64	@ 0x40
 8000ef2:	f7ff ff47 	bl	8000d84 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ef6:	20ff      	movs	r0, #255	@ 0xff
 8000ef8:	f000 f995 	bl	8001226 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000efc:	20a1      	movs	r0, #161	@ 0xa1
 8000efe:	f7ff ff41 	bl	8000d84 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f02:	20a6      	movs	r0, #166	@ 0xa6
 8000f04:	f7ff ff3e 	bl	8000d84 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f08:	20a8      	movs	r0, #168	@ 0xa8
 8000f0a:	f7ff ff3b 	bl	8000d84 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f0e:	203f      	movs	r0, #63	@ 0x3f
 8000f10:	f7ff ff38 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f14:	20a4      	movs	r0, #164	@ 0xa4
 8000f16:	f7ff ff35 	bl	8000d84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f1a:	20d3      	movs	r0, #211	@ 0xd3
 8000f1c:	f7ff ff32 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff2f 	bl	8000d84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f26:	20d5      	movs	r0, #213	@ 0xd5
 8000f28:	f7ff ff2c 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f2c:	20f0      	movs	r0, #240	@ 0xf0
 8000f2e:	f7ff ff29 	bl	8000d84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f32:	20d9      	movs	r0, #217	@ 0xd9
 8000f34:	f7ff ff26 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f38:	2022      	movs	r0, #34	@ 0x22
 8000f3a:	f7ff ff23 	bl	8000d84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f3e:	20da      	movs	r0, #218	@ 0xda
 8000f40:	f7ff ff20 	bl	8000d84 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000f44:	2012      	movs	r0, #18
 8000f46:	f7ff ff1d 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f4a:	20db      	movs	r0, #219	@ 0xdb
 8000f4c:	f7ff ff1a 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f50:	2020      	movs	r0, #32
 8000f52:	f7ff ff17 	bl	8000d84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000f56:	208d      	movs	r0, #141	@ 0x8d
 8000f58:	f7ff ff14 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000f5c:	2014      	movs	r0, #20
 8000f5e:	f7ff ff11 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 f972 	bl	800124c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f000 f80f 	bl	8000f8c <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000f6e:	f000 f825 	bl	8000fbc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f72:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <ssd1306_Init+0xd0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <ssd1306_Init+0xd0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000f7e:	4b02      	ldr	r3, [pc, #8]	@ (8000f88 <ssd1306_Init+0xd0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	711a      	strb	r2, [r3, #4]
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200009a0 	.word	0x200009a0

08000f8c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <ssd1306_Fill+0x14>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e000      	b.n	8000fa2 <ssd1306_Fill+0x16>
 8000fa0:	23ff      	movs	r3, #255	@ 0xff
 8000fa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <ssd1306_Fill+0x2c>)
 8000faa:	f00b faef 	bl	800c58c <memset>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200005a0 	.word	0x200005a0

08000fbc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	e016      	b.n	8000ff6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	3b50      	subs	r3, #80	@ 0x50
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fed8 	bl	8000d84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fed5 	bl	8000d84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000fda:	2010      	movs	r0, #16
 8000fdc:	f7ff fed2 	bl	8000d84 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	01db      	lsls	r3, r3, #7
 8000fe4:	4a08      	ldr	r2, [pc, #32]	@ (8001008 <ssd1306_UpdateScreen+0x4c>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2180      	movs	r1, #128	@ 0x80
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fefe 	bl	8000dec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b07      	cmp	r3, #7
 8000ffa:	d9e5      	bls.n	8000fc8 <ssd1306_UpdateScreen+0xc>
    }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200005a0 	.word	0x200005a0

0800100c <ssd1306_UpdateScreenDMA>:


/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreenDMA(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction

	if (*SSD1306_TxCplt || state == 1) {
 8001010:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <ssd1306_UpdateScreenDMA+0xac>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <ssd1306_UpdateScreenDMA+0x16>
 800101a:	4b28      	ldr	r3, [pc, #160]	@ (80010bc <ssd1306_UpdateScreenDMA+0xb0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d147      	bne.n	80010b2 <ssd1306_UpdateScreenDMA+0xa6>
		*SSD1306_TxCplt = 0;  // Reset completion flag
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <ssd1306_UpdateScreenDMA+0xac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]

		switch (state) {
 800102a:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <ssd1306_UpdateScreenDMA+0xb0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	3b01      	subs	r3, #1
 8001030:	2b03      	cmp	r3, #3
 8001032:	d83e      	bhi.n	80010b2 <ssd1306_UpdateScreenDMA+0xa6>
 8001034:	a201      	add	r2, pc, #4	@ (adr r2, 800103c <ssd1306_UpdateScreenDMA+0x30>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	0800104d 	.word	0x0800104d
 8001040:	08001063 	.word	0x08001063
 8001044:	08001071 	.word	0x08001071
 8001048:	0800107f 	.word	0x0800107f
		case 1:  // Set page address
			ssd1306_WriteCommandDMA(0xB0 + current_page);
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <ssd1306_UpdateScreenDMA+0xb4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3b50      	subs	r3, #80	@ 0x50
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff feb1 	bl	8000dbc <ssd1306_WriteCommandDMA>
			state = 2;
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <ssd1306_UpdateScreenDMA+0xb0>)
 800105c:	2202      	movs	r2, #2
 800105e:	701a      	strb	r2, [r3, #0]
			break;
 8001060:	e027      	b.n	80010b2 <ssd1306_UpdateScreenDMA+0xa6>
		case 2:  // Set column address low nibble
			ssd1306_WriteCommandDMA(0x00 + SSD1306_X_OFFSET_LOWER);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff feaa 	bl	8000dbc <ssd1306_WriteCommandDMA>
			state = 3;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <ssd1306_UpdateScreenDMA+0xb0>)
 800106a:	2203      	movs	r2, #3
 800106c:	701a      	strb	r2, [r3, #0]
			break;
 800106e:	e020      	b.n	80010b2 <ssd1306_UpdateScreenDMA+0xa6>
		case 3:  // Set column address high nibble
			ssd1306_WriteCommandDMA(0x10 + SSD1306_X_OFFSET_UPPER);
 8001070:	2010      	movs	r0, #16
 8001072:	f7ff fea3 	bl	8000dbc <ssd1306_WriteCommandDMA>
			state = 4;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <ssd1306_UpdateScreenDMA+0xb0>)
 8001078:	2204      	movs	r2, #4
 800107a:	701a      	strb	r2, [r3, #0]
			break;
 800107c:	e019      	b.n	80010b2 <ssd1306_UpdateScreenDMA+0xa6>
		case 4:  // Write page data
			ssd1306_WriteDataDMA(&SSD1306_Buffer[SSD1306_WIDTH*current_page],SSD1306_WIDTH);
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <ssd1306_UpdateScreenDMA+0xb4>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	01db      	lsls	r3, r3, #7
 8001084:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <ssd1306_UpdateScreenDMA+0xb8>)
 8001086:	4413      	add	r3, r2
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff feca 	bl	8000e24 <ssd1306_WriteDataDMA>
			current_page++;
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <ssd1306_UpdateScreenDMA+0xb4>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <ssd1306_UpdateScreenDMA+0xb4>)
 800109a:	701a      	strb	r2, [r3, #0]

			if (current_page > 7){//SSD1306_HEIGHT/8) {
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <ssd1306_UpdateScreenDMA+0xb4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d902      	bls.n	80010aa <ssd1306_UpdateScreenDMA+0x9e>
				current_page = 0;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <ssd1306_UpdateScreenDMA+0xb4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
			}
			state = 1;  // Start over with next page
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <ssd1306_UpdateScreenDMA+0xb0>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
			break;
 80010b0:	bf00      	nop
		}
	}
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000594 	.word	0x20000594
 80010bc:	2000002d 	.word	0x2000002d
 80010c0:	200009a6 	.word	0x200009a6
 80010c4:	200005a0 	.word	0x200005a0

080010c8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	460b      	mov	r3, r1
 80010d4:	71bb      	strb	r3, [r7, #6]
 80010d6:	4613      	mov	r3, r2
 80010d8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db3d      	blt.n	800115e <ssd1306_DrawPixel+0x96>
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e6:	d83a      	bhi.n	800115e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d11a      	bne.n	8001124 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	b2d8      	uxtb	r0, r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	01db      	lsls	r3, r3, #7
 80010fa:	4413      	add	r3, r2
 80010fc:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <ssd1306_DrawPixel+0xa4>)
 80010fe:	5cd3      	ldrb	r3, [r2, r3]
 8001100:	b25a      	sxtb	r2, r3
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	b25b      	sxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b259      	sxtb	r1, r3
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	4603      	mov	r3, r0
 8001118:	01db      	lsls	r3, r3, #7
 800111a:	4413      	add	r3, r2
 800111c:	b2c9      	uxtb	r1, r1
 800111e:	4a13      	ldr	r2, [pc, #76]	@ (800116c <ssd1306_DrawPixel+0xa4>)
 8001120:	54d1      	strb	r1, [r2, r3]
 8001122:	e01d      	b.n	8001160 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001124:	79fa      	ldrb	r2, [r7, #7]
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	b2d8      	uxtb	r0, r3
 800112c:	4603      	mov	r3, r0
 800112e:	01db      	lsls	r3, r3, #7
 8001130:	4413      	add	r3, r2
 8001132:	4a0e      	ldr	r2, [pc, #56]	@ (800116c <ssd1306_DrawPixel+0xa4>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	b25a      	sxtb	r2, r3
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	b25b      	sxtb	r3, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	b25b      	sxtb	r3, r3
 800114a:	4013      	ands	r3, r2
 800114c:	b259      	sxtb	r1, r3
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	4603      	mov	r3, r0
 8001152:	01db      	lsls	r3, r3, #7
 8001154:	4413      	add	r3, r2
 8001156:	b2c9      	uxtb	r1, r1
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <ssd1306_DrawPixel+0xa4>)
 800115a:	54d1      	strb	r1, [r2, r3]
 800115c:	e000      	b.n	8001160 <ssd1306_DrawPixel+0x98>
        return;
 800115e:	bf00      	nop
    }
}
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200005a0 	.word	0x200005a0

08001170 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	603a      	str	r2, [r7, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	460b      	mov	r3, r1
 8001180:	71bb      	strb	r3, [r7, #6]
 8001182:	4613      	mov	r3, r2
 8001184:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	3307      	adds	r3, #7
 800118a:	2b00      	cmp	r3, #0
 800118c:	da00      	bge.n	8001190 <ssd1306_DrawBitmap+0x20>
 800118e:	3307      	adds	r3, #7
 8001190:	10db      	asrs	r3, r3, #3
 8001192:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db3e      	blt.n	800121e <ssd1306_DrawBitmap+0xae>
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80011a4:	d83b      	bhi.n	800121e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	73bb      	strb	r3, [r7, #14]
 80011aa:	e033      	b.n	8001214 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	737b      	strb	r3, [r7, #13]
 80011b0:	e026      	b.n	8001200 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e00d      	b.n	80011e0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	7b7a      	ldrb	r2, [r7, #13]
 80011d0:	08d2      	lsrs	r2, r2, #3
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	4413      	add	r3, r2
 80011d6:	461a      	mov	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80011e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da08      	bge.n	80011fa <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	4413      	add	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	7f3a      	ldrb	r2, [r7, #28]
 80011f2:	79b9      	ldrb	r1, [r7, #6]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff67 	bl	80010c8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80011fa:	7b7b      	ldrb	r3, [r7, #13]
 80011fc:	3301      	adds	r3, #1
 80011fe:	737b      	strb	r3, [r7, #13]
 8001200:	7b7a      	ldrb	r2, [r7, #13]
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3d4      	bcc.n	80011b2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	3301      	adds	r3, #1
 800120c:	73bb      	strb	r3, [r7, #14]
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	3301      	adds	r3, #1
 8001212:	71bb      	strb	r3, [r7, #6]
 8001214:	7bba      	ldrb	r2, [r7, #14]
 8001216:	7e3b      	ldrb	r3, [r7, #24]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3c7      	bcc.n	80011ac <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800121c:	e000      	b.n	8001220 <ssd1306_DrawBitmap+0xb0>
        return;
 800121e:	bf00      	nop
}
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001230:	2381      	movs	r3, #129	@ 0x81
 8001232:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fda4 	bl	8000d84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fda0 	bl	8000d84 <ssd1306_WriteCommand>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800125c:	23af      	movs	r3, #175	@ 0xaf
 800125e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <ssd1306_SetDisplayOn+0x38>)
 8001262:	2201      	movs	r2, #1
 8001264:	715a      	strb	r2, [r3, #5]
 8001266:	e004      	b.n	8001272 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001268:	23ae      	movs	r3, #174	@ 0xae
 800126a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <ssd1306_SetDisplayOn+0x38>)
 800126e:	2200      	movs	r2, #0
 8001270:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fd85 	bl	8000d84 <ssd1306_WriteCommand>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200009a0 	.word	0x200009a0

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800129c:	6453      	str	r3, [r2, #68]	@ 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a32      	ldr	r2, [pc, #200]	@ (80013c0 <HAL_ADC_MspInit+0xe8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d15e      	bne.n	80013b8 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b31      	ldr	r3, [pc, #196]	@ (80013c4 <HAL_ADC_MspInit+0xec>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a30      	ldr	r2, [pc, #192]	@ (80013c4 <HAL_ADC_MspInit+0xec>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <HAL_ADC_MspInit+0xec>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <HAL_ADC_MspInit+0xec>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <HAL_ADC_MspInit+0xec>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <HAL_ADC_MspInit+0xec>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001332:	23ff      	movs	r3, #255	@ 0xff
 8001334:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4820      	ldr	r0, [pc, #128]	@ (80013c8 <HAL_ADC_MspInit+0xf0>)
 8001346:	f001 fee7 	bl	8003118 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 800134c:	4a20      	ldr	r2, [pc, #128]	@ (80013d0 <HAL_ADC_MspInit+0xf8>)
 800134e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001350:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001356:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 8001364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001368:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 800136c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001370:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 8001374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001378:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138c:	480f      	ldr	r0, [pc, #60]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 800138e:	f001 fb17 	bl	80029c0 <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001398:	f7ff fce6 	bl	8000d68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 80013a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <HAL_ADC_MspInit+0xf4>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2012      	movs	r0, #18
 80013ae:	f001 fad0 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013b2:	2012      	movs	r0, #18
 80013b4:	f001 fae9 	bl	800298a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	@ 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40012000 	.word	0x40012000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	20000198 	.word	0x20000198
 80013d0:	40026410 	.word	0x40026410

080013d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001530 <HAL_I2C_MspInit+0x15c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f040 8097 	bne.w	8001526 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <HAL_I2C_MspInit+0x160>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	4a4c      	ldr	r2, [pc, #304]	@ (8001534 <HAL_I2C_MspInit+0x160>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	6313      	str	r3, [r2, #48]	@ 0x30
 8001408:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <HAL_I2C_MspInit+0x160>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001414:	23c0      	movs	r3, #192	@ 0xc0
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001418:	2312      	movs	r3, #18
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001424:	2304      	movs	r3, #4
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4842      	ldr	r0, [pc, #264]	@ (8001538 <HAL_I2C_MspInit+0x164>)
 8001430:	f001 fe72 	bl	8003118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4b3e      	ldr	r3, [pc, #248]	@ (8001534 <HAL_I2C_MspInit+0x160>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	4a3d      	ldr	r2, [pc, #244]	@ (8001534 <HAL_I2C_MspInit+0x160>)
 800143e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001442:	6413      	str	r3, [r2, #64]	@ 0x40
 8001444:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <HAL_I2C_MspInit+0x160>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001450:	4b3a      	ldr	r3, [pc, #232]	@ (800153c <HAL_I2C_MspInit+0x168>)
 8001452:	4a3b      	ldr	r2, [pc, #236]	@ (8001540 <HAL_I2C_MspInit+0x16c>)
 8001454:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001456:	4b39      	ldr	r3, [pc, #228]	@ (800153c <HAL_I2C_MspInit+0x168>)
 8001458:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800145c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800145e:	4b37      	ldr	r3, [pc, #220]	@ (800153c <HAL_I2C_MspInit+0x168>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001464:	4b35      	ldr	r3, [pc, #212]	@ (800153c <HAL_I2C_MspInit+0x168>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800146a:	4b34      	ldr	r3, [pc, #208]	@ (800153c <HAL_I2C_MspInit+0x168>)
 800146c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001470:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001472:	4b32      	ldr	r3, [pc, #200]	@ (800153c <HAL_I2C_MspInit+0x168>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001478:	4b30      	ldr	r3, [pc, #192]	@ (800153c <HAL_I2C_MspInit+0x168>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800147e:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <HAL_I2C_MspInit+0x168>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001484:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <HAL_I2C_MspInit+0x168>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800148a:	4b2c      	ldr	r3, [pc, #176]	@ (800153c <HAL_I2C_MspInit+0x168>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001490:	482a      	ldr	r0, [pc, #168]	@ (800153c <HAL_I2C_MspInit+0x168>)
 8001492:	f001 fa95 	bl	80029c0 <HAL_DMA_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800149c:	f7ff fc64 	bl	8000d68 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a26      	ldr	r2, [pc, #152]	@ (800153c <HAL_I2C_MspInit+0x168>)
 80014a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80014a6:	4a25      	ldr	r2, [pc, #148]	@ (800153c <HAL_I2C_MspInit+0x168>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80014ac:	4b25      	ldr	r3, [pc, #148]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014ae:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <HAL_I2C_MspInit+0x174>)
 80014b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80014b2:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b8:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014ba:	2240      	movs	r2, #64	@ 0x40
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014de:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e4:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80014ea:	4816      	ldr	r0, [pc, #88]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014ec:	f001 fa68 	bl	80029c0 <HAL_DMA_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80014f6:	f7ff fc37 	bl	8000d68 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 80014fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001500:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <HAL_I2C_MspInit+0x170>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	201f      	movs	r0, #31
 800150c:	f001 fa21 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001510:	201f      	movs	r0, #31
 8001512:	f001 fa3a 	bl	800298a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2020      	movs	r0, #32
 800151c:	f001 fa19 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001520:	2020      	movs	r0, #32
 8001522:	f001 fa32 	bl	800298a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40005400 	.word	0x40005400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400
 800153c:	2000024c 	.word	0x2000024c
 8001540:	40026010 	.word	0x40026010
 8001544:	200002ac 	.word	0x200002ac
 8001548:	40026028 	.word	0x40026028

0800154c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <HAL_TIM_Base_MspInit+0x78>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12d      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <HAL_TIM_Base_MspInit+0x7c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a18      	ldr	r2, [pc, #96]	@ (80015c8 <HAL_TIM_Base_MspInit+0x7c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_TIM_Base_MspInit+0x7c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2018      	movs	r0, #24
 8001580:	f001 f9e7 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001584:	2018      	movs	r0, #24
 8001586:	f001 fa00 	bl	800298a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2019      	movs	r0, #25
 8001590:	f001 f9df 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001594:	2019      	movs	r0, #25
 8001596:	f001 f9f8 	bl	800298a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	201a      	movs	r0, #26
 80015a0:	f001 f9d7 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80015a4:	201a      	movs	r0, #26
 80015a6:	f001 f9f0 	bl	800298a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	201b      	movs	r0, #27
 80015b0:	f001 f9cf 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80015b4:	201b      	movs	r0, #27
 80015b6:	f001 f9e8 	bl	800298a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40010000 	.word	0x40010000
 80015c8:	40023800 	.word	0x40023800

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 fb57 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <DMA1_Stream0_IRQHandler+0x10>)
 8001632:	f001 faed 	bl	8002c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000024c 	.word	0x2000024c

08001640 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <DMA1_Stream1_IRQHandler+0x10>)
 8001646:	f001 fae3 	bl	8002c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200002ac 	.word	0x200002ac

08001654 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <ADC_IRQHandler+0x10>)
 800165a:	f000 fbc2 	bl	8001de2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000150 	.word	0x20000150

08001668 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800166e:	f006 fa7d 	bl	8007b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000030c 	.word	0x2000030c

0800167c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001682:	f006 fa73 	bl	8007b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000030c 	.word	0x2000030c

08001690 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001696:	f006 fa69 	bl	8007b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000030c 	.word	0x2000030c

080016a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <TIM1_CC_IRQHandler+0x10>)
 80016aa:	f006 fa5f 	bl	8007b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000030c 	.word	0x2000030c

080016b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <I2C1_EV_IRQHandler+0x10>)
 80016be:	f002 fa95 	bl	8003bec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001f8 	.word	0x200001f8

080016cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <I2C1_ER_IRQHandler+0x10>)
 80016d2:	f002 fbfc 	bl	8003ece <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001f8 	.word	0x200001f8

080016e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <DMA2_Stream0_IRQHandler+0x10>)
 80016e6:	f001 fa93 	bl	8002c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000198 	.word	0x20000198

080016f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <OTG_FS_IRQHandler+0x10>)
 80016fa:	f004 fc33 	bl	8005f64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20001290 	.word	0x20001290

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
 8001738:	4613      	mov	r3, r2
 800173a:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	3301      	adds	r3, #1
 8001740:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	795a      	ldrb	r2, [r3, #5]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	795b      	ldrb	r3, [r3, #5]
 8001758:	1c59      	adds	r1, r3, #1
 800175a:	b2c8      	uxtb	r0, r1
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	7148      	strb	r0, [r1, #5]
 8001760:	4413      	add	r3, r2
 8001762:	2255      	movs	r2, #85	@ 0x55
 8001764:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	795a      	ldrb	r2, [r3, #5]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	799b      	ldrb	r3, [r3, #6]
 800176e:	4013      	ands	r3, r2
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	795b      	ldrb	r3, [r3, #5]
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	b2c8      	uxtb	r0, r1
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	7148      	strb	r0, [r1, #5]
 8001786:	4413      	add	r3, r2
 8001788:	224e      	movs	r2, #78	@ 0x4e
 800178a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	795a      	ldrb	r2, [r3, #5]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	799b      	ldrb	r3, [r3, #6]
 8001794:	4013      	ands	r3, r2
 8001796:	b2da      	uxtb	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	795b      	ldrb	r3, [r3, #5]
 80017a4:	1c59      	adds	r1, r3, #1
 80017a6:	b2c8      	uxtb	r0, r1
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	7148      	strb	r0, [r1, #5]
 80017ac:	4413      	add	r3, r2
 80017ae:	2245      	movs	r2, #69	@ 0x45
 80017b0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	795a      	ldrb	r2, [r3, #5]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	799b      	ldrb	r3, [r3, #6]
 80017ba:	4013      	ands	r3, r2
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	795b      	ldrb	r3, [r3, #5]
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	b2c8      	uxtb	r0, r1
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	7148      	strb	r0, [r1, #5]
 80017d2:	4413      	add	r3, r2
 80017d4:	2252      	movs	r2, #82	@ 0x52
 80017d6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	795a      	ldrb	r2, [r3, #5]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	799b      	ldrb	r3, [r3, #6]
 80017e0:	4013      	ands	r3, r2
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	795b      	ldrb	r3, [r3, #5]
 80017f0:	1c59      	adds	r1, r3, #1
 80017f2:	b2c8      	uxtb	r0, r1
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	7148      	strb	r0, [r1, #5]
 80017f8:	4413      	add	r3, r2
 80017fa:	78ba      	ldrb	r2, [r7, #2]
 80017fc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	795a      	ldrb	r2, [r3, #5]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	799b      	ldrb	r3, [r3, #6]
 8001806:	4013      	ands	r3, r2
 8001808:	b2da      	uxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	795b      	ldrb	r3, [r3, #5]
 8001816:	1c59      	adds	r1, r3, #1
 8001818:	b2c8      	uxtb	r0, r1
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	7148      	strb	r0, [r1, #5]
 800181e:	4413      	add	r3, r2
 8001820:	223a      	movs	r2, #58	@ 0x3a
 8001822:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	795a      	ldrb	r2, [r3, #5]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	799b      	ldrb	r3, [r3, #6]
 800182c:	4013      	ands	r3, r2
 800182e:	b2da      	uxtb	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	795b      	ldrb	r3, [r3, #5]
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	b2c8      	uxtb	r0, r1
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	7148      	strb	r0, [r1, #5]
 8001844:	4413      	add	r3, r2
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	795a      	ldrb	r2, [r3, #5]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	799b      	ldrb	r3, [r3, #6]
 8001852:	4013      	ands	r3, r2
 8001854:	b2da      	uxtb	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2207      	movs	r2, #7
 800185e:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7a5a      	ldrb	r2, [r3, #9]
 8001864:	78b9      	ldrb	r1, [r7, #2]
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	404b      	eors	r3, r1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4053      	eors	r3, r2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001874:	b2da      	uxtb	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7a5b      	ldrb	r3, [r3, #9]
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	79db      	ldrb	r3, [r3, #7]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	795b      	ldrb	r3, [r3, #5]
 80018aa:	1c59      	adds	r1, r3, #1
 80018ac:	b2c8      	uxtb	r0, r1
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	7148      	strb	r0, [r1, #5]
 80018b2:	4413      	add	r3, r2
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	795a      	ldrb	r2, [r3, #5]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	799b      	ldrb	r3, [r3, #6]
 80018c0:	4013      	ands	r3, r2
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a5a      	ldrb	r2, [r3, #9]
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	4053      	eors	r3, r2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7a5b      	ldrb	r3, [r3, #9]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 80018e6:	b490      	push	{r4, r7}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 80018f4:	e02c      	b.n	8001950 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	79db      	ldrb	r3, [r3, #7]
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	441a      	add	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	795b      	ldrb	r3, [r3, #5]
 8001914:	1c58      	adds	r0, r3, #1
 8001916:	b2c4      	uxtb	r4, r0
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	7144      	strb	r4, [r0, #5]
 800191c:	440b      	add	r3, r1
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	795a      	ldrb	r2, [r3, #5]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	799b      	ldrb	r3, [r3, #6]
 800192a:	4013      	ands	r3, r2
 800192c:	b2da      	uxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	73fa      	strb	r2, [r7, #15]
 800193c:	461a      	mov	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7a5b      	ldrb	r3, [r3, #9]
 8001948:	4053      	eors	r3, r2
 800194a:	b2da      	uxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ca      	bne.n	80018f6 <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7a5b      	ldrb	r3, [r3, #9]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bc90      	pop	{r4, r7}
 800196c:	4770      	bx	lr
	...

08001970 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	795b      	ldrb	r3, [r3, #5]
 8001980:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8001982:	e0e4      	b.n	8001b4e <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8001984:	4b78      	ldr	r3, [pc, #480]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b07      	cmp	r3, #7
 800198a:	f200 80c9 	bhi.w	8001b20 <unerPrtcl_DecodeHeader+0x1b0>
 800198e:	a201      	add	r2, pc, #4	@ (adr r2, 8001994 <unerPrtcl_DecodeHeader+0x24>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019b5 	.word	0x080019b5
 8001998:	080019cf 	.word	0x080019cf
 800199c:	08001a0d 	.word	0x08001a0d
 80019a0:	08001a39 	.word	0x08001a39
 80019a4:	08001a65 	.word	0x08001a65
 80019a8:	08001a7b 	.word	0x08001a7b
 80019ac:	08001b21 	.word	0x08001b21
 80019b0:	08001add 	.word	0x08001add
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	7912      	ldrb	r2, [r2, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b55      	cmp	r3, #85	@ 0x55
 80019c2:	f040 80b1 	bne.w	8001b28 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 80019c6:	4b68      	ldr	r3, [pc, #416]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
                }
            break;
 80019cc:	e0ac      	b.n	8001b28 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	7912      	ldrb	r2, [r2, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b4e      	cmp	r3, #78	@ 0x4e
 80019dc:	d103      	bne.n	80019e6 <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 80019de:	4b62      	ldr	r3, [pc, #392]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 80019e0:	2202      	movs	r2, #2
 80019e2:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 80019e4:	e0a2      	b.n	8001b2c <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	7912      	ldrb	r2, [r2, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b55      	cmp	r3, #85	@ 0x55
 80019f4:	f000 809a 	beq.w	8001b2c <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 80019f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	791b      	ldrb	r3, [r3, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	711a      	strb	r2, [r3, #4]
            break;
 8001a0a:	e08f      	b.n	8001b2c <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	7912      	ldrb	r2, [r2, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b45      	cmp	r3, #69	@ 0x45
 8001a1a:	d103      	bne.n	8001a24 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8001a1c:	4b52      	ldr	r3, [pc, #328]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001a1e:	2203      	movs	r2, #3
 8001a20:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001a22:	e086      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8001a24:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	791b      	ldrb	r3, [r3, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	711a      	strb	r2, [r3, #4]
            break;
 8001a36:	e07c      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	7912      	ldrb	r2, [r2, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b52      	cmp	r3, #82	@ 0x52
 8001a46:	d103      	bne.n	8001a50 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 8001a48:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001a4e:	e070      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8001a50:	4b45      	ldr	r3, [pc, #276]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	791b      	ldrb	r3, [r3, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	711a      	strb	r2, [r3, #4]
            break;
 8001a62:	e066      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	7912      	ldrb	r2, [r2, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8001a72:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001a74:	2205      	movs	r2, #5
 8001a76:	701a      	strb	r2, [r3, #0]
            break;
 8001a78:	e05b      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	7912      	ldrb	r2, [r2, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a88:	d11e      	bne.n	8001ac8 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 8001a8a:	4b37      	ldr	r3, [pc, #220]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7a1a      	ldrb	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	799b      	ldrb	r3, [r3, #6]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7a5a      	ldrb	r2, [r3, #9]
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	4053      	eors	r3, r2
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001ac6:	e034      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	791b      	ldrb	r3, [r3, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	711a      	strb	r2, [r3, #4]
            break;
 8001ada:	e02a      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00c      	beq.n	8001b02 <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7a5a      	ldrb	r2, [r3, #9]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	7909      	ldrb	r1, [r1, #4]
 8001af4:	440b      	add	r3, r1
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4053      	eors	r3, r2
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8001b00:	e016      	b.n	8001b30 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	7912      	ldrb	r2, [r2, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7a5b      	ldrb	r3, [r3, #9]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d109      	bne.n	8001b30 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e01d      	b.n	8001b5c <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <unerPrtcl_DecodeHeader+0x1f8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
            break;
 8001b26:	e004      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8001b28:	bf00      	nop
 8001b2a:	e002      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8001b2c:	bf00      	nop
 8001b2e:	e000      	b.n	8001b32 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8001b30:	bf00      	nop
        }
        dataRx->indexR++;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	791b      	ldrb	r3, [r3, #4]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	791a      	ldrb	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	799b      	ldrb	r3, [r3, #6]
 8001b46:	4013      	ands	r3, r2
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	7bba      	ldrb	r2, [r7, #14]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	f47f af15 	bne.w	8001984 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	200009a7 	.word	0x200009a7

08001b6c <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	22ff      	movs	r2, #255	@ 0xff
 8001b9c:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2200      	movs	r2, #0
 8001bae:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	22ff      	movs	r2, #255	@ 0xff
 8001bc6:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	725a      	strb	r2, [r3, #9]

}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be0:	f7ff fd92 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	@ (8001c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f00a fcc7 	bl	800c59c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0e:	f7fe fe0b 	bl	8000828 <main>
  bx  lr    
 8001c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8001c20:	0800ca84 	.word	0x0800ca84
  ldr r2, =_sbss
 8001c24:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001c28:	20001994 	.word	0x20001994

08001c2c <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <DMA1_Stream2_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <HAL_Init+0x40>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_Init+0x40>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_Init+0x40>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 fe6f 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	200f      	movs	r0, #15
 8001c60:	f000 f808 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff fb10 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fe87 	bl	80029a6 <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f000 fe4f 	bl	8002952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	@ (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000030 	.word	0x20000030
 8001ccc:	20000038 	.word	0x20000038
 8001cd0:	20000034 	.word	0x20000034

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000038 	.word	0x20000038
 8001cf8:	200009a8 	.word	0x200009a8

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	200009a8 	.word	0x200009a8

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff ffee 	bl	8001cfc <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000038 	.word	0x20000038

08001d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e033      	b.n	8001dda <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff faac 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001da2:	f023 0302 	bic.w	r3, r3, #2
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fb6c 	bl	800248c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dca:	e001      	b.n	8001dd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d049      	beq.n	8001eac <HAL_ADC_IRQHandler+0xca>
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d046      	beq.n	8001eac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d12b      	bne.n	8001e9c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d127      	bne.n	8001e9c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d119      	bne.n	8001e9c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0220 	bic.w	r2, r2, #32
 8001e76:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7fe fb31 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0212 	mvn.w	r2, #18
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d057      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x190>
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d054      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d139      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d12b      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d124      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d11d      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d119      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f3c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fc10 	bl	8002788 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 020c 	mvn.w	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f80:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d017      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x1d6>
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d014      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10d      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f929 	bl	8002200 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0201 	mvn.w	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fc6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x218>
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd8:	f043 0202 	orr.w	r2, r3, #2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0220 	mvn.w	r2, #32
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f912 	bl	8002214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0220 	mvn.w	r2, #32
 8001ff8:	601a      	str	r2, [r3, #0]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Start_DMA+0x22>
 8002022:	2302      	movs	r3, #2
 8002024:	e0d0      	b.n	80021c8 <HAL_ADC_Start_DMA+0x1c4>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d018      	beq.n	800206e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800204c:	4b60      	ldr	r3, [pc, #384]	@ (80021d0 <HAL_ADC_Start_DMA+0x1cc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a60      	ldr	r2, [pc, #384]	@ (80021d4 <HAL_ADC_Start_DMA+0x1d0>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9a      	lsrs	r2, r3, #18
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002060:	e002      	b.n	8002068 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3b01      	subs	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800207c:	d107      	bne.n	800208e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800208c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	f040 8088 	bne.w	80021ae <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020dc:	d106      	bne.n	80020ec <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f023 0206 	bic.w	r2, r3, #6
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80020ea:	e002      	b.n	80020f2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <HAL_ADC_Start_DMA+0x1d4>)
 80020fc:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002102:	4a36      	ldr	r2, [pc, #216]	@ (80021dc <HAL_ADC_Start_DMA+0x1d8>)
 8002104:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210a:	4a35      	ldr	r2, [pc, #212]	@ (80021e0 <HAL_ADC_Start_DMA+0x1dc>)
 800210c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002112:	4a34      	ldr	r2, [pc, #208]	@ (80021e4 <HAL_ADC_Start_DMA+0x1e0>)
 8002114:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800211e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800212e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800213e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	334c      	adds	r3, #76	@ 0x4c
 800214a:	4619      	mov	r1, r3
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f000 fce4 	bl	8002b1c <HAL_DMA_Start_IT>
 8002154:	4603      	mov	r3, r0
 8002156:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10f      	bne.n	8002184 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d129      	bne.n	80021c6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	e020      	b.n	80021c6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <HAL_ADC_Start_DMA+0x1e4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d11b      	bne.n	80021c6 <HAL_ADC_Start_DMA+0x1c2>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d114      	bne.n	80021c6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e00b      	b.n	80021c6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f043 0210 	orr.w	r2, r3, #16
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80021c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000030 	.word	0x20000030
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	40012300 	.word	0x40012300
 80021dc:	08002685 	.word	0x08002685
 80021e0:	0800273f 	.word	0x0800273f
 80021e4:	0800275b 	.word	0x0800275b
 80021e8:	40012000 	.word	0x40012000

080021ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1c>
 8002240:	2302      	movs	r3, #2
 8002242:	e113      	b.n	800246c <HAL_ADC_ConfigChannel+0x244>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b09      	cmp	r3, #9
 8002252:	d925      	bls.n	80022a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68d9      	ldr	r1, [r3, #12]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	3b1e      	subs	r3, #30
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43da      	mvns	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	400a      	ands	r2, r1
 8002278:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	4603      	mov	r3, r0
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4403      	add	r3, r0
 8002292:	3b1e      	subs	r3, #30
 8002294:	409a      	lsls	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e022      	b.n	80022e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	2207      	movs	r2, #7
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6919      	ldr	r1, [r3, #16]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4403      	add	r3, r0
 80022dc:	409a      	lsls	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d824      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b05      	subs	r3, #5
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	400a      	ands	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b05      	subs	r3, #5
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	635a      	str	r2, [r3, #52]	@ 0x34
 8002336:	e04c      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d824      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b23      	subs	r3, #35	@ 0x23
 8002352:	221f      	movs	r2, #31
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b23      	subs	r3, #35	@ 0x23
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
 8002388:	e023      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b41      	subs	r3, #65	@ 0x41
 800239c:	221f      	movs	r2, #31
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b41      	subs	r3, #65	@ 0x41
 80023c6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d2:	4b29      	ldr	r3, [pc, #164]	@ (8002478 <HAL_ADC_ConfigChannel+0x250>)
 80023d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a28      	ldr	r2, [pc, #160]	@ (800247c <HAL_ADC_ConfigChannel+0x254>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10f      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1d8>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	d10b      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1d      	ldr	r2, [pc, #116]	@ (800247c <HAL_ADC_ConfigChannel+0x254>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d12b      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x23a>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <HAL_ADC_ConfigChannel+0x258>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <HAL_ADC_ConfigChannel+0x1f4>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b11      	cmp	r3, #17
 800241a:	d122      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a11      	ldr	r2, [pc, #68]	@ (8002480 <HAL_ADC_ConfigChannel+0x258>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d111      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800243e:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_ADC_ConfigChannel+0x25c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a11      	ldr	r2, [pc, #68]	@ (8002488 <HAL_ADC_ConfigChannel+0x260>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9a      	lsrs	r2, r3, #18
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002454:	e002      	b.n	800245c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3b01      	subs	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f9      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40012300 	.word	0x40012300
 800247c:	40012000 	.word	0x40012000
 8002480:	10000012 	.word	0x10000012
 8002484:	20000030 	.word	0x20000030
 8002488:	431bde83 	.word	0x431bde83

0800248c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002494:	4b79      	ldr	r3, [pc, #484]	@ (800267c <ADC_Init+0x1f0>)
 8002496:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	021a      	lsls	r2, r3, #8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251e:	4a58      	ldr	r2, [pc, #352]	@ (8002680 <ADC_Init+0x1f4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002532:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	e00f      	b.n	800258a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002588:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0202 	bic.w	r2, r2, #2
 8002598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7e1b      	ldrb	r3, [r3, #24]
 80025a4:	005a      	lsls	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	3b01      	subs	r3, #1
 80025e4:	035a      	lsls	r2, r3, #13
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e007      	b.n	8002600 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800260e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	3b01      	subs	r3, #1
 800261c:	051a      	lsls	r2, r3, #20
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002642:	025a      	lsls	r2, r3, #9
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6899      	ldr	r1, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	029a      	lsls	r2, r3, #10
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40012300 	.word	0x40012300
 8002680:	0f000001 	.word	0x0f000001

08002684 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800269a:	2b00      	cmp	r3, #0
 800269c:	d13c      	bne.n	8002718 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d12b      	bne.n	8002710 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d127      	bne.n	8002710 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d119      	bne.n	8002710 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0220 	bic.w	r2, r2, #32
 80026ea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7fd fef7 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002716:	e00e      	b.n	8002736 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff fd75 	bl	8002214 <HAL_ADC_ErrorCallback>
}
 800272a:	e004      	b.n	8002736 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff fd4d 	bl	80021ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f043 0204 	orr.w	r2, r3, #4
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff fd4a 	bl	8002214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	@ (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	@ (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	@ (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f7ff ff8e 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff29 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002964:	f7ff ff3e 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7ff ff8e 	bl	8002890 <NVIC_EncodePriority>
 8002974:	4602      	mov	r2, r0
 8002976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5d 	bl	800283c <__NVIC_SetPriority>
}
 8002982:	bf00      	nop
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff31 	bl	8002800 <__NVIC_EnableIRQ>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffa2 	bl	80028f8 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff f996 	bl	8001cfc <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e099      	b.n	8002b10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fc:	e00f      	b.n	8002a1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029fe:	f7ff f97d 	bl	8001cfc <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b05      	cmp	r3, #5
 8002a0a:	d908      	bls.n	8002a1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2203      	movs	r2, #3
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e078      	b.n	8002b10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e8      	bne.n	80029fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4b38      	ldr	r3, [pc, #224]	@ (8002b18 <HAL_DMA_Init+0x158>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d107      	bne.n	8002a88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a80:	4313      	orrs	r3, r2
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0307 	bic.w	r3, r3, #7
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d117      	bne.n	8002ae2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 faab 	bl	8003020 <DMA_CheckFifoParam>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2240      	movs	r2, #64	@ 0x40
 8002ad4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e016      	b.n	8002b10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa62 	bl	8002fb4 <DMA_CalcBaseAndBitshift>
 8002af0:	4603      	mov	r3, r0
 8002af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	223f      	movs	r2, #63	@ 0x3f
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	f010803f 	.word	0xf010803f

08002b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_DMA_Start_IT+0x26>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e040      	b.n	8002bc4 <HAL_DMA_Start_IT+0xa8>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d12f      	bne.n	8002bb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f9f4 	bl	8002f58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b74:	223f      	movs	r2, #63	@ 0x3f
 8002b76:	409a      	lsls	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0216 	orr.w	r2, r2, #22
 8002b8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0208 	orr.w	r2, r2, #8
 8002ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e005      	b.n	8002bc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d004      	beq.n	8002bea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2280      	movs	r2, #128	@ 0x80
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00c      	b.n	8002c04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2205      	movs	r2, #5
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c1c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e58 <HAL_DMA_IRQHandler+0x248>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a8e      	ldr	r2, [pc, #568]	@ (8002e5c <HAL_DMA_IRQHandler+0x24c>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0a9b      	lsrs	r3, r3, #10
 8002c28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0204 	bic.w	r2, r2, #4
 8002c62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	2208      	movs	r2, #8
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	2201      	movs	r2, #1
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce0:	f043 0204 	orr.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cec:	2210      	movs	r2, #16
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d043      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d03c      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d018      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d108      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d024      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
 8002d3e:	e01f      	b.n	8002d80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01b      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
 8002d50:	e016      	b.n	8002d80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0208 	bic.w	r2, r2, #8
 8002d6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	2220      	movs	r2, #32
 8002d86:	409a      	lsls	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 808f 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8087 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	2220      	movs	r2, #32
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d136      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0216 	bic.w	r2, r2, #22
 8002dc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <HAL_DMA_IRQHandler+0x1da>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0208 	bic.w	r2, r2, #8
 8002df8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	223f      	movs	r2, #63	@ 0x3f
 8002e00:	409a      	lsls	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d07e      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
        }
        return;
 8002e26:	e079      	b.n	8002f1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01d      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d031      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
 8002e54:	e02c      	b.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
 8002e56:	bf00      	nop
 8002e58:	20000030 	.word	0x20000030
 8002e5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d023      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4798      	blx	r3
 8002e70:	e01e      	b.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10f      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0210 	bic.w	r2, r2, #16
 8002e8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d032      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d022      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d307      	bcc.n	8002ef8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f2      	bne.n	8002edc <HAL_DMA_IRQHandler+0x2cc>
 8002ef6:	e000      	b.n	8002efa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ef8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
 8002f1a:	e000      	b.n	8002f1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f1c:	bf00      	nop
    }
  }
}
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f32:	b2db      	uxtb	r3, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	d108      	bne.n	8002f98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f96:	e007      	b.n	8002fa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3b10      	subs	r3, #16
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <DMA_CalcBaseAndBitshift+0x64>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fce:	4a13      	ldr	r2, [pc, #76]	@ (800301c <DMA_CalcBaseAndBitshift+0x68>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d909      	bls.n	8002ff6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	1d1a      	adds	r2, r3, #4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ff4:	e007      	b.n	8003006 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	aaaaaaab 	.word	0xaaaaaaab
 800301c:	0800ca6c 	.word	0x0800ca6c

08003020 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11f      	bne.n	800307a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d856      	bhi.n	80030ee <DMA_CheckFifoParam+0xce>
 8003040:	a201      	add	r2, pc, #4	@ (adr r2, 8003048 <DMA_CheckFifoParam+0x28>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003059 	.word	0x08003059
 800304c:	0800306b 	.word	0x0800306b
 8003050:	08003059 	.word	0x08003059
 8003054:	080030ef 	.word	0x080030ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d046      	beq.n	80030f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e043      	b.n	80030f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003072:	d140      	bne.n	80030f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003078:	e03d      	b.n	80030f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003082:	d121      	bne.n	80030c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d837      	bhi.n	80030fa <DMA_CheckFifoParam+0xda>
 800308a:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <DMA_CheckFifoParam+0x70>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030a7 	.word	0x080030a7
 8003098:	080030a1 	.word	0x080030a1
 800309c:	080030b9 	.word	0x080030b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	e030      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d025      	beq.n	80030fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b6:	e022      	b.n	80030fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030c0:	d11f      	bne.n	8003102 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030c6:	e01c      	b.n	8003102 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d903      	bls.n	80030d6 <DMA_CheckFifoParam+0xb6>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d003      	beq.n	80030dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030d4:	e018      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      break;
 80030da:	e015      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e00b      	b.n	8003106 <DMA_CheckFifoParam+0xe6>
      break;
 80030ee:	bf00      	nop
 80030f0:	e00a      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e008      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e006      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
 80030fc:	e004      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
 8003100:	e002      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;   
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 8003106:	bf00      	nop
    }
  } 
  
  return status; 
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop

08003118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	@ 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	e159      	b.n	80033e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003134:	2201      	movs	r2, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	f040 8148 	bne.w	80033e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d005      	beq.n	800316a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003166:	2b02      	cmp	r3, #2
 8003168:	d130      	bne.n	80031cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2203      	movs	r2, #3
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a0:	2201      	movs	r2, #1
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 0201 	and.w	r2, r3, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d017      	beq.n	8003208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d123      	bne.n	800325c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	69b9      	ldr	r1, [r7, #24]
 8003258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0203 	and.w	r2, r3, #3
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a2 	beq.w	80033e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b57      	ldr	r3, [pc, #348]	@ (8003400 <HAL_GPIO_Init+0x2e8>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	4a56      	ldr	r2, [pc, #344]	@ (8003400 <HAL_GPIO_Init+0x2e8>)
 80032a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ae:	4b54      	ldr	r3, [pc, #336]	@ (8003400 <HAL_GPIO_Init+0x2e8>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ba:	4a52      	ldr	r2, [pc, #328]	@ (8003404 <HAL_GPIO_Init+0x2ec>)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	3302      	adds	r3, #2
 80032c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	220f      	movs	r2, #15
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a49      	ldr	r2, [pc, #292]	@ (8003408 <HAL_GPIO_Init+0x2f0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d019      	beq.n	800331a <HAL_GPIO_Init+0x202>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a48      	ldr	r2, [pc, #288]	@ (800340c <HAL_GPIO_Init+0x2f4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0x1fe>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a47      	ldr	r2, [pc, #284]	@ (8003410 <HAL_GPIO_Init+0x2f8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00d      	beq.n	8003312 <HAL_GPIO_Init+0x1fa>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a46      	ldr	r2, [pc, #280]	@ (8003414 <HAL_GPIO_Init+0x2fc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <HAL_GPIO_Init+0x1f6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a45      	ldr	r2, [pc, #276]	@ (8003418 <HAL_GPIO_Init+0x300>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_GPIO_Init+0x1f2>
 8003306:	2304      	movs	r3, #4
 8003308:	e008      	b.n	800331c <HAL_GPIO_Init+0x204>
 800330a:	2307      	movs	r3, #7
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x204>
 800330e:	2303      	movs	r3, #3
 8003310:	e004      	b.n	800331c <HAL_GPIO_Init+0x204>
 8003312:	2302      	movs	r3, #2
 8003314:	e002      	b.n	800331c <HAL_GPIO_Init+0x204>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_GPIO_Init+0x204>
 800331a:	2300      	movs	r3, #0
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f002 0203 	and.w	r2, r2, #3
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	4093      	lsls	r3, r2
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800332c:	4935      	ldr	r1, [pc, #212]	@ (8003404 <HAL_GPIO_Init+0x2ec>)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333a:	4b38      	ldr	r3, [pc, #224]	@ (800341c <HAL_GPIO_Init+0x304>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800335e:	4a2f      	ldr	r2, [pc, #188]	@ (800341c <HAL_GPIO_Init+0x304>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003364:	4b2d      	ldr	r3, [pc, #180]	@ (800341c <HAL_GPIO_Init+0x304>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003388:	4a24      	ldr	r2, [pc, #144]	@ (800341c <HAL_GPIO_Init+0x304>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800338e:	4b23      	ldr	r3, [pc, #140]	@ (800341c <HAL_GPIO_Init+0x304>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b2:	4a1a      	ldr	r2, [pc, #104]	@ (800341c <HAL_GPIO_Init+0x304>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033b8:	4b18      	ldr	r3, [pc, #96]	@ (800341c <HAL_GPIO_Init+0x304>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033dc:	4a0f      	ldr	r2, [pc, #60]	@ (800341c <HAL_GPIO_Init+0x304>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3301      	adds	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	f67f aea2 	bls.w	8003134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3724      	adds	r7, #36	@ 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	40013800 	.word	0x40013800
 8003408:	40020000 	.word	0x40020000
 800340c:	40020400 	.word	0x40020400
 8003410:	40020800 	.word	0x40020800
 8003414:	40020c00 	.word	0x40020c00
 8003418:	40021000 	.word	0x40021000
 800341c:	40013c00 	.word	0x40013c00

08003420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
 800342c:	4613      	mov	r3, r2
 800342e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003430:	787b      	ldrb	r3, [r7, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800343c:	e003      	b.n	8003446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	041a      	lsls	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	619a      	str	r2, [r3, #24]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003464:	887a      	ldrh	r2, [r7, #2]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	041a      	lsls	r2, r3, #16
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	43d9      	mvns	r1, r3
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	400b      	ands	r3, r1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	619a      	str	r2, [r3, #24]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e12b      	b.n	80036f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd ff90 	bl	80013d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	@ 0x24
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034ec:	f004 fa78 	bl	80079e0 <HAL_RCC_GetPCLK1Freq>
 80034f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4a81      	ldr	r2, [pc, #516]	@ (80036fc <HAL_I2C_Init+0x274>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d807      	bhi.n	800350c <HAL_I2C_Init+0x84>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a80      	ldr	r2, [pc, #512]	@ (8003700 <HAL_I2C_Init+0x278>)
 8003500:	4293      	cmp	r3, r2
 8003502:	bf94      	ite	ls
 8003504:	2301      	movls	r3, #1
 8003506:	2300      	movhi	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e006      	b.n	800351a <HAL_I2C_Init+0x92>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a7d      	ldr	r2, [pc, #500]	@ (8003704 <HAL_I2C_Init+0x27c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	bf94      	ite	ls
 8003514:	2301      	movls	r3, #1
 8003516:	2300      	movhi	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0e7      	b.n	80036f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a78      	ldr	r2, [pc, #480]	@ (8003708 <HAL_I2C_Init+0x280>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0c9b      	lsrs	r3, r3, #18
 800352c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4a6a      	ldr	r2, [pc, #424]	@ (80036fc <HAL_I2C_Init+0x274>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d802      	bhi.n	800355c <HAL_I2C_Init+0xd4>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3301      	adds	r3, #1
 800355a:	e009      	b.n	8003570 <HAL_I2C_Init+0xe8>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	4a69      	ldr	r2, [pc, #420]	@ (800370c <HAL_I2C_Init+0x284>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	3301      	adds	r3, #1
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003582:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	495c      	ldr	r1, [pc, #368]	@ (80036fc <HAL_I2C_Init+0x274>)
 800358c:	428b      	cmp	r3, r1
 800358e:	d819      	bhi.n	80035c4 <HAL_I2C_Init+0x13c>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e59      	subs	r1, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fbb1 f3f3 	udiv	r3, r1, r3
 800359e:	1c59      	adds	r1, r3, #1
 80035a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035a4:	400b      	ands	r3, r1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_I2C_Init+0x138>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1e59      	subs	r1, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	e051      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 80035c0:	2304      	movs	r3, #4
 80035c2:	e04f      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d111      	bne.n	80035f0 <HAL_I2C_Init+0x168>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	440b      	add	r3, r1
 80035da:	fbb0 f3f3 	udiv	r3, r0, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e012      	b.n	8003616 <HAL_I2C_Init+0x18e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e58      	subs	r0, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	0099      	lsls	r1, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	fbb0 f3f3 	udiv	r3, r0, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Init+0x196>
 800361a:	2301      	movs	r3, #1
 800361c:	e022      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10e      	bne.n	8003644 <HAL_I2C_Init+0x1bc>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1e58      	subs	r0, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	440b      	add	r3, r1
 8003634:	fbb0 f3f3 	udiv	r3, r0, r3
 8003638:	3301      	adds	r3, #1
 800363a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003642:	e00f      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e58      	subs	r0, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	0099      	lsls	r1, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	6809      	ldr	r1, [r1, #0]
 8003668:	4313      	orrs	r3, r2
 800366a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6911      	ldr	r1, [r2, #16]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68d2      	ldr	r2, [r2, #12]
 800369e:	4311      	orrs	r1, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	000186a0 	.word	0x000186a0
 8003700:	001e847f 	.word	0x001e847f
 8003704:	003d08ff 	.word	0x003d08ff
 8003708:	431bde83 	.word	0x431bde83
 800370c:	10624dd3 	.word	0x10624dd3

08003710 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b80      	cmp	r3, #128	@ 0x80
 8003724:	d103      	bne.n	800372e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
  }
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	460b      	mov	r3, r1
 8003750:	813b      	strh	r3, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003756:	f7fe fad1 	bl	8001cfc <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 80d9 	bne.w	800391c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2319      	movs	r3, #25
 8003770:	2201      	movs	r2, #1
 8003772:	496d      	ldr	r1, [pc, #436]	@ (8003928 <HAL_I2C_Mem_Write+0x1ec>)
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f002 f88b 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
 8003782:	e0cc      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Mem_Write+0x56>
 800378e:	2302      	movs	r3, #2
 8003790:	e0c5      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2221      	movs	r2, #33	@ 0x21
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	@ 0x40
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a4d      	ldr	r2, [pc, #308]	@ (800392c <HAL_I2C_Mem_Write+0x1f0>)
 80037f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037fa:	88f8      	ldrh	r0, [r7, #6]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f001 fde6 	bl	80053dc <I2C_RequestMemoryWrite>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d052      	beq.n	80038bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e081      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f002 f950 	bl	8005ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2b04      	cmp	r3, #4
 8003830:	d107      	bne.n	8003842 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06b      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11b      	bne.n	80038bc <HAL_I2C_Mem_Write+0x180>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d017      	beq.n	80038bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1aa      	bne.n	800381a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f002 f943 	bl	8005b54 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d107      	bne.n	80038ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e016      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	00100002 	.word	0x00100002
 800392c:	ffff0000 	.word	0xffff0000

08003930 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	@ 0x28
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	817b      	strh	r3, [r7, #10]
 8003942:	460b      	mov	r3, r1
 8003944:	813b      	strh	r3, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394e:	f7fe f9d5 	bl	8001cfc <HAL_GetTick>
 8003952:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b20      	cmp	r3, #32
 800395e:	f040 8136 	bne.w	8003bce <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003962:	4b9d      	ldr	r3, [pc, #628]	@ (8003bd8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	08db      	lsrs	r3, r3, #3
 8003968:	4a9c      	ldr	r2, [pc, #624]	@ (8003bdc <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0a1a      	lsrs	r2, r3, #8
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009a      	lsls	r2, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3b01      	subs	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d112      	bne.n	80039ae <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
 80039ac:	e110      	b.n	8003bd0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d0df      	beq.n	800397c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_I2C_Mem_Write_DMA+0x9a>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e102      	b.n	8003bd0 <HAL_I2C_Mem_Write_DMA+0x2a0>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d007      	beq.n	80039f0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2221      	movs	r2, #33	@ 0x21
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2240      	movs	r2, #64	@ 0x40
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003be0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003a30:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003a32:	897a      	ldrh	r2, [r7, #10]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003a38:	893a      	ldrh	r2, [r7, #8]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80a9 	beq.w	8003ba6 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02a      	beq.n	8003ab2 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	4a60      	ldr	r2, [pc, #384]	@ (8003be4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003a62:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	4a5f      	ldr	r2, [pc, #380]	@ (8003be8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003a6a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a70:	2200      	movs	r2, #0
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a78:	2200      	movs	r2, #0
 8003a7a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a80:	2200      	movs	r2, #0
 8003a82:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a88:	2200      	movs	r2, #0
 8003a8a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	4619      	mov	r1, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3310      	adds	r3, #16
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	f7ff f83b 	bl	8002b1c <HAL_DMA_Start_IT>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003aaa:	7efb      	ldrb	r3, [r7, #27]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d166      	bne.n	8003b7e <HAL_I2C_Mem_Write_DMA+0x24e>
 8003ab0:	e013      	b.n	8003ada <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e07a      	b.n	8003bd0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003ada:	88f8      	ldrh	r0, [r7, #6]
 8003adc:	893a      	ldrh	r2, [r7, #8]
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2323      	movs	r3, #35	@ 0x23
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4603      	mov	r3, r0
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f001 fc76 	bl	80053dc <I2C_RequestMemoryWrite>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d022      	beq.n	8003b3c <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff f866 	bl	8002bcc <HAL_DMA_Abort_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b08:	2200      	movs	r2, #0
 8003b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e049      	b.n	8003bd0 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b68:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b78:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e028      	b.n	8003bd0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f043 0210 	orr.w	r2, r3, #16
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e014      	b.n	8003bd0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000030 	.word	0x20000030
 8003bdc:	14f8b589 	.word	0x14f8b589
 8003be0:	ffff0000 	.word	0xffff0000
 8003be4:	08005509 	.word	0x08005509
 8003be8:	080056c7 	.word	0x080056c7

08003bec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c14:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d003      	beq.n	8003c24 <HAL_I2C_EV_IRQHandler+0x38>
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b40      	cmp	r3, #64	@ 0x40
 8003c20:	f040 80c1 	bne.w	8003da6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <HAL_I2C_EV_IRQHandler+0x6e>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003c44:	d003      	beq.n	8003c4e <HAL_I2C_EV_IRQHandler+0x62>
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2C_EV_IRQHandler+0x66>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_I2C_EV_IRQHandler+0x68>
 8003c52:	2300      	movs	r3, #0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	f000 8132 	beq.w	8003ebe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x92>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	0a5b      	lsrs	r3, r3, #9
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d006      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f002 f818 	bl	8005ca6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fd91 	bl	800479e <I2C_Master_SB>
 8003c7c:	e092      	b.n	8003da4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_I2C_EV_IRQHandler+0xb2>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	0a5b      	lsrs	r3, r3, #9
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fe07 	bl	80048aa <I2C_Master_ADD10>
 8003c9c:	e082      	b.n	8003da4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_I2C_EV_IRQHandler+0xd2>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fe21 	bl	80048fe <I2C_Master_ADDR>
 8003cbc:	e072      	b.n	8003da4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d03b      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd8:	f000 80f3 	beq.w	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	09db      	lsrs	r3, r3, #7
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00f      	beq.n	8003d08 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	0a9b      	lsrs	r3, r3, #10
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <HAL_I2C_EV_IRQHandler+0x11c>
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f9e9 	bl	80040d8 <I2C_MasterTransmit_TXE>
 8003d06:	e04d      	b.n	8003da4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80d6 	beq.w	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	0a5b      	lsrs	r3, r3, #9
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80cf 	beq.w	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d24:	7bbb      	ldrb	r3, [r7, #14]
 8003d26:	2b21      	cmp	r3, #33	@ 0x21
 8003d28:	d103      	bne.n	8003d32 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa70 	bl	8004210 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d30:	e0c7      	b.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b40      	cmp	r3, #64	@ 0x40
 8003d36:	f040 80c4 	bne.w	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fade 	bl	80042fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d40:	e0bf      	b.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d50:	f000 80b7 	beq.w	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00f      	beq.n	8003d80 <HAL_I2C_EV_IRQHandler+0x194>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_I2C_EV_IRQHandler+0x194>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fb57 	bl	800442c <I2C_MasterReceive_RXNE>
 8003d7e:	e011      	b.n	8003da4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 809a 	beq.w	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	0a5b      	lsrs	r3, r3, #9
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8093 	beq.w	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fc0d 	bl	80045bc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da2:	e08e      	b.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003da4:	e08d      	b.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e007      	b.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d012      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0x20e>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	0a5b      	lsrs	r3, r3, #9
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00c      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003df0:	69b9      	ldr	r1, [r7, #24]
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 ffd2 	bl	8004d9c <I2C_Slave_ADDR>
 8003df8:	e066      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_I2C_EV_IRQHandler+0x22e>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	0a5b      	lsrs	r3, r3, #9
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f001 f80c 	bl	8004e30 <I2C_Slave_STOPF>
 8003e18:	e056      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e1a:	7bbb      	ldrb	r3, [r7, #14]
 8003e1c:	2b21      	cmp	r3, #33	@ 0x21
 8003e1e:	d002      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x23a>
 8003e20:	7bbb      	ldrb	r3, [r7, #14]
 8003e22:	2b29      	cmp	r3, #41	@ 0x29
 8003e24:	d125      	bne.n	8003e72 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	09db      	lsrs	r3, r3, #7
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00f      	beq.n	8003e52 <HAL_I2C_EV_IRQHandler+0x266>
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	0a9b      	lsrs	r3, r3, #10
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_I2C_EV_IRQHandler+0x266>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fee8 	bl	8004c20 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e50:	e039      	b.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d033      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x2da>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	0a5b      	lsrs	r3, r3, #9
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02d      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 ff15 	bl	8004c9a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e70:	e029      	b.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00f      	beq.n	8003e9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	0a9b      	lsrs	r3, r3, #10
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 ff20 	bl	8004cdc <I2C_SlaveReceive_RXNE>
 8003e9c:	e014      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	0a5b      	lsrs	r3, r3, #9
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 ff4e 	bl	8004d58 <I2C_SlaveReceive_BTF>
 8003ebc:	e004      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ec6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b08a      	sub	sp, #40	@ 0x28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ef0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00e      	beq.n	8003f1c <HAL_I2C_ER_IRQHandler+0x4e>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f1a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	0a5b      	lsrs	r3, r3, #9
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00e      	beq.n	8003f46 <HAL_I2C_ER_IRQHandler+0x78>
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	f043 0302 	orr.w	r3, r3, #2
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003f44:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	0a9b      	lsrs	r3, r3, #10
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d03f      	beq.n	8003fd2 <HAL_I2C_ER_IRQHandler+0x104>
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d039      	beq.n	8003fd2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003f5e:	7efb      	ldrb	r3, [r7, #27]
 8003f60:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f70:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f78:	7ebb      	ldrb	r3, [r7, #26]
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d112      	bne.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10f      	bne.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	2b21      	cmp	r3, #33	@ 0x21
 8003f88:	d008      	beq.n	8003f9c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b29      	cmp	r3, #41	@ 0x29
 8003f8e:	d005      	beq.n	8003f9c <HAL_I2C_ER_IRQHandler+0xce>
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	2b28      	cmp	r3, #40	@ 0x28
 8003f94:	d106      	bne.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b21      	cmp	r3, #33	@ 0x21
 8003f9a:	d103      	bne.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f001 f877 	bl	8005090 <I2C_Slave_AF>
 8003fa2:	e016      	b.n	8003fd2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fb6:	7efb      	ldrb	r3, [r7, #27]
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d002      	beq.n	8003fc2 <HAL_I2C_ER_IRQHandler+0xf4>
 8003fbc:	7efb      	ldrb	r3, [r7, #27]
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d107      	bne.n	8003fd2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	0adb      	lsrs	r3, r3, #11
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <HAL_I2C_ER_IRQHandler+0x12e>
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	f043 0308 	orr.w	r3, r3, #8
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003ffa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f001 f8b2 	bl	8005178 <I2C_ITError>
  }
}
 8004014:	bf00      	nop
 8004016:	3728      	adds	r7, #40	@ 0x28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	70fb      	strb	r3, [r7, #3]
 8004078:	4613      	mov	r3, r2
 800407a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d150      	bne.n	80041a0 <I2C_MasterTransmit_TXE+0xc8>
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b21      	cmp	r3, #33	@ 0x21
 8004102:	d14d      	bne.n	80041a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d01d      	beq.n	8004146 <I2C_MasterTransmit_TXE+0x6e>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b20      	cmp	r3, #32
 800410e:	d01a      	beq.n	8004146 <I2C_MasterTransmit_TXE+0x6e>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004116:	d016      	beq.n	8004146 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004126:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2211      	movs	r2, #17
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff ff6c 	bl	800401c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004144:	e060      	b.n	8004208 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004154:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004164:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d107      	bne.n	8004190 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7fc f9db 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800418e:	e03b      	b.n	8004208 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff3f 	bl	800401c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800419e:	e033      	b.n	8004208 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b21      	cmp	r3, #33	@ 0x21
 80041a4:	d005      	beq.n	80041b2 <I2C_MasterTransmit_TXE+0xda>
 80041a6:	7bbb      	ldrb	r3, [r7, #14]
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d12d      	bne.n	8004208 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b22      	cmp	r3, #34	@ 0x22
 80041b0:	d12a      	bne.n	8004208 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d108      	bne.n	80041ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041cc:	e01c      	b.n	8004208 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b40      	cmp	r3, #64	@ 0x40
 80041d8:	d103      	bne.n	80041e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f88e 	bl	80042fc <I2C_MemoryTransmit_TXE_BTF>
}
 80041e0:	e012      	b.n	8004208 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004206:	e7ff      	b.n	8004208 <I2C_MasterTransmit_TXE+0x130>
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b21      	cmp	r3, #33	@ 0x21
 8004228:	d164      	bne.n	80042f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d012      	beq.n	800425a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004258:	e04c      	b.n	80042f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d01d      	beq.n	800429c <I2C_MasterTransmit_BTF+0x8c>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b20      	cmp	r3, #32
 8004264:	d01a      	beq.n	800429c <I2C_MasterTransmit_BTF+0x8c>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800426c:	d016      	beq.n	800429c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800427c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2211      	movs	r2, #17
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fec1 	bl	800401c <HAL_I2C_MasterTxCpltCallback>
}
 800429a:	e02b      	b.n	80042f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b40      	cmp	r3, #64	@ 0x40
 80042d4:	d107      	bne.n	80042e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc f930 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 80042e4:	e006      	b.n	80042f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fe94 	bl	800401c <HAL_I2C_MasterTxCpltCallback>
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11d      	bne.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d10b      	bne.n	8004334 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004320:	b2da      	uxtb	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	1c9a      	adds	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004332:	e077      	b.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004338:	b29b      	uxth	r3, r3
 800433a:	121b      	asrs	r3, r3, #8
 800433c:	b2da      	uxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800434e:	e069      	b.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004354:	2b01      	cmp	r3, #1
 8004356:	d10b      	bne.n	8004370 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435c:	b2da      	uxtb	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800436e:	e059      	b.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004374:	2b02      	cmp	r3, #2
 8004376:	d152      	bne.n	800441e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	2b22      	cmp	r3, #34	@ 0x22
 800437c:	d10d      	bne.n	800439a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800438c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004398:	e044      	b.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b21      	cmp	r3, #33	@ 0x21
 80043a8:	d112      	bne.n	80043d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043ce:	e029      	b.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d124      	bne.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b21      	cmp	r3, #33	@ 0x21
 80043de:	d121      	bne.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc f894 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 800441c:	e002      	b.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff f976 	bl	8003710 <I2C_Flush_DR>
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b22      	cmp	r3, #34	@ 0x22
 800443e:	f040 80b9 	bne.w	80045b4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d921      	bls.n	800449a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b03      	cmp	r3, #3
 8004484:	f040 8096 	bne.w	80045b4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004496:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004498:	e08c      	b.n	80045b4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d07f      	beq.n	80045a2 <I2C_MasterReceive_RXNE+0x176>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <I2C_MasterReceive_RXNE+0x82>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d179      	bne.n	80045a2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f001 fb98 	bl	8005be4 <I2C_WaitOnSTOPRequestThroughIT>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d14c      	bne.n	8004554 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d10a      	bne.n	800452a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fdba 	bl	800409c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004528:	e044      	b.n	80045b4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d002      	beq.n	800453e <I2C_MasterReceive_RXNE+0x112>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b20      	cmp	r3, #32
 800453c:	d103      	bne.n	8004546 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
 8004544:	e002      	b.n	800454c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2212      	movs	r2, #18
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff fd6f 	bl	8004030 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004552:	e02f      	b.n	80045b4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004562:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fd88 	bl	80040b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045a0:	e008      	b.n	80045b4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b0:	605a      	str	r2, [r3, #4]
}
 80045b2:	e7ff      	b.n	80045b4 <I2C_MasterReceive_RXNE+0x188>
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d11b      	bne.n	800460c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800460a:	e0c4      	b.n	8004796 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b03      	cmp	r3, #3
 8004614:	d129      	bne.n	800466a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004624:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d00a      	beq.n	8004642 <I2C_MasterReceive_BTF+0x86>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d007      	beq.n	8004642 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004640:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004668:	e095      	b.n	8004796 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d17d      	bne.n	8004770 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d002      	beq.n	8004680 <I2C_MasterReceive_BTF+0xc4>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b10      	cmp	r3, #16
 800467e:	d108      	bne.n	8004692 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e016      	b.n	80046c0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d002      	beq.n	800469e <I2C_MasterReceive_BTF+0xe2>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d108      	bne.n	80046b0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e007      	b.n	80046c0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800471a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b40      	cmp	r3, #64	@ 0x40
 800472e:	d10a      	bne.n	8004746 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff fcac 	bl	800409c <HAL_I2C_MemRxCpltCallback>
}
 8004744:	e027      	b.n	8004796 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d002      	beq.n	800475a <I2C_MasterReceive_BTF+0x19e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b20      	cmp	r3, #32
 8004758:	d103      	bne.n	8004762 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004760:	e002      	b.n	8004768 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2212      	movs	r2, #18
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fc61 	bl	8004030 <HAL_I2C_MasterRxCpltCallback>
}
 800476e:	e012      	b.n	8004796 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b40      	cmp	r3, #64	@ 0x40
 80047b0:	d117      	bne.n	80047e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80047cc:	e067      	b.n	800489e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]
}
 80047e0:	e05d      	b.n	800489e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ea:	d133      	bne.n	8004854 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b21      	cmp	r3, #33	@ 0x21
 80047f6:	d109      	bne.n	800480c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004808:	611a      	str	r2, [r3, #16]
 800480a:	e008      	b.n	800481e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	d004      	beq.n	8004830 <I2C_Master_SB+0x92>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482c:	2b00      	cmp	r3, #0
 800482e:	d108      	bne.n	8004842 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	2b00      	cmp	r3, #0
 8004836:	d032      	beq.n	800489e <I2C_Master_SB+0x100>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02d      	beq.n	800489e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004850:	605a      	str	r2, [r3, #4]
}
 8004852:	e024      	b.n	800489e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10e      	bne.n	800487a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004860:	b29b      	uxth	r3, r3
 8004862:	11db      	asrs	r3, r3, #7
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f003 0306 	and.w	r3, r3, #6
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f063 030f 	orn	r3, r3, #15
 8004870:	b2da      	uxtb	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	611a      	str	r2, [r3, #16]
}
 8004878:	e011      	b.n	800489e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10d      	bne.n	800489e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	b29b      	uxth	r3, r3
 8004888:	11db      	asrs	r3, r3, #7
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f003 0306 	and.w	r3, r3, #6
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f063 030e 	orn	r3, r3, #14
 8004896:	b2da      	uxtb	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	611a      	str	r2, [r3, #16]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <I2C_Master_ADD10+0x26>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <I2C_Master_ADD10+0x48>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048f0:	605a      	str	r2, [r3, #4]
  }
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80048fe:	b480      	push	{r7}
 8004900:	b091      	sub	sp, #68	@ 0x44
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800490c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b22      	cmp	r3, #34	@ 0x22
 8004926:	f040 8169 	bne.w	8004bfc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <I2C_Master_ADDR+0x54>
 8004932:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004936:	2b40      	cmp	r3, #64	@ 0x40
 8004938:	d10b      	bne.n	8004952 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493a:	2300      	movs	r3, #0
 800493c:	633b      	str	r3, [r7, #48]	@ 0x30
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	633b      	str	r3, [r7, #48]	@ 0x30
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	633b      	str	r3, [r7, #48]	@ 0x30
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	e160      	b.n	8004c14 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <I2C_Master_ADDR+0x98>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004962:	d118      	bne.n	8004996 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004964:	2300      	movs	r3, #0
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004988:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	651a      	str	r2, [r3, #80]	@ 0x50
 8004994:	e13e      	b.n	8004c14 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d113      	bne.n	80049c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a0:	2300      	movs	r3, #0
 80049a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e115      	b.n	8004bf4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	f040 808a 	bne.w	8004ae8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049da:	d137      	bne.n	8004a4c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049fa:	d113      	bne.n	8004a24 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a0a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	e0e7      	b.n	8004bf4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	623b      	str	r3, [r7, #32]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	623b      	str	r3, [r7, #32]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e0d3      	b.n	8004bf4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d02e      	beq.n	8004ab0 <I2C_Master_ADDR+0x1b2>
 8004a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d02b      	beq.n	8004ab0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5a:	2b12      	cmp	r3, #18
 8004a5c:	d102      	bne.n	8004a64 <I2C_Master_ADDR+0x166>
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d125      	bne.n	8004ab0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d00e      	beq.n	8004a88 <I2C_Master_ADDR+0x18a>
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d00b      	beq.n	8004a88 <I2C_Master_ADDR+0x18a>
 8004a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a72:	2b10      	cmp	r3, #16
 8004a74:	d008      	beq.n	8004a88 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e007      	b.n	8004a98 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a96:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	e0a1      	b.n	8004bf4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004abe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e085      	b.n	8004bf4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d14d      	bne.n	8004b8e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d016      	beq.n	8004b26 <I2C_Master_ADDR+0x228>
 8004af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d013      	beq.n	8004b26 <I2C_Master_ADDR+0x228>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d010      	beq.n	8004b26 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b12:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e007      	b.n	8004b36 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b34:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b44:	d117      	bne.n	8004b76 <I2C_Master_ADDR+0x278>
 8004b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b4c:	d00b      	beq.n	8004b66 <I2C_Master_ADDR+0x268>
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d008      	beq.n	8004b66 <I2C_Master_ADDR+0x268>
 8004b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d005      	beq.n	8004b66 <I2C_Master_ADDR+0x268>
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d002      	beq.n	8004b66 <I2C_Master_ADDR+0x268>
 8004b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d107      	bne.n	8004b76 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	e032      	b.n	8004bf4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bac:	d117      	bne.n	8004bde <I2C_Master_ADDR+0x2e0>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bb4:	d00b      	beq.n	8004bce <I2C_Master_ADDR+0x2d0>
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d008      	beq.n	8004bce <I2C_Master_ADDR+0x2d0>
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d005      	beq.n	8004bce <I2C_Master_ADDR+0x2d0>
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d002      	beq.n	8004bce <I2C_Master_ADDR+0x2d0>
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d107      	bne.n	8004bde <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bdc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004bfa:	e00b      	b.n	8004c14 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
}
 8004c12:	e7ff      	b.n	8004c14 <I2C_Master_ADDR+0x316>
 8004c14:	bf00      	nop
 8004c16:	3744      	adds	r7, #68	@ 0x44
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d02b      	beq.n	8004c92 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	781a      	ldrb	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d114      	bne.n	8004c92 <I2C_SlaveTransmit_TXE+0x72>
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b29      	cmp	r3, #41	@ 0x29
 8004c6c:	d111      	bne.n	8004c92 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2221      	movs	r2, #33	@ 0x21
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2228      	movs	r2, #40	@ 0x28
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff f9d9 	bl	8004044 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d02c      	beq.n	8004d50 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d114      	bne.n	8004d50 <I2C_SlaveReceive_RXNE+0x74>
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d2a:	d111      	bne.n	8004d50 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2222      	movs	r2, #34	@ 0x22
 8004d40:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2228      	movs	r2, #40	@ 0x28
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff f984 	bl	8004058 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d012      	beq.n	8004d90 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004db6:	2b28      	cmp	r3, #40	@ 0x28
 8004db8:	d127      	bne.n	8004e0a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	089b      	lsrs	r3, r3, #2
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	81bb      	strh	r3, [r7, #12]
 8004dec:	e002      	b.n	8004df4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004dfc:	89ba      	ldrh	r2, [r7, #12]
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff f932 	bl	800406c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e08:	e00e      	b.n	8004e28 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e50:	2300      	movs	r3, #0
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8c:	d172      	bne.n	8004f74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b22      	cmp	r3, #34	@ 0x22
 8004e92:	d002      	beq.n	8004e9a <I2C_Slave_STOPF+0x6a>
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e98:	d135      	bne.n	8004f06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ecc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe f826 	bl	8002f24 <HAL_DMA_GetState>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d049      	beq.n	8004f72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee2:	4a69      	ldr	r2, [pc, #420]	@ (8005088 <I2C_Slave_STOPF+0x258>)
 8004ee4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fd fe6e 	bl	8002bcc <HAL_DMA_Abort_IT>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d03d      	beq.n	8004f72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f00:	4610      	mov	r0, r2
 8004f02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f04:	e035      	b.n	8004f72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f043 0204 	orr.w	r2, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fd fff0 	bl	8002f24 <HAL_DMA_GetState>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d014      	beq.n	8004f74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8005088 <I2C_Slave_STOPF+0x258>)
 8004f50:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fd fe38 	bl	8002bcc <HAL_DMA_Abort_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4798      	blx	r3
 8004f70:	e000      	b.n	8004f74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d03e      	beq.n	8004ffc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d112      	bne.n	8004fb2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b40      	cmp	r3, #64	@ 0x40
 8004fbe:	d112      	bne.n	8004fe6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	f043 0204 	orr.w	r2, r3, #4
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f8b7 	bl	8005178 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800500a:	e039      	b.n	8005080 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005010:	d109      	bne.n	8005026 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2228      	movs	r2, #40	@ 0x28
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff f819 	bl	8004058 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b28      	cmp	r3, #40	@ 0x28
 8005030:	d111      	bne.n	8005056 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a15      	ldr	r2, [pc, #84]	@ (800508c <I2C_Slave_STOPF+0x25c>)
 8005036:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff f81a 	bl	8004088 <HAL_I2C_ListenCpltCallback>
}
 8005054:	e014      	b.n	8005080 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505a:	2b22      	cmp	r3, #34	@ 0x22
 800505c:	d002      	beq.n	8005064 <I2C_Slave_STOPF+0x234>
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b22      	cmp	r3, #34	@ 0x22
 8005062:	d10d      	bne.n	8005080 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fe ffec 	bl	8004058 <HAL_I2C_SlaveRxCpltCallback>
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08005741 	.word	0x08005741
 800508c:	ffff0000 	.word	0xffff0000

08005090 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d002      	beq.n	80050b2 <I2C_Slave_AF+0x22>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d129      	bne.n	8005106 <I2C_Slave_AF+0x76>
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b28      	cmp	r3, #40	@ 0x28
 80050b6:	d126      	bne.n	8005106 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005174 <I2C_Slave_AF+0xe4>)
 80050bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fe ffc2 	bl	8004088 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005104:	e031      	b.n	800516a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b21      	cmp	r3, #33	@ 0x21
 800510a:	d129      	bne.n	8005160 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a19      	ldr	r2, [pc, #100]	@ (8005174 <I2C_Slave_AF+0xe4>)
 8005110:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2221      	movs	r2, #33	@ 0x21
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005136:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005140:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005150:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fe fadc 	bl	8003710 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fe ff73 	bl	8004044 <HAL_I2C_SlaveTxCpltCallback>
}
 800515e:	e004      	b.n	800516a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005168:	615a      	str	r2, [r3, #20]
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	ffff0000 	.word	0xffff0000

08005178 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005186:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800518e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	2b10      	cmp	r3, #16
 8005194:	d002      	beq.n	800519c <I2C_ITError+0x24>
 8005196:	7bbb      	ldrb	r3, [r7, #14]
 8005198:	2b40      	cmp	r3, #64	@ 0x40
 800519a:	d10a      	bne.n	80051b2 <I2C_ITError+0x3a>
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b22      	cmp	r3, #34	@ 0x22
 80051a0:	d107      	bne.n	80051b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051b8:	2b28      	cmp	r3, #40	@ 0x28
 80051ba:	d107      	bne.n	80051cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2228      	movs	r2, #40	@ 0x28
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051ca:	e015      	b.n	80051f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051da:	d00a      	beq.n	80051f2 <I2C_ITError+0x7a>
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b60      	cmp	r3, #96	@ 0x60
 80051e0:	d007      	beq.n	80051f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005206:	d162      	bne.n	80052ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005216:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b01      	cmp	r3, #1
 8005224:	d020      	beq.n	8005268 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522a:	4a6a      	ldr	r2, [pc, #424]	@ (80053d4 <I2C_ITError+0x25c>)
 800522c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd fcca 	bl	8002bcc <HAL_DMA_Abort_IT>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8089 	beq.w	8005352 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005262:	4610      	mov	r0, r2
 8005264:	4798      	blx	r3
 8005266:	e074      	b.n	8005352 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	4a59      	ldr	r2, [pc, #356]	@ (80053d4 <I2C_ITError+0x25c>)
 800526e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	4618      	mov	r0, r3
 8005276:	f7fd fca9 	bl	8002bcc <HAL_DMA_Abort_IT>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d068      	beq.n	8005352 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528a:	2b40      	cmp	r3, #64	@ 0x40
 800528c:	d10b      	bne.n	80052a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052c8:	4610      	mov	r0, r2
 80052ca:	4798      	blx	r3
 80052cc:	e041      	b.n	8005352 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b60      	cmp	r3, #96	@ 0x60
 80052d8:	d125      	bne.n	8005326 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f2:	2b40      	cmp	r3, #64	@ 0x40
 80052f4:	d10b      	bne.n	800530e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fe fed0 	bl	80040c4 <HAL_I2C_AbortCpltCallback>
 8005324:	e015      	b.n	8005352 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005330:	2b40      	cmp	r3, #64	@ 0x40
 8005332:	d10b      	bne.n	800534c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fe feaf 	bl	80040b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10e      	bne.n	8005380 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005368:	2b00      	cmp	r3, #0
 800536a:	d109      	bne.n	8005380 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800538e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005396:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d113      	bne.n	80053cc <I2C_ITError+0x254>
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b28      	cmp	r3, #40	@ 0x28
 80053a8:	d110      	bne.n	80053cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a0a      	ldr	r2, [pc, #40]	@ (80053d8 <I2C_ITError+0x260>)
 80053ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fe fe5e 	bl	8004088 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	08005741 	.word	0x08005741
 80053d8:	ffff0000 	.word	0xffff0000

080053dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	817b      	strh	r3, [r7, #10]
 80053ee:	460b      	mov	r3, r1
 80053f0:	813b      	strh	r3, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005404:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	2200      	movs	r2, #0
 800540e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fa3c 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00d      	beq.n	800543a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800542c:	d103      	bne.n	8005436 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005434:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e05f      	b.n	80054fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005448:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	492d      	ldr	r1, [pc, #180]	@ (8005504 <I2C_RequestMemoryWrite+0x128>)
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 fa97 	bl	8005984 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e04c      	b.n	80054fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005478:	6a39      	ldr	r1, [r7, #32]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fb22 	bl	8005ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	2b04      	cmp	r3, #4
 800548c:	d107      	bne.n	800549e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e02b      	b.n	80054fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d105      	bne.n	80054b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a8:	893b      	ldrh	r3, [r7, #8]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	611a      	str	r2, [r3, #16]
 80054b2:	e021      	b.n	80054f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c4:	6a39      	ldr	r1, [r7, #32]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fafc 	bl	8005ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d107      	bne.n	80054ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e005      	b.n	80054fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ee:	893b      	ldrh	r3, [r7, #8]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	00010002 	.word	0x00010002

08005508 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800551c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005524:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800553a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005548:	2200      	movs	r2, #0
 800554a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	2200      	movs	r2, #0
 800555a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800555c:	7cfb      	ldrb	r3, [r7, #19]
 800555e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005562:	2b21      	cmp	r3, #33	@ 0x21
 8005564:	d007      	beq.n	8005576 <I2C_DMAXferCplt+0x6e>
 8005566:	7cfb      	ldrb	r3, [r7, #19]
 8005568:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800556c:	2b22      	cmp	r3, #34	@ 0x22
 800556e:	d131      	bne.n	80055d4 <I2C_DMAXferCplt+0xcc>
 8005570:	7cbb      	ldrb	r3, [r7, #18]
 8005572:	2b20      	cmp	r3, #32
 8005574:	d12e      	bne.n	80055d4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005584:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	2b29      	cmp	r3, #41	@ 0x29
 8005590:	d10a      	bne.n	80055a8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2221      	movs	r2, #33	@ 0x21
 8005596:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2228      	movs	r2, #40	@ 0x28
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055a0:	6978      	ldr	r0, [r7, #20]
 80055a2:	f7fe fd4f 	bl	8004044 <HAL_I2C_SlaveTxCpltCallback>
 80055a6:	e00c      	b.n	80055c2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ac:	d109      	bne.n	80055c2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2222      	movs	r2, #34	@ 0x22
 80055b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2228      	movs	r2, #40	@ 0x28
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055bc:	6978      	ldr	r0, [r7, #20]
 80055be:	f7fe fd4b 	bl	8004058 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80055d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80055d2:	e074      	b.n	80056be <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d06e      	beq.n	80056be <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d107      	bne.n	80055fa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005608:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005610:	d009      	beq.n	8005626 <I2C_DMAXferCplt+0x11e>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d006      	beq.n	8005626 <I2C_DMAXferCplt+0x11e>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800561e:	d002      	beq.n	8005626 <I2C_DMAXferCplt+0x11e>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b20      	cmp	r3, #32
 8005624:	d107      	bne.n	8005636 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005634:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005644:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005654:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2200      	movs	r2, #0
 800565a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005664:	6978      	ldr	r0, [r7, #20]
 8005666:	f7fe fd23 	bl	80040b0 <HAL_I2C_ErrorCallback>
}
 800566a:	e028      	b.n	80056be <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b40      	cmp	r3, #64	@ 0x40
 800567e:	d10a      	bne.n	8005696 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f7fe fd04 	bl	800409c <HAL_I2C_MemRxCpltCallback>
}
 8005694:	e013      	b.n	80056be <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d002      	beq.n	80056aa <I2C_DMAXferCplt+0x1a2>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d103      	bne.n	80056b2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80056b0:	e002      	b.n	80056b8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2212      	movs	r2, #18
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80056b8:	6978      	ldr	r0, [r7, #20]
 80056ba:	f7fe fcb9 	bl	8004030 <HAL_I2C_MasterRxCpltCallback>
}
 80056be:	bf00      	nop
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e0:	2200      	movs	r2, #0
 80056e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f0:	2200      	movs	r2, #0
 80056f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fd fc23 	bl	8002f40 <HAL_DMA_GetError>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d01b      	beq.n	8005738 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	f043 0210 	orr.w	r2, r3, #16
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7fe fcbc 	bl	80040b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005750:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005758:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800575a:	4b4b      	ldr	r3, [pc, #300]	@ (8005888 <I2C_DMAAbort+0x148>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	08db      	lsrs	r3, r3, #3
 8005760:	4a4a      	ldr	r2, [pc, #296]	@ (800588c <I2C_DMAAbort+0x14c>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	0a1a      	lsrs	r2, r3, #8
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	00da      	lsls	r2, r3, #3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005786:	e00a      	b.n	800579e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3b01      	subs	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800579c:	d0ea      	beq.n	8005774 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057aa:	2200      	movs	r2, #0
 80057ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	2200      	movs	r2, #0
 80057bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2200      	movs	r2, #0
 80057d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e0:	2200      	movs	r2, #0
 80057e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	2200      	movs	r2, #0
 80057f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b60      	cmp	r3, #96	@ 0x60
 800580e:	d10e      	bne.n	800582e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2200      	movs	r2, #0
 8005824:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005826:	6978      	ldr	r0, [r7, #20]
 8005828:	f7fe fc4c 	bl	80040c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800582c:	e027      	b.n	800587e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800582e:	7cfb      	ldrb	r3, [r7, #19]
 8005830:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005834:	2b28      	cmp	r3, #40	@ 0x28
 8005836:	d117      	bne.n	8005868 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005856:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2228      	movs	r2, #40	@ 0x28
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005866:	e007      	b.n	8005878 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005878:	6978      	ldr	r0, [r7, #20]
 800587a:	f7fe fc19 	bl	80040b0 <HAL_I2C_ErrorCallback>
}
 800587e:	bf00      	nop
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000030 	.word	0x20000030
 800588c:	14f8b589 	.word	0x14f8b589

08005890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a0:	e048      	b.n	8005934 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d044      	beq.n	8005934 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058aa:	f7fc fa27 	bl	8001cfc <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d139      	bne.n	8005934 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10d      	bne.n	80058e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	43da      	mvns	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	e00c      	b.n	8005900 <I2C_WaitOnFlagUntilTimeout+0x70>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	43da      	mvns	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	4013      	ands	r3, r2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	429a      	cmp	r2, r3
 8005904:	d116      	bne.n	8005934 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e023      	b.n	800597c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d10d      	bne.n	800595a <I2C_WaitOnFlagUntilTimeout+0xca>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	43da      	mvns	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	e00c      	b.n	8005974 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	43da      	mvns	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4013      	ands	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	429a      	cmp	r2, r3
 8005978:	d093      	beq.n	80058a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005992:	e071      	b.n	8005a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800599e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a2:	d123      	bne.n	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	f043 0204 	orr.w	r2, r3, #4
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e067      	b.n	8005abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d041      	beq.n	8005a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f4:	f7fc f982 	bl	8001cfc <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d302      	bcc.n	8005a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d136      	bne.n	8005a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	0c1b      	lsrs	r3, r3, #16
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d10c      	bne.n	8005a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bf14      	ite	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	2300      	moveq	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	e00b      	b.n	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	43da      	mvns	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e021      	b.n	8005abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	0c1b      	lsrs	r3, r3, #16
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10c      	bne.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	43da      	mvns	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e00b      	b.n	8005ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	43da      	mvns	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	bf14      	ite	ne
 8005aae:	2301      	movne	r3, #1
 8005ab0:	2300      	moveq	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f47f af6d 	bne.w	8005994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ad0:	e034      	b.n	8005b3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f8b8 	bl	8005c48 <I2C_IsAcknowledgeFailed>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e034      	b.n	8005b4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d028      	beq.n	8005b3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aea:	f7fc f907 	bl	8001cfc <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d302      	bcc.n	8005b00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11d      	bne.n	8005b3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0a:	2b80      	cmp	r3, #128	@ 0x80
 8005b0c:	d016      	beq.n	8005b3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	f043 0220 	orr.w	r2, r3, #32
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e007      	b.n	8005b4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b80      	cmp	r3, #128	@ 0x80
 8005b48:	d1c3      	bne.n	8005ad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b60:	e034      	b.n	8005bcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f870 	bl	8005c48 <I2C_IsAcknowledgeFailed>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e034      	b.n	8005bdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	d028      	beq.n	8005bcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7a:	f7fc f8bf 	bl	8001cfc <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d302      	bcc.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d11d      	bne.n	8005bcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d016      	beq.n	8005bcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb8:	f043 0220 	orr.w	r2, r3, #32
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e007      	b.n	8005bdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d1c3      	bne.n	8005b62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bf0:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	08db      	lsrs	r3, r3, #3
 8005bf6:	4a13      	ldr	r2, [pc, #76]	@ (8005c44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	0a1a      	lsrs	r2, r3, #8
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d107      	bne.n	8005c22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e008      	b.n	8005c34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c30:	d0e9      	beq.n	8005c06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	20000030 	.word	0x20000030
 8005c44:	14f8b589 	.word	0x14f8b589

08005c48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c5e:	d11b      	bne.n	8005c98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c84:	f043 0204 	orr.w	r2, r3, #4
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005cb6:	d103      	bne.n	8005cc0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cbe:	e007      	b.n	8005cd0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005cc8:	d102      	bne.n	8005cd0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e101      	b.n	8005ef2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f006 f935 	bl	800bf78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2203      	movs	r2, #3
 8005d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d1c:	d102      	bne.n	8005d24 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f002 fc8c 	bl	8008646 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7c1a      	ldrb	r2, [r3, #16]
 8005d36:	f88d 2000 	strb.w	r2, [sp]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d3e:	f002 fb6b 	bl	8008418 <USB_CoreInit>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0ce      	b.n	8005ef2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f002 fc84 	bl	8008668 <USB_SetCurrentMode>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e0bf      	b.n	8005ef2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
 8005d76:	e04a      	b.n	8005e0e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d78:	7bfa      	ldrb	r2, [r7, #15]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	3315      	adds	r3, #21
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d8c:	7bfa      	ldrb	r2, [r7, #15]
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	3314      	adds	r3, #20
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005da0:	7bfa      	ldrb	r2, [r7, #15]
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	b298      	uxth	r0, r3
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	4613      	mov	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	332e      	adds	r3, #46	@ 0x2e
 8005db4:	4602      	mov	r2, r0
 8005db6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005db8:	7bfa      	ldrb	r2, [r7, #15]
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005dcc:	7bfa      	ldrb	r2, [r7, #15]
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	331c      	adds	r3, #28
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005de0:	7bfa      	ldrb	r2, [r7, #15]
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	3320      	adds	r3, #32
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005df4:	7bfa      	ldrb	r2, [r7, #15]
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	3324      	adds	r3, #36	@ 0x24
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	73fb      	strb	r3, [r7, #15]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	791b      	ldrb	r3, [r3, #4]
 8005e12:	7bfa      	ldrb	r2, [r7, #15]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d3af      	bcc.n	8005d78 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	73fb      	strb	r3, [r7, #15]
 8005e1c:	e044      	b.n	8005ea8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e1e:	7bfa      	ldrb	r2, [r7, #15]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e34:	7bfa      	ldrb	r2, [r7, #15]
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005e46:	7bfa      	ldrb	r2, [r7, #15]
 8005e48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e4a:	7bfa      	ldrb	r2, [r7, #15]
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e60:	7bfa      	ldrb	r2, [r7, #15]
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e76:	7bfa      	ldrb	r2, [r7, #15]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e8c:	7bfa      	ldrb	r2, [r7, #15]
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	791b      	ldrb	r3, [r3, #4]
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d3b5      	bcc.n	8005e1e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	7c1a      	ldrb	r2, [r3, #16]
 8005eba:	f88d 2000 	strb.w	r2, [sp]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ec2:	f002 fc1d 	bl	8008700 <USB_DevInit>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e00c      	b.n	8005ef2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f003 fc67 	bl	80097be <USB_DevDisconnect>

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_PCD_Start+0x1c>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e022      	b.n	8005f5c <HAL_PCD_Start+0x62>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d105      	bne.n	8005f3e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f002 fb6e 	bl	8008624 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f003 fc15 	bl	800977c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b08d      	sub	sp, #52	@ 0x34
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f003 fcd3 	bl	8009926 <USB_GetMode>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f040 848c 	bne.w	80068a0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f003 fc37 	bl	8009800 <USB_ReadInterrupts>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8482 	beq.w	800689e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	0a1b      	lsrs	r3, r3, #8
 8005fa4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f003 fc24 	bl	8009800 <USB_ReadInterrupts>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d107      	bne.n	8005fd2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f002 0202 	and.w	r2, r2, #2
 8005fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f003 fc12 	bl	8009800 <USB_ReadInterrupts>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b10      	cmp	r3, #16
 8005fe4:	d161      	bne.n	80060aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0210 	bic.w	r2, r2, #16
 8005ff4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f003 020f 	and.w	r2, r3, #15
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	4413      	add	r3, r2
 8006012:	3304      	adds	r3, #4
 8006014:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800601c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006020:	d124      	bne.n	800606c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d035      	beq.n	800609a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800603c:	b29b      	uxth	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	6a38      	ldr	r0, [r7, #32]
 8006042:	f003 fa49 	bl	80094d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006052:	441a      	add	r2, r3
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	695a      	ldr	r2, [r3, #20]
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	091b      	lsrs	r3, r3, #4
 8006060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006064:	441a      	add	r2, r3
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	615a      	str	r2, [r3, #20]
 800606a:	e016      	b.n	800609a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006072:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006076:	d110      	bne.n	800609a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800607e:	2208      	movs	r2, #8
 8006080:	4619      	mov	r1, r3
 8006082:	6a38      	ldr	r0, [r7, #32]
 8006084:	f003 fa28 	bl	80094d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	695a      	ldr	r2, [r3, #20]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	091b      	lsrs	r3, r3, #4
 8006090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006094:	441a      	add	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0210 	orr.w	r2, r2, #16
 80060a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f003 fba6 	bl	8009800 <USB_ReadInterrupts>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80060be:	f040 80a7 	bne.w	8006210 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f003 fbab 	bl	8009826 <USB_ReadDevAllOutEpInterrupt>
 80060d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80060d2:	e099      	b.n	8006208 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80060d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 808e 	beq.w	80061fc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f003 fbcf 	bl	800988e <USB_ReadDevOutEPInterrupt>
 80060f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00c      	beq.n	8006116 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006108:	461a      	mov	r2, r3
 800610a:	2301      	movs	r3, #1
 800610c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800610e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fea3 	bl	8006e5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00c      	beq.n	800613a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612c:	461a      	mov	r2, r3
 800612e:	2308      	movs	r3, #8
 8006130:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006132:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 ff79 	bl	800702c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006150:	461a      	mov	r2, r3
 8006152:	2310      	movs	r3, #16
 8006154:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d030      	beq.n	80061c2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006168:	2b80      	cmp	r3, #128	@ 0x80
 800616a:	d109      	bne.n	8006180 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800617a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800617e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006182:	4613      	mov	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4413      	add	r3, r2
 8006192:	3304      	adds	r3, #4
 8006194:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	78db      	ldrb	r3, [r3, #3]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d108      	bne.n	80061b0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2200      	movs	r2, #0
 80061a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f005 ffe0 	bl	800c170 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061bc:	461a      	mov	r2, r3
 80061be:	2302      	movs	r3, #2
 80061c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d8:	461a      	mov	r2, r3
 80061da:	2320      	movs	r3, #32
 80061dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d009      	beq.n	80061fc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f4:	461a      	mov	r2, r3
 80061f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80061fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	3301      	adds	r3, #1
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	f47f af62 	bne.w	80060d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f003 faf3 	bl	8009800 <USB_ReadInterrupts>
 800621a:	4603      	mov	r3, r0
 800621c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006220:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006224:	f040 80db 	bne.w	80063de <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f003 fb14 	bl	800985a <USB_ReadDevAllInEpInterrupt>
 8006232:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006238:	e0cd      	b.n	80063d6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80c2 	beq.w	80063ca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f003 fb3a 	bl	80098ca <USB_ReadDevInEPInterrupt>
 8006256:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d057      	beq.n	8006312 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	2201      	movs	r2, #1
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	43db      	mvns	r3, r3
 800627c:	69f9      	ldr	r1, [r7, #28]
 800627e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006282:	4013      	ands	r3, r2
 8006284:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006292:	461a      	mov	r2, r3
 8006294:	2301      	movs	r3, #1
 8006296:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	799b      	ldrb	r3, [r3, #6]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d132      	bne.n	8006306 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a4:	4613      	mov	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	3320      	adds	r3, #32
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b6:	4613      	mov	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4403      	add	r3, r0
 80062c0:	331c      	adds	r3, #28
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4419      	add	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4403      	add	r3, r0
 80062d4:	3320      	adds	r3, #32
 80062d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d113      	bne.n	8006306 <HAL_PCD_IRQHandler+0x3a2>
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e2:	4613      	mov	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3324      	adds	r3, #36	@ 0x24
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d108      	bne.n	8006306 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062fe:	461a      	mov	r2, r3
 8006300:	2101      	movs	r1, #1
 8006302:	f003 fb41 	bl	8009988 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f005 feb4 	bl	800c07a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006328:	461a      	mov	r2, r3
 800632a:	2308      	movs	r3, #8
 800632c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	461a      	mov	r2, r3
 8006346:	2310      	movs	r3, #16
 8006348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006360:	461a      	mov	r2, r3
 8006362:	2340      	movs	r3, #64	@ 0x40
 8006364:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d023      	beq.n	80063b8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006372:	6a38      	ldr	r0, [r7, #32]
 8006374:	f002 fb28 	bl	80089c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637a:	4613      	mov	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	3310      	adds	r3, #16
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	3304      	adds	r3, #4
 800638a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	78db      	ldrb	r3, [r3, #3]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d108      	bne.n	80063a6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2200      	movs	r2, #0
 8006398:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	b2db      	uxtb	r3, r3
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f005 fef7 	bl	800c194 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b2:	461a      	mov	r2, r3
 80063b4:	2302      	movs	r3, #2
 80063b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80063c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fcbd 	bl	8006d44 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	3301      	adds	r3, #1
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80063d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80063d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f47f af2e 	bne.w	800623a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f003 fa0c 	bl	8009800 <USB_ReadInterrupts>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063f2:	d122      	bne.n	800643a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800640e:	2b01      	cmp	r3, #1
 8006410:	d108      	bne.n	8006424 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800641a:	2100      	movs	r1, #0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fea3 	bl	8007168 <HAL_PCDEx_LPM_Callback>
 8006422:	e002      	b.n	800642a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f005 fe95 	bl	800c154 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695a      	ldr	r2, [r3, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f003 f9de 	bl	8009800 <USB_ReadInterrupts>
 8006444:	4603      	mov	r3, r0
 8006446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644e:	d112      	bne.n	8006476 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b01      	cmp	r3, #1
 800645e:	d102      	bne.n	8006466 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f005 fe51 	bl	800c108 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695a      	ldr	r2, [r3, #20]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006474:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f003 f9c0 	bl	8009800 <USB_ReadInterrupts>
 8006480:	4603      	mov	r3, r0
 8006482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800648a:	f040 80b7 	bne.w	80065fc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2110      	movs	r1, #16
 80064a8:	4618      	mov	r0, r3
 80064aa:	f002 fa8d 	bl	80089c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b2:	e046      	b.n	8006542 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80064b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c0:	461a      	mov	r2, r3
 80064c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	69fa      	ldr	r2, [r7, #28]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	461a      	mov	r2, r3
 80064f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006516:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800651a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006536:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800653a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800653c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653e:	3301      	adds	r3, #1
 8006540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	791b      	ldrb	r3, [r3, #4]
 8006546:	461a      	mov	r2, r3
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	4293      	cmp	r3, r2
 800654c:	d3b2      	bcc.n	80064b4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800655c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006560:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	7bdb      	ldrb	r3, [r3, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800657a:	f043 030b 	orr.w	r3, r3, #11
 800657e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006590:	f043 030b 	orr.w	r3, r3, #11
 8006594:	6453      	str	r3, [r2, #68]	@ 0x44
 8006596:	e015      	b.n	80065c4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80065aa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80065ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065be:	f043 030b 	orr.w	r3, r3, #11
 80065c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80065d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065e6:	461a      	mov	r2, r3
 80065e8:	f003 f9ce 	bl	8009988 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695a      	ldr	r2, [r3, #20]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80065fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4618      	mov	r0, r3
 8006602:	f003 f8fd 	bl	8009800 <USB_ReadInterrupts>
 8006606:	4603      	mov	r3, r0
 8006608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006610:	d123      	bne.n	800665a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f003 f993 	bl	8009942 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f002 fa4a 	bl	8008aba <USB_GetDevSpeed>
 8006626:	4603      	mov	r3, r0
 8006628:	461a      	mov	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681c      	ldr	r4, [r3, #0]
 8006632:	f001 f9c9 	bl	80079c8 <HAL_RCC_GetHCLKFreq>
 8006636:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800663c:	461a      	mov	r2, r3
 800663e:	4620      	mov	r0, r4
 8006640:	f001 ff4e 	bl	80084e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f005 fd40 	bl	800c0ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006658:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f003 f8ce 	bl	8009800 <USB_ReadInterrupts>
 8006664:	4603      	mov	r3, r0
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b08      	cmp	r3, #8
 800666c:	d10a      	bne.n	8006684 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f005 fd1d 	bl	800c0ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f002 0208 	and.w	r2, r2, #8
 8006682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f003 f8b9 	bl	8009800 <USB_ReadInterrupts>
 800668e:	4603      	mov	r3, r0
 8006690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006694:	2b80      	cmp	r3, #128	@ 0x80
 8006696:	d123      	bne.n	80066e0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066a4:	2301      	movs	r3, #1
 80066a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a8:	e014      	b.n	80066d4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ae:	4613      	mov	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d105      	bne.n	80066ce <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fb0a 	bl	8006ce2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	3301      	adds	r3, #1
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	791b      	ldrb	r3, [r3, #4]
 80066d8:	461a      	mov	r2, r3
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	4293      	cmp	r3, r2
 80066de:	d3e4      	bcc.n	80066aa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f003 f88b 	bl	8009800 <USB_ReadInterrupts>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066f4:	d13c      	bne.n	8006770 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066f6:	2301      	movs	r3, #1
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066fa:	e02b      	b.n	8006754 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006710:	4613      	mov	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	3318      	adds	r3, #24
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d115      	bne.n	800674e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006722:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006724:	2b00      	cmp	r3, #0
 8006726:	da12      	bge.n	800674e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800672c:	4613      	mov	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	3317      	adds	r3, #23
 8006738:	2201      	movs	r2, #1
 800673a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006744:	b2db      	uxtb	r3, r3
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 faca 	bl	8006ce2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	3301      	adds	r3, #1
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	791b      	ldrb	r3, [r3, #4]
 8006758:	461a      	mov	r2, r3
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	4293      	cmp	r3, r2
 800675e:	d3cd      	bcc.n	80066fc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695a      	ldr	r2, [r3, #20]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800676e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f003 f843 	bl	8009800 <USB_ReadInterrupts>
 800677a:	4603      	mov	r3, r0
 800677c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006780:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006784:	d156      	bne.n	8006834 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006786:	2301      	movs	r3, #1
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
 800678a:	e045      	b.n	8006818 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	440b      	add	r3, r1
 80067aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d12e      	bne.n	8006812 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da2b      	bge.n	8006812 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	0c1a      	lsrs	r2, r3, #16
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80067c4:	4053      	eors	r3, r2
 80067c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d121      	bne.n	8006812 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d2:	4613      	mov	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80067e0:	2201      	movs	r2, #1
 80067e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800680a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800680e:	6053      	str	r3, [r2, #4]
            break;
 8006810:	e008      	b.n	8006824 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	3301      	adds	r3, #1
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	791b      	ldrb	r3, [r3, #4]
 800681c:	461a      	mov	r2, r3
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	4293      	cmp	r3, r2
 8006822:	d3b3      	bcc.n	800678c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f002 ffe1 	bl	8009800 <USB_ReadInterrupts>
 800683e:	4603      	mov	r3, r0
 8006840:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006848:	d10a      	bne.n	8006860 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f005 fcb4 	bl	800c1b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800685e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f002 ffcb 	bl	8009800 <USB_ReadInterrupts>
 800686a:	4603      	mov	r3, r0
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d115      	bne.n	80068a0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f005 fca4 	bl	800c1d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	e000      	b.n	80068a0 <HAL_PCD_IRQHandler+0x93c>
      return;
 800689e:	bf00      	nop
    }
  }
}
 80068a0:	3734      	adds	r7, #52	@ 0x34
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd90      	pop	{r4, r7, pc}

080068a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_PCD_SetAddress+0x1a>
 80068bc:	2302      	movs	r3, #2
 80068be:	e012      	b.n	80068e6 <HAL_PCD_SetAddress+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	78fa      	ldrb	r2, [r7, #3]
 80068cc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f002 ff2a 	bl	8009730 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	4608      	mov	r0, r1
 80068f8:	4611      	mov	r1, r2
 80068fa:	461a      	mov	r2, r3
 80068fc:	4603      	mov	r3, r0
 80068fe:	70fb      	strb	r3, [r7, #3]
 8006900:	460b      	mov	r3, r1
 8006902:	803b      	strh	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800690c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006910:	2b00      	cmp	r3, #0
 8006912:	da0f      	bge.n	8006934 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	f003 020f 	and.w	r2, r3, #15
 800691a:	4613      	mov	r3, r2
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	3310      	adds	r3, #16
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	4413      	add	r3, r2
 8006928:	3304      	adds	r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	705a      	strb	r2, [r3, #1]
 8006932:	e00f      	b.n	8006954 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	f003 020f 	and.w	r2, r3, #15
 800693a:	4613      	mov	r3, r2
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	4413      	add	r3, r2
 800694a:	3304      	adds	r3, #4
 800694c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	b2da      	uxtb	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006960:	883b      	ldrh	r3, [r7, #0]
 8006962:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	78ba      	ldrb	r2, [r7, #2]
 800696e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006982:	78bb      	ldrb	r3, [r7, #2]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d102      	bne.n	800698e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_PCD_EP_Open+0xae>
 8006998:	2302      	movs	r3, #2
 800699a:	e00e      	b.n	80069ba <HAL_PCD_EP_Open+0xcc>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68f9      	ldr	r1, [r7, #12]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f002 f8aa 	bl	8008b04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80069b8:	7afb      	ldrb	r3, [r7, #11]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da0f      	bge.n	80069f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	4613      	mov	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	3310      	adds	r3, #16
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	4413      	add	r3, r2
 80069ea:	3304      	adds	r3, #4
 80069ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	705a      	strb	r2, [r3, #1]
 80069f4:	e00f      	b.n	8006a16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	f003 020f 	and.w	r2, r3, #15
 80069fc:	4613      	mov	r3, r2
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_PCD_EP_Close+0x6e>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e00e      	b.n	8006a4e <HAL_PCD_EP_Close+0x8c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 f8e8 	bl	8008c14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b086      	sub	sp, #24
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
 8006a62:	460b      	mov	r3, r1
 8006a64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	f003 020f 	and.w	r2, r3, #15
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2200      	movs	r2, #0
 8006a96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	799b      	ldrb	r3, [r3, #6]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d102      	bne.n	8006ab2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	799b      	ldrb	r3, [r3, #6]
 8006aba:	461a      	mov	r2, r3
 8006abc:	6979      	ldr	r1, [r7, #20]
 8006abe:	f002 f985 	bl	8008dcc <USB_EPStartXfer>

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006aee:	681b      	ldr	r3, [r3, #0]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	f003 020f 	and.w	r2, r3, #15
 8006b12:	4613      	mov	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	3310      	adds	r3, #16
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	3304      	adds	r3, #4
 8006b22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	799b      	ldrb	r3, [r3, #6]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d102      	bne.n	8006b56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	799b      	ldrb	r3, [r3, #6]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6979      	ldr	r1, [r7, #20]
 8006b62:	f002 f933 	bl	8008dcc <USB_EPStartXfer>

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	7912      	ldrb	r2, [r2, #4]
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e04f      	b.n	8006c2e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da0f      	bge.n	8006bb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	3310      	adds	r3, #16
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4413      	add	r3, r2
 8006baa:	3304      	adds	r3, #4
 8006bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	705a      	strb	r2, [r3, #1]
 8006bb4:	e00d      	b.n	8006bd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3304      	adds	r3, #4
 8006bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_PCD_EP_SetStall+0x82>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e01d      	b.n	8006c2e <HAL_PCD_EP_SetStall+0xbe>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f002 fcc1 	bl	8009588 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	7999      	ldrb	r1, [r3, #6]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f002 feb2 	bl	8009988 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	7912      	ldrb	r2, [r2, #4]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d901      	bls.n	8006c54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e042      	b.n	8006cda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da0f      	bge.n	8006c7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	f003 020f 	and.w	r2, r3, #15
 8006c62:	4613      	mov	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	3310      	adds	r3, #16
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4413      	add	r3, r2
 8006c70:	3304      	adds	r3, #4
 8006c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	705a      	strb	r2, [r3, #1]
 8006c7a:	e00f      	b.n	8006c9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	f003 020f 	and.w	r2, r3, #15
 8006c82:	4613      	mov	r3, r2
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	3304      	adds	r3, #4
 8006c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_PCD_EP_ClrStall+0x86>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e00e      	b.n	8006cda <HAL_PCD_EP_ClrStall+0xa4>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68f9      	ldr	r1, [r7, #12]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f002 fcca 	bl	8009664 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da0c      	bge.n	8006d10 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	f003 020f 	and.w	r2, r3, #15
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	3310      	adds	r3, #16
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e00c      	b.n	8006d2a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	f003 020f 	and.w	r2, r3, #15
 8006d16:	4613      	mov	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	3304      	adds	r3, #4
 8006d28:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f002 fae9 	bl	8009308 <USB_EPStopXfer>
 8006d36:	4603      	mov	r3, r0
 8006d38:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	@ 0x28
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	3310      	adds	r3, #16
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	4413      	add	r3, r2
 8006d68:	3304      	adds	r3, #4
 8006d6a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	695a      	ldr	r2, [r3, #20]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d901      	bls.n	8006d7c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e06b      	b.n	8006e54 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d902      	bls.n	8006d98 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	3303      	adds	r3, #3
 8006d9c:	089b      	lsrs	r3, r3, #2
 8006d9e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006da0:	e02a      	b.n	8006df8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d902      	bls.n	8006dbe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	3303      	adds	r3, #3
 8006dc2:	089b      	lsrs	r3, r3, #2
 8006dc4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68d9      	ldr	r1, [r3, #12]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4603      	mov	r3, r0
 8006dda:	6978      	ldr	r0, [r7, #20]
 8006ddc:	f002 fb3e 	bl	800945c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	441a      	add	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	695a      	ldr	r2, [r3, #20]
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	441a      	add	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d809      	bhi.n	8006e22 <PCD_WriteEmptyTxFifo+0xde>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	695a      	ldr	r2, [r3, #20]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d203      	bcs.n	8006e22 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1bf      	bne.n	8006da2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d811      	bhi.n	8006e52 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	2201      	movs	r2, #1
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	43db      	mvns	r3, r3
 8006e48:	6939      	ldr	r1, [r7, #16]
 8006e4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e4e:	4013      	ands	r3, r2
 8006e50:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	333c      	adds	r3, #60	@ 0x3c
 8006e74:	3304      	adds	r3, #4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	799b      	ldrb	r3, [r3, #6]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d17b      	bne.n	8006f8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d015      	beq.n	8006ec8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	4a61      	ldr	r2, [pc, #388]	@ (8007024 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	f240 80b9 	bls.w	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80b3 	beq.w	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ec4:	6093      	str	r3, [r2, #8]
 8006ec6:	e0a7      	b.n	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ede:	461a      	mov	r2, r3
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	6093      	str	r3, [r2, #8]
 8006ee4:	e098      	b.n	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f040 8093 	bne.w	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4a4b      	ldr	r2, [pc, #300]	@ (8007024 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d90f      	bls.n	8006f1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f10:	461a      	mov	r2, r3
 8006f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f16:	6093      	str	r3, [r2, #8]
 8006f18:	e07e      	b.n	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1a      	ldr	r2, [r3, #32]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	0159      	lsls	r1, r3, #5
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d114      	bne.n	8006f7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f64:	461a      	mov	r2, r3
 8006f66:	2101      	movs	r1, #1
 8006f68:	f002 fd0e 	bl	8009988 <USB_EP0_OutStart>
 8006f6c:	e006      	b.n	8006f7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	441a      	add	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f005 f85e 	bl	800c044 <HAL_PCD_DataOutStageCallback>
 8006f88:	e046      	b.n	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	4a26      	ldr	r2, [pc, #152]	@ (8007028 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d124      	bne.n	8006fdc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fae:	6093      	str	r3, [r2, #8]
 8006fb0:	e032      	b.n	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc8:	461a      	mov	r2, r3
 8006fca:	2320      	movs	r3, #32
 8006fcc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f005 f835 	bl	800c044 <HAL_PCD_DataOutStageCallback>
 8006fda:	e01d      	b.n	8007018 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d114      	bne.n	800700c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d108      	bne.n	800700c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007004:	461a      	mov	r2, r3
 8007006:	2100      	movs	r1, #0
 8007008:	f002 fcbe 	bl	8009988 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f005 f816 	bl	800c044 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	4f54300a 	.word	0x4f54300a
 8007028:	4f54310a 	.word	0x4f54310a

0800702c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	333c      	adds	r3, #60	@ 0x3c
 8007044:	3304      	adds	r3, #4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a15      	ldr	r2, [pc, #84]	@ (80070b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d90e      	bls.n	8007080 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007078:	461a      	mov	r2, r3
 800707a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800707e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f004 ffcd 	bl	800c020 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4a0a      	ldr	r2, [pc, #40]	@ (80070b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d90c      	bls.n	80070a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	799b      	ldrb	r3, [r3, #6]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d108      	bne.n	80070a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070a0:	461a      	mov	r2, r3
 80070a2:	2101      	movs	r1, #1
 80070a4:	f002 fc70 	bl	8009988 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	4f54300a 	.word	0x4f54300a

080070b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
 80070c4:	4613      	mov	r3, r2
 80070c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d107      	bne.n	80070e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80070d6:	883b      	ldrh	r3, [r7, #0]
 80070d8:	0419      	lsls	r1, r3, #16
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80070e4:	e028      	b.n	8007138 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ec:	0c1b      	lsrs	r3, r3, #16
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	4413      	add	r3, r2
 80070f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
 80070f8:	e00d      	b.n	8007116 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	3340      	adds	r3, #64	@ 0x40
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	4413      	add	r3, r2
 800710e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	3301      	adds	r3, #1
 8007114:	73fb      	strb	r3, [r7, #15]
 8007116:	7bfa      	ldrb	r2, [r7, #15]
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	3b01      	subs	r3, #1
 800711c:	429a      	cmp	r2, r3
 800711e:	d3ec      	bcc.n	80070fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007120:	883b      	ldrh	r3, [r7, #0]
 8007122:	0418      	lsls	r0, r3, #16
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6819      	ldr	r1, [r3, #0]
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	3b01      	subs	r3, #1
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	4302      	orrs	r2, r0
 8007130:	3340      	adds	r3, #64	@ 0x40
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	887a      	ldrh	r2, [r7, #2]
 8007158:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e267      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d075      	beq.n	800728a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800719e:	4b88      	ldr	r3, [pc, #544]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d00c      	beq.n	80071c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071aa:	4b85      	ldr	r3, [pc, #532]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d112      	bne.n	80071dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071b6:	4b82      	ldr	r3, [pc, #520]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071c2:	d10b      	bne.n	80071dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071c4:	4b7e      	ldr	r3, [pc, #504]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d05b      	beq.n	8007288 <HAL_RCC_OscConfig+0x108>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d157      	bne.n	8007288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e242      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071e4:	d106      	bne.n	80071f4 <HAL_RCC_OscConfig+0x74>
 80071e6:	4b76      	ldr	r3, [pc, #472]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a75      	ldr	r2, [pc, #468]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	e01d      	b.n	8007230 <HAL_RCC_OscConfig+0xb0>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071fc:	d10c      	bne.n	8007218 <HAL_RCC_OscConfig+0x98>
 80071fe:	4b70      	ldr	r3, [pc, #448]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a6f      	ldr	r2, [pc, #444]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	4b6d      	ldr	r3, [pc, #436]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a6c      	ldr	r2, [pc, #432]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e00b      	b.n	8007230 <HAL_RCC_OscConfig+0xb0>
 8007218:	4b69      	ldr	r3, [pc, #420]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a68      	ldr	r2, [pc, #416]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 800721e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	4b66      	ldr	r3, [pc, #408]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a65      	ldr	r2, [pc, #404]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 800722a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800722e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d013      	beq.n	8007260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007238:	f7fa fd60 	bl	8001cfc <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007240:	f7fa fd5c 	bl	8001cfc <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b64      	cmp	r3, #100	@ 0x64
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e207      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007252:	4b5b      	ldr	r3, [pc, #364]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0xc0>
 800725e:	e014      	b.n	800728a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007260:	f7fa fd4c 	bl	8001cfc <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007268:	f7fa fd48 	bl	8001cfc <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b64      	cmp	r3, #100	@ 0x64
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e1f3      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800727a:	4b51      	ldr	r3, [pc, #324]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0xe8>
 8007286:	e000      	b.n	800728a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d063      	beq.n	800735e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007296:	4b4a      	ldr	r3, [pc, #296]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 030c 	and.w	r3, r3, #12
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072a2:	4b47      	ldr	r3, [pc, #284]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d11c      	bne.n	80072e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ae:	4b44      	ldr	r3, [pc, #272]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d116      	bne.n	80072e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ba:	4b41      	ldr	r3, [pc, #260]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_RCC_OscConfig+0x152>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d001      	beq.n	80072d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e1c7      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d2:	4b3b      	ldr	r3, [pc, #236]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4937      	ldr	r1, [pc, #220]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072e6:	e03a      	b.n	800735e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d020      	beq.n	8007332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072f0:	4b34      	ldr	r3, [pc, #208]	@ (80073c4 <HAL_RCC_OscConfig+0x244>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f6:	f7fa fd01 	bl	8001cfc <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072fe:	f7fa fcfd 	bl	8001cfc <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e1a8      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007310:	4b2b      	ldr	r3, [pc, #172]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731c:	4b28      	ldr	r3, [pc, #160]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	4925      	ldr	r1, [pc, #148]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 800732c:	4313      	orrs	r3, r2
 800732e:	600b      	str	r3, [r1, #0]
 8007330:	e015      	b.n	800735e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007332:	4b24      	ldr	r3, [pc, #144]	@ (80073c4 <HAL_RCC_OscConfig+0x244>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fa fce0 	bl	8001cfc <HAL_GetTick>
 800733c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007340:	f7fa fcdc 	bl	8001cfc <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e187      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007352:	4b1b      	ldr	r3, [pc, #108]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f0      	bne.n	8007340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d036      	beq.n	80073d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007372:	4b15      	ldr	r3, [pc, #84]	@ (80073c8 <HAL_RCC_OscConfig+0x248>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007378:	f7fa fcc0 	bl	8001cfc <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007380:	f7fa fcbc 	bl	8001cfc <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e167      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0x200>
 800739e:	e01b      	b.n	80073d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073a0:	4b09      	ldr	r3, [pc, #36]	@ (80073c8 <HAL_RCC_OscConfig+0x248>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073a6:	f7fa fca9 	bl	8001cfc <HAL_GetTick>
 80073aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073ac:	e00e      	b.n	80073cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ae:	f7fa fca5 	bl	8001cfc <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d907      	bls.n	80073cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e150      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
 80073c0:	40023800 	.word	0x40023800
 80073c4:	42470000 	.word	0x42470000
 80073c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073cc:	4b88      	ldr	r3, [pc, #544]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 80073ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ea      	bne.n	80073ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8097 	beq.w	8007514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ea:	4b81      	ldr	r3, [pc, #516]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10f      	bne.n	8007416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	4b7d      	ldr	r3, [pc, #500]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	4a7c      	ldr	r2, [pc, #496]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007404:	6413      	str	r3, [r2, #64]	@ 0x40
 8007406:	4b7a      	ldr	r3, [pc, #488]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800740e:	60bb      	str	r3, [r7, #8]
 8007410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007416:	4b77      	ldr	r3, [pc, #476]	@ (80075f4 <HAL_RCC_OscConfig+0x474>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d118      	bne.n	8007454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007422:	4b74      	ldr	r3, [pc, #464]	@ (80075f4 <HAL_RCC_OscConfig+0x474>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a73      	ldr	r2, [pc, #460]	@ (80075f4 <HAL_RCC_OscConfig+0x474>)
 8007428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800742c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800742e:	f7fa fc65 	bl	8001cfc <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007434:	e008      	b.n	8007448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007436:	f7fa fc61 	bl	8001cfc <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e10c      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007448:	4b6a      	ldr	r3, [pc, #424]	@ (80075f4 <HAL_RCC_OscConfig+0x474>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0f0      	beq.n	8007436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d106      	bne.n	800746a <HAL_RCC_OscConfig+0x2ea>
 800745c:	4b64      	ldr	r3, [pc, #400]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007460:	4a63      	ldr	r2, [pc, #396]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	6713      	str	r3, [r2, #112]	@ 0x70
 8007468:	e01c      	b.n	80074a4 <HAL_RCC_OscConfig+0x324>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b05      	cmp	r3, #5
 8007470:	d10c      	bne.n	800748c <HAL_RCC_OscConfig+0x30c>
 8007472:	4b5f      	ldr	r3, [pc, #380]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007476:	4a5e      	ldr	r2, [pc, #376]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007478:	f043 0304 	orr.w	r3, r3, #4
 800747c:	6713      	str	r3, [r2, #112]	@ 0x70
 800747e:	4b5c      	ldr	r3, [pc, #368]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007482:	4a5b      	ldr	r2, [pc, #364]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	6713      	str	r3, [r2, #112]	@ 0x70
 800748a:	e00b      	b.n	80074a4 <HAL_RCC_OscConfig+0x324>
 800748c:	4b58      	ldr	r3, [pc, #352]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007490:	4a57      	ldr	r2, [pc, #348]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007492:	f023 0301 	bic.w	r3, r3, #1
 8007496:	6713      	str	r3, [r2, #112]	@ 0x70
 8007498:	4b55      	ldr	r3, [pc, #340]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 800749a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749c:	4a54      	ldr	r2, [pc, #336]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 800749e:	f023 0304 	bic.w	r3, r3, #4
 80074a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d015      	beq.n	80074d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ac:	f7fa fc26 	bl	8001cfc <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b2:	e00a      	b.n	80074ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b4:	f7fa fc22 	bl	8001cfc <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e0cb      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ca:	4b49      	ldr	r3, [pc, #292]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0ee      	beq.n	80074b4 <HAL_RCC_OscConfig+0x334>
 80074d6:	e014      	b.n	8007502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d8:	f7fa fc10 	bl	8001cfc <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fa fc0c 	bl	8001cfc <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0b5      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074f6:	4b3e      	ldr	r3, [pc, #248]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1ee      	bne.n	80074e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d105      	bne.n	8007514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007508:	4b39      	ldr	r3, [pc, #228]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 800750a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750c:	4a38      	ldr	r2, [pc, #224]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 800750e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80a1 	beq.w	8007660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800751e:	4b34      	ldr	r3, [pc, #208]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 030c 	and.w	r3, r3, #12
 8007526:	2b08      	cmp	r3, #8
 8007528:	d05c      	beq.n	80075e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d141      	bne.n	80075b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007532:	4b31      	ldr	r3, [pc, #196]	@ (80075f8 <HAL_RCC_OscConfig+0x478>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007538:	f7fa fbe0 	bl	8001cfc <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007540:	f7fa fbdc 	bl	8001cfc <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e087      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007552:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	019b      	lsls	r3, r3, #6
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	3b01      	subs	r3, #1
 8007578:	041b      	lsls	r3, r3, #16
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	061b      	lsls	r3, r3, #24
 8007582:	491b      	ldr	r1, [pc, #108]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007584:	4313      	orrs	r3, r2
 8007586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007588:	4b1b      	ldr	r3, [pc, #108]	@ (80075f8 <HAL_RCC_OscConfig+0x478>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758e:	f7fa fbb5 	bl	8001cfc <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007596:	f7fa fbb1 	bl	8001cfc <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e05c      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075a8:	4b11      	ldr	r3, [pc, #68]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0f0      	beq.n	8007596 <HAL_RCC_OscConfig+0x416>
 80075b4:	e054      	b.n	8007660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b6:	4b10      	ldr	r3, [pc, #64]	@ (80075f8 <HAL_RCC_OscConfig+0x478>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075bc:	f7fa fb9e 	bl	8001cfc <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c4:	f7fa fb9a 	bl	8001cfc <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e045      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075d6:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <HAL_RCC_OscConfig+0x470>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f0      	bne.n	80075c4 <HAL_RCC_OscConfig+0x444>
 80075e2:	e03d      	b.n	8007660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d107      	bne.n	80075fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e038      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
 80075f0:	40023800 	.word	0x40023800
 80075f4:	40007000 	.word	0x40007000
 80075f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075fc:	4b1b      	ldr	r3, [pc, #108]	@ (800766c <HAL_RCC_OscConfig+0x4ec>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d028      	beq.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d121      	bne.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007622:	429a      	cmp	r2, r3
 8007624:	d11a      	bne.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800762c:	4013      	ands	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007634:	4293      	cmp	r3, r2
 8007636:	d111      	bne.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	3b01      	subs	r3, #1
 8007646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007648:	429a      	cmp	r2, r3
 800764a:	d107      	bne.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007658:	429a      	cmp	r2, r3
 800765a:	d001      	beq.n	8007660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	40023800 	.word	0x40023800

08007670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e0cc      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007684:	4b68      	ldr	r3, [pc, #416]	@ (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d90c      	bls.n	80076ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007692:	4b65      	ldr	r3, [pc, #404]	@ (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800769a:	4b63      	ldr	r3, [pc, #396]	@ (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d001      	beq.n	80076ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e0b8      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d020      	beq.n	80076fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076c4:	4b59      	ldr	r3, [pc, #356]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	4a58      	ldr	r2, [pc, #352]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80076ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076dc:	4b53      	ldr	r3, [pc, #332]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	4a52      	ldr	r2, [pc, #328]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80076e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076e8:	4b50      	ldr	r3, [pc, #320]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	494d      	ldr	r1, [pc, #308]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d044      	beq.n	8007790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d107      	bne.n	800771e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800770e:	4b47      	ldr	r3, [pc, #284]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d119      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e07f      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d003      	beq.n	800772e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800772a:	2b03      	cmp	r3, #3
 800772c:	d107      	bne.n	800773e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800772e:	4b3f      	ldr	r3, [pc, #252]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e06f      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800773e:	4b3b      	ldr	r3, [pc, #236]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e067      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800774e:	4b37      	ldr	r3, [pc, #220]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f023 0203 	bic.w	r2, r3, #3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4934      	ldr	r1, [pc, #208]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 800775c:	4313      	orrs	r3, r2
 800775e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007760:	f7fa facc 	bl	8001cfc <HAL_GetTick>
 8007764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007766:	e00a      	b.n	800777e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007768:	f7fa fac8 	bl	8001cfc <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007776:	4293      	cmp	r3, r2
 8007778:	d901      	bls.n	800777e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e04f      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777e:	4b2b      	ldr	r3, [pc, #172]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 020c 	and.w	r2, r3, #12
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	429a      	cmp	r2, r3
 800778e:	d1eb      	bne.n	8007768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007790:	4b25      	ldr	r3, [pc, #148]	@ (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d20c      	bcs.n	80077b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779e:	4b22      	ldr	r3, [pc, #136]	@ (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a6:	4b20      	ldr	r3, [pc, #128]	@ (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d001      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e032      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077c4:	4b19      	ldr	r3, [pc, #100]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	4916      	ldr	r1, [pc, #88]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077e2:	4b12      	ldr	r3, [pc, #72]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	490e      	ldr	r1, [pc, #56]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077f6:	f000 f821 	bl	800783c <HAL_RCC_GetSysClockFreq>
 80077fa:	4602      	mov	r2, r0
 80077fc:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	091b      	lsrs	r3, r3, #4
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	490a      	ldr	r1, [pc, #40]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 8007808:	5ccb      	ldrb	r3, [r1, r3]
 800780a:	fa22 f303 	lsr.w	r3, r2, r3
 800780e:	4a09      	ldr	r2, [pc, #36]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 8007810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007812:	4b09      	ldr	r3, [pc, #36]	@ (8007838 <HAL_RCC_ClockConfig+0x1c8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7fa fa2c 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40023c00 	.word	0x40023c00
 800782c:	40023800 	.word	0x40023800
 8007830:	0800ca54 	.word	0x0800ca54
 8007834:	20000030 	.word	0x20000030
 8007838:	20000034 	.word	0x20000034

0800783c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800783c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007840:	b090      	sub	sp, #64	@ 0x40
 8007842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007854:	4b59      	ldr	r3, [pc, #356]	@ (80079bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 030c 	and.w	r3, r3, #12
 800785c:	2b08      	cmp	r3, #8
 800785e:	d00d      	beq.n	800787c <HAL_RCC_GetSysClockFreq+0x40>
 8007860:	2b08      	cmp	r3, #8
 8007862:	f200 80a1 	bhi.w	80079a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0x34>
 800786a:	2b04      	cmp	r3, #4
 800786c:	d003      	beq.n	8007876 <HAL_RCC_GetSysClockFreq+0x3a>
 800786e:	e09b      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007870:	4b53      	ldr	r3, [pc, #332]	@ (80079c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007872:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007874:	e09b      	b.n	80079ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007876:	4b53      	ldr	r3, [pc, #332]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007878:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800787a:	e098      	b.n	80079ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800787c:	4b4f      	ldr	r3, [pc, #316]	@ (80079bc <HAL_RCC_GetSysClockFreq+0x180>)
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007886:	4b4d      	ldr	r3, [pc, #308]	@ (80079bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d028      	beq.n	80078e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007892:	4b4a      	ldr	r3, [pc, #296]	@ (80079bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	099b      	lsrs	r3, r3, #6
 8007898:	2200      	movs	r2, #0
 800789a:	623b      	str	r3, [r7, #32]
 800789c:	627a      	str	r2, [r7, #36]	@ 0x24
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80078a4:	2100      	movs	r1, #0
 80078a6:	4b47      	ldr	r3, [pc, #284]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80078a8:	fb03 f201 	mul.w	r2, r3, r1
 80078ac:	2300      	movs	r3, #0
 80078ae:	fb00 f303 	mul.w	r3, r0, r3
 80078b2:	4413      	add	r3, r2
 80078b4:	4a43      	ldr	r2, [pc, #268]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80078b6:	fba0 1202 	umull	r1, r2, r0, r2
 80078ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078bc:	460a      	mov	r2, r1
 80078be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80078c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078c2:	4413      	add	r3, r2
 80078c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c8:	2200      	movs	r2, #0
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	61fa      	str	r2, [r7, #28]
 80078ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80078d6:	f7f8 fc7f 	bl	80001d8 <__aeabi_uldivmod>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4613      	mov	r3, r2
 80078e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e2:	e053      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078e4:	4b35      	ldr	r3, [pc, #212]	@ (80079bc <HAL_RCC_GetSysClockFreq+0x180>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	099b      	lsrs	r3, r3, #6
 80078ea:	2200      	movs	r2, #0
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	617a      	str	r2, [r7, #20]
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80078f6:	f04f 0b00 	mov.w	fp, #0
 80078fa:	4652      	mov	r2, sl
 80078fc:	465b      	mov	r3, fp
 80078fe:	f04f 0000 	mov.w	r0, #0
 8007902:	f04f 0100 	mov.w	r1, #0
 8007906:	0159      	lsls	r1, r3, #5
 8007908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800790c:	0150      	lsls	r0, r2, #5
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	ebb2 080a 	subs.w	r8, r2, sl
 8007916:	eb63 090b 	sbc.w	r9, r3, fp
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007926:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800792a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800792e:	ebb2 0408 	subs.w	r4, r2, r8
 8007932:	eb63 0509 	sbc.w	r5, r3, r9
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	00eb      	lsls	r3, r5, #3
 8007940:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007944:	00e2      	lsls	r2, r4, #3
 8007946:	4614      	mov	r4, r2
 8007948:	461d      	mov	r5, r3
 800794a:	eb14 030a 	adds.w	r3, r4, sl
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	eb45 030b 	adc.w	r3, r5, fp
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	f04f 0300 	mov.w	r3, #0
 800795e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007962:	4629      	mov	r1, r5
 8007964:	028b      	lsls	r3, r1, #10
 8007966:	4621      	mov	r1, r4
 8007968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800796c:	4621      	mov	r1, r4
 800796e:	028a      	lsls	r2, r1, #10
 8007970:	4610      	mov	r0, r2
 8007972:	4619      	mov	r1, r3
 8007974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007976:	2200      	movs	r2, #0
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	60fa      	str	r2, [r7, #12]
 800797c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007980:	f7f8 fc2a 	bl	80001d8 <__aeabi_uldivmod>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4613      	mov	r3, r2
 800798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800798c:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <HAL_RCC_GetSysClockFreq+0x180>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	0c1b      	lsrs	r3, r3, #16
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	3301      	adds	r3, #1
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800799c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079a6:	e002      	b.n	80079ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079a8:	4b05      	ldr	r3, [pc, #20]	@ (80079c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80079aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3740      	adds	r7, #64	@ 0x40
 80079b4:	46bd      	mov	sp, r7
 80079b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ba:	bf00      	nop
 80079bc:	40023800 	.word	0x40023800
 80079c0:	00f42400 	.word	0x00f42400
 80079c4:	017d7840 	.word	0x017d7840

080079c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079cc:	4b03      	ldr	r3, [pc, #12]	@ (80079dc <HAL_RCC_GetHCLKFreq+0x14>)
 80079ce:	681b      	ldr	r3, [r3, #0]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000030 	.word	0x20000030

080079e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079e4:	f7ff fff0 	bl	80079c8 <HAL_RCC_GetHCLKFreq>
 80079e8:	4602      	mov	r2, r0
 80079ea:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	0a9b      	lsrs	r3, r3, #10
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	4903      	ldr	r1, [pc, #12]	@ (8007a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079f6:	5ccb      	ldrb	r3, [r1, r3]
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40023800 	.word	0x40023800
 8007a04:	0800ca64 	.word	0x0800ca64

08007a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e041      	b.n	8007a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7f9 fd8c 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	f000 fab2 	bl	8007fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d001      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e044      	b.n	8007b4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1e      	ldr	r2, [pc, #120]	@ (8007b58 <HAL_TIM_Base_Start_IT+0xb0>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d018      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aea:	d013      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1a      	ldr	r2, [pc, #104]	@ (8007b5c <HAL_TIM_Base_Start_IT+0xb4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00e      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a19      	ldr	r2, [pc, #100]	@ (8007b60 <HAL_TIM_Base_Start_IT+0xb8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d009      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a17      	ldr	r2, [pc, #92]	@ (8007b64 <HAL_TIM_Base_Start_IT+0xbc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d004      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a16      	ldr	r2, [pc, #88]	@ (8007b68 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d111      	bne.n	8007b38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b06      	cmp	r3, #6
 8007b24:	d010      	beq.n	8007b48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0201 	orr.w	r2, r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b36:	e007      	b.n	8007b48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40014000 	.word	0x40014000

08007b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d020      	beq.n	8007bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01b      	beq.n	8007bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f06f 0202 	mvn.w	r2, #2
 8007ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9db 	bl	8007f72 <HAL_TIM_IC_CaptureCallback>
 8007bbc:	e005      	b.n	8007bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f9cd 	bl	8007f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f9de 	bl	8007f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d020      	beq.n	8007c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01b      	beq.n	8007c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0204 	mvn.w	r2, #4
 8007bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9b5 	bl	8007f72 <HAL_TIM_IC_CaptureCallback>
 8007c08:	e005      	b.n	8007c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f9a7 	bl	8007f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9b8 	bl	8007f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d020      	beq.n	8007c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01b      	beq.n	8007c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0208 	mvn.w	r2, #8
 8007c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f98f 	bl	8007f72 <HAL_TIM_IC_CaptureCallback>
 8007c54:	e005      	b.n	8007c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f981 	bl	8007f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f992 	bl	8007f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d020      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01b      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0210 	mvn.w	r2, #16
 8007c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f969 	bl	8007f72 <HAL_TIM_IC_CaptureCallback>
 8007ca0:	e005      	b.n	8007cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f95b 	bl	8007f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f96c 	bl	8007f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0201 	mvn.w	r2, #1
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7f8 fc46 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00c      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fb84 	bl	8008404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f93d 	bl	8007f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00c      	beq.n	8007d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d007      	beq.n	8007d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0220 	mvn.w	r2, #32
 8007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fb56 	bl	80083f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_TIM_ConfigClockSource+0x1c>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e0b4      	b.n	8007ed2 <HAL_TIM_ConfigClockSource+0x186>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da0:	d03e      	beq.n	8007e20 <HAL_TIM_ConfigClockSource+0xd4>
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da6:	f200 8087 	bhi.w	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dae:	f000 8086 	beq.w	8007ebe <HAL_TIM_ConfigClockSource+0x172>
 8007db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db6:	d87f      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b70      	cmp	r3, #112	@ 0x70
 8007dba:	d01a      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0xa6>
 8007dbc:	2b70      	cmp	r3, #112	@ 0x70
 8007dbe:	d87b      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc0:	2b60      	cmp	r3, #96	@ 0x60
 8007dc2:	d050      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0x11a>
 8007dc4:	2b60      	cmp	r3, #96	@ 0x60
 8007dc6:	d877      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc8:	2b50      	cmp	r3, #80	@ 0x50
 8007dca:	d03c      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0xfa>
 8007dcc:	2b50      	cmp	r3, #80	@ 0x50
 8007dce:	d873      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	d058      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x13a>
 8007dd4:	2b40      	cmp	r3, #64	@ 0x40
 8007dd6:	d86f      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd8:	2b30      	cmp	r3, #48	@ 0x30
 8007dda:	d064      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8007ddc:	2b30      	cmp	r3, #48	@ 0x30
 8007dde:	d86b      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d060      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d867      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d05c      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d05a      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8007df0:	e062      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e02:	f000 fa66 	bl	80082d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	609a      	str	r2, [r3, #8]
      break;
 8007e1e:	e04f      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e30:	f000 fa4f 	bl	80082d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e42:	609a      	str	r2, [r3, #8]
      break;
 8007e44:	e03c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e52:	461a      	mov	r2, r3
 8007e54:	f000 f9c3 	bl	80081de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2150      	movs	r1, #80	@ 0x50
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fa1c 	bl	800829c <TIM_ITRx_SetConfig>
      break;
 8007e64:	e02c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e72:	461a      	mov	r2, r3
 8007e74:	f000 f9e2 	bl	800823c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2160      	movs	r1, #96	@ 0x60
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fa0c 	bl	800829c <TIM_ITRx_SetConfig>
      break;
 8007e84:	e01c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e92:	461a      	mov	r2, r3
 8007e94:	f000 f9a3 	bl	80081de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2140      	movs	r1, #64	@ 0x40
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f9fc 	bl	800829c <TIM_ITRx_SetConfig>
      break;
 8007ea4:	e00c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f000 f9f3 	bl	800829c <TIM_ITRx_SetConfig>
      break;
 8007eb6:	e003      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]
      break;
 8007ebc:	e000      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d101      	bne.n	8007ef2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e031      	b.n	8007f56 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8d9 	bl	80080bc <TIM_SlaveTimer_SetConfig>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d009      	beq.n	8007f24 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e018      	b.n	8007f56 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f32:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f42:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
	...

08007fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a37      	ldr	r2, [pc, #220]	@ (80080a0 <TIM_Base_SetConfig+0xf0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00f      	beq.n	8007fe8 <TIM_Base_SetConfig+0x38>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fce:	d00b      	beq.n	8007fe8 <TIM_Base_SetConfig+0x38>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a34      	ldr	r2, [pc, #208]	@ (80080a4 <TIM_Base_SetConfig+0xf4>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d007      	beq.n	8007fe8 <TIM_Base_SetConfig+0x38>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a33      	ldr	r2, [pc, #204]	@ (80080a8 <TIM_Base_SetConfig+0xf8>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d003      	beq.n	8007fe8 <TIM_Base_SetConfig+0x38>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a32      	ldr	r2, [pc, #200]	@ (80080ac <TIM_Base_SetConfig+0xfc>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d108      	bne.n	8007ffa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a28      	ldr	r2, [pc, #160]	@ (80080a0 <TIM_Base_SetConfig+0xf0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d01b      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008008:	d017      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a25      	ldr	r2, [pc, #148]	@ (80080a4 <TIM_Base_SetConfig+0xf4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d013      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a24      	ldr	r2, [pc, #144]	@ (80080a8 <TIM_Base_SetConfig+0xf8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00f      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a23      	ldr	r2, [pc, #140]	@ (80080ac <TIM_Base_SetConfig+0xfc>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00b      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a22      	ldr	r2, [pc, #136]	@ (80080b0 <TIM_Base_SetConfig+0x100>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d007      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a21      	ldr	r2, [pc, #132]	@ (80080b4 <TIM_Base_SetConfig+0x104>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d003      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a20      	ldr	r2, [pc, #128]	@ (80080b8 <TIM_Base_SetConfig+0x108>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d108      	bne.n	800804c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a0c      	ldr	r2, [pc, #48]	@ (80080a0 <TIM_Base_SetConfig+0xf0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d103      	bne.n	800807a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	691a      	ldr	r2, [r3, #16]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f043 0204 	orr.w	r2, r3, #4
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	601a      	str	r2, [r3, #0]
}
 8008092:	bf00      	nop
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	40010000 	.word	0x40010000
 80080a4:	40000400 	.word	0x40000400
 80080a8:	40000800 	.word	0x40000800
 80080ac:	40000c00 	.word	0x40000c00
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400
 80080b8:	40014800 	.word	0x40014800

080080bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f023 0307 	bic.w	r3, r3, #7
 80080ea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b70      	cmp	r3, #112	@ 0x70
 8008104:	d01a      	beq.n	800813c <TIM_SlaveTimer_SetConfig+0x80>
 8008106:	2b70      	cmp	r3, #112	@ 0x70
 8008108:	d860      	bhi.n	80081cc <TIM_SlaveTimer_SetConfig+0x110>
 800810a:	2b60      	cmp	r3, #96	@ 0x60
 800810c:	d054      	beq.n	80081b8 <TIM_SlaveTimer_SetConfig+0xfc>
 800810e:	2b60      	cmp	r3, #96	@ 0x60
 8008110:	d85c      	bhi.n	80081cc <TIM_SlaveTimer_SetConfig+0x110>
 8008112:	2b50      	cmp	r3, #80	@ 0x50
 8008114:	d046      	beq.n	80081a4 <TIM_SlaveTimer_SetConfig+0xe8>
 8008116:	2b50      	cmp	r3, #80	@ 0x50
 8008118:	d858      	bhi.n	80081cc <TIM_SlaveTimer_SetConfig+0x110>
 800811a:	2b40      	cmp	r3, #64	@ 0x40
 800811c:	d019      	beq.n	8008152 <TIM_SlaveTimer_SetConfig+0x96>
 800811e:	2b40      	cmp	r3, #64	@ 0x40
 8008120:	d854      	bhi.n	80081cc <TIM_SlaveTimer_SetConfig+0x110>
 8008122:	2b30      	cmp	r3, #48	@ 0x30
 8008124:	d055      	beq.n	80081d2 <TIM_SlaveTimer_SetConfig+0x116>
 8008126:	2b30      	cmp	r3, #48	@ 0x30
 8008128:	d850      	bhi.n	80081cc <TIM_SlaveTimer_SetConfig+0x110>
 800812a:	2b20      	cmp	r3, #32
 800812c:	d051      	beq.n	80081d2 <TIM_SlaveTimer_SetConfig+0x116>
 800812e:	2b20      	cmp	r3, #32
 8008130:	d84c      	bhi.n	80081cc <TIM_SlaveTimer_SetConfig+0x110>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d04d      	beq.n	80081d2 <TIM_SlaveTimer_SetConfig+0x116>
 8008136:	2b10      	cmp	r3, #16
 8008138:	d04b      	beq.n	80081d2 <TIM_SlaveTimer_SetConfig+0x116>
 800813a:	e047      	b.n	80081cc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800814c:	f000 f8c1 	bl	80082d2 <TIM_ETR_SetConfig>
      break;
 8008150:	e040      	b.n	80081d4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b05      	cmp	r3, #5
 8008158:	d101      	bne.n	800815e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e03b      	b.n	80081d6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6a1a      	ldr	r2, [r3, #32]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0201 	bic.w	r2, r2, #1
 8008174:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008184:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	4313      	orrs	r3, r2
 8008190:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
      break;
 80081a2:	e017      	b.n	80081d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b0:	461a      	mov	r2, r3
 80081b2:	f000 f814 	bl	80081de <TIM_TI1_ConfigInputStage>
      break;
 80081b6:	e00d      	b.n	80081d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081c4:	461a      	mov	r2, r3
 80081c6:	f000 f839 	bl	800823c <TIM_TI2_ConfigInputStage>
      break;
 80081ca:	e003      	b.n	80081d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	75fb      	strb	r3, [r7, #23]
      break;
 80081d0:	e000      	b.n	80081d4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80081d2:	bf00      	nop
  }

  return status;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081de:	b480      	push	{r7}
 80081e0:	b087      	sub	sp, #28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	f023 0201 	bic.w	r2, r3, #1
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008208:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f023 030a 	bic.w	r3, r3, #10
 800821a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	4313      	orrs	r3, r2
 8008222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	621a      	str	r2, [r3, #32]
}
 8008230:	bf00      	nop
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	f023 0210 	bic.w	r2, r3, #16
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	031b      	lsls	r3, r3, #12
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008278:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4313      	orrs	r3, r2
 8008282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	621a      	str	r2, [r3, #32]
}
 8008290:	bf00      	nop
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f043 0307 	orr.w	r3, r3, #7
 80082be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	609a      	str	r2, [r3, #8]
}
 80082c6:	bf00      	nop
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b087      	sub	sp, #28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	021a      	lsls	r2, r3, #8
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	431a      	orrs	r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	609a      	str	r2, [r3, #8]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008328:	2302      	movs	r3, #2
 800832a:	e050      	b.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1c      	ldr	r2, [pc, #112]	@ (80083dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d018      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008378:	d013      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a18      	ldr	r2, [pc, #96]	@ (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d00e      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a16      	ldr	r2, [pc, #88]	@ (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d009      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a15      	ldr	r2, [pc, #84]	@ (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d004      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a13      	ldr	r2, [pc, #76]	@ (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d10c      	bne.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40000400 	.word	0x40000400
 80083e4:	40000800 	.word	0x40000800
 80083e8:	40000c00 	.word	0x40000c00
 80083ec:	40014000 	.word	0x40014000

080083f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008418:	b084      	sub	sp, #16
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	f107 001c 	add.w	r0, r7, #28
 8008426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800842a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800842e:	2b01      	cmp	r3, #1
 8008430:	d123      	bne.n	800847a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008436:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800845a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800845e:	2b01      	cmp	r3, #1
 8008460:	d105      	bne.n	800846e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 fae8 	bl	8009a44 <USB_CoreReset>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
 8008478:	e01b      	b.n	80084b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 fadc 	bl	8009a44 <USB_CoreReset>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008490:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80084a4:	e005      	b.n	80084b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084b2:	7fbb      	ldrb	r3, [r7, #30]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d10b      	bne.n	80084d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f043 0206 	orr.w	r2, r3, #6
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f043 0220 	orr.w	r2, r3, #32
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084dc:	b004      	add	sp, #16
 80084de:	4770      	bx	lr

080084e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	4613      	mov	r3, r2
 80084ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80084ee:	79fb      	ldrb	r3, [r7, #7]
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d165      	bne.n	80085c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4a41      	ldr	r2, [pc, #260]	@ (80085fc <USB_SetTurnaroundTime+0x11c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d906      	bls.n	800850a <USB_SetTurnaroundTime+0x2a>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4a40      	ldr	r2, [pc, #256]	@ (8008600 <USB_SetTurnaroundTime+0x120>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d202      	bcs.n	800850a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008504:	230f      	movs	r3, #15
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e062      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	4a3c      	ldr	r2, [pc, #240]	@ (8008600 <USB_SetTurnaroundTime+0x120>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d306      	bcc.n	8008520 <USB_SetTurnaroundTime+0x40>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4a3b      	ldr	r2, [pc, #236]	@ (8008604 <USB_SetTurnaroundTime+0x124>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d202      	bcs.n	8008520 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800851a:	230e      	movs	r3, #14
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	e057      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4a38      	ldr	r2, [pc, #224]	@ (8008604 <USB_SetTurnaroundTime+0x124>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d306      	bcc.n	8008536 <USB_SetTurnaroundTime+0x56>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4a37      	ldr	r2, [pc, #220]	@ (8008608 <USB_SetTurnaroundTime+0x128>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d202      	bcs.n	8008536 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008530:	230d      	movs	r3, #13
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	e04c      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	4a33      	ldr	r2, [pc, #204]	@ (8008608 <USB_SetTurnaroundTime+0x128>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d306      	bcc.n	800854c <USB_SetTurnaroundTime+0x6c>
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4a32      	ldr	r2, [pc, #200]	@ (800860c <USB_SetTurnaroundTime+0x12c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d802      	bhi.n	800854c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008546:	230c      	movs	r3, #12
 8008548:	617b      	str	r3, [r7, #20]
 800854a:	e041      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	4a2f      	ldr	r2, [pc, #188]	@ (800860c <USB_SetTurnaroundTime+0x12c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d906      	bls.n	8008562 <USB_SetTurnaroundTime+0x82>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4a2e      	ldr	r2, [pc, #184]	@ (8008610 <USB_SetTurnaroundTime+0x130>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d802      	bhi.n	8008562 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800855c:	230b      	movs	r3, #11
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e036      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	4a2a      	ldr	r2, [pc, #168]	@ (8008610 <USB_SetTurnaroundTime+0x130>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d906      	bls.n	8008578 <USB_SetTurnaroundTime+0x98>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4a29      	ldr	r2, [pc, #164]	@ (8008614 <USB_SetTurnaroundTime+0x134>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d802      	bhi.n	8008578 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008572:	230a      	movs	r3, #10
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e02b      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4a26      	ldr	r2, [pc, #152]	@ (8008614 <USB_SetTurnaroundTime+0x134>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d906      	bls.n	800858e <USB_SetTurnaroundTime+0xae>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a25      	ldr	r2, [pc, #148]	@ (8008618 <USB_SetTurnaroundTime+0x138>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d202      	bcs.n	800858e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008588:	2309      	movs	r3, #9
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	e020      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4a21      	ldr	r2, [pc, #132]	@ (8008618 <USB_SetTurnaroundTime+0x138>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d306      	bcc.n	80085a4 <USB_SetTurnaroundTime+0xc4>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a20      	ldr	r2, [pc, #128]	@ (800861c <USB_SetTurnaroundTime+0x13c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d802      	bhi.n	80085a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800859e:	2308      	movs	r3, #8
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	e015      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a1d      	ldr	r2, [pc, #116]	@ (800861c <USB_SetTurnaroundTime+0x13c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d906      	bls.n	80085ba <USB_SetTurnaroundTime+0xda>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008620 <USB_SetTurnaroundTime+0x140>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d202      	bcs.n	80085ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085b4:	2307      	movs	r3, #7
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	e00a      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085ba:	2306      	movs	r3, #6
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	e007      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085c6:	2309      	movs	r3, #9
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	e001      	b.n	80085d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80085cc:	2309      	movs	r3, #9
 80085ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	029b      	lsls	r3, r3, #10
 80085e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	00d8acbf 	.word	0x00d8acbf
 8008600:	00e4e1c0 	.word	0x00e4e1c0
 8008604:	00f42400 	.word	0x00f42400
 8008608:	01067380 	.word	0x01067380
 800860c:	011a499f 	.word	0x011a499f
 8008610:	01312cff 	.word	0x01312cff
 8008614:	014ca43f 	.word	0x014ca43f
 8008618:	016e3600 	.word	0x016e3600
 800861c:	01a6ab1f 	.word	0x01a6ab1f
 8008620:	01e84800 	.word	0x01e84800

08008624 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f043 0201 	orr.w	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f023 0201 	bic.w	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d115      	bne.n	80086b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008696:	200a      	movs	r0, #10
 8008698:	f7f9 fb3c 	bl	8001d14 <HAL_Delay>
      ms += 10U;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	330a      	adds	r3, #10
 80086a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f001 f93f 	bl	8009926 <USB_GetMode>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d01e      	beq.n	80086ec <USB_SetCurrentMode+0x84>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80086b2:	d9f0      	bls.n	8008696 <USB_SetCurrentMode+0x2e>
 80086b4:	e01a      	b.n	80086ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086b6:	78fb      	ldrb	r3, [r7, #3]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d115      	bne.n	80086e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086c8:	200a      	movs	r0, #10
 80086ca:	f7f9 fb23 	bl	8001d14 <HAL_Delay>
      ms += 10U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	330a      	adds	r3, #10
 80086d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 f926 	bl	8009926 <USB_GetMode>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <USB_SetCurrentMode+0x84>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80086e4:	d9f0      	bls.n	80086c8 <USB_SetCurrentMode+0x60>
 80086e6:	e001      	b.n	80086ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e005      	b.n	80086f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80086f0:	d101      	bne.n	80086f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e000      	b.n	80086f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008700:	b084      	sub	sp, #16
 8008702:	b580      	push	{r7, lr}
 8008704:	b086      	sub	sp, #24
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800870e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800871a:	2300      	movs	r3, #0
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	e009      	b.n	8008734 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	3340      	adds	r3, #64	@ 0x40
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	2200      	movs	r2, #0
 800872c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3301      	adds	r3, #1
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b0e      	cmp	r3, #14
 8008738:	d9f2      	bls.n	8008720 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800873a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800873e:	2b00      	cmp	r3, #0
 8008740:	d11c      	bne.n	800877c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008750:	f043 0302 	orr.w	r3, r3, #2
 8008754:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008766:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	639a      	str	r2, [r3, #56]	@ 0x38
 800877a:	e00b      	b.n	8008794 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008780:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800879a:	461a      	mov	r2, r3
 800879c:	2300      	movs	r3, #0
 800879e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d10d      	bne.n	80087c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087b0:	2100      	movs	r1, #0
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f968 	bl	8008a88 <USB_SetDevSpeed>
 80087b8:	e008      	b.n	80087cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087ba:	2101      	movs	r1, #1
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f963 	bl	8008a88 <USB_SetDevSpeed>
 80087c2:	e003      	b.n	80087cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087c4:	2103      	movs	r1, #3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f95e 	bl	8008a88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087cc:	2110      	movs	r1, #16
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f8fa 	bl	80089c8 <USB_FlushTxFifo>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f924 	bl	8008a2c <USB_FlushRxFifo>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f4:	461a      	mov	r2, r3
 80087f6:	2300      	movs	r3, #0
 80087f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008800:	461a      	mov	r2, r3
 8008802:	2300      	movs	r3, #0
 8008804:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800880c:	461a      	mov	r2, r3
 800880e:	2300      	movs	r3, #0
 8008810:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
 8008816:	e043      	b.n	80088a0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800882a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800882e:	d118      	bne.n	8008862 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10a      	bne.n	800884c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008842:	461a      	mov	r2, r3
 8008844:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	e013      	b.n	8008874 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008858:	461a      	mov	r2, r3
 800885a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	e008      	b.n	8008874 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800886e:	461a      	mov	r2, r3
 8008870:	2300      	movs	r3, #0
 8008872:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008880:	461a      	mov	r2, r3
 8008882:	2300      	movs	r3, #0
 8008884:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008892:	461a      	mov	r2, r3
 8008894:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008898:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3301      	adds	r3, #1
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088a4:	461a      	mov	r2, r3
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d3b5      	bcc.n	8008818 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ac:	2300      	movs	r3, #0
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	e043      	b.n	800893a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088c8:	d118      	bne.n	80088fc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088dc:	461a      	mov	r2, r3
 80088de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	e013      	b.n	800890e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f2:	461a      	mov	r2, r3
 80088f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	e008      	b.n	800890e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008908:	461a      	mov	r2, r3
 800890a:	2300      	movs	r3, #0
 800890c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800891a:	461a      	mov	r2, r3
 800891c:	2300      	movs	r3, #0
 800891e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892c:	461a      	mov	r2, r3
 800892e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008932:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3301      	adds	r3, #1
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800893e:	461a      	mov	r2, r3
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	4293      	cmp	r3, r2
 8008944:	d3b5      	bcc.n	80088b2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008958:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008966:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008968:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800896c:	2b00      	cmp	r3, #0
 800896e:	d105      	bne.n	800897c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f043 0210 	orr.w	r2, r3, #16
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699a      	ldr	r2, [r3, #24]
 8008980:	4b10      	ldr	r3, [pc, #64]	@ (80089c4 <USB_DevInit+0x2c4>)
 8008982:	4313      	orrs	r3, r2
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008988:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	f043 0208 	orr.w	r2, r3, #8
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800899c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d107      	bne.n	80089b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089ac:	f043 0304 	orr.w	r3, r3, #4
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089c0:	b004      	add	sp, #16
 80089c2:	4770      	bx	lr
 80089c4:	803c3800 	.word	0x803c3800

080089c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3301      	adds	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089e2:	d901      	bls.n	80089e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e01b      	b.n	8008a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	daf2      	bge.n	80089d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	019b      	lsls	r3, r3, #6
 80089f8:	f043 0220 	orr.w	r2, r3, #32
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a0c:	d901      	bls.n	8008a12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e006      	b.n	8008a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	d0f0      	beq.n	8008a00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a44:	d901      	bls.n	8008a4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e018      	b.n	8008a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	daf2      	bge.n	8008a38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2210      	movs	r2, #16
 8008a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a68:	d901      	bls.n	8008a6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e006      	b.n	8008a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	f003 0310 	and.w	r3, r3, #16
 8008a76:	2b10      	cmp	r3, #16
 8008a78:	d0f0      	beq.n	8008a5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	68f9      	ldr	r1, [r7, #12]
 8008aa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b087      	sub	sp, #28
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 0306 	and.w	r3, r3, #6
 8008ad2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]
 8008ade:	e00a      	b.n	8008af6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d002      	beq.n	8008aec <USB_GetDevSpeed+0x32>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b06      	cmp	r3, #6
 8008aea:	d102      	bne.n	8008af2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008aec:	2302      	movs	r3, #2
 8008aee:	75fb      	strb	r3, [r7, #23]
 8008af0:	e001      	b.n	8008af6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008af2:	230f      	movs	r3, #15
 8008af4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	371c      	adds	r7, #28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	785b      	ldrb	r3, [r3, #1]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d13a      	bne.n	8008b96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	2101      	movs	r1, #1
 8008b32:	fa01 f303 	lsl.w	r3, r1, r3
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d155      	bne.n	8008c04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	791b      	ldrb	r3, [r3, #4]
 8008b72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	059b      	lsls	r3, r3, #22
 8008b7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	0151      	lsls	r1, r2, #5
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	440a      	add	r2, r1
 8008b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	e036      	b.n	8008c04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b9c:	69da      	ldr	r2, [r3, #28]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bac:	041b      	lsls	r3, r3, #16
 8008bae:	68f9      	ldr	r1, [r7, #12]
 8008bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d11a      	bne.n	8008c04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	791b      	ldrb	r3, [r3, #4]
 8008be8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bea:	430b      	orrs	r3, r1
 8008bec:	4313      	orrs	r3, r2
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
	...

08008c14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d161      	bne.n	8008cf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c46:	d11f      	bne.n	8008c88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	2101      	movs	r1, #1
 8008c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	68f9      	ldr	r1, [r7, #12]
 8008ca4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ca8:	4013      	ands	r3, r2
 8008caa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cb2:	69da      	ldr	r2, [r3, #28]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 030f 	and.w	r3, r3, #15
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	68f9      	ldr	r1, [r7, #12]
 8008cc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ccc:	4013      	ands	r3, r2
 8008cce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	0159      	lsls	r1, r3, #5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	440b      	add	r3, r1
 8008ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cea:	4619      	mov	r1, r3
 8008cec:	4b35      	ldr	r3, [pc, #212]	@ (8008dc4 <USB_DeactivateEndpoint+0x1b0>)
 8008cee:	4013      	ands	r3, r2
 8008cf0:	600b      	str	r3, [r1, #0]
 8008cf2:	e060      	b.n	8008db6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d0a:	d11f      	bne.n	8008d4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	0151      	lsls	r1, r2, #5
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	440a      	add	r2, r1
 8008d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	0151      	lsls	r1, r2, #5
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	440a      	add	r2, r1
 8008d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	f003 030f 	and.w	r3, r3, #15
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d62:	041b      	lsls	r3, r3, #16
 8008d64:	43db      	mvns	r3, r3
 8008d66:	68f9      	ldr	r1, [r7, #12]
 8008d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d76:	69da      	ldr	r2, [r3, #28]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	f003 030f 	and.w	r3, r3, #15
 8008d80:	2101      	movs	r1, #1
 8008d82:	fa01 f303 	lsl.w	r3, r1, r3
 8008d86:	041b      	lsls	r3, r3, #16
 8008d88:	43db      	mvns	r3, r3
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d90:	4013      	ands	r3, r2
 8008d92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	0159      	lsls	r1, r3, #5
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	440b      	add	r3, r1
 8008daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dae:	4619      	mov	r1, r3
 8008db0:	4b05      	ldr	r3, [pc, #20]	@ (8008dc8 <USB_DeactivateEndpoint+0x1b4>)
 8008db2:	4013      	ands	r3, r2
 8008db4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	ec337800 	.word	0xec337800
 8008dc8:	eff37800 	.word	0xeff37800

08008dcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	@ 0x28
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	f040 817f 	bne.w	80090ec <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d132      	bne.n	8008e5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008e14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	0151      	lsls	r1, r2, #5
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	440a      	add	r2, r1
 8008e30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	0151      	lsls	r1, r2, #5
 8008e4c:	69fa      	ldr	r2, [r7, #28]
 8008e4e:	440a      	add	r2, r1
 8008e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e54:	0cdb      	lsrs	r3, r3, #19
 8008e56:	04db      	lsls	r3, r3, #19
 8008e58:	6113      	str	r3, [r2, #16]
 8008e5a:	e097      	b.n	8008f8c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e76:	0cdb      	lsrs	r3, r3, #19
 8008e78:	04db      	lsls	r3, r3, #19
 8008e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008e9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008e9e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d11a      	bne.n	8008edc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	691a      	ldr	r2, [r3, #16]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d903      	bls.n	8008eba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	69fa      	ldr	r2, [r7, #28]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ed4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ed8:	6113      	str	r3, [r2, #16]
 8008eda:	e044      	b.n	8008f66 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	1e5a      	subs	r2, r3, #1
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efe:	691a      	ldr	r2, [r3, #16]
 8008f00:	8afb      	ldrh	r3, [r7, #22]
 8008f02:	04d9      	lsls	r1, r3, #19
 8008f04:	4ba4      	ldr	r3, [pc, #656]	@ (8009198 <USB_EPStartXfer+0x3cc>)
 8008f06:	400b      	ands	r3, r1
 8008f08:	69b9      	ldr	r1, [r7, #24]
 8008f0a:	0148      	lsls	r0, r1, #5
 8008f0c:	69f9      	ldr	r1, [r7, #28]
 8008f0e:	4401      	add	r1, r0
 8008f10:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f14:	4313      	orrs	r3, r2
 8008f16:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	791b      	ldrb	r3, [r3, #4]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d122      	bne.n	8008f66 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f3a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008f3e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f4c:	691a      	ldr	r2, [r3, #16]
 8008f4e:	8afb      	ldrh	r3, [r7, #22]
 8008f50:	075b      	lsls	r3, r3, #29
 8008f52:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008f56:	69b9      	ldr	r1, [r7, #24]
 8008f58:	0148      	lsls	r0, r1, #5
 8008f5a:	69f9      	ldr	r1, [r7, #28]
 8008f5c:	4401      	add	r1, r0
 8008f5e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f62:	4313      	orrs	r3, r2
 8008f64:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f72:	691a      	ldr	r2, [r3, #16]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f7c:	69b9      	ldr	r1, [r7, #24]
 8008f7e:	0148      	lsls	r0, r1, #5
 8008f80:	69f9      	ldr	r1, [r7, #28]
 8008f82:	4401      	add	r1, r0
 8008f84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d14b      	bne.n	800902a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	791b      	ldrb	r3, [r3, #4]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d128      	bne.n	8009008 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d110      	bne.n	8008fe8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fe0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	e00f      	b.n	8009008 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009006:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	440a      	add	r2, r1
 800901e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009022:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	e166      	b.n	80092f8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009044:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009048:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	791b      	ldrb	r3, [r3, #4]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d015      	beq.n	800907e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 814e 	beq.w	80092f8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f003 030f 	and.w	r3, r3, #15
 800906c:	2101      	movs	r1, #1
 800906e:	fa01 f303 	lsl.w	r3, r1, r3
 8009072:	69f9      	ldr	r1, [r7, #28]
 8009074:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009078:	4313      	orrs	r3, r2
 800907a:	634b      	str	r3, [r1, #52]	@ 0x34
 800907c:	e13c      	b.n	80092f8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800908a:	2b00      	cmp	r3, #0
 800908c:	d110      	bne.n	80090b0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	0151      	lsls	r1, r2, #5
 80090a0:	69fa      	ldr	r2, [r7, #28]
 80090a2:	440a      	add	r2, r1
 80090a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	e00f      	b.n	80090d0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	0151      	lsls	r1, r2, #5
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	440a      	add	r2, r1
 80090c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	68d9      	ldr	r1, [r3, #12]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	781a      	ldrb	r2, [r3, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	b298      	uxth	r0, r3
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	4603      	mov	r3, r0
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 f9b9 	bl	800945c <USB_WritePacket>
 80090ea:	e105      	b.n	80092f8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	0151      	lsls	r1, r2, #5
 80090fe:	69fa      	ldr	r2, [r7, #28]
 8009100:	440a      	add	r2, r1
 8009102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009106:	0cdb      	lsrs	r3, r3, #19
 8009108:	04db      	lsls	r3, r3, #19
 800910a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	0151      	lsls	r1, r2, #5
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	440a      	add	r2, r1
 8009122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009126:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800912a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800912e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d132      	bne.n	800919c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800915a:	691a      	ldr	r2, [r3, #16]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009164:	69b9      	ldr	r1, [r7, #24]
 8009166:	0148      	lsls	r0, r1, #5
 8009168:	69f9      	ldr	r1, [r7, #28]
 800916a:	4401      	add	r1, r0
 800916c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009170:	4313      	orrs	r3, r2
 8009172:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	440a      	add	r2, r1
 800918a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800918e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009192:	6113      	str	r3, [r2, #16]
 8009194:	e062      	b.n	800925c <USB_EPStartXfer+0x490>
 8009196:	bf00      	nop
 8009198:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d123      	bne.n	80091ec <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b0:	691a      	ldr	r2, [r3, #16]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ba:	69b9      	ldr	r1, [r7, #24]
 80091bc:	0148      	lsls	r0, r1, #5
 80091be:	69f9      	ldr	r1, [r7, #28]
 80091c0:	4401      	add	r1, r0
 80091c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091c6:	4313      	orrs	r3, r2
 80091c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091e8:	6113      	str	r3, [r2, #16]
 80091ea:	e037      	b.n	800925c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	691a      	ldr	r2, [r3, #16]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	4413      	add	r3, r2
 80091f6:	1e5a      	subs	r2, r3, #1
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009200:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	8afa      	ldrh	r2, [r7, #22]
 8009208:	fb03 f202 	mul.w	r2, r3, r2
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800921c:	691a      	ldr	r2, [r3, #16]
 800921e:	8afb      	ldrh	r3, [r7, #22]
 8009220:	04d9      	lsls	r1, r3, #19
 8009222:	4b38      	ldr	r3, [pc, #224]	@ (8009304 <USB_EPStartXfer+0x538>)
 8009224:	400b      	ands	r3, r1
 8009226:	69b9      	ldr	r1, [r7, #24]
 8009228:	0148      	lsls	r0, r1, #5
 800922a:	69f9      	ldr	r1, [r7, #28]
 800922c:	4401      	add	r1, r0
 800922e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009232:	4313      	orrs	r3, r2
 8009234:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009242:	691a      	ldr	r2, [r3, #16]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800924c:	69b9      	ldr	r1, [r7, #24]
 800924e:	0148      	lsls	r0, r1, #5
 8009250:	69f9      	ldr	r1, [r7, #28]
 8009252:	4401      	add	r1, r0
 8009254:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009258:	4313      	orrs	r3, r2
 800925a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d10d      	bne.n	800927e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	68d9      	ldr	r1, [r3, #12]
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800927a:	460a      	mov	r2, r1
 800927c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	791b      	ldrb	r3, [r3, #4]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d128      	bne.n	80092d8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009292:	2b00      	cmp	r3, #0
 8009294:	d110      	bne.n	80092b8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	e00f      	b.n	80092d8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	0151      	lsls	r1, r2, #5
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	440a      	add	r2, r1
 80092ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80092f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	1ff80000 	.word	0x1ff80000

08009308 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	785b      	ldrb	r3, [r3, #1]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d14a      	bne.n	80093bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800933a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800933e:	f040 8086 	bne.w	800944e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009360:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009364:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	7812      	ldrb	r2, [r2, #0]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009388:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3301      	adds	r3, #1
 800938e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009396:	4293      	cmp	r3, r2
 8009398:	d902      	bls.n	80093a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	75fb      	strb	r3, [r7, #23]
          break;
 800939e:	e056      	b.n	800944e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093b8:	d0e7      	beq.n	800938a <USB_EPStopXfer+0x82>
 80093ba:	e048      	b.n	800944e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093d4:	d13b      	bne.n	800944e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	7812      	ldrb	r2, [r2, #0]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	440a      	add	r2, r1
 8009414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800941c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3301      	adds	r3, #1
 8009422:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f242 7210 	movw	r2, #10000	@ 0x2710
 800942a:	4293      	cmp	r3, r2
 800942c:	d902      	bls.n	8009434 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]
          break;
 8009432:	e00c      	b.n	800944e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800944c:	d0e7      	beq.n	800941e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800944e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009450:	4618      	mov	r0, r3
 8009452:	371c      	adds	r7, #28
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800945c:	b480      	push	{r7}
 800945e:	b089      	sub	sp, #36	@ 0x24
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	4611      	mov	r1, r2
 8009468:	461a      	mov	r2, r3
 800946a:	460b      	mov	r3, r1
 800946c:	71fb      	strb	r3, [r7, #7]
 800946e:	4613      	mov	r3, r2
 8009470:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800947a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800947e:	2b00      	cmp	r3, #0
 8009480:	d123      	bne.n	80094ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009482:	88bb      	ldrh	r3, [r7, #4]
 8009484:	3303      	adds	r3, #3
 8009486:	089b      	lsrs	r3, r3, #2
 8009488:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800948a:	2300      	movs	r3, #0
 800948c:	61bb      	str	r3, [r7, #24]
 800948e:	e018      	b.n	80094c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	031a      	lsls	r2, r3, #12
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	4413      	add	r3, r2
 8009498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800949c:	461a      	mov	r2, r3
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	3301      	adds	r3, #1
 80094a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	3301      	adds	r3, #1
 80094ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	3301      	adds	r3, #1
 80094b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	3301      	adds	r3, #1
 80094ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	3301      	adds	r3, #1
 80094c0:	61bb      	str	r3, [r7, #24]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d3e2      	bcc.n	8009490 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3724      	adds	r7, #36	@ 0x24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094d8:	b480      	push	{r7}
 80094da:	b08b      	sub	sp, #44	@ 0x2c
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	4613      	mov	r3, r2
 80094e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80094ee:	88fb      	ldrh	r3, [r7, #6]
 80094f0:	089b      	lsrs	r3, r3, #2
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80094f6:	88fb      	ldrh	r3, [r7, #6]
 80094f8:	f003 0303 	and.w	r3, r3, #3
 80094fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80094fe:	2300      	movs	r3, #0
 8009500:	623b      	str	r3, [r7, #32]
 8009502:	e014      	b.n	800952e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009512:	3301      	adds	r3, #1
 8009514:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009518:	3301      	adds	r3, #1
 800951a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800951c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951e:	3301      	adds	r3, #1
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	3301      	adds	r3, #1
 8009526:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	3301      	adds	r3, #1
 800952c:	623b      	str	r3, [r7, #32]
 800952e:	6a3a      	ldr	r2, [r7, #32]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	429a      	cmp	r2, r3
 8009534:	d3e6      	bcc.n	8009504 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009536:	8bfb      	ldrh	r3, [r7, #30]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01e      	beq.n	800957a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009546:	461a      	mov	r2, r3
 8009548:	f107 0310 	add.w	r3, r7, #16
 800954c:	6812      	ldr	r2, [r2, #0]
 800954e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
 800955c:	b2da      	uxtb	r2, r3
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	701a      	strb	r2, [r3, #0]
      i++;
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	3301      	adds	r3, #1
 8009566:	623b      	str	r3, [r7, #32]
      pDest++;
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	3301      	adds	r3, #1
 800956c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800956e:	8bfb      	ldrh	r3, [r7, #30]
 8009570:	3b01      	subs	r3, #1
 8009572:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009574:	8bfb      	ldrh	r3, [r7, #30]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1ea      	bne.n	8009550 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800957c:	4618      	mov	r0, r3
 800957e:	372c      	adds	r7, #44	@ 0x2c
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	785b      	ldrb	r3, [r3, #1]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d12c      	bne.n	80095fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	db12      	blt.n	80095dc <USB_EPSetStall+0x54>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00f      	beq.n	80095dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	0151      	lsls	r1, r2, #5
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	440a      	add	r2, r1
 80095d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	0151      	lsls	r1, r2, #5
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	440a      	add	r2, r1
 80095f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	e02b      	b.n	8009656 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	db12      	blt.n	8009636 <USB_EPSetStall+0xae>
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00f      	beq.n	8009636 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	0151      	lsls	r1, r2, #5
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	440a      	add	r2, r1
 800962c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009630:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009634:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009654:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d128      	bne.n	80096d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	0151      	lsls	r1, r2, #5
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	440a      	add	r2, r1
 8009696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800969a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800969e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	791b      	ldrb	r3, [r3, #4]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d003      	beq.n	80096b0 <USB_EPClearStall+0x4c>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	791b      	ldrb	r3, [r3, #4]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d138      	bne.n	8009722 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	e027      	b.n	8009722 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	791b      	ldrb	r3, [r3, #4]
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d003      	beq.n	8009702 <USB_EPClearStall+0x9e>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	791b      	ldrb	r3, [r3, #4]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d10f      	bne.n	8009722 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	0151      	lsls	r1, r2, #5
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	440a      	add	r2, r1
 8009718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800971c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009720:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800974e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009752:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009764:	68f9      	ldr	r1, [r7, #12]
 8009766:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800976a:	4313      	orrs	r3, r2
 800976c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009796:	f023 0303 	bic.w	r3, r3, #3
 800979a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097aa:	f023 0302 	bic.w	r3, r3, #2
 80097ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097d8:	f023 0303 	bic.w	r3, r3, #3
 80097dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097ec:	f043 0302 	orr.w	r3, r3, #2
 80097f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	4013      	ands	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009818:	68fb      	ldr	r3, [r7, #12]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	4013      	ands	r3, r2
 8009848:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	0c1b      	lsrs	r3, r3, #16
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800985a:	b480      	push	{r7}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	4013      	ands	r3, r2
 800987c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	b29b      	uxth	r3, r3
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800988e:	b480      	push	{r7}
 8009890:	b085      	sub	sp, #20
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	4013      	ands	r3, r2
 80098ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098bc:	68bb      	ldr	r3, [r7, #8]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b087      	sub	sp, #28
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	460b      	mov	r3, r1
 80098d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	f003 030f 	and.w	r3, r3, #15
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	fa22 f303 	lsr.w	r3, r2, r3
 80098fa:	01db      	lsls	r3, r3, #7
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	4313      	orrs	r3, r2
 8009902:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	4013      	ands	r3, r2
 8009916:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009918:	68bb      	ldr	r3, [r7, #8]
}
 800991a:	4618      	mov	r0, r3
 800991c:	371c      	adds	r7, #28
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	f003 0301 	and.w	r3, r3, #1
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800995c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009960:	f023 0307 	bic.w	r3, r3, #7
 8009964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	460b      	mov	r3, r1
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	333c      	adds	r3, #60	@ 0x3c
 800999e:	3304      	adds	r3, #4
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	4a26      	ldr	r2, [pc, #152]	@ (8009a40 <USB_EP0_OutStart+0xb8>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d90a      	bls.n	80099c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099bc:	d101      	bne.n	80099c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	e037      	b.n	8009a32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c8:	461a      	mov	r2, r3
 80099ca:	2300      	movs	r3, #0
 80099cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099f0:	f043 0318 	orr.w	r3, r3, #24
 80099f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a04:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a0a:	7afb      	ldrb	r3, [r7, #11]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d10f      	bne.n	8009a30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a16:	461a      	mov	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a2a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009a2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	371c      	adds	r7, #28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	4f54300a 	.word	0x4f54300a

08009a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a5c:	d901      	bls.n	8009a62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e022      	b.n	8009aa8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	daf2      	bge.n	8009a50 <USB_CoreReset+0xc>

  count = 10U;
 8009a6a:	230a      	movs	r3, #10
 8009a6c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009a6e:	e002      	b.n	8009a76 <USB_CoreReset+0x32>
  {
    count--;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1f9      	bne.n	8009a70 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	f043 0201 	orr.w	r2, r3, #1
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a94:	d901      	bls.n	8009a9a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e006      	b.n	8009aa8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d0f0      	beq.n	8009a88 <USB_CoreReset+0x44>

  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ac0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009ac4:	f002 fd1e 	bl	800c504 <USBD_static_malloc>
 8009ac8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d109      	bne.n	8009ae4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	32b0      	adds	r2, #176	@ 0xb0
 8009ada:	2100      	movs	r1, #0
 8009adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e0d4      	b.n	8009c8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ae4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009ae8:	2100      	movs	r1, #0
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f002 fd4e 	bl	800c58c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	32b0      	adds	r2, #176	@ 0xb0
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32b0      	adds	r2, #176	@ 0xb0
 8009b0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7c1b      	ldrb	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d138      	bne.n	8009b8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8009c98 <USBD_CDC_Init+0x1e4>)
 8009b1e:	7819      	ldrb	r1, [r3, #0]
 8009b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b24:	2202      	movs	r2, #2
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f002 fbc9 	bl	800c2be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8009c98 <USBD_CDC_Init+0x1e4>)
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 020f 	and.w	r2, r3, #15
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	3323      	adds	r3, #35	@ 0x23
 8009b42:	2201      	movs	r2, #1
 8009b44:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b46:	4b55      	ldr	r3, [pc, #340]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009b48:	7819      	ldrb	r1, [r3, #0]
 8009b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b4e:	2202      	movs	r2, #2
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f002 fbb4 	bl	800c2be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b56:	4b51      	ldr	r3, [pc, #324]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f003 020f 	and.w	r2, r3, #15
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	440b      	add	r3, r1
 8009b6a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009b6e:	2201      	movs	r2, #1
 8009b70:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b72:	4b4b      	ldr	r3, [pc, #300]	@ (8009ca0 <USBD_CDC_Init+0x1ec>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f003 020f 	and.w	r2, r3, #15
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	440b      	add	r3, r1
 8009b86:	331c      	adds	r3, #28
 8009b88:	2210      	movs	r2, #16
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	e035      	b.n	8009bfa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b8e:	4b42      	ldr	r3, [pc, #264]	@ (8009c98 <USBD_CDC_Init+0x1e4>)
 8009b90:	7819      	ldrb	r1, [r3, #0]
 8009b92:	2340      	movs	r3, #64	@ 0x40
 8009b94:	2202      	movs	r2, #2
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f002 fb91 	bl	800c2be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8009c98 <USBD_CDC_Init+0x1e4>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	f003 020f 	and.w	r2, r3, #15
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	440b      	add	r3, r1
 8009bb0:	3323      	adds	r3, #35	@ 0x23
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bb6:	4b39      	ldr	r3, [pc, #228]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009bb8:	7819      	ldrb	r1, [r3, #0]
 8009bba:	2340      	movs	r3, #64	@ 0x40
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f002 fb7d 	bl	800c2be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bc4:	4b35      	ldr	r3, [pc, #212]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	f003 020f 	and.w	r2, r3, #15
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	440b      	add	r3, r1
 8009bd8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009bdc:	2201      	movs	r2, #1
 8009bde:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009be0:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca0 <USBD_CDC_Init+0x1ec>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 020f 	and.w	r2, r3, #15
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	331c      	adds	r3, #28
 8009bf6:	2210      	movs	r2, #16
 8009bf8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009bfa:	4b29      	ldr	r3, [pc, #164]	@ (8009ca0 <USBD_CDC_Init+0x1ec>)
 8009bfc:	7819      	ldrb	r1, [r3, #0]
 8009bfe:	2308      	movs	r3, #8
 8009c00:	2203      	movs	r2, #3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fb5b 	bl	800c2be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c08:	4b25      	ldr	r3, [pc, #148]	@ (8009ca0 <USBD_CDC_Init+0x1ec>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	f003 020f 	and.w	r2, r3, #15
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	4613      	mov	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	3323      	adds	r3, #35	@ 0x23
 8009c1e:	2201      	movs	r2, #1
 8009c20:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	33b0      	adds	r3, #176	@ 0xb0
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e018      	b.n	8009c8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	7c1b      	ldrb	r3, [r3, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c64:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009c66:	7819      	ldrb	r1, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f002 fc12 	bl	800c49c <USBD_LL_PrepareReceive>
 8009c78:	e008      	b.n	8009c8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c7a:	4b08      	ldr	r3, [pc, #32]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009c7c:	7819      	ldrb	r1, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c84:	2340      	movs	r3, #64	@ 0x40
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f002 fc08 	bl	800c49c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	200000c3 	.word	0x200000c3
 8009c9c:	200000c4 	.word	0x200000c4
 8009ca0:	200000c5 	.word	0x200000c5

08009ca4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8009d9c <USBD_CDC_DeInit+0xf8>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f002 fb27 	bl	800c30a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009cbc:	4b37      	ldr	r3, [pc, #220]	@ (8009d9c <USBD_CDC_DeInit+0xf8>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 020f 	and.w	r2, r3, #15
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	3323      	adds	r3, #35	@ 0x23
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009cd6:	4b32      	ldr	r3, [pc, #200]	@ (8009da0 <USBD_CDC_DeInit+0xfc>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f002 fb14 	bl	800c30a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8009da0 <USBD_CDC_DeInit+0xfc>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f003 020f 	and.w	r2, r3, #15
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009cfe:	4b29      	ldr	r3, [pc, #164]	@ (8009da4 <USBD_CDC_DeInit+0x100>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f002 fb00 	bl	800c30a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d0a:	4b26      	ldr	r3, [pc, #152]	@ (8009da4 <USBD_CDC_DeInit+0x100>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 020f 	and.w	r2, r3, #15
 8009d12:	6879      	ldr	r1, [r7, #4]
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	3323      	adds	r3, #35	@ 0x23
 8009d20:	2200      	movs	r2, #0
 8009d22:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d24:	4b1f      	ldr	r3, [pc, #124]	@ (8009da4 <USBD_CDC_DeInit+0x100>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f003 020f 	and.w	r2, r3, #15
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	440b      	add	r3, r1
 8009d38:	331c      	adds	r3, #28
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	32b0      	adds	r2, #176	@ 0xb0
 8009d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01f      	beq.n	8009d90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	33b0      	adds	r3, #176	@ 0xb0
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	32b0      	adds	r2, #176	@ 0xb0
 8009d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f002 fbd4 	bl	800c520 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	32b0      	adds	r2, #176	@ 0xb0
 8009d82:	2100      	movs	r1, #0
 8009d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200000c3 	.word	0x200000c3
 8009da0:	200000c4 	.word	0x200000c4
 8009da4:	200000c5 	.word	0x200000c5

08009da8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	32b0      	adds	r2, #176	@ 0xb0
 8009dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e0bf      	b.n	8009f58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d050      	beq.n	8009e86 <USBD_CDC_Setup+0xde>
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	f040 80af 	bne.w	8009f48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d03a      	beq.n	8009e68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	b25b      	sxtb	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da1b      	bge.n	8009e34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	33b0      	adds	r3, #176	@ 0xb0
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	88d2      	ldrh	r2, [r2, #6]
 8009e18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	88db      	ldrh	r3, [r3, #6]
 8009e1e:	2b07      	cmp	r3, #7
 8009e20:	bf28      	it	cs
 8009e22:	2307      	movcs	r3, #7
 8009e24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	89fa      	ldrh	r2, [r7, #14]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 fda9 	bl	800b984 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e32:	e090      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	785a      	ldrb	r2, [r3, #1]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	88db      	ldrh	r3, [r3, #6]
 8009e42:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e44:	d803      	bhi.n	8009e4e <USBD_CDC_Setup+0xa6>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88db      	ldrh	r3, [r3, #6]
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	e000      	b.n	8009e50 <USBD_CDC_Setup+0xa8>
 8009e4e:	2240      	movs	r2, #64	@ 0x40
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e56:	6939      	ldr	r1, [r7, #16]
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 fdbe 	bl	800b9e2 <USBD_CtlPrepareRx>
      break;
 8009e66:	e076      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	33b0      	adds	r3, #176	@ 0xb0
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	7850      	ldrb	r0, [r2, #1]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	4798      	blx	r3
      break;
 8009e84:	e067      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b0b      	cmp	r3, #11
 8009e8c:	d851      	bhi.n	8009f32 <USBD_CDC_Setup+0x18a>
 8009e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <USBD_CDC_Setup+0xec>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009ec5 	.word	0x08009ec5
 8009e98:	08009f41 	.word	0x08009f41
 8009e9c:	08009f33 	.word	0x08009f33
 8009ea0:	08009f33 	.word	0x08009f33
 8009ea4:	08009f33 	.word	0x08009f33
 8009ea8:	08009f33 	.word	0x08009f33
 8009eac:	08009f33 	.word	0x08009f33
 8009eb0:	08009f33 	.word	0x08009f33
 8009eb4:	08009f33 	.word	0x08009f33
 8009eb8:	08009f33 	.word	0x08009f33
 8009ebc:	08009eef 	.word	0x08009eef
 8009ec0:	08009f19 	.word	0x08009f19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d107      	bne.n	8009ee0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ed0:	f107 030a 	add.w	r3, r7, #10
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 fd53 	bl	800b984 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ede:	e032      	b.n	8009f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 fcd1 	bl	800b88a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	75fb      	strb	r3, [r7, #23]
          break;
 8009eec:	e02b      	b.n	8009f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d107      	bne.n	8009f0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009efa:	f107 030d 	add.w	r3, r7, #13
 8009efe:	2201      	movs	r2, #1
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fd3e 	bl	800b984 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f08:	e01d      	b.n	8009f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 fcbc 	bl	800b88a <USBD_CtlError>
            ret = USBD_FAIL;
 8009f12:	2303      	movs	r3, #3
 8009f14:	75fb      	strb	r3, [r7, #23]
          break;
 8009f16:	e016      	b.n	8009f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d00f      	beq.n	8009f44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fcaf 	bl	800b88a <USBD_CtlError>
            ret = USBD_FAIL;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f30:	e008      	b.n	8009f44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 fca8 	bl	800b88a <USBD_CtlError>
          ret = USBD_FAIL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f3e:	e002      	b.n	8009f46 <USBD_CDC_Setup+0x19e>
          break;
 8009f40:	bf00      	nop
 8009f42:	e008      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>
          break;
 8009f44:	bf00      	nop
      }
      break;
 8009f46:	e006      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fc9d 	bl	800b88a <USBD_CtlError>
      ret = USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	75fb      	strb	r3, [r7, #23]
      break;
 8009f54:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	32b0      	adds	r2, #176	@ 0xb0
 8009f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e065      	b.n	800a056 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	32b0      	adds	r2, #176	@ 0xb0
 8009f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	f003 020f 	and.w	r2, r3, #15
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	440b      	add	r3, r1
 8009fac:	3314      	adds	r3, #20
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02f      	beq.n	800a014 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	f003 020f 	and.w	r2, r3, #15
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	3314      	adds	r3, #20
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	f003 010f 	and.w	r1, r3, #15
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	00db      	lsls	r3, r3, #3
 8009fd6:	440b      	add	r3, r1
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4403      	add	r3, r0
 8009fdc:	331c      	adds	r3, #28
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009fe4:	fb01 f303 	mul.w	r3, r1, r3
 8009fe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d112      	bne.n	800a014 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009fee:	78fb      	ldrb	r3, [r7, #3]
 8009ff0:	f003 020f 	and.w	r2, r3, #15
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	440b      	add	r3, r1
 800a000:	3314      	adds	r3, #20
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a006:	78f9      	ldrb	r1, [r7, #3]
 800a008:	2300      	movs	r3, #0
 800a00a:	2200      	movs	r2, #0
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f002 fa24 	bl	800c45a <USBD_LL_Transmit>
 800a012:	e01f      	b.n	800a054 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2200      	movs	r2, #0
 800a018:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	33b0      	adds	r3, #176	@ 0xb0
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d010      	beq.n	800a054 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	33b0      	adds	r3, #176	@ 0xb0
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a050:	78fa      	ldrb	r2, [r7, #3]
 800a052:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	460b      	mov	r3, r1
 800a068:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	32b0      	adds	r2, #176	@ 0xb0
 800a074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a078:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	32b0      	adds	r2, #176	@ 0xb0
 800a084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e01a      	b.n	800a0c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f002 fa22 	bl	800c4de <USBD_LL_GetRxDataSize>
 800a09a:	4602      	mov	r2, r0
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	33b0      	adds	r3, #176	@ 0xb0
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	32b0      	adds	r2, #176	@ 0xb0
 800a0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e024      	b.n	800a13a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	33b0      	adds	r3, #176	@ 0xb0
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d019      	beq.n	800a138 <USBD_CDC_EP0_RxReady+0x6a>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a10a:	2bff      	cmp	r3, #255	@ 0xff
 800a10c:	d014      	beq.n	800a138 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	33b0      	adds	r3, #176	@ 0xb0
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a126:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a12e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	22ff      	movs	r2, #255	@ 0xff
 800a134:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a14c:	2182      	movs	r1, #130	@ 0x82
 800a14e:	4818      	ldr	r0, [pc, #96]	@ (800a1b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a150:	f000 fd62 	bl	800ac18 <USBD_GetEpDesc>
 800a154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a156:	2101      	movs	r1, #1
 800a158:	4815      	ldr	r0, [pc, #84]	@ (800a1b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a15a:	f000 fd5d 	bl	800ac18 <USBD_GetEpDesc>
 800a15e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a160:	2181      	movs	r1, #129	@ 0x81
 800a162:	4813      	ldr	r0, [pc, #76]	@ (800a1b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a164:	f000 fd58 	bl	800ac18 <USBD_GetEpDesc>
 800a168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d002      	beq.n	800a176 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2210      	movs	r2, #16
 800a174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d006      	beq.n	800a18a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2200      	movs	r2, #0
 800a180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a184:	711a      	strb	r2, [r3, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a198:	711a      	strb	r2, [r3, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2243      	movs	r2, #67	@ 0x43
 800a1a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1a4:	4b02      	ldr	r3, [pc, #8]	@ (800a1b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20000080 	.word	0x20000080

0800a1b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1bc:	2182      	movs	r1, #130	@ 0x82
 800a1be:	4818      	ldr	r0, [pc, #96]	@ (800a220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1c0:	f000 fd2a 	bl	800ac18 <USBD_GetEpDesc>
 800a1c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	4815      	ldr	r0, [pc, #84]	@ (800a220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1ca:	f000 fd25 	bl	800ac18 <USBD_GetEpDesc>
 800a1ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1d0:	2181      	movs	r1, #129	@ 0x81
 800a1d2:	4813      	ldr	r0, [pc, #76]	@ (800a220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1d4:	f000 fd20 	bl	800ac18 <USBD_GetEpDesc>
 800a1d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2210      	movs	r2, #16
 800a1e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	711a      	strb	r2, [r3, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f042 0202 	orr.w	r2, r2, #2
 800a1f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	711a      	strb	r2, [r3, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f042 0202 	orr.w	r2, r2, #2
 800a20c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2243      	movs	r2, #67	@ 0x43
 800a212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a214:	4b02      	ldr	r3, [pc, #8]	@ (800a220 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000080 	.word	0x20000080

0800a224 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a22c:	2182      	movs	r1, #130	@ 0x82
 800a22e:	4818      	ldr	r0, [pc, #96]	@ (800a290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a230:	f000 fcf2 	bl	800ac18 <USBD_GetEpDesc>
 800a234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a236:	2101      	movs	r1, #1
 800a238:	4815      	ldr	r0, [pc, #84]	@ (800a290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a23a:	f000 fced 	bl	800ac18 <USBD_GetEpDesc>
 800a23e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a240:	2181      	movs	r1, #129	@ 0x81
 800a242:	4813      	ldr	r0, [pc, #76]	@ (800a290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a244:	f000 fce8 	bl	800ac18 <USBD_GetEpDesc>
 800a248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d002      	beq.n	800a256 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2210      	movs	r2, #16
 800a254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2200      	movs	r2, #0
 800a260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a264:	711a      	strb	r2, [r3, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d006      	beq.n	800a27e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a278:	711a      	strb	r2, [r3, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2243      	movs	r2, #67	@ 0x43
 800a282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a284:	4b02      	ldr	r3, [pc, #8]	@ (800a290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000080 	.word	0x20000080

0800a294 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	220a      	movs	r2, #10
 800a2a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2a2:	4b03      	ldr	r3, [pc, #12]	@ (800a2b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	2000003c 	.word	0x2000003c

0800a2b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e009      	b.n	800a2dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	33b0      	adds	r3, #176	@ 0xb0
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	32b0      	adds	r2, #176	@ 0xb0
 800a2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a302:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e008      	b.n	800a320 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	32b0      	adds	r2, #176	@ 0xb0
 800a340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a344:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e004      	b.n	800a35a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
	...

0800a368 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	32b0      	adds	r2, #176	@ 0xb0
 800a37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a380:	2301      	movs	r3, #1
 800a382:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e025      	b.n	800a3da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a394:	2b00      	cmp	r3, #0
 800a396:	d11f      	bne.n	800a3d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3a0:	4b10      	ldr	r3, [pc, #64]	@ (800a3e4 <USBD_CDC_TransmitPacket+0x7c>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	f003 020f 	and.w	r2, r3, #15
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4403      	add	r3, r0
 800a3ba:	3314      	adds	r3, #20
 800a3bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a3be:	4b09      	ldr	r3, [pc, #36]	@ (800a3e4 <USBD_CDC_TransmitPacket+0x7c>)
 800a3c0:	7819      	ldrb	r1, [r3, #0]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f002 f843 	bl	800c45a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	200000c3 	.word	0x200000c3

0800a3e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	32b0      	adds	r2, #176	@ 0xb0
 800a3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	32b0      	adds	r2, #176	@ 0xb0
 800a40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a412:	2303      	movs	r3, #3
 800a414:	e018      	b.n	800a448 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	7c1b      	ldrb	r3, [r3, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a41e:	4b0c      	ldr	r3, [pc, #48]	@ (800a450 <USBD_CDC_ReceivePacket+0x68>)
 800a420:	7819      	ldrb	r1, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f002 f835 	bl	800c49c <USBD_LL_PrepareReceive>
 800a432:	e008      	b.n	800a446 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a434:	4b06      	ldr	r3, [pc, #24]	@ (800a450 <USBD_CDC_ReceivePacket+0x68>)
 800a436:	7819      	ldrb	r1, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a43e:	2340      	movs	r3, #64	@ 0x40
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f002 f82b 	bl	800c49c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	200000c4 	.word	0x200000c4

0800a454 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	4613      	mov	r3, r2
 800a460:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a468:	2303      	movs	r3, #3
 800a46a:	e01f      	b.n	800a4ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	79fa      	ldrb	r2, [r7, #7]
 800a49e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f001 fea5 	bl	800c1f0 <USBD_LL_Init>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d101      	bne.n	800a4cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e025      	b.n	800a518 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	32ae      	adds	r2, #174	@ 0xae
 800a4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00f      	beq.n	800a508 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	32ae      	adds	r2, #174	@ 0xae
 800a4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f8:	f107 020e 	add.w	r2, r7, #14
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	4798      	blx	r3
 800a500:	4602      	mov	r2, r0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f001 fead 	bl	800c288 <USBD_LL_Start>
 800a52e:	4603      	mov	r3, r0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a564:	2b00      	cmp	r3, #0
 800a566:	d009      	beq.n	800a57c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	4611      	mov	r1, r2
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	4798      	blx	r3
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	460b      	mov	r3, r1
 800a590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	78fa      	ldrb	r2, [r7, #3]
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 f922 	bl	800b816 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5ee:	f003 031f 	and.w	r3, r3, #31
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d01a      	beq.n	800a62c <USBD_LL_SetupStage+0x72>
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d822      	bhi.n	800a640 <USBD_LL_SetupStage+0x86>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <USBD_LL_SetupStage+0x4a>
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d00a      	beq.n	800a618 <USBD_LL_SetupStage+0x5e>
 800a602:	e01d      	b.n	800a640 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fb77 	bl	800ad00 <USBD_StdDevReq>
 800a612:	4603      	mov	r3, r0
 800a614:	73fb      	strb	r3, [r7, #15]
      break;
 800a616:	e020      	b.n	800a65a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fbdf 	bl	800ade4 <USBD_StdItfReq>
 800a626:	4603      	mov	r3, r0
 800a628:	73fb      	strb	r3, [r7, #15]
      break;
 800a62a:	e016      	b.n	800a65a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fc41 	bl	800aebc <USBD_StdEPReq>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
      break;
 800a63e:	e00c      	b.n	800a65a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a646:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 fe7a 	bl	800c348 <USBD_LL_StallEP>
 800a654:	4603      	mov	r3, r0
 800a656:	73fb      	strb	r3, [r7, #15]
      break;
 800a658:	bf00      	nop
  }

  return ret;
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	460b      	mov	r3, r1
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d177      	bne.n	800a76c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a682:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	f040 80a1 	bne.w	800a7d2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	8992      	ldrh	r2, [r2, #12]
 800a698:	4293      	cmp	r3, r2
 800a69a:	d91c      	bls.n	800a6d6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	8992      	ldrh	r2, [r2, #12]
 800a6a4:	1a9a      	subs	r2, r3, r2
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	8992      	ldrh	r2, [r2, #12]
 800a6b2:	441a      	add	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	6919      	ldr	r1, [r3, #16]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	899b      	ldrh	r3, [r3, #12]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	bf38      	it	cc
 800a6ca:	4613      	movcc	r3, r2
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f001 f9a8 	bl	800ba24 <USBD_CtlContinueRx>
 800a6d4:	e07d      	b.n	800a7d2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6dc:	f003 031f 	and.w	r3, r3, #31
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d014      	beq.n	800a70e <USBD_LL_DataOutStage+0xaa>
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d81d      	bhi.n	800a724 <USBD_LL_DataOutStage+0xc0>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <USBD_LL_DataOutStage+0x8e>
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d003      	beq.n	800a6f8 <USBD_LL_DataOutStage+0x94>
 800a6f0:	e018      	b.n	800a724 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	75bb      	strb	r3, [r7, #22]
            break;
 800a6f6:	e018      	b.n	800a72a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	4619      	mov	r1, r3
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 fa6e 	bl	800abe4 <USBD_CoreFindIF>
 800a708:	4603      	mov	r3, r0
 800a70a:	75bb      	strb	r3, [r7, #22]
            break;
 800a70c:	e00d      	b.n	800a72a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a714:	b2db      	uxtb	r3, r3
 800a716:	4619      	mov	r1, r3
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fa70 	bl	800abfe <USBD_CoreFindEP>
 800a71e:	4603      	mov	r3, r0
 800a720:	75bb      	strb	r3, [r7, #22]
            break;
 800a722:	e002      	b.n	800a72a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a724:	2300      	movs	r3, #0
 800a726:	75bb      	strb	r3, [r7, #22]
            break;
 800a728:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a72a:	7dbb      	ldrb	r3, [r7, #22]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d119      	bne.n	800a764 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b03      	cmp	r3, #3
 800a73a:	d113      	bne.n	800a764 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a73c:	7dba      	ldrb	r2, [r7, #22]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	32ae      	adds	r2, #174	@ 0xae
 800a742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00b      	beq.n	800a764 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a74c:	7dba      	ldrb	r2, [r7, #22]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a754:	7dba      	ldrb	r2, [r7, #22]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	32ae      	adds	r2, #174	@ 0xae
 800a75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f001 f96e 	bl	800ba46 <USBD_CtlSendStatus>
 800a76a:	e032      	b.n	800a7d2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a76c:	7afb      	ldrb	r3, [r7, #11]
 800a76e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a772:	b2db      	uxtb	r3, r3
 800a774:	4619      	mov	r1, r3
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 fa41 	bl	800abfe <USBD_CoreFindEP>
 800a77c:	4603      	mov	r3, r0
 800a77e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a780:	7dbb      	ldrb	r3, [r7, #22]
 800a782:	2bff      	cmp	r3, #255	@ 0xff
 800a784:	d025      	beq.n	800a7d2 <USBD_LL_DataOutStage+0x16e>
 800a786:	7dbb      	ldrb	r3, [r7, #22]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d122      	bne.n	800a7d2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b03      	cmp	r3, #3
 800a796:	d117      	bne.n	800a7c8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a798:	7dba      	ldrb	r2, [r7, #22]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	32ae      	adds	r2, #174	@ 0xae
 800a79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00f      	beq.n	800a7c8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a7a8:	7dba      	ldrb	r2, [r7, #22]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7b0:	7dba      	ldrb	r2, [r7, #22]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	32ae      	adds	r2, #174	@ 0xae
 800a7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	7afa      	ldrb	r2, [r7, #11]
 800a7be:	4611      	mov	r1, r2
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	4798      	blx	r3
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	e000      	b.n	800a7d4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3718      	adds	r7, #24
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a7ea:	7afb      	ldrb	r3, [r7, #11]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d178      	bne.n	800a8e2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3314      	adds	r3, #20
 800a7f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d163      	bne.n	800a8c8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	8992      	ldrh	r2, [r2, #12]
 800a808:	4293      	cmp	r3, r2
 800a80a:	d91c      	bls.n	800a846 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	8992      	ldrh	r2, [r2, #12]
 800a814:	1a9a      	subs	r2, r3, r2
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	8992      	ldrh	r2, [r2, #12]
 800a822:	441a      	add	r2, r3
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	6919      	ldr	r1, [r3, #16]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	461a      	mov	r2, r3
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f001 f8c4 	bl	800b9c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a838:	2300      	movs	r3, #0
 800a83a:	2200      	movs	r2, #0
 800a83c:	2100      	movs	r1, #0
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f001 fe2c 	bl	800c49c <USBD_LL_PrepareReceive>
 800a844:	e040      	b.n	800a8c8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	899b      	ldrh	r3, [r3, #12]
 800a84a:	461a      	mov	r2, r3
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d11c      	bne.n	800a88e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d316      	bcc.n	800a88e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d20f      	bcs.n	800a88e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a86e:	2200      	movs	r2, #0
 800a870:	2100      	movs	r1, #0
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f001 f8a4 	bl	800b9c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a880:	2300      	movs	r3, #0
 800a882:	2200      	movs	r2, #0
 800a884:	2100      	movs	r1, #0
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f001 fe08 	bl	800c49c <USBD_LL_PrepareReceive>
 800a88c:	e01c      	b.n	800a8c8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b03      	cmp	r3, #3
 800a898:	d10f      	bne.n	800a8ba <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d009      	beq.n	800a8ba <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ba:	2180      	movs	r1, #128	@ 0x80
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f001 fd43 	bl	800c348 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f001 f8d2 	bl	800ba6c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d03a      	beq.n	800a948 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7ff fe30 	bl	800a538 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8e0:	e032      	b.n	800a948 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a8e2:	7afb      	ldrb	r3, [r7, #11]
 800a8e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 f986 	bl	800abfe <USBD_CoreFindEP>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	2bff      	cmp	r3, #255	@ 0xff
 800a8fa:	d025      	beq.n	800a948 <USBD_LL_DataInStage+0x16c>
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d122      	bne.n	800a948 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d11c      	bne.n	800a948 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a90e:	7dfa      	ldrb	r2, [r7, #23]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	32ae      	adds	r2, #174	@ 0xae
 800a914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d014      	beq.n	800a948 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a91e:	7dfa      	ldrb	r2, [r7, #23]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a926:	7dfa      	ldrb	r2, [r7, #23]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	32ae      	adds	r2, #174	@ 0xae
 800a92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	7afa      	ldrb	r2, [r7, #11]
 800a934:	4611      	mov	r1, r2
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	4798      	blx	r3
 800a93a:	4603      	mov	r3, r0
 800a93c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a93e:	7dbb      	ldrb	r3, [r7, #22]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a944:	7dbb      	ldrb	r3, [r7, #22]
 800a946:	e000      	b.n	800a94a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d014      	beq.n	800a9b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00e      	beq.n	800a9b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	6852      	ldr	r2, [r2, #4]
 800a9a6:	b2d2      	uxtb	r2, r2
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	4798      	blx	r3
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9b8:	2340      	movs	r3, #64	@ 0x40
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2100      	movs	r1, #0
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 fc7d 	bl	800c2be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2240      	movs	r2, #64	@ 0x40
 800a9d0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9d4:	2340      	movs	r3, #64	@ 0x40
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2180      	movs	r1, #128	@ 0x80
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 fc6f 	bl	800c2be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2240      	movs	r2, #64	@ 0x40
 800a9ec:	841a      	strh	r2, [r3, #32]

  return ret;
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	78fa      	ldrb	r2, [r7, #3]
 800aa08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d006      	beq.n	800aa3a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2204      	movs	r2, #4
 800aa3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b04      	cmp	r3, #4
 800aa62:	d106      	bne.n	800aa72 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d110      	bne.n	800aab6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00b      	beq.n	800aab6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d005      	beq.n	800aab6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	32ae      	adds	r2, #174	@ 0xae
 800aad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aade:	2303      	movs	r3, #3
 800aae0:	e01c      	b.n	800ab1c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	d115      	bne.n	800ab1a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	32ae      	adds	r2, #174	@ 0xae
 800aaf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00b      	beq.n	800ab1a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	32ae      	adds	r2, #174	@ 0xae
 800ab0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	78fa      	ldrb	r2, [r7, #3]
 800ab14:	4611      	mov	r1, r2
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	32ae      	adds	r2, #174	@ 0xae
 800ab3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e01c      	b.n	800ab80 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d115      	bne.n	800ab7e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	32ae      	adds	r2, #174	@ 0xae
 800ab5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00b      	beq.n	800ab7e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	32ae      	adds	r2, #174	@ 0xae
 800ab70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	4611      	mov	r1, r2
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00e      	beq.n	800abda <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6852      	ldr	r2, [r2, #4]
 800abc8:	b2d2      	uxtb	r2, r2
 800abca:	4611      	mov	r1, r2
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	4798      	blx	r3
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abd6:	2303      	movs	r3, #3
 800abd8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abda:	7bfb      	ldrb	r3, [r7, #15]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b083      	sub	sp, #12
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	460b      	mov	r3, r1
 800ac08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	885b      	ldrh	r3, [r3, #2]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	7812      	ldrb	r2, [r2, #0]
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d91f      	bls.n	800ac7e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac44:	e013      	b.n	800ac6e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac46:	f107 030a 	add.w	r3, r7, #10
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6978      	ldr	r0, [r7, #20]
 800ac4e:	f000 f81b 	bl	800ac88 <USBD_GetNextDesc>
 800ac52:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	785b      	ldrb	r3, [r3, #1]
 800ac58:	2b05      	cmp	r3, #5
 800ac5a:	d108      	bne.n	800ac6e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	789b      	ldrb	r3, [r3, #2]
 800ac64:	78fa      	ldrb	r2, [r7, #3]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d008      	beq.n	800ac7c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	885b      	ldrh	r3, [r3, #2]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	897b      	ldrh	r3, [r7, #10]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d8e5      	bhi.n	800ac46 <USBD_GetEpDesc+0x2e>
 800ac7a:	e000      	b.n	800ac7e <USBD_GetEpDesc+0x66>
          break;
 800ac7c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac7e:	693b      	ldr	r3, [r7, #16]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	7812      	ldrb	r2, [r2, #0]
 800ac9e:	4413      	add	r3, r2
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acb2:	68fb      	ldr	r3, [r7, #12]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	3301      	adds	r3, #1
 800acd6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acde:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ace2:	021b      	lsls	r3, r3, #8
 800ace4:	b21a      	sxth	r2, r3
 800ace6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acea:	4313      	orrs	r3, r2
 800acec:	b21b      	sxth	r3, r3
 800acee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acf0:	89fb      	ldrh	r3, [r7, #14]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	371c      	adds	r7, #28
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
	...

0800ad00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad16:	2b40      	cmp	r3, #64	@ 0x40
 800ad18:	d005      	beq.n	800ad26 <USBD_StdDevReq+0x26>
 800ad1a:	2b40      	cmp	r3, #64	@ 0x40
 800ad1c:	d857      	bhi.n	800adce <USBD_StdDevReq+0xce>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00f      	beq.n	800ad42 <USBD_StdDevReq+0x42>
 800ad22:	2b20      	cmp	r3, #32
 800ad24:	d153      	bne.n	800adce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	32ae      	adds	r2, #174	@ 0xae
 800ad30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4798      	blx	r3
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad40:	e04a      	b.n	800add8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	785b      	ldrb	r3, [r3, #1]
 800ad46:	2b09      	cmp	r3, #9
 800ad48:	d83b      	bhi.n	800adc2 <USBD_StdDevReq+0xc2>
 800ad4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad50 <USBD_StdDevReq+0x50>)
 800ad4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad50:	0800ada5 	.word	0x0800ada5
 800ad54:	0800adb9 	.word	0x0800adb9
 800ad58:	0800adc3 	.word	0x0800adc3
 800ad5c:	0800adaf 	.word	0x0800adaf
 800ad60:	0800adc3 	.word	0x0800adc3
 800ad64:	0800ad83 	.word	0x0800ad83
 800ad68:	0800ad79 	.word	0x0800ad79
 800ad6c:	0800adc3 	.word	0x0800adc3
 800ad70:	0800ad9b 	.word	0x0800ad9b
 800ad74:	0800ad8d 	.word	0x0800ad8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fa3e 	bl	800b1fc <USBD_GetDescriptor>
          break;
 800ad80:	e024      	b.n	800adcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fba3 	bl	800b4d0 <USBD_SetAddress>
          break;
 800ad8a:	e01f      	b.n	800adcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fbe2 	bl	800b558 <USBD_SetConfig>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]
          break;
 800ad98:	e018      	b.n	800adcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fc85 	bl	800b6ac <USBD_GetConfig>
          break;
 800ada2:	e013      	b.n	800adcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fcb6 	bl	800b718 <USBD_GetStatus>
          break;
 800adac:	e00e      	b.n	800adcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fce5 	bl	800b780 <USBD_SetFeature>
          break;
 800adb6:	e009      	b.n	800adcc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fd09 	bl	800b7d2 <USBD_ClrFeature>
          break;
 800adc0:	e004      	b.n	800adcc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fd60 	bl	800b88a <USBD_CtlError>
          break;
 800adca:	bf00      	nop
      }
      break;
 800adcc:	e004      	b.n	800add8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fd5a 	bl	800b88a <USBD_CtlError>
      break;
 800add6:	bf00      	nop
  }

  return ret;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop

0800ade4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adfa:	2b40      	cmp	r3, #64	@ 0x40
 800adfc:	d005      	beq.n	800ae0a <USBD_StdItfReq+0x26>
 800adfe:	2b40      	cmp	r3, #64	@ 0x40
 800ae00:	d852      	bhi.n	800aea8 <USBD_StdItfReq+0xc4>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <USBD_StdItfReq+0x26>
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	d14e      	bne.n	800aea8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	3b01      	subs	r3, #1
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d840      	bhi.n	800ae9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	889b      	ldrh	r3, [r3, #4]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d836      	bhi.n	800ae90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	889b      	ldrh	r3, [r3, #4]
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7ff feda 	bl	800abe4 <USBD_CoreFindIF>
 800ae30:	4603      	mov	r3, r0
 800ae32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae34:	7bbb      	ldrb	r3, [r7, #14]
 800ae36:	2bff      	cmp	r3, #255	@ 0xff
 800ae38:	d01d      	beq.n	800ae76 <USBD_StdItfReq+0x92>
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d11a      	bne.n	800ae76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae40:	7bba      	ldrb	r2, [r7, #14]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32ae      	adds	r2, #174	@ 0xae
 800ae46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00f      	beq.n	800ae70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae50:	7bba      	ldrb	r2, [r7, #14]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae58:	7bba      	ldrb	r2, [r7, #14]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	32ae      	adds	r2, #174	@ 0xae
 800ae5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	4798      	blx	r3
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae6e:	e004      	b.n	800ae7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae70:	2303      	movs	r3, #3
 800ae72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae74:	e001      	b.n	800ae7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae76:	2303      	movs	r3, #3
 800ae78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	88db      	ldrh	r3, [r3, #6]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d110      	bne.n	800aea4 <USBD_StdItfReq+0xc0>
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10d      	bne.n	800aea4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fddc 	bl	800ba46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae8e:	e009      	b.n	800aea4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fcf9 	bl	800b88a <USBD_CtlError>
          break;
 800ae98:	e004      	b.n	800aea4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fcf4 	bl	800b88a <USBD_CtlError>
          break;
 800aea2:	e000      	b.n	800aea6 <USBD_StdItfReq+0xc2>
          break;
 800aea4:	bf00      	nop
      }
      break;
 800aea6:	e004      	b.n	800aeb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fced 	bl	800b88a <USBD_CtlError>
      break;
 800aeb0:	bf00      	nop
  }

  return ret;
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	889b      	ldrh	r3, [r3, #4]
 800aece:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aed8:	2b40      	cmp	r3, #64	@ 0x40
 800aeda:	d007      	beq.n	800aeec <USBD_StdEPReq+0x30>
 800aedc:	2b40      	cmp	r3, #64	@ 0x40
 800aede:	f200 8181 	bhi.w	800b1e4 <USBD_StdEPReq+0x328>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d02a      	beq.n	800af3c <USBD_StdEPReq+0x80>
 800aee6:	2b20      	cmp	r3, #32
 800aee8:	f040 817c 	bne.w	800b1e4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7ff fe84 	bl	800abfe <USBD_CoreFindEP>
 800aef6:	4603      	mov	r3, r0
 800aef8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aefa:	7b7b      	ldrb	r3, [r7, #13]
 800aefc:	2bff      	cmp	r3, #255	@ 0xff
 800aefe:	f000 8176 	beq.w	800b1ee <USBD_StdEPReq+0x332>
 800af02:	7b7b      	ldrb	r3, [r7, #13]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f040 8172 	bne.w	800b1ee <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800af0a:	7b7a      	ldrb	r2, [r7, #13]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af12:	7b7a      	ldrb	r2, [r7, #13]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	32ae      	adds	r2, #174	@ 0xae
 800af18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 8165 	beq.w	800b1ee <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af24:	7b7a      	ldrb	r2, [r7, #13]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	32ae      	adds	r2, #174	@ 0xae
 800af2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	4798      	blx	r3
 800af36:	4603      	mov	r3, r0
 800af38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af3a:	e158      	b.n	800b1ee <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	785b      	ldrb	r3, [r3, #1]
 800af40:	2b03      	cmp	r3, #3
 800af42:	d008      	beq.n	800af56 <USBD_StdEPReq+0x9a>
 800af44:	2b03      	cmp	r3, #3
 800af46:	f300 8147 	bgt.w	800b1d8 <USBD_StdEPReq+0x31c>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 809b 	beq.w	800b086 <USBD_StdEPReq+0x1ca>
 800af50:	2b01      	cmp	r3, #1
 800af52:	d03c      	beq.n	800afce <USBD_StdEPReq+0x112>
 800af54:	e140      	b.n	800b1d8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d002      	beq.n	800af68 <USBD_StdEPReq+0xac>
 800af62:	2b03      	cmp	r3, #3
 800af64:	d016      	beq.n	800af94 <USBD_StdEPReq+0xd8>
 800af66:	e02c      	b.n	800afc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00d      	beq.n	800af8a <USBD_StdEPReq+0xce>
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	2b80      	cmp	r3, #128	@ 0x80
 800af72:	d00a      	beq.n	800af8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f001 f9e5 	bl	800c348 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af7e:	2180      	movs	r1, #128	@ 0x80
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 f9e1 	bl	800c348 <USBD_LL_StallEP>
 800af86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af88:	e020      	b.n	800afcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fc7c 	bl	800b88a <USBD_CtlError>
              break;
 800af92:	e01b      	b.n	800afcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	885b      	ldrh	r3, [r3, #2]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10e      	bne.n	800afba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00b      	beq.n	800afba <USBD_StdEPReq+0xfe>
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	2b80      	cmp	r3, #128	@ 0x80
 800afa6:	d008      	beq.n	800afba <USBD_StdEPReq+0xfe>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	88db      	ldrh	r3, [r3, #6]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d104      	bne.n	800afba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 f9c7 	bl	800c348 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fd43 	bl	800ba46 <USBD_CtlSendStatus>

              break;
 800afc0:	e004      	b.n	800afcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fc60 	bl	800b88a <USBD_CtlError>
              break;
 800afca:	bf00      	nop
          }
          break;
 800afcc:	e109      	b.n	800b1e2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d002      	beq.n	800afe0 <USBD_StdEPReq+0x124>
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d016      	beq.n	800b00c <USBD_StdEPReq+0x150>
 800afde:	e04b      	b.n	800b078 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00d      	beq.n	800b002 <USBD_StdEPReq+0x146>
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	2b80      	cmp	r3, #128	@ 0x80
 800afea:	d00a      	beq.n	800b002 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f001 f9a9 	bl	800c348 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aff6:	2180      	movs	r1, #128	@ 0x80
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 f9a5 	bl	800c348 <USBD_LL_StallEP>
 800affe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b000:	e040      	b.n	800b084 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fc40 	bl	800b88a <USBD_CtlError>
              break;
 800b00a:	e03b      	b.n	800b084 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	885b      	ldrh	r3, [r3, #2]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d136      	bne.n	800b082 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d004      	beq.n	800b028 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 f9af 	bl	800c386 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fd0c 	bl	800ba46 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fde3 	bl	800abfe <USBD_CoreFindEP>
 800b038:	4603      	mov	r3, r0
 800b03a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b03c:	7b7b      	ldrb	r3, [r7, #13]
 800b03e:	2bff      	cmp	r3, #255	@ 0xff
 800b040:	d01f      	beq.n	800b082 <USBD_StdEPReq+0x1c6>
 800b042:	7b7b      	ldrb	r3, [r7, #13]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d11c      	bne.n	800b082 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b048:	7b7a      	ldrb	r2, [r7, #13]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b050:	7b7a      	ldrb	r2, [r7, #13]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	32ae      	adds	r2, #174	@ 0xae
 800b056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d010      	beq.n	800b082 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b060:	7b7a      	ldrb	r2, [r7, #13]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	32ae      	adds	r2, #174	@ 0xae
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	4798      	blx	r3
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b076:	e004      	b.n	800b082 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fc05 	bl	800b88a <USBD_CtlError>
              break;
 800b080:	e000      	b.n	800b084 <USBD_StdEPReq+0x1c8>
              break;
 800b082:	bf00      	nop
          }
          break;
 800b084:	e0ad      	b.n	800b1e2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d002      	beq.n	800b098 <USBD_StdEPReq+0x1dc>
 800b092:	2b03      	cmp	r3, #3
 800b094:	d033      	beq.n	800b0fe <USBD_StdEPReq+0x242>
 800b096:	e099      	b.n	800b1cc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d007      	beq.n	800b0ae <USBD_StdEPReq+0x1f2>
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	2b80      	cmp	r3, #128	@ 0x80
 800b0a2:	d004      	beq.n	800b0ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fbef 	bl	800b88a <USBD_CtlError>
                break;
 800b0ac:	e093      	b.n	800b1d6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	da0b      	bge.n	800b0ce <USBD_StdEPReq+0x212>
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0bc:	4613      	mov	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	3310      	adds	r3, #16
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	e00b      	b.n	800b0e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	330e      	adds	r3, #14
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fc44 	bl	800b984 <USBD_CtlSendData>
              break;
 800b0fc:	e06b      	b.n	800b1d6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b102:	2b00      	cmp	r3, #0
 800b104:	da11      	bge.n	800b12a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b106:	7bbb      	ldrb	r3, [r7, #14]
 800b108:	f003 020f 	and.w	r2, r3, #15
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4613      	mov	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	440b      	add	r3, r1
 800b118:	3323      	adds	r3, #35	@ 0x23
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d117      	bne.n	800b150 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fbb1 	bl	800b88a <USBD_CtlError>
                  break;
 800b128:	e055      	b.n	800b1d6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b12a:	7bbb      	ldrb	r3, [r7, #14]
 800b12c:	f003 020f 	and.w	r2, r3, #15
 800b130:	6879      	ldr	r1, [r7, #4]
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	440b      	add	r3, r1
 800b13c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d104      	bne.n	800b150 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fb9e 	bl	800b88a <USBD_CtlError>
                  break;
 800b14e:	e042      	b.n	800b1d6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b154:	2b00      	cmp	r3, #0
 800b156:	da0b      	bge.n	800b170 <USBD_StdEPReq+0x2b4>
 800b158:	7bbb      	ldrb	r3, [r7, #14]
 800b15a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b15e:	4613      	mov	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	3310      	adds	r3, #16
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	4413      	add	r3, r2
 800b16c:	3304      	adds	r3, #4
 800b16e:	e00b      	b.n	800b188 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b170:	7bbb      	ldrb	r3, [r7, #14]
 800b172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	4413      	add	r3, r2
 800b186:	3304      	adds	r3, #4
 800b188:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b18a:	7bbb      	ldrb	r3, [r7, #14]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <USBD_StdEPReq+0x2da>
 800b190:	7bbb      	ldrb	r3, [r7, #14]
 800b192:	2b80      	cmp	r3, #128	@ 0x80
 800b194:	d103      	bne.n	800b19e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2200      	movs	r2, #0
 800b19a:	739a      	strb	r2, [r3, #14]
 800b19c:	e00e      	b.n	800b1bc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f001 f90e 	bl	800c3c4 <USBD_LL_IsStallEP>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	739a      	strb	r2, [r3, #14]
 800b1b4:	e002      	b.n	800b1bc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	330e      	adds	r3, #14
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fbdd 	bl	800b984 <USBD_CtlSendData>
              break;
 800b1ca:	e004      	b.n	800b1d6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fb5b 	bl	800b88a <USBD_CtlError>
              break;
 800b1d4:	bf00      	nop
          }
          break;
 800b1d6:	e004      	b.n	800b1e2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fb55 	bl	800b88a <USBD_CtlError>
          break;
 800b1e0:	bf00      	nop
      }
      break;
 800b1e2:	e005      	b.n	800b1f0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fb4f 	bl	800b88a <USBD_CtlError>
      break;
 800b1ec:	e000      	b.n	800b1f0 <USBD_StdEPReq+0x334>
      break;
 800b1ee:	bf00      	nop
  }

  return ret;
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b20e:	2300      	movs	r3, #0
 800b210:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	885b      	ldrh	r3, [r3, #2]
 800b216:	0a1b      	lsrs	r3, r3, #8
 800b218:	b29b      	uxth	r3, r3
 800b21a:	3b01      	subs	r3, #1
 800b21c:	2b06      	cmp	r3, #6
 800b21e:	f200 8128 	bhi.w	800b472 <USBD_GetDescriptor+0x276>
 800b222:	a201      	add	r2, pc, #4	@ (adr r2, 800b228 <USBD_GetDescriptor+0x2c>)
 800b224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b228:	0800b245 	.word	0x0800b245
 800b22c:	0800b25d 	.word	0x0800b25d
 800b230:	0800b29d 	.word	0x0800b29d
 800b234:	0800b473 	.word	0x0800b473
 800b238:	0800b473 	.word	0x0800b473
 800b23c:	0800b413 	.word	0x0800b413
 800b240:	0800b43f 	.word	0x0800b43f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	7c12      	ldrb	r2, [r2, #16]
 800b250:	f107 0108 	add.w	r1, r7, #8
 800b254:	4610      	mov	r0, r2
 800b256:	4798      	blx	r3
 800b258:	60f8      	str	r0, [r7, #12]
      break;
 800b25a:	e112      	b.n	800b482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	7c1b      	ldrb	r3, [r3, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10d      	bne.n	800b280 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26c:	f107 0208 	add.w	r2, r7, #8
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
 800b274:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	2202      	movs	r2, #2
 800b27c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b27e:	e100      	b.n	800b482 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b288:	f107 0208 	add.w	r2, r7, #8
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3301      	adds	r3, #1
 800b296:	2202      	movs	r2, #2
 800b298:	701a      	strb	r2, [r3, #0]
      break;
 800b29a:	e0f2      	b.n	800b482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	885b      	ldrh	r3, [r3, #2]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b05      	cmp	r3, #5
 800b2a4:	f200 80ac 	bhi.w	800b400 <USBD_GetDescriptor+0x204>
 800b2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b0 <USBD_GetDescriptor+0xb4>)
 800b2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ae:	bf00      	nop
 800b2b0:	0800b2c9 	.word	0x0800b2c9
 800b2b4:	0800b2fd 	.word	0x0800b2fd
 800b2b8:	0800b331 	.word	0x0800b331
 800b2bc:	0800b365 	.word	0x0800b365
 800b2c0:	0800b399 	.word	0x0800b399
 800b2c4:	0800b3cd 	.word	0x0800b3cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00b      	beq.n	800b2ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	7c12      	ldrb	r2, [r2, #16]
 800b2e0:	f107 0108 	add.w	r1, r7, #8
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4798      	blx	r3
 800b2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ea:	e091      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 facb 	bl	800b88a <USBD_CtlError>
            err++;
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2fa:	e089      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00b      	beq.n	800b320 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	7c12      	ldrb	r2, [r2, #16]
 800b314:	f107 0108 	add.w	r1, r7, #8
 800b318:	4610      	mov	r0, r2
 800b31a:	4798      	blx	r3
 800b31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b31e:	e077      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fab1 	bl	800b88a <USBD_CtlError>
            err++;
 800b328:	7afb      	ldrb	r3, [r7, #11]
 800b32a:	3301      	adds	r3, #1
 800b32c:	72fb      	strb	r3, [r7, #11]
          break;
 800b32e:	e06f      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00b      	beq.n	800b354 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	7c12      	ldrb	r2, [r2, #16]
 800b348:	f107 0108 	add.w	r1, r7, #8
 800b34c:	4610      	mov	r0, r2
 800b34e:	4798      	blx	r3
 800b350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b352:	e05d      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fa97 	bl	800b88a <USBD_CtlError>
            err++;
 800b35c:	7afb      	ldrb	r3, [r7, #11]
 800b35e:	3301      	adds	r3, #1
 800b360:	72fb      	strb	r3, [r7, #11]
          break;
 800b362:	e055      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00b      	beq.n	800b388 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	7c12      	ldrb	r2, [r2, #16]
 800b37c:	f107 0108 	add.w	r1, r7, #8
 800b380:	4610      	mov	r0, r2
 800b382:	4798      	blx	r3
 800b384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b386:	e043      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fa7d 	bl	800b88a <USBD_CtlError>
            err++;
 800b390:	7afb      	ldrb	r3, [r7, #11]
 800b392:	3301      	adds	r3, #1
 800b394:	72fb      	strb	r3, [r7, #11]
          break;
 800b396:	e03b      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00b      	beq.n	800b3bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3aa:	695b      	ldr	r3, [r3, #20]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	7c12      	ldrb	r2, [r2, #16]
 800b3b0:	f107 0108 	add.w	r1, r7, #8
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4798      	blx	r3
 800b3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ba:	e029      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fa63 	bl	800b88a <USBD_CtlError>
            err++;
 800b3c4:	7afb      	ldrb	r3, [r7, #11]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ca:	e021      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	7c12      	ldrb	r2, [r2, #16]
 800b3e4:	f107 0108 	add.w	r1, r7, #8
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4798      	blx	r3
 800b3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ee:	e00f      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fa49 	bl	800b88a <USBD_CtlError>
            err++;
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3fe:	e007      	b.n	800b410 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa41 	bl	800b88a <USBD_CtlError>
          err++;
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b40e:	bf00      	nop
      }
      break;
 800b410:	e037      	b.n	800b482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7c1b      	ldrb	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d109      	bne.n	800b42e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b422:	f107 0208 	add.w	r2, r7, #8
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
 800b42a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b42c:	e029      	b.n	800b482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa2a 	bl	800b88a <USBD_CtlError>
        err++;
 800b436:	7afb      	ldrb	r3, [r7, #11]
 800b438:	3301      	adds	r3, #1
 800b43a:	72fb      	strb	r3, [r7, #11]
      break;
 800b43c:	e021      	b.n	800b482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	7c1b      	ldrb	r3, [r3, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10d      	bne.n	800b462 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44e:	f107 0208 	add.w	r2, r7, #8
 800b452:	4610      	mov	r0, r2
 800b454:	4798      	blx	r3
 800b456:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3301      	adds	r3, #1
 800b45c:	2207      	movs	r2, #7
 800b45e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b460:	e00f      	b.n	800b482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fa10 	bl	800b88a <USBD_CtlError>
        err++;
 800b46a:	7afb      	ldrb	r3, [r7, #11]
 800b46c:	3301      	adds	r3, #1
 800b46e:	72fb      	strb	r3, [r7, #11]
      break;
 800b470:	e007      	b.n	800b482 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fa08 	bl	800b88a <USBD_CtlError>
      err++;
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	3301      	adds	r3, #1
 800b47e:	72fb      	strb	r3, [r7, #11]
      break;
 800b480:	bf00      	nop
  }

  if (err != 0U)
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d11e      	bne.n	800b4c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	88db      	ldrh	r3, [r3, #6]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d016      	beq.n	800b4be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b490:	893b      	ldrh	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00e      	beq.n	800b4b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	88da      	ldrh	r2, [r3, #6]
 800b49a:	893b      	ldrh	r3, [r7, #8]
 800b49c:	4293      	cmp	r3, r2
 800b49e:	bf28      	it	cs
 800b4a0:	4613      	movcs	r3, r2
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4a6:	893b      	ldrh	r3, [r7, #8]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fa69 	bl	800b984 <USBD_CtlSendData>
 800b4b2:	e009      	b.n	800b4c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f9e7 	bl	800b88a <USBD_CtlError>
 800b4bc:	e004      	b.n	800b4c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fac1 	bl	800ba46 <USBD_CtlSendStatus>
 800b4c4:	e000      	b.n	800b4c8 <USBD_GetDescriptor+0x2cc>
    return;
 800b4c6:	bf00      	nop
  }
}
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop

0800b4d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	889b      	ldrh	r3, [r3, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d131      	bne.n	800b546 <USBD_SetAddress+0x76>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	88db      	ldrh	r3, [r3, #6]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d12d      	bne.n	800b546 <USBD_SetAddress+0x76>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	885b      	ldrh	r3, [r3, #2]
 800b4ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4f0:	d829      	bhi.n	800b546 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	885b      	ldrh	r3, [r3, #2]
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d104      	bne.n	800b514 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f9bc 	bl	800b88a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b512:	e01d      	b.n	800b550 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	7bfa      	ldrb	r2, [r7, #15]
 800b518:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 ff7b 	bl	800c41c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fa8d 	bl	800ba46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d004      	beq.n	800b53c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2202      	movs	r2, #2
 800b536:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b53a:	e009      	b.n	800b550 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b544:	e004      	b.n	800b550 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f99e 	bl	800b88a <USBD_CtlError>
  }
}
 800b54e:	bf00      	nop
 800b550:	bf00      	nop
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	885b      	ldrh	r3, [r3, #2]
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	4b4e      	ldr	r3, [pc, #312]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b56e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b570:	4b4d      	ldr	r3, [pc, #308]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d905      	bls.n	800b584 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f985 	bl	800b88a <USBD_CtlError>
    return USBD_FAIL;
 800b580:	2303      	movs	r3, #3
 800b582:	e08c      	b.n	800b69e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d002      	beq.n	800b596 <USBD_SetConfig+0x3e>
 800b590:	2b03      	cmp	r3, #3
 800b592:	d029      	beq.n	800b5e8 <USBD_SetConfig+0x90>
 800b594:	e075      	b.n	800b682 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b596:	4b44      	ldr	r3, [pc, #272]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d020      	beq.n	800b5e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b59e:	4b42      	ldr	r3, [pc, #264]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5a8:	4b3f      	ldr	r3, [pc, #252]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7fe ffcd 	bl	800a54e <USBD_SetClassConfig>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d008      	beq.n	800b5d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f962 	bl	800b88a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5ce:	e065      	b.n	800b69c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fa38 	bl	800ba46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2203      	movs	r2, #3
 800b5da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5de:	e05d      	b.n	800b69c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fa30 	bl	800ba46 <USBD_CtlSendStatus>
      break;
 800b5e6:	e059      	b.n	800b69c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5e8:	4b2f      	ldr	r3, [pc, #188]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d112      	bne.n	800b616 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b5f8:	4b2b      	ldr	r3, [pc, #172]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b602:	4b29      	ldr	r3, [pc, #164]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7fe ffbc 	bl	800a586 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fa19 	bl	800ba46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b614:	e042      	b.n	800b69c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b616:	4b24      	ldr	r3, [pc, #144]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	429a      	cmp	r2, r3
 800b622:	d02a      	beq.n	800b67a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7fe ffaa 	bl	800a586 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b632:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b63c:	4b1a      	ldr	r3, [pc, #104]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7fe ff83 	bl	800a54e <USBD_SetClassConfig>
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00f      	beq.n	800b672 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f918 	bl	800b88a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7fe ff8f 	bl	800a586 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2202      	movs	r2, #2
 800b66c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b670:	e014      	b.n	800b69c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9e7 	bl	800ba46 <USBD_CtlSendStatus>
      break;
 800b678:	e010      	b.n	800b69c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f9e3 	bl	800ba46 <USBD_CtlSendStatus>
      break;
 800b680:	e00c      	b.n	800b69c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f900 	bl	800b88a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b68a:	4b07      	ldr	r3, [pc, #28]	@ (800b6a8 <USBD_SetConfig+0x150>)
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7fe ff78 	bl	800a586 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b696:	2303      	movs	r3, #3
 800b698:	73fb      	strb	r3, [r7, #15]
      break;
 800b69a:	bf00      	nop
  }

  return ret;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	200009ac 	.word	0x200009ac

0800b6ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	88db      	ldrh	r3, [r3, #6]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d004      	beq.n	800b6c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f8e2 	bl	800b88a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6c6:	e023      	b.n	800b710 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	dc02      	bgt.n	800b6da <USBD_GetConfig+0x2e>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dc03      	bgt.n	800b6e0 <USBD_GetConfig+0x34>
 800b6d8:	e015      	b.n	800b706 <USBD_GetConfig+0x5a>
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d00b      	beq.n	800b6f6 <USBD_GetConfig+0x4a>
 800b6de:	e012      	b.n	800b706 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f948 	bl	800b984 <USBD_CtlSendData>
        break;
 800b6f4:	e00c      	b.n	800b710 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f940 	bl	800b984 <USBD_CtlSendData>
        break;
 800b704:	e004      	b.n	800b710 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f8be 	bl	800b88a <USBD_CtlError>
        break;
 800b70e:	bf00      	nop
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	3b01      	subs	r3, #1
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d81e      	bhi.n	800b76e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	88db      	ldrh	r3, [r3, #6]
 800b734:	2b02      	cmp	r3, #2
 800b736:	d004      	beq.n	800b742 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f8a5 	bl	800b88a <USBD_CtlError>
        break;
 800b740:	e01a      	b.n	800b778 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d005      	beq.n	800b75e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	f043 0202 	orr.w	r2, r3, #2
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	330c      	adds	r3, #12
 800b762:	2202      	movs	r2, #2
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f90c 	bl	800b984 <USBD_CtlSendData>
      break;
 800b76c:	e004      	b.n	800b778 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f88a 	bl	800b88a <USBD_CtlError>
      break;
 800b776:	bf00      	nop
  }
}
 800b778:	bf00      	nop
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	885b      	ldrh	r3, [r3, #2]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d107      	bne.n	800b7a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f953 	bl	800ba46 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7a0:	e013      	b.n	800b7ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	885b      	ldrh	r3, [r3, #2]
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d10b      	bne.n	800b7c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	889b      	ldrh	r3, [r3, #4]
 800b7ae:	0a1b      	lsrs	r3, r3, #8
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f943 	bl	800ba46 <USBD_CtlSendStatus>
}
 800b7c0:	e003      	b.n	800b7ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f860 	bl	800b88a <USBD_CtlError>
}
 800b7ca:	bf00      	nop
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b082      	sub	sp, #8
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d80b      	bhi.n	800b802 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	885b      	ldrh	r3, [r3, #2]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d10c      	bne.n	800b80c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f923 	bl	800ba46 <USBD_CtlSendStatus>
      }
      break;
 800b800:	e004      	b.n	800b80c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f840 	bl	800b88a <USBD_CtlError>
      break;
 800b80a:	e000      	b.n	800b80e <USBD_ClrFeature+0x3c>
      break;
 800b80c:	bf00      	nop
  }
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b084      	sub	sp, #16
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	781a      	ldrb	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	3301      	adds	r3, #1
 800b830:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	781a      	ldrb	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	3301      	adds	r3, #1
 800b83e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7ff fa3d 	bl	800acc0 <SWAPBYTE>
 800b846:	4603      	mov	r3, r0
 800b848:	461a      	mov	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3301      	adds	r3, #1
 800b852:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	3301      	adds	r3, #1
 800b858:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f7ff fa30 	bl	800acc0 <SWAPBYTE>
 800b860:	4603      	mov	r3, r0
 800b862:	461a      	mov	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3301      	adds	r3, #1
 800b86c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7ff fa23 	bl	800acc0 <SWAPBYTE>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	80da      	strh	r2, [r3, #6]
}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b082      	sub	sp, #8
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b894:	2180      	movs	r1, #128	@ 0x80
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fd56 	bl	800c348 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b89c:	2100      	movs	r1, #0
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fd52 	bl	800c348 <USBD_LL_StallEP>
}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d042      	beq.n	800b948 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b8c6:	6938      	ldr	r0, [r7, #16]
 800b8c8:	f000 f842 	bl	800b950 <USBD_GetLen>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8d6:	d808      	bhi.n	800b8ea <USBD_GetString+0x3e>
 800b8d8:	6938      	ldr	r0, [r7, #16]
 800b8da:	f000 f839 	bl	800b950 <USBD_GetLen>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	e001      	b.n	800b8ee <USBD_GetString+0x42>
 800b8ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	7812      	ldrb	r2, [r2, #0]
 800b8fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	3301      	adds	r3, #1
 800b902:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b904:	7dfb      	ldrb	r3, [r7, #23]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	4413      	add	r3, r2
 800b90a:	2203      	movs	r2, #3
 800b90c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b90e:	7dfb      	ldrb	r3, [r7, #23]
 800b910:	3301      	adds	r3, #1
 800b912:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b914:	e013      	b.n	800b93e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	4413      	add	r3, r2
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	7812      	ldrb	r2, [r2, #0]
 800b920:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	3301      	adds	r3, #1
 800b926:	613b      	str	r3, [r7, #16]
    idx++;
 800b928:	7dfb      	ldrb	r3, [r7, #23]
 800b92a:	3301      	adds	r3, #1
 800b92c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	4413      	add	r3, r2
 800b934:	2200      	movs	r2, #0
 800b936:	701a      	strb	r2, [r3, #0]
    idx++;
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	3301      	adds	r3, #1
 800b93c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1e7      	bne.n	800b916 <USBD_GetString+0x6a>
 800b946:	e000      	b.n	800b94a <USBD_GetString+0x9e>
    return;
 800b948:	bf00      	nop
  }
}
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b960:	e005      	b.n	800b96e <USBD_GetLen+0x1e>
  {
    len++;
 800b962:	7bfb      	ldrb	r3, [r7, #15]
 800b964:	3301      	adds	r3, #1
 800b966:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	3301      	adds	r3, #1
 800b96c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1f5      	bne.n	800b962 <USBD_GetLen+0x12>
  }

  return len;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2202      	movs	r2, #2
 800b994:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f000 fd52 	bl	800c45a <USBD_LL_Transmit>

  return USBD_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 fd41 	bl	800c45a <USBD_LL_Transmit>

  return USBD_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2203      	movs	r2, #3
 800b9f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	2100      	movs	r1, #0
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f000 fd41 	bl	800c49c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	2100      	movs	r1, #0
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f000 fd30 	bl	800c49c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2204      	movs	r2, #4
 800ba52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba56:	2300      	movs	r3, #0
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fcfc 	bl	800c45a <USBD_LL_Transmit>

  return USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2205      	movs	r2, #5
 800ba78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2100      	movs	r1, #0
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fd0a 	bl	800c49c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	4912      	ldr	r1, [pc, #72]	@ (800bae4 <MX_USB_DEVICE_Init+0x50>)
 800ba9c:	4812      	ldr	r0, [pc, #72]	@ (800bae8 <MX_USB_DEVICE_Init+0x54>)
 800ba9e:	f7fe fcd9 	bl	800a454 <USBD_Init>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800baa8:	f7f5 f95e 	bl	8000d68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800baac:	490f      	ldr	r1, [pc, #60]	@ (800baec <MX_USB_DEVICE_Init+0x58>)
 800baae:	480e      	ldr	r0, [pc, #56]	@ (800bae8 <MX_USB_DEVICE_Init+0x54>)
 800bab0:	f7fe fd00 	bl	800a4b4 <USBD_RegisterClass>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800baba:	f7f5 f955 	bl	8000d68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800babe:	490c      	ldr	r1, [pc, #48]	@ (800baf0 <MX_USB_DEVICE_Init+0x5c>)
 800bac0:	4809      	ldr	r0, [pc, #36]	@ (800bae8 <MX_USB_DEVICE_Init+0x54>)
 800bac2:	f7fe fbf7 	bl	800a2b4 <USBD_CDC_RegisterInterface>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bacc:	f7f5 f94c 	bl	8000d68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bad0:	4805      	ldr	r0, [pc, #20]	@ (800bae8 <MX_USB_DEVICE_Init+0x54>)
 800bad2:	f7fe fd25 	bl	800a520 <USBD_Start>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800badc:	f7f5 f944 	bl	8000d68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bae0:	bf00      	nop
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	200000e4 	.word	0x200000e4
 800bae8:	200009b0 	.word	0x200009b0
 800baec:	20000048 	.word	0x20000048
 800baf0:	200000d0 	.word	0x200000d0

0800baf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800baf8:	2200      	movs	r2, #0
 800bafa:	4905      	ldr	r1, [pc, #20]	@ (800bb10 <CDC_Init_FS+0x1c>)
 800bafc:	4805      	ldr	r0, [pc, #20]	@ (800bb14 <CDC_Init_FS+0x20>)
 800bafe:	f7fe fbf3 	bl	800a2e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb02:	4905      	ldr	r1, [pc, #20]	@ (800bb18 <CDC_Init_FS+0x24>)
 800bb04:	4803      	ldr	r0, [pc, #12]	@ (800bb14 <CDC_Init_FS+0x20>)
 800bb06:	f7fe fc11 	bl	800a32c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20000e8c 	.word	0x20000e8c
 800bb14:	200009b0 	.word	0x200009b0
 800bb18:	20000c8c 	.word	0x20000c8c

0800bb1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	6039      	str	r1, [r7, #0]
 800bb36:	71fb      	strb	r3, [r7, #7]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb3c:	79fb      	ldrb	r3, [r7, #7]
 800bb3e:	2b23      	cmp	r3, #35	@ 0x23
 800bb40:	f200 8098 	bhi.w	800bc74 <CDC_Control_FS+0x148>
 800bb44:	a201      	add	r2, pc, #4	@ (adr r2, 800bb4c <CDC_Control_FS+0x20>)
 800bb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4a:	bf00      	nop
 800bb4c:	0800bc75 	.word	0x0800bc75
 800bb50:	0800bc75 	.word	0x0800bc75
 800bb54:	0800bc75 	.word	0x0800bc75
 800bb58:	0800bc75 	.word	0x0800bc75
 800bb5c:	0800bc75 	.word	0x0800bc75
 800bb60:	0800bc75 	.word	0x0800bc75
 800bb64:	0800bc75 	.word	0x0800bc75
 800bb68:	0800bc75 	.word	0x0800bc75
 800bb6c:	0800bc75 	.word	0x0800bc75
 800bb70:	0800bc75 	.word	0x0800bc75
 800bb74:	0800bc75 	.word	0x0800bc75
 800bb78:	0800bc75 	.word	0x0800bc75
 800bb7c:	0800bc75 	.word	0x0800bc75
 800bb80:	0800bc75 	.word	0x0800bc75
 800bb84:	0800bc75 	.word	0x0800bc75
 800bb88:	0800bc75 	.word	0x0800bc75
 800bb8c:	0800bc75 	.word	0x0800bc75
 800bb90:	0800bc75 	.word	0x0800bc75
 800bb94:	0800bc75 	.word	0x0800bc75
 800bb98:	0800bc75 	.word	0x0800bc75
 800bb9c:	0800bc75 	.word	0x0800bc75
 800bba0:	0800bc75 	.word	0x0800bc75
 800bba4:	0800bc75 	.word	0x0800bc75
 800bba8:	0800bc75 	.word	0x0800bc75
 800bbac:	0800bc75 	.word	0x0800bc75
 800bbb0:	0800bc75 	.word	0x0800bc75
 800bbb4:	0800bc75 	.word	0x0800bc75
 800bbb8:	0800bc75 	.word	0x0800bc75
 800bbbc:	0800bc75 	.word	0x0800bc75
 800bbc0:	0800bc75 	.word	0x0800bc75
 800bbc4:	0800bc75 	.word	0x0800bc75
 800bbc8:	0800bc75 	.word	0x0800bc75
 800bbcc:	0800bbdd 	.word	0x0800bbdd
 800bbd0:	0800bc21 	.word	0x0800bc21
 800bbd4:	0800bc75 	.word	0x0800bc75
 800bbd8:	0800bc75 	.word	0x0800bc75
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	021b      	lsls	r3, r3, #8
 800bbea:	431a      	orrs	r2, r3
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	3302      	adds	r3, #2
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	041b      	lsls	r3, r3, #16
 800bbf4:	431a      	orrs	r2, r3
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	3303      	adds	r3, #3
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	061b      	lsls	r3, r3, #24
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	461a      	mov	r2, r3
 800bc02:	4b20      	ldr	r3, [pc, #128]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc04:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	791a      	ldrb	r2, [r3, #4]
 800bc0a:	4b1e      	ldr	r3, [pc, #120]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc0c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	795a      	ldrb	r2, [r3, #5]
 800bc12:	4b1c      	ldr	r3, [pc, #112]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc14:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	799a      	ldrb	r2, [r3, #6]
 800bc1a:	4b1a      	ldr	r3, [pc, #104]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc1c:	719a      	strb	r2, [r3, #6]
    break;
 800bc1e:	e02a      	b.n	800bc76 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800bc20:	4b18      	ldr	r3, [pc, #96]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800bc2a:	4b16      	ldr	r3, [pc, #88]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	0a1a      	lsrs	r2, r3, #8
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	3301      	adds	r3, #1
 800bc34:	b2d2      	uxtb	r2, r2
 800bc36:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800bc38:	4b12      	ldr	r3, [pc, #72]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	0c1a      	lsrs	r2, r3, #16
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	3302      	adds	r3, #2
 800bc42:	b2d2      	uxtb	r2, r2
 800bc44:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800bc46:	4b0f      	ldr	r3, [pc, #60]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	0e1a      	lsrs	r2, r3, #24
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	3303      	adds	r3, #3
 800bc50:	b2d2      	uxtb	r2, r2
 800bc52:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	3304      	adds	r3, #4
 800bc58:	4a0a      	ldr	r2, [pc, #40]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc5a:	7912      	ldrb	r2, [r2, #4]
 800bc5c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	3305      	adds	r3, #5
 800bc62:	4a08      	ldr	r2, [pc, #32]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc64:	7952      	ldrb	r2, [r2, #5]
 800bc66:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	3306      	adds	r3, #6
 800bc6c:	4a05      	ldr	r2, [pc, #20]	@ (800bc84 <CDC_Control_FS+0x158>)
 800bc6e:	7992      	ldrb	r2, [r2, #6]
 800bc70:	701a      	strb	r2, [r3, #0]
    break;
 800bc72:	e000      	b.n	800bc76 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc74:	bf00      	nop
  }

  return (USBD_OK);
 800bc76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	200000c8 	.word	0x200000c8

0800bc88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800bc92:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc0 <CDC_Receive_FS+0x38>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d006      	beq.n	800bca8 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800bc9a:	4b09      	ldr	r3, [pc, #36]	@ (800bcc0 <CDC_Receive_FS+0x38>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	6812      	ldr	r2, [r2, #0]
 800bca2:	4611      	mov	r1, r2
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	4806      	ldr	r0, [pc, #24]	@ (800bcc4 <CDC_Receive_FS+0x3c>)
 800bcac:	f7fe fb3e 	bl	800a32c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcb0:	4804      	ldr	r0, [pc, #16]	@ (800bcc4 <CDC_Receive_FS+0x3c>)
 800bcb2:	f7fe fb99 	bl	800a3e8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800bcb6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	2000108c 	.word	0x2000108c
 800bcc4:	200009b0 	.word	0x200009b0

0800bcc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcd8:	4b0d      	ldr	r3, [pc, #52]	@ (800bd10 <CDC_Transmit_FS+0x48>)
 800bcda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bcde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e00b      	b.n	800bd06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcee:	887b      	ldrh	r3, [r7, #2]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	6879      	ldr	r1, [r7, #4]
 800bcf4:	4806      	ldr	r0, [pc, #24]	@ (800bd10 <CDC_Transmit_FS+0x48>)
 800bcf6:	f7fe faf7 	bl	800a2e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcfa:	4805      	ldr	r0, [pc, #20]	@ (800bd10 <CDC_Transmit_FS+0x48>)
 800bcfc:	f7fe fb34 	bl	800a368 <USBD_CDC_TransmitPacket>
 800bd00:	4603      	mov	r3, r0
 800bd02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	200009b0 	.word	0x200009b0

0800bd14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
	...

0800bd38 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800bd40:	4a04      	ldr	r2, [pc, #16]	@ (800bd54 <CDC_Attach_Rx+0x1c>)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6013      	str	r3, [r2, #0]
}
 800bd46:	bf00      	nop
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	2000108c 	.word	0x2000108c

0800bd58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	6039      	str	r1, [r7, #0]
 800bd62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2212      	movs	r2, #18
 800bd68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd6a:	4b03      	ldr	r3, [pc, #12]	@ (800bd78 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	20000100 	.word	0x20000100

0800bd7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	6039      	str	r1, [r7, #0]
 800bd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2204      	movs	r2, #4
 800bd8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd8e:	4b03      	ldr	r3, [pc, #12]	@ (800bd9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	20000114 	.word	0x20000114

0800bda0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d105      	bne.n	800bdbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	4907      	ldr	r1, [pc, #28]	@ (800bdd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdb6:	4808      	ldr	r0, [pc, #32]	@ (800bdd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdb8:	f7ff fd78 	bl	800b8ac <USBD_GetString>
 800bdbc:	e004      	b.n	800bdc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	4904      	ldr	r1, [pc, #16]	@ (800bdd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdc2:	4805      	ldr	r0, [pc, #20]	@ (800bdd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdc4:	f7ff fd72 	bl	800b8ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdc8:	4b02      	ldr	r3, [pc, #8]	@ (800bdd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20001090 	.word	0x20001090
 800bdd8:	0800c5fc 	.word	0x0800c5fc

0800bddc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	6039      	str	r1, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	4904      	ldr	r1, [pc, #16]	@ (800bdfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bdec:	4804      	ldr	r0, [pc, #16]	@ (800be00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bdee:	f7ff fd5d 	bl	800b8ac <USBD_GetString>
  return USBD_StrDesc;
 800bdf2:	4b02      	ldr	r3, [pc, #8]	@ (800bdfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20001090 	.word	0x20001090
 800be00:	0800c614 	.word	0x0800c614

0800be04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	4603      	mov	r3, r0
 800be0c:	6039      	str	r1, [r7, #0]
 800be0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	221a      	movs	r2, #26
 800be14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be16:	f000 f843 	bl	800bea0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be1a:	4b02      	ldr	r3, [pc, #8]	@ (800be24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	20000118 	.word	0x20000118

0800be28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	6039      	str	r1, [r7, #0]
 800be32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d105      	bne.n	800be46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	4907      	ldr	r1, [pc, #28]	@ (800be5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800be3e:	4808      	ldr	r0, [pc, #32]	@ (800be60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be40:	f7ff fd34 	bl	800b8ac <USBD_GetString>
 800be44:	e004      	b.n	800be50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	4904      	ldr	r1, [pc, #16]	@ (800be5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800be4a:	4805      	ldr	r0, [pc, #20]	@ (800be60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be4c:	f7ff fd2e 	bl	800b8ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800be50:	4b02      	ldr	r3, [pc, #8]	@ (800be5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	20001090 	.word	0x20001090
 800be60:	0800c628 	.word	0x0800c628

0800be64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	4603      	mov	r3, r0
 800be6c:	6039      	str	r1, [r7, #0]
 800be6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d105      	bne.n	800be82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	4907      	ldr	r1, [pc, #28]	@ (800be98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be7a:	4808      	ldr	r0, [pc, #32]	@ (800be9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be7c:	f7ff fd16 	bl	800b8ac <USBD_GetString>
 800be80:	e004      	b.n	800be8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	4904      	ldr	r1, [pc, #16]	@ (800be98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be86:	4805      	ldr	r0, [pc, #20]	@ (800be9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be88:	f7ff fd10 	bl	800b8ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800be8c:	4b02      	ldr	r3, [pc, #8]	@ (800be98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20001090 	.word	0x20001090
 800be9c:	0800c634 	.word	0x0800c634

0800bea0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bea6:	4b0f      	ldr	r3, [pc, #60]	@ (800bee4 <Get_SerialNum+0x44>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800beac:	4b0e      	ldr	r3, [pc, #56]	@ (800bee8 <Get_SerialNum+0x48>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800beb2:	4b0e      	ldr	r3, [pc, #56]	@ (800beec <Get_SerialNum+0x4c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4413      	add	r3, r2
 800bebe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bec6:	2208      	movs	r2, #8
 800bec8:	4909      	ldr	r1, [pc, #36]	@ (800bef0 <Get_SerialNum+0x50>)
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f000 f814 	bl	800bef8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bed0:	2204      	movs	r2, #4
 800bed2:	4908      	ldr	r1, [pc, #32]	@ (800bef4 <Get_SerialNum+0x54>)
 800bed4:	68b8      	ldr	r0, [r7, #8]
 800bed6:	f000 f80f 	bl	800bef8 <IntToUnicode>
  }
}
 800beda:	bf00      	nop
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	1fff7a10 	.word	0x1fff7a10
 800bee8:	1fff7a14 	.word	0x1fff7a14
 800beec:	1fff7a18 	.word	0x1fff7a18
 800bef0:	2000011a 	.word	0x2000011a
 800bef4:	2000012a 	.word	0x2000012a

0800bef8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bef8:	b480      	push	{r7}
 800befa:	b087      	sub	sp, #28
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	4613      	mov	r3, r2
 800bf04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	75fb      	strb	r3, [r7, #23]
 800bf0e:	e027      	b.n	800bf60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	0f1b      	lsrs	r3, r3, #28
 800bf14:	2b09      	cmp	r3, #9
 800bf16:	d80b      	bhi.n	800bf30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	0f1b      	lsrs	r3, r3, #28
 800bf1c:	b2da      	uxtb	r2, r3
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4619      	mov	r1, r3
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	440b      	add	r3, r1
 800bf28:	3230      	adds	r2, #48	@ 0x30
 800bf2a:	b2d2      	uxtb	r2, r2
 800bf2c:	701a      	strb	r2, [r3, #0]
 800bf2e:	e00a      	b.n	800bf46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	0f1b      	lsrs	r3, r3, #28
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	005b      	lsls	r3, r3, #1
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	440b      	add	r3, r1
 800bf40:	3237      	adds	r2, #55	@ 0x37
 800bf42:	b2d2      	uxtb	r2, r2
 800bf44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	011b      	lsls	r3, r3, #4
 800bf4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf4c:	7dfb      	ldrb	r3, [r7, #23]
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	3301      	adds	r3, #1
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	4413      	add	r3, r2
 800bf56:	2200      	movs	r2, #0
 800bf58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	75fb      	strb	r3, [r7, #23]
 800bf60:	7dfa      	ldrb	r2, [r7, #23]
 800bf62:	79fb      	ldrb	r3, [r7, #7]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d3d3      	bcc.n	800bf10 <IntToUnicode+0x18>
  }
}
 800bf68:	bf00      	nop
 800bf6a:	bf00      	nop
 800bf6c:	371c      	adds	r7, #28
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
	...

0800bf78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	@ 0x28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf80:	f107 0314 	add.w	r3, r7, #20
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	605a      	str	r2, [r3, #4]
 800bf8a:	609a      	str	r2, [r3, #8]
 800bf8c:	60da      	str	r2, [r3, #12]
 800bf8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf98:	d13a      	bne.n	800c010 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	613b      	str	r3, [r7, #16]
 800bf9e:	4b1e      	ldr	r3, [pc, #120]	@ (800c018 <HAL_PCD_MspInit+0xa0>)
 800bfa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa2:	4a1d      	ldr	r2, [pc, #116]	@ (800c018 <HAL_PCD_MspInit+0xa0>)
 800bfa4:	f043 0301 	orr.w	r3, r3, #1
 800bfa8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfaa:	4b1b      	ldr	r3, [pc, #108]	@ (800c018 <HAL_PCD_MspInit+0xa0>)
 800bfac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfae:	f003 0301 	and.w	r3, r3, #1
 800bfb2:	613b      	str	r3, [r7, #16]
 800bfb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bfb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bfba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bfc8:	230a      	movs	r3, #10
 800bfca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfcc:	f107 0314 	add.w	r3, r7, #20
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4812      	ldr	r0, [pc, #72]	@ (800c01c <HAL_PCD_MspInit+0xa4>)
 800bfd4:	f7f7 f8a0 	bl	8003118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bfd8:	4b0f      	ldr	r3, [pc, #60]	@ (800c018 <HAL_PCD_MspInit+0xa0>)
 800bfda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfdc:	4a0e      	ldr	r2, [pc, #56]	@ (800c018 <HAL_PCD_MspInit+0xa0>)
 800bfde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe2:	6353      	str	r3, [r2, #52]	@ 0x34
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	4b0b      	ldr	r3, [pc, #44]	@ (800c018 <HAL_PCD_MspInit+0xa0>)
 800bfea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfec:	4a0a      	ldr	r2, [pc, #40]	@ (800c018 <HAL_PCD_MspInit+0xa0>)
 800bfee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bff2:	6453      	str	r3, [r2, #68]	@ 0x44
 800bff4:	4b08      	ldr	r3, [pc, #32]	@ (800c018 <HAL_PCD_MspInit+0xa0>)
 800bff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c000:	2200      	movs	r2, #0
 800c002:	2100      	movs	r1, #0
 800c004:	2043      	movs	r0, #67	@ 0x43
 800c006:	f7f6 fca4 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c00a:	2043      	movs	r0, #67	@ 0x43
 800c00c:	f7f6 fcbd 	bl	800298a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c010:	bf00      	nop
 800c012:	3728      	adds	r7, #40	@ 0x28
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	40023800 	.word	0x40023800
 800c01c:	40020000 	.word	0x40020000

0800c020 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f7fe fabf 	bl	800a5ba <USBD_LL_SetupStage>
}
 800c03c:	bf00      	nop
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c056:	78fa      	ldrb	r2, [r7, #3]
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	4613      	mov	r3, r2
 800c05c:	00db      	lsls	r3, r3, #3
 800c05e:	4413      	add	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	440b      	add	r3, r1
 800c064:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	4619      	mov	r1, r3
 800c06e:	f7fe faf9 	bl	800a664 <USBD_LL_DataOutStage>
}
 800c072:	bf00      	nop
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	460b      	mov	r3, r1
 800c084:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c08c:	78fa      	ldrb	r2, [r7, #3]
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	4613      	mov	r3, r2
 800c092:	00db      	lsls	r3, r3, #3
 800c094:	4413      	add	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	440b      	add	r3, r1
 800c09a:	3320      	adds	r3, #32
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	f7fe fb9b 	bl	800a7dc <USBD_LL_DataInStage>
}
 800c0a6:	bf00      	nop
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fcdf 	bl	800aa80 <USBD_LL_SOF>
}
 800c0c2:	bf00      	nop
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b084      	sub	sp, #16
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	79db      	ldrb	r3, [r3, #7]
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d001      	beq.n	800c0e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c0de:	f7f4 fe43 	bl	8000d68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0e8:	7bfa      	ldrb	r2, [r7, #15]
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe fc83 	bl	800a9f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fe fc2a 	bl	800a952 <USBD_LL_Reset>
}
 800c0fe:	bf00      	nop
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fc7e 	bl	800aa18 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	6812      	ldr	r2, [r2, #0]
 800c12a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c12e:	f043 0301 	orr.w	r3, r3, #1
 800c132:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	7adb      	ldrb	r3, [r3, #11]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d005      	beq.n	800c148 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c13c:	4b04      	ldr	r3, [pc, #16]	@ (800c150 <HAL_PCD_SuspendCallback+0x48>)
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	4a03      	ldr	r2, [pc, #12]	@ (800c150 <HAL_PCD_SuspendCallback+0x48>)
 800c142:	f043 0306 	orr.w	r3, r3, #6
 800c146:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c148:	bf00      	nop
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	e000ed00 	.word	0xe000ed00

0800c154 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fc74 	bl	800aa50 <USBD_LL_Resume>
}
 800c168:	bf00      	nop
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c182:	78fa      	ldrb	r2, [r7, #3]
 800c184:	4611      	mov	r1, r2
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fccc 	bl	800ab24 <USBD_LL_IsoOUTIncomplete>
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1a6:	78fa      	ldrb	r2, [r7, #3]
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fe fc88 	bl	800aac0 <USBD_LL_IsoINIncomplete>
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fe fcde 	bl	800ab88 <USBD_LL_DevConnected>
}
 800c1cc:	bf00      	nop
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe fcdb 	bl	800ab9e <USBD_LL_DevDisconnected>
}
 800c1e8:	bf00      	nop
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d13c      	bne.n	800c27a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c200:	4a20      	ldr	r2, [pc, #128]	@ (800c284 <USBD_LL_Init+0x94>)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a1e      	ldr	r2, [pc, #120]	@ (800c284 <USBD_LL_Init+0x94>)
 800c20c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c210:	4b1c      	ldr	r3, [pc, #112]	@ (800c284 <USBD_LL_Init+0x94>)
 800c212:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c216:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c218:	4b1a      	ldr	r3, [pc, #104]	@ (800c284 <USBD_LL_Init+0x94>)
 800c21a:	2204      	movs	r2, #4
 800c21c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c21e:	4b19      	ldr	r3, [pc, #100]	@ (800c284 <USBD_LL_Init+0x94>)
 800c220:	2202      	movs	r2, #2
 800c222:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c224:	4b17      	ldr	r3, [pc, #92]	@ (800c284 <USBD_LL_Init+0x94>)
 800c226:	2200      	movs	r2, #0
 800c228:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c22a:	4b16      	ldr	r3, [pc, #88]	@ (800c284 <USBD_LL_Init+0x94>)
 800c22c:	2202      	movs	r2, #2
 800c22e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c230:	4b14      	ldr	r3, [pc, #80]	@ (800c284 <USBD_LL_Init+0x94>)
 800c232:	2200      	movs	r2, #0
 800c234:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c236:	4b13      	ldr	r3, [pc, #76]	@ (800c284 <USBD_LL_Init+0x94>)
 800c238:	2200      	movs	r2, #0
 800c23a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c23c:	4b11      	ldr	r3, [pc, #68]	@ (800c284 <USBD_LL_Init+0x94>)
 800c23e:	2200      	movs	r2, #0
 800c240:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c242:	4b10      	ldr	r3, [pc, #64]	@ (800c284 <USBD_LL_Init+0x94>)
 800c244:	2200      	movs	r2, #0
 800c246:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c248:	4b0e      	ldr	r3, [pc, #56]	@ (800c284 <USBD_LL_Init+0x94>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c24e:	480d      	ldr	r0, [pc, #52]	@ (800c284 <USBD_LL_Init+0x94>)
 800c250:	f7f9 fd44 	bl	8005cdc <HAL_PCD_Init>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c25a:	f7f4 fd85 	bl	8000d68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c25e:	2180      	movs	r1, #128	@ 0x80
 800c260:	4808      	ldr	r0, [pc, #32]	@ (800c284 <USBD_LL_Init+0x94>)
 800c262:	f7fa ff70 	bl	8007146 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c266:	2240      	movs	r2, #64	@ 0x40
 800c268:	2100      	movs	r1, #0
 800c26a:	4806      	ldr	r0, [pc, #24]	@ (800c284 <USBD_LL_Init+0x94>)
 800c26c:	f7fa ff24 	bl	80070b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c270:	2280      	movs	r2, #128	@ 0x80
 800c272:	2101      	movs	r1, #1
 800c274:	4803      	ldr	r0, [pc, #12]	@ (800c284 <USBD_LL_Init+0x94>)
 800c276:	f7fa ff1f 	bl	80070b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20001290 	.word	0x20001290

0800c288 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f9 fe2b 	bl	8005efa <HAL_PCD_Start>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f942 	bl	800c534 <USBD_Get_USB_Status>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b084      	sub	sp, #16
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	4608      	mov	r0, r1
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	70fb      	strb	r3, [r7, #3]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	70bb      	strb	r3, [r7, #2]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c2e6:	78bb      	ldrb	r3, [r7, #2]
 800c2e8:	883a      	ldrh	r2, [r7, #0]
 800c2ea:	78f9      	ldrb	r1, [r7, #3]
 800c2ec:	f7fa faff 	bl	80068ee <HAL_PCD_EP_Open>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 f91c 	bl	800c534 <USBD_Get_USB_Status>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c300:	7bbb      	ldrb	r3, [r7, #14]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	460b      	mov	r3, r1
 800c314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c324:	78fa      	ldrb	r2, [r7, #3]
 800c326:	4611      	mov	r1, r2
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fa fb4a 	bl	80069c2 <HAL_PCD_EP_Close>
 800c32e:	4603      	mov	r3, r0
 800c330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c332:	7bfb      	ldrb	r3, [r7, #15]
 800c334:	4618      	mov	r0, r3
 800c336:	f000 f8fd 	bl	800c534 <USBD_Get_USB_Status>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	460b      	mov	r3, r1
 800c352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c362:	78fa      	ldrb	r2, [r7, #3]
 800c364:	4611      	mov	r1, r2
 800c366:	4618      	mov	r0, r3
 800c368:	f7fa fc02 	bl	8006b70 <HAL_PCD_EP_SetStall>
 800c36c:	4603      	mov	r3, r0
 800c36e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c370:	7bfb      	ldrb	r3, [r7, #15]
 800c372:	4618      	mov	r0, r3
 800c374:	f000 f8de 	bl	800c534 <USBD_Get_USB_Status>
 800c378:	4603      	mov	r3, r0
 800c37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c37c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b084      	sub	sp, #16
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	460b      	mov	r3, r1
 800c390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3a0:	78fa      	ldrb	r2, [r7, #3]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fa fc46 	bl	8006c36 <HAL_PCD_EP_ClrStall>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 f8bf 	bl	800c534 <USBD_Get_USB_Status>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	da0b      	bge.n	800c3f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3e0:	78fb      	ldrb	r3, [r7, #3]
 800c3e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3e6:	68f9      	ldr	r1, [r7, #12]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	440b      	add	r3, r1
 800c3f2:	3316      	adds	r3, #22
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	e00b      	b.n	800c410 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3f8:	78fb      	ldrb	r3, [r7, #3]
 800c3fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3fe:	68f9      	ldr	r1, [r7, #12]
 800c400:	4613      	mov	r3, r2
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	4413      	add	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	440b      	add	r3, r1
 800c40a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c40e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	460b      	mov	r3, r1
 800c426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c436:	78fa      	ldrb	r2, [r7, #3]
 800c438:	4611      	mov	r1, r2
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fa fa33 	bl	80068a6 <HAL_PCD_SetAddress>
 800c440:	4603      	mov	r3, r0
 800c442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c444:	7bfb      	ldrb	r3, [r7, #15]
 800c446:	4618      	mov	r0, r3
 800c448:	f000 f874 	bl	800c534 <USBD_Get_USB_Status>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c450:	7bbb      	ldrb	r3, [r7, #14]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b086      	sub	sp, #24
 800c45e:	af00      	add	r7, sp, #0
 800c460:	60f8      	str	r0, [r7, #12]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
 800c466:	460b      	mov	r3, r1
 800c468:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c478:	7af9      	ldrb	r1, [r7, #11]
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	f7fa fb3d 	bl	8006afc <HAL_PCD_EP_Transmit>
 800c482:	4603      	mov	r3, r0
 800c484:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c486:	7dfb      	ldrb	r3, [r7, #23]
 800c488:	4618      	mov	r0, r3
 800c48a:	f000 f853 	bl	800c534 <USBD_Get_USB_Status>
 800c48e:	4603      	mov	r3, r0
 800c490:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c492:	7dbb      	ldrb	r3, [r7, #22]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3718      	adds	r7, #24
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	607a      	str	r2, [r7, #4]
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c4ba:	7af9      	ldrb	r1, [r7, #11]
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	f7fa fac9 	bl	8006a56 <HAL_PCD_EP_Receive>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 f832 	bl	800c534 <USBD_Get_USB_Status>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3718      	adds	r7, #24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4f0:	78fa      	ldrb	r2, [r7, #3]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fa fae9 	bl	8006acc <HAL_PCD_EP_GetRxCount>
 800c4fa:	4603      	mov	r3, r0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c50c:	4b03      	ldr	r3, [pc, #12]	@ (800c51c <USBD_static_malloc+0x18>)
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	20001774 	.word	0x20001774

0800c520 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]

}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c53e:	2300      	movs	r3, #0
 800c540:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c542:	79fb      	ldrb	r3, [r7, #7]
 800c544:	2b03      	cmp	r3, #3
 800c546:	d817      	bhi.n	800c578 <USBD_Get_USB_Status+0x44>
 800c548:	a201      	add	r2, pc, #4	@ (adr r2, 800c550 <USBD_Get_USB_Status+0x1c>)
 800c54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c54e:	bf00      	nop
 800c550:	0800c561 	.word	0x0800c561
 800c554:	0800c567 	.word	0x0800c567
 800c558:	0800c56d 	.word	0x0800c56d
 800c55c:	0800c573 	.word	0x0800c573
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]
    break;
 800c564:	e00b      	b.n	800c57e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c566:	2303      	movs	r3, #3
 800c568:	73fb      	strb	r3, [r7, #15]
    break;
 800c56a:	e008      	b.n	800c57e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c56c:	2301      	movs	r3, #1
 800c56e:	73fb      	strb	r3, [r7, #15]
    break;
 800c570:	e005      	b.n	800c57e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c572:	2303      	movs	r3, #3
 800c574:	73fb      	strb	r3, [r7, #15]
    break;
 800c576:	e002      	b.n	800c57e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c578:	2303      	movs	r3, #3
 800c57a:	73fb      	strb	r3, [r7, #15]
    break;
 800c57c:	bf00      	nop
  }
  return usb_status;
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <memset>:
 800c58c:	4402      	add	r2, r0
 800c58e:	4603      	mov	r3, r0
 800c590:	4293      	cmp	r3, r2
 800c592:	d100      	bne.n	800c596 <memset+0xa>
 800c594:	4770      	bx	lr
 800c596:	f803 1b01 	strb.w	r1, [r3], #1
 800c59a:	e7f9      	b.n	800c590 <memset+0x4>

0800c59c <__libc_init_array>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	4d0d      	ldr	r5, [pc, #52]	@ (800c5d4 <__libc_init_array+0x38>)
 800c5a0:	4c0d      	ldr	r4, [pc, #52]	@ (800c5d8 <__libc_init_array+0x3c>)
 800c5a2:	1b64      	subs	r4, r4, r5
 800c5a4:	10a4      	asrs	r4, r4, #2
 800c5a6:	2600      	movs	r6, #0
 800c5a8:	42a6      	cmp	r6, r4
 800c5aa:	d109      	bne.n	800c5c0 <__libc_init_array+0x24>
 800c5ac:	4d0b      	ldr	r5, [pc, #44]	@ (800c5dc <__libc_init_array+0x40>)
 800c5ae:	4c0c      	ldr	r4, [pc, #48]	@ (800c5e0 <__libc_init_array+0x44>)
 800c5b0:	f000 f818 	bl	800c5e4 <_init>
 800c5b4:	1b64      	subs	r4, r4, r5
 800c5b6:	10a4      	asrs	r4, r4, #2
 800c5b8:	2600      	movs	r6, #0
 800c5ba:	42a6      	cmp	r6, r4
 800c5bc:	d105      	bne.n	800c5ca <__libc_init_array+0x2e>
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
 800c5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c4:	4798      	blx	r3
 800c5c6:	3601      	adds	r6, #1
 800c5c8:	e7ee      	b.n	800c5a8 <__libc_init_array+0xc>
 800c5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ce:	4798      	blx	r3
 800c5d0:	3601      	adds	r6, #1
 800c5d2:	e7f2      	b.n	800c5ba <__libc_init_array+0x1e>
 800c5d4:	0800ca7c 	.word	0x0800ca7c
 800c5d8:	0800ca7c 	.word	0x0800ca7c
 800c5dc:	0800ca7c 	.word	0x0800ca7c
 800c5e0:	0800ca80 	.word	0x0800ca80

0800c5e4 <_init>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	bf00      	nop
 800c5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ea:	bc08      	pop	{r3}
 800c5ec:	469e      	mov	lr, r3
 800c5ee:	4770      	bx	lr

0800c5f0 <_fini>:
 800c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f2:	bf00      	nop
 800c5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f6:	bc08      	pop	{r3}
 800c5f8:	469e      	mov	lr, r3
 800c5fa:	4770      	bx	lr
