
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d998  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800db30  0800db30  0000eb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dba8  0800dba8  0000f130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dba8  0800dba8  0000eba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbb0  0800dbb0  0000f130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbb0  0800dbb0  0000ebb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbb4  0800dbb4  0000ebb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800dbb8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001944  20000130  0800dce8  0000f130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a74  0800dce8  0000fa74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac05  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000429a  00000000  00000000  00029d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0002e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b4  00000000  00000000  0002f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000620b  00000000  00000000  00030aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f09f  00000000  00000000  00036cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fac6  00000000  00000000  00055d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f585c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000677c  00000000  00000000  000f58a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fc01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800db18 	.word	0x0800db18

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800db18 	.word	0x0800db18

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b988 	b.w	8000cec <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	468e      	mov	lr, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	4688      	mov	r8, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4617      	mov	r7, r2
 8000a08:	d962      	bls.n	8000ad0 <__udivmoddi4+0xdc>
 8000a0a:	fab2 f682 	clz	r6, r2
 8000a0e:	b14e      	cbz	r6, 8000a24 <__udivmoddi4+0x30>
 8000a10:	f1c6 0320 	rsb	r3, r6, #32
 8000a14:	fa01 f806 	lsl.w	r8, r1, r6
 8000a18:	fa20 f303 	lsr.w	r3, r0, r3
 8000a1c:	40b7      	lsls	r7, r6
 8000a1e:	ea43 0808 	orr.w	r8, r3, r8
 8000a22:	40b4      	lsls	r4, r6
 8000a24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a28:	fa1f fc87 	uxth.w	ip, r7
 8000a2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a30:	0c23      	lsrs	r3, r4, #16
 8000a32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a48:	f080 80ea 	bcs.w	8000c20 <__udivmoddi4+0x22c>
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	f240 80e7 	bls.w	8000c20 <__udivmoddi4+0x22c>
 8000a52:	3902      	subs	r1, #2
 8000a54:	443b      	add	r3, r7
 8000a56:	1a9a      	subs	r2, r3, r2
 8000a58:	b2a3      	uxth	r3, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a6a:	459c      	cmp	ip, r3
 8000a6c:	d909      	bls.n	8000a82 <__udivmoddi4+0x8e>
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a74:	f080 80d6 	bcs.w	8000c24 <__udivmoddi4+0x230>
 8000a78:	459c      	cmp	ip, r3
 8000a7a:	f240 80d3 	bls.w	8000c24 <__udivmoddi4+0x230>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3802      	subs	r0, #2
 8000a82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a86:	eba3 030c 	sub.w	r3, r3, ip
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11d      	cbz	r5, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40f3      	lsrs	r3, r6
 8000a90:	2200      	movs	r2, #0
 8000a92:	e9c5 3200 	strd	r3, r2, [r5]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d905      	bls.n	8000aaa <__udivmoddi4+0xb6>
 8000a9e:	b10d      	cbz	r5, 8000aa4 <__udivmoddi4+0xb0>
 8000aa0:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	e7f5      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000aaa:	fab3 f183 	clz	r1, r3
 8000aae:	2900      	cmp	r1, #0
 8000ab0:	d146      	bne.n	8000b40 <__udivmoddi4+0x14c>
 8000ab2:	4573      	cmp	r3, lr
 8000ab4:	d302      	bcc.n	8000abc <__udivmoddi4+0xc8>
 8000ab6:	4282      	cmp	r2, r0
 8000ab8:	f200 8105 	bhi.w	8000cc6 <__udivmoddi4+0x2d2>
 8000abc:	1a84      	subs	r4, r0, r2
 8000abe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d0e5      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000aca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ace:	e7e2      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f000 8090 	beq.w	8000bf6 <__udivmoddi4+0x202>
 8000ad6:	fab2 f682 	clz	r6, r2
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	f040 80a4 	bne.w	8000c28 <__udivmoddi4+0x234>
 8000ae0:	1a8a      	subs	r2, r1, r2
 8000ae2:	0c03      	lsrs	r3, r0, #16
 8000ae4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae8:	b280      	uxth	r0, r0
 8000aea:	b2bc      	uxth	r4, r7
 8000aec:	2101      	movs	r1, #1
 8000aee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000af2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afa:	fb04 f20c 	mul.w	r2, r4, ip
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d907      	bls.n	8000b12 <__udivmoddi4+0x11e>
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b08:	d202      	bcs.n	8000b10 <__udivmoddi4+0x11c>
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	f200 80e0 	bhi.w	8000cd0 <__udivmoddi4+0x2dc>
 8000b10:	46c4      	mov	ip, r8
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b20:	fb02 f404 	mul.w	r4, r2, r4
 8000b24:	429c      	cmp	r4, r3
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x144>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x142>
 8000b30:	429c      	cmp	r4, r3
 8000b32:	f200 80ca 	bhi.w	8000cca <__udivmoddi4+0x2d6>
 8000b36:	4602      	mov	r2, r0
 8000b38:	1b1b      	subs	r3, r3, r4
 8000b3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b3e:	e7a5      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b40:	f1c1 0620 	rsb	r6, r1, #32
 8000b44:	408b      	lsls	r3, r1
 8000b46:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4a:	431f      	orrs	r7, r3
 8000b4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b50:	fa20 f306 	lsr.w	r3, r0, r6
 8000b54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b5c:	4323      	orrs	r3, r4
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	fa1f fc87 	uxth.w	ip, r7
 8000b66:	fbbe f0f9 	udiv	r0, lr, r9
 8000b6a:	0c1c      	lsrs	r4, r3, #16
 8000b6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b78:	45a6      	cmp	lr, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x1a0>
 8000b80:	193c      	adds	r4, r7, r4
 8000b82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b86:	f080 809c 	bcs.w	8000cc2 <__udivmoddi4+0x2ce>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f240 8099 	bls.w	8000cc2 <__udivmoddi4+0x2ce>
 8000b90:	3802      	subs	r0, #2
 8000b92:	443c      	add	r4, r7
 8000b94:	eba4 040e 	sub.w	r4, r4, lr
 8000b98:	fa1f fe83 	uxth.w	lr, r3
 8000b9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ba8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bac:	45a4      	cmp	ip, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x1ce>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bb6:	f080 8082 	bcs.w	8000cbe <__udivmoddi4+0x2ca>
 8000bba:	45a4      	cmp	ip, r4
 8000bbc:	d97f      	bls.n	8000cbe <__udivmoddi4+0x2ca>
 8000bbe:	3b02      	subs	r3, #2
 8000bc0:	443c      	add	r4, r7
 8000bc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bce:	4564      	cmp	r4, ip
 8000bd0:	4673      	mov	r3, lr
 8000bd2:	46e1      	mov	r9, ip
 8000bd4:	d362      	bcc.n	8000c9c <__udivmoddi4+0x2a8>
 8000bd6:	d05f      	beq.n	8000c98 <__udivmoddi4+0x2a4>
 8000bd8:	b15d      	cbz	r5, 8000bf2 <__udivmoddi4+0x1fe>
 8000bda:	ebb8 0203 	subs.w	r2, r8, r3
 8000bde:	eb64 0409 	sbc.w	r4, r4, r9
 8000be2:	fa04 f606 	lsl.w	r6, r4, r6
 8000be6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bea:	431e      	orrs	r6, r3
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e74f      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000bf6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bfa:	0c01      	lsrs	r1, r0, #16
 8000bfc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c00:	b280      	uxth	r0, r0
 8000c02:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c06:	463b      	mov	r3, r7
 8000c08:	4638      	mov	r0, r7
 8000c0a:	463c      	mov	r4, r7
 8000c0c:	46b8      	mov	r8, r7
 8000c0e:	46be      	mov	lr, r7
 8000c10:	2620      	movs	r6, #32
 8000c12:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c16:	eba2 0208 	sub.w	r2, r2, r8
 8000c1a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c1e:	e766      	b.n	8000aee <__udivmoddi4+0xfa>
 8000c20:	4601      	mov	r1, r0
 8000c22:	e718      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c24:	4610      	mov	r0, r2
 8000c26:	e72c      	b.n	8000a82 <__udivmoddi4+0x8e>
 8000c28:	f1c6 0220 	rsb	r2, r6, #32
 8000c2c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	40b1      	lsls	r1, r6
 8000c34:	fa20 f202 	lsr.w	r2, r0, r2
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c42:	b2bc      	uxth	r4, r7
 8000c44:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c48:	0c11      	lsrs	r1, r2, #16
 8000c4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4e:	fb08 f904 	mul.w	r9, r8, r4
 8000c52:	40b0      	lsls	r0, r6
 8000c54:	4589      	cmp	r9, r1
 8000c56:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c5a:	b280      	uxth	r0, r0
 8000c5c:	d93e      	bls.n	8000cdc <__udivmoddi4+0x2e8>
 8000c5e:	1879      	adds	r1, r7, r1
 8000c60:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c64:	d201      	bcs.n	8000c6a <__udivmoddi4+0x276>
 8000c66:	4589      	cmp	r9, r1
 8000c68:	d81f      	bhi.n	8000caa <__udivmoddi4+0x2b6>
 8000c6a:	eba1 0109 	sub.w	r1, r1, r9
 8000c6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c72:	fb09 f804 	mul.w	r8, r9, r4
 8000c76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c7a:	b292      	uxth	r2, r2
 8000c7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c80:	4542      	cmp	r2, r8
 8000c82:	d229      	bcs.n	8000cd8 <__udivmoddi4+0x2e4>
 8000c84:	18ba      	adds	r2, r7, r2
 8000c86:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c8a:	d2c4      	bcs.n	8000c16 <__udivmoddi4+0x222>
 8000c8c:	4542      	cmp	r2, r8
 8000c8e:	d2c2      	bcs.n	8000c16 <__udivmoddi4+0x222>
 8000c90:	f1a9 0102 	sub.w	r1, r9, #2
 8000c94:	443a      	add	r2, r7
 8000c96:	e7be      	b.n	8000c16 <__udivmoddi4+0x222>
 8000c98:	45f0      	cmp	r8, lr
 8000c9a:	d29d      	bcs.n	8000bd8 <__udivmoddi4+0x1e4>
 8000c9c:	ebbe 0302 	subs.w	r3, lr, r2
 8000ca0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ca4:	3801      	subs	r0, #1
 8000ca6:	46e1      	mov	r9, ip
 8000ca8:	e796      	b.n	8000bd8 <__udivmoddi4+0x1e4>
 8000caa:	eba7 0909 	sub.w	r9, r7, r9
 8000cae:	4449      	add	r1, r9
 8000cb0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cb4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb8:	fb09 f804 	mul.w	r8, r9, r4
 8000cbc:	e7db      	b.n	8000c76 <__udivmoddi4+0x282>
 8000cbe:	4673      	mov	r3, lr
 8000cc0:	e77f      	b.n	8000bc2 <__udivmoddi4+0x1ce>
 8000cc2:	4650      	mov	r0, sl
 8000cc4:	e766      	b.n	8000b94 <__udivmoddi4+0x1a0>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e6fd      	b.n	8000ac6 <__udivmoddi4+0xd2>
 8000cca:	443b      	add	r3, r7
 8000ccc:	3a02      	subs	r2, #2
 8000cce:	e733      	b.n	8000b38 <__udivmoddi4+0x144>
 8000cd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd4:	443b      	add	r3, r7
 8000cd6:	e71c      	b.n	8000b12 <__udivmoddi4+0x11e>
 8000cd8:	4649      	mov	r1, r9
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x222>
 8000cdc:	eba1 0109 	sub.w	r1, r1, r9
 8000ce0:	46c4      	mov	ip, r8
 8000ce2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce6:	fb09 f804 	mul.w	r8, r9, r4
 8000cea:	e7c4      	b.n	8000c76 <__udivmoddi4+0x282>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e00a      	b.n	8000d14 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_ADC_ConvCpltCallback+0x38>)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	ddf1      	ble.n	8000cfe <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	200003e4 	.word	0x200003e4
 8000d2c:	200003f4 	.word	0x200003f4

08000d30 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000d38:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000621 	.word	0x20000621

08000d50 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000622 	.word	0x20000622

08000d70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a18      	ldr	r2, [pc, #96]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d116      	bne.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d8c:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b28      	cmp	r3, #40	@ 0x28
 8000d94:	d107      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000d9c:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d9e:	7813      	ldrb	r3, [r2, #0]
 8000da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da4:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000da6:	2208      	movs	r2, #8
 8000da8:	4910      	ldr	r1, [pc, #64]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000dac:	f002 f956 	bl	800305c <HAL_ADC_Start_DMA>
	}

	if(htim->Instance == TIM2){ //20ms
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db8:	d104      	bne.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x54>
		ONMPU=TRUE;
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000dbc:	7813      	ldrb	r3, [r2, #0]
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	7013      	strb	r3, [r2, #0]
	}

	if(htim->Instance ==TIM3){ //100ms
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d104      	bne.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0x68>
		ONDISPLAY=TRUE;
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000dd0:	7813      	ldrb	r3, [r2, #0]
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	7013      	strb	r3, [r2, #0]
	}
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40010000 	.word	0x40010000
 8000de4:	200003e0 	.word	0x200003e0
 8000de8:	20000620 	.word	0x20000620
 8000dec:	200003e4 	.word	0x200003e4
 8000df0:	2000014c 	.word	0x2000014c
 8000df4:	40000400 	.word	0x40000400

08000df8 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e018      	b.n	8000e3a <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <USBRxData+0x58>)
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <USBRxData+0x58>)
 8000e14:	795b      	ldrb	r3, [r3, #5]
 8000e16:	1c58      	adds	r0, r3, #1
 8000e18:	b2c4      	uxtb	r4, r0
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <USBRxData+0x58>)
 8000e1c:	7144      	strb	r4, [r0, #5]
 8000e1e:	440b      	add	r3, r1
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <USBRxData+0x58>)
 8000e26:	795a      	ldrb	r2, [r3, #5]
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <USBRxData+0x58>)
 8000e2a:	799b      	ldrb	r3, [r3, #6]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <USBRxData+0x58>)
 8000e32:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	3301      	adds	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d8e2      	bhi.n	8000e08 <USBRxData+0x10>
	}

}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc90      	pop	{r4, r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000410 	.word	0x20000410

08000e54 <USBTask>:

void USBTask() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0c2      	sub	sp, #264	@ 0x108
 8000e58:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000e5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <USBTask+0x90>)
 8000e5c:	791a      	ldrb	r2, [r3, #4]
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <USBTask+0x90>)
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d039      	beq.n	8000eda <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000e66:	481f      	ldr	r0, [pc, #124]	@ (8000ee4 <USBTask+0x90>)
 8000e68:	f001 fdae 	bl	80029c8 <unerPrtcl_DecodeHeader>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000e72:	491d      	ldr	r1, [pc, #116]	@ (8000ee8 <USBTask+0x94>)
 8000e74:	481b      	ldr	r0, [pc, #108]	@ (8000ee4 <USBTask+0x90>)
 8000e76:	f000 f839 	bl	8000eec <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000e80:	e01d      	b.n	8000ebe <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <USBTask+0x94>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <USBTask+0x94>)
 8000e88:	7a1b      	ldrb	r3, [r3, #8]
 8000e8a:	1c59      	adds	r1, r3, #1
 8000e8c:	b2c8      	uxtb	r0, r1
 8000e8e:	4916      	ldr	r1, [pc, #88]	@ (8000ee8 <USBTask+0x94>)
 8000e90:	7208      	strb	r0, [r1, #8]
 8000e92:	441a      	add	r2, r3
 8000e94:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000e98:	7811      	ldrb	r1, [r2, #0]
 8000e9a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000e9e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000ea2:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <USBTask+0x94>)
 8000ea6:	7a1a      	ldrb	r2, [r3, #8]
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <USBTask+0x94>)
 8000eaa:	799b      	ldrb	r3, [r3, #6]
 8000eac:	4013      	ands	r3, r2
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <USBTask+0x94>)
 8000eb2:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000eb4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <USBTask+0x94>)
 8000ec0:	79db      	ldrb	r3, [r3, #7]
 8000ec2:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d3db      	bcc.n	8000e82 <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <USBTask+0x94>)
 8000ecc:	79db      	ldrb	r3, [r3, #7]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00c f991 	bl	800d1fc <CDC_Transmit_FS>
	}

}
 8000eda:	bf00      	nop
 8000edc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000410 	.word	0x20000410
 8000ee8:	20000404 	.word	0x20000404

08000eec <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	7a12      	ldrb	r2, [r2, #8]
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3bf0      	subs	r3, #240	@ 0xf0
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	f200 8129 	bhi.w	800115c <decodeCommand+0x270>
 8000f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f10 <decodeCommand+0x24>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f41 	.word	0x08000f41
 8000f18:	08000f61 	.word	0x08000f61
 8000f1c:	08001045 	.word	0x08001045
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000f20:	2202      	movs	r2, #2
 8000f22:	21f0      	movs	r1, #240	@ 0xf0
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	f001 fc2d 	bl	8002784 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000f2a:	210d      	movs	r1, #13
 8000f2c:	6838      	ldr	r0, [r7, #0]
 8000f2e:	f001 fcd8 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	7a5b      	ldrb	r3, [r3, #9]
 8000f36:	4619      	mov	r1, r3
 8000f38:	6838      	ldr	r0, [r7, #0]
 8000f3a:	f001 fcd2 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		break;
 8000f3e:	e123      	b.n	8001188 <decodeCommand+0x29c>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000f40:	220d      	movs	r2, #13
 8000f42:	21f1      	movs	r1, #241	@ 0xf1
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	f001 fc1d 	bl	8002784 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000f4a:	4991      	ldr	r1, [pc, #580]	@ (8001190 <decodeCommand+0x2a4>)
 8000f4c:	6838      	ldr	r0, [r7, #0]
 8000f4e:	f001 fcf6 	bl	800293e <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	7a5b      	ldrb	r3, [r3, #9]
 8000f56:	4619      	mov	r1, r3
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f001 fcc2 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		break;
 8000f5e:	e113      	b.n	8001188 <decodeCommand+0x29c>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000f60:	220d      	movs	r2, #13
 8000f62:	21f2      	movs	r1, #242	@ 0xf2
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f001 fc0d 	bl	8002784 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 8000f6a:	4b8a      	ldr	r3, [pc, #552]	@ (8001194 <decodeCommand+0x2a8>)
 8000f6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f70:	4b89      	ldr	r3, [pc, #548]	@ (8001198 <decodeCommand+0x2ac>)
 8000f72:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f74:	4b88      	ldr	r3, [pc, #544]	@ (8001198 <decodeCommand+0x2ac>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f001 fcb1 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f80:	4b85      	ldr	r3, [pc, #532]	@ (8001198 <decodeCommand+0x2ac>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f001 fcab 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 8000f8c:	4b83      	ldr	r3, [pc, #524]	@ (800119c <decodeCommand+0x2b0>)
 8000f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f92:	4b81      	ldr	r3, [pc, #516]	@ (8001198 <decodeCommand+0x2ac>)
 8000f94:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f96:	4b80      	ldr	r3, [pc, #512]	@ (8001198 <decodeCommand+0x2ac>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f001 fca0 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fa2:	4b7d      	ldr	r3, [pc, #500]	@ (8001198 <decodeCommand+0x2ac>)
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f001 fc9a 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 8000fae:	4b7c      	ldr	r3, [pc, #496]	@ (80011a0 <decodeCommand+0x2b4>)
 8000fb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fb4:	4b78      	ldr	r3, [pc, #480]	@ (8001198 <decodeCommand+0x2ac>)
 8000fb6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fb8:	4b77      	ldr	r3, [pc, #476]	@ (8001198 <decodeCommand+0x2ac>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f001 fc8f 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fc4:	4b74      	ldr	r3, [pc, #464]	@ (8001198 <decodeCommand+0x2ac>)
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f001 fc89 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 8000fd0:	4b74      	ldr	r3, [pc, #464]	@ (80011a4 <decodeCommand+0x2b8>)
 8000fd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd6:	4b70      	ldr	r3, [pc, #448]	@ (8001198 <decodeCommand+0x2ac>)
 8000fd8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fda:	4b6f      	ldr	r3, [pc, #444]	@ (8001198 <decodeCommand+0x2ac>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f001 fc7e 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8001198 <decodeCommand+0x2ac>)
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	4619      	mov	r1, r3
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f001 fc78 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 8000ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80011a8 <decodeCommand+0x2bc>)
 8000ff4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ff8:	4b67      	ldr	r3, [pc, #412]	@ (8001198 <decodeCommand+0x2ac>)
 8000ffa:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000ffc:	4b66      	ldr	r3, [pc, #408]	@ (8001198 <decodeCommand+0x2ac>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f001 fc6d 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001008:	4b63      	ldr	r3, [pc, #396]	@ (8001198 <decodeCommand+0x2ac>)
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	4619      	mov	r1, r3
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f001 fc67 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 8001014:	4b65      	ldr	r3, [pc, #404]	@ (80011ac <decodeCommand+0x2c0>)
 8001016:	f9b3 2000 	ldrsh.w	r2, [r3]
 800101a:	4b5f      	ldr	r3, [pc, #380]	@ (8001198 <decodeCommand+0x2ac>)
 800101c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800101e:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <decodeCommand+0x2ac>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f001 fc5c 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800102a:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <decodeCommand+0x2ac>)
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	4619      	mov	r1, r3
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f001 fc56 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	7a5b      	ldrb	r3, [r3, #9]
 800103a:	4619      	mov	r1, r3
 800103c:	6838      	ldr	r0, [r7, #0]
 800103e:	f001 fc50 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		break;
 8001042:	e0a1      	b.n	8001188 <decodeCommand+0x29c>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 8001044:	2211      	movs	r2, #17
 8001046:	21f3      	movs	r1, #243	@ 0xf3
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f001 fb9b 	bl	8002784 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 800104e:	4b58      	ldr	r3, [pc, #352]	@ (80011b0 <decodeCommand+0x2c4>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	4b51      	ldr	r3, [pc, #324]	@ (8001198 <decodeCommand+0x2ac>)
 8001054:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001056:	4b50      	ldr	r3, [pc, #320]	@ (8001198 <decodeCommand+0x2ac>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f001 fc40 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001062:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <decodeCommand+0x2ac>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	4619      	mov	r1, r3
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f001 fc3a 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 800106e:	4b50      	ldr	r3, [pc, #320]	@ (80011b0 <decodeCommand+0x2c4>)
 8001070:	885a      	ldrh	r2, [r3, #2]
 8001072:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <decodeCommand+0x2ac>)
 8001074:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <decodeCommand+0x2ac>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	f001 fc30 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <decodeCommand+0x2ac>)
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	4619      	mov	r1, r3
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f001 fc2a 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 800108e:	4b48      	ldr	r3, [pc, #288]	@ (80011b0 <decodeCommand+0x2c4>)
 8001090:	889a      	ldrh	r2, [r3, #4]
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <decodeCommand+0x2ac>)
 8001094:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001096:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <decodeCommand+0x2ac>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f001 fc20 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <decodeCommand+0x2ac>)
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	4619      	mov	r1, r3
 80010a8:	6838      	ldr	r0, [r7, #0]
 80010aa:	f001 fc1a 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 80010ae:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <decodeCommand+0x2c4>)
 80010b0:	88da      	ldrh	r2, [r3, #6]
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <decodeCommand+0x2ac>)
 80010b4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010b6:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <decodeCommand+0x2ac>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f001 fc10 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <decodeCommand+0x2ac>)
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	4619      	mov	r1, r3
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f001 fc0a 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 80010ce:	4b38      	ldr	r3, [pc, #224]	@ (80011b0 <decodeCommand+0x2c4>)
 80010d0:	891a      	ldrh	r2, [r3, #8]
 80010d2:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <decodeCommand+0x2ac>)
 80010d4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010d6:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <decodeCommand+0x2ac>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	6838      	ldr	r0, [r7, #0]
 80010de:	f001 fc00 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <decodeCommand+0x2ac>)
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	4619      	mov	r1, r3
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f001 fbfa 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 80010ee:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <decodeCommand+0x2c4>)
 80010f0:	895a      	ldrh	r2, [r3, #10]
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <decodeCommand+0x2ac>)
 80010f4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010f6:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <decodeCommand+0x2ac>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6838      	ldr	r0, [r7, #0]
 80010fe:	f001 fbf0 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <decodeCommand+0x2ac>)
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	4619      	mov	r1, r3
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f001 fbea 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <decodeCommand+0x2c4>)
 8001110:	899a      	ldrh	r2, [r3, #12]
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <decodeCommand+0x2ac>)
 8001114:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <decodeCommand+0x2ac>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f001 fbe0 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <decodeCommand+0x2ac>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	4619      	mov	r1, r3
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f001 fbda 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 800112e:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <decodeCommand+0x2c4>)
 8001130:	89da      	ldrh	r2, [r3, #14]
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <decodeCommand+0x2ac>)
 8001134:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <decodeCommand+0x2ac>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f001 fbd0 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <decodeCommand+0x2ac>)
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	4619      	mov	r1, r3
 8001148:	6838      	ldr	r0, [r7, #0]
 800114a:	f001 fbca 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	7a5b      	ldrb	r3, [r3, #9]
 8001152:	4619      	mov	r1, r3
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f001 fbc4 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		break;
 800115a:	e015      	b.n	8001188 <decodeCommand+0x29c>
		break;
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	7a12      	ldrb	r2, [r2, #8]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2202      	movs	r2, #2
 800116a:	4619      	mov	r1, r3
 800116c:	6838      	ldr	r0, [r7, #0]
 800116e:	f001 fb09 	bl	8002784 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 8001172:	21ff      	movs	r1, #255	@ 0xff
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f001 fbb4 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	7a5b      	ldrb	r3, [r3, #9]
 800117e:	4619      	mov	r1, r3
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f001 fbae 	bl	80028e2 <unerPrtcl_PutByteOnTx>
		break;
 8001186:	bf00      	nop
	}
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0800db78 	.word	0x0800db78
 8001194:	20000624 	.word	0x20000624
 8001198:	2000061c 	.word	0x2000061c
 800119c:	20000626 	.word	0x20000626
 80011a0:	20000628 	.word	0x20000628
 80011a4:	2000062a 	.word	0x2000062a
 80011a8:	2000062c 	.word	0x2000062c
 80011ac:	2000062e 	.word	0x2000062e
 80011b0:	200003f4 	.word	0x200003f4

080011b4 <do10ms>:

void do10ms() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	if (IS10MS) {
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <do10ms+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d02a      	beq.n	800121c <do10ms+0x68>
		IS10MS = FALSE;
 80011c6:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <do10ms+0x6c>)
 80011c8:	7813      	ldrb	r3, [r2, #0]
 80011ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011ce:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <do10ms+0x70>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <do10ms+0x70>)
 80011da:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <do10ms+0x74>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <do10ms+0x74>)
 80011e6:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <do10ms+0x74>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <do10ms+0x4c>
			tmo20ms = 2;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <do10ms+0x74>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <do10ms+0x6c>)
 80011f8:	7813      	ldrb	r3, [r2, #0]
 80011fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011fe:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <do10ms+0x70>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <do10ms+0x68>
			tmo100ms = 10;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <do10ms+0x70>)
 800120a:	220a      	movs	r2, #10
 800120c:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <do10ms+0x6c>)
 8001210:	7813      	ldrb	r3, [r2, #0]
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 8001218:	f000 f808 	bl	800122c <heartBeatTask>
		}
	}
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000620 	.word	0x20000620
 8001224:	20000028 	.word	0x20000028
 8001228:	20000029 	.word	0x20000029

0800122c <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <heartBeatTask+0x44>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	43db      	mvns	r3, r3
 8001236:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <heartBeatTask+0x48>)
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	4611      	mov	r1, r2
 800123c:	2201      	movs	r2, #1
 800123e:	408a      	lsls	r2, r1
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8001246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800124a:	480b      	ldr	r0, [pc, #44]	@ (8001278 <heartBeatTask+0x4c>)
 800124c:	f003 f92d 	bl	80044aa <HAL_GPIO_TogglePin>

	times++;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <heartBeatTask+0x48>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <heartBeatTask+0x48>)
 800125a:	701a      	strb	r2, [r3, #0]
	times &= 31;
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <heartBeatTask+0x48>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <heartBeatTask+0x48>)
 8001268:	701a      	strb	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000
 8001274:	20000630 	.word	0x20000630
 8001278:	40020800 	.word	0x40020800

0800127c <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af04      	add	r7, sp, #16
 8001282:	6039      	str	r1, [r7, #0]
 8001284:	4611      	mov	r1, r2
 8001286:	461a      	mov	r2, r3
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	460b      	mov	r3, r1
 800128e:	71bb      	strb	r3, [r7, #6]
 8001290:	4613      	mov	r3, r2
 8001292:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	b299      	uxth	r1, r3
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	b29a      	uxth	r2, r3
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	9002      	str	r0, [sp, #8]
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	4803      	ldr	r0, [pc, #12]	@ (80012bc <displayMemWrite+0x40>)
 80012b0:	f003 fa70 	bl	8004794 <HAL_I2C_Mem_Write>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001f4 	.word	0x200001f4

080012c0 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6039      	str	r1, [r7, #0]
 80012c8:	4611      	mov	r1, r2
 80012ca:	461a      	mov	r2, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	460b      	mov	r3, r1
 80012d2:	71bb      	strb	r3, [r7, #6]
 80012d4:	4613      	mov	r3, r2
 80012d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	b299      	uxth	r1, r3
 80012dc:	797b      	ldrb	r3, [r7, #5]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <displayMemWriteDMA+0x3c>)
 80012ee:	f003 fb4b 	bl	8004988 <HAL_I2C_Mem_Write_DMA>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001f4 	.word	0x200001f4

08001300 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af04      	add	r7, sp, #16
 8001306:	6039      	str	r1, [r7, #0]
 8001308:	4611      	mov	r1, r2
 800130a:	461a      	mov	r2, r3
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	460b      	mov	r3, r1
 8001312:	71bb      	strb	r3, [r7, #6]
 8001314:	4613      	mov	r3, r2
 8001316:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	b299      	uxth	r1, r3
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	b29a      	uxth	r2, r3
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	9002      	str	r0, [sp, #8]
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <mpuMemWrite+0x40>)
 8001334:	f003 fa2e 	bl	8004794 <HAL_I2C_Mem_Write>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001f4 	.word	0x200001f4

08001344 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
 800134a:	6039      	str	r1, [r7, #0]
 800134c:	4611      	mov	r1, r2
 800134e:	461a      	mov	r2, r3
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	460b      	mov	r3, r1
 8001356:	71bb      	strb	r3, [r7, #6]
 8001358:	4613      	mov	r3, r2
 800135a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	b299      	uxth	r1, r3
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	b29a      	uxth	r2, r3
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	b29b      	uxth	r3, r3
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <mpuMemReadDMA+0x3c>)
 8001372:	f003 fc67 	bl	8004c44 <HAL_I2C_Mem_Read_DMA>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001f4 	.word	0x200001f4

08001384 <mpuTask>:
//		}
//	}
}


void mpuTask(){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af02      	add	r7, sp, #8

//	if (IS20MS) {
//		ONMPU = TRUE;
//		IS20MS = FALSE;
//	}
	if (ONMPU) {
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <mpuTask+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <mpuTask+0x3c>
		if (mpu6050_Read()) {
 8001398:	f000 fc12 	bl	8001bc0 <mpu6050_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00e      	beq.n	80013c0 <mpuTask+0x3c>
			ONMPU = FALSE;
 80013a2:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <mpuTask+0x44>)
 80013a4:	7813      	ldrb	r3, [r2, #0]
 80013a6:	f023 0302 	bic.w	r3, r3, #2
 80013aa:	7013      	strb	r3, [r2, #0]
			mpu6050_GetData(&ax, &ay, &az, &gx, &gy, &gz);
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <mpuTask+0x48>)
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <mpuTask+0x4c>)
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <mpuTask+0x50>)
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <mpuTask+0x54>)
 80013b8:	4908      	ldr	r1, [pc, #32]	@ (80013dc <mpuTask+0x58>)
 80013ba:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <mpuTask+0x5c>)
 80013bc:	f000 fdbe 	bl	8001f3c <mpu6050_GetData>
		}
	}

}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000620 	.word	0x20000620
 80013cc:	2000062e 	.word	0x2000062e
 80013d0:	2000062c 	.word	0x2000062c
 80013d4:	2000062a 	.word	0x2000062a
 80013d8:	20000628 	.word	0x20000628
 80013dc:	20000626 	.word	0x20000626
 80013e0:	20000624 	.word	0x20000624

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e8:	f001 fc4e 	bl	8002c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ec:	f000 f86a 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f0:	f000 fb1e 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f4:	f000 fade 	bl	80019b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80013f8:	f000 f8cc 	bl	8001594 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013fc:	f000 f97e 	bl	80016fc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001400:	f000 f9aa 	bl	8001758 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001404:	f00b fde0 	bl	800cfc8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001408:	f000 fa0c 	bl	8001824 <MX_TIM2_Init>
  MX_TIM3_Init();
 800140c:	f000 fa6e 	bl	80018ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8001410:	481c      	ldr	r0, [pc, #112]	@ (8001484 <main+0xa0>)
 8001412:	f00b ff2b 	bl	800d26c <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8001416:	481c      	ldr	r0, [pc, #112]	@ (8001488 <main+0xa4>)
 8001418:	f007 fde0 	bl	8008fdc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800141c:	481b      	ldr	r0, [pc, #108]	@ (800148c <main+0xa8>)
 800141e:	f007 fddd 	bl	8008fdc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001422:	481b      	ldr	r0, [pc, #108]	@ (8001490 <main+0xac>)
 8001424:	f007 fdda 	bl	8008fdc <HAL_TIM_Base_Start_IT>


	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800142e:	4819      	ldr	r0, [pc, #100]	@ (8001494 <main+0xb0>)
 8001430:	f003 f822 	bl	8004478 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8001434:	4818      	ldr	r0, [pc, #96]	@ (8001498 <main+0xb4>)
 8001436:	f000 fe19 	bl	800206c <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 800143a:	4818      	ldr	r0, [pc, #96]	@ (800149c <main+0xb8>)
 800143c:	f000 fe06 	bl	800204c <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 8001440:	4817      	ldr	r0, [pc, #92]	@ (80014a0 <main+0xbc>)
 8001442:	f000 fdf3 	bl	800202c <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 8001446:	f000 fe21 	bl	800208c <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 800144a:	4816      	ldr	r0, [pc, #88]	@ (80014a4 <main+0xc0>)
 800144c:	f000 fb56 	bl	8001afc <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 8001450:	4815      	ldr	r0, [pc, #84]	@ (80014a8 <main+0xc4>)
 8001452:	f000 fb63 	bl	8001b1c <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 8001456:	4815      	ldr	r0, [pc, #84]	@ (80014ac <main+0xc8>)
 8001458:	f000 fb70 	bl	8001b3c <mpu6050_Attach_MemReadDMA>
	MPU6050_Init();
 800145c:	f000 fb92 	bl	8001b84 <MPU6050_Init>

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <main+0xcc>)
 8001462:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <main+0xd0>)
 8001464:	4914      	ldr	r1, [pc, #80]	@ (80014b8 <main+0xd4>)
 8001466:	4815      	ldr	r0, [pc, #84]	@ (80014bc <main+0xd8>)
 8001468:	f001 fbac 	bl	8002bc4 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <main+0xdc>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 8001472:	f7ff fe9f 	bl	80011b4 <do10ms>
		USBTask();
 8001476:	f7ff fced 	bl	8000e54 <USBTask>

		mpuTask();
 800147a:	f7ff ff83 	bl	8001384 <mpuTask>
		do10ms();
 800147e:	bf00      	nop
 8001480:	e7f7      	b.n	8001472 <main+0x8e>
 8001482:	bf00      	nop
 8001484:	08000df9 	.word	0x08000df9
 8001488:	20000308 	.word	0x20000308
 800148c:	20000350 	.word	0x20000350
 8001490:	20000398 	.word	0x20000398
 8001494:	40020800 	.word	0x40020800
 8001498:	20000621 	.word	0x20000621
 800149c:	0800127d 	.word	0x0800127d
 80014a0:	080012c1 	.word	0x080012c1
 80014a4:	20000622 	.word	0x20000622
 80014a8:	08001301 	.word	0x08001301
 80014ac:	08001345 	.word	0x08001345
 80014b0:	2000041c 	.word	0x2000041c
 80014b4:	2000051c 	.word	0x2000051c
 80014b8:	20000404 	.word	0x20000404
 80014bc:	20000410 	.word	0x20000410
 80014c0:	20000620 	.word	0x20000620

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	@ 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	@ 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00c faf4 	bl	800dac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <SystemClock_Config+0xc8>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	4a26      	ldr	r2, [pc, #152]	@ (800158c <SystemClock_Config+0xc8>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f8:	4b24      	ldr	r3, [pc, #144]	@ (800158c <SystemClock_Config+0xc8>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <SystemClock_Config+0xcc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a20      	ldr	r2, [pc, #128]	@ (8001590 <SystemClock_Config+0xcc>)
 800150e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <SystemClock_Config+0xcc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001534:	2319      	movs	r3, #25
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001538:	23c0      	movs	r3, #192	@ 0xc0
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001540:	2304      	movs	r3, #4
 8001542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f007 f8b3 	bl	80086b4 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001554:	f000 facc 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2103      	movs	r1, #3
 8001574:	4618      	mov	r0, r3
 8001576:	f007 fb15 	bl	8008ba4 <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001580:	f000 fab6 	bl	8001af0 <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3750      	adds	r7, #80	@ 0x50
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015a6:	4b52      	ldr	r3, [pc, #328]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015a8:	4a52      	ldr	r2, [pc, #328]	@ (80016f4 <MX_ADC1_Init+0x160>)
 80015aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015ac:	4b50      	ldr	r3, [pc, #320]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015b4:	4b4e      	ldr	r3, [pc, #312]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015ba:	4b4d      	ldr	r3, [pc, #308]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015c0:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c6:	4b4a      	ldr	r3, [pc, #296]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ce:	4b48      	ldr	r3, [pc, #288]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d4:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015d6:	4a48      	ldr	r2, [pc, #288]	@ (80016f8 <MX_ADC1_Init+0x164>)
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015da:	4b45      	ldr	r3, [pc, #276]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80015e0:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015e2:	2208      	movs	r2, #8
 80015e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015e6:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ee:	4b40      	ldr	r3, [pc, #256]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f4:	483e      	ldr	r0, [pc, #248]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015f6:	f001 fbdd 	bl	8002db4 <HAL_ADC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001600:	f000 fa76 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4836      	ldr	r0, [pc, #216]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 8001616:	f001 fe33 	bl	8003280 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001620:	f000 fa66 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001624:	2301      	movs	r3, #1
 8001626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001628:	2302      	movs	r3, #2
 800162a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	4619      	mov	r1, r3
 8001630:	482f      	ldr	r0, [pc, #188]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 8001632:	f001 fe25 	bl	8003280 <HAL_ADC_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800163c:	f000 fa58 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001640:	2302      	movs	r3, #2
 8001642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001644:	2303      	movs	r3, #3
 8001646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4828      	ldr	r0, [pc, #160]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 800164e:	f001 fe17 	bl	8003280 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001658:	f000 fa4a 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800165c:	2303      	movs	r3, #3
 800165e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001660:	2304      	movs	r3, #4
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4821      	ldr	r0, [pc, #132]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 800166a:	f001 fe09 	bl	8003280 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001674:	f000 fa3c 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001678:	2304      	movs	r3, #4
 800167a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800167c:	2305      	movs	r3, #5
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	481a      	ldr	r0, [pc, #104]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 8001686:	f001 fdfb 	bl	8003280 <HAL_ADC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001690:	f000 fa2e 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001694:	2305      	movs	r3, #5
 8001696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001698:	2306      	movs	r3, #6
 800169a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	4619      	mov	r1, r3
 80016a0:	4813      	ldr	r0, [pc, #76]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80016a2:	f001 fded 	bl	8003280 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016ac:	f000 fa20 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016b0:	2306      	movs	r3, #6
 80016b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016b4:	2307      	movs	r3, #7
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80016be:	f001 fddf 	bl	8003280 <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016c8:	f000 fa12 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016cc:	2307      	movs	r3, #7
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80016da:	f001 fdd1 	bl	8003280 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80016e4:	f000 fa04 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000014c 	.word	0x2000014c
 80016f4:	40012000 	.word	0x40012000
 80016f8:	0f000001 	.word	0x0f000001

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_I2C1_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	@ (8001750 <MX_I2C1_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_I2C1_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_I2C1_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_I2C1_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800171e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_I2C1_Init+0x50>)
 800173a:	f002 fed1 	bl	80044e0 <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001744:	f000 f9d4 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200001f4 	.word	0x200001f4
 8001750:	40005400 	.word	0x40005400
 8001754:	00061a80 	.word	0x00061a80

08001758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <MX_TIM1_Init+0xc4>)
 8001786:	4a26      	ldr	r2, [pc, #152]	@ (8001820 <MX_TIM1_Init+0xc8>)
 8001788:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <MX_TIM1_Init+0xc4>)
 800178c:	225f      	movs	r2, #95	@ 0x5f
 800178e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <MX_TIM1_Init+0xc4>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <MX_TIM1_Init+0xc4>)
 8001798:	22f9      	movs	r2, #249	@ 0xf9
 800179a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <MX_TIM1_Init+0xc4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ae:	481b      	ldr	r0, [pc, #108]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017b0:	f007 fbc4 	bl	8008f3c <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80017ba:	f000 f999 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	4619      	mov	r1, r3
 80017ca:	4814      	ldr	r0, [pc, #80]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017cc:	f007 fd58 	bl	8009280 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80017d6:	f000 f98b 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017ea:	f007 fe10 	bl	800940e <HAL_TIM_SlaveConfigSynchro>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80017f4:	f000 f97c 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	@ (800181c <MX_TIM1_Init+0xc4>)
 8001806:	f008 f81f 	bl	8009848 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001810:	f000 f96e 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	@ 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000308 	.word	0x20000308
 8001820:	40010000 	.word	0x40010000

08001824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001852:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 800185a:	225f      	movs	r2, #95	@ 0x5f
 800185c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001864:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001866:	f242 720f 	movw	r2, #9999	@ 0x270f
 800186a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001878:	481b      	ldr	r0, [pc, #108]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 800187a:	f007 fb5f 	bl	8008f3c <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001884:	f000 f934 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4619      	mov	r1, r3
 8001894:	4814      	ldr	r0, [pc, #80]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001896:	f007 fcf3 	bl	8009280 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80018a0:	f000 f926 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 80018b4:	f007 fdab 	bl	800940e <HAL_TIM_SlaveConfigSynchro>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018be:	f000 f917 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 80018d0:	f007 ffba 	bl	8009848 <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80018da:	f000 f909 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3730      	adds	r7, #48	@ 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000350 	.word	0x20000350

080018ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	@ 0x30
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800191a:	4a25      	ldr	r2, [pc, #148]	@ (80019b0 <MX_TIM3_Init+0xc4>)
 800191c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 800191e:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001920:	225f      	movs	r2, #95	@ 0x5f
 8001922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800192c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800193e:	481b      	ldr	r0, [pc, #108]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001940:	f007 fafc 	bl	8008f3c <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800194a:	f000 f8d1 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001952:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4619      	mov	r1, r3
 800195a:	4814      	ldr	r0, [pc, #80]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800195c:	f007 fc90 	bl	8009280 <HAL_TIM_ConfigClockSource>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001966:	f000 f8c3 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800197a:	f007 fd48 	bl	800940e <HAL_TIM_SlaveConfigSynchro>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001984:	f000 f8b4 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001996:	f007 ff57 	bl	8009848 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80019a0:	f000 f8a6 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3730      	adds	r7, #48	@ 0x30
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000398 	.word	0x20000398
 80019b0:	40000400 	.word	0x40000400

080019b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200b      	movs	r0, #11
 80019f8:	f001 ffd7 	bl	80039aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019fc:	200b      	movs	r0, #11
 80019fe:	f001 fff0 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	200c      	movs	r0, #12
 8001a08:	f001 ffcf 	bl	80039aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a0c:	200c      	movs	r0, #12
 8001a0e:	f001 ffe8 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2038      	movs	r0, #56	@ 0x38
 8001a18:	f001 ffc7 	bl	80039aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a1c:	2038      	movs	r0, #56	@ 0x38
 8001a1e:	f001 ffe0 	bl	80039e2 <HAL_NVIC_EnableIRQ>

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a26      	ldr	r2, [pc, #152]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001abc:	480b      	ldr	r0, [pc, #44]	@ (8001aec <MX_GPIO_Init+0xbc>)
 8001abe:	f002 fcdb 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4804      	ldr	r0, [pc, #16]	@ (8001aec <MX_GPIO_Init+0xbc>)
 8001adc:	f002 fb48 	bl	8004170 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020800 	.word	0x40020800

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <Error_Handler+0x8>

08001afc <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000634 	.word	0x20000634

08001b1c <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <mpu6050_Attach_MemWrite+0x1c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000638 	.word	0x20000638

08001b3c <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 8001b44:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <mpu6050_Attach_MemReadDMA+0x1c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000063c 	.word	0x2000063c

08001b5c <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <mpu6050_WriteData+0x24>)
 8001b6a:	681c      	ldr	r4, [r3, #0]
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	20d0      	movs	r0, #208	@ 0xd0
 8001b74:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000638 	.word	0x20000638

08001b84 <MPU6050_Init>:
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}


void MPU6050_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	216b      	movs	r1, #107	@ 0x6b
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ffe2 	bl	8001b5c <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	211c      	movs	r1, #28
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ffdb 	bl	8001b5c <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	211b      	movs	r1, #27
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ffd4 	bl	8001b5c <mpu6050_WriteData>

}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <mpu6050_Read>:

char mpu6050_Read(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af02      	add	r7, sp, #8
//		gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
//
//	return 1;


	if (*mpu6050_RxCplt || state == 1) {
 8001bc6:	4ba4      	ldr	r3, [pc, #656]	@ (8001e58 <mpu6050_Read+0x298>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d104      	bne.n	8001bda <mpu6050_Read+0x1a>
 8001bd0:	4ba2      	ldr	r3, [pc, #648]	@ (8001e5c <mpu6050_Read+0x29c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 81a1 	bne.w	8001f1c <mpu6050_Read+0x35c>
		*mpu6050_RxCplt = 0;  // Reset completion flag
 8001bda:	4b9f      	ldr	r3, [pc, #636]	@ (8001e58 <mpu6050_Read+0x298>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
		switch (state) {
 8001be2:	4b9e      	ldr	r3, [pc, #632]	@ (8001e5c <mpu6050_Read+0x29c>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d002      	beq.n	8001bf0 <mpu6050_Read+0x30>
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d00e      	beq.n	8001c0c <mpu6050_Read+0x4c>
 8001bee:	e195      	b.n	8001f1c <mpu6050_Read+0x35c>
		case 1:
			// Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
			state=2;
 8001bf0:	4b9a      	ldr	r3, [pc, #616]	@ (8001e5c <mpu6050_Read+0x29c>)
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	701a      	strb	r2, [r3, #0]
			//mpu6050_ReadDataDMA(Rec_Data, 14, ACCEL_XOUT_H_REG);
			HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR , ACCEL_XOUT_H_REG, 1, Rec_Data, 14);
 8001bf6:	230e      	movs	r3, #14
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	4b99      	ldr	r3, [pc, #612]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	223b      	movs	r2, #59	@ 0x3b
 8001c02:	21d0      	movs	r1, #208	@ 0xd0
 8001c04:	4897      	ldr	r0, [pc, #604]	@ (8001e64 <mpu6050_Read+0x2a4>)
 8001c06:	f003 f81d 	bl	8004c44 <HAL_I2C_Mem_Read_DMA>

			break;
 8001c0a:	e187      	b.n	8001f1c <mpu6050_Read+0x35c>
		case 2:
			state=1;
 8001c0c:	4b93      	ldr	r3, [pc, #588]	@ (8001e5c <mpu6050_Read+0x29c>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
			// Combinar bytes altos y bajos en variables de 16 bits con signo
			//Valores accelerometro
			ax = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); //primer byte  es la parte alta, segundo parte baja
 8001c12:	4b93      	ldr	r3, [pc, #588]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	4b90      	ldr	r3, [pc, #576]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b8f      	ldr	r3, [pc, #572]	@ (8001e68 <mpu6050_Read+0x2a8>)
 8001c2a:	601a      	str	r2, [r3, #0]
			ay = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001c2c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	4b8a      	ldr	r3, [pc, #552]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c38:	78db      	ldrb	r3, [r3, #3]
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b8a      	ldr	r3, [pc, #552]	@ (8001e6c <mpu6050_Read+0x2ac>)
 8001c44:	601a      	str	r2, [r3, #0]
			az = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001c46:	4b86      	ldr	r3, [pc, #536]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c48:	791b      	ldrb	r3, [r3, #4]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	4b83      	ldr	r3, [pc, #524]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c52:	795b      	ldrb	r3, [r3, #5]
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b84      	ldr	r3, [pc, #528]	@ (8001e70 <mpu6050_Read+0x2b0>)
 8001c5e:	601a      	str	r2, [r3, #0]
			//Medida temperatura
			//t = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
			//Valores del giroscopio
			gx = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001c60:	4b7f      	ldr	r3, [pc, #508]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c62:	7a1b      	ldrb	r3, [r3, #8]
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c6c:	7a5b      	ldrb	r3, [r3, #9]
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b7f      	ldr	r3, [pc, #508]	@ (8001e74 <mpu6050_Read+0x2b4>)
 8001c78:	601a      	str	r2, [r3, #0]
			gy = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001c7a:	4b79      	ldr	r3, [pc, #484]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c7c:	7a9b      	ldrb	r3, [r3, #10]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b76      	ldr	r3, [pc, #472]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c86:	7adb      	ldrb	r3, [r3, #11]
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b79      	ldr	r3, [pc, #484]	@ (8001e78 <mpu6050_Read+0x2b8>)
 8001c92:	601a      	str	r2, [r3, #0]
			gz = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001c94:	4b72      	ldr	r3, [pc, #456]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001c96:	7b1b      	ldrb	r3, [r3, #12]
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	4b70      	ldr	r3, [pc, #448]	@ (8001e60 <mpu6050_Read+0x2a0>)
 8001ca0:	7b5b      	ldrb	r3, [r3, #13]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b74      	ldr	r3, [pc, #464]	@ (8001e7c <mpu6050_Read+0x2bc>)
 8001cac:	601a      	str	r2, [r3, #0]


			if (abs(ax) <= OFFSET_AX)
 8001cae:	4b6e      	ldr	r3, [pc, #440]	@ (8001e68 <mpu6050_Read+0x2a8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001cb6:	db08      	blt.n	8001cca <mpu6050_Read+0x10a>
 8001cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8001e68 <mpu6050_Read+0x2a8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001cc0:	dc03      	bgt.n	8001cca <mpu6050_Read+0x10a>
				ax_real = 0;
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8001e80 <mpu6050_Read+0x2c0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	801a      	strh	r2, [r3, #0]
 8001cc8:	e025      	b.n	8001d16 <mpu6050_Read+0x156>
			else
				ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001cca:	4b67      	ldr	r3, [pc, #412]	@ (8001e68 <mpu6050_Read+0x2a8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd6:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001e84 <mpu6050_Read+0x2c4>
 8001cda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cde:	ee16 0a90 	vmov	r0, s13
 8001ce2:	f7fe fbdd 	bl	80004a0 <__aeabi_f2d>
 8001ce6:	a35a      	add	r3, pc, #360	@ (adr r3, 8001e50 <mpu6050_Read+0x290>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fc30 	bl	8000550 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b62      	ldr	r3, [pc, #392]	@ (8001e88 <mpu6050_Read+0x2c8>)
 8001cfe:	f7fe fc27 	bl	8000550 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe fe33 	bl	8000974 <__aeabi_d2iz>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	4b5b      	ldr	r3, [pc, #364]	@ (8001e80 <mpu6050_Read+0x2c0>)
 8001d14:	801a      	strh	r2, [r3, #0]

			if (abs(ay) <= OFFSET_AY)
 8001d16:	4b55      	ldr	r3, [pc, #340]	@ (8001e6c <mpu6050_Read+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001d1e:	db08      	blt.n	8001d32 <mpu6050_Read+0x172>
 8001d20:	4b52      	ldr	r3, [pc, #328]	@ (8001e6c <mpu6050_Read+0x2ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001d28:	dc03      	bgt.n	8001d32 <mpu6050_Read+0x172>
				ay_real = 0;
 8001d2a:	4b58      	ldr	r3, [pc, #352]	@ (8001e8c <mpu6050_Read+0x2cc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	801a      	strh	r2, [r3, #0]
 8001d30:	e025      	b.n	8001d7e <mpu6050_Read+0x1be>
			else
				ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001d32:	4b4e      	ldr	r3, [pc, #312]	@ (8001e6c <mpu6050_Read+0x2ac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001e84 <mpu6050_Read+0x2c4>
 8001d42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d46:	ee16 0a90 	vmov	r0, s13
 8001d4a:	f7fe fba9 	bl	80004a0 <__aeabi_f2d>
 8001d4e:	a340      	add	r3, pc, #256	@ (adr r3, 8001e50 <mpu6050_Read+0x290>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fbfc 	bl	8000550 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b48      	ldr	r3, [pc, #288]	@ (8001e88 <mpu6050_Read+0x2c8>)
 8001d66:	f7fe fbf3 	bl	8000550 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7fe fdff 	bl	8000974 <__aeabi_d2iz>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	4b44      	ldr	r3, [pc, #272]	@ (8001e8c <mpu6050_Read+0x2cc>)
 8001d7c:	801a      	strh	r2, [r3, #0]

			if (abs(az) <= OFFSET_AZ)
 8001d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e70 <mpu6050_Read+0x2b0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a43      	ldr	r2, [pc, #268]	@ (8001e90 <mpu6050_Read+0x2d0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	db0a      	blt.n	8001d9e <mpu6050_Read+0x1de>
 8001d88:	4b39      	ldr	r3, [pc, #228]	@ (8001e70 <mpu6050_Read+0x2b0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001d90:	4293      	cmp	r3, r2
 8001d92:	dc04      	bgt.n	8001d9e <mpu6050_Read+0x1de>
				az_real = 9.81 * MULTIPLICADORFLOAT; // en reposo debería medir ~1g hacia Z
 8001d94:	4b3f      	ldr	r3, [pc, #252]	@ (8001e94 <mpu6050_Read+0x2d4>)
 8001d96:	f240 32d5 	movw	r2, #981	@ 0x3d5
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	e025      	b.n	8001dea <mpu6050_Read+0x22a>
			else
				az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001d9e:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <mpu6050_Read+0x2b0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001e84 <mpu6050_Read+0x2c4>
 8001dae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001db2:	ee16 0a90 	vmov	r0, s13
 8001db6:	f7fe fb73 	bl	80004a0 <__aeabi_f2d>
 8001dba:	a325      	add	r3, pc, #148	@ (adr r3, 8001e50 <mpu6050_Read+0x290>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fbc6 	bl	8000550 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <mpu6050_Read+0x2c8>)
 8001dd2:	f7fe fbbd 	bl	8000550 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fdc9 	bl	8000974 <__aeabi_d2iz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <mpu6050_Read+0x2d4>)
 8001de8:	801a      	strh	r2, [r3, #0]

			// Aplicar offset y escalar a grados/segundo (centésimas)
			if (abs(gx) <= OFFSET_GX)
 8001dea:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <mpu6050_Read+0x2b4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001df2:	db08      	blt.n	8001e06 <mpu6050_Read+0x246>
 8001df4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <mpu6050_Read+0x2b4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001dfc:	dc03      	bgt.n	8001e06 <mpu6050_Read+0x246>
				gx_real = 0;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <mpu6050_Read+0x2d8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]
 8001e04:	e014      	b.n	8001e30 <mpu6050_Read+0x270>
			else
				gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <mpu6050_Read+0x2b4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e12:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001e9c <mpu6050_Read+0x2dc>
 8001e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e1a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001ea0 <mpu6050_Read+0x2e0>
 8001e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e26:	ee17 3a90 	vmov	r3, s15
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <mpu6050_Read+0x2d8>)
 8001e2e:	801a      	strh	r2, [r3, #0]

			if (abs(gy) <= OFFSET_GY)
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <mpu6050_Read+0x2b8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001e38:	db36      	blt.n	8001ea8 <mpu6050_Read+0x2e8>
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <mpu6050_Read+0x2b8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001e42:	dc31      	bgt.n	8001ea8 <mpu6050_Read+0x2e8>
				gy_real = 0;
 8001e44:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <mpu6050_Read+0x2e4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	e042      	b.n	8001ed2 <mpu6050_Read+0x312>
 8001e4c:	f3af 8000 	nop.w
 8001e50:	51eb851f 	.word	0x51eb851f
 8001e54:	40239eb8 	.word	0x40239eb8
 8001e58:	20000634 	.word	0x20000634
 8001e5c:	2000002a 	.word	0x2000002a
 8001e60:	20000664 	.word	0x20000664
 8001e64:	200001f4 	.word	0x200001f4
 8001e68:	2000064c 	.word	0x2000064c
 8001e6c:	20000650 	.word	0x20000650
 8001e70:	20000654 	.word	0x20000654
 8001e74:	20000658 	.word	0x20000658
 8001e78:	2000065c 	.word	0x2000065c
 8001e7c:	20000660 	.word	0x20000660
 8001e80:	20000640 	.word	0x20000640
 8001e84:	46800000 	.word	0x46800000
 8001e88:	40590000 	.word	0x40590000
 8001e8c:	20000642 	.word	0x20000642
 8001e90:	ffffb1e0 	.word	0xffffb1e0
 8001e94:	20000644 	.word	0x20000644
 8001e98:	20000646 	.word	0x20000646
 8001e9c:	43030000 	.word	0x43030000
 8001ea0:	42c80000 	.word	0x42c80000
 8001ea4:	20000648 	.word	0x20000648
			else
				gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <mpu6050_Read+0x364>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001f28 <mpu6050_Read+0x368>
 8001eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ebc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001f2c <mpu6050_Read+0x36c>
 8001ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec8:	ee17 3a90 	vmov	r3, s15
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <mpu6050_Read+0x370>)
 8001ed0:	801a      	strh	r2, [r3, #0]

			if (abs(gz) <= OFFSET_GZ)
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <mpu6050_Read+0x374>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001eda:	db08      	blt.n	8001eee <mpu6050_Read+0x32e>
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <mpu6050_Read+0x374>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001ee4:	dc03      	bgt.n	8001eee <mpu6050_Read+0x32e>
				gz_real = 0;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <mpu6050_Read+0x378>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	801a      	strh	r2, [r3, #0]
 8001eec:	e014      	b.n	8001f18 <mpu6050_Read+0x358>
			else
				gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <mpu6050_Read+0x374>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efa:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001f28 <mpu6050_Read+0x368>
 8001efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f02:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001f2c <mpu6050_Read+0x36c>
 8001f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f0e:	ee17 3a90 	vmov	r3, s15
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <mpu6050_Read+0x378>)
 8001f16:	801a      	strh	r2, [r3, #0]

			return 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <mpu6050_Read+0x35e>
			break;
		}
	}
	return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	2000065c 	.word	0x2000065c
 8001f28:	43030000 	.word	0x43030000
 8001f2c:	42c80000 	.word	0x42c80000
 8001f30:	20000648 	.word	0x20000648
 8001f34:	20000660 	.word	0x20000660
 8001f38:	2000064a 	.word	0x2000064a

08001f3c <mpu6050_GetData>:

void mpu6050_GetData(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
    if (ax) *ax = ax_real;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <mpu6050_GetData+0x1e>
 8001f50:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <mpu6050_GetData+0x7c>)
 8001f52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	801a      	strh	r2, [r3, #0]
    if (ay) *ay = ay_real;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <mpu6050_GetData+0x2e>
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <mpu6050_GetData+0x80>)
 8001f62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	801a      	strh	r2, [r3, #0]
    if (az) *az = az_real;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <mpu6050_GetData+0x3e>
 8001f70:	4b13      	ldr	r3, [pc, #76]	@ (8001fc0 <mpu6050_GetData+0x84>)
 8001f72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	801a      	strh	r2, [r3, #0]

    if (gx) *gx = gx_real;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <mpu6050_GetData+0x4e>
 8001f80:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <mpu6050_GetData+0x88>)
 8001f82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	801a      	strh	r2, [r3, #0]
    if (gy) *gy = gy_real;
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <mpu6050_GetData+0x5e>
 8001f90:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <mpu6050_GetData+0x8c>)
 8001f92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	801a      	strh	r2, [r3, #0]
    if (gz) *gz = gz_real;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <mpu6050_GetData+0x6e>
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <mpu6050_GetData+0x90>)
 8001fa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	801a      	strh	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000640 	.word	0x20000640
 8001fbc:	20000642 	.word	0x20000642
 8001fc0:	20000644 	.word	0x20000644
 8001fc4:	20000646 	.word	0x20000646
 8001fc8:	20000648 	.word	0x20000648
 8001fcc:	2000064a 	.word	0x2000064a

08001fd0 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <ssd1306_WriteCommand+0x20>)
 8001fec:	681c      	ldr	r4, [r3, #0]
 8001fee:	1df9      	adds	r1, r7, #7
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2078      	movs	r0, #120	@ 0x78
 8001ff6:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	20000678 	.word	0x20000678

08002004 <ssd1306_WriteData>:
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <ssd1306_WriteData+0x24>)
 8002010:	681c      	ldr	r4, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	2340      	movs	r3, #64	@ 0x40
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	2078      	movs	r0, #120	@ 0x78
 800201c:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	20000678 	.word	0x20000678

0800202c <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <ssd1306_Attach_MemWriteDMA+0x1c>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000067c 	.word	0x2000067c

0800204c <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <ssd1306_Attach_MemWrite+0x1c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000678 	.word	0x20000678

0800206c <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8002074:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000674 	.word	0x20000674

0800208c <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002090:	f7ff ff9e 	bl	8001fd0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002094:	2064      	movs	r0, #100	@ 0x64
 8002096:	f000 fe69 	bl	8002d6c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800209a:	2000      	movs	r0, #0
 800209c:	f000 f8b4 	bl	8002208 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80020a0:	2020      	movs	r0, #32
 80020a2:	f7ff ff9d 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff ff9a 	bl	8001fe0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020ac:	20b0      	movs	r0, #176	@ 0xb0
 80020ae:	f7ff ff97 	bl	8001fe0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80020b2:	20c8      	movs	r0, #200	@ 0xc8
 80020b4:	f7ff ff94 	bl	8001fe0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff ff91 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80020be:	2010      	movs	r0, #16
 80020c0:	f7ff ff8e 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80020c4:	2040      	movs	r0, #64	@ 0x40
 80020c6:	f7ff ff8b 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80020ca:	20ff      	movs	r0, #255	@ 0xff
 80020cc:	f000 f888 	bl	80021e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80020d0:	20a1      	movs	r0, #161	@ 0xa1
 80020d2:	f7ff ff85 	bl	8001fe0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80020d6:	20a6      	movs	r0, #166	@ 0xa6
 80020d8:	f7ff ff82 	bl	8001fe0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80020dc:	20a8      	movs	r0, #168	@ 0xa8
 80020de:	f7ff ff7f 	bl	8001fe0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80020e2:	203f      	movs	r0, #63	@ 0x3f
 80020e4:	f7ff ff7c 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020e8:	20a4      	movs	r0, #164	@ 0xa4
 80020ea:	f7ff ff79 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80020ee:	20d3      	movs	r0, #211	@ 0xd3
 80020f0:	f7ff ff76 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff ff73 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80020fa:	20d5      	movs	r0, #213	@ 0xd5
 80020fc:	f7ff ff70 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002100:	20f0      	movs	r0, #240	@ 0xf0
 8002102:	f7ff ff6d 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002106:	20d9      	movs	r0, #217	@ 0xd9
 8002108:	f7ff ff6a 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800210c:	2022      	movs	r0, #34	@ 0x22
 800210e:	f7ff ff67 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002112:	20da      	movs	r0, #218	@ 0xda
 8002114:	f7ff ff64 	bl	8001fe0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002118:	2012      	movs	r0, #18
 800211a:	f7ff ff61 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800211e:	20db      	movs	r0, #219	@ 0xdb
 8002120:	f7ff ff5e 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002124:	2020      	movs	r0, #32
 8002126:	f7ff ff5b 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800212a:	208d      	movs	r0, #141	@ 0x8d
 800212c:	f7ff ff58 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002130:	2014      	movs	r0, #20
 8002132:	f7ff ff55 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002136:	2001      	movs	r0, #1
 8002138:	f000 f866 	bl	8002208 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800213c:	2000      	movs	r0, #0
 800213e:	f000 f80f 	bl	8002160 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002142:	f000 f825 	bl	8002190 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002146:	4b05      	ldr	r3, [pc, #20]	@ (800215c <ssd1306_Init+0xd0>)
 8002148:	2200      	movs	r2, #0
 800214a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <ssd1306_Init+0xd0>)
 800214e:	2200      	movs	r2, #0
 8002150:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002152:	4b02      	ldr	r3, [pc, #8]	@ (800215c <ssd1306_Init+0xd0>)
 8002154:	2201      	movs	r2, #1
 8002156:	711a      	strb	r2, [r3, #4]
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000a80 	.word	0x20000a80

08002160 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <ssd1306_Fill+0x14>
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <ssd1306_Fill+0x16>
 8002174:	23ff      	movs	r3, #255	@ 0xff
 8002176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800217a:	4619      	mov	r1, r3
 800217c:	4803      	ldr	r0, [pc, #12]	@ (800218c <ssd1306_Fill+0x2c>)
 800217e:	f00b fc9f 	bl	800dac0 <memset>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000680 	.word	0x20000680

08002190 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002196:	2300      	movs	r3, #0
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	e016      	b.n	80021ca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	3b50      	subs	r3, #80	@ 0x50
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff1c 	bl	8001fe0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7ff ff19 	bl	8001fe0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80021ae:	2010      	movs	r0, #16
 80021b0:	f7ff ff16 	bl	8001fe0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	01db      	lsls	r3, r3, #7
 80021b8:	4a08      	ldr	r2, [pc, #32]	@ (80021dc <ssd1306_UpdateScreen+0x4c>)
 80021ba:	4413      	add	r3, r2
 80021bc:	2180      	movs	r1, #128	@ 0x80
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff20 	bl	8002004 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	3301      	adds	r3, #1
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2b07      	cmp	r3, #7
 80021ce:	d9e5      	bls.n	800219c <ssd1306_UpdateScreen+0xc>
    }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000680 	.word	0x20000680

080021e0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80021ea:	2381      	movs	r3, #129	@ 0x81
 80021ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fef5 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fef1 	bl	8001fe0 <ssd1306_WriteCommand>
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002218:	23af      	movs	r3, #175	@ 0xaf
 800221a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <ssd1306_SetDisplayOn+0x38>)
 800221e:	2201      	movs	r2, #1
 8002220:	715a      	strb	r2, [r3, #5]
 8002222:	e004      	b.n	800222e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002224:	23ae      	movs	r3, #174	@ 0xae
 8002226:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <ssd1306_SetDisplayOn+0x38>)
 800222a:	2200      	movs	r2, #0
 800222c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fed5 	bl	8001fe0 <ssd1306_WriteCommand>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000a80 	.word	0x20000a80

08002244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <HAL_MspInit+0x4c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a0f      	ldr	r2, [pc, #60]	@ (8002290 <HAL_MspInit+0x4c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <HAL_MspInit+0x4c>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a32      	ldr	r2, [pc, #200]	@ (800237c <HAL_ADC_MspInit+0xe8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d15e      	bne.n	8002374 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_ADC_MspInit+0xec>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	4a30      	ldr	r2, [pc, #192]	@ (8002380 <HAL_ADC_MspInit+0xec>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002380 <HAL_ADC_MspInit+0xec>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <HAL_ADC_MspInit+0xec>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a29      	ldr	r2, [pc, #164]	@ (8002380 <HAL_ADC_MspInit+0xec>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b27      	ldr	r3, [pc, #156]	@ (8002380 <HAL_ADC_MspInit+0xec>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022ee:	23ff      	movs	r3, #255	@ 0xff
 80022f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f2:	2303      	movs	r3, #3
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4820      	ldr	r0, [pc, #128]	@ (8002384 <HAL_ADC_MspInit+0xf0>)
 8002302:	f001 ff35 	bl	8004170 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 8002308:	4a20      	ldr	r2, [pc, #128]	@ (800238c <HAL_ADC_MspInit+0xf8>)
 800230a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800230c:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800231e:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 8002320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002324:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002326:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 8002328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800232c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 8002330:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002334:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002336:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 8002338:	2200      	movs	r2, #0
 800233a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 800233e:	2200      	movs	r2, #0
 8002340:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002342:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002348:	480f      	ldr	r0, [pc, #60]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 800234a:	f001 fb65 	bl	8003a18 <HAL_DMA_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002354:	f7ff fbcc 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0b      	ldr	r2, [pc, #44]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 800235c:	639a      	str	r2, [r3, #56]	@ 0x38
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_ADC_MspInit+0xf4>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2012      	movs	r0, #18
 800236a:	f001 fb1e 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800236e:	2012      	movs	r0, #18
 8002370:	f001 fb37 	bl	80039e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	@ 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40012000 	.word	0x40012000
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000
 8002388:	20000194 	.word	0x20000194
 800238c:	40026410 	.word	0x40026410

08002390 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	@ 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a4f      	ldr	r2, [pc, #316]	@ (80024ec <HAL_I2C_MspInit+0x15c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f040 8097 	bne.w	80024e2 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	4b4d      	ldr	r3, [pc, #308]	@ (80024f0 <HAL_I2C_MspInit+0x160>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023bc:	4a4c      	ldr	r2, [pc, #304]	@ (80024f0 <HAL_I2C_MspInit+0x160>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c4:	4b4a      	ldr	r3, [pc, #296]	@ (80024f0 <HAL_I2C_MspInit+0x160>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d0:	23c0      	movs	r3, #192	@ 0xc0
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d4:	2312      	movs	r3, #18
 80023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e0:	2304      	movs	r3, #4
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4842      	ldr	r0, [pc, #264]	@ (80024f4 <HAL_I2C_MspInit+0x164>)
 80023ec:	f001 fec0 	bl	8004170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	4b3e      	ldr	r3, [pc, #248]	@ (80024f0 <HAL_I2C_MspInit+0x160>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	4a3d      	ldr	r2, [pc, #244]	@ (80024f0 <HAL_I2C_MspInit+0x160>)
 80023fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002400:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <HAL_I2C_MspInit+0x160>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800240c:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 800240e:	4a3b      	ldr	r2, [pc, #236]	@ (80024fc <HAL_I2C_MspInit+0x16c>)
 8002410:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002412:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002414:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002418:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800241a:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002420:	4b35      	ldr	r3, [pc, #212]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002426:	4b34      	ldr	r3, [pc, #208]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002428:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800242c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800242e:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002434:	4b30      	ldr	r3, [pc, #192]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800243a:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002440:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002446:	4b2c      	ldr	r3, [pc, #176]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800244c:	482a      	ldr	r0, [pc, #168]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 800244e:	f001 fae3 	bl	8003a18 <HAL_DMA_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002458:	f7ff fb4a 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a26      	ldr	r2, [pc, #152]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002460:	639a      	str	r2, [r3, #56]	@ 0x38
 8002462:	4a25      	ldr	r2, [pc, #148]	@ (80024f8 <HAL_I2C_MspInit+0x168>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002468:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 800246a:	4a26      	ldr	r2, [pc, #152]	@ (8002504 <HAL_I2C_MspInit+0x174>)
 800246c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002474:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 8002476:	2240      	movs	r2, #64	@ 0x40
 8002478:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247a:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 8002482:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002486:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002488:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248e:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800249a:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a0:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80024a6:	4816      	ldr	r0, [pc, #88]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 80024a8:	f001 fab6 	bl	8003a18 <HAL_DMA_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80024b2:	f7ff fb1d 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 80024ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80024bc:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <HAL_I2C_MspInit+0x170>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	201f      	movs	r0, #31
 80024c8:	f001 fa6f 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80024cc:	201f      	movs	r0, #31
 80024ce:	f001 fa88 	bl	80039e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	2020      	movs	r0, #32
 80024d8:	f001 fa67 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80024dc:	2020      	movs	r0, #32
 80024de:	f001 fa80 	bl	80039e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	@ 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40005400 	.word	0x40005400
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020400 	.word	0x40020400
 80024f8:	20000248 	.word	0x20000248
 80024fc:	40026010 	.word	0x40026010
 8002500:	200002a8 	.word	0x200002a8
 8002504:	40026028 	.word	0x40026028

08002508 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a36      	ldr	r2, [pc, #216]	@ (80025f0 <HAL_TIM_Base_MspInit+0xe8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d12e      	bne.n	8002578 <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	4b35      	ldr	r3, [pc, #212]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	4a34      	ldr	r2, [pc, #208]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6453      	str	r3, [r2, #68]	@ 0x44
 800252a:	4b32      	ldr	r3, [pc, #200]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2018      	movs	r0, #24
 800253c:	f001 fa35 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002540:	2018      	movs	r0, #24
 8002542:	f001 fa4e 	bl	80039e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2019      	movs	r0, #25
 800254c:	f001 fa2d 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002550:	2019      	movs	r0, #25
 8002552:	f001 fa46 	bl	80039e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	201a      	movs	r0, #26
 800255c:	f001 fa25 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002560:	201a      	movs	r0, #26
 8002562:	f001 fa3e 	bl	80039e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	201b      	movs	r0, #27
 800256c:	f001 fa1d 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002570:	201b      	movs	r0, #27
 8002572:	f001 fa36 	bl	80039e2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002576:	e036      	b.n	80025e6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002580:	d116      	bne.n	80025b0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	4a1a      	ldr	r2, [pc, #104]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6413      	str	r3, [r2, #64]	@ 0x40
 8002592:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	201c      	movs	r0, #28
 80025a4:	f001 fa01 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025a8:	201c      	movs	r0, #28
 80025aa:	f001 fa1a 	bl	80039e2 <HAL_NVIC_EnableIRQ>
}
 80025ae:	e01a      	b.n	80025e6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a10      	ldr	r2, [pc, #64]	@ (80025f8 <HAL_TIM_Base_MspInit+0xf0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d115      	bne.n	80025e6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	4a0c      	ldr	r2, [pc, #48]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ca:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	201d      	movs	r0, #29
 80025dc:	f001 f9e5 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025e0:	201d      	movs	r0, #29
 80025e2:	f001 f9fe 	bl	80039e2 <HAL_NVIC_EnableIRQ>
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40000400 	.word	0x40000400

080025fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <NMI_Handler+0x4>

08002604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <MemManage_Handler+0x4>

08002614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <UsageFault_Handler+0x4>

08002624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002652:	f000 fb6b 	bl	8002d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <DMA1_Stream0_IRQHandler+0x10>)
 8002662:	f001 fb01 	bl	8003c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000248 	.word	0x20000248

08002670 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <DMA1_Stream1_IRQHandler+0x10>)
 8002676:	f001 faf7 	bl	8003c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200002a8 	.word	0x200002a8

08002684 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <ADC_IRQHandler+0x10>)
 800268a:	f000 fbd6 	bl	8002e3a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000014c 	.word	0x2000014c

08002698 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800269e:	f006 fcff 	bl	80090a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000308 	.word	0x20000308

080026ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026b2:	f006 fcf5 	bl	80090a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000308 	.word	0x20000308

080026c0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80026c6:	f006 fceb 	bl	80090a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000308 	.word	0x20000308

080026d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <TIM1_CC_IRQHandler+0x10>)
 80026da:	f006 fce1 	bl	80090a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000308 	.word	0x20000308

080026e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <TIM2_IRQHandler+0x10>)
 80026ee:	f006 fcd7 	bl	80090a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000350 	.word	0x20000350

080026fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <TIM3_IRQHandler+0x10>)
 8002702:	f006 fccd 	bl	80090a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000398 	.word	0x20000398

08002710 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <I2C1_EV_IRQHandler+0x10>)
 8002716:	f002 fc25 	bl	8004f64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200001f4 	.word	0x200001f4

08002724 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <I2C1_ER_IRQHandler+0x10>)
 800272a:	f002 fd8c 	bl	8005246 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200001f4 	.word	0x200001f4

08002738 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <DMA2_Stream0_IRQHandler+0x10>)
 800273e:	f001 fa93 	bl	8003c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000194 	.word	0x20000194

0800274c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <OTG_FS_IRQHandler+0x10>)
 8002752:	f004 fea1 	bl	8007498 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20001370 	.word	0x20001370

08002760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <SystemInit+0x20>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	4a05      	ldr	r2, [pc, #20]	@ (8002780 <SystemInit+0x20>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
 8002790:	4613      	mov	r3, r2
 8002792:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8002794:	78bb      	ldrb	r3, [r7, #2]
 8002796:	3301      	adds	r3, #1
 8002798:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	795a      	ldrb	r2, [r3, #5]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	795b      	ldrb	r3, [r3, #5]
 80027b0:	1c59      	adds	r1, r3, #1
 80027b2:	b2c8      	uxtb	r0, r1
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	7148      	strb	r0, [r1, #5]
 80027b8:	4413      	add	r3, r2
 80027ba:	2255      	movs	r2, #85	@ 0x55
 80027bc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	795a      	ldrb	r2, [r3, #5]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	799b      	ldrb	r3, [r3, #6]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	795b      	ldrb	r3, [r3, #5]
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	b2c8      	uxtb	r0, r1
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	7148      	strb	r0, [r1, #5]
 80027de:	4413      	add	r3, r2
 80027e0:	224e      	movs	r2, #78	@ 0x4e
 80027e2:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	795a      	ldrb	r2, [r3, #5]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	799b      	ldrb	r3, [r3, #6]
 80027ec:	4013      	ands	r3, r2
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	795b      	ldrb	r3, [r3, #5]
 80027fc:	1c59      	adds	r1, r3, #1
 80027fe:	b2c8      	uxtb	r0, r1
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	7148      	strb	r0, [r1, #5]
 8002804:	4413      	add	r3, r2
 8002806:	2245      	movs	r2, #69	@ 0x45
 8002808:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	795a      	ldrb	r2, [r3, #5]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	799b      	ldrb	r3, [r3, #6]
 8002812:	4013      	ands	r3, r2
 8002814:	b2da      	uxtb	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	795b      	ldrb	r3, [r3, #5]
 8002822:	1c59      	adds	r1, r3, #1
 8002824:	b2c8      	uxtb	r0, r1
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	7148      	strb	r0, [r1, #5]
 800282a:	4413      	add	r3, r2
 800282c:	2252      	movs	r2, #82	@ 0x52
 800282e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	795a      	ldrb	r2, [r3, #5]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	799b      	ldrb	r3, [r3, #6]
 8002838:	4013      	ands	r3, r2
 800283a:	b2da      	uxtb	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	795b      	ldrb	r3, [r3, #5]
 8002848:	1c59      	adds	r1, r3, #1
 800284a:	b2c8      	uxtb	r0, r1
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	7148      	strb	r0, [r1, #5]
 8002850:	4413      	add	r3, r2
 8002852:	78ba      	ldrb	r2, [r7, #2]
 8002854:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	795a      	ldrb	r2, [r3, #5]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	799b      	ldrb	r3, [r3, #6]
 800285e:	4013      	ands	r3, r2
 8002860:	b2da      	uxtb	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	795b      	ldrb	r3, [r3, #5]
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	b2c8      	uxtb	r0, r1
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	7148      	strb	r0, [r1, #5]
 8002876:	4413      	add	r3, r2
 8002878:	223a      	movs	r2, #58	@ 0x3a
 800287a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	795a      	ldrb	r2, [r3, #5]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	799b      	ldrb	r3, [r3, #6]
 8002884:	4013      	ands	r3, r2
 8002886:	b2da      	uxtb	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	795b      	ldrb	r3, [r3, #5]
 8002894:	1c59      	adds	r1, r3, #1
 8002896:	b2c8      	uxtb	r0, r1
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	7148      	strb	r0, [r1, #5]
 800289c:	4413      	add	r3, r2
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	795a      	ldrb	r2, [r3, #5]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	799b      	ldrb	r3, [r3, #6]
 80028aa:	4013      	ands	r3, r2
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2207      	movs	r2, #7
 80028b6:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7a5a      	ldrb	r2, [r3, #9]
 80028bc:	78b9      	ldrb	r1, [r7, #2]
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	404b      	eors	r3, r1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	4053      	eors	r3, r2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7a5b      	ldrb	r3, [r3, #9]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	79db      	ldrb	r3, [r3, #7]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	795b      	ldrb	r3, [r3, #5]
 8002902:	1c59      	adds	r1, r3, #1
 8002904:	b2c8      	uxtb	r0, r1
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	7148      	strb	r0, [r1, #5]
 800290a:	4413      	add	r3, r2
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	795a      	ldrb	r2, [r3, #5]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	799b      	ldrb	r3, [r3, #6]
 8002918:	4013      	ands	r3, r2
 800291a:	b2da      	uxtb	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7a5a      	ldrb	r2, [r3, #9]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	4053      	eors	r3, r2
 8002928:	b2da      	uxtb	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7a5b      	ldrb	r3, [r3, #9]
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 800293e:	b490      	push	{r4, r7}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 800294c:	e02c      	b.n	80029a8 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	79db      	ldrb	r3, [r3, #7]
 8002952:	3301      	adds	r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	441a      	add	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6819      	ldr	r1, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	795b      	ldrb	r3, [r3, #5]
 800296c:	1c58      	adds	r0, r3, #1
 800296e:	b2c4      	uxtb	r4, r0
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	7144      	strb	r4, [r0, #5]
 8002974:	440b      	add	r3, r1
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	795a      	ldrb	r2, [r3, #5]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	799b      	ldrb	r3, [r3, #6]
 8002982:	4013      	ands	r3, r2
 8002984:	b2da      	uxtb	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	73fa      	strb	r2, [r7, #15]
 8002994:	461a      	mov	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	4413      	add	r3, r2
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7a5b      	ldrb	r3, [r3, #9]
 80029a0:	4053      	eors	r3, r2
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ca      	bne.n	800294e <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7a5b      	ldrb	r3, [r3, #9]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc90      	pop	{r4, r7}
 80029c4:	4770      	bx	lr
	...

080029c8 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	795b      	ldrb	r3, [r3, #5]
 80029d8:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 80029da:	e0e4      	b.n	8002ba6 <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 80029dc:	4b78      	ldr	r3, [pc, #480]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b07      	cmp	r3, #7
 80029e2:	f200 80c9 	bhi.w	8002b78 <unerPrtcl_DecodeHeader+0x1b0>
 80029e6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ec <unerPrtcl_DecodeHeader+0x24>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	08002a0d 	.word	0x08002a0d
 80029f0:	08002a27 	.word	0x08002a27
 80029f4:	08002a65 	.word	0x08002a65
 80029f8:	08002a91 	.word	0x08002a91
 80029fc:	08002abd 	.word	0x08002abd
 8002a00:	08002ad3 	.word	0x08002ad3
 8002a04:	08002b79 	.word	0x08002b79
 8002a08:	08002b35 	.word	0x08002b35
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	7912      	ldrb	r2, [r2, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b55      	cmp	r3, #85	@ 0x55
 8002a1a:	f040 80b1 	bne.w	8002b80 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 8002a1e:	4b68      	ldr	r3, [pc, #416]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
                }
            break;
 8002a24:	e0ac      	b.n	8002b80 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	7912      	ldrb	r2, [r2, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b4e      	cmp	r3, #78	@ 0x4e
 8002a34:	d103      	bne.n	8002a3e <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8002a36:	4b62      	ldr	r3, [pc, #392]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a38:	2202      	movs	r2, #2
 8002a3a:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8002a3c:	e0a2      	b.n	8002b84 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	7912      	ldrb	r2, [r2, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b55      	cmp	r3, #85	@ 0x55
 8002a4c:	f000 809a 	beq.w	8002b84 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 8002a50:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	711a      	strb	r2, [r3, #4]
            break;
 8002a62:	e08f      	b.n	8002b84 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	7912      	ldrb	r2, [r2, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b45      	cmp	r3, #69	@ 0x45
 8002a72:	d103      	bne.n	8002a7c <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8002a74:	4b52      	ldr	r3, [pc, #328]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a76:	2203      	movs	r2, #3
 8002a78:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002a7a:	e086      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002a7c:	4b50      	ldr	r3, [pc, #320]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	711a      	strb	r2, [r3, #4]
            break;
 8002a8e:	e07c      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	7912      	ldrb	r2, [r2, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b52      	cmp	r3, #82	@ 0x52
 8002a9e:	d103      	bne.n	8002aa8 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 8002aa0:	4b47      	ldr	r3, [pc, #284]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002aa6:	e070      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002aa8:	4b45      	ldr	r3, [pc, #276]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	791b      	ldrb	r3, [r3, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	711a      	strb	r2, [r3, #4]
            break;
 8002aba:	e066      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	7912      	ldrb	r2, [r2, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8002aca:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002acc:	2205      	movs	r2, #5
 8002ace:	701a      	strb	r2, [r3, #0]
            break;
 8002ad0:	e05b      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	7912      	ldrb	r2, [r2, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b3a      	cmp	r3, #58	@ 0x3a
 8002ae0:	d11e      	bne.n	8002b20 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 8002ae2:	4b37      	ldr	r3, [pc, #220]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	3301      	adds	r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7a1a      	ldrb	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	799b      	ldrb	r3, [r3, #6]
 8002afc:	4013      	ands	r3, r2
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7a5a      	ldrb	r2, [r3, #9]
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	4053      	eors	r3, r2
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002b1e:	e034      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002b20:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	791b      	ldrb	r3, [r3, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	711a      	strb	r2, [r3, #4]
            break;
 8002b32:	e02a      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7a5a      	ldrb	r2, [r3, #9]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	7909      	ldrb	r1, [r1, #4]
 8002b4c:	440b      	add	r3, r1
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4053      	eors	r3, r2
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8002b58:	e016      	b.n	8002b88 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	7912      	ldrb	r2, [r2, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	781a      	ldrb	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7a5b      	ldrb	r3, [r3, #9]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d109      	bne.n	8002b88 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e01d      	b.n	8002bb4 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8002b78:	4b11      	ldr	r3, [pc, #68]	@ (8002bc0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
            break;
 8002b7e:	e004      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002b80:	bf00      	nop
 8002b82:	e002      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002b84:	bf00      	nop
 8002b86:	e000      	b.n	8002b8a <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002b88:	bf00      	nop
        }
        dataRx->indexR++;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	791b      	ldrb	r3, [r3, #4]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	791a      	ldrb	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	799b      	ldrb	r3, [r3, #6]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	7bba      	ldrb	r2, [r7, #14]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f47f af15 	bne.w	80029dc <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	20000a86 	.word	0x20000a86

08002bc4 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	22ff      	movs	r2, #255	@ 0xff
 8002bf4:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2200      	movs	r2, #0
 8002c06:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	22ff      	movs	r2, #255	@ 0xff
 8002c1e:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	725a      	strb	r2, [r3, #9]

}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c38:	f7ff fd92 	bl	8002760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c3c:	480c      	ldr	r0, [pc, #48]	@ (8002c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c3e:	490d      	ldr	r1, [pc, #52]	@ (8002c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c44:	e002      	b.n	8002c4c <LoopCopyDataInit>

08002c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4a:	3304      	adds	r3, #4

08002c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c50:	d3f9      	bcc.n	8002c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c54:	4c0a      	ldr	r4, [pc, #40]	@ (8002c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c58:	e001      	b.n	8002c5e <LoopFillZerobss>

08002c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c5c:	3204      	adds	r2, #4

08002c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c60:	d3fb      	bcc.n	8002c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c62:	f00a ff35 	bl	800dad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c66:	f7fe fbbd 	bl	80013e4 <main>
  bx  lr    
 8002c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c74:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002c78:	0800dbb8 	.word	0x0800dbb8
  ldr r2, =_sbss
 8002c7c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002c80:	20001a74 	.word	0x20001a74

08002c84 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c84:	e7fe      	b.n	8002c84 <DMA1_Stream2_IRQHandler>
	...

08002c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc8 <HAL_Init+0x40>)
 8002c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc8 <HAL_Init+0x40>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a07      	ldr	r2, [pc, #28]	@ (8002cc8 <HAL_Init+0x40>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f000 fe6f 	bl	8003994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb6:	200f      	movs	r0, #15
 8002cb8:	f000 f808 	bl	8002ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cbc:	f7ff fac2 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00

08002ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <HAL_InitTick+0x54>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_InitTick+0x58>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fe87 	bl	80039fe <HAL_SYSTICK_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00e      	b.n	8002d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	d80a      	bhi.n	8002d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d00:	2200      	movs	r2, #0
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f000 fe4f 	bl	80039aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d0c:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <HAL_InitTick+0x5c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2000002c 	.word	0x2000002c
 8002d24:	20000034 	.word	0x20000034
 8002d28:	20000030 	.word	0x20000030

08002d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_IncTick+0x20>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_IncTick+0x24>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <HAL_IncTick+0x24>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000034 	.word	0x20000034
 8002d50:	20000a88 	.word	0x20000a88

08002d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return uwTick;
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <HAL_GetTick+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000a88 	.word	0x20000a88

08002d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff ffee 	bl	8002d54 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d005      	beq.n	8002d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d86:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_Delay+0x44>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d92:	bf00      	nop
 8002d94:	f7ff ffde 	bl	8002d54 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d8f7      	bhi.n	8002d94 <HAL_Delay+0x28>
  {
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000034 	.word	0x20000034

08002db4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e033      	b.n	8002e32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fa5e 	bl	8002294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d118      	bne.n	8002e24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dfa:	f023 0302 	bic.w	r3, r3, #2
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fb6c 	bl	80034e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	f043 0201 	orr.w	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e22:	e001      	b.n	8002e28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d049      	beq.n	8002f04 <HAL_ADC_IRQHandler+0xca>
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d046      	beq.n	8002f04 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d12b      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d127      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d119      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0220 	bic.w	r2, r2, #32
 8002ece:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fd fefb 	bl	8000cf0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0212 	mvn.w	r2, #18
 8002f02:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f12:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d057      	beq.n	8002fca <HAL_ADC_IRQHandler+0x190>
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d054      	beq.n	8002fca <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d139      	bne.n	8002fba <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d12b      	bne.n	8002fba <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d124      	bne.n	8002fba <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11d      	bne.n	8002fba <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d119      	bne.n	8002fba <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f94:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fc10 	bl	80037e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 020c 	mvn.w	r2, #12
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d017      	beq.n	8003010 <HAL_ADC_IRQHandler+0x1d6>
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d014      	beq.n	8003010 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10d      	bne.n	8003010 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f929 	bl	8003258 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f06f 0201 	mvn.w	r2, #1
 800300e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800301e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <HAL_ADC_IRQHandler+0x218>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003030:	f043 0202 	orr.w	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0220 	mvn.w	r2, #32
 8003040:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f912 	bl	800326c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0220 	mvn.w	r2, #32
 8003050:	601a      	str	r2, [r3, #0]
  }
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_ADC_Start_DMA+0x22>
 800307a:	2302      	movs	r3, #2
 800307c:	e0d0      	b.n	8003220 <HAL_ADC_Start_DMA+0x1c4>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d018      	beq.n	80030c6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030a4:	4b60      	ldr	r3, [pc, #384]	@ (8003228 <HAL_ADC_Start_DMA+0x1cc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a60      	ldr	r2, [pc, #384]	@ (800322c <HAL_ADC_Start_DMA+0x1d0>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0c9a      	lsrs	r2, r3, #18
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80030b8:	e002      	b.n	80030c0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3b01      	subs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f9      	bne.n	80030ba <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030d4:	d107      	bne.n	80030e6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030e4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	f040 8088 	bne.w	8003206 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003120:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003134:	d106      	bne.n	8003144 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	f023 0206 	bic.w	r2, r3, #6
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44
 8003142:	e002      	b.n	800314a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003152:	4b37      	ldr	r3, [pc, #220]	@ (8003230 <HAL_ADC_Start_DMA+0x1d4>)
 8003154:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315a:	4a36      	ldr	r2, [pc, #216]	@ (8003234 <HAL_ADC_Start_DMA+0x1d8>)
 800315c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	4a35      	ldr	r2, [pc, #212]	@ (8003238 <HAL_ADC_Start_DMA+0x1dc>)
 8003164:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316a:	4a34      	ldr	r2, [pc, #208]	@ (800323c <HAL_ADC_Start_DMA+0x1e0>)
 800316c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003176:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003186:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003196:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	334c      	adds	r3, #76	@ 0x4c
 80031a2:	4619      	mov	r1, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f000 fce4 	bl	8003b74 <HAL_DMA_Start_IT>
 80031ac:	4603      	mov	r3, r0
 80031ae:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d129      	bne.n	800321e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	e020      	b.n	800321e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a17      	ldr	r2, [pc, #92]	@ (8003240 <HAL_ADC_Start_DMA+0x1e4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d11b      	bne.n	800321e <HAL_ADC_Start_DMA+0x1c2>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d114      	bne.n	800321e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	e00b      	b.n	800321e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	f043 0210 	orr.w	r2, r3, #16
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f043 0201 	orr.w	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800321e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	2000002c 	.word	0x2000002c
 800322c:	431bde83 	.word	0x431bde83
 8003230:	40012300 	.word	0x40012300
 8003234:	080036dd 	.word	0x080036dd
 8003238:	08003797 	.word	0x08003797
 800323c:	080037b3 	.word	0x080037b3
 8003240:	40012000 	.word	0x40012000

08003244 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1c>
 8003298:	2302      	movs	r3, #2
 800329a:	e113      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x244>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b09      	cmp	r3, #9
 80032aa:	d925      	bls.n	80032f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68d9      	ldr	r1, [r3, #12]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	3b1e      	subs	r3, #30
 80032c2:	2207      	movs	r2, #7
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43da      	mvns	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	400a      	ands	r2, r1
 80032d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68d9      	ldr	r1, [r3, #12]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	4603      	mov	r3, r0
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4403      	add	r3, r0
 80032ea:	3b1e      	subs	r3, #30
 80032ec:	409a      	lsls	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	e022      	b.n	800333e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6919      	ldr	r1, [r3, #16]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	2207      	movs	r2, #7
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	400a      	ands	r2, r1
 800331a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	4603      	mov	r3, r0
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4403      	add	r3, r0
 8003334:	409a      	lsls	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b06      	cmp	r3, #6
 8003344:	d824      	bhi.n	8003390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	3b05      	subs	r3, #5
 8003358:	221f      	movs	r2, #31
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	400a      	ands	r2, r1
 8003366:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	4618      	mov	r0, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b05      	subs	r3, #5
 8003382:	fa00 f203 	lsl.w	r2, r0, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	635a      	str	r2, [r3, #52]	@ 0x34
 800338e:	e04c      	b.n	800342a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d824      	bhi.n	80033e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	3b23      	subs	r3, #35	@ 0x23
 80033aa:	221f      	movs	r2, #31
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43da      	mvns	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	400a      	ands	r2, r1
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	3b23      	subs	r3, #35	@ 0x23
 80033d4:	fa00 f203 	lsl.w	r2, r0, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
 80033e0:	e023      	b.n	800342a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3b41      	subs	r3, #65	@ 0x41
 80033f4:	221f      	movs	r2, #31
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43da      	mvns	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	400a      	ands	r2, r1
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	4618      	mov	r0, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	3b41      	subs	r3, #65	@ 0x41
 800341e:	fa00 f203 	lsl.w	r2, r0, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800342a:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <HAL_ADC_ConfigChannel+0x250>)
 800342c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a28      	ldr	r2, [pc, #160]	@ (80034d4 <HAL_ADC_ConfigChannel+0x254>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d10f      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x1d8>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b12      	cmp	r3, #18
 800343e:	d10b      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1d      	ldr	r2, [pc, #116]	@ (80034d4 <HAL_ADC_ConfigChannel+0x254>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d12b      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x23a>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <HAL_ADC_ConfigChannel+0x258>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x1f4>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b11      	cmp	r3, #17
 8003472:	d122      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a11      	ldr	r2, [pc, #68]	@ (80034d8 <HAL_ADC_ConfigChannel+0x258>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d111      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003496:	4b11      	ldr	r3, [pc, #68]	@ (80034dc <HAL_ADC_ConfigChannel+0x25c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a11      	ldr	r2, [pc, #68]	@ (80034e0 <HAL_ADC_ConfigChannel+0x260>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	0c9a      	lsrs	r2, r3, #18
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034ac:	e002      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f9      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012300 	.word	0x40012300
 80034d4:	40012000 	.word	0x40012000
 80034d8:	10000012 	.word	0x10000012
 80034dc:	2000002c 	.word	0x2000002c
 80034e0:	431bde83 	.word	0x431bde83

080034e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ec:	4b79      	ldr	r3, [pc, #484]	@ (80036d4 <ADC_Init+0x1f0>)
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	021a      	lsls	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800353c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800355e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	4a58      	ldr	r2, [pc, #352]	@ (80036d8 <ADC_Init+0x1f4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800358a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6899      	ldr	r1, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6899      	ldr	r1, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	e00f      	b.n	80035e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0202 	bic.w	r2, r2, #2
 80035f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6899      	ldr	r1, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7e1b      	ldrb	r3, [r3, #24]
 80035fc:	005a      	lsls	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800362e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	3b01      	subs	r3, #1
 800363c:	035a      	lsls	r2, r3, #13
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	e007      	b.n	8003658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003656:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	3b01      	subs	r3, #1
 8003674:	051a      	lsls	r2, r3, #20
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800368c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800369a:	025a      	lsls	r2, r3, #9
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6899      	ldr	r1, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	029a      	lsls	r2, r3, #10
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40012300 	.word	0x40012300
 80036d8:	0f000001 	.word	0x0f000001

080036dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d13c      	bne.n	8003770 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d12b      	bne.n	8003768 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003714:	2b00      	cmp	r3, #0
 8003716:	d127      	bne.n	8003768 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003722:	2b00      	cmp	r3, #0
 8003724:	d006      	beq.n	8003734 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003730:	2b00      	cmp	r3, #0
 8003732:	d119      	bne.n	8003768 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0220 	bic.w	r2, r2, #32
 8003742:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7fd fac1 	bl	8000cf0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800376e:	e00e      	b.n	800378e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff fd75 	bl	800326c <HAL_ADC_ErrorCallback>
}
 8003782:	e004      	b.n	800378e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff fd4d 	bl	8003244 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	@ 0x40
 80037c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff fd4a 	bl	800326c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4907      	ldr	r1, [pc, #28]	@ (8003890 <__NVIC_EnableIRQ+0x38>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db0a      	blt.n	80038be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	490c      	ldr	r1, [pc, #48]	@ (80038e0 <__NVIC_SetPriority+0x4c>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038bc:	e00a      	b.n	80038d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4908      	ldr	r1, [pc, #32]	@ (80038e4 <__NVIC_SetPriority+0x50>)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3b04      	subs	r3, #4
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	761a      	strb	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	@ 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f1c3 0307 	rsb	r3, r3, #7
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf28      	it	cs
 8003906:	2304      	movcs	r3, #4
 8003908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3304      	adds	r3, #4
 800390e:	2b06      	cmp	r3, #6
 8003910:	d902      	bls.n	8003918 <NVIC_EncodePriority+0x30>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3b03      	subs	r3, #3
 8003916:	e000      	b.n	800391a <NVIC_EncodePriority+0x32>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003930:	f04f 31ff 	mov.w	r1, #4294967295
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43d9      	mvns	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	4313      	orrs	r3, r2
         );
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	@ 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003960:	d301      	bcc.n	8003966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003962:	2301      	movs	r3, #1
 8003964:	e00f      	b.n	8003986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003966:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <SysTick_Config+0x40>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396e:	210f      	movs	r1, #15
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	f7ff ff8e 	bl	8003894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003978:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <SysTick_Config+0x40>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397e:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <SysTick_Config+0x40>)
 8003980:	2207      	movs	r2, #7
 8003982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	e000e010 	.word	0xe000e010

08003994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ff29 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4603      	mov	r3, r0
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039bc:	f7ff ff3e 	bl	800383c <__NVIC_GetPriorityGrouping>
 80039c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7ff ff8e 	bl	80038e8 <NVIC_EncodePriority>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff5d 	bl	8003894 <__NVIC_SetPriority>
}
 80039da:	bf00      	nop
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff31 	bl	8003858 <__NVIC_EnableIRQ>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ffa2 	bl	8003950 <SysTick_Config>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a24:	f7ff f996 	bl	8002d54 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e099      	b.n	8003b68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a54:	e00f      	b.n	8003a76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a56:	f7ff f97d 	bl	8002d54 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d908      	bls.n	8003a76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e078      	b.n	8003b68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e8      	bne.n	8003a56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4b38      	ldr	r3, [pc, #224]	@ (8003b70 <HAL_DMA_Init+0x158>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d107      	bne.n	8003ae0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0307 	bic.w	r3, r3, #7
 8003af6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d117      	bne.n	8003b3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 faab 	bl	8004078 <DMA_CheckFifoParam>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b36:	2301      	movs	r3, #1
 8003b38:	e016      	b.n	8003b68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa62 	bl	800400c <DMA_CalcBaseAndBitshift>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	223f      	movs	r2, #63	@ 0x3f
 8003b52:	409a      	lsls	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	f010803f 	.word	0xf010803f

08003b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_DMA_Start_IT+0x26>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e040      	b.n	8003c1c <HAL_DMA_Start_IT+0xa8>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d12f      	bne.n	8003c0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f9f4 	bl	8003fb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bcc:	223f      	movs	r2, #63	@ 0x3f
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0216 	orr.w	r2, r2, #22
 8003be2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0208 	orr.w	r2, r2, #8
 8003bfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e005      	b.n	8003c1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
 8003c18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d004      	beq.n	8003c42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2280      	movs	r2, #128	@ 0x80
 8003c3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00c      	b.n	8003c5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2205      	movs	r2, #5
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c74:	4b8e      	ldr	r3, [pc, #568]	@ (8003eb0 <HAL_DMA_IRQHandler+0x248>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a8e      	ldr	r2, [pc, #568]	@ (8003eb4 <HAL_DMA_IRQHandler+0x24c>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0a9b      	lsrs	r3, r3, #10
 8003c80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c92:	2208      	movs	r2, #8
 8003c94:	409a      	lsls	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01a      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0204 	bic.w	r2, r2, #4
 8003cba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d012      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d02:	f043 0202 	orr.w	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	2204      	movs	r2, #4
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d012      	beq.n	8003d40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	f043 0204 	orr.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	2210      	movs	r2, #16
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d043      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d03c      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	2210      	movs	r2, #16
 8003d64:	409a      	lsls	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d024      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
 8003d96:	e01f      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01b      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
 8003da8:	e016      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0208 	bic.w	r2, r2, #8
 8003dc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	2220      	movs	r2, #32
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 808f 	beq.w	8003f08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8087 	beq.w	8003f08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfe:	2220      	movs	r2, #32
 8003e00:	409a      	lsls	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d136      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0216 	bic.w	r2, r2, #22
 8003e20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x1da>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	223f      	movs	r2, #63	@ 0x3f
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d07e      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
        }
        return;
 8003e7e:	e079      	b.n	8003f74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01d      	beq.n	8003eca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d031      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e02c      	b.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
 8003eae:	bf00      	nop
 8003eb0:	2000002c 	.word	0x2000002c
 8003eb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
 8003ec8:	e01e      	b.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0210 	bic.w	r2, r2, #16
 8003ee6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d032      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d022      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2205      	movs	r2, #5
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d307      	bcc.n	8003f50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f2      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x2cc>
 8003f4e:	e000      	b.n	8003f52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
 8003f72:	e000      	b.n	8003f76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f74:	bf00      	nop
    }
  }
}
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f8a:	b2db      	uxtb	r3, r3
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b40      	cmp	r3, #64	@ 0x40
 8003fdc:	d108      	bne.n	8003ff0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fee:	e007      	b.n	8004000 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	3b10      	subs	r3, #16
 800401c:	4a14      	ldr	r2, [pc, #80]	@ (8004070 <DMA_CalcBaseAndBitshift+0x64>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004026:	4a13      	ldr	r2, [pc, #76]	@ (8004074 <DMA_CalcBaseAndBitshift+0x68>)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d909      	bls.n	800404e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	1d1a      	adds	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	659a      	str	r2, [r3, #88]	@ 0x58
 800404c:	e007      	b.n	800405e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	aaaaaaab 	.word	0xaaaaaaab
 8004074:	0800dba0 	.word	0x0800dba0

08004078 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11f      	bne.n	80040d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d856      	bhi.n	8004146 <DMA_CheckFifoParam+0xce>
 8004098:	a201      	add	r2, pc, #4	@ (adr r2, 80040a0 <DMA_CheckFifoParam+0x28>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040b1 	.word	0x080040b1
 80040a4:	080040c3 	.word	0x080040c3
 80040a8:	080040b1 	.word	0x080040b1
 80040ac:	08004147 	.word	0x08004147
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d046      	beq.n	800414a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c0:	e043      	b.n	800414a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040ca:	d140      	bne.n	800414e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d0:	e03d      	b.n	800414e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040da:	d121      	bne.n	8004120 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d837      	bhi.n	8004152 <DMA_CheckFifoParam+0xda>
 80040e2:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <DMA_CheckFifoParam+0x70>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	080040ff 	.word	0x080040ff
 80040f0:	080040f9 	.word	0x080040f9
 80040f4:	08004111 	.word	0x08004111
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      break;
 80040fc:	e030      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d025      	beq.n	8004156 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410e:	e022      	b.n	8004156 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004118:	d11f      	bne.n	800415a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800411e:	e01c      	b.n	800415a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d903      	bls.n	800412e <DMA_CheckFifoParam+0xb6>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d003      	beq.n	8004134 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800412c:	e018      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      break;
 8004132:	e015      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00e      	beq.n	800415e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      break;
 8004144:	e00b      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      break;
 8004146:	bf00      	nop
 8004148:	e00a      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
      break;
 800414a:	bf00      	nop
 800414c:	e008      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
      break;
 800414e:	bf00      	nop
 8004150:	e006      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
      break;
 8004152:	bf00      	nop
 8004154:	e004      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
      break;
 8004156:	bf00      	nop
 8004158:	e002      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
      break;   
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <DMA_CheckFifoParam+0xe8>
      break;
 800415e:	bf00      	nop
    }
  } 
  
  return status; 
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop

08004170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004170:	b480      	push	{r7}
 8004172:	b089      	sub	sp, #36	@ 0x24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e159      	b.n	8004440 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800418c:	2201      	movs	r2, #1
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	f040 8148 	bne.w	800443a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d005      	beq.n	80041c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d130      	bne.n	8004224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	2203      	movs	r2, #3
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f8:	2201      	movs	r2, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 0201 	and.w	r2, r3, #1
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4313      	orrs	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b03      	cmp	r3, #3
 800422e:	d017      	beq.n	8004260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	2203      	movs	r2, #3
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d123      	bne.n	80042b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	08da      	lsrs	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3208      	adds	r2, #8
 8004274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	220f      	movs	r2, #15
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	08da      	lsrs	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3208      	adds	r2, #8
 80042ae:	69b9      	ldr	r1, [r7, #24]
 80042b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	2203      	movs	r2, #3
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0203 	and.w	r2, r3, #3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80a2 	beq.w	800443a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	4b57      	ldr	r3, [pc, #348]	@ (8004458 <HAL_GPIO_Init+0x2e8>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	4a56      	ldr	r2, [pc, #344]	@ (8004458 <HAL_GPIO_Init+0x2e8>)
 8004300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004304:	6453      	str	r3, [r2, #68]	@ 0x44
 8004306:	4b54      	ldr	r3, [pc, #336]	@ (8004458 <HAL_GPIO_Init+0x2e8>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004312:	4a52      	ldr	r2, [pc, #328]	@ (800445c <HAL_GPIO_Init+0x2ec>)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	3302      	adds	r3, #2
 800431a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	220f      	movs	r2, #15
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a49      	ldr	r2, [pc, #292]	@ (8004460 <HAL_GPIO_Init+0x2f0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d019      	beq.n	8004372 <HAL_GPIO_Init+0x202>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a48      	ldr	r2, [pc, #288]	@ (8004464 <HAL_GPIO_Init+0x2f4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_GPIO_Init+0x1fe>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a47      	ldr	r2, [pc, #284]	@ (8004468 <HAL_GPIO_Init+0x2f8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00d      	beq.n	800436a <HAL_GPIO_Init+0x1fa>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a46      	ldr	r2, [pc, #280]	@ (800446c <HAL_GPIO_Init+0x2fc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d007      	beq.n	8004366 <HAL_GPIO_Init+0x1f6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a45      	ldr	r2, [pc, #276]	@ (8004470 <HAL_GPIO_Init+0x300>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_GPIO_Init+0x1f2>
 800435e:	2304      	movs	r3, #4
 8004360:	e008      	b.n	8004374 <HAL_GPIO_Init+0x204>
 8004362:	2307      	movs	r3, #7
 8004364:	e006      	b.n	8004374 <HAL_GPIO_Init+0x204>
 8004366:	2303      	movs	r3, #3
 8004368:	e004      	b.n	8004374 <HAL_GPIO_Init+0x204>
 800436a:	2302      	movs	r3, #2
 800436c:	e002      	b.n	8004374 <HAL_GPIO_Init+0x204>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_GPIO_Init+0x204>
 8004372:	2300      	movs	r3, #0
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	f002 0203 	and.w	r2, r2, #3
 800437a:	0092      	lsls	r2, r2, #2
 800437c:	4093      	lsls	r3, r2
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004384:	4935      	ldr	r1, [pc, #212]	@ (800445c <HAL_GPIO_Init+0x2ec>)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	3302      	adds	r3, #2
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004392:	4b38      	ldr	r3, [pc, #224]	@ (8004474 <HAL_GPIO_Init+0x304>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004474 <HAL_GPIO_Init+0x304>)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004474 <HAL_GPIO_Init+0x304>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043e0:	4a24      	ldr	r2, [pc, #144]	@ (8004474 <HAL_GPIO_Init+0x304>)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043e6:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <HAL_GPIO_Init+0x304>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800440a:	4a1a      	ldr	r2, [pc, #104]	@ (8004474 <HAL_GPIO_Init+0x304>)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004410:	4b18      	ldr	r3, [pc, #96]	@ (8004474 <HAL_GPIO_Init+0x304>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004434:	4a0f      	ldr	r2, [pc, #60]	@ (8004474 <HAL_GPIO_Init+0x304>)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3301      	adds	r3, #1
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b0f      	cmp	r3, #15
 8004444:	f67f aea2 	bls.w	800418c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3724      	adds	r7, #36	@ 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	40013800 	.word	0x40013800
 8004460:	40020000 	.word	0x40020000
 8004464:	40020400 	.word	0x40020400
 8004468:	40020800 	.word	0x40020800
 800446c:	40020c00 	.word	0x40020c00
 8004470:	40021000 	.word	0x40021000
 8004474:	40013c00 	.word	0x40013c00

08004478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	807b      	strh	r3, [r7, #2]
 8004484:	4613      	mov	r3, r2
 8004486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004488:	787b      	ldrb	r3, [r7, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004494:	e003      	b.n	800449e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004496:	887b      	ldrh	r3, [r7, #2]
 8004498:	041a      	lsls	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	619a      	str	r2, [r3, #24]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4013      	ands	r3, r2
 80044c2:	041a      	lsls	r2, r3, #16
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	43d9      	mvns	r1, r3
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	400b      	ands	r3, r1
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	619a      	str	r2, [r3, #24]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e12b      	b.n	800474a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd ff42 	bl	8002390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	@ 0x24
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004544:	f004 fce6 	bl	8008f14 <HAL_RCC_GetPCLK1Freq>
 8004548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4a81      	ldr	r2, [pc, #516]	@ (8004754 <HAL_I2C_Init+0x274>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d807      	bhi.n	8004564 <HAL_I2C_Init+0x84>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a80      	ldr	r2, [pc, #512]	@ (8004758 <HAL_I2C_Init+0x278>)
 8004558:	4293      	cmp	r3, r2
 800455a:	bf94      	ite	ls
 800455c:	2301      	movls	r3, #1
 800455e:	2300      	movhi	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e006      	b.n	8004572 <HAL_I2C_Init+0x92>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a7d      	ldr	r2, [pc, #500]	@ (800475c <HAL_I2C_Init+0x27c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	bf94      	ite	ls
 800456c:	2301      	movls	r3, #1
 800456e:	2300      	movhi	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0e7      	b.n	800474a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a78      	ldr	r2, [pc, #480]	@ (8004760 <HAL_I2C_Init+0x280>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	0c9b      	lsrs	r3, r3, #18
 8004584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004754 <HAL_I2C_Init+0x274>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d802      	bhi.n	80045b4 <HAL_I2C_Init+0xd4>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	3301      	adds	r3, #1
 80045b2:	e009      	b.n	80045c8 <HAL_I2C_Init+0xe8>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	4a69      	ldr	r2, [pc, #420]	@ (8004764 <HAL_I2C_Init+0x284>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	3301      	adds	r3, #1
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	430b      	orrs	r3, r1
 80045ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	495c      	ldr	r1, [pc, #368]	@ (8004754 <HAL_I2C_Init+0x274>)
 80045e4:	428b      	cmp	r3, r1
 80045e6:	d819      	bhi.n	800461c <HAL_I2C_Init+0x13c>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1e59      	subs	r1, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f6:	1c59      	adds	r1, r3, #1
 80045f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045fc:	400b      	ands	r3, r1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_I2C_Init+0x138>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1e59      	subs	r1, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004610:	3301      	adds	r3, #1
 8004612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004616:	e051      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 8004618:	2304      	movs	r3, #4
 800461a:	e04f      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <HAL_I2C_Init+0x168>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	440b      	add	r3, r1
 8004632:	fbb0 f3f3 	udiv	r3, r0, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e012      	b.n	800466e <HAL_I2C_Init+0x18e>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	0099      	lsls	r1, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	fbb0 f3f3 	udiv	r3, r0, r3
 800465e:	3301      	adds	r3, #1
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Init+0x196>
 8004672:	2301      	movs	r3, #1
 8004674:	e022      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10e      	bne.n	800469c <HAL_I2C_Init+0x1bc>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1e58      	subs	r0, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6859      	ldr	r1, [r3, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	440b      	add	r3, r1
 800468c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004690:	3301      	adds	r3, #1
 8004692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800469a:	e00f      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	0099      	lsls	r1, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	6809      	ldr	r1, [r1, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6911      	ldr	r1, [r2, #16]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	000186a0 	.word	0x000186a0
 8004758:	001e847f 	.word	0x001e847f
 800475c:	003d08ff 	.word	0x003d08ff
 8004760:	431bde83 	.word	0x431bde83
 8004764:	10624dd3 	.word	0x10624dd3

08004768 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477a:	2b80      	cmp	r3, #128	@ 0x80
 800477c:	d103      	bne.n	8004786 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	611a      	str	r2, [r3, #16]
  }
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	817b      	strh	r3, [r7, #10]
 80047a6:	460b      	mov	r3, r1
 80047a8:	813b      	strh	r3, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047ae:	f7fe fad1 	bl	8002d54 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b20      	cmp	r3, #32
 80047be:	f040 80d9 	bne.w	8004974 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	2319      	movs	r3, #25
 80047c8:	2201      	movs	r2, #1
 80047ca:	496d      	ldr	r1, [pc, #436]	@ (8004980 <HAL_I2C_Mem_Write+0x1ec>)
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f002 faf9 	bl	8006dc4 <I2C_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
 80047da:	e0cc      	b.n	8004976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_I2C_Mem_Write+0x56>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e0c5      	b.n	8004976 <HAL_I2C_Mem_Write+0x1e2>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d007      	beq.n	8004810 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800481e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2221      	movs	r2, #33	@ 0x21
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2240      	movs	r2, #64	@ 0x40
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004840:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a4d      	ldr	r2, [pc, #308]	@ (8004984 <HAL_I2C_Mem_Write+0x1f0>)
 8004850:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004852:	88f8      	ldrh	r0, [r7, #6]
 8004854:	893a      	ldrh	r2, [r7, #8]
 8004856:	8979      	ldrh	r1, [r7, #10]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4603      	mov	r3, r0
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f001 ff6c 	bl	8006740 <I2C_RequestMemoryWrite>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d052      	beq.n	8004914 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e081      	b.n	8004976 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f002 fbbe 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00d      	beq.n	800489e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	2b04      	cmp	r3, #4
 8004888:	d107      	bne.n	800489a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004898:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06b      	b.n	8004976 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d11b      	bne.n	8004914 <HAL_I2C_Mem_Write+0x180>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d017      	beq.n	8004914 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1aa      	bne.n	8004872 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f002 fbb1 	bl	8007088 <I2C_WaitOnBTFFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	2b04      	cmp	r3, #4
 8004932:	d107      	bne.n	8004944 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004942:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e016      	b.n	8004976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	00100002 	.word	0x00100002
 8004984:	ffff0000 	.word	0xffff0000

08004988 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	@ 0x28
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	461a      	mov	r2, r3
 8004996:	4603      	mov	r3, r0
 8004998:	817b      	strh	r3, [r7, #10]
 800499a:	460b      	mov	r3, r1
 800499c:	813b      	strh	r3, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049a6:	f7fe f9d5 	bl	8002d54 <HAL_GetTick>
 80049aa:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	f040 8136 	bne.w	8004c26 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80049ba:	4b9d      	ldr	r3, [pc, #628]	@ (8004c30 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	08db      	lsrs	r3, r3, #3
 80049c0:	4a9c      	ldr	r2, [pc, #624]	@ (8004c34 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	0a1a      	lsrs	r2, r3, #8
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009a      	lsls	r2, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d112      	bne.n	8004a06 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
 8004a04:	e110      	b.n	8004c28 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d0df      	beq.n	80049d4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2C_Mem_Write_DMA+0x9a>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e102      	b.n	8004c28 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d007      	beq.n	8004a48 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2221      	movs	r2, #33	@ 0x21
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2240      	movs	r2, #64	@ 0x40
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a6c      	ldr	r2, [pc, #432]	@ (8004c38 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004a88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004a8a:	897a      	ldrh	r2, [r7, #10]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004a90:	893a      	ldrh	r2, [r7, #8]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80a9 	beq.w	8004bfe <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02a      	beq.n	8004b0a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab8:	4a60      	ldr	r2, [pc, #384]	@ (8004c3c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004aba:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c40 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004ac2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac8:	2200      	movs	r2, #0
 8004aca:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad8:	2200      	movs	r2, #0
 8004ada:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	4619      	mov	r1, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3310      	adds	r3, #16
 8004af4:	461a      	mov	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afa:	f7ff f83b 	bl	8003b74 <HAL_DMA_Start_IT>
 8004afe:	4603      	mov	r3, r0
 8004b00:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004b02:	7efb      	ldrb	r3, [r7, #27]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d166      	bne.n	8004bd6 <HAL_I2C_Mem_Write_DMA+0x24e>
 8004b08:	e013      	b.n	8004b32 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e07a      	b.n	8004c28 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004b32:	88f8      	ldrh	r0, [r7, #6]
 8004b34:	893a      	ldrh	r2, [r7, #8]
 8004b36:	8979      	ldrh	r1, [r7, #10]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	2323      	movs	r3, #35	@ 0x23
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	4603      	mov	r3, r0
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f001 fdfc 	bl	8006740 <I2C_RequestMemoryWrite>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d022      	beq.n	8004b94 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff f866 	bl	8003c24 <HAL_DMA_Abort_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b60:	2200      	movs	r2, #0
 8004b62:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b72:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e049      	b.n	8004c28 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bd0:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e028      	b.n	8004c28 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	f043 0210 	orr.w	r2, r3, #16
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e014      	b.n	8004c28 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004c26:	2302      	movs	r3, #2
  }
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	2000002c 	.word	0x2000002c
 8004c34:	14f8b589 	.word	0x14f8b589
 8004c38:	ffff0000 	.word	0xffff0000
 8004c3c:	08006a3d 	.word	0x08006a3d
 8004c40:	08006bfb 	.word	0x08006bfb

08004c44 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08c      	sub	sp, #48	@ 0x30
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	817b      	strh	r3, [r7, #10]
 8004c56:	460b      	mov	r3, r1
 8004c58:	813b      	strh	r3, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c5e:	f7fe f879 	bl	8002d54 <HAL_GetTick>
 8004c62:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	f040 8172 	bne.w	8004f5a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c76:	4b93      	ldr	r3, [pc, #588]	@ (8004ec4 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	4a92      	ldr	r2, [pc, #584]	@ (8004ec8 <HAL_I2C_Mem_Read_DMA+0x284>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0a1a      	lsrs	r2, r3, #8
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009a      	lsls	r2, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d112      	bne.n	8004cc2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e14c      	b.n	8004f5c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d0df      	beq.n	8004c90 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_I2C_Mem_Read_DMA+0x9a>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e13e      	b.n	8004f5c <HAL_I2C_Mem_Read_DMA+0x318>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d007      	beq.n	8004d04 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2222      	movs	r2, #34	@ 0x22
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2240      	movs	r2, #64	@ 0x40
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a62      	ldr	r2, [pc, #392]	@ (8004ecc <HAL_I2C_Mem_Read_DMA+0x288>)
 8004d44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004d46:	897a      	ldrh	r2, [r7, #10]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004d4c:	893a      	ldrh	r2, [r7, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004d52:	88fa      	ldrh	r2, [r7, #6]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80cc 	beq.w	8004f00 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02d      	beq.n	8004dcc <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d74:	4a56      	ldr	r2, [pc, #344]	@ (8004ed0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004d76:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7c:	4a55      	ldr	r2, [pc, #340]	@ (8004ed4 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004d7e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d84:	2200      	movs	r2, #0
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	2200      	movs	r2, #0
 8004d96:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3310      	adds	r3, #16
 8004daa:	4619      	mov	r1, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	461a      	mov	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db6:	f7fe fedd 	bl	8003b74 <HAL_DMA_Start_IT>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 8087 	bne.w	8004ed8 <HAL_I2C_Mem_Read_DMA+0x294>
 8004dca:	e013      	b.n	8004df4 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b3      	b.n	8004f5c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004df4:	88f8      	ldrh	r0, [r7, #6]
 8004df6:	893a      	ldrh	r2, [r7, #8]
 8004df8:	8979      	ldrh	r1, [r7, #10]
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	2323      	movs	r3, #35	@ 0x23
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	4603      	mov	r3, r0
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f001 fd31 	bl	800686c <I2C_RequestMemoryRead>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d023      	beq.n	8004e58 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe ff05 	bl	8003c24 <HAL_DMA_Abort_IT>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	2200      	movs	r2, #0
 8004e26:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e36:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e081      	b.n	8004f5c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d108      	bne.n	8004e72 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e007      	b.n	8004e82 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e80:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eae:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ebe:	605a      	str	r2, [r3, #4]
 8004ec0:	e049      	b.n	8004f56 <HAL_I2C_Mem_Read_DMA+0x312>
 8004ec2:	bf00      	nop
 8004ec4:	2000002c 	.word	0x2000002c
 8004ec8:	14f8b589 	.word	0x14f8b589
 8004ecc:	ffff0000 	.word	0xffff0000
 8004ed0:	08006a3d 	.word	0x08006a3d
 8004ed4:	08006bfb 	.word	0x08006bfb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	f043 0210 	orr.w	r2, r3, #16
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e02d      	b.n	8004f5c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004f00:	88f8      	ldrh	r0, [r7, #6]
 8004f02:	893a      	ldrh	r2, [r7, #8]
 8004f04:	8979      	ldrh	r1, [r7, #10]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	2323      	movs	r3, #35	@ 0x23
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	4603      	mov	r3, r0
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f001 fcab 	bl	800686c <I2C_RequestMemoryRead>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e01d      	b.n	8004f5c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f44:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3728      	adds	r7, #40	@ 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d003      	beq.n	8004f9c <HAL_I2C_EV_IRQHandler+0x38>
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b40      	cmp	r3, #64	@ 0x40
 8004f98:	f040 80c1 	bne.w	800511e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10d      	bne.n	8004fd2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004fbc:	d003      	beq.n	8004fc6 <HAL_I2C_EV_IRQHandler+0x62>
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004fc4:	d101      	bne.n	8004fca <HAL_I2C_EV_IRQHandler+0x66>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_I2C_EV_IRQHandler+0x68>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	f000 8132 	beq.w	8005236 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00c      	beq.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x92>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	0a5b      	lsrs	r3, r3, #9
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f002 f8f6 	bl	80071da <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fd87 	bl	8005b02 <I2C_Master_SB>
 8004ff4:	e092      	b.n	800511c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_I2C_EV_IRQHandler+0xb2>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	0a5b      	lsrs	r3, r3, #9
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fdfd 	bl	8005c0e <I2C_Master_ADD10>
 8005014:	e082      	b.n	800511c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_I2C_EV_IRQHandler+0xd2>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	0a5b      	lsrs	r3, r3, #9
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fe17 	bl	8005c62 <I2C_Master_ADDR>
 8005034:	e072      	b.n	800511c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	089b      	lsrs	r3, r3, #2
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03b      	beq.n	80050ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800504c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005050:	f000 80f3 	beq.w	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	09db      	lsrs	r3, r3, #7
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00f      	beq.n	8005080 <HAL_I2C_EV_IRQHandler+0x11c>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	0a9b      	lsrs	r3, r3, #10
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_I2C_EV_IRQHandler+0x11c>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d103      	bne.n	8005080 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f9df 	bl	800543c <I2C_MasterTransmit_TXE>
 800507e:	e04d      	b.n	800511c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80d6 	beq.w	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	0a5b      	lsrs	r3, r3, #9
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80cf 	beq.w	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	2b21      	cmp	r3, #33	@ 0x21
 80050a0:	d103      	bne.n	80050aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa66 	bl	8005574 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050a8:	e0c7      	b.n	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	2b40      	cmp	r3, #64	@ 0x40
 80050ae:	f040 80c4 	bne.w	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fad4 	bl	8005660 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050b8:	e0bf      	b.n	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c8:	f000 80b7 	beq.w	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00f      	beq.n	80050f8 <HAL_I2C_EV_IRQHandler+0x194>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	0a9b      	lsrs	r3, r3, #10
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <HAL_I2C_EV_IRQHandler+0x194>
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fb4d 	bl	8005790 <I2C_MasterReceive_RXNE>
 80050f6:	e011      	b.n	800511c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 809a 	beq.w	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	0a5b      	lsrs	r3, r3, #9
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8093 	beq.w	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fc03 	bl	8005920 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800511a:	e08e      	b.n	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
 800511c:	e08d      	b.n	800523a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e007      	b.n	8005140 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d012      	beq.n	8005172 <HAL_I2C_EV_IRQHandler+0x20e>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	0a5b      	lsrs	r3, r3, #9
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00c      	beq.n	8005172 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005168:	69b9      	ldr	r1, [r7, #24]
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 ffc8 	bl	8006100 <I2C_Slave_ADDR>
 8005170:	e066      	b.n	8005240 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_I2C_EV_IRQHandler+0x22e>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	0a5b      	lsrs	r3, r3, #9
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 f802 	bl	8006194 <I2C_Slave_STOPF>
 8005190:	e056      	b.n	8005240 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005192:	7bbb      	ldrb	r3, [r7, #14]
 8005194:	2b21      	cmp	r3, #33	@ 0x21
 8005196:	d002      	beq.n	800519e <HAL_I2C_EV_IRQHandler+0x23a>
 8005198:	7bbb      	ldrb	r3, [r7, #14]
 800519a:	2b29      	cmp	r3, #41	@ 0x29
 800519c:	d125      	bne.n	80051ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	09db      	lsrs	r3, r3, #7
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00f      	beq.n	80051ca <HAL_I2C_EV_IRQHandler+0x266>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	0a9b      	lsrs	r3, r3, #10
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <HAL_I2C_EV_IRQHandler+0x266>
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fede 	bl	8005f84 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051c8:	e039      	b.n	800523e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d033      	beq.n	800523e <HAL_I2C_EV_IRQHandler+0x2da>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	0a5b      	lsrs	r3, r3, #9
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02d      	beq.n	800523e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 ff0b 	bl	8005ffe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051e8:	e029      	b.n	800523e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	099b      	lsrs	r3, r3, #6
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00f      	beq.n	8005216 <HAL_I2C_EV_IRQHandler+0x2b2>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	0a9b      	lsrs	r3, r3, #10
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	089b      	lsrs	r3, r3, #2
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d103      	bne.n	8005216 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 ff16 	bl	8006040 <I2C_SlaveReceive_RXNE>
 8005214:	e014      	b.n	8005240 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	0a5b      	lsrs	r3, r3, #9
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 ff44 	bl	80060bc <I2C_SlaveReceive_BTF>
 8005234:	e004      	b.n	8005240 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005236:	bf00      	nop
 8005238:	e002      	b.n	8005240 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800523e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b08a      	sub	sp, #40	@ 0x28
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005268:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00e      	beq.n	8005294 <HAL_I2C_ER_IRQHandler+0x4e>
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d008      	beq.n	8005294 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005292:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	0a5b      	lsrs	r3, r3, #9
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00e      	beq.n	80052be <HAL_I2C_ER_IRQHandler+0x78>
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80052bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	0a9b      	lsrs	r3, r3, #10
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d03f      	beq.n	800534a <HAL_I2C_ER_IRQHandler+0x104>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d039      	beq.n	800534a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80052d6:	7efb      	ldrb	r3, [r7, #27]
 80052d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80052f0:	7ebb      	ldrb	r3, [r7, #26]
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d112      	bne.n	800531c <HAL_I2C_ER_IRQHandler+0xd6>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10f      	bne.n	800531c <HAL_I2C_ER_IRQHandler+0xd6>
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b21      	cmp	r3, #33	@ 0x21
 8005300:	d008      	beq.n	8005314 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	2b29      	cmp	r3, #41	@ 0x29
 8005306:	d005      	beq.n	8005314 <HAL_I2C_ER_IRQHandler+0xce>
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	2b28      	cmp	r3, #40	@ 0x28
 800530c:	d106      	bne.n	800531c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b21      	cmp	r3, #33	@ 0x21
 8005312:	d103      	bne.n	800531c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 f86d 	bl	80063f4 <I2C_Slave_AF>
 800531a:	e016      	b.n	800534a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005324:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800532e:	7efb      	ldrb	r3, [r7, #27]
 8005330:	2b10      	cmp	r3, #16
 8005332:	d002      	beq.n	800533a <HAL_I2C_ER_IRQHandler+0xf4>
 8005334:	7efb      	ldrb	r3, [r7, #27]
 8005336:	2b40      	cmp	r3, #64	@ 0x40
 8005338:	d107      	bne.n	800534a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005348:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	0adb      	lsrs	r3, r3, #11
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <HAL_I2C_ER_IRQHandler+0x12e>
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	f043 0308 	orr.w	r3, r3, #8
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005372:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 f8a8 	bl	80064dc <I2C_ITError>
  }
}
 800538c:	bf00      	nop
 800538e:	3728      	adds	r7, #40	@ 0x28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
 80053f0:	4613      	mov	r3, r2
 80053f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005452:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005458:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d150      	bne.n	8005504 <I2C_MasterTransmit_TXE+0xc8>
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b21      	cmp	r3, #33	@ 0x21
 8005466:	d14d      	bne.n	8005504 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b08      	cmp	r3, #8
 800546c:	d01d      	beq.n	80054aa <I2C_MasterTransmit_TXE+0x6e>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b20      	cmp	r3, #32
 8005472:	d01a      	beq.n	80054aa <I2C_MasterTransmit_TXE+0x6e>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800547a:	d016      	beq.n	80054aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800548a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2211      	movs	r2, #17
 8005490:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff ff76 	bl	8005394 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054a8:	e060      	b.n	800556c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b40      	cmp	r3, #64	@ 0x40
 80054e2:	d107      	bne.n	80054f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fb fc1f 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054f2:	e03b      	b.n	800556c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff49 	bl	8005394 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005502:	e033      	b.n	800556c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b21      	cmp	r3, #33	@ 0x21
 8005508:	d005      	beq.n	8005516 <I2C_MasterTransmit_TXE+0xda>
 800550a:	7bbb      	ldrb	r3, [r7, #14]
 800550c:	2b40      	cmp	r3, #64	@ 0x40
 800550e:	d12d      	bne.n	800556c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2b22      	cmp	r3, #34	@ 0x22
 8005514:	d12a      	bne.n	800556c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d108      	bne.n	8005532 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800552e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005530:	e01c      	b.n	800556c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d103      	bne.n	8005546 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f88e 	bl	8005660 <I2C_MemoryTransmit_TXE_BTF>
}
 8005544:	e012      	b.n	800556c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800556a:	e7ff      	b.n	800556c <I2C_MasterTransmit_TXE+0x130>
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b21      	cmp	r3, #33	@ 0x21
 800558c:	d164      	bne.n	8005658 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d012      	beq.n	80055be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80055bc:	e04c      	b.n	8005658 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d01d      	beq.n	8005600 <I2C_MasterTransmit_BTF+0x8c>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d01a      	beq.n	8005600 <I2C_MasterTransmit_BTF+0x8c>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055d0:	d016      	beq.n	8005600 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2211      	movs	r2, #17
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fecb 	bl	8005394 <HAL_I2C_MasterTxCpltCallback>
}
 80055fe:	e02b      	b.n	8005658 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800560e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800561e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d107      	bne.n	800564a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fb fb74 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
}
 8005648:	e006      	b.n	8005658 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fe9e 	bl	8005394 <HAL_I2C_MasterTxCpltCallback>
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11d      	bne.n	80056b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d10b      	bne.n	8005698 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005684:	b2da      	uxtb	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005690:	1c9a      	adds	r2, r3, #2
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005696:	e077      	b.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569c:	b29b      	uxth	r3, r3
 800569e:	121b      	asrs	r3, r3, #8
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056b2:	e069      	b.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10b      	bne.n	80056d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056d2:	e059      	b.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d152      	bne.n	8005782 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b22      	cmp	r3, #34	@ 0x22
 80056e0:	d10d      	bne.n	80056fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056fc:	e044      	b.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d015      	beq.n	8005734 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b21      	cmp	r3, #33	@ 0x21
 800570c:	d112      	bne.n	8005734 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005732:	e029      	b.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d124      	bne.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b21      	cmp	r3, #33	@ 0x21
 8005742:	d121      	bne.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005752:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005762:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb fad8 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
}
 8005780:	e002      	b.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fe fff0 	bl	8004768 <I2C_Flush_DR>
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b22      	cmp	r3, #34	@ 0x22
 80057a2:	f040 80b9 	bne.w	8005918 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057aa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d921      	bls.n	80057fe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	f040 8096 	bne.w	8005918 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80057fc:	e08c      	b.n	8005918 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	2b02      	cmp	r3, #2
 8005804:	d07f      	beq.n	8005906 <I2C_MasterReceive_RXNE+0x176>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d002      	beq.n	8005812 <I2C_MasterReceive_RXNE+0x82>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d179      	bne.n	8005906 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 fc80 	bl	8007118 <I2C_WaitOnSTOPRequestThroughIT>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d14c      	bne.n	80058b8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800582c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800583c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b40      	cmp	r3, #64	@ 0x40
 8005876:	d10a      	bne.n	800588e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fb fa62 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800588c:	e044      	b.n	8005918 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d002      	beq.n	80058a2 <I2C_MasterReceive_RXNE+0x112>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d103      	bne.n	80058aa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80058a8:	e002      	b.n	80058b0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2212      	movs	r2, #18
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fd79 	bl	80053a8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058b6:	e02f      	b.n	8005918 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fd88 	bl	8005414 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005904:	e008      	b.n	8005918 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005914:	605a      	str	r2, [r3, #4]
}
 8005916:	e7ff      	b.n	8005918 <I2C_MasterReceive_RXNE+0x188>
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b04      	cmp	r3, #4
 8005936:	d11b      	bne.n	8005970 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005946:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800596e:	e0c4      	b.n	8005afa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b03      	cmp	r3, #3
 8005978:	d129      	bne.n	80059ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005988:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b04      	cmp	r3, #4
 800598e:	d00a      	beq.n	80059a6 <I2C_MasterReceive_BTF+0x86>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d007      	beq.n	80059a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80059cc:	e095      	b.n	8005afa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d17d      	bne.n	8005ad4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d002      	beq.n	80059e4 <I2C_MasterReceive_BTF+0xc4>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d108      	bne.n	80059f6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e016      	b.n	8005a24 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d002      	beq.n	8005a02 <I2C_MasterReceive_BTF+0xe2>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d108      	bne.n	8005a14 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e007      	b.n	8005a24 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b40      	cmp	r3, #64	@ 0x40
 8005a92:	d10a      	bne.n	8005aaa <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb f954 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
}
 8005aa8:	e027      	b.n	8005afa <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d002      	beq.n	8005abe <I2C_MasterReceive_BTF+0x19e>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d103      	bne.n	8005ac6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ac4:	e002      	b.n	8005acc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2212      	movs	r2, #18
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fc6b 	bl	80053a8 <HAL_I2C_MasterRxCpltCallback>
}
 8005ad2:	e012      	b.n	8005afa <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b40      	cmp	r3, #64	@ 0x40
 8005b14:	d117      	bne.n	8005b46 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b2e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b30:	e067      	b.n	8005c02 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	611a      	str	r2, [r3, #16]
}
 8005b44:	e05d      	b.n	8005c02 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b4e:	d133      	bne.n	8005bb8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b21      	cmp	r3, #33	@ 0x21
 8005b5a:	d109      	bne.n	8005b70 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b6c:	611a      	str	r2, [r3, #16]
 8005b6e:	e008      	b.n	8005b82 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <I2C_Master_SB+0x92>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d108      	bne.n	8005ba6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d032      	beq.n	8005c02 <I2C_Master_SB+0x100>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d02d      	beq.n	8005c02 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bb4:	605a      	str	r2, [r3, #4]
}
 8005bb6:	e024      	b.n	8005c02 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10e      	bne.n	8005bde <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	11db      	asrs	r3, r3, #7
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f003 0306 	and.w	r3, r3, #6
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f063 030f 	orn	r3, r3, #15
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	611a      	str	r2, [r3, #16]
}
 8005bdc:	e011      	b.n	8005c02 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10d      	bne.n	8005c02 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	11db      	asrs	r3, r3, #7
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f003 0306 	and.w	r3, r3, #6
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f063 030e 	orn	r3, r3, #14
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	611a      	str	r2, [r3, #16]
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <I2C_Master_ADD10+0x26>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d108      	bne.n	8005c46 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00c      	beq.n	8005c56 <I2C_Master_ADD10+0x48>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c54:	605a      	str	r2, [r3, #4]
  }
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b091      	sub	sp, #68	@ 0x44
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b22      	cmp	r3, #34	@ 0x22
 8005c8a:	f040 8169 	bne.w	8005f60 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <I2C_Master_ADDR+0x54>
 8005c96:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005c9a:	2b40      	cmp	r3, #64	@ 0x40
 8005c9c:	d10b      	bne.n	8005cb6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	e160      	b.n	8005f78 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11d      	bne.n	8005cfa <I2C_Master_ADDR+0x98>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cc6:	d118      	bne.n	8005cfa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cf8:	e13e      	b.n	8005f78 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d04:	2300      	movs	r3, #0
 8005d06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e115      	b.n	8005f58 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	f040 808a 	bne.w	8005e4c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d3e:	d137      	bne.n	8005db0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d4e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d5e:	d113      	bne.n	8005d88 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d6e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d70:	2300      	movs	r3, #0
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	e0e7      	b.n	8005f58 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	623b      	str	r3, [r7, #32]
 8005d9c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e0d3      	b.n	8005f58 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d02e      	beq.n	8005e14 <I2C_Master_ADDR+0x1b2>
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d02b      	beq.n	8005e14 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbe:	2b12      	cmp	r3, #18
 8005dc0:	d102      	bne.n	8005dc8 <I2C_Master_ADDR+0x166>
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d125      	bne.n	8005e14 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d00e      	beq.n	8005dec <I2C_Master_ADDR+0x18a>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d00b      	beq.n	8005dec <I2C_Master_ADDR+0x18a>
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d008      	beq.n	8005dec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e007      	b.n	8005dfc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005dfa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	e0a1      	b.n	8005f58 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e22:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e085      	b.n	8005f58 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d14d      	bne.n	8005ef2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d016      	beq.n	8005e8a <I2C_Master_ADDR+0x228>
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d013      	beq.n	8005e8a <I2C_Master_ADDR+0x228>
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d010      	beq.n	8005e8a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e76:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	e007      	b.n	8005e9a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e98:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea8:	d117      	bne.n	8005eda <I2C_Master_ADDR+0x278>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005eb0:	d00b      	beq.n	8005eca <I2C_Master_ADDR+0x268>
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d008      	beq.n	8005eca <I2C_Master_ADDR+0x268>
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d005      	beq.n	8005eca <I2C_Master_ADDR+0x268>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d002      	beq.n	8005eca <I2C_Master_ADDR+0x268>
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d107      	bne.n	8005eda <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ed8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	e032      	b.n	8005f58 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f00:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f10:	d117      	bne.n	8005f42 <I2C_Master_ADDR+0x2e0>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f18:	d00b      	beq.n	8005f32 <I2C_Master_ADDR+0x2d0>
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d008      	beq.n	8005f32 <I2C_Master_ADDR+0x2d0>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d005      	beq.n	8005f32 <I2C_Master_ADDR+0x2d0>
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d002      	beq.n	8005f32 <I2C_Master_ADDR+0x2d0>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d107      	bne.n	8005f42 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f40:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f5e:	e00b      	b.n	8005f78 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	e7ff      	b.n	8005f78 <I2C_Master_ADDR+0x316>
 8005f78:	bf00      	nop
 8005f7a:	3744      	adds	r7, #68	@ 0x44
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d02b      	beq.n	8005ff6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d114      	bne.n	8005ff6 <I2C_SlaveTransmit_TXE+0x72>
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	2b29      	cmp	r3, #41	@ 0x29
 8005fd0:	d111      	bne.n	8005ff6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fe0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2221      	movs	r2, #33	@ 0x21
 8005fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2228      	movs	r2, #40	@ 0x28
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff f9e3 	bl	80053bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d011      	beq.n	8006034 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d02c      	beq.n	80060b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d114      	bne.n	80060b4 <I2C_SlaveReceive_RXNE+0x74>
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b2a      	cmp	r3, #42	@ 0x2a
 800608e:	d111      	bne.n	80060b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800609e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2222      	movs	r2, #34	@ 0x22
 80060a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2228      	movs	r2, #40	@ 0x28
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff f98e 	bl	80053d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d012      	beq.n	80060f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800611a:	2b28      	cmp	r3, #40	@ 0x28
 800611c:	d127      	bne.n	800616e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800612c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800613a:	2301      	movs	r3, #1
 800613c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	09db      	lsrs	r3, r3, #7
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	81bb      	strh	r3, [r7, #12]
 8006150:	e002      	b.n	8006158 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006160:	89ba      	ldrh	r2, [r7, #12]
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff f93c 	bl	80053e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800616c:	e00e      	b.n	800618c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80061b4:	2300      	movs	r3, #0
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f0:	d172      	bne.n	80062d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b22      	cmp	r3, #34	@ 0x22
 80061f6:	d002      	beq.n	80061fe <I2C_Slave_STOPF+0x6a>
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80061fc:	d135      	bne.n	800626a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621a:	f043 0204 	orr.w	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006230:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd fea0 	bl	8003f7c <HAL_DMA_GetState>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d049      	beq.n	80062d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006246:	4a69      	ldr	r2, [pc, #420]	@ (80063ec <I2C_Slave_STOPF+0x258>)
 8006248:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624e:	4618      	mov	r0, r3
 8006250:	f7fd fce8 	bl	8003c24 <HAL_DMA_Abort_IT>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d03d      	beq.n	80062d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006268:	e035      	b.n	80062d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	b29a      	uxth	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	f043 0204 	orr.w	r2, r3, #4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800629c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fd fe6a 	bl	8003f7c <HAL_DMA_GetState>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d014      	beq.n	80062d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b2:	4a4e      	ldr	r2, [pc, #312]	@ (80063ec <I2C_Slave_STOPF+0x258>)
 80062b4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fd fcb2 	bl	8003c24 <HAL_DMA_Abort_IT>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	e000      	b.n	80062d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d03e      	beq.n	8006360 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d112      	bne.n	8006316 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006320:	2b40      	cmp	r3, #64	@ 0x40
 8006322:	d112      	bne.n	800634a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	f043 0204 	orr.w	r2, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f8b7 	bl	80064dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800636e:	e039      	b.n	80063e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b2a      	cmp	r3, #42	@ 0x2a
 8006374:	d109      	bne.n	800638a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2228      	movs	r2, #40	@ 0x28
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff f823 	bl	80053d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b28      	cmp	r3, #40	@ 0x28
 8006394:	d111      	bne.n	80063ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a15      	ldr	r2, [pc, #84]	@ (80063f0 <I2C_Slave_STOPF+0x25c>)
 800639a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff f824 	bl	8005400 <HAL_I2C_ListenCpltCallback>
}
 80063b8:	e014      	b.n	80063e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063be:	2b22      	cmp	r3, #34	@ 0x22
 80063c0:	d002      	beq.n	80063c8 <I2C_Slave_STOPF+0x234>
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b22      	cmp	r3, #34	@ 0x22
 80063c6:	d10d      	bne.n	80063e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fe fff6 	bl	80053d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	08006c75 	.word	0x08006c75
 80063f0:	ffff0000 	.word	0xffff0000

080063f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006402:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b08      	cmp	r3, #8
 800640e:	d002      	beq.n	8006416 <I2C_Slave_AF+0x22>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b20      	cmp	r3, #32
 8006414:	d129      	bne.n	800646a <I2C_Slave_AF+0x76>
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b28      	cmp	r3, #40	@ 0x28
 800641a:	d126      	bne.n	800646a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a2e      	ldr	r2, [pc, #184]	@ (80064d8 <I2C_Slave_AF+0xe4>)
 8006420:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006430:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800643a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800644a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fe ffcc 	bl	8005400 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006468:	e031      	b.n	80064ce <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b21      	cmp	r3, #33	@ 0x21
 800646e:	d129      	bne.n	80064c4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a19      	ldr	r2, [pc, #100]	@ (80064d8 <I2C_Slave_AF+0xe4>)
 8006474:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2221      	movs	r2, #33	@ 0x21
 800647a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800649a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064b4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fe f956 	bl	8004768 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fe ff7d 	bl	80053bc <HAL_I2C_SlaveTxCpltCallback>
}
 80064c2:	e004      	b.n	80064ce <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064cc:	615a      	str	r2, [r3, #20]
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	ffff0000 	.word	0xffff0000

080064dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d002      	beq.n	8006500 <I2C_ITError+0x24>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	d10a      	bne.n	8006516 <I2C_ITError+0x3a>
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b22      	cmp	r3, #34	@ 0x22
 8006504:	d107      	bne.n	8006516 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006514:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800651c:	2b28      	cmp	r3, #40	@ 0x28
 800651e:	d107      	bne.n	8006530 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2228      	movs	r2, #40	@ 0x28
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800652e:	e015      	b.n	800655c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800653a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800653e:	d00a      	beq.n	8006556 <I2C_ITError+0x7a>
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b60      	cmp	r3, #96	@ 0x60
 8006544:	d007      	beq.n	8006556 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006566:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800656a:	d162      	bne.n	8006632 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800657a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	d020      	beq.n	80065cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658e:	4a6a      	ldr	r2, [pc, #424]	@ (8006738 <I2C_ITError+0x25c>)
 8006590:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006596:	4618      	mov	r0, r3
 8006598:	f7fd fb44 	bl	8003c24 <HAL_DMA_Abort_IT>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8089 	beq.w	80066b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065c6:	4610      	mov	r0, r2
 80065c8:	4798      	blx	r3
 80065ca:	e074      	b.n	80066b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d0:	4a59      	ldr	r2, [pc, #356]	@ (8006738 <I2C_ITError+0x25c>)
 80065d2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd fb23 	bl	8003c24 <HAL_DMA_Abort_IT>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d068      	beq.n	80066b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ee:	2b40      	cmp	r3, #64	@ 0x40
 80065f0:	d10b      	bne.n	800660a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	e041      	b.n	80066b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b60      	cmp	r3, #96	@ 0x60
 800663c:	d125      	bne.n	800668a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006656:	2b40      	cmp	r3, #64	@ 0x40
 8006658:	d10b      	bne.n	8006672 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fe fed0 	bl	8005428 <HAL_I2C_AbortCpltCallback>
 8006688:	e015      	b.n	80066b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006694:	2b40      	cmp	r3, #64	@ 0x40
 8006696:	d10b      	bne.n	80066b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7fe feaf 	bl	8005414 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d113      	bne.n	8006730 <I2C_ITError+0x254>
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	2b28      	cmp	r3, #40	@ 0x28
 800670c:	d110      	bne.n	8006730 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a0a      	ldr	r2, [pc, #40]	@ (800673c <I2C_ITError+0x260>)
 8006712:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fe fe68 	bl	8005400 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	08006c75 	.word	0x08006c75
 800673c:	ffff0000 	.word	0xffff0000

08006740 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	4608      	mov	r0, r1
 800674a:	4611      	mov	r1, r2
 800674c:	461a      	mov	r2, r3
 800674e:	4603      	mov	r3, r0
 8006750:	817b      	strh	r3, [r7, #10]
 8006752:	460b      	mov	r3, r1
 8006754:	813b      	strh	r3, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	2200      	movs	r2, #0
 8006772:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fb24 	bl	8006dc4 <I2C_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006790:	d103      	bne.n	800679a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006798:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e05f      	b.n	800685e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800679e:	897b      	ldrh	r3, [r7, #10]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	492d      	ldr	r1, [pc, #180]	@ (8006868 <I2C_RequestMemoryWrite+0x128>)
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 fb7f 	bl	8006eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e04c      	b.n	800685e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067dc:	6a39      	ldr	r1, [r7, #32]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 fc0a 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d107      	bne.n	8006802 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e02b      	b.n	800685e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d105      	bne.n	8006818 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800680c:	893b      	ldrh	r3, [r7, #8]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	611a      	str	r2, [r3, #16]
 8006816:	e021      	b.n	800685c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006818:	893b      	ldrh	r3, [r7, #8]
 800681a:	0a1b      	lsrs	r3, r3, #8
 800681c:	b29b      	uxth	r3, r3
 800681e:	b2da      	uxtb	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006828:	6a39      	ldr	r1, [r7, #32]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fbe4 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683a:	2b04      	cmp	r3, #4
 800683c:	d107      	bne.n	800684e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800684c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e005      	b.n	800685e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006852:	893b      	ldrh	r3, [r7, #8]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	00010002 	.word	0x00010002

0800686c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af02      	add	r7, sp, #8
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	4608      	mov	r0, r1
 8006876:	4611      	mov	r1, r2
 8006878:	461a      	mov	r2, r3
 800687a:	4603      	mov	r3, r0
 800687c:	817b      	strh	r3, [r7, #10]
 800687e:	460b      	mov	r3, r1
 8006880:	813b      	strh	r3, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006894:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 fa86 	bl	8006dc4 <I2C_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068cc:	d103      	bne.n	80068d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0aa      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068da:	897b      	ldrh	r3, [r7, #10]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80068e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	4952      	ldr	r1, [pc, #328]	@ (8006a38 <I2C_RequestMemoryRead+0x1cc>)
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fae1 	bl	8006eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e097      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006918:	6a39      	ldr	r1, [r7, #32]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fb6c 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00d      	beq.n	8006942 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	2b04      	cmp	r3, #4
 800692c:	d107      	bne.n	800693e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800693c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e076      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d105      	bne.n	8006954 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006948:	893b      	ldrh	r3, [r7, #8]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	611a      	str	r2, [r3, #16]
 8006952:	e021      	b.n	8006998 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006954:	893b      	ldrh	r3, [r7, #8]
 8006956:	0a1b      	lsrs	r3, r3, #8
 8006958:	b29b      	uxth	r3, r3
 800695a:	b2da      	uxtb	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006964:	6a39      	ldr	r1, [r7, #32]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fb46 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	2b04      	cmp	r3, #4
 8006978:	d107      	bne.n	800698a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006988:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e050      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800698e:	893b      	ldrh	r3, [r7, #8]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800699a:	6a39      	ldr	r1, [r7, #32]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 fb2b 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00d      	beq.n	80069c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d107      	bne.n	80069c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e035      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	2200      	movs	r2, #0
 80069dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f9ef 	bl	8006dc4 <I2C_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00d      	beq.n	8006a08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fa:	d103      	bne.n	8006a04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e013      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a08:	897b      	ldrh	r3, [r7, #10]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	4906      	ldr	r1, [pc, #24]	@ (8006a38 <I2C_RequestMemoryRead+0x1cc>)
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fa4a 	bl	8006eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e000      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	00010002 	.word	0x00010002

08006a3c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a50:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a58:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006a6e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006a90:	7cfb      	ldrb	r3, [r7, #19]
 8006a92:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006a96:	2b21      	cmp	r3, #33	@ 0x21
 8006a98:	d007      	beq.n	8006aaa <I2C_DMAXferCplt+0x6e>
 8006a9a:	7cfb      	ldrb	r3, [r7, #19]
 8006a9c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006aa0:	2b22      	cmp	r3, #34	@ 0x22
 8006aa2:	d131      	bne.n	8006b08 <I2C_DMAXferCplt+0xcc>
 8006aa4:	7cbb      	ldrb	r3, [r7, #18]
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d12e      	bne.n	8006b08 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ab8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2200      	movs	r2, #0
 8006abe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ac0:	7cfb      	ldrb	r3, [r7, #19]
 8006ac2:	2b29      	cmp	r3, #41	@ 0x29
 8006ac4:	d10a      	bne.n	8006adc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2221      	movs	r2, #33	@ 0x21
 8006aca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2228      	movs	r2, #40	@ 0x28
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ad4:	6978      	ldr	r0, [r7, #20]
 8006ad6:	f7fe fc71 	bl	80053bc <HAL_I2C_SlaveTxCpltCallback>
 8006ada:	e00c      	b.n	8006af6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
 8006ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ae0:	d109      	bne.n	8006af6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2222      	movs	r2, #34	@ 0x22
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2228      	movs	r2, #40	@ 0x28
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006af0:	6978      	ldr	r0, [r7, #20]
 8006af2:	f7fe fc6d 	bl	80053d0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006b04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b06:	e074      	b.n	8006bf2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d06e      	beq.n	8006bf2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d107      	bne.n	8006b2e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b2c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006b3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b44:	d009      	beq.n	8006b5a <I2C_DMAXferCplt+0x11e>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d006      	beq.n	8006b5a <I2C_DMAXferCplt+0x11e>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006b52:	d002      	beq.n	8006b5a <I2C_DMAXferCplt+0x11e>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d107      	bne.n	8006b6a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b68:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b78:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b88:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006b98:	6978      	ldr	r0, [r7, #20]
 8006b9a:	f7fe fc3b 	bl	8005414 <HAL_I2C_ErrorCallback>
}
 8006b9e:	e028      	b.n	8006bf2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b40      	cmp	r3, #64	@ 0x40
 8006bb2:	d10a      	bne.n	8006bca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006bc2:	6978      	ldr	r0, [r7, #20]
 8006bc4:	f7fa f8c4 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
}
 8006bc8:	e013      	b.n	8006bf2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d002      	beq.n	8006bde <I2C_DMAXferCplt+0x1a2>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d103      	bne.n	8006be6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006be4:	e002      	b.n	8006bec <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2212      	movs	r2, #18
 8006bea:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006bec:	6978      	ldr	r0, [r7, #20]
 8006bee:	f7fe fbdb 	bl	80053a8 <HAL_I2C_MasterRxCpltCallback>
}
 8006bf2:	bf00      	nop
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c14:	2200      	movs	r2, #0
 8006c16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	2200      	movs	r2, #0
 8006c26:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7fd f9b5 	bl	8003f98 <HAL_DMA_GetError>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d01b      	beq.n	8006c6c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c42:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5e:	f043 0210 	orr.w	r2, r3, #16
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7fe fbd4 	bl	8005414 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c8c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8006dbc <I2C_DMAAbort+0x148>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	08db      	lsrs	r3, r3, #3
 8006c94:	4a4a      	ldr	r2, [pc, #296]	@ (8006dc0 <I2C_DMAAbort+0x14c>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	0a1a      	lsrs	r2, r3, #8
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	00da      	lsls	r2, r3, #3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb2:	f043 0220 	orr.w	r2, r3, #32
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006cba:	e00a      	b.n	8006cd2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd0:	d0ea      	beq.n	8006ca8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cde:	2200      	movs	r2, #0
 8006ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	2200      	movs	r2, #0
 8006cf0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d00:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2200      	movs	r2, #0
 8006d06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d14:	2200      	movs	r2, #0
 8006d16:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d24:	2200      	movs	r2, #0
 8006d26:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b60      	cmp	r3, #96	@ 0x60
 8006d42:	d10e      	bne.n	8006d62 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2200      	movs	r2, #0
 8006d58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d5a:	6978      	ldr	r0, [r7, #20]
 8006d5c:	f7fe fb64 	bl	8005428 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d60:	e027      	b.n	8006db2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d62:	7cfb      	ldrb	r3, [r7, #19]
 8006d64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d68:	2b28      	cmp	r3, #40	@ 0x28
 8006d6a:	d117      	bne.n	8006d9c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2228      	movs	r2, #40	@ 0x28
 8006d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d9a:	e007      	b.n	8006dac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006dac:	6978      	ldr	r0, [r7, #20]
 8006dae:	f7fe fb31 	bl	8005414 <HAL_I2C_ErrorCallback>
}
 8006db2:	bf00      	nop
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	2000002c 	.word	0x2000002c
 8006dc0:	14f8b589 	.word	0x14f8b589

08006dc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dd4:	e048      	b.n	8006e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d044      	beq.n	8006e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7fb ffb9 	bl	8002d54 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d139      	bne.n	8006e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	0c1b      	lsrs	r3, r3, #16
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d10d      	bne.n	8006e1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	43da      	mvns	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	bf0c      	ite	eq
 8006e10:	2301      	moveq	r3, #1
 8006e12:	2300      	movne	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	e00c      	b.n	8006e34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	43da      	mvns	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	4013      	ands	r3, r2
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bf0c      	ite	eq
 8006e2c:	2301      	moveq	r3, #1
 8006e2e:	2300      	movne	r3, #0
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d116      	bne.n	8006e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e54:	f043 0220 	orr.w	r2, r3, #32
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e023      	b.n	8006eb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	0c1b      	lsrs	r3, r3, #16
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10d      	bne.n	8006e8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	43da      	mvns	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	e00c      	b.n	8006ea8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	43da      	mvns	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2301      	moveq	r3, #1
 8006ea2:	2300      	movne	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d093      	beq.n	8006dd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ec6:	e071      	b.n	8006fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed6:	d123      	bne.n	8006f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ee6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ef0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0c:	f043 0204 	orr.w	r2, r3, #4
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e067      	b.n	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d041      	beq.n	8006fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f28:	f7fb ff14 	bl	8002d54 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d302      	bcc.n	8006f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d136      	bne.n	8006fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	0c1b      	lsrs	r3, r3, #16
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d10c      	bne.n	8006f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	43da      	mvns	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4013      	ands	r3, r2
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bf14      	ite	ne
 8006f5a:	2301      	movne	r3, #1
 8006f5c:	2300      	moveq	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	e00b      	b.n	8006f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	43da      	mvns	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d016      	beq.n	8006fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f98:	f043 0220 	orr.w	r2, r3, #32
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e021      	b.n	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	0c1b      	lsrs	r3, r3, #16
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d10c      	bne.n	8006fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	43da      	mvns	r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e00b      	b.n	8006fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	43da      	mvns	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bf14      	ite	ne
 8006fe2:	2301      	movne	r3, #1
 8006fe4:	2300      	moveq	r3, #0
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f47f af6d 	bne.w	8006ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007004:	e034      	b.n	8007070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 f8b8 	bl	800717c <I2C_IsAcknowledgeFailed>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e034      	b.n	8007080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d028      	beq.n	8007070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fb fe99 	bl	8002d54 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d11d      	bne.n	8007070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703e:	2b80      	cmp	r3, #128	@ 0x80
 8007040:	d016      	beq.n	8007070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e007      	b.n	8007080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707a:	2b80      	cmp	r3, #128	@ 0x80
 800707c:	d1c3      	bne.n	8007006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007094:	e034      	b.n	8007100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f870 	bl	800717c <I2C_IsAcknowledgeFailed>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e034      	b.n	8007110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ac:	d028      	beq.n	8007100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ae:	f7fb fe51 	bl	8002d54 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d302      	bcc.n	80070c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11d      	bne.n	8007100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d016      	beq.n	8007100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ec:	f043 0220 	orr.w	r2, r3, #32
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e007      	b.n	8007110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b04      	cmp	r3, #4
 800710c:	d1c3      	bne.n	8007096 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007124:	4b13      	ldr	r3, [pc, #76]	@ (8007174 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	08db      	lsrs	r3, r3, #3
 800712a:	4a13      	ldr	r2, [pc, #76]	@ (8007178 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800712c:	fba2 2303 	umull	r2, r3, r2, r3
 8007130:	0a1a      	lsrs	r2, r3, #8
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3b01      	subs	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	f043 0220 	orr.w	r2, r3, #32
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e008      	b.n	8007168 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007164:	d0e9      	beq.n	800713a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	2000002c 	.word	0x2000002c
 8007178:	14f8b589 	.word	0x14f8b589

0800717c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800718e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007192:	d11b      	bne.n	80071cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800719c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	f043 0204 	orr.w	r2, r3, #4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80071ea:	d103      	bne.n	80071f4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80071f2:	e007      	b.n	8007204 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80071fc:	d102      	bne.n	8007204 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2208      	movs	r2, #8
 8007202:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af02      	add	r7, sp, #8
 8007216:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e101      	b.n	8007426 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f006 f935 	bl	800d4ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2203      	movs	r2, #3
 8007246:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007250:	d102      	bne.n	8007258 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f002 fc8c 	bl	8009b7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	7c1a      	ldrb	r2, [r3, #16]
 800726a:	f88d 2000 	strb.w	r2, [sp]
 800726e:	3304      	adds	r3, #4
 8007270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007272:	f002 fb6b 	bl	800994c <USB_CoreInit>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e0ce      	b.n	8007426 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f002 fc84 	bl	8009b9c <USB_SetCurrentMode>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2202      	movs	r2, #2
 800729e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e0bf      	b.n	8007426 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
 80072aa:	e04a      	b.n	8007342 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072ac:	7bfa      	ldrb	r2, [r7, #15]
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	4613      	mov	r3, r2
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	3315      	adds	r3, #21
 80072bc:	2201      	movs	r2, #1
 80072be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	3314      	adds	r3, #20
 80072d0:	7bfa      	ldrb	r2, [r7, #15]
 80072d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072d4:	7bfa      	ldrb	r2, [r7, #15]
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	b298      	uxth	r0, r3
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	332e      	adds	r3, #46	@ 0x2e
 80072e8:	4602      	mov	r2, r0
 80072ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3318      	adds	r3, #24
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007300:	7bfa      	ldrb	r2, [r7, #15]
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	331c      	adds	r3, #28
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007314:	7bfa      	ldrb	r2, [r7, #15]
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	3320      	adds	r3, #32
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007328:	7bfa      	ldrb	r2, [r7, #15]
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4613      	mov	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	3324      	adds	r3, #36	@ 0x24
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	3301      	adds	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	791b      	ldrb	r3, [r3, #4]
 8007346:	7bfa      	ldrb	r2, [r7, #15]
 8007348:	429a      	cmp	r2, r3
 800734a:	d3af      	bcc.n	80072ac <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	e044      	b.n	80073dc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007352:	7bfa      	ldrb	r2, [r7, #15]
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	440b      	add	r3, r1
 8007360:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007368:	7bfa      	ldrb	r2, [r7, #15]
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800737a:	7bfa      	ldrb	r2, [r7, #15]
 800737c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800737e:	7bfa      	ldrb	r2, [r7, #15]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007394:	7bfa      	ldrb	r2, [r7, #15]
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073aa:	7bfa      	ldrb	r2, [r7, #15]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073c0:	7bfa      	ldrb	r2, [r7, #15]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	3301      	adds	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	791b      	ldrb	r3, [r3, #4]
 80073e0:	7bfa      	ldrb	r2, [r7, #15]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d3b5      	bcc.n	8007352 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	7c1a      	ldrb	r2, [r3, #16]
 80073ee:	f88d 2000 	strb.w	r2, [sp]
 80073f2:	3304      	adds	r3, #4
 80073f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073f6:	f002 fc1d 	bl	8009c34 <USB_DevInit>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e00c      	b.n	8007426 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f003 fc67 	bl	800acf2 <USB_DevDisconnect>

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_PCD_Start+0x1c>
 8007446:	2302      	movs	r3, #2
 8007448:	e022      	b.n	8007490 <HAL_PCD_Start+0x62>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d009      	beq.n	8007472 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007462:	2b01      	cmp	r3, #1
 8007464:	d105      	bne.n	8007472 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f002 fb6e 	bl	8009b58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f003 fc15 	bl	800acb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007498:	b590      	push	{r4, r7, lr}
 800749a:	b08d      	sub	sp, #52	@ 0x34
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f003 fcd3 	bl	800ae5a <USB_GetMode>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f040 848c 	bne.w	8007dd4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f003 fc37 	bl	800ad34 <USB_ReadInterrupts>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8482 	beq.w	8007dd2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f003 fc24 	bl	800ad34 <USB_ReadInterrupts>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d107      	bne.n	8007506 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	695a      	ldr	r2, [r3, #20]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f002 0202 	and.w	r2, r2, #2
 8007504:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f003 fc12 	bl	800ad34 <USB_ReadInterrupts>
 8007510:	4603      	mov	r3, r0
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b10      	cmp	r3, #16
 8007518:	d161      	bne.n	80075de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699a      	ldr	r2, [r3, #24]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0210 	bic.w	r2, r2, #16
 8007528:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f003 020f 	and.w	r2, r3, #15
 8007536:	4613      	mov	r3, r2
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	4413      	add	r3, r2
 8007546:	3304      	adds	r3, #4
 8007548:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007550:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007554:	d124      	bne.n	80075a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800755c:	4013      	ands	r3, r2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d035      	beq.n	80075ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800756c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007570:	b29b      	uxth	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	6a38      	ldr	r0, [r7, #32]
 8007576:	f003 fa49 	bl	800aa0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007586:	441a      	add	r2, r3
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	695a      	ldr	r2, [r3, #20]
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007598:	441a      	add	r2, r3
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	615a      	str	r2, [r3, #20]
 800759e:	e016      	b.n	80075ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80075a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075aa:	d110      	bne.n	80075ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075b2:	2208      	movs	r2, #8
 80075b4:	4619      	mov	r1, r3
 80075b6:	6a38      	ldr	r0, [r7, #32]
 80075b8:	f003 fa28 	bl	800aa0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	695a      	ldr	r2, [r3, #20]
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	091b      	lsrs	r3, r3, #4
 80075c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c8:	441a      	add	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0210 	orr.w	r2, r2, #16
 80075dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f003 fba6 	bl	800ad34 <USB_ReadInterrupts>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80075f2:	f040 80a7 	bne.w	8007744 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f003 fbab 	bl	800ad5a <USB_ReadDevAllOutEpInterrupt>
 8007604:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007606:	e099      	b.n	800773c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 808e 	beq.w	8007730 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f003 fbcf 	bl	800adc2 <USB_ReadDevOutEPInterrupt>
 8007624:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00c      	beq.n	800764a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763c:	461a      	mov	r2, r3
 800763e:	2301      	movs	r3, #1
 8007640:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fea3 	bl	8008390 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007660:	461a      	mov	r2, r3
 8007662:	2308      	movs	r3, #8
 8007664:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007666:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 ff79 	bl	8008560 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007684:	461a      	mov	r2, r3
 8007686:	2310      	movs	r3, #16
 8007688:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d030      	beq.n	80076f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769c:	2b80      	cmp	r3, #128	@ 0x80
 800769e:	d109      	bne.n	80076b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80076b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b6:	4613      	mov	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	3304      	adds	r3, #4
 80076c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	78db      	ldrb	r3, [r3, #3]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d108      	bne.n	80076e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2200      	movs	r2, #0
 80076d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f005 ffe0 	bl	800d6a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f0:	461a      	mov	r2, r3
 80076f2:	2302      	movs	r3, #2
 80076f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d008      	beq.n	8007712 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770c:	461a      	mov	r2, r3
 800770e:	2320      	movs	r3, #32
 8007710:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d009      	beq.n	8007730 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007728:	461a      	mov	r2, r3
 800772a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800772e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	3301      	adds	r3, #1
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	2b00      	cmp	r3, #0
 8007740:	f47f af62 	bne.w	8007608 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f003 faf3 	bl	800ad34 <USB_ReadInterrupts>
 800774e:	4603      	mov	r3, r0
 8007750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007754:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007758:	f040 80db 	bne.w	8007912 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f003 fb14 	bl	800ad8e <USB_ReadDevAllInEpInterrupt>
 8007766:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800776c:	e0cd      	b.n	800790a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80c2 	beq.w	80078fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	4611      	mov	r1, r2
 8007784:	4618      	mov	r0, r3
 8007786:	f003 fb3a 	bl	800adfe <USB_ReadDevInEPInterrupt>
 800778a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d057      	beq.n	8007846 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	2201      	movs	r2, #1
 800779e:	fa02 f303 	lsl.w	r3, r2, r3
 80077a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	43db      	mvns	r3, r3
 80077b0:	69f9      	ldr	r1, [r7, #28]
 80077b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b6:	4013      	ands	r3, r2
 80077b8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c6:	461a      	mov	r2, r3
 80077c8:	2301      	movs	r3, #1
 80077ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	799b      	ldrb	r3, [r3, #6]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d132      	bne.n	800783a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	3320      	adds	r3, #32
 80077e4:	6819      	ldr	r1, [r3, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ea:	4613      	mov	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4403      	add	r3, r0
 80077f4:	331c      	adds	r3, #28
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4419      	add	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4403      	add	r3, r0
 8007808:	3320      	adds	r3, #32
 800780a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d113      	bne.n	800783a <HAL_PCD_IRQHandler+0x3a2>
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	3324      	adds	r3, #36	@ 0x24
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d108      	bne.n	800783a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007832:	461a      	mov	r2, r3
 8007834:	2101      	movs	r1, #1
 8007836:	f003 fb41 	bl	800aebc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	b2db      	uxtb	r3, r3
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f005 feb4 	bl	800d5ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800785c:	461a      	mov	r2, r3
 800785e:	2308      	movs	r3, #8
 8007860:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007878:	461a      	mov	r2, r3
 800787a:	2310      	movs	r3, #16
 800787c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007894:	461a      	mov	r2, r3
 8007896:	2340      	movs	r3, #64	@ 0x40
 8007898:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d023      	beq.n	80078ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80078a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078a6:	6a38      	ldr	r0, [r7, #32]
 80078a8:	f002 fb28 	bl	8009efc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80078ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ae:	4613      	mov	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	3310      	adds	r3, #16
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	4413      	add	r3, r2
 80078bc:	3304      	adds	r3, #4
 80078be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	78db      	ldrb	r3, [r3, #3]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d108      	bne.n	80078da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2200      	movs	r2, #0
 80078cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f005 fef7 	bl	800d6c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e6:	461a      	mov	r2, r3
 80078e8:	2302      	movs	r3, #2
 80078ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80078f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fcbd 	bl	8008278 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	3301      	adds	r3, #1
 8007902:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	f47f af2e 	bne.w	800776e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f003 fa0c 	bl	800ad34 <USB_ReadInterrupts>
 800791c:	4603      	mov	r3, r0
 800791e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007922:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007926:	d122      	bne.n	800796e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007942:	2b01      	cmp	r3, #1
 8007944:	d108      	bne.n	8007958 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800794e:	2100      	movs	r1, #0
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fea3 	bl	800869c <HAL_PCDEx_LPM_Callback>
 8007956:	e002      	b.n	800795e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f005 fe95 	bl	800d688 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695a      	ldr	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800796c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f003 f9de 	bl	800ad34 <USB_ReadInterrupts>
 8007978:	4603      	mov	r3, r0
 800797a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007982:	d112      	bne.n	80079aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b01      	cmp	r3, #1
 8007992:	d102      	bne.n	800799a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f005 fe51 	bl	800d63c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695a      	ldr	r2, [r3, #20]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80079a8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f003 f9c0 	bl	800ad34 <USB_ReadInterrupts>
 80079b4:	4603      	mov	r3, r0
 80079b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079be:	f040 80b7 	bne.w	8007b30 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2110      	movs	r1, #16
 80079dc:	4618      	mov	r0, r3
 80079de:	f002 fa8d 	bl	8009efc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079e2:	2300      	movs	r3, #0
 80079e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079e6:	e046      	b.n	8007a76 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f4:	461a      	mov	r2, r3
 80079f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a2e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a6e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a72:	3301      	adds	r3, #1
 8007a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	791b      	ldrb	r3, [r3, #4]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d3b2      	bcc.n	80079e8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a90:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007a94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	7bdb      	ldrb	r3, [r3, #15]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d016      	beq.n	8007acc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007aae:	f043 030b 	orr.w	r3, r3, #11
 8007ab2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ac4:	f043 030b 	orr.w	r3, r3, #11
 8007ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007aca:	e015      	b.n	8007af8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ada:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007ade:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007ae2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007af2:	f043 030b 	orr.w	r3, r3, #11
 8007af6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f003 f9ce 	bl	800aebc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695a      	ldr	r2, [r3, #20]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f003 f8fd 	bl	800ad34 <USB_ReadInterrupts>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b44:	d123      	bne.n	8007b8e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f003 f993 	bl	800ae76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f002 fa4a 	bl	8009fee <USB_GetDevSpeed>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681c      	ldr	r4, [r3, #0]
 8007b66:	f001 f9c9 	bl	8008efc <HAL_RCC_GetHCLKFreq>
 8007b6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b70:	461a      	mov	r2, r3
 8007b72:	4620      	mov	r0, r4
 8007b74:	f001 ff4e 	bl	8009a14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f005 fd40 	bl	800d5fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f003 f8ce 	bl	800ad34 <USB_ReadInterrupts>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d10a      	bne.n	8007bb8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f005 fd1d 	bl	800d5e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f002 0208 	and.w	r2, r2, #8
 8007bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f003 f8b9 	bl	800ad34 <USB_ReadInterrupts>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc8:	2b80      	cmp	r3, #128	@ 0x80
 8007bca:	d123      	bne.n	8007c14 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bd8:	2301      	movs	r3, #1
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bdc:	e014      	b.n	8007c08 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007be2:	4613      	mov	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	440b      	add	r3, r1
 8007bec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d105      	bne.n	8007c02 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fb0a 	bl	8008216 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	3301      	adds	r3, #1
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d3e4      	bcc.n	8007bde <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f003 f88b 	bl	800ad34 <USB_ReadInterrupts>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c28:	d13c      	bne.n	8007ca4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c2e:	e02b      	b.n	8007c88 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c44:	4613      	mov	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3318      	adds	r3, #24
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d115      	bne.n	8007c82 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007c56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da12      	bge.n	8007c82 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c60:	4613      	mov	r3, r2
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	3317      	adds	r3, #23
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 faca 	bl	8008216 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	3301      	adds	r3, #1
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	791b      	ldrb	r3, [r3, #4]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d3cd      	bcc.n	8007c30 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695a      	ldr	r2, [r3, #20]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f003 f843 	bl	800ad34 <USB_ReadInterrupts>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cb8:	d156      	bne.n	8007d68 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cba:	2301      	movs	r3, #1
 8007cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cbe:	e045      	b.n	8007d4c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d12e      	bne.n	8007d46 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007ce8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da2b      	bge.n	8007d46 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	0c1a      	lsrs	r2, r3, #16
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007cf8:	4053      	eors	r3, r2
 8007cfa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d121      	bne.n	8007d46 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007d14:	2201      	movs	r2, #1
 8007d16:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	69fa      	ldr	r2, [r7, #28]
 8007d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d42:	6053      	str	r3, [r2, #4]
            break;
 8007d44:	e008      	b.n	8007d58 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	3301      	adds	r3, #1
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	791b      	ldrb	r3, [r3, #4]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d3b3      	bcc.n	8007cc0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f002 ffe1 	bl	800ad34 <USB_ReadInterrupts>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d7c:	d10a      	bne.n	8007d94 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f005 fcb4 	bl	800d6ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f002 ffcb 	bl	800ad34 <USB_ReadInterrupts>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d115      	bne.n	8007dd4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f005 fca4 	bl	800d708 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6859      	ldr	r1, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]
 8007dd0:	e000      	b.n	8007dd4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007dd2:	bf00      	nop
    }
  }
}
 8007dd4:	3734      	adds	r7, #52	@ 0x34
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd90      	pop	{r4, r7, pc}

08007dda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_PCD_SetAddress+0x1a>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e012      	b.n	8007e1a <HAL_PCD_SetAddress+0x40>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	78fa      	ldrb	r2, [r7, #3]
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f002 ff2a 	bl	800ac64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4603      	mov	r3, r0
 8007e32:	70fb      	strb	r3, [r7, #3]
 8007e34:	460b      	mov	r3, r1
 8007e36:	803b      	strh	r3, [r7, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	da0f      	bge.n	8007e68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	f003 020f 	and.w	r2, r3, #15
 8007e4e:	4613      	mov	r3, r2
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	3310      	adds	r3, #16
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	705a      	strb	r2, [r3, #1]
 8007e66:	e00f      	b.n	8007e88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	f003 020f 	and.w	r2, r3, #15
 8007e6e:	4613      	mov	r3, r2
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	3304      	adds	r3, #4
 8007e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	f003 030f 	and.w	r3, r3, #15
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007e94:	883b      	ldrh	r3, [r7, #0]
 8007e96:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	78ba      	ldrb	r2, [r7, #2]
 8007ea2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007eb6:	78bb      	ldrb	r3, [r7, #2]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d102      	bne.n	8007ec2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d101      	bne.n	8007ed0 <HAL_PCD_EP_Open+0xae>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e00e      	b.n	8007eee <HAL_PCD_EP_Open+0xcc>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68f9      	ldr	r1, [r7, #12]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f002 f8aa 	bl	800a038 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	da0f      	bge.n	8007f2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	f003 020f 	and.w	r2, r3, #15
 8007f10:	4613      	mov	r3, r2
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	4413      	add	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	3310      	adds	r3, #16
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3304      	adds	r3, #4
 8007f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	705a      	strb	r2, [r3, #1]
 8007f28:	e00f      	b.n	8007f4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	f003 020f 	and.w	r2, r3, #15
 8007f30:	4613      	mov	r3, r2
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	4413      	add	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	4413      	add	r3, r2
 8007f40:	3304      	adds	r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_PCD_EP_Close+0x6e>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e00e      	b.n	8007f82 <HAL_PCD_EP_Close+0x8c>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68f9      	ldr	r1, [r7, #12]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f002 f8e8 	bl	800a148 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b086      	sub	sp, #24
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
 8007f96:	460b      	mov	r3, r1
 8007f98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f9a:	7afb      	ldrb	r3, [r7, #11]
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	f003 030f 	and.w	r3, r3, #15
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	799b      	ldrb	r3, [r3, #6]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d102      	bne.n	8007fe6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	799b      	ldrb	r3, [r3, #6]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6979      	ldr	r1, [r7, #20]
 8007ff2:	f002 f985 	bl	800a300 <USB_EPStartXfer>

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	f003 020f 	and.w	r2, r3, #15
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008022:	681b      	ldr	r3, [r3, #0]
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	607a      	str	r2, [r7, #4]
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	460b      	mov	r3, r1
 800803e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008040:	7afb      	ldrb	r3, [r7, #11]
 8008042:	f003 020f 	and.w	r2, r3, #15
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	3310      	adds	r3, #16
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4413      	add	r3, r2
 8008054:	3304      	adds	r3, #4
 8008056:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2200      	movs	r2, #0
 8008068:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2201      	movs	r2, #1
 800806e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	b2da      	uxtb	r2, r3
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	799b      	ldrb	r3, [r3, #6]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d102      	bne.n	800808a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	799b      	ldrb	r3, [r3, #6]
 8008092:	461a      	mov	r2, r3
 8008094:	6979      	ldr	r1, [r7, #20]
 8008096:	f002 f933 	bl	800a300 <USB_EPStartXfer>

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	7912      	ldrb	r2, [r2, #4]
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e04f      	b.n	8008162 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80080c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	da0f      	bge.n	80080ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	f003 020f 	and.w	r2, r3, #15
 80080d0:	4613      	mov	r3, r2
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	3310      	adds	r3, #16
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	4413      	add	r3, r2
 80080de:	3304      	adds	r3, #4
 80080e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	705a      	strb	r2, [r3, #1]
 80080e8:	e00d      	b.n	8008106 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4613      	mov	r3, r2
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	4413      	add	r3, r2
 80080fc:	3304      	adds	r3, #4
 80080fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	b2da      	uxtb	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_PCD_EP_SetStall+0x82>
 8008122:	2302      	movs	r3, #2
 8008124:	e01d      	b.n	8008162 <HAL_PCD_EP_SetStall+0xbe>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68f9      	ldr	r1, [r7, #12]
 8008134:	4618      	mov	r0, r3
 8008136:	f002 fcc1 	bl	800aabc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	2b00      	cmp	r3, #0
 8008142:	d109      	bne.n	8008158 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	7999      	ldrb	r1, [r3, #6]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008152:	461a      	mov	r2, r3
 8008154:	f002 feb2 	bl	800aebc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7912      	ldrb	r2, [r2, #4]
 8008180:	4293      	cmp	r3, r2
 8008182:	d901      	bls.n	8008188 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e042      	b.n	800820e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800818c:	2b00      	cmp	r3, #0
 800818e:	da0f      	bge.n	80081b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	f003 020f 	and.w	r2, r3, #15
 8008196:	4613      	mov	r3, r2
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	3310      	adds	r3, #16
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	4413      	add	r3, r2
 80081a4:	3304      	adds	r3, #4
 80081a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2201      	movs	r2, #1
 80081ac:	705a      	strb	r2, [r3, #1]
 80081ae:	e00f      	b.n	80081d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	f003 020f 	and.w	r2, r3, #15
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	3304      	adds	r3, #4
 80081c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081d6:	78fb      	ldrb	r3, [r7, #3]
 80081d8:	f003 030f 	and.w	r3, r3, #15
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_PCD_EP_ClrStall+0x86>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e00e      	b.n	800820e <HAL_PCD_EP_ClrStall+0xa4>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68f9      	ldr	r1, [r7, #12]
 80081fe:	4618      	mov	r0, r3
 8008200:	f002 fcca 	bl	800ab98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008226:	2b00      	cmp	r3, #0
 8008228:	da0c      	bge.n	8008244 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	f003 020f 	and.w	r2, r3, #15
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	3310      	adds	r3, #16
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	3304      	adds	r3, #4
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	e00c      	b.n	800825e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	f003 020f 	and.w	r2, r3, #15
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4413      	add	r3, r2
 800825a:	3304      	adds	r3, #4
 800825c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	4618      	mov	r0, r3
 8008266:	f002 fae9 	bl	800a83c <USB_EPStopXfer>
 800826a:	4603      	mov	r3, r0
 800826c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800826e:	7afb      	ldrb	r3, [r7, #11]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08a      	sub	sp, #40	@ 0x28
 800827c:	af02      	add	r7, sp, #8
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	4613      	mov	r3, r2
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	3310      	adds	r3, #16
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	4413      	add	r3, r2
 800829c:	3304      	adds	r3, #4
 800829e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	695a      	ldr	r2, [r3, #20]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d901      	bls.n	80082b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e06b      	b.n	8008388 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d902      	bls.n	80082cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	3303      	adds	r3, #3
 80082d0:	089b      	lsrs	r3, r3, #2
 80082d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082d4:	e02a      	b.n	800832c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	691a      	ldr	r2, [r3, #16]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d902      	bls.n	80082f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	3303      	adds	r3, #3
 80082f6:	089b      	lsrs	r3, r3, #2
 80082f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	68d9      	ldr	r1, [r3, #12]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	b2da      	uxtb	r2, r3
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	4603      	mov	r3, r0
 800830e:	6978      	ldr	r0, [r7, #20]
 8008310:	f002 fb3e 	bl	800a990 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	441a      	add	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	695a      	ldr	r2, [r3, #20]
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	441a      	add	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	429a      	cmp	r2, r3
 8008340:	d809      	bhi.n	8008356 <PCD_WriteEmptyTxFifo+0xde>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	695a      	ldr	r2, [r3, #20]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800834a:	429a      	cmp	r2, r3
 800834c:	d203      	bcs.n	8008356 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1bf      	bne.n	80082d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	429a      	cmp	r2, r3
 8008360:	d811      	bhi.n	8008386 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	2201      	movs	r2, #1
 800836a:	fa02 f303 	lsl.w	r3, r2, r3
 800836e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	43db      	mvns	r3, r3
 800837c:	6939      	ldr	r1, [r7, #16]
 800837e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008382:	4013      	ands	r3, r2
 8008384:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3720      	adds	r7, #32
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	333c      	adds	r3, #60	@ 0x3c
 80083a8:	3304      	adds	r3, #4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	799b      	ldrb	r3, [r3, #6]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d17b      	bne.n	80084be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d015      	beq.n	80083fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	4a61      	ldr	r2, [pc, #388]	@ (8008558 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	f240 80b9 	bls.w	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 80b3 	beq.w	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f2:	461a      	mov	r2, r3
 80083f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083f8:	6093      	str	r3, [r2, #8]
 80083fa:	e0a7      	b.n	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b00      	cmp	r3, #0
 8008404:	d009      	beq.n	800841a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008412:	461a      	mov	r2, r3
 8008414:	2320      	movs	r3, #32
 8008416:	6093      	str	r3, [r2, #8]
 8008418:	e098      	b.n	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008420:	2b00      	cmp	r3, #0
 8008422:	f040 8093 	bne.w	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	4a4b      	ldr	r2, [pc, #300]	@ (8008558 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d90f      	bls.n	800844e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00a      	beq.n	800844e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008444:	461a      	mov	r2, r3
 8008446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800844a:	6093      	str	r3, [r2, #8]
 800844c:	e07e      	b.n	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4613      	mov	r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	4413      	add	r3, r2
 8008460:	3304      	adds	r3, #4
 8008462:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	0159      	lsls	r1, r3, #5
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	440b      	add	r3, r1
 8008470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d114      	bne.n	80084b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008498:	461a      	mov	r2, r3
 800849a:	2101      	movs	r1, #1
 800849c:	f002 fd0e 	bl	800aebc <USB_EP0_OutStart>
 80084a0:	e006      	b.n	80084b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	441a      	add	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f005 f85e 	bl	800d578 <HAL_PCD_DataOutStageCallback>
 80084bc:	e046      	b.n	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4a26      	ldr	r2, [pc, #152]	@ (800855c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d124      	bne.n	8008510 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084dc:	461a      	mov	r2, r3
 80084de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084e2:	6093      	str	r3, [r2, #8]
 80084e4:	e032      	b.n	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d008      	beq.n	8008502 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fc:	461a      	mov	r2, r3
 80084fe:	2320      	movs	r3, #32
 8008500:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f005 f835 	bl	800d578 <HAL_PCD_DataOutStageCallback>
 800850e:	e01d      	b.n	800854c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d114      	bne.n	8008540 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	4613      	mov	r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d108      	bne.n	8008540 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008538:	461a      	mov	r2, r3
 800853a:	2100      	movs	r1, #0
 800853c:	f002 fcbe 	bl	800aebc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f005 f816 	bl	800d578 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3720      	adds	r7, #32
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	4f54300a 	.word	0x4f54300a
 800855c:	4f54310a 	.word	0x4f54310a

08008560 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	333c      	adds	r3, #60	@ 0x3c
 8008578:	3304      	adds	r3, #4
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d90e      	bls.n	80085b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800859c:	2b00      	cmp	r3, #0
 800859e:	d009      	beq.n	80085b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ac:	461a      	mov	r2, r3
 80085ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f004 ffcd 	bl	800d554 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4a0a      	ldr	r2, [pc, #40]	@ (80085e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d90c      	bls.n	80085dc <PCD_EP_OutSetupPacket_int+0x7c>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	799b      	ldrb	r3, [r3, #6]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d108      	bne.n	80085dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80085d4:	461a      	mov	r2, r3
 80085d6:	2101      	movs	r1, #1
 80085d8:	f002 fc70 	bl	800aebc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	4f54300a 	.word	0x4f54300a

080085ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
 80085f8:	4613      	mov	r3, r2
 80085fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008602:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d107      	bne.n	800861a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800860a:	883b      	ldrh	r3, [r7, #0]
 800860c:	0419      	lsls	r1, r3, #16
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	430a      	orrs	r2, r1
 8008616:	629a      	str	r2, [r3, #40]	@ 0x28
 8008618:	e028      	b.n	800866c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008620:	0c1b      	lsrs	r3, r3, #16
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	4413      	add	r3, r2
 8008626:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008628:	2300      	movs	r3, #0
 800862a:	73fb      	strb	r3, [r7, #15]
 800862c:	e00d      	b.n	800864a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	3340      	adds	r3, #64	@ 0x40
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	0c1b      	lsrs	r3, r3, #16
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4413      	add	r3, r2
 8008642:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	3301      	adds	r3, #1
 8008648:	73fb      	strb	r3, [r7, #15]
 800864a:	7bfa      	ldrb	r2, [r7, #15]
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	3b01      	subs	r3, #1
 8008650:	429a      	cmp	r2, r3
 8008652:	d3ec      	bcc.n	800862e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008654:	883b      	ldrh	r3, [r7, #0]
 8008656:	0418      	lsls	r0, r3, #16
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6819      	ldr	r1, [r3, #0]
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	3b01      	subs	r3, #1
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	4302      	orrs	r2, r0
 8008664:	3340      	adds	r3, #64	@ 0x40
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	887a      	ldrh	r2, [r7, #2]
 800868c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e267      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d075      	beq.n	80087be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80086d2:	4b88      	ldr	r3, [pc, #544]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f003 030c 	and.w	r3, r3, #12
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d00c      	beq.n	80086f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086de:	4b85      	ldr	r3, [pc, #532]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80086e6:	2b08      	cmp	r3, #8
 80086e8:	d112      	bne.n	8008710 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ea:	4b82      	ldr	r3, [pc, #520]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086f6:	d10b      	bne.n	8008710 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f8:	4b7e      	ldr	r3, [pc, #504]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d05b      	beq.n	80087bc <HAL_RCC_OscConfig+0x108>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d157      	bne.n	80087bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e242      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008718:	d106      	bne.n	8008728 <HAL_RCC_OscConfig+0x74>
 800871a:	4b76      	ldr	r3, [pc, #472]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a75      	ldr	r2, [pc, #468]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	e01d      	b.n	8008764 <HAL_RCC_OscConfig+0xb0>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008730:	d10c      	bne.n	800874c <HAL_RCC_OscConfig+0x98>
 8008732:	4b70      	ldr	r3, [pc, #448]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a6f      	ldr	r2, [pc, #444]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	4b6d      	ldr	r3, [pc, #436]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a6c      	ldr	r2, [pc, #432]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	e00b      	b.n	8008764 <HAL_RCC_OscConfig+0xb0>
 800874c:	4b69      	ldr	r3, [pc, #420]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a68      	ldr	r2, [pc, #416]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	4b66      	ldr	r3, [pc, #408]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a65      	ldr	r2, [pc, #404]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 800875e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d013      	beq.n	8008794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800876c:	f7fa faf2 	bl	8002d54 <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008774:	f7fa faee 	bl	8002d54 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b64      	cmp	r3, #100	@ 0x64
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e207      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008786:	4b5b      	ldr	r3, [pc, #364]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0f0      	beq.n	8008774 <HAL_RCC_OscConfig+0xc0>
 8008792:	e014      	b.n	80087be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008794:	f7fa fade 	bl	8002d54 <HAL_GetTick>
 8008798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800879c:	f7fa fada 	bl	8002d54 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b64      	cmp	r3, #100	@ 0x64
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e1f3      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ae:	4b51      	ldr	r3, [pc, #324]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1f0      	bne.n	800879c <HAL_RCC_OscConfig+0xe8>
 80087ba:	e000      	b.n	80087be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d063      	beq.n	8008892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80087ca:	4b4a      	ldr	r3, [pc, #296]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 030c 	and.w	r3, r3, #12
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087d6:	4b47      	ldr	r3, [pc, #284]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d11c      	bne.n	800881c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087e2:	4b44      	ldr	r3, [pc, #272]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d116      	bne.n	800881c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087ee:	4b41      	ldr	r3, [pc, #260]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_RCC_OscConfig+0x152>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d001      	beq.n	8008806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e1c7      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008806:	4b3b      	ldr	r3, [pc, #236]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	00db      	lsls	r3, r3, #3
 8008814:	4937      	ldr	r1, [pc, #220]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008816:	4313      	orrs	r3, r2
 8008818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881a:	e03a      	b.n	8008892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d020      	beq.n	8008866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008824:	4b34      	ldr	r3, [pc, #208]	@ (80088f8 <HAL_RCC_OscConfig+0x244>)
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882a:	f7fa fa93 	bl	8002d54 <HAL_GetTick>
 800882e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008830:	e008      	b.n	8008844 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008832:	f7fa fa8f 	bl	8002d54 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e1a8      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008844:	4b2b      	ldr	r3, [pc, #172]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f0      	beq.n	8008832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008850:	4b28      	ldr	r3, [pc, #160]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	4925      	ldr	r1, [pc, #148]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008860:	4313      	orrs	r3, r2
 8008862:	600b      	str	r3, [r1, #0]
 8008864:	e015      	b.n	8008892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008866:	4b24      	ldr	r3, [pc, #144]	@ (80088f8 <HAL_RCC_OscConfig+0x244>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800886c:	f7fa fa72 	bl	8002d54 <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008872:	e008      	b.n	8008886 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008874:	f7fa fa6e 	bl	8002d54 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b02      	cmp	r3, #2
 8008880:	d901      	bls.n	8008886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e187      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008886:	4b1b      	ldr	r3, [pc, #108]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f0      	bne.n	8008874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d036      	beq.n	800890c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d016      	beq.n	80088d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088a6:	4b15      	ldr	r3, [pc, #84]	@ (80088fc <HAL_RCC_OscConfig+0x248>)
 80088a8:	2201      	movs	r2, #1
 80088aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ac:	f7fa fa52 	bl	8002d54 <HAL_GetTick>
 80088b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088b4:	f7fa fa4e 	bl	8002d54 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e167      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088c6:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <HAL_RCC_OscConfig+0x240>)
 80088c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCC_OscConfig+0x200>
 80088d2:	e01b      	b.n	800890c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088d4:	4b09      	ldr	r3, [pc, #36]	@ (80088fc <HAL_RCC_OscConfig+0x248>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088da:	f7fa fa3b 	bl	8002d54 <HAL_GetTick>
 80088de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088e0:	e00e      	b.n	8008900 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088e2:	f7fa fa37 	bl	8002d54 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d907      	bls.n	8008900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e150      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
 80088f4:	40023800 	.word	0x40023800
 80088f8:	42470000 	.word	0x42470000
 80088fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008900:	4b88      	ldr	r3, [pc, #544]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1ea      	bne.n	80088e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8097 	beq.w	8008a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800891e:	4b81      	ldr	r3, [pc, #516]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10f      	bne.n	800894a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800892a:	2300      	movs	r3, #0
 800892c:	60bb      	str	r3, [r7, #8]
 800892e:	4b7d      	ldr	r3, [pc, #500]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008932:	4a7c      	ldr	r2, [pc, #496]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008938:	6413      	str	r3, [r2, #64]	@ 0x40
 800893a:	4b7a      	ldr	r3, [pc, #488]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008942:	60bb      	str	r3, [r7, #8]
 8008944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008946:	2301      	movs	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800894a:	4b77      	ldr	r3, [pc, #476]	@ (8008b28 <HAL_RCC_OscConfig+0x474>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008952:	2b00      	cmp	r3, #0
 8008954:	d118      	bne.n	8008988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008956:	4b74      	ldr	r3, [pc, #464]	@ (8008b28 <HAL_RCC_OscConfig+0x474>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a73      	ldr	r2, [pc, #460]	@ (8008b28 <HAL_RCC_OscConfig+0x474>)
 800895c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008962:	f7fa f9f7 	bl	8002d54 <HAL_GetTick>
 8008966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008968:	e008      	b.n	800897c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800896a:	f7fa f9f3 	bl	8002d54 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b02      	cmp	r3, #2
 8008976:	d901      	bls.n	800897c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e10c      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800897c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b28 <HAL_RCC_OscConfig+0x474>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0f0      	beq.n	800896a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d106      	bne.n	800899e <HAL_RCC_OscConfig+0x2ea>
 8008990:	4b64      	ldr	r3, [pc, #400]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008994:	4a63      	ldr	r2, [pc, #396]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008996:	f043 0301 	orr.w	r3, r3, #1
 800899a:	6713      	str	r3, [r2, #112]	@ 0x70
 800899c:	e01c      	b.n	80089d8 <HAL_RCC_OscConfig+0x324>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	d10c      	bne.n	80089c0 <HAL_RCC_OscConfig+0x30c>
 80089a6:	4b5f      	ldr	r3, [pc, #380]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 80089a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089aa:	4a5e      	ldr	r2, [pc, #376]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 80089ac:	f043 0304 	orr.w	r3, r3, #4
 80089b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80089b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 80089b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089b6:	4a5b      	ldr	r2, [pc, #364]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 80089b8:	f043 0301 	orr.w	r3, r3, #1
 80089bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80089be:	e00b      	b.n	80089d8 <HAL_RCC_OscConfig+0x324>
 80089c0:	4b58      	ldr	r3, [pc, #352]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 80089c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c4:	4a57      	ldr	r2, [pc, #348]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 80089c6:	f023 0301 	bic.w	r3, r3, #1
 80089ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80089cc:	4b55      	ldr	r3, [pc, #340]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 80089ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d0:	4a54      	ldr	r2, [pc, #336]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 80089d2:	f023 0304 	bic.w	r3, r3, #4
 80089d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d015      	beq.n	8008a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e0:	f7fa f9b8 	bl	8002d54 <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089e6:	e00a      	b.n	80089fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e8:	f7fa f9b4 	bl	8002d54 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e0cb      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089fe:	4b49      	ldr	r3, [pc, #292]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0ee      	beq.n	80089e8 <HAL_RCC_OscConfig+0x334>
 8008a0a:	e014      	b.n	8008a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a0c:	f7fa f9a2 	bl	8002d54 <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a12:	e00a      	b.n	8008a2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a14:	f7fa f99e 	bl	8002d54 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e0b5      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1ee      	bne.n	8008a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d105      	bne.n	8008a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a3c:	4b39      	ldr	r3, [pc, #228]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a40:	4a38      	ldr	r2, [pc, #224]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80a1 	beq.w	8008b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a52:	4b34      	ldr	r3, [pc, #208]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f003 030c 	and.w	r3, r3, #12
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d05c      	beq.n	8008b18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d141      	bne.n	8008aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a66:	4b31      	ldr	r3, [pc, #196]	@ (8008b2c <HAL_RCC_OscConfig+0x478>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a6c:	f7fa f972 	bl	8002d54 <HAL_GetTick>
 8008a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a74:	f7fa f96e 	bl	8002d54 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e087      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a86:	4b27      	ldr	r3, [pc, #156]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f0      	bne.n	8008a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa0:	019b      	lsls	r3, r3, #6
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa8:	085b      	lsrs	r3, r3, #1
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	041b      	lsls	r3, r3, #16
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab4:	061b      	lsls	r3, r3, #24
 8008ab6:	491b      	ldr	r1, [pc, #108]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008abc:	4b1b      	ldr	r3, [pc, #108]	@ (8008b2c <HAL_RCC_OscConfig+0x478>)
 8008abe:	2201      	movs	r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ac2:	f7fa f947 	bl	8002d54 <HAL_GetTick>
 8008ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ac8:	e008      	b.n	8008adc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aca:	f7fa f943 	bl	8002d54 <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d901      	bls.n	8008adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e05c      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008adc:	4b11      	ldr	r3, [pc, #68]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0f0      	beq.n	8008aca <HAL_RCC_OscConfig+0x416>
 8008ae8:	e054      	b.n	8008b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aea:	4b10      	ldr	r3, [pc, #64]	@ (8008b2c <HAL_RCC_OscConfig+0x478>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008af0:	f7fa f930 	bl	8002d54 <HAL_GetTick>
 8008af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008af6:	e008      	b.n	8008b0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008af8:	f7fa f92c 	bl	8002d54 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e045      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b0a:	4b06      	ldr	r3, [pc, #24]	@ (8008b24 <HAL_RCC_OscConfig+0x470>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0x444>
 8008b16:	e03d      	b.n	8008b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d107      	bne.n	8008b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e038      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
 8008b24:	40023800 	.word	0x40023800
 8008b28:	40007000 	.word	0x40007000
 8008b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b30:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba0 <HAL_RCC_OscConfig+0x4ec>)
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d028      	beq.n	8008b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d121      	bne.n	8008b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d11a      	bne.n	8008b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b60:	4013      	ands	r3, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d111      	bne.n	8008b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b76:	085b      	lsrs	r3, r3, #1
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d107      	bne.n	8008b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d001      	beq.n	8008b94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e000      	b.n	8008b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	40023800 	.word	0x40023800

08008ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e0cc      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bb8:	4b68      	ldr	r3, [pc, #416]	@ (8008d5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d90c      	bls.n	8008be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bc6:	4b65      	ldr	r3, [pc, #404]	@ (8008d5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bce:	4b63      	ldr	r3, [pc, #396]	@ (8008d5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d001      	beq.n	8008be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e0b8      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d020      	beq.n	8008c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bf8:	4b59      	ldr	r3, [pc, #356]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	4a58      	ldr	r2, [pc, #352]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d005      	beq.n	8008c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c10:	4b53      	ldr	r3, [pc, #332]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	4a52      	ldr	r2, [pc, #328]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c1c:	4b50      	ldr	r3, [pc, #320]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	494d      	ldr	r1, [pc, #308]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d044      	beq.n	8008cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d107      	bne.n	8008c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c42:	4b47      	ldr	r3, [pc, #284]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d119      	bne.n	8008c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e07f      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d003      	beq.n	8008c62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d107      	bne.n	8008c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c62:	4b3f      	ldr	r3, [pc, #252]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d109      	bne.n	8008c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e06f      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c72:	4b3b      	ldr	r3, [pc, #236]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e067      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c82:	4b37      	ldr	r3, [pc, #220]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f023 0203 	bic.w	r2, r3, #3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4934      	ldr	r1, [pc, #208]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c94:	f7fa f85e 	bl	8002d54 <HAL_GetTick>
 8008c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c9a:	e00a      	b.n	8008cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c9c:	f7fa f85a 	bl	8002d54 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d901      	bls.n	8008cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e04f      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 020c 	and.w	r2, r3, #12
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d1eb      	bne.n	8008c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cc4:	4b25      	ldr	r3, [pc, #148]	@ (8008d5c <HAL_RCC_ClockConfig+0x1b8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d20c      	bcs.n	8008cec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cd2:	4b22      	ldr	r3, [pc, #136]	@ (8008d5c <HAL_RCC_ClockConfig+0x1b8>)
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cda:	4b20      	ldr	r3, [pc, #128]	@ (8008d5c <HAL_RCC_ClockConfig+0x1b8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d001      	beq.n	8008cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e032      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d008      	beq.n	8008d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cf8:	4b19      	ldr	r3, [pc, #100]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4916      	ldr	r1, [pc, #88]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0308 	and.w	r3, r3, #8
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d16:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	490e      	ldr	r1, [pc, #56]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d2a:	f000 f821 	bl	8008d70 <HAL_RCC_GetSysClockFreq>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	4b0b      	ldr	r3, [pc, #44]	@ (8008d60 <HAL_RCC_ClockConfig+0x1bc>)
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	091b      	lsrs	r3, r3, #4
 8008d36:	f003 030f 	and.w	r3, r3, #15
 8008d3a:	490a      	ldr	r1, [pc, #40]	@ (8008d64 <HAL_RCC_ClockConfig+0x1c0>)
 8008d3c:	5ccb      	ldrb	r3, [r1, r3]
 8008d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d42:	4a09      	ldr	r2, [pc, #36]	@ (8008d68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008d46:	4b09      	ldr	r3, [pc, #36]	@ (8008d6c <HAL_RCC_ClockConfig+0x1c8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f9 ffbe 	bl	8002ccc <HAL_InitTick>

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40023c00 	.word	0x40023c00
 8008d60:	40023800 	.word	0x40023800
 8008d64:	0800db88 	.word	0x0800db88
 8008d68:	2000002c 	.word	0x2000002c
 8008d6c:	20000030 	.word	0x20000030

08008d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d74:	b090      	sub	sp, #64	@ 0x40
 8008d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d88:	4b59      	ldr	r3, [pc, #356]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f003 030c 	and.w	r3, r3, #12
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d00d      	beq.n	8008db0 <HAL_RCC_GetSysClockFreq+0x40>
 8008d94:	2b08      	cmp	r3, #8
 8008d96:	f200 80a1 	bhi.w	8008edc <HAL_RCC_GetSysClockFreq+0x16c>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <HAL_RCC_GetSysClockFreq+0x34>
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d003      	beq.n	8008daa <HAL_RCC_GetSysClockFreq+0x3a>
 8008da2:	e09b      	b.n	8008edc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008da4:	4b53      	ldr	r3, [pc, #332]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008da6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008da8:	e09b      	b.n	8008ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008daa:	4b53      	ldr	r3, [pc, #332]	@ (8008ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dae:	e098      	b.n	8008ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008db0:	4b4f      	ldr	r3, [pc, #316]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008db8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008dba:	4b4d      	ldr	r3, [pc, #308]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d028      	beq.n	8008e18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	099b      	lsrs	r3, r3, #6
 8008dcc:	2200      	movs	r2, #0
 8008dce:	623b      	str	r3, [r7, #32]
 8008dd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4b47      	ldr	r3, [pc, #284]	@ (8008ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ddc:	fb03 f201 	mul.w	r2, r3, r1
 8008de0:	2300      	movs	r3, #0
 8008de2:	fb00 f303 	mul.w	r3, r0, r3
 8008de6:	4413      	add	r3, r2
 8008de8:	4a43      	ldr	r2, [pc, #268]	@ (8008ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dea:	fba0 1202 	umull	r1, r2, r0, r2
 8008dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008df0:	460a      	mov	r2, r1
 8008df2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008df6:	4413      	add	r3, r2
 8008df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	61bb      	str	r3, [r7, #24]
 8008e00:	61fa      	str	r2, [r7, #28]
 8008e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008e0a:	f7f7 fddb 	bl	80009c4 <__aeabi_uldivmod>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4613      	mov	r3, r2
 8008e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e16:	e053      	b.n	8008ec0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e18:	4b35      	ldr	r3, [pc, #212]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	099b      	lsrs	r3, r3, #6
 8008e1e:	2200      	movs	r2, #0
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	617a      	str	r2, [r7, #20]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e2a:	f04f 0b00 	mov.w	fp, #0
 8008e2e:	4652      	mov	r2, sl
 8008e30:	465b      	mov	r3, fp
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f04f 0100 	mov.w	r1, #0
 8008e3a:	0159      	lsls	r1, r3, #5
 8008e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e40:	0150      	lsls	r0, r2, #5
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	ebb2 080a 	subs.w	r8, r2, sl
 8008e4a:	eb63 090b 	sbc.w	r9, r3, fp
 8008e4e:	f04f 0200 	mov.w	r2, #0
 8008e52:	f04f 0300 	mov.w	r3, #0
 8008e56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e62:	ebb2 0408 	subs.w	r4, r2, r8
 8008e66:	eb63 0509 	sbc.w	r5, r3, r9
 8008e6a:	f04f 0200 	mov.w	r2, #0
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	00eb      	lsls	r3, r5, #3
 8008e74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e78:	00e2      	lsls	r2, r4, #3
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	461d      	mov	r5, r3
 8008e7e:	eb14 030a 	adds.w	r3, r4, sl
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	eb45 030b 	adc.w	r3, r5, fp
 8008e88:	607b      	str	r3, [r7, #4]
 8008e8a:	f04f 0200 	mov.w	r2, #0
 8008e8e:	f04f 0300 	mov.w	r3, #0
 8008e92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e96:	4629      	mov	r1, r5
 8008e98:	028b      	lsls	r3, r1, #10
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	028a      	lsls	r2, r1, #10
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eaa:	2200      	movs	r2, #0
 8008eac:	60bb      	str	r3, [r7, #8]
 8008eae:	60fa      	str	r2, [r7, #12]
 8008eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eb4:	f7f7 fd86 	bl	80009c4 <__aeabi_uldivmod>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	0c1b      	lsrs	r3, r3, #16
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	3301      	adds	r3, #1
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008ed0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008eda:	e002      	b.n	8008ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008edc:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3740      	adds	r7, #64	@ 0x40
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eee:	bf00      	nop
 8008ef0:	40023800 	.word	0x40023800
 8008ef4:	00f42400 	.word	0x00f42400
 8008ef8:	017d7840 	.word	0x017d7840

08008efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f00:	4b03      	ldr	r3, [pc, #12]	@ (8008f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f02:	681b      	ldr	r3, [r3, #0]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	2000002c 	.word	0x2000002c

08008f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f18:	f7ff fff0 	bl	8008efc <HAL_RCC_GetHCLKFreq>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	4b05      	ldr	r3, [pc, #20]	@ (8008f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	0a9b      	lsrs	r3, r3, #10
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	4903      	ldr	r1, [pc, #12]	@ (8008f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f2a:	5ccb      	ldrb	r3, [r1, r3]
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	40023800 	.word	0x40023800
 8008f38:	0800db98 	.word	0x0800db98

08008f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e041      	b.n	8008fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d106      	bne.n	8008f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7f9 fad0 	bl	8002508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4619      	mov	r1, r3
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	f000 fab2 	bl	80094e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d001      	beq.n	8008ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e044      	b.n	800907e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f042 0201 	orr.w	r2, r2, #1
 800900a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a1e      	ldr	r2, [pc, #120]	@ (800908c <HAL_TIM_Base_Start_IT+0xb0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d018      	beq.n	8009048 <HAL_TIM_Base_Start_IT+0x6c>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800901e:	d013      	beq.n	8009048 <HAL_TIM_Base_Start_IT+0x6c>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a1a      	ldr	r2, [pc, #104]	@ (8009090 <HAL_TIM_Base_Start_IT+0xb4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00e      	beq.n	8009048 <HAL_TIM_Base_Start_IT+0x6c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a19      	ldr	r2, [pc, #100]	@ (8009094 <HAL_TIM_Base_Start_IT+0xb8>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d009      	beq.n	8009048 <HAL_TIM_Base_Start_IT+0x6c>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a17      	ldr	r2, [pc, #92]	@ (8009098 <HAL_TIM_Base_Start_IT+0xbc>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d004      	beq.n	8009048 <HAL_TIM_Base_Start_IT+0x6c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a16      	ldr	r2, [pc, #88]	@ (800909c <HAL_TIM_Base_Start_IT+0xc0>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d111      	bne.n	800906c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b06      	cmp	r3, #6
 8009058:	d010      	beq.n	800907c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f042 0201 	orr.w	r2, r2, #1
 8009068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906a:	e007      	b.n	800907c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0201 	orr.w	r2, r2, #1
 800907a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	40010000 	.word	0x40010000
 8009090:	40000400 	.word	0x40000400
 8009094:	40000800 	.word	0x40000800
 8009098:	40000c00 	.word	0x40000c00
 800909c:	40014000 	.word	0x40014000

080090a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d020      	beq.n	8009104 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01b      	beq.n	8009104 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0202 	mvn.w	r2, #2
 80090d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9db 	bl	80094a6 <HAL_TIM_IC_CaptureCallback>
 80090f0:	e005      	b.n	80090fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9cd 	bl	8009492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f9de 	bl	80094ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	2b00      	cmp	r3, #0
 800910c:	d020      	beq.n	8009150 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01b      	beq.n	8009150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f06f 0204 	mvn.w	r2, #4
 8009120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2202      	movs	r2, #2
 8009126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f9b5 	bl	80094a6 <HAL_TIM_IC_CaptureCallback>
 800913c:	e005      	b.n	800914a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f9a7 	bl	8009492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f9b8 	bl	80094ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d020      	beq.n	800919c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f003 0308 	and.w	r3, r3, #8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01b      	beq.n	800919c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f06f 0208 	mvn.w	r2, #8
 800916c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2204      	movs	r2, #4
 8009172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f98f 	bl	80094a6 <HAL_TIM_IC_CaptureCallback>
 8009188:	e005      	b.n	8009196 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f981 	bl	8009492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f992 	bl	80094ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f003 0310 	and.w	r3, r3, #16
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d020      	beq.n	80091e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01b      	beq.n	80091e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f06f 0210 	mvn.w	r2, #16
 80091b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2208      	movs	r2, #8
 80091be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f969 	bl	80094a6 <HAL_TIM_IC_CaptureCallback>
 80091d4:	e005      	b.n	80091e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f95b 	bl	8009492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f96c 	bl	80094ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00c      	beq.n	800920c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f06f 0201 	mvn.w	r2, #1
 8009204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7f7 fdb2 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00c      	beq.n	8009230 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fb84 	bl	8009938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00c      	beq.n	8009254 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800924c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f93d 	bl	80094ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00c      	beq.n	8009278 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b00      	cmp	r3, #0
 8009266:	d007      	beq.n	8009278 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f06f 0220 	mvn.w	r2, #32
 8009270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fb56 	bl	8009924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009294:	2b01      	cmp	r3, #1
 8009296:	d101      	bne.n	800929c <HAL_TIM_ConfigClockSource+0x1c>
 8009298:	2302      	movs	r3, #2
 800929a:	e0b4      	b.n	8009406 <HAL_TIM_ConfigClockSource+0x186>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80092ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d4:	d03e      	beq.n	8009354 <HAL_TIM_ConfigClockSource+0xd4>
 80092d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092da:	f200 8087 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x16c>
 80092de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e2:	f000 8086 	beq.w	80093f2 <HAL_TIM_ConfigClockSource+0x172>
 80092e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ea:	d87f      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x16c>
 80092ec:	2b70      	cmp	r3, #112	@ 0x70
 80092ee:	d01a      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0xa6>
 80092f0:	2b70      	cmp	r3, #112	@ 0x70
 80092f2:	d87b      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x16c>
 80092f4:	2b60      	cmp	r3, #96	@ 0x60
 80092f6:	d050      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x11a>
 80092f8:	2b60      	cmp	r3, #96	@ 0x60
 80092fa:	d877      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x16c>
 80092fc:	2b50      	cmp	r3, #80	@ 0x50
 80092fe:	d03c      	beq.n	800937a <HAL_TIM_ConfigClockSource+0xfa>
 8009300:	2b50      	cmp	r3, #80	@ 0x50
 8009302:	d873      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x16c>
 8009304:	2b40      	cmp	r3, #64	@ 0x40
 8009306:	d058      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x13a>
 8009308:	2b40      	cmp	r3, #64	@ 0x40
 800930a:	d86f      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x16c>
 800930c:	2b30      	cmp	r3, #48	@ 0x30
 800930e:	d064      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x15a>
 8009310:	2b30      	cmp	r3, #48	@ 0x30
 8009312:	d86b      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x16c>
 8009314:	2b20      	cmp	r3, #32
 8009316:	d060      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x15a>
 8009318:	2b20      	cmp	r3, #32
 800931a:	d867      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x16c>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d05c      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x15a>
 8009320:	2b10      	cmp	r3, #16
 8009322:	d05a      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x15a>
 8009324:	e062      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009336:	f000 fa66 	bl	8009806 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	609a      	str	r2, [r3, #8]
      break;
 8009352:	e04f      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009364:	f000 fa4f 	bl	8009806 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009376:	609a      	str	r2, [r3, #8]
      break;
 8009378:	e03c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009386:	461a      	mov	r2, r3
 8009388:	f000 f9c3 	bl	8009712 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2150      	movs	r1, #80	@ 0x50
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fa1c 	bl	80097d0 <TIM_ITRx_SetConfig>
      break;
 8009398:	e02c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093a6:	461a      	mov	r2, r3
 80093a8:	f000 f9e2 	bl	8009770 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2160      	movs	r1, #96	@ 0x60
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fa0c 	bl	80097d0 <TIM_ITRx_SetConfig>
      break;
 80093b8:	e01c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c6:	461a      	mov	r2, r3
 80093c8:	f000 f9a3 	bl	8009712 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2140      	movs	r1, #64	@ 0x40
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f9fc 	bl	80097d0 <TIM_ITRx_SetConfig>
      break;
 80093d8:	e00c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f000 f9f3 	bl	80097d0 <TIM_ITRx_SetConfig>
      break;
 80093ea:	e003      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	73fb      	strb	r3, [r7, #15]
      break;
 80093f0:	e000      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800941e:	2b01      	cmp	r3, #1
 8009420:	d101      	bne.n	8009426 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009422:	2302      	movs	r3, #2
 8009424:	e031      	b.n	800948a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2202      	movs	r2, #2
 8009432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f8d9 	bl	80095f0 <TIM_SlaveTimer_SetConfig>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d009      	beq.n	8009458 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e018      	b.n	800948a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009466:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68da      	ldr	r2, [r3, #12]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009476:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a37      	ldr	r2, [pc, #220]	@ (80095d4 <TIM_Base_SetConfig+0xf0>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00f      	beq.n	800951c <TIM_Base_SetConfig+0x38>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009502:	d00b      	beq.n	800951c <TIM_Base_SetConfig+0x38>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a34      	ldr	r2, [pc, #208]	@ (80095d8 <TIM_Base_SetConfig+0xf4>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d007      	beq.n	800951c <TIM_Base_SetConfig+0x38>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a33      	ldr	r2, [pc, #204]	@ (80095dc <TIM_Base_SetConfig+0xf8>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d003      	beq.n	800951c <TIM_Base_SetConfig+0x38>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a32      	ldr	r2, [pc, #200]	@ (80095e0 <TIM_Base_SetConfig+0xfc>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d108      	bne.n	800952e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a28      	ldr	r2, [pc, #160]	@ (80095d4 <TIM_Base_SetConfig+0xf0>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d01b      	beq.n	800956e <TIM_Base_SetConfig+0x8a>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800953c:	d017      	beq.n	800956e <TIM_Base_SetConfig+0x8a>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a25      	ldr	r2, [pc, #148]	@ (80095d8 <TIM_Base_SetConfig+0xf4>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d013      	beq.n	800956e <TIM_Base_SetConfig+0x8a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a24      	ldr	r2, [pc, #144]	@ (80095dc <TIM_Base_SetConfig+0xf8>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00f      	beq.n	800956e <TIM_Base_SetConfig+0x8a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a23      	ldr	r2, [pc, #140]	@ (80095e0 <TIM_Base_SetConfig+0xfc>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00b      	beq.n	800956e <TIM_Base_SetConfig+0x8a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a22      	ldr	r2, [pc, #136]	@ (80095e4 <TIM_Base_SetConfig+0x100>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d007      	beq.n	800956e <TIM_Base_SetConfig+0x8a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a21      	ldr	r2, [pc, #132]	@ (80095e8 <TIM_Base_SetConfig+0x104>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_Base_SetConfig+0x8a>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a20      	ldr	r2, [pc, #128]	@ (80095ec <TIM_Base_SetConfig+0x108>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d108      	bne.n	8009580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	4313      	orrs	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a0c      	ldr	r2, [pc, #48]	@ (80095d4 <TIM_Base_SetConfig+0xf0>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d103      	bne.n	80095ae <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f043 0204 	orr.w	r2, r3, #4
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	601a      	str	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	40010000 	.word	0x40010000
 80095d8:	40000400 	.word	0x40000400
 80095dc:	40000800 	.word	0x40000800
 80095e0:	40000c00 	.word	0x40000c00
 80095e4:	40014000 	.word	0x40014000
 80095e8:	40014400 	.word	0x40014400
 80095ec:	40014800 	.word	0x40014800

080095f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800960c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	f023 0307 	bic.w	r3, r3, #7
 800961e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	4313      	orrs	r3, r2
 8009628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	2b70      	cmp	r3, #112	@ 0x70
 8009638:	d01a      	beq.n	8009670 <TIM_SlaveTimer_SetConfig+0x80>
 800963a:	2b70      	cmp	r3, #112	@ 0x70
 800963c:	d860      	bhi.n	8009700 <TIM_SlaveTimer_SetConfig+0x110>
 800963e:	2b60      	cmp	r3, #96	@ 0x60
 8009640:	d054      	beq.n	80096ec <TIM_SlaveTimer_SetConfig+0xfc>
 8009642:	2b60      	cmp	r3, #96	@ 0x60
 8009644:	d85c      	bhi.n	8009700 <TIM_SlaveTimer_SetConfig+0x110>
 8009646:	2b50      	cmp	r3, #80	@ 0x50
 8009648:	d046      	beq.n	80096d8 <TIM_SlaveTimer_SetConfig+0xe8>
 800964a:	2b50      	cmp	r3, #80	@ 0x50
 800964c:	d858      	bhi.n	8009700 <TIM_SlaveTimer_SetConfig+0x110>
 800964e:	2b40      	cmp	r3, #64	@ 0x40
 8009650:	d019      	beq.n	8009686 <TIM_SlaveTimer_SetConfig+0x96>
 8009652:	2b40      	cmp	r3, #64	@ 0x40
 8009654:	d854      	bhi.n	8009700 <TIM_SlaveTimer_SetConfig+0x110>
 8009656:	2b30      	cmp	r3, #48	@ 0x30
 8009658:	d055      	beq.n	8009706 <TIM_SlaveTimer_SetConfig+0x116>
 800965a:	2b30      	cmp	r3, #48	@ 0x30
 800965c:	d850      	bhi.n	8009700 <TIM_SlaveTimer_SetConfig+0x110>
 800965e:	2b20      	cmp	r3, #32
 8009660:	d051      	beq.n	8009706 <TIM_SlaveTimer_SetConfig+0x116>
 8009662:	2b20      	cmp	r3, #32
 8009664:	d84c      	bhi.n	8009700 <TIM_SlaveTimer_SetConfig+0x110>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d04d      	beq.n	8009706 <TIM_SlaveTimer_SetConfig+0x116>
 800966a:	2b10      	cmp	r3, #16
 800966c:	d04b      	beq.n	8009706 <TIM_SlaveTimer_SetConfig+0x116>
 800966e:	e047      	b.n	8009700 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009680:	f000 f8c1 	bl	8009806 <TIM_ETR_SetConfig>
      break;
 8009684:	e040      	b.n	8009708 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b05      	cmp	r3, #5
 800968c:	d101      	bne.n	8009692 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e03b      	b.n	800970a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6a1a      	ldr	r2, [r3, #32]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0201 	bic.w	r2, r2, #1
 80096a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	621a      	str	r2, [r3, #32]
      break;
 80096d6:	e017      	b.n	8009708 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096e4:	461a      	mov	r2, r3
 80096e6:	f000 f814 	bl	8009712 <TIM_TI1_ConfigInputStage>
      break;
 80096ea:	e00d      	b.n	8009708 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096f8:	461a      	mov	r2, r3
 80096fa:	f000 f839 	bl	8009770 <TIM_TI2_ConfigInputStage>
      break;
 80096fe:	e003      	b.n	8009708 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	75fb      	strb	r3, [r7, #23]
      break;
 8009704:	e000      	b.n	8009708 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009706:	bf00      	nop
  }

  return status;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009712:	b480      	push	{r7}
 8009714:	b087      	sub	sp, #28
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	f023 0201 	bic.w	r2, r3, #1
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800973c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f023 030a 	bic.w	r3, r3, #10
 800974e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4313      	orrs	r3, r2
 8009756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	621a      	str	r2, [r3, #32]
}
 8009764:	bf00      	nop
 8009766:	371c      	adds	r7, #28
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009770:	b480      	push	{r7}
 8009772:	b087      	sub	sp, #28
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	f023 0210 	bic.w	r2, r3, #16
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800979a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	031b      	lsls	r3, r3, #12
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	011b      	lsls	r3, r3, #4
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	621a      	str	r2, [r3, #32]
}
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	f043 0307 	orr.w	r3, r3, #7
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	609a      	str	r2, [r3, #8]
}
 80097fa:	bf00      	nop
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009806:	b480      	push	{r7}
 8009808:	b087      	sub	sp, #28
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
 8009812:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009820:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	021a      	lsls	r2, r3, #8
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	431a      	orrs	r2, r3
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	4313      	orrs	r3, r2
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4313      	orrs	r3, r2
 8009832:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	609a      	str	r2, [r3, #8]
}
 800983a:	bf00      	nop
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
	...

08009848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009858:	2b01      	cmp	r3, #1
 800985a:	d101      	bne.n	8009860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800985c:	2302      	movs	r3, #2
 800985e:	e050      	b.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	4313      	orrs	r3, r2
 8009890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a1c      	ldr	r2, [pc, #112]	@ (8009910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d018      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ac:	d013      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a18      	ldr	r2, [pc, #96]	@ (8009914 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00e      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a16      	ldr	r2, [pc, #88]	@ (8009918 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d009      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a15      	ldr	r2, [pc, #84]	@ (800991c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d004      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a13      	ldr	r2, [pc, #76]	@ (8009920 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d10c      	bne.n	80098f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	40010000 	.word	0x40010000
 8009914:	40000400 	.word	0x40000400
 8009918:	40000800 	.word	0x40000800
 800991c:	40000c00 	.word	0x40000c00
 8009920:	40014000 	.word	0x40014000

08009924 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800994c:	b084      	sub	sp, #16
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	f107 001c 	add.w	r0, r7, #28
 800995a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800995e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009962:	2b01      	cmp	r3, #1
 8009964:	d123      	bne.n	80099ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800997a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800998e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009992:	2b01      	cmp	r3, #1
 8009994:	d105      	bne.n	80099a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 fae8 	bl	800af78 <USB_CoreReset>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
 80099ac:	e01b      	b.n	80099e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f001 fadc 	bl	800af78 <USB_CoreReset>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d106      	bne.n	80099da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80099d8:	e005      	b.n	80099e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099e6:	7fbb      	ldrb	r3, [r7, #30]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10b      	bne.n	8009a04 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f043 0206 	orr.w	r2, r3, #6
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f043 0220 	orr.w	r2, r3, #32
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a10:	b004      	add	sp, #16
 8009a12:	4770      	bx	lr

08009a14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d165      	bne.n	8009af4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4a41      	ldr	r2, [pc, #260]	@ (8009b30 <USB_SetTurnaroundTime+0x11c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d906      	bls.n	8009a3e <USB_SetTurnaroundTime+0x2a>
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4a40      	ldr	r2, [pc, #256]	@ (8009b34 <USB_SetTurnaroundTime+0x120>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d202      	bcs.n	8009a3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a38:	230f      	movs	r3, #15
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	e062      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	4a3c      	ldr	r2, [pc, #240]	@ (8009b34 <USB_SetTurnaroundTime+0x120>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d306      	bcc.n	8009a54 <USB_SetTurnaroundTime+0x40>
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	4a3b      	ldr	r2, [pc, #236]	@ (8009b38 <USB_SetTurnaroundTime+0x124>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d202      	bcs.n	8009a54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a4e:	230e      	movs	r3, #14
 8009a50:	617b      	str	r3, [r7, #20]
 8009a52:	e057      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4a38      	ldr	r2, [pc, #224]	@ (8009b38 <USB_SetTurnaroundTime+0x124>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d306      	bcc.n	8009a6a <USB_SetTurnaroundTime+0x56>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4a37      	ldr	r2, [pc, #220]	@ (8009b3c <USB_SetTurnaroundTime+0x128>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d202      	bcs.n	8009a6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a64:	230d      	movs	r3, #13
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e04c      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	4a33      	ldr	r2, [pc, #204]	@ (8009b3c <USB_SetTurnaroundTime+0x128>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d306      	bcc.n	8009a80 <USB_SetTurnaroundTime+0x6c>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	4a32      	ldr	r2, [pc, #200]	@ (8009b40 <USB_SetTurnaroundTime+0x12c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d802      	bhi.n	8009a80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a7a:	230c      	movs	r3, #12
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	e041      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4a2f      	ldr	r2, [pc, #188]	@ (8009b40 <USB_SetTurnaroundTime+0x12c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d906      	bls.n	8009a96 <USB_SetTurnaroundTime+0x82>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8009b44 <USB_SetTurnaroundTime+0x130>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d802      	bhi.n	8009a96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009a90:	230b      	movs	r3, #11
 8009a92:	617b      	str	r3, [r7, #20]
 8009a94:	e036      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	4a2a      	ldr	r2, [pc, #168]	@ (8009b44 <USB_SetTurnaroundTime+0x130>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d906      	bls.n	8009aac <USB_SetTurnaroundTime+0x98>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	4a29      	ldr	r2, [pc, #164]	@ (8009b48 <USB_SetTurnaroundTime+0x134>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d802      	bhi.n	8009aac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009aa6:	230a      	movs	r3, #10
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e02b      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	4a26      	ldr	r2, [pc, #152]	@ (8009b48 <USB_SetTurnaroundTime+0x134>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d906      	bls.n	8009ac2 <USB_SetTurnaroundTime+0xae>
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4a25      	ldr	r2, [pc, #148]	@ (8009b4c <USB_SetTurnaroundTime+0x138>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d202      	bcs.n	8009ac2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009abc:	2309      	movs	r3, #9
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	e020      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	4a21      	ldr	r2, [pc, #132]	@ (8009b4c <USB_SetTurnaroundTime+0x138>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d306      	bcc.n	8009ad8 <USB_SetTurnaroundTime+0xc4>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	4a20      	ldr	r2, [pc, #128]	@ (8009b50 <USB_SetTurnaroundTime+0x13c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d802      	bhi.n	8009ad8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	e015      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	4a1d      	ldr	r2, [pc, #116]	@ (8009b50 <USB_SetTurnaroundTime+0x13c>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d906      	bls.n	8009aee <USB_SetTurnaroundTime+0xda>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b54 <USB_SetTurnaroundTime+0x140>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d202      	bcs.n	8009aee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009ae8:	2307      	movs	r3, #7
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e00a      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009aee:	2306      	movs	r3, #6
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	e007      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009afa:	2309      	movs	r3, #9
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	e001      	b.n	8009b04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b00:	2309      	movs	r3, #9
 8009b02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	029b      	lsls	r3, r3, #10
 8009b18:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	00d8acbf 	.word	0x00d8acbf
 8009b34:	00e4e1c0 	.word	0x00e4e1c0
 8009b38:	00f42400 	.word	0x00f42400
 8009b3c:	01067380 	.word	0x01067380
 8009b40:	011a499f 	.word	0x011a499f
 8009b44:	01312cff 	.word	0x01312cff
 8009b48:	014ca43f 	.word	0x014ca43f
 8009b4c:	016e3600 	.word	0x016e3600
 8009b50:	01a6ab1f 	.word	0x01a6ab1f
 8009b54:	01e84800 	.word	0x01e84800

08009b58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f043 0201 	orr.w	r2, r3, #1
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f023 0201 	bic.w	r2, r3, #1
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d115      	bne.n	8009bea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bca:	200a      	movs	r0, #10
 8009bcc:	f7f9 f8ce 	bl	8002d6c <HAL_Delay>
      ms += 10U;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	330a      	adds	r3, #10
 8009bd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 f93f 	bl	800ae5a <USB_GetMode>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d01e      	beq.n	8009c20 <USB_SetCurrentMode+0x84>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2bc7      	cmp	r3, #199	@ 0xc7
 8009be6:	d9f0      	bls.n	8009bca <USB_SetCurrentMode+0x2e>
 8009be8:	e01a      	b.n	8009c20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bea:	78fb      	ldrb	r3, [r7, #3]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d115      	bne.n	8009c1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bfc:	200a      	movs	r0, #10
 8009bfe:	f7f9 f8b5 	bl	8002d6c <HAL_Delay>
      ms += 10U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	330a      	adds	r3, #10
 8009c06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 f926 	bl	800ae5a <USB_GetMode>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d005      	beq.n	8009c20 <USB_SetCurrentMode+0x84>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c18:	d9f0      	bls.n	8009bfc <USB_SetCurrentMode+0x60>
 8009c1a:	e001      	b.n	8009c20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e005      	b.n	8009c2c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2bc8      	cmp	r3, #200	@ 0xc8
 8009c24:	d101      	bne.n	8009c2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c34:	b084      	sub	sp, #16
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b086      	sub	sp, #24
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c4e:	2300      	movs	r3, #0
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	e009      	b.n	8009c68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	3340      	adds	r3, #64	@ 0x40
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	2200      	movs	r2, #0
 8009c60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	3301      	adds	r3, #1
 8009c66:	613b      	str	r3, [r7, #16]
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	2b0e      	cmp	r3, #14
 8009c6c:	d9f2      	bls.n	8009c54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d11c      	bne.n	8009cb0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c84:	f043 0302 	orr.w	r3, r3, #2
 8009c88:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c9a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	639a      	str	r2, [r3, #56]	@ 0x38
 8009cae:	e00b      	b.n	8009cc8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cce:	461a      	mov	r2, r3
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cd4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d10d      	bne.n	8009cf8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d104      	bne.n	8009cee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f968 	bl	8009fbc <USB_SetDevSpeed>
 8009cec:	e008      	b.n	8009d00 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009cee:	2101      	movs	r1, #1
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f963 	bl	8009fbc <USB_SetDevSpeed>
 8009cf6:	e003      	b.n	8009d00 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009cf8:	2103      	movs	r1, #3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f95e 	bl	8009fbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d00:	2110      	movs	r1, #16
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f8fa 	bl	8009efc <USB_FlushTxFifo>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f924 	bl	8009f60 <USB_FlushRxFifo>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d28:	461a      	mov	r2, r3
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d34:	461a      	mov	r2, r3
 8009d36:	2300      	movs	r3, #0
 8009d38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d40:	461a      	mov	r2, r3
 8009d42:	2300      	movs	r3, #0
 8009d44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d46:	2300      	movs	r3, #0
 8009d48:	613b      	str	r3, [r7, #16]
 8009d4a:	e043      	b.n	8009dd4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d62:	d118      	bne.n	8009d96 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d76:	461a      	mov	r2, r3
 8009d78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	e013      	b.n	8009da8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	e008      	b.n	8009da8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	015a      	lsls	r2, r3, #5
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da2:	461a      	mov	r2, r3
 8009da4:	2300      	movs	r3, #0
 8009da6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db4:	461a      	mov	r2, r3
 8009db6:	2300      	movs	r3, #0
 8009db8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009dcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	613b      	str	r3, [r7, #16]
 8009dd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009dd8:	461a      	mov	r2, r3
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d3b5      	bcc.n	8009d4c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009de0:	2300      	movs	r3, #0
 8009de2:	613b      	str	r3, [r7, #16]
 8009de4:	e043      	b.n	8009e6e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dfc:	d118      	bne.n	8009e30 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e10:	461a      	mov	r2, r3
 8009e12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	e013      	b.n	8009e42 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e26:	461a      	mov	r2, r3
 8009e28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	e008      	b.n	8009e42 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	2300      	movs	r3, #0
 8009e40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e4e:	461a      	mov	r2, r3
 8009e50:	2300      	movs	r3, #0
 8009e52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e60:	461a      	mov	r2, r3
 8009e62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e72:	461a      	mov	r2, r3
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d3b5      	bcc.n	8009de6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009e9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d105      	bne.n	8009eb0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	f043 0210 	orr.w	r2, r3, #16
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	699a      	ldr	r2, [r3, #24]
 8009eb4:	4b10      	ldr	r3, [pc, #64]	@ (8009ef8 <USB_DevInit+0x2c4>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ebc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d005      	beq.n	8009ed0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	f043 0208 	orr.w	r2, r3, #8
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ed0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d107      	bne.n	8009ee8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ee0:	f043 0304 	orr.w	r3, r3, #4
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ef4:	b004      	add	sp, #16
 8009ef6:	4770      	bx	lr
 8009ef8:	803c3800 	.word	0x803c3800

08009efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f16:	d901      	bls.n	8009f1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e01b      	b.n	8009f54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	daf2      	bge.n	8009f0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	019b      	lsls	r3, r3, #6
 8009f2c:	f043 0220 	orr.w	r2, r3, #32
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f40:	d901      	bls.n	8009f46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e006      	b.n	8009f54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0320 	and.w	r3, r3, #32
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	d0f0      	beq.n	8009f34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f78:	d901      	bls.n	8009f7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e018      	b.n	8009fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	daf2      	bge.n	8009f6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2210      	movs	r2, #16
 8009f8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3301      	adds	r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f9c:	d901      	bls.n	8009fa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e006      	b.n	8009fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	f003 0310 	and.w	r3, r3, #16
 8009faa:	2b10      	cmp	r3, #16
 8009fac:	d0f0      	beq.n	8009f90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	68f9      	ldr	r1, [r7, #12]
 8009fd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b087      	sub	sp, #28
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f003 0306 	and.w	r3, r3, #6
 800a006:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d102      	bne.n	800a014 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a00e:	2300      	movs	r3, #0
 800a010:	75fb      	strb	r3, [r7, #23]
 800a012:	e00a      	b.n	800a02a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d002      	beq.n	800a020 <USB_GetDevSpeed+0x32>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b06      	cmp	r3, #6
 800a01e:	d102      	bne.n	800a026 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a020:	2302      	movs	r3, #2
 800a022:	75fb      	strb	r3, [r7, #23]
 800a024:	e001      	b.n	800a02a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a026:	230f      	movs	r3, #15
 800a028:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	371c      	adds	r7, #28
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	785b      	ldrb	r3, [r3, #1]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d13a      	bne.n	800a0ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a05a:	69da      	ldr	r2, [r3, #28]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	f003 030f 	and.w	r3, r3, #15
 800a064:	2101      	movs	r1, #1
 800a066:	fa01 f303 	lsl.w	r3, r1, r3
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	68f9      	ldr	r1, [r7, #12]
 800a06e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a072:	4313      	orrs	r3, r2
 800a074:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d155      	bne.n	800a138 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	791b      	ldrb	r3, [r3, #4]
 800a0a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	059b      	lsls	r3, r3, #22
 800a0ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	e036      	b.n	800a138 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0d0:	69da      	ldr	r2, [r3, #28]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	f003 030f 	and.w	r3, r3, #15
 800a0da:	2101      	movs	r1, #1
 800a0dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e0:	041b      	lsls	r3, r3, #16
 800a0e2:	68f9      	ldr	r1, [r7, #12]
 800a0e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d11a      	bne.n	800a138 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	791b      	ldrb	r3, [r3, #4]
 800a11c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a11e:	430b      	orrs	r3, r1
 800a120:	4313      	orrs	r3, r2
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	0151      	lsls	r1, r2, #5
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	440a      	add	r2, r1
 800a12a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a12e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a136:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
	...

0800a148 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	785b      	ldrb	r3, [r3, #1]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d161      	bne.n	800a228 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	015a      	lsls	r2, r3, #5
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a176:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a17a:	d11f      	bne.n	800a1bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	0151      	lsls	r1, r2, #5
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	440a      	add	r2, r1
 800a192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a196:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a19a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	015a      	lsls	r2, r3, #5
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	0151      	lsls	r1, r2, #5
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	440a      	add	r2, r1
 800a1b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	f003 030f 	and.w	r3, r3, #15
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	43db      	mvns	r3, r3
 800a1d6:	68f9      	ldr	r1, [r7, #12]
 800a1d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1dc:	4013      	ands	r3, r2
 800a1de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e6:	69da      	ldr	r2, [r3, #28]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	f003 030f 	and.w	r3, r3, #15
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	43db      	mvns	r3, r3
 800a1fa:	68f9      	ldr	r1, [r7, #12]
 800a1fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a200:	4013      	ands	r3, r2
 800a202:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	0159      	lsls	r1, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	440b      	add	r3, r1
 800a21a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a21e:	4619      	mov	r1, r3
 800a220:	4b35      	ldr	r3, [pc, #212]	@ (800a2f8 <USB_DeactivateEndpoint+0x1b0>)
 800a222:	4013      	ands	r3, r2
 800a224:	600b      	str	r3, [r1, #0]
 800a226:	e060      	b.n	800a2ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a23a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a23e:	d11f      	bne.n	800a280 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	440a      	add	r2, r1
 800a256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a25a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a25e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4413      	add	r3, r2
 800a268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	0151      	lsls	r1, r2, #5
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	440a      	add	r2, r1
 800a276:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a27a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a27e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	f003 030f 	and.w	r3, r3, #15
 800a290:	2101      	movs	r1, #1
 800a292:	fa01 f303 	lsl.w	r3, r1, r3
 800a296:	041b      	lsls	r3, r3, #16
 800a298:	43db      	mvns	r3, r3
 800a29a:	68f9      	ldr	r1, [r7, #12]
 800a29c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2aa:	69da      	ldr	r2, [r3, #28]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	f003 030f 	and.w	r3, r3, #15
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ba:	041b      	lsls	r3, r3, #16
 800a2bc:	43db      	mvns	r3, r3
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	0159      	lsls	r1, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	440b      	add	r3, r1
 800a2de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	4b05      	ldr	r3, [pc, #20]	@ (800a2fc <USB_DeactivateEndpoint+0x1b4>)
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	ec337800 	.word	0xec337800
 800a2fc:	eff37800 	.word	0xeff37800

0800a300 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	@ 0x28
 800a304:	af02      	add	r7, sp, #8
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4613      	mov	r3, r2
 800a30c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	f040 817f 	bne.w	800a620 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d132      	bne.n	800a390 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a344:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a348:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a34c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	0151      	lsls	r1, r2, #5
 800a360:	69fa      	ldr	r2, [r7, #28]
 800a362:	440a      	add	r2, r1
 800a364:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a368:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a36c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	0151      	lsls	r1, r2, #5
 800a380:	69fa      	ldr	r2, [r7, #28]
 800a382:	440a      	add	r2, r1
 800a384:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a388:	0cdb      	lsrs	r3, r3, #19
 800a38a:	04db      	lsls	r3, r3, #19
 800a38c:	6113      	str	r3, [r2, #16]
 800a38e:	e097      	b.n	800a4c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	69ba      	ldr	r2, [r7, #24]
 800a3a0:	0151      	lsls	r1, r2, #5
 800a3a2:	69fa      	ldr	r2, [r7, #28]
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3aa:	0cdb      	lsrs	r3, r3, #19
 800a3ac:	04db      	lsls	r3, r3, #19
 800a3ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	69ba      	ldr	r2, [r7, #24]
 800a3c0:	0151      	lsls	r1, r2, #5
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	440a      	add	r2, r1
 800a3c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3d2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d11a      	bne.n	800a410 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	691a      	ldr	r2, [r3, #16]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d903      	bls.n	800a3ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	0151      	lsls	r1, r2, #5
 800a400:	69fa      	ldr	r2, [r7, #28]
 800a402:	440a      	add	r2, r1
 800a404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a408:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a40c:	6113      	str	r3, [r2, #16]
 800a40e:	e044      	b.n	800a49a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	4413      	add	r3, r2
 800a41a:	1e5a      	subs	r2, r3, #1
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	fbb2 f3f3 	udiv	r3, r2, r3
 800a424:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	015a      	lsls	r2, r3, #5
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a432:	691a      	ldr	r2, [r3, #16]
 800a434:	8afb      	ldrh	r3, [r7, #22]
 800a436:	04d9      	lsls	r1, r3, #19
 800a438:	4ba4      	ldr	r3, [pc, #656]	@ (800a6cc <USB_EPStartXfer+0x3cc>)
 800a43a:	400b      	ands	r3, r1
 800a43c:	69b9      	ldr	r1, [r7, #24]
 800a43e:	0148      	lsls	r0, r1, #5
 800a440:	69f9      	ldr	r1, [r7, #28]
 800a442:	4401      	add	r1, r0
 800a444:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a448:	4313      	orrs	r3, r2
 800a44a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	791b      	ldrb	r3, [r3, #4]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d122      	bne.n	800a49a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	0151      	lsls	r1, r2, #5
 800a466:	69fa      	ldr	r2, [r7, #28]
 800a468:	440a      	add	r2, r1
 800a46a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a46e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a472:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	8afb      	ldrh	r3, [r7, #22]
 800a484:	075b      	lsls	r3, r3, #29
 800a486:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a48a:	69b9      	ldr	r1, [r7, #24]
 800a48c:	0148      	lsls	r0, r1, #5
 800a48e:	69f9      	ldr	r1, [r7, #28]
 800a490:	4401      	add	r1, r0
 800a492:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a496:	4313      	orrs	r3, r2
 800a498:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a6:	691a      	ldr	r2, [r3, #16]
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4b0:	69b9      	ldr	r1, [r7, #24]
 800a4b2:	0148      	lsls	r0, r1, #5
 800a4b4:	69f9      	ldr	r1, [r7, #28]
 800a4b6:	4401      	add	r1, r0
 800a4b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d14b      	bne.n	800a55e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4da:	461a      	mov	r2, r3
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	791b      	ldrb	r3, [r3, #4]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d128      	bne.n	800a53c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d110      	bne.n	800a51c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	69ba      	ldr	r2, [r7, #24]
 800a50a:	0151      	lsls	r1, r2, #5
 800a50c:	69fa      	ldr	r2, [r7, #28]
 800a50e:	440a      	add	r2, r1
 800a510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a514:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	e00f      	b.n	800a53c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	0151      	lsls	r1, r2, #5
 800a52e:	69fa      	ldr	r2, [r7, #28]
 800a530:	440a      	add	r2, r1
 800a532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a53a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	0151      	lsls	r1, r2, #5
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	440a      	add	r2, r1
 800a552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a556:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	e166      	b.n	800a82c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	4413      	add	r3, r2
 800a566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	0151      	lsls	r1, r2, #5
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	440a      	add	r2, r1
 800a574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a578:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a57c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	791b      	ldrb	r3, [r3, #4]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d015      	beq.n	800a5b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 814e 	beq.w	800a82c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a6:	69f9      	ldr	r1, [r7, #28]
 800a5a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	634b      	str	r3, [r1, #52]	@ 0x34
 800a5b0:	e13c      	b.n	800a82c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d110      	bne.n	800a5e4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	0151      	lsls	r1, r2, #5
 800a5d4:	69fa      	ldr	r2, [r7, #28]
 800a5d6:	440a      	add	r2, r1
 800a5d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	e00f      	b.n	800a604 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	0151      	lsls	r1, r2, #5
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	440a      	add	r2, r1
 800a5fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a602:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	68d9      	ldr	r1, [r3, #12]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	b298      	uxth	r0, r3
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4603      	mov	r3, r0
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 f9b9 	bl	800a990 <USB_WritePacket>
 800a61e:	e105      	b.n	800a82c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	015a      	lsls	r2, r3, #5
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	4413      	add	r3, r2
 800a628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	0151      	lsls	r1, r2, #5
 800a632:	69fa      	ldr	r2, [r7, #28]
 800a634:	440a      	add	r2, r1
 800a636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a63a:	0cdb      	lsrs	r3, r3, #19
 800a63c:	04db      	lsls	r3, r3, #19
 800a63e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	69fa      	ldr	r2, [r7, #28]
 800a654:	440a      	add	r2, r1
 800a656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a65a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a65e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a662:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d132      	bne.n	800a6d0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	015a      	lsls	r2, r3, #5
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	4413      	add	r3, r2
 800a68a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a68e:	691a      	ldr	r2, [r3, #16]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a698:	69b9      	ldr	r1, [r7, #24]
 800a69a:	0148      	lsls	r0, r1, #5
 800a69c:	69f9      	ldr	r1, [r7, #28]
 800a69e:	4401      	add	r1, r0
 800a6a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	0151      	lsls	r1, r2, #5
 800a6ba:	69fa      	ldr	r2, [r7, #28]
 800a6bc:	440a      	add	r2, r1
 800a6be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6c6:	6113      	str	r3, [r2, #16]
 800a6c8:	e062      	b.n	800a790 <USB_EPStartXfer+0x490>
 800a6ca:	bf00      	nop
 800a6cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d123      	bne.n	800a720 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e4:	691a      	ldr	r2, [r3, #16]
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ee:	69b9      	ldr	r1, [r7, #24]
 800a6f0:	0148      	lsls	r0, r1, #5
 800a6f2:	69f9      	ldr	r1, [r7, #28]
 800a6f4:	4401      	add	r1, r0
 800a6f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	4413      	add	r3, r2
 800a706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	69ba      	ldr	r2, [r7, #24]
 800a70e:	0151      	lsls	r1, r2, #5
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	440a      	add	r2, r1
 800a714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a718:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a71c:	6113      	str	r3, [r2, #16]
 800a71e:	e037      	b.n	800a790 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	691a      	ldr	r2, [r3, #16]
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	4413      	add	r3, r2
 800a72a:	1e5a      	subs	r2, r3, #1
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	fbb2 f3f3 	udiv	r3, r2, r3
 800a734:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	8afa      	ldrh	r2, [r7, #22]
 800a73c:	fb03 f202 	mul.w	r2, r3, r2
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a750:	691a      	ldr	r2, [r3, #16]
 800a752:	8afb      	ldrh	r3, [r7, #22]
 800a754:	04d9      	lsls	r1, r3, #19
 800a756:	4b38      	ldr	r3, [pc, #224]	@ (800a838 <USB_EPStartXfer+0x538>)
 800a758:	400b      	ands	r3, r1
 800a75a:	69b9      	ldr	r1, [r7, #24]
 800a75c:	0148      	lsls	r0, r1, #5
 800a75e:	69f9      	ldr	r1, [r7, #28]
 800a760:	4401      	add	r1, r0
 800a762:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a766:	4313      	orrs	r3, r2
 800a768:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a776:	691a      	ldr	r2, [r3, #16]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a780:	69b9      	ldr	r1, [r7, #24]
 800a782:	0148      	lsls	r0, r1, #5
 800a784:	69f9      	ldr	r1, [r7, #28]
 800a786:	4401      	add	r1, r0
 800a788:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a78c:	4313      	orrs	r3, r2
 800a78e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d10d      	bne.n	800a7b2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d009      	beq.n	800a7b2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	68d9      	ldr	r1, [r3, #12]
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ae:	460a      	mov	r2, r1
 800a7b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	791b      	ldrb	r3, [r3, #4]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d128      	bne.n	800a80c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d110      	bne.n	800a7ec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	0151      	lsls	r1, r2, #5
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	440a      	add	r2, r1
 800a7e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	e00f      	b.n	800a80c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69ba      	ldr	r2, [r7, #24]
 800a7fc:	0151      	lsls	r1, r2, #5
 800a7fe:	69fa      	ldr	r2, [r7, #28]
 800a800:	440a      	add	r2, r1
 800a802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a80a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	0151      	lsls	r1, r2, #5
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	440a      	add	r2, r1
 800a822:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a826:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a82a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3720      	adds	r7, #32
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	1ff80000 	.word	0x1ff80000

0800a83c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a846:	2300      	movs	r3, #0
 800a848:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d14a      	bne.n	800a8f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a86e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a872:	f040 8086 	bne.w	800a982 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	7812      	ldrb	r2, [r2, #0]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a894:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a898:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	7812      	ldrb	r2, [r2, #0]
 800a8ae:	0151      	lsls	r1, r2, #5
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	440a      	add	r2, r1
 800a8b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d902      	bls.n	800a8d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a8d2:	e056      	b.n	800a982 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	015a      	lsls	r2, r3, #5
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	4413      	add	r3, r2
 800a8de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8ec:	d0e7      	beq.n	800a8be <USB_EPStopXfer+0x82>
 800a8ee:	e048      	b.n	800a982 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	015a      	lsls	r2, r3, #5
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a908:	d13b      	bne.n	800a982 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	7812      	ldrb	r2, [r2, #0]
 800a91e:	0151      	lsls	r1, r2, #5
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	440a      	add	r2, r1
 800a924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a928:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a92c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	7812      	ldrb	r2, [r2, #0]
 800a942:	0151      	lsls	r1, r2, #5
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	440a      	add	r2, r1
 800a948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a94c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a950:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a95e:	4293      	cmp	r3, r2
 800a960:	d902      	bls.n	800a968 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	75fb      	strb	r3, [r7, #23]
          break;
 800a966:	e00c      	b.n	800a982 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a97c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a980:	d0e7      	beq.n	800a952 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a982:	7dfb      	ldrb	r3, [r7, #23]
}
 800a984:	4618      	mov	r0, r3
 800a986:	371c      	adds	r7, #28
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a990:	b480      	push	{r7}
 800a992:	b089      	sub	sp, #36	@ 0x24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	4611      	mov	r1, r2
 800a99c:	461a      	mov	r2, r3
 800a99e:	460b      	mov	r3, r1
 800a9a0:	71fb      	strb	r3, [r7, #7]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a9ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d123      	bne.n	800a9fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9b6:	88bb      	ldrh	r3, [r7, #4]
 800a9b8:	3303      	adds	r3, #3
 800a9ba:	089b      	lsrs	r3, r3, #2
 800a9bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9be:	2300      	movs	r3, #0
 800a9c0:	61bb      	str	r3, [r7, #24]
 800a9c2:	e018      	b.n	800a9f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	031a      	lsls	r2, r3, #12
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	61bb      	str	r3, [r7, #24]
 800a9f6:	69ba      	ldr	r2, [r7, #24]
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d3e2      	bcc.n	800a9c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3724      	adds	r7, #36	@ 0x24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b08b      	sub	sp, #44	@ 0x2c
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	4613      	mov	r3, r2
 800aa18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa22:	88fb      	ldrh	r3, [r7, #6]
 800aa24:	089b      	lsrs	r3, r3, #2
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa2a:	88fb      	ldrh	r3, [r7, #6]
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa32:	2300      	movs	r3, #0
 800aa34:	623b      	str	r3, [r7, #32]
 800aa36:	e014      	b.n	800aa62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	3301      	adds	r3, #1
 800aa48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa52:	3301      	adds	r3, #1
 800aa54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa58:	3301      	adds	r3, #1
 800aa5a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	623b      	str	r3, [r7, #32]
 800aa62:	6a3a      	ldr	r2, [r7, #32]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d3e6      	bcc.n	800aa38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa6a:	8bfb      	ldrh	r3, [r7, #30]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01e      	beq.n	800aaae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f107 0310 	add.w	r3, r7, #16
 800aa80:	6812      	ldr	r2, [r2, #0]
 800aa82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	00db      	lsls	r3, r3, #3
 800aa8c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	701a      	strb	r2, [r3, #0]
      i++;
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aaa2:	8bfb      	ldrh	r3, [r7, #30]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aaa8:	8bfb      	ldrh	r3, [r7, #30]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1ea      	bne.n	800aa84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aaae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	372c      	adds	r7, #44	@ 0x2c
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d12c      	bne.n	800ab32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	db12      	blt.n	800ab10 <USB_EPSetStall+0x54>
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00f      	beq.n	800ab10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	0151      	lsls	r1, r2, #5
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	440a      	add	r2, r1
 800ab06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	e02b      	b.n	800ab8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	015a      	lsls	r2, r3, #5
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	db12      	blt.n	800ab6a <USB_EPSetStall+0xae>
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00f      	beq.n	800ab6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	0151      	lsls	r1, r2, #5
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	440a      	add	r2, r1
 800ab60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	0151      	lsls	r1, r2, #5
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	440a      	add	r2, r1
 800ab80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	785b      	ldrb	r3, [r3, #1]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d128      	bne.n	800ac06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	0151      	lsls	r1, r2, #5
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	440a      	add	r2, r1
 800abca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	791b      	ldrb	r3, [r3, #4]
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d003      	beq.n	800abe4 <USB_EPClearStall+0x4c>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	791b      	ldrb	r3, [r3, #4]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d138      	bne.n	800ac56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	0151      	lsls	r1, r2, #5
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	440a      	add	r2, r1
 800abfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	e027      	b.n	800ac56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	0151      	lsls	r1, r2, #5
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	440a      	add	r2, r1
 800ac1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	791b      	ldrb	r3, [r3, #4]
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d003      	beq.n	800ac36 <USB_EPClearStall+0x9e>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	791b      	ldrb	r3, [r3, #4]
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d10f      	bne.n	800ac56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	0151      	lsls	r1, r2, #5
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	440a      	add	r2, r1
 800ac4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac82:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ac86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ac98:	68f9      	ldr	r1, [r7, #12]
 800ac9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acca:	f023 0303 	bic.w	r3, r3, #3
 800acce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acde:	f023 0302 	bic.w	r3, r3, #2
 800ace2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b085      	sub	sp, #20
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad0c:	f023 0303 	bic.w	r3, r3, #3
 800ad10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad20:	f043 0302 	orr.w	r3, r3, #2
 800ad24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	4013      	ands	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	0c1b      	lsrs	r3, r3, #16
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adaa:	69db      	ldr	r3, [r3, #28]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	4013      	ands	r3, r2
 800adb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	b29b      	uxth	r3, r3
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b085      	sub	sp, #20
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	460b      	mov	r3, r1
 800adcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	4013      	ands	r3, r2
 800adee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adf0:	68bb      	ldr	r3, [r7, #8]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b087      	sub	sp, #28
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	460b      	mov	r3, r1
 800ae08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae22:	78fb      	ldrb	r3, [r7, #3]
 800ae24:	f003 030f 	and.w	r3, r3, #15
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae2e:	01db      	lsls	r3, r3, #7
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	693a      	ldr	r2, [r7, #16]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae38:	78fb      	ldrb	r3, [r7, #3]
 800ae3a:	015a      	lsls	r2, r3, #5
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	4013      	ands	r3, r2
 800ae4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b083      	sub	sp, #12
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	f003 0301 	and.w	r3, r3, #1
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b085      	sub	sp, #20
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ae94:	f023 0307 	bic.w	r3, r3, #7
 800ae98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	460b      	mov	r3, r1
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	333c      	adds	r3, #60	@ 0x3c
 800aed2:	3304      	adds	r3, #4
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	4a26      	ldr	r2, [pc, #152]	@ (800af74 <USB_EP0_OutStart+0xb8>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d90a      	bls.n	800aef6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aeec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aef0:	d101      	bne.n	800aef6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	e037      	b.n	800af66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aefc:	461a      	mov	r2, r3
 800aefe:	2300      	movs	r3, #0
 800af00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af24:	f043 0318 	orr.w	r3, r3, #24
 800af28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af38:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af3e:	7afb      	ldrb	r3, [r7, #11]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d10f      	bne.n	800af64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af4a:	461a      	mov	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af5e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	371c      	adds	r7, #28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	4f54300a 	.word	0x4f54300a

0800af78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af80:	2300      	movs	r3, #0
 800af82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	3301      	adds	r3, #1
 800af88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af90:	d901      	bls.n	800af96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e022      	b.n	800afdc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	daf2      	bge.n	800af84 <USB_CoreReset+0xc>

  count = 10U;
 800af9e:	230a      	movs	r3, #10
 800afa0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800afa2:	e002      	b.n	800afaa <USB_CoreReset+0x32>
  {
    count--;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1f9      	bne.n	800afa4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	f043 0201 	orr.w	r2, r3, #1
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	3301      	adds	r3, #1
 800afc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afc8:	d901      	bls.n	800afce <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800afca:	2303      	movs	r3, #3
 800afcc:	e006      	b.n	800afdc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d0f0      	beq.n	800afbc <USB_CoreReset+0x44>

  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aff4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aff8:	f002 fd1e 	bl	800da38 <USBD_static_malloc>
 800affc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d109      	bne.n	800b018 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	32b0      	adds	r2, #176	@ 0xb0
 800b00e:	2100      	movs	r1, #0
 800b010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b014:	2302      	movs	r3, #2
 800b016:	e0d4      	b.n	800b1c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b018:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b01c:	2100      	movs	r1, #0
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f002 fd4e 	bl	800dac0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	32b0      	adds	r2, #176	@ 0xb0
 800b02e:	68f9      	ldr	r1, [r7, #12]
 800b030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	32b0      	adds	r2, #176	@ 0xb0
 800b03e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	7c1b      	ldrb	r3, [r3, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d138      	bne.n	800b0c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b050:	4b5e      	ldr	r3, [pc, #376]	@ (800b1cc <USBD_CDC_Init+0x1e4>)
 800b052:	7819      	ldrb	r1, [r3, #0]
 800b054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b058:	2202      	movs	r2, #2
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f002 fbc9 	bl	800d7f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b060:	4b5a      	ldr	r3, [pc, #360]	@ (800b1cc <USBD_CDC_Init+0x1e4>)
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	f003 020f 	and.w	r2, r3, #15
 800b068:	6879      	ldr	r1, [r7, #4]
 800b06a:	4613      	mov	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	440b      	add	r3, r1
 800b074:	3323      	adds	r3, #35	@ 0x23
 800b076:	2201      	movs	r2, #1
 800b078:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b07a:	4b55      	ldr	r3, [pc, #340]	@ (800b1d0 <USBD_CDC_Init+0x1e8>)
 800b07c:	7819      	ldrb	r1, [r3, #0]
 800b07e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b082:	2202      	movs	r2, #2
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f002 fbb4 	bl	800d7f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b08a:	4b51      	ldr	r3, [pc, #324]	@ (800b1d0 <USBD_CDC_Init+0x1e8>)
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	f003 020f 	and.w	r2, r3, #15
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0a6:	4b4b      	ldr	r3, [pc, #300]	@ (800b1d4 <USBD_CDC_Init+0x1ec>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	f003 020f 	and.w	r2, r3, #15
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	440b      	add	r3, r1
 800b0ba:	331c      	adds	r3, #28
 800b0bc:	2210      	movs	r2, #16
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	e035      	b.n	800b12e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0c2:	4b42      	ldr	r3, [pc, #264]	@ (800b1cc <USBD_CDC_Init+0x1e4>)
 800b0c4:	7819      	ldrb	r1, [r3, #0]
 800b0c6:	2340      	movs	r3, #64	@ 0x40
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f002 fb91 	bl	800d7f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b0d0:	4b3e      	ldr	r3, [pc, #248]	@ (800b1cc <USBD_CDC_Init+0x1e4>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	f003 020f 	and.w	r2, r3, #15
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	440b      	add	r3, r1
 800b0e4:	3323      	adds	r3, #35	@ 0x23
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b0ea:	4b39      	ldr	r3, [pc, #228]	@ (800b1d0 <USBD_CDC_Init+0x1e8>)
 800b0ec:	7819      	ldrb	r1, [r3, #0]
 800b0ee:	2340      	movs	r3, #64	@ 0x40
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f002 fb7d 	bl	800d7f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b0f8:	4b35      	ldr	r3, [pc, #212]	@ (800b1d0 <USBD_CDC_Init+0x1e8>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	f003 020f 	and.w	r2, r3, #15
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	440b      	add	r3, r1
 800b10c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b110:	2201      	movs	r2, #1
 800b112:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b114:	4b2f      	ldr	r3, [pc, #188]	@ (800b1d4 <USBD_CDC_Init+0x1ec>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	f003 020f 	and.w	r2, r3, #15
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	440b      	add	r3, r1
 800b128:	331c      	adds	r3, #28
 800b12a:	2210      	movs	r2, #16
 800b12c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b12e:	4b29      	ldr	r3, [pc, #164]	@ (800b1d4 <USBD_CDC_Init+0x1ec>)
 800b130:	7819      	ldrb	r1, [r3, #0]
 800b132:	2308      	movs	r3, #8
 800b134:	2203      	movs	r2, #3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f002 fb5b 	bl	800d7f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b13c:	4b25      	ldr	r3, [pc, #148]	@ (800b1d4 <USBD_CDC_Init+0x1ec>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	f003 020f 	and.w	r2, r3, #15
 800b144:	6879      	ldr	r1, [r7, #4]
 800b146:	4613      	mov	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	440b      	add	r3, r1
 800b150:	3323      	adds	r3, #35	@ 0x23
 800b152:	2201      	movs	r2, #1
 800b154:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	33b0      	adds	r3, #176	@ 0xb0
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b18c:	2302      	movs	r3, #2
 800b18e:	e018      	b.n	800b1c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	7c1b      	ldrb	r3, [r3, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10a      	bne.n	800b1ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b198:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d0 <USBD_CDC_Init+0x1e8>)
 800b19a:	7819      	ldrb	r1, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f002 fc12 	bl	800d9d0 <USBD_LL_PrepareReceive>
 800b1ac:	e008      	b.n	800b1c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1ae:	4b08      	ldr	r3, [pc, #32]	@ (800b1d0 <USBD_CDC_Init+0x1e8>)
 800b1b0:	7819      	ldrb	r1, [r3, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1b8:	2340      	movs	r3, #64	@ 0x40
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f002 fc08 	bl	800d9d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	200000bf 	.word	0x200000bf
 800b1d0:	200000c0 	.word	0x200000c0
 800b1d4:	200000c1 	.word	0x200000c1

0800b1d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b1e4:	4b3a      	ldr	r3, [pc, #232]	@ (800b2d0 <USBD_CDC_DeInit+0xf8>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f002 fb27 	bl	800d83e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b1f0:	4b37      	ldr	r3, [pc, #220]	@ (800b2d0 <USBD_CDC_DeInit+0xf8>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	f003 020f 	and.w	r2, r3, #15
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	3323      	adds	r3, #35	@ 0x23
 800b206:	2200      	movs	r2, #0
 800b208:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b20a:	4b32      	ldr	r3, [pc, #200]	@ (800b2d4 <USBD_CDC_DeInit+0xfc>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f002 fb14 	bl	800d83e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b216:	4b2f      	ldr	r3, [pc, #188]	@ (800b2d4 <USBD_CDC_DeInit+0xfc>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	f003 020f 	and.w	r2, r3, #15
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	4613      	mov	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	440b      	add	r3, r1
 800b22a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b22e:	2200      	movs	r2, #0
 800b230:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b232:	4b29      	ldr	r3, [pc, #164]	@ (800b2d8 <USBD_CDC_DeInit+0x100>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f002 fb00 	bl	800d83e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b23e:	4b26      	ldr	r3, [pc, #152]	@ (800b2d8 <USBD_CDC_DeInit+0x100>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	f003 020f 	and.w	r2, r3, #15
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	4613      	mov	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	440b      	add	r3, r1
 800b252:	3323      	adds	r3, #35	@ 0x23
 800b254:	2200      	movs	r2, #0
 800b256:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b258:	4b1f      	ldr	r3, [pc, #124]	@ (800b2d8 <USBD_CDC_DeInit+0x100>)
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	f003 020f 	and.w	r2, r3, #15
 800b260:	6879      	ldr	r1, [r7, #4]
 800b262:	4613      	mov	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	440b      	add	r3, r1
 800b26c:	331c      	adds	r3, #28
 800b26e:	2200      	movs	r2, #0
 800b270:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	32b0      	adds	r2, #176	@ 0xb0
 800b27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d01f      	beq.n	800b2c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	33b0      	adds	r3, #176	@ 0xb0
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	32b0      	adds	r2, #176	@ 0xb0
 800b2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f002 fbd4 	bl	800da54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	32b0      	adds	r2, #176	@ 0xb0
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	200000bf 	.word	0x200000bf
 800b2d4:	200000c0 	.word	0x200000c0
 800b2d8:	200000c1 	.word	0x200000c1

0800b2dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	32b0      	adds	r2, #176	@ 0xb0
 800b2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b308:	2303      	movs	r3, #3
 800b30a:	e0bf      	b.n	800b48c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b314:	2b00      	cmp	r3, #0
 800b316:	d050      	beq.n	800b3ba <USBD_CDC_Setup+0xde>
 800b318:	2b20      	cmp	r3, #32
 800b31a:	f040 80af 	bne.w	800b47c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	88db      	ldrh	r3, [r3, #6]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d03a      	beq.n	800b39c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	b25b      	sxtb	r3, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	da1b      	bge.n	800b368 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	33b0      	adds	r3, #176	@ 0xb0
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b346:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	88d2      	ldrh	r2, [r2, #6]
 800b34c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	88db      	ldrh	r3, [r3, #6]
 800b352:	2b07      	cmp	r3, #7
 800b354:	bf28      	it	cs
 800b356:	2307      	movcs	r3, #7
 800b358:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	89fa      	ldrh	r2, [r7, #14]
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 fda9 	bl	800ceb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b366:	e090      	b.n	800b48a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	785a      	ldrb	r2, [r3, #1]
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	88db      	ldrh	r3, [r3, #6]
 800b376:	2b3f      	cmp	r3, #63	@ 0x3f
 800b378:	d803      	bhi.n	800b382 <USBD_CDC_Setup+0xa6>
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	88db      	ldrh	r3, [r3, #6]
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	e000      	b.n	800b384 <USBD_CDC_Setup+0xa8>
 800b382:	2240      	movs	r2, #64	@ 0x40
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b38a:	6939      	ldr	r1, [r7, #16]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b392:	461a      	mov	r2, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 fdbe 	bl	800cf16 <USBD_CtlPrepareRx>
      break;
 800b39a:	e076      	b.n	800b48a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	33b0      	adds	r3, #176	@ 0xb0
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	7850      	ldrb	r0, [r2, #1]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	4798      	blx	r3
      break;
 800b3b8:	e067      	b.n	800b48a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	785b      	ldrb	r3, [r3, #1]
 800b3be:	2b0b      	cmp	r3, #11
 800b3c0:	d851      	bhi.n	800b466 <USBD_CDC_Setup+0x18a>
 800b3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c8 <USBD_CDC_Setup+0xec>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b3f9 	.word	0x0800b3f9
 800b3cc:	0800b475 	.word	0x0800b475
 800b3d0:	0800b467 	.word	0x0800b467
 800b3d4:	0800b467 	.word	0x0800b467
 800b3d8:	0800b467 	.word	0x0800b467
 800b3dc:	0800b467 	.word	0x0800b467
 800b3e0:	0800b467 	.word	0x0800b467
 800b3e4:	0800b467 	.word	0x0800b467
 800b3e8:	0800b467 	.word	0x0800b467
 800b3ec:	0800b467 	.word	0x0800b467
 800b3f0:	0800b423 	.word	0x0800b423
 800b3f4:	0800b44d 	.word	0x0800b44d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b03      	cmp	r3, #3
 800b402:	d107      	bne.n	800b414 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b404:	f107 030a 	add.w	r3, r7, #10
 800b408:	2202      	movs	r2, #2
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 fd53 	bl	800ceb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b412:	e032      	b.n	800b47a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fcd1 	bl	800cdbe <USBD_CtlError>
            ret = USBD_FAIL;
 800b41c:	2303      	movs	r3, #3
 800b41e:	75fb      	strb	r3, [r7, #23]
          break;
 800b420:	e02b      	b.n	800b47a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	d107      	bne.n	800b43e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b42e:	f107 030d 	add.w	r3, r7, #13
 800b432:	2201      	movs	r2, #1
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f001 fd3e 	bl	800ceb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b43c:	e01d      	b.n	800b47a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 fcbc 	bl	800cdbe <USBD_CtlError>
            ret = USBD_FAIL;
 800b446:	2303      	movs	r3, #3
 800b448:	75fb      	strb	r3, [r7, #23]
          break;
 800b44a:	e016      	b.n	800b47a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b03      	cmp	r3, #3
 800b456:	d00f      	beq.n	800b478 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f001 fcaf 	bl	800cdbe <USBD_CtlError>
            ret = USBD_FAIL;
 800b460:	2303      	movs	r3, #3
 800b462:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b464:	e008      	b.n	800b478 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f001 fca8 	bl	800cdbe <USBD_CtlError>
          ret = USBD_FAIL;
 800b46e:	2303      	movs	r3, #3
 800b470:	75fb      	strb	r3, [r7, #23]
          break;
 800b472:	e002      	b.n	800b47a <USBD_CDC_Setup+0x19e>
          break;
 800b474:	bf00      	nop
 800b476:	e008      	b.n	800b48a <USBD_CDC_Setup+0x1ae>
          break;
 800b478:	bf00      	nop
      }
      break;
 800b47a:	e006      	b.n	800b48a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f001 fc9d 	bl	800cdbe <USBD_CtlError>
      ret = USBD_FAIL;
 800b484:	2303      	movs	r3, #3
 800b486:	75fb      	strb	r3, [r7, #23]
      break;
 800b488:	bf00      	nop
  }

  return (uint8_t)ret;
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	32b0      	adds	r2, #176	@ 0xb0
 800b4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e065      	b.n	800b58a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	32b0      	adds	r2, #176	@ 0xb0
 800b4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	f003 020f 	and.w	r2, r3, #15
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	440b      	add	r3, r1
 800b4e0:	3314      	adds	r3, #20
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d02f      	beq.n	800b548 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b4e8:	78fb      	ldrb	r3, [r7, #3]
 800b4ea:	f003 020f 	and.w	r2, r3, #15
 800b4ee:	6879      	ldr	r1, [r7, #4]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	440b      	add	r3, r1
 800b4fa:	3314      	adds	r3, #20
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	78fb      	ldrb	r3, [r7, #3]
 800b500:	f003 010f 	and.w	r1, r3, #15
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	460b      	mov	r3, r1
 800b508:	00db      	lsls	r3, r3, #3
 800b50a:	440b      	add	r3, r1
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4403      	add	r3, r0
 800b510:	331c      	adds	r3, #28
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	fbb2 f1f3 	udiv	r1, r2, r3
 800b518:	fb01 f303 	mul.w	r3, r1, r3
 800b51c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d112      	bne.n	800b548 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	f003 020f 	and.w	r2, r3, #15
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	4613      	mov	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4413      	add	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	440b      	add	r3, r1
 800b534:	3314      	adds	r3, #20
 800b536:	2200      	movs	r2, #0
 800b538:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b53a:	78f9      	ldrb	r1, [r7, #3]
 800b53c:	2300      	movs	r3, #0
 800b53e:	2200      	movs	r2, #0
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f002 fa24 	bl	800d98e <USBD_LL_Transmit>
 800b546:	e01f      	b.n	800b588 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	33b0      	adds	r3, #176	@ 0xb0
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d010      	beq.n	800b588 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	33b0      	adds	r3, #176	@ 0xb0
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b584:	78fa      	ldrb	r2, [r7, #3]
 800b586:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	460b      	mov	r3, r1
 800b59c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	32b0      	adds	r2, #176	@ 0xb0
 800b5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	32b0      	adds	r2, #176	@ 0xb0
 800b5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	e01a      	b.n	800b5fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f002 fa22 	bl	800da12 <USBD_LL_GetRxDataSize>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	33b0      	adds	r3, #176	@ 0xb0
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	32b0      	adds	r2, #176	@ 0xb0
 800b614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b618:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b620:	2303      	movs	r3, #3
 800b622:	e024      	b.n	800b66e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	33b0      	adds	r3, #176	@ 0xb0
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d019      	beq.n	800b66c <USBD_CDC_EP0_RxReady+0x6a>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b63e:	2bff      	cmp	r3, #255	@ 0xff
 800b640:	d014      	beq.n	800b66c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	33b0      	adds	r3, #176	@ 0xb0
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b65a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b662:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	22ff      	movs	r2, #255	@ 0xff
 800b668:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b680:	2182      	movs	r1, #130	@ 0x82
 800b682:	4818      	ldr	r0, [pc, #96]	@ (800b6e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b684:	f000 fd62 	bl	800c14c <USBD_GetEpDesc>
 800b688:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b68a:	2101      	movs	r1, #1
 800b68c:	4815      	ldr	r0, [pc, #84]	@ (800b6e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b68e:	f000 fd5d 	bl	800c14c <USBD_GetEpDesc>
 800b692:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b694:	2181      	movs	r1, #129	@ 0x81
 800b696:	4813      	ldr	r0, [pc, #76]	@ (800b6e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b698:	f000 fd58 	bl	800c14c <USBD_GetEpDesc>
 800b69c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2210      	movs	r2, #16
 800b6a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d006      	beq.n	800b6be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6b8:	711a      	strb	r2, [r3, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d006      	beq.n	800b6d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6cc:	711a      	strb	r2, [r3, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2243      	movs	r2, #67	@ 0x43
 800b6d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6d8:	4b02      	ldr	r3, [pc, #8]	@ (800b6e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	2000007c 	.word	0x2000007c

0800b6e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6f0:	2182      	movs	r1, #130	@ 0x82
 800b6f2:	4818      	ldr	r0, [pc, #96]	@ (800b754 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6f4:	f000 fd2a 	bl	800c14c <USBD_GetEpDesc>
 800b6f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	4815      	ldr	r0, [pc, #84]	@ (800b754 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6fe:	f000 fd25 	bl	800c14c <USBD_GetEpDesc>
 800b702:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b704:	2181      	movs	r1, #129	@ 0x81
 800b706:	4813      	ldr	r0, [pc, #76]	@ (800b754 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b708:	f000 fd20 	bl	800c14c <USBD_GetEpDesc>
 800b70c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2210      	movs	r2, #16
 800b718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d006      	beq.n	800b72e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	2200      	movs	r2, #0
 800b724:	711a      	strb	r2, [r3, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	f042 0202 	orr.w	r2, r2, #2
 800b72c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d006      	beq.n	800b742 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	711a      	strb	r2, [r3, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f042 0202 	orr.w	r2, r2, #2
 800b740:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2243      	movs	r2, #67	@ 0x43
 800b746:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b748:	4b02      	ldr	r3, [pc, #8]	@ (800b754 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3718      	adds	r7, #24
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	2000007c 	.word	0x2000007c

0800b758 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b760:	2182      	movs	r1, #130	@ 0x82
 800b762:	4818      	ldr	r0, [pc, #96]	@ (800b7c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b764:	f000 fcf2 	bl	800c14c <USBD_GetEpDesc>
 800b768:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b76a:	2101      	movs	r1, #1
 800b76c:	4815      	ldr	r0, [pc, #84]	@ (800b7c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b76e:	f000 fced 	bl	800c14c <USBD_GetEpDesc>
 800b772:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b774:	2181      	movs	r1, #129	@ 0x81
 800b776:	4813      	ldr	r0, [pc, #76]	@ (800b7c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b778:	f000 fce8 	bl	800c14c <USBD_GetEpDesc>
 800b77c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	2210      	movs	r2, #16
 800b788:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d006      	beq.n	800b79e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	2200      	movs	r2, #0
 800b794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b798:	711a      	strb	r2, [r3, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d006      	beq.n	800b7b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7ac:	711a      	strb	r2, [r3, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2243      	movs	r2, #67	@ 0x43
 800b7b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7b8:	4b02      	ldr	r3, [pc, #8]	@ (800b7c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	2000007c 	.word	0x2000007c

0800b7c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	220a      	movs	r2, #10
 800b7d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b7d6:	4b03      	ldr	r3, [pc, #12]	@ (800b7e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	20000038 	.word	0x20000038

0800b7e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	e009      	b.n	800b810 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	33b0      	adds	r3, #176	@ 0xb0
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	32b0      	adds	r2, #176	@ 0xb0
 800b832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b836:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b83e:	2303      	movs	r3, #3
 800b840:	e008      	b.n	800b854 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	371c      	adds	r7, #28
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	32b0      	adds	r2, #176	@ 0xb0
 800b874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b878:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b880:	2303      	movs	r3, #3
 800b882:	e004      	b.n	800b88e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
	...

0800b89c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	32b0      	adds	r2, #176	@ 0xb0
 800b8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d101      	bne.n	800b8c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e025      	b.n	800b90e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d11f      	bne.n	800b90c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b8d4:	4b10      	ldr	r3, [pc, #64]	@ (800b918 <USBD_CDC_TransmitPacket+0x7c>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	f003 020f 	and.w	r2, r3, #15
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4403      	add	r3, r0
 800b8ee:	3314      	adds	r3, #20
 800b8f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b8f2:	4b09      	ldr	r3, [pc, #36]	@ (800b918 <USBD_CDC_TransmitPacket+0x7c>)
 800b8f4:	7819      	ldrb	r1, [r3, #0]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f002 f843 	bl	800d98e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	200000bf 	.word	0x200000bf

0800b91c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	32b0      	adds	r2, #176	@ 0xb0
 800b92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b932:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	32b0      	adds	r2, #176	@ 0xb0
 800b93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b946:	2303      	movs	r3, #3
 800b948:	e018      	b.n	800b97c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	7c1b      	ldrb	r3, [r3, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10a      	bne.n	800b968 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b952:	4b0c      	ldr	r3, [pc, #48]	@ (800b984 <USBD_CDC_ReceivePacket+0x68>)
 800b954:	7819      	ldrb	r1, [r3, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b95c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f002 f835 	bl	800d9d0 <USBD_LL_PrepareReceive>
 800b966:	e008      	b.n	800b97a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b968:	4b06      	ldr	r3, [pc, #24]	@ (800b984 <USBD_CDC_ReceivePacket+0x68>)
 800b96a:	7819      	ldrb	r1, [r3, #0]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b972:	2340      	movs	r3, #64	@ 0x40
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f002 f82b 	bl	800d9d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	200000c0 	.word	0x200000c0

0800b988 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	4613      	mov	r3, r2
 800b994:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d101      	bne.n	800b9a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e01f      	b.n	800b9e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d003      	beq.n	800b9c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	79fa      	ldrb	r2, [r7, #7]
 800b9d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f001 fea5 	bl	800d724 <USBD_LL_Init>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e025      	b.n	800ba4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	32ae      	adds	r2, #174	@ 0xae
 800ba12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00f      	beq.n	800ba3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	32ae      	adds	r2, #174	@ 0xae
 800ba26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2c:	f107 020e 	add.w	r2, r7, #14
 800ba30:	4610      	mov	r0, r2
 800ba32:	4798      	blx	r3
 800ba34:	4602      	mov	r2, r0
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f001 fead 	bl	800d7bc <USBD_LL_Start>
 800ba62:	4603      	mov	r3, r0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d009      	beq.n	800bab0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	78fa      	ldrb	r2, [r7, #3]
 800baa6:	4611      	mov	r1, r2
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	4798      	blx	r3
 800baac:	4603      	mov	r3, r0
 800baae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	460b      	mov	r3, r1
 800bac4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	78fa      	ldrb	r2, [r7, #3]
 800bad4:	4611      	mov	r1, r2
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bae0:	2303      	movs	r3, #3
 800bae2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 f922 	bl	800cd4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb14:	461a      	mov	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb22:	f003 031f 	and.w	r3, r3, #31
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d01a      	beq.n	800bb60 <USBD_LL_SetupStage+0x72>
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d822      	bhi.n	800bb74 <USBD_LL_SetupStage+0x86>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <USBD_LL_SetupStage+0x4a>
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d00a      	beq.n	800bb4c <USBD_LL_SetupStage+0x5e>
 800bb36:	e01d      	b.n	800bb74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 fb77 	bl	800c234 <USBD_StdDevReq>
 800bb46:	4603      	mov	r3, r0
 800bb48:	73fb      	strb	r3, [r7, #15]
      break;
 800bb4a:	e020      	b.n	800bb8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb52:	4619      	mov	r1, r3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fbdf 	bl	800c318 <USBD_StdItfReq>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5e:	e016      	b.n	800bb8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fc41 	bl	800c3f0 <USBD_StdEPReq>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73fb      	strb	r3, [r7, #15]
      break;
 800bb72:	e00c      	b.n	800bb8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	4619      	mov	r1, r3
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 fe7a 	bl	800d87c <USBD_LL_StallEP>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb8c:	bf00      	nop
  }

  return ret;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	460b      	mov	r3, r1
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bbaa:	7afb      	ldrb	r3, [r7, #11]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d177      	bne.n	800bca0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bbb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbbe:	2b03      	cmp	r3, #3
 800bbc0:	f040 80a1 	bne.w	800bd06 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	8992      	ldrh	r2, [r2, #12]
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d91c      	bls.n	800bc0a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	8992      	ldrh	r2, [r2, #12]
 800bbd8:	1a9a      	subs	r2, r3, r2
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	693a      	ldr	r2, [r7, #16]
 800bbe4:	8992      	ldrh	r2, [r2, #12]
 800bbe6:	441a      	add	r2, r3
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	6919      	ldr	r1, [r3, #16]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	899b      	ldrh	r3, [r3, #12]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	bf38      	it	cc
 800bbfe:	4613      	movcc	r3, r2
 800bc00:	461a      	mov	r2, r3
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f001 f9a8 	bl	800cf58 <USBD_CtlContinueRx>
 800bc08:	e07d      	b.n	800bd06 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc10:	f003 031f 	and.w	r3, r3, #31
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d014      	beq.n	800bc42 <USBD_LL_DataOutStage+0xaa>
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d81d      	bhi.n	800bc58 <USBD_LL_DataOutStage+0xc0>
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <USBD_LL_DataOutStage+0x8e>
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d003      	beq.n	800bc2c <USBD_LL_DataOutStage+0x94>
 800bc24:	e018      	b.n	800bc58 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc26:	2300      	movs	r3, #0
 800bc28:	75bb      	strb	r3, [r7, #22]
            break;
 800bc2a:	e018      	b.n	800bc5e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	4619      	mov	r1, r3
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 fa6e 	bl	800c118 <USBD_CoreFindIF>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	75bb      	strb	r3, [r7, #22]
            break;
 800bc40:	e00d      	b.n	800bc5e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fa70 	bl	800c132 <USBD_CoreFindEP>
 800bc52:	4603      	mov	r3, r0
 800bc54:	75bb      	strb	r3, [r7, #22]
            break;
 800bc56:	e002      	b.n	800bc5e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc5c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc5e:	7dbb      	ldrb	r3, [r7, #22]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d119      	bne.n	800bc98 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d113      	bne.n	800bc98 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc70:	7dba      	ldrb	r2, [r7, #22]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	32ae      	adds	r2, #174	@ 0xae
 800bc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00b      	beq.n	800bc98 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bc80:	7dba      	ldrb	r2, [r7, #22]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc88:	7dba      	ldrb	r2, [r7, #22]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	32ae      	adds	r2, #174	@ 0xae
 800bc8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f001 f96e 	bl	800cf7a <USBD_CtlSendStatus>
 800bc9e:	e032      	b.n	800bd06 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bca0:	7afb      	ldrb	r3, [r7, #11]
 800bca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	4619      	mov	r1, r3
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 fa41 	bl	800c132 <USBD_CoreFindEP>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcb4:	7dbb      	ldrb	r3, [r7, #22]
 800bcb6:	2bff      	cmp	r3, #255	@ 0xff
 800bcb8:	d025      	beq.n	800bd06 <USBD_LL_DataOutStage+0x16e>
 800bcba:	7dbb      	ldrb	r3, [r7, #22]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d122      	bne.n	800bd06 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d117      	bne.n	800bcfc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bccc:	7dba      	ldrb	r2, [r7, #22]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	32ae      	adds	r2, #174	@ 0xae
 800bcd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00f      	beq.n	800bcfc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bcdc:	7dba      	ldrb	r2, [r7, #22]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bce4:	7dba      	ldrb	r2, [r7, #22]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	32ae      	adds	r2, #174	@ 0xae
 800bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	7afa      	ldrb	r2, [r7, #11]
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	4798      	blx	r3
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	e000      	b.n	800bd08 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bd1e:	7afb      	ldrb	r3, [r7, #11]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d178      	bne.n	800be16 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3314      	adds	r3, #20
 800bd28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d163      	bne.n	800bdfc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	8992      	ldrh	r2, [r2, #12]
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d91c      	bls.n	800bd7a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	693a      	ldr	r2, [r7, #16]
 800bd46:	8992      	ldrh	r2, [r2, #12]
 800bd48:	1a9a      	subs	r2, r3, r2
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	8992      	ldrh	r2, [r2, #12]
 800bd56:	441a      	add	r2, r3
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	6919      	ldr	r1, [r3, #16]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	461a      	mov	r2, r3
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f001 f8c4 	bl	800cef4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2100      	movs	r1, #0
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f001 fe2c 	bl	800d9d0 <USBD_LL_PrepareReceive>
 800bd78:	e040      	b.n	800bdfc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	899b      	ldrh	r3, [r3, #12]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d11c      	bne.n	800bdc2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d316      	bcc.n	800bdc2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d20f      	bcs.n	800bdc2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bda2:	2200      	movs	r2, #0
 800bda4:	2100      	movs	r1, #0
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f001 f8a4 	bl	800cef4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2100      	movs	r1, #0
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f001 fe08 	bl	800d9d0 <USBD_LL_PrepareReceive>
 800bdc0:	e01c      	b.n	800bdfc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d10f      	bne.n	800bdee <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d009      	beq.n	800bdee <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdee:	2180      	movs	r1, #128	@ 0x80
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f001 fd43 	bl	800d87c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f001 f8d2 	bl	800cfa0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d03a      	beq.n	800be7c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7ff fe30 	bl	800ba6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be14:	e032      	b.n	800be7c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be16:	7afb      	ldrb	r3, [r7, #11]
 800be18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	4619      	mov	r1, r3
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 f986 	bl	800c132 <USBD_CoreFindEP>
 800be26:	4603      	mov	r3, r0
 800be28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	2bff      	cmp	r3, #255	@ 0xff
 800be2e:	d025      	beq.n	800be7c <USBD_LL_DataInStage+0x16c>
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d122      	bne.n	800be7c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d11c      	bne.n	800be7c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be42:	7dfa      	ldrb	r2, [r7, #23]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	32ae      	adds	r2, #174	@ 0xae
 800be48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d014      	beq.n	800be7c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800be52:	7dfa      	ldrb	r2, [r7, #23]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be5a:	7dfa      	ldrb	r2, [r7, #23]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	32ae      	adds	r2, #174	@ 0xae
 800be60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	7afa      	ldrb	r2, [r7, #11]
 800be68:	4611      	mov	r1, r2
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	4798      	blx	r3
 800be6e:	4603      	mov	r3, r0
 800be70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be72:	7dbb      	ldrb	r3, [r7, #22]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d001      	beq.n	800be7c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800be78:	7dbb      	ldrb	r3, [r7, #22]
 800be7a:	e000      	b.n	800be7e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d014      	beq.n	800beec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00e      	beq.n	800beec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	6852      	ldr	r2, [r2, #4]
 800beda:	b2d2      	uxtb	r2, r2
 800bedc:	4611      	mov	r1, r2
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	4798      	blx	r3
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bee8:	2303      	movs	r3, #3
 800beea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800beec:	2340      	movs	r3, #64	@ 0x40
 800beee:	2200      	movs	r2, #0
 800bef0:	2100      	movs	r1, #0
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f001 fc7d 	bl	800d7f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2240      	movs	r2, #64	@ 0x40
 800bf04:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf08:	2340      	movs	r3, #64	@ 0x40
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2180      	movs	r1, #128	@ 0x80
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f001 fc6f 	bl	800d7f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2240      	movs	r2, #64	@ 0x40
 800bf20:	841a      	strh	r2, [r3, #32]

  return ret;
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	78fa      	ldrb	r2, [r7, #3]
 800bf3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b04      	cmp	r3, #4
 800bf5e:	d006      	beq.n	800bf6e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2204      	movs	r2, #4
 800bf72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b04      	cmp	r3, #4
 800bf96:	d106      	bne.n	800bfa6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d110      	bne.n	800bfea <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00b      	beq.n	800bfea <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfd8:	69db      	ldr	r3, [r3, #28]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d005      	beq.n	800bfea <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	32ae      	adds	r2, #174	@ 0xae
 800c00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c012:	2303      	movs	r3, #3
 800c014:	e01c      	b.n	800c050 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d115      	bne.n	800c04e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	32ae      	adds	r2, #174	@ 0xae
 800c02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00b      	beq.n	800c04e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	32ae      	adds	r2, #174	@ 0xae
 800c040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c044:	6a1b      	ldr	r3, [r3, #32]
 800c046:	78fa      	ldrb	r2, [r7, #3]
 800c048:	4611      	mov	r1, r2
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	32ae      	adds	r2, #174	@ 0xae
 800c06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c076:	2303      	movs	r3, #3
 800c078:	e01c      	b.n	800c0b4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b03      	cmp	r3, #3
 800c084:	d115      	bne.n	800c0b2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	32ae      	adds	r2, #174	@ 0xae
 800c090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00b      	beq.n	800c0b2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	32ae      	adds	r2, #174	@ 0xae
 800c0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0aa:	78fa      	ldrb	r2, [r7, #3]
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b084      	sub	sp, #16
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00e      	beq.n	800c10e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	6852      	ldr	r2, [r2, #4]
 800c0fc:	b2d2      	uxtb	r2, r2
 800c0fe:	4611      	mov	r1, r2
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	4798      	blx	r3
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c10a:	2303      	movs	r3, #3
 800c10c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c124:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c126:	4618      	mov	r0, r3
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c132:	b480      	push	{r7}
 800c134:	b083      	sub	sp, #12
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	460b      	mov	r3, r1
 800c13c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c13e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c160:	2300      	movs	r3, #0
 800c162:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	885b      	ldrh	r3, [r3, #2]
 800c168:	b29b      	uxth	r3, r3
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	7812      	ldrb	r2, [r2, #0]
 800c16e:	4293      	cmp	r3, r2
 800c170:	d91f      	bls.n	800c1b2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c178:	e013      	b.n	800c1a2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c17a:	f107 030a 	add.w	r3, r7, #10
 800c17e:	4619      	mov	r1, r3
 800c180:	6978      	ldr	r0, [r7, #20]
 800c182:	f000 f81b 	bl	800c1bc <USBD_GetNextDesc>
 800c186:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	785b      	ldrb	r3, [r3, #1]
 800c18c:	2b05      	cmp	r3, #5
 800c18e:	d108      	bne.n	800c1a2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	789b      	ldrb	r3, [r3, #2]
 800c198:	78fa      	ldrb	r2, [r7, #3]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d008      	beq.n	800c1b0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	885b      	ldrh	r3, [r3, #2]
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	897b      	ldrh	r3, [r7, #10]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d8e5      	bhi.n	800c17a <USBD_GetEpDesc+0x2e>
 800c1ae:	e000      	b.n	800c1b2 <USBD_GetEpDesc+0x66>
          break;
 800c1b0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1b2:	693b      	ldr	r3, [r7, #16]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3718      	adds	r7, #24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	7812      	ldrb	r2, [r2, #0]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	3301      	adds	r3, #1
 800c20a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c212:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c216:	021b      	lsls	r3, r3, #8
 800c218:	b21a      	sxth	r2, r3
 800c21a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c21e:	4313      	orrs	r3, r2
 800c220:	b21b      	sxth	r3, r3
 800c222:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c224:	89fb      	ldrh	r3, [r7, #14]
}
 800c226:	4618      	mov	r0, r3
 800c228:	371c      	adds	r7, #28
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
	...

0800c234 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c24a:	2b40      	cmp	r3, #64	@ 0x40
 800c24c:	d005      	beq.n	800c25a <USBD_StdDevReq+0x26>
 800c24e:	2b40      	cmp	r3, #64	@ 0x40
 800c250:	d857      	bhi.n	800c302 <USBD_StdDevReq+0xce>
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00f      	beq.n	800c276 <USBD_StdDevReq+0x42>
 800c256:	2b20      	cmp	r3, #32
 800c258:	d153      	bne.n	800c302 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	32ae      	adds	r2, #174	@ 0xae
 800c264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	4798      	blx	r3
 800c270:	4603      	mov	r3, r0
 800c272:	73fb      	strb	r3, [r7, #15]
      break;
 800c274:	e04a      	b.n	800c30c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	785b      	ldrb	r3, [r3, #1]
 800c27a:	2b09      	cmp	r3, #9
 800c27c:	d83b      	bhi.n	800c2f6 <USBD_StdDevReq+0xc2>
 800c27e:	a201      	add	r2, pc, #4	@ (adr r2, 800c284 <USBD_StdDevReq+0x50>)
 800c280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c284:	0800c2d9 	.word	0x0800c2d9
 800c288:	0800c2ed 	.word	0x0800c2ed
 800c28c:	0800c2f7 	.word	0x0800c2f7
 800c290:	0800c2e3 	.word	0x0800c2e3
 800c294:	0800c2f7 	.word	0x0800c2f7
 800c298:	0800c2b7 	.word	0x0800c2b7
 800c29c:	0800c2ad 	.word	0x0800c2ad
 800c2a0:	0800c2f7 	.word	0x0800c2f7
 800c2a4:	0800c2cf 	.word	0x0800c2cf
 800c2a8:	0800c2c1 	.word	0x0800c2c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fa3e 	bl	800c730 <USBD_GetDescriptor>
          break;
 800c2b4:	e024      	b.n	800c300 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 fba3 	bl	800ca04 <USBD_SetAddress>
          break;
 800c2be:	e01f      	b.n	800c300 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fbe2 	bl	800ca8c <USBD_SetConfig>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]
          break;
 800c2cc:	e018      	b.n	800c300 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fc85 	bl	800cbe0 <USBD_GetConfig>
          break;
 800c2d6:	e013      	b.n	800c300 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fcb6 	bl	800cc4c <USBD_GetStatus>
          break;
 800c2e0:	e00e      	b.n	800c300 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fce5 	bl	800ccb4 <USBD_SetFeature>
          break;
 800c2ea:	e009      	b.n	800c300 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fd09 	bl	800cd06 <USBD_ClrFeature>
          break;
 800c2f4:	e004      	b.n	800c300 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fd60 	bl	800cdbe <USBD_CtlError>
          break;
 800c2fe:	bf00      	nop
      }
      break;
 800c300:	e004      	b.n	800c30c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fd5a 	bl	800cdbe <USBD_CtlError>
      break;
 800c30a:	bf00      	nop
  }

  return ret;
 800c30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop

0800c318 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c32e:	2b40      	cmp	r3, #64	@ 0x40
 800c330:	d005      	beq.n	800c33e <USBD_StdItfReq+0x26>
 800c332:	2b40      	cmp	r3, #64	@ 0x40
 800c334:	d852      	bhi.n	800c3dc <USBD_StdItfReq+0xc4>
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <USBD_StdItfReq+0x26>
 800c33a:	2b20      	cmp	r3, #32
 800c33c:	d14e      	bne.n	800c3dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c344:	b2db      	uxtb	r3, r3
 800c346:	3b01      	subs	r3, #1
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d840      	bhi.n	800c3ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	889b      	ldrh	r3, [r3, #4]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b01      	cmp	r3, #1
 800c354:	d836      	bhi.n	800c3c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	889b      	ldrh	r3, [r3, #4]
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	4619      	mov	r1, r3
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7ff feda 	bl	800c118 <USBD_CoreFindIF>
 800c364:	4603      	mov	r3, r0
 800c366:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c368:	7bbb      	ldrb	r3, [r7, #14]
 800c36a:	2bff      	cmp	r3, #255	@ 0xff
 800c36c:	d01d      	beq.n	800c3aa <USBD_StdItfReq+0x92>
 800c36e:	7bbb      	ldrb	r3, [r7, #14]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d11a      	bne.n	800c3aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c374:	7bba      	ldrb	r2, [r7, #14]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	32ae      	adds	r2, #174	@ 0xae
 800c37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00f      	beq.n	800c3a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c384:	7bba      	ldrb	r2, [r7, #14]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c38c:	7bba      	ldrb	r2, [r7, #14]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	32ae      	adds	r2, #174	@ 0xae
 800c392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	4798      	blx	r3
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3a2:	e004      	b.n	800c3ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3a8:	e001      	b.n	800c3ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	88db      	ldrh	r3, [r3, #6]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d110      	bne.n	800c3d8 <USBD_StdItfReq+0xc0>
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10d      	bne.n	800c3d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fddc 	bl	800cf7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3c2:	e009      	b.n	800c3d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fcf9 	bl	800cdbe <USBD_CtlError>
          break;
 800c3cc:	e004      	b.n	800c3d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fcf4 	bl	800cdbe <USBD_CtlError>
          break;
 800c3d6:	e000      	b.n	800c3da <USBD_StdItfReq+0xc2>
          break;
 800c3d8:	bf00      	nop
      }
      break;
 800c3da:	e004      	b.n	800c3e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fced 	bl	800cdbe <USBD_CtlError>
      break;
 800c3e4:	bf00      	nop
  }

  return ret;
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	889b      	ldrh	r3, [r3, #4]
 800c402:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c40c:	2b40      	cmp	r3, #64	@ 0x40
 800c40e:	d007      	beq.n	800c420 <USBD_StdEPReq+0x30>
 800c410:	2b40      	cmp	r3, #64	@ 0x40
 800c412:	f200 8181 	bhi.w	800c718 <USBD_StdEPReq+0x328>
 800c416:	2b00      	cmp	r3, #0
 800c418:	d02a      	beq.n	800c470 <USBD_StdEPReq+0x80>
 800c41a:	2b20      	cmp	r3, #32
 800c41c:	f040 817c 	bne.w	800c718 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c420:	7bbb      	ldrb	r3, [r7, #14]
 800c422:	4619      	mov	r1, r3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff fe84 	bl	800c132 <USBD_CoreFindEP>
 800c42a:	4603      	mov	r3, r0
 800c42c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c42e:	7b7b      	ldrb	r3, [r7, #13]
 800c430:	2bff      	cmp	r3, #255	@ 0xff
 800c432:	f000 8176 	beq.w	800c722 <USBD_StdEPReq+0x332>
 800c436:	7b7b      	ldrb	r3, [r7, #13]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f040 8172 	bne.w	800c722 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c43e:	7b7a      	ldrb	r2, [r7, #13]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c446:	7b7a      	ldrb	r2, [r7, #13]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	32ae      	adds	r2, #174	@ 0xae
 800c44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 8165 	beq.w	800c722 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c458:	7b7a      	ldrb	r2, [r7, #13]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	32ae      	adds	r2, #174	@ 0xae
 800c45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	4798      	blx	r3
 800c46a:	4603      	mov	r3, r0
 800c46c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c46e:	e158      	b.n	800c722 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	785b      	ldrb	r3, [r3, #1]
 800c474:	2b03      	cmp	r3, #3
 800c476:	d008      	beq.n	800c48a <USBD_StdEPReq+0x9a>
 800c478:	2b03      	cmp	r3, #3
 800c47a:	f300 8147 	bgt.w	800c70c <USBD_StdEPReq+0x31c>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 809b 	beq.w	800c5ba <USBD_StdEPReq+0x1ca>
 800c484:	2b01      	cmp	r3, #1
 800c486:	d03c      	beq.n	800c502 <USBD_StdEPReq+0x112>
 800c488:	e140      	b.n	800c70c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b02      	cmp	r3, #2
 800c494:	d002      	beq.n	800c49c <USBD_StdEPReq+0xac>
 800c496:	2b03      	cmp	r3, #3
 800c498:	d016      	beq.n	800c4c8 <USBD_StdEPReq+0xd8>
 800c49a:	e02c      	b.n	800c4f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c49c:	7bbb      	ldrb	r3, [r7, #14]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00d      	beq.n	800c4be <USBD_StdEPReq+0xce>
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
 800c4a4:	2b80      	cmp	r3, #128	@ 0x80
 800c4a6:	d00a      	beq.n	800c4be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f001 f9e5 	bl	800d87c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4b2:	2180      	movs	r1, #128	@ 0x80
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f001 f9e1 	bl	800d87c <USBD_LL_StallEP>
 800c4ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4bc:	e020      	b.n	800c500 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fc7c 	bl	800cdbe <USBD_CtlError>
              break;
 800c4c6:	e01b      	b.n	800c500 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	885b      	ldrh	r3, [r3, #2]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10e      	bne.n	800c4ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4d0:	7bbb      	ldrb	r3, [r7, #14]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00b      	beq.n	800c4ee <USBD_StdEPReq+0xfe>
 800c4d6:	7bbb      	ldrb	r3, [r7, #14]
 800c4d8:	2b80      	cmp	r3, #128	@ 0x80
 800c4da:	d008      	beq.n	800c4ee <USBD_StdEPReq+0xfe>
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	88db      	ldrh	r3, [r3, #6]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d104      	bne.n	800c4ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f001 f9c7 	bl	800d87c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 fd43 	bl	800cf7a <USBD_CtlSendStatus>

              break;
 800c4f4:	e004      	b.n	800c500 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fc60 	bl	800cdbe <USBD_CtlError>
              break;
 800c4fe:	bf00      	nop
          }
          break;
 800c500:	e109      	b.n	800c716 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d002      	beq.n	800c514 <USBD_StdEPReq+0x124>
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d016      	beq.n	800c540 <USBD_StdEPReq+0x150>
 800c512:	e04b      	b.n	800c5ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00d      	beq.n	800c536 <USBD_StdEPReq+0x146>
 800c51a:	7bbb      	ldrb	r3, [r7, #14]
 800c51c:	2b80      	cmp	r3, #128	@ 0x80
 800c51e:	d00a      	beq.n	800c536 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	4619      	mov	r1, r3
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f001 f9a9 	bl	800d87c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c52a:	2180      	movs	r1, #128	@ 0x80
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f001 f9a5 	bl	800d87c <USBD_LL_StallEP>
 800c532:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c534:	e040      	b.n	800c5b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fc40 	bl	800cdbe <USBD_CtlError>
              break;
 800c53e:	e03b      	b.n	800c5b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	885b      	ldrh	r3, [r3, #2]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d136      	bne.n	800c5b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c548:	7bbb      	ldrb	r3, [r7, #14]
 800c54a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d004      	beq.n	800c55c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c552:	7bbb      	ldrb	r3, [r7, #14]
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f001 f9af 	bl	800d8ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fd0c 	bl	800cf7a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c562:	7bbb      	ldrb	r3, [r7, #14]
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7ff fde3 	bl	800c132 <USBD_CoreFindEP>
 800c56c:	4603      	mov	r3, r0
 800c56e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c570:	7b7b      	ldrb	r3, [r7, #13]
 800c572:	2bff      	cmp	r3, #255	@ 0xff
 800c574:	d01f      	beq.n	800c5b6 <USBD_StdEPReq+0x1c6>
 800c576:	7b7b      	ldrb	r3, [r7, #13]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d11c      	bne.n	800c5b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c57c:	7b7a      	ldrb	r2, [r7, #13]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c584:	7b7a      	ldrb	r2, [r7, #13]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	32ae      	adds	r2, #174	@ 0xae
 800c58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d010      	beq.n	800c5b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c594:	7b7a      	ldrb	r2, [r7, #13]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	32ae      	adds	r2, #174	@ 0xae
 800c59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	4798      	blx	r3
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5aa:	e004      	b.n	800c5b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fc05 	bl	800cdbe <USBD_CtlError>
              break;
 800c5b4:	e000      	b.n	800c5b8 <USBD_StdEPReq+0x1c8>
              break;
 800c5b6:	bf00      	nop
          }
          break;
 800c5b8:	e0ad      	b.n	800c716 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d002      	beq.n	800c5cc <USBD_StdEPReq+0x1dc>
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d033      	beq.n	800c632 <USBD_StdEPReq+0x242>
 800c5ca:	e099      	b.n	800c700 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d007      	beq.n	800c5e2 <USBD_StdEPReq+0x1f2>
 800c5d2:	7bbb      	ldrb	r3, [r7, #14]
 800c5d4:	2b80      	cmp	r3, #128	@ 0x80
 800c5d6:	d004      	beq.n	800c5e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fbef 	bl	800cdbe <USBD_CtlError>
                break;
 800c5e0:	e093      	b.n	800c70a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	da0b      	bge.n	800c602 <USBD_StdEPReq+0x212>
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	3310      	adds	r3, #16
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	3304      	adds	r3, #4
 800c600:	e00b      	b.n	800c61a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c602:	7bbb      	ldrb	r3, [r7, #14]
 800c604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	4413      	add	r3, r2
 800c618:	3304      	adds	r3, #4
 800c61a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	2200      	movs	r2, #0
 800c620:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	330e      	adds	r3, #14
 800c626:	2202      	movs	r2, #2
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fc44 	bl	800ceb8 <USBD_CtlSendData>
              break;
 800c630:	e06b      	b.n	800c70a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c636:	2b00      	cmp	r3, #0
 800c638:	da11      	bge.n	800c65e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	f003 020f 	and.w	r2, r3, #15
 800c640:	6879      	ldr	r1, [r7, #4]
 800c642:	4613      	mov	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	440b      	add	r3, r1
 800c64c:	3323      	adds	r3, #35	@ 0x23
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d117      	bne.n	800c684 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fbb1 	bl	800cdbe <USBD_CtlError>
                  break;
 800c65c:	e055      	b.n	800c70a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c65e:	7bbb      	ldrb	r3, [r7, #14]
 800c660:	f003 020f 	and.w	r2, r3, #15
 800c664:	6879      	ldr	r1, [r7, #4]
 800c666:	4613      	mov	r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4413      	add	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	440b      	add	r3, r1
 800c670:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d104      	bne.n	800c684 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fb9e 	bl	800cdbe <USBD_CtlError>
                  break;
 800c682:	e042      	b.n	800c70a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	da0b      	bge.n	800c6a4 <USBD_StdEPReq+0x2b4>
 800c68c:	7bbb      	ldrb	r3, [r7, #14]
 800c68e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c692:	4613      	mov	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4413      	add	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	3310      	adds	r3, #16
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	4413      	add	r3, r2
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	e00b      	b.n	800c6bc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <USBD_StdEPReq+0x2da>
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	2b80      	cmp	r3, #128	@ 0x80
 800c6c8:	d103      	bne.n	800c6d2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	739a      	strb	r2, [r3, #14]
 800c6d0:	e00e      	b.n	800c6f0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 f90e 	bl	800d8f8 <USBD_LL_IsStallEP>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	739a      	strb	r2, [r3, #14]
 800c6e8:	e002      	b.n	800c6f0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	330e      	adds	r3, #14
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fbdd 	bl	800ceb8 <USBD_CtlSendData>
              break;
 800c6fe:	e004      	b.n	800c70a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fb5b 	bl	800cdbe <USBD_CtlError>
              break;
 800c708:	bf00      	nop
          }
          break;
 800c70a:	e004      	b.n	800c716 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fb55 	bl	800cdbe <USBD_CtlError>
          break;
 800c714:	bf00      	nop
      }
      break;
 800c716:	e005      	b.n	800c724 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fb4f 	bl	800cdbe <USBD_CtlError>
      break;
 800c720:	e000      	b.n	800c724 <USBD_StdEPReq+0x334>
      break;
 800c722:	bf00      	nop
  }

  return ret;
 800c724:	7bfb      	ldrb	r3, [r7, #15]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c73e:	2300      	movs	r3, #0
 800c740:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c742:	2300      	movs	r3, #0
 800c744:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	885b      	ldrh	r3, [r3, #2]
 800c74a:	0a1b      	lsrs	r3, r3, #8
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	3b01      	subs	r3, #1
 800c750:	2b06      	cmp	r3, #6
 800c752:	f200 8128 	bhi.w	800c9a6 <USBD_GetDescriptor+0x276>
 800c756:	a201      	add	r2, pc, #4	@ (adr r2, 800c75c <USBD_GetDescriptor+0x2c>)
 800c758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75c:	0800c779 	.word	0x0800c779
 800c760:	0800c791 	.word	0x0800c791
 800c764:	0800c7d1 	.word	0x0800c7d1
 800c768:	0800c9a7 	.word	0x0800c9a7
 800c76c:	0800c9a7 	.word	0x0800c9a7
 800c770:	0800c947 	.word	0x0800c947
 800c774:	0800c973 	.word	0x0800c973
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	7c12      	ldrb	r2, [r2, #16]
 800c784:	f107 0108 	add.w	r1, r7, #8
 800c788:	4610      	mov	r0, r2
 800c78a:	4798      	blx	r3
 800c78c:	60f8      	str	r0, [r7, #12]
      break;
 800c78e:	e112      	b.n	800c9b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7c1b      	ldrb	r3, [r3, #16]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10d      	bne.n	800c7b4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a0:	f107 0208 	add.w	r2, r7, #8
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4798      	blx	r3
 800c7a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7b2:	e100      	b.n	800c9b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7bc:	f107 0208 	add.w	r2, r7, #8
 800c7c0:	4610      	mov	r0, r2
 800c7c2:	4798      	blx	r3
 800c7c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	701a      	strb	r2, [r3, #0]
      break;
 800c7ce:	e0f2      	b.n	800c9b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	885b      	ldrh	r3, [r3, #2]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b05      	cmp	r3, #5
 800c7d8:	f200 80ac 	bhi.w	800c934 <USBD_GetDescriptor+0x204>
 800c7dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e4 <USBD_GetDescriptor+0xb4>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c7fd 	.word	0x0800c7fd
 800c7e8:	0800c831 	.word	0x0800c831
 800c7ec:	0800c865 	.word	0x0800c865
 800c7f0:	0800c899 	.word	0x0800c899
 800c7f4:	0800c8cd 	.word	0x0800c8cd
 800c7f8:	0800c901 	.word	0x0800c901
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00b      	beq.n	800c820 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	7c12      	ldrb	r2, [r2, #16]
 800c814:	f107 0108 	add.w	r1, r7, #8
 800c818:	4610      	mov	r0, r2
 800c81a:	4798      	blx	r3
 800c81c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c81e:	e091      	b.n	800c944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 facb 	bl	800cdbe <USBD_CtlError>
            err++;
 800c828:	7afb      	ldrb	r3, [r7, #11]
 800c82a:	3301      	adds	r3, #1
 800c82c:	72fb      	strb	r3, [r7, #11]
          break;
 800c82e:	e089      	b.n	800c944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00b      	beq.n	800c854 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	7c12      	ldrb	r2, [r2, #16]
 800c848:	f107 0108 	add.w	r1, r7, #8
 800c84c:	4610      	mov	r0, r2
 800c84e:	4798      	blx	r3
 800c850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c852:	e077      	b.n	800c944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fab1 	bl	800cdbe <USBD_CtlError>
            err++;
 800c85c:	7afb      	ldrb	r3, [r7, #11]
 800c85e:	3301      	adds	r3, #1
 800c860:	72fb      	strb	r3, [r7, #11]
          break;
 800c862:	e06f      	b.n	800c944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	7c12      	ldrb	r2, [r2, #16]
 800c87c:	f107 0108 	add.w	r1, r7, #8
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
 800c884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c886:	e05d      	b.n	800c944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fa97 	bl	800cdbe <USBD_CtlError>
            err++;
 800c890:	7afb      	ldrb	r3, [r7, #11]
 800c892:	3301      	adds	r3, #1
 800c894:	72fb      	strb	r3, [r7, #11]
          break;
 800c896:	e055      	b.n	800c944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00b      	beq.n	800c8bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	7c12      	ldrb	r2, [r2, #16]
 800c8b0:	f107 0108 	add.w	r1, r7, #8
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	4798      	blx	r3
 800c8b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ba:	e043      	b.n	800c944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fa7d 	bl	800cdbe <USBD_CtlError>
            err++;
 800c8c4:	7afb      	ldrb	r3, [r7, #11]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ca:	e03b      	b.n	800c944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00b      	beq.n	800c8f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	7c12      	ldrb	r2, [r2, #16]
 800c8e4:	f107 0108 	add.w	r1, r7, #8
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	4798      	blx	r3
 800c8ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ee:	e029      	b.n	800c944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8f0:	6839      	ldr	r1, [r7, #0]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fa63 	bl	800cdbe <USBD_CtlError>
            err++;
 800c8f8:	7afb      	ldrb	r3, [r7, #11]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8fe:	e021      	b.n	800c944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00b      	beq.n	800c924 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	7c12      	ldrb	r2, [r2, #16]
 800c918:	f107 0108 	add.w	r1, r7, #8
 800c91c:	4610      	mov	r0, r2
 800c91e:	4798      	blx	r3
 800c920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c922:	e00f      	b.n	800c944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fa49 	bl	800cdbe <USBD_CtlError>
            err++;
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	3301      	adds	r3, #1
 800c930:	72fb      	strb	r3, [r7, #11]
          break;
 800c932:	e007      	b.n	800c944 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 fa41 	bl	800cdbe <USBD_CtlError>
          err++;
 800c93c:	7afb      	ldrb	r3, [r7, #11]
 800c93e:	3301      	adds	r3, #1
 800c940:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c942:	bf00      	nop
      }
      break;
 800c944:	e037      	b.n	800c9b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	7c1b      	ldrb	r3, [r3, #16]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d109      	bne.n	800c962 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c956:	f107 0208 	add.w	r2, r7, #8
 800c95a:	4610      	mov	r0, r2
 800c95c:	4798      	blx	r3
 800c95e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c960:	e029      	b.n	800c9b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fa2a 	bl	800cdbe <USBD_CtlError>
        err++;
 800c96a:	7afb      	ldrb	r3, [r7, #11]
 800c96c:	3301      	adds	r3, #1
 800c96e:	72fb      	strb	r3, [r7, #11]
      break;
 800c970:	e021      	b.n	800c9b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	7c1b      	ldrb	r3, [r3, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10d      	bne.n	800c996 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c982:	f107 0208 	add.w	r2, r7, #8
 800c986:	4610      	mov	r0, r2
 800c988:	4798      	blx	r3
 800c98a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	3301      	adds	r3, #1
 800c990:	2207      	movs	r2, #7
 800c992:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c994:	e00f      	b.n	800c9b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fa10 	bl	800cdbe <USBD_CtlError>
        err++;
 800c99e:	7afb      	ldrb	r3, [r7, #11]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	72fb      	strb	r3, [r7, #11]
      break;
 800c9a4:	e007      	b.n	800c9b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fa08 	bl	800cdbe <USBD_CtlError>
      err++;
 800c9ae:	7afb      	ldrb	r3, [r7, #11]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c9b4:	bf00      	nop
  }

  if (err != 0U)
 800c9b6:	7afb      	ldrb	r3, [r7, #11]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d11e      	bne.n	800c9fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	88db      	ldrh	r3, [r3, #6]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d016      	beq.n	800c9f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c9c4:	893b      	ldrh	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00e      	beq.n	800c9e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	88da      	ldrh	r2, [r3, #6]
 800c9ce:	893b      	ldrh	r3, [r7, #8]
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	bf28      	it	cs
 800c9d4:	4613      	movcs	r3, r2
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9da:	893b      	ldrh	r3, [r7, #8]
 800c9dc:	461a      	mov	r2, r3
 800c9de:	68f9      	ldr	r1, [r7, #12]
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fa69 	bl	800ceb8 <USBD_CtlSendData>
 800c9e6:	e009      	b.n	800c9fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f9e7 	bl	800cdbe <USBD_CtlError>
 800c9f0:	e004      	b.n	800c9fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fac1 	bl	800cf7a <USBD_CtlSendStatus>
 800c9f8:	e000      	b.n	800c9fc <USBD_GetDescriptor+0x2cc>
    return;
 800c9fa:	bf00      	nop
  }
}
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop

0800ca04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	889b      	ldrh	r3, [r3, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d131      	bne.n	800ca7a <USBD_SetAddress+0x76>
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	88db      	ldrh	r3, [r3, #6]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d12d      	bne.n	800ca7a <USBD_SetAddress+0x76>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	885b      	ldrh	r3, [r3, #2]
 800ca22:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca24:	d829      	bhi.n	800ca7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	885b      	ldrh	r3, [r3, #2]
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d104      	bne.n	800ca48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca3e:	6839      	ldr	r1, [r7, #0]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f9bc 	bl	800cdbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca46:	e01d      	b.n	800ca84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7bfa      	ldrb	r2, [r7, #15]
 800ca4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 ff7b 	bl	800d950 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fa8d 	bl	800cf7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d004      	beq.n	800ca70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2202      	movs	r2, #2
 800ca6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca6e:	e009      	b.n	800ca84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca78:	e004      	b.n	800ca84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f99e 	bl	800cdbe <USBD_CtlError>
  }
}
 800ca82:	bf00      	nop
 800ca84:	bf00      	nop
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	885b      	ldrh	r3, [r3, #2]
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	4b4e      	ldr	r3, [pc, #312]	@ (800cbdc <USBD_SetConfig+0x150>)
 800caa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800caa4:	4b4d      	ldr	r3, [pc, #308]	@ (800cbdc <USBD_SetConfig+0x150>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d905      	bls.n	800cab8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800caac:	6839      	ldr	r1, [r7, #0]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f985 	bl	800cdbe <USBD_CtlError>
    return USBD_FAIL;
 800cab4:	2303      	movs	r3, #3
 800cab6:	e08c      	b.n	800cbd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d002      	beq.n	800caca <USBD_SetConfig+0x3e>
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d029      	beq.n	800cb1c <USBD_SetConfig+0x90>
 800cac8:	e075      	b.n	800cbb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800caca:	4b44      	ldr	r3, [pc, #272]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d020      	beq.n	800cb14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cad2:	4b42      	ldr	r3, [pc, #264]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	461a      	mov	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cadc:	4b3f      	ldr	r3, [pc, #252]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7fe ffcd 	bl	800ba82 <USBD_SetClassConfig>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d008      	beq.n	800cb04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f962 	bl	800cdbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2202      	movs	r2, #2
 800cafe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb02:	e065      	b.n	800cbd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fa38 	bl	800cf7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2203      	movs	r2, #3
 800cb0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb12:	e05d      	b.n	800cbd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fa30 	bl	800cf7a <USBD_CtlSendStatus>
      break;
 800cb1a:	e059      	b.n	800cbd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb1c:	4b2f      	ldr	r3, [pc, #188]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d112      	bne.n	800cb4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2202      	movs	r2, #2
 800cb28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cb2c:	4b2b      	ldr	r3, [pc, #172]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	461a      	mov	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb36:	4b29      	ldr	r3, [pc, #164]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7fe ffbc 	bl	800baba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fa19 	bl	800cf7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb48:	e042      	b.n	800cbd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb4a:	4b24      	ldr	r3, [pc, #144]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d02a      	beq.n	800cbae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	4619      	mov	r1, r3
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7fe ffaa 	bl	800baba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb66:	4b1d      	ldr	r3, [pc, #116]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb70:	4b1a      	ldr	r3, [pc, #104]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7fe ff83 	bl	800ba82 <USBD_SetClassConfig>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00f      	beq.n	800cba6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 f918 	bl	800cdbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	4619      	mov	r1, r3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7fe ff8f 	bl	800baba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2202      	movs	r2, #2
 800cba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cba4:	e014      	b.n	800cbd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f9e7 	bl	800cf7a <USBD_CtlSendStatus>
      break;
 800cbac:	e010      	b.n	800cbd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f9e3 	bl	800cf7a <USBD_CtlSendStatus>
      break;
 800cbb4:	e00c      	b.n	800cbd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 f900 	bl	800cdbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbbe:	4b07      	ldr	r3, [pc, #28]	@ (800cbdc <USBD_SetConfig+0x150>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7fe ff78 	bl	800baba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	73fb      	strb	r3, [r7, #15]
      break;
 800cbce:	bf00      	nop
  }

  return ret;
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000a8c 	.word	0x20000a8c

0800cbe0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	88db      	ldrh	r3, [r3, #6]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d004      	beq.n	800cbfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f8e2 	bl	800cdbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cbfa:	e023      	b.n	800cc44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	dc02      	bgt.n	800cc0e <USBD_GetConfig+0x2e>
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	dc03      	bgt.n	800cc14 <USBD_GetConfig+0x34>
 800cc0c:	e015      	b.n	800cc3a <USBD_GetConfig+0x5a>
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d00b      	beq.n	800cc2a <USBD_GetConfig+0x4a>
 800cc12:	e012      	b.n	800cc3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	3308      	adds	r3, #8
 800cc1e:	2201      	movs	r2, #1
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 f948 	bl	800ceb8 <USBD_CtlSendData>
        break;
 800cc28:	e00c      	b.n	800cc44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	2201      	movs	r2, #1
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 f940 	bl	800ceb8 <USBD_CtlSendData>
        break;
 800cc38:	e004      	b.n	800cc44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f8be 	bl	800cdbe <USBD_CtlError>
        break;
 800cc42:	bf00      	nop
}
 800cc44:	bf00      	nop
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d81e      	bhi.n	800cca2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	88db      	ldrh	r3, [r3, #6]
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d004      	beq.n	800cc76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f8a5 	bl	800cdbe <USBD_CtlError>
        break;
 800cc74:	e01a      	b.n	800ccac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d005      	beq.n	800cc92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f043 0202 	orr.w	r2, r3, #2
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	330c      	adds	r3, #12
 800cc96:	2202      	movs	r2, #2
 800cc98:	4619      	mov	r1, r3
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f90c 	bl	800ceb8 <USBD_CtlSendData>
      break;
 800cca0:	e004      	b.n	800ccac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f88a 	bl	800cdbe <USBD_CtlError>
      break;
 800ccaa:	bf00      	nop
  }
}
 800ccac:	bf00      	nop
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	885b      	ldrh	r3, [r3, #2]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d107      	bne.n	800ccd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f953 	bl	800cf7a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ccd4:	e013      	b.n	800ccfe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	885b      	ldrh	r3, [r3, #2]
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d10b      	bne.n	800ccf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	889b      	ldrh	r3, [r3, #4]
 800cce2:	0a1b      	lsrs	r3, r3, #8
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f943 	bl	800cf7a <USBD_CtlSendStatus>
}
 800ccf4:	e003      	b.n	800ccfe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 f860 	bl	800cdbe <USBD_CtlError>
}
 800ccfe:	bf00      	nop
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b082      	sub	sp, #8
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d80b      	bhi.n	800cd36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	885b      	ldrh	r3, [r3, #2]
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d10c      	bne.n	800cd40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f923 	bl	800cf7a <USBD_CtlSendStatus>
      }
      break;
 800cd34:	e004      	b.n	800cd40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd36:	6839      	ldr	r1, [r7, #0]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f840 	bl	800cdbe <USBD_CtlError>
      break;
 800cd3e:	e000      	b.n	800cd42 <USBD_ClrFeature+0x3c>
      break;
 800cd40:	bf00      	nop
  }
}
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b084      	sub	sp, #16
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	781a      	ldrb	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	3301      	adds	r3, #1
 800cd64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	781a      	ldrb	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3301      	adds	r3, #1
 800cd72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f7ff fa3d 	bl	800c1f4 <SWAPBYTE>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3301      	adds	r3, #1
 800cd86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f7ff fa30 	bl	800c1f4 <SWAPBYTE>
 800cd94:	4603      	mov	r3, r0
 800cd96:	461a      	mov	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3301      	adds	r3, #1
 800cda6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f7ff fa23 	bl	800c1f4 <SWAPBYTE>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	80da      	strh	r2, [r3, #6]
}
 800cdb6:	bf00      	nop
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdc8:	2180      	movs	r1, #128	@ 0x80
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fd56 	bl	800d87c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fd52 	bl	800d87c <USBD_LL_StallEP>
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdec:	2300      	movs	r3, #0
 800cdee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d042      	beq.n	800ce7c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cdfa:	6938      	ldr	r0, [r7, #16]
 800cdfc:	f000 f842 	bl	800ce84 <USBD_GetLen>
 800ce00:	4603      	mov	r3, r0
 800ce02:	3301      	adds	r3, #1
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce0a:	d808      	bhi.n	800ce1e <USBD_GetString+0x3e>
 800ce0c:	6938      	ldr	r0, [r7, #16]
 800ce0e:	f000 f839 	bl	800ce84 <USBD_GetLen>
 800ce12:	4603      	mov	r3, r0
 800ce14:	3301      	adds	r3, #1
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	e001      	b.n	800ce22 <USBD_GetString+0x42>
 800ce1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce26:	7dfb      	ldrb	r3, [r7, #23]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	7812      	ldrb	r2, [r2, #0]
 800ce30:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	3301      	adds	r3, #1
 800ce36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	2203      	movs	r2, #3
 800ce40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
 800ce44:	3301      	adds	r3, #1
 800ce46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce48:	e013      	b.n	800ce72 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	4413      	add	r3, r2
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	7812      	ldrb	r2, [r2, #0]
 800ce54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	613b      	str	r3, [r7, #16]
    idx++;
 800ce5c:	7dfb      	ldrb	r3, [r7, #23]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	4413      	add	r3, r2
 800ce68:	2200      	movs	r2, #0
 800ce6a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e7      	bne.n	800ce4a <USBD_GetString+0x6a>
 800ce7a:	e000      	b.n	800ce7e <USBD_GetString+0x9e>
    return;
 800ce7c:	bf00      	nop
  }
}
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce94:	e005      	b.n	800cea2 <USBD_GetLen+0x1e>
  {
    len++;
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1f5      	bne.n	800ce96 <USBD_GetLen+0x12>
  }

  return len;
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3714      	adds	r7, #20
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2202      	movs	r2, #2
 800cec8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	2100      	movs	r1, #0
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f000 fd52 	bl	800d98e <USBD_LL_Transmit>

  return USBD_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	2100      	movs	r1, #0
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	f000 fd41 	bl	800d98e <USBD_LL_Transmit>

  return USBD_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b084      	sub	sp, #16
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	60f8      	str	r0, [r7, #12]
 800cf1e:	60b9      	str	r1, [r7, #8]
 800cf20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2203      	movs	r2, #3
 800cf26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	2100      	movs	r1, #0
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 fd41 	bl	800d9d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	2100      	movs	r1, #0
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f000 fd30 	bl	800d9d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b082      	sub	sp, #8
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2204      	movs	r2, #4
 800cf86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2100      	movs	r1, #0
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fcfc 	bl	800d98e <USBD_LL_Transmit>

  return USBD_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2205      	movs	r2, #5
 800cfac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fd0a 	bl	800d9d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
	...

0800cfc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	4912      	ldr	r1, [pc, #72]	@ (800d018 <MX_USB_DEVICE_Init+0x50>)
 800cfd0:	4812      	ldr	r0, [pc, #72]	@ (800d01c <MX_USB_DEVICE_Init+0x54>)
 800cfd2:	f7fe fcd9 	bl	800b988 <USBD_Init>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d001      	beq.n	800cfe0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cfdc:	f7f4 fd88 	bl	8001af0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cfe0:	490f      	ldr	r1, [pc, #60]	@ (800d020 <MX_USB_DEVICE_Init+0x58>)
 800cfe2:	480e      	ldr	r0, [pc, #56]	@ (800d01c <MX_USB_DEVICE_Init+0x54>)
 800cfe4:	f7fe fd00 	bl	800b9e8 <USBD_RegisterClass>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cfee:	f7f4 fd7f 	bl	8001af0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cff2:	490c      	ldr	r1, [pc, #48]	@ (800d024 <MX_USB_DEVICE_Init+0x5c>)
 800cff4:	4809      	ldr	r0, [pc, #36]	@ (800d01c <MX_USB_DEVICE_Init+0x54>)
 800cff6:	f7fe fbf7 	bl	800b7e8 <USBD_CDC_RegisterInterface>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d000:	f7f4 fd76 	bl	8001af0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d004:	4805      	ldr	r0, [pc, #20]	@ (800d01c <MX_USB_DEVICE_Init+0x54>)
 800d006:	f7fe fd25 	bl	800ba54 <USBD_Start>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d010:	f7f4 fd6e 	bl	8001af0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d014:	bf00      	nop
 800d016:	bd80      	pop	{r7, pc}
 800d018:	200000e0 	.word	0x200000e0
 800d01c:	20000a90 	.word	0x20000a90
 800d020:	20000044 	.word	0x20000044
 800d024:	200000cc 	.word	0x200000cc

0800d028 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d02c:	2200      	movs	r2, #0
 800d02e:	4905      	ldr	r1, [pc, #20]	@ (800d044 <CDC_Init_FS+0x1c>)
 800d030:	4805      	ldr	r0, [pc, #20]	@ (800d048 <CDC_Init_FS+0x20>)
 800d032:	f7fe fbf3 	bl	800b81c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d036:	4905      	ldr	r1, [pc, #20]	@ (800d04c <CDC_Init_FS+0x24>)
 800d038:	4803      	ldr	r0, [pc, #12]	@ (800d048 <CDC_Init_FS+0x20>)
 800d03a:	f7fe fc11 	bl	800b860 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d03e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d040:	4618      	mov	r0, r3
 800d042:	bd80      	pop	{r7, pc}
 800d044:	20000f6c 	.word	0x20000f6c
 800d048:	20000a90 	.word	0x20000a90
 800d04c:	20000d6c 	.word	0x20000d6c

0800d050 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d050:	b480      	push	{r7}
 800d052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d054:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d056:	4618      	mov	r0, r3
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	6039      	str	r1, [r7, #0]
 800d06a:	71fb      	strb	r3, [r7, #7]
 800d06c:	4613      	mov	r3, r2
 800d06e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d070:	79fb      	ldrb	r3, [r7, #7]
 800d072:	2b23      	cmp	r3, #35	@ 0x23
 800d074:	f200 8098 	bhi.w	800d1a8 <CDC_Control_FS+0x148>
 800d078:	a201      	add	r2, pc, #4	@ (adr r2, 800d080 <CDC_Control_FS+0x20>)
 800d07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07e:	bf00      	nop
 800d080:	0800d1a9 	.word	0x0800d1a9
 800d084:	0800d1a9 	.word	0x0800d1a9
 800d088:	0800d1a9 	.word	0x0800d1a9
 800d08c:	0800d1a9 	.word	0x0800d1a9
 800d090:	0800d1a9 	.word	0x0800d1a9
 800d094:	0800d1a9 	.word	0x0800d1a9
 800d098:	0800d1a9 	.word	0x0800d1a9
 800d09c:	0800d1a9 	.word	0x0800d1a9
 800d0a0:	0800d1a9 	.word	0x0800d1a9
 800d0a4:	0800d1a9 	.word	0x0800d1a9
 800d0a8:	0800d1a9 	.word	0x0800d1a9
 800d0ac:	0800d1a9 	.word	0x0800d1a9
 800d0b0:	0800d1a9 	.word	0x0800d1a9
 800d0b4:	0800d1a9 	.word	0x0800d1a9
 800d0b8:	0800d1a9 	.word	0x0800d1a9
 800d0bc:	0800d1a9 	.word	0x0800d1a9
 800d0c0:	0800d1a9 	.word	0x0800d1a9
 800d0c4:	0800d1a9 	.word	0x0800d1a9
 800d0c8:	0800d1a9 	.word	0x0800d1a9
 800d0cc:	0800d1a9 	.word	0x0800d1a9
 800d0d0:	0800d1a9 	.word	0x0800d1a9
 800d0d4:	0800d1a9 	.word	0x0800d1a9
 800d0d8:	0800d1a9 	.word	0x0800d1a9
 800d0dc:	0800d1a9 	.word	0x0800d1a9
 800d0e0:	0800d1a9 	.word	0x0800d1a9
 800d0e4:	0800d1a9 	.word	0x0800d1a9
 800d0e8:	0800d1a9 	.word	0x0800d1a9
 800d0ec:	0800d1a9 	.word	0x0800d1a9
 800d0f0:	0800d1a9 	.word	0x0800d1a9
 800d0f4:	0800d1a9 	.word	0x0800d1a9
 800d0f8:	0800d1a9 	.word	0x0800d1a9
 800d0fc:	0800d1a9 	.word	0x0800d1a9
 800d100:	0800d111 	.word	0x0800d111
 800d104:	0800d155 	.word	0x0800d155
 800d108:	0800d1a9 	.word	0x0800d1a9
 800d10c:	0800d1a9 	.word	0x0800d1a9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	461a      	mov	r2, r3
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	021b      	lsls	r3, r3, #8
 800d11e:	431a      	orrs	r2, r3
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	3302      	adds	r3, #2
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	041b      	lsls	r3, r3, #16
 800d128:	431a      	orrs	r2, r3
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	3303      	adds	r3, #3
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	061b      	lsls	r3, r3, #24
 800d132:	4313      	orrs	r3, r2
 800d134:	461a      	mov	r2, r3
 800d136:	4b20      	ldr	r3, [pc, #128]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d138:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	791a      	ldrb	r2, [r3, #4]
 800d13e:	4b1e      	ldr	r3, [pc, #120]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d140:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	795a      	ldrb	r2, [r3, #5]
 800d146:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d148:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	799a      	ldrb	r2, [r3, #6]
 800d14e:	4b1a      	ldr	r3, [pc, #104]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d150:	719a      	strb	r2, [r3, #6]
    break;
 800d152:	e02a      	b.n	800d1aa <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d154:	4b18      	ldr	r3, [pc, #96]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d15e:	4b16      	ldr	r3, [pc, #88]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	0a1a      	lsrs	r2, r3, #8
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	3301      	adds	r3, #1
 800d168:	b2d2      	uxtb	r2, r2
 800d16a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d16c:	4b12      	ldr	r3, [pc, #72]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	0c1a      	lsrs	r2, r3, #16
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	3302      	adds	r3, #2
 800d176:	b2d2      	uxtb	r2, r2
 800d178:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d17a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	0e1a      	lsrs	r2, r3, #24
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	3303      	adds	r3, #3
 800d184:	b2d2      	uxtb	r2, r2
 800d186:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	3304      	adds	r3, #4
 800d18c:	4a0a      	ldr	r2, [pc, #40]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d18e:	7912      	ldrb	r2, [r2, #4]
 800d190:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	3305      	adds	r3, #5
 800d196:	4a08      	ldr	r2, [pc, #32]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d198:	7952      	ldrb	r2, [r2, #5]
 800d19a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	3306      	adds	r3, #6
 800d1a0:	4a05      	ldr	r2, [pc, #20]	@ (800d1b8 <CDC_Control_FS+0x158>)
 800d1a2:	7992      	ldrb	r2, [r2, #6]
 800d1a4:	701a      	strb	r2, [r3, #0]
    break;
 800d1a6:	e000      	b.n	800d1aa <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1a8:	bf00      	nop
  }

  return (USBD_OK);
 800d1aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	200000c4 	.word	0x200000c4

0800d1bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800d1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f4 <CDC_Receive_FS+0x38>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d006      	beq.n	800d1dc <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800d1ce:	4b09      	ldr	r3, [pc, #36]	@ (800d1f4 <CDC_Receive_FS+0x38>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	683a      	ldr	r2, [r7, #0]
 800d1d4:	6812      	ldr	r2, [r2, #0]
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d1dc:	6879      	ldr	r1, [r7, #4]
 800d1de:	4806      	ldr	r0, [pc, #24]	@ (800d1f8 <CDC_Receive_FS+0x3c>)
 800d1e0:	f7fe fb3e 	bl	800b860 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d1e4:	4804      	ldr	r0, [pc, #16]	@ (800d1f8 <CDC_Receive_FS+0x3c>)
 800d1e6:	f7fe fb99 	bl	800b91c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800d1ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	2000116c 	.word	0x2000116c
 800d1f8:	20000a90 	.word	0x20000a90

0800d1fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	460b      	mov	r3, r1
 800d206:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d20c:	4b0d      	ldr	r3, [pc, #52]	@ (800d244 <CDC_Transmit_FS+0x48>)
 800d20e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d212:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d21e:	2301      	movs	r3, #1
 800d220:	e00b      	b.n	800d23a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d222:	887b      	ldrh	r3, [r7, #2]
 800d224:	461a      	mov	r2, r3
 800d226:	6879      	ldr	r1, [r7, #4]
 800d228:	4806      	ldr	r0, [pc, #24]	@ (800d244 <CDC_Transmit_FS+0x48>)
 800d22a:	f7fe faf7 	bl	800b81c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d22e:	4805      	ldr	r0, [pc, #20]	@ (800d244 <CDC_Transmit_FS+0x48>)
 800d230:	f7fe fb34 	bl	800b89c <USBD_CDC_TransmitPacket>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d238:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	20000a90 	.word	0x20000a90

0800d248 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d248:	b480      	push	{r7}
 800d24a:	b087      	sub	sp, #28
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	4613      	mov	r3, r2
 800d254:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d25a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	371c      	adds	r7, #28
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
	...

0800d26c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800d274:	4a04      	ldr	r2, [pc, #16]	@ (800d288 <CDC_Attach_Rx+0x1c>)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6013      	str	r3, [r2, #0]
}
 800d27a:	bf00      	nop
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	2000116c 	.word	0x2000116c

0800d28c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	4603      	mov	r3, r0
 800d294:	6039      	str	r1, [r7, #0]
 800d296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	2212      	movs	r2, #18
 800d29c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d29e:	4b03      	ldr	r3, [pc, #12]	@ (800d2ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	200000fc 	.word	0x200000fc

0800d2b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	6039      	str	r1, [r7, #0]
 800d2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	2204      	movs	r2, #4
 800d2c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2c2:	4b03      	ldr	r3, [pc, #12]	@ (800d2d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	20000110 	.word	0x20000110

0800d2d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	6039      	str	r1, [r7, #0]
 800d2de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d105      	bne.n	800d2f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	4907      	ldr	r1, [pc, #28]	@ (800d308 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2ea:	4808      	ldr	r0, [pc, #32]	@ (800d30c <USBD_FS_ProductStrDescriptor+0x38>)
 800d2ec:	f7ff fd78 	bl	800cde0 <USBD_GetString>
 800d2f0:	e004      	b.n	800d2fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	4904      	ldr	r1, [pc, #16]	@ (800d308 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2f6:	4805      	ldr	r0, [pc, #20]	@ (800d30c <USBD_FS_ProductStrDescriptor+0x38>)
 800d2f8:	f7ff fd72 	bl	800cde0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2fc:	4b02      	ldr	r3, [pc, #8]	@ (800d308 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20001170 	.word	0x20001170
 800d30c:	0800db30 	.word	0x0800db30

0800d310 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	4603      	mov	r3, r0
 800d318:	6039      	str	r1, [r7, #0]
 800d31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	4904      	ldr	r1, [pc, #16]	@ (800d330 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d320:	4804      	ldr	r0, [pc, #16]	@ (800d334 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d322:	f7ff fd5d 	bl	800cde0 <USBD_GetString>
  return USBD_StrDesc;
 800d326:	4b02      	ldr	r3, [pc, #8]	@ (800d330 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	20001170 	.word	0x20001170
 800d334:	0800db48 	.word	0x0800db48

0800d338 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	4603      	mov	r3, r0
 800d340:	6039      	str	r1, [r7, #0]
 800d342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	221a      	movs	r2, #26
 800d348:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d34a:	f000 f843 	bl	800d3d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d34e:	4b02      	ldr	r3, [pc, #8]	@ (800d358 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d350:	4618      	mov	r0, r3
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	20000114 	.word	0x20000114

0800d35c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d368:	79fb      	ldrb	r3, [r7, #7]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d105      	bne.n	800d37a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	4907      	ldr	r1, [pc, #28]	@ (800d390 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d372:	4808      	ldr	r0, [pc, #32]	@ (800d394 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d374:	f7ff fd34 	bl	800cde0 <USBD_GetString>
 800d378:	e004      	b.n	800d384 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	4904      	ldr	r1, [pc, #16]	@ (800d390 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d37e:	4805      	ldr	r0, [pc, #20]	@ (800d394 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d380:	f7ff fd2e 	bl	800cde0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d384:	4b02      	ldr	r3, [pc, #8]	@ (800d390 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d386:	4618      	mov	r0, r3
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	20001170 	.word	0x20001170
 800d394:	0800db5c 	.word	0x0800db5c

0800d398 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	4603      	mov	r3, r0
 800d3a0:	6039      	str	r1, [r7, #0]
 800d3a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3a4:	79fb      	ldrb	r3, [r7, #7]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d105      	bne.n	800d3b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3aa:	683a      	ldr	r2, [r7, #0]
 800d3ac:	4907      	ldr	r1, [pc, #28]	@ (800d3cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3ae:	4808      	ldr	r0, [pc, #32]	@ (800d3d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3b0:	f7ff fd16 	bl	800cde0 <USBD_GetString>
 800d3b4:	e004      	b.n	800d3c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3b6:	683a      	ldr	r2, [r7, #0]
 800d3b8:	4904      	ldr	r1, [pc, #16]	@ (800d3cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3ba:	4805      	ldr	r0, [pc, #20]	@ (800d3d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3bc:	f7ff fd10 	bl	800cde0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3c0:	4b02      	ldr	r3, [pc, #8]	@ (800d3cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20001170 	.word	0x20001170
 800d3d0:	0800db68 	.word	0x0800db68

0800d3d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3da:	4b0f      	ldr	r3, [pc, #60]	@ (800d418 <Get_SerialNum+0x44>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3e0:	4b0e      	ldr	r3, [pc, #56]	@ (800d41c <Get_SerialNum+0x48>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3e6:	4b0e      	ldr	r3, [pc, #56]	@ (800d420 <Get_SerialNum+0x4c>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d009      	beq.n	800d40e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3fa:	2208      	movs	r2, #8
 800d3fc:	4909      	ldr	r1, [pc, #36]	@ (800d424 <Get_SerialNum+0x50>)
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f000 f814 	bl	800d42c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d404:	2204      	movs	r2, #4
 800d406:	4908      	ldr	r1, [pc, #32]	@ (800d428 <Get_SerialNum+0x54>)
 800d408:	68b8      	ldr	r0, [r7, #8]
 800d40a:	f000 f80f 	bl	800d42c <IntToUnicode>
  }
}
 800d40e:	bf00      	nop
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	1fff7a10 	.word	0x1fff7a10
 800d41c:	1fff7a14 	.word	0x1fff7a14
 800d420:	1fff7a18 	.word	0x1fff7a18
 800d424:	20000116 	.word	0x20000116
 800d428:	20000126 	.word	0x20000126

0800d42c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b087      	sub	sp, #28
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	4613      	mov	r3, r2
 800d438:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d43e:	2300      	movs	r3, #0
 800d440:	75fb      	strb	r3, [r7, #23]
 800d442:	e027      	b.n	800d494 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	0f1b      	lsrs	r3, r3, #28
 800d448:	2b09      	cmp	r3, #9
 800d44a:	d80b      	bhi.n	800d464 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	0f1b      	lsrs	r3, r3, #28
 800d450:	b2da      	uxtb	r2, r3
 800d452:	7dfb      	ldrb	r3, [r7, #23]
 800d454:	005b      	lsls	r3, r3, #1
 800d456:	4619      	mov	r1, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	440b      	add	r3, r1
 800d45c:	3230      	adds	r2, #48	@ 0x30
 800d45e:	b2d2      	uxtb	r2, r2
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	e00a      	b.n	800d47a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	0f1b      	lsrs	r3, r3, #28
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	4619      	mov	r1, r3
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	440b      	add	r3, r1
 800d474:	3237      	adds	r2, #55	@ 0x37
 800d476:	b2d2      	uxtb	r2, r2
 800d478:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	011b      	lsls	r3, r3, #4
 800d47e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d480:	7dfb      	ldrb	r3, [r7, #23]
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	3301      	adds	r3, #1
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	4413      	add	r3, r2
 800d48a:	2200      	movs	r2, #0
 800d48c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	3301      	adds	r3, #1
 800d492:	75fb      	strb	r3, [r7, #23]
 800d494:	7dfa      	ldrb	r2, [r7, #23]
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d3d3      	bcc.n	800d444 <IntToUnicode+0x18>
  }
}
 800d49c:	bf00      	nop
 800d49e:	bf00      	nop
 800d4a0:	371c      	adds	r7, #28
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
	...

0800d4ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	@ 0x28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4b4:	f107 0314 	add.w	r3, r7, #20
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]
 800d4bc:	605a      	str	r2, [r3, #4]
 800d4be:	609a      	str	r2, [r3, #8]
 800d4c0:	60da      	str	r2, [r3, #12]
 800d4c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d4cc:	d13a      	bne.n	800d544 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	613b      	str	r3, [r7, #16]
 800d4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800d54c <HAL_PCD_MspInit+0xa0>)
 800d4d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4d6:	4a1d      	ldr	r2, [pc, #116]	@ (800d54c <HAL_PCD_MspInit+0xa0>)
 800d4d8:	f043 0301 	orr.w	r3, r3, #1
 800d4dc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4de:	4b1b      	ldr	r3, [pc, #108]	@ (800d54c <HAL_PCD_MspInit+0xa0>)
 800d4e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	613b      	str	r3, [r7, #16]
 800d4e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d4ea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d4ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4fc:	230a      	movs	r3, #10
 800d4fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d500:	f107 0314 	add.w	r3, r7, #20
 800d504:	4619      	mov	r1, r3
 800d506:	4812      	ldr	r0, [pc, #72]	@ (800d550 <HAL_PCD_MspInit+0xa4>)
 800d508:	f7f6 fe32 	bl	8004170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d50c:	4b0f      	ldr	r3, [pc, #60]	@ (800d54c <HAL_PCD_MspInit+0xa0>)
 800d50e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d510:	4a0e      	ldr	r2, [pc, #56]	@ (800d54c <HAL_PCD_MspInit+0xa0>)
 800d512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d516:	6353      	str	r3, [r2, #52]	@ 0x34
 800d518:	2300      	movs	r3, #0
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	4b0b      	ldr	r3, [pc, #44]	@ (800d54c <HAL_PCD_MspInit+0xa0>)
 800d51e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d520:	4a0a      	ldr	r2, [pc, #40]	@ (800d54c <HAL_PCD_MspInit+0xa0>)
 800d522:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d526:	6453      	str	r3, [r2, #68]	@ 0x44
 800d528:	4b08      	ldr	r3, [pc, #32]	@ (800d54c <HAL_PCD_MspInit+0xa0>)
 800d52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d52c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d530:	60fb      	str	r3, [r7, #12]
 800d532:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d534:	2200      	movs	r2, #0
 800d536:	2100      	movs	r1, #0
 800d538:	2043      	movs	r0, #67	@ 0x43
 800d53a:	f7f6 fa36 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d53e:	2043      	movs	r0, #67	@ 0x43
 800d540:	f7f6 fa4f 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d544:	bf00      	nop
 800d546:	3728      	adds	r7, #40	@ 0x28
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	40023800 	.word	0x40023800
 800d550:	40020000 	.word	0x40020000

0800d554 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d568:	4619      	mov	r1, r3
 800d56a:	4610      	mov	r0, r2
 800d56c:	f7fe fabf 	bl	800baee <USBD_LL_SetupStage>
}
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d58a:	78fa      	ldrb	r2, [r7, #3]
 800d58c:	6879      	ldr	r1, [r7, #4]
 800d58e:	4613      	mov	r3, r2
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	4413      	add	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	440b      	add	r3, r1
 800d598:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	78fb      	ldrb	r3, [r7, #3]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f7fe faf9 	bl	800bb98 <USBD_LL_DataOutStage>
}
 800d5a6:	bf00      	nop
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b082      	sub	sp, #8
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5c0:	78fa      	ldrb	r2, [r7, #3]
 800d5c2:	6879      	ldr	r1, [r7, #4]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	00db      	lsls	r3, r3, #3
 800d5c8:	4413      	add	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	440b      	add	r3, r1
 800d5ce:	3320      	adds	r3, #32
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	78fb      	ldrb	r3, [r7, #3]
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	f7fe fb9b 	bl	800bd10 <USBD_LL_DataInStage>
}
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b082      	sub	sp, #8
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fe fcdf 	bl	800bfb4 <USBD_LL_SOF>
}
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b084      	sub	sp, #16
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d606:	2301      	movs	r3, #1
 800d608:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	79db      	ldrb	r3, [r3, #7]
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d001      	beq.n	800d616 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d612:	f7f4 fa6d 	bl	8001af0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d61c:	7bfa      	ldrb	r2, [r7, #15]
 800d61e:	4611      	mov	r1, r2
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe fc83 	bl	800bf2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fc2a 	bl	800be86 <USBD_LL_Reset>
}
 800d632:	bf00      	nop
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fe fc7e 	bl	800bf4c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	6812      	ldr	r2, [r2, #0]
 800d65e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d662:	f043 0301 	orr.w	r3, r3, #1
 800d666:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7adb      	ldrb	r3, [r3, #11]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d005      	beq.n	800d67c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d670:	4b04      	ldr	r3, [pc, #16]	@ (800d684 <HAL_PCD_SuspendCallback+0x48>)
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	4a03      	ldr	r2, [pc, #12]	@ (800d684 <HAL_PCD_SuspendCallback+0x48>)
 800d676:	f043 0306 	orr.w	r3, r3, #6
 800d67a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d67c:	bf00      	nop
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	e000ed00 	.word	0xe000ed00

0800d688 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d696:	4618      	mov	r0, r3
 800d698:	f7fe fc74 	bl	800bf84 <USBD_LL_Resume>
}
 800d69c:	bf00      	nop
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6b6:	78fa      	ldrb	r2, [r7, #3]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fccc 	bl	800c058 <USBD_LL_IsoOUTIncomplete>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6da:	78fa      	ldrb	r2, [r7, #3]
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fe fc88 	bl	800bff4 <USBD_LL_IsoINIncomplete>
}
 800d6e4:	bf00      	nop
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fe fcde 	bl	800c0bc <USBD_LL_DevConnected>
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe fcdb 	bl	800c0d2 <USBD_LL_DevDisconnected>
}
 800d71c:	bf00      	nop
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d13c      	bne.n	800d7ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d734:	4a20      	ldr	r2, [pc, #128]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a1e      	ldr	r2, [pc, #120]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d740:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d744:	4b1c      	ldr	r3, [pc, #112]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d746:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d74a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d74c:	4b1a      	ldr	r3, [pc, #104]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d74e:	2204      	movs	r2, #4
 800d750:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d752:	4b19      	ldr	r3, [pc, #100]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d754:	2202      	movs	r2, #2
 800d756:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d758:	4b17      	ldr	r3, [pc, #92]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d75e:	4b16      	ldr	r3, [pc, #88]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d760:	2202      	movs	r2, #2
 800d762:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d764:	4b14      	ldr	r3, [pc, #80]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d766:	2200      	movs	r2, #0
 800d768:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d76a:	4b13      	ldr	r3, [pc, #76]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d770:	4b11      	ldr	r3, [pc, #68]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d772:	2200      	movs	r2, #0
 800d774:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d776:	4b10      	ldr	r3, [pc, #64]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d778:	2200      	movs	r2, #0
 800d77a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d77c:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d77e:	2200      	movs	r2, #0
 800d780:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d782:	480d      	ldr	r0, [pc, #52]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d784:	f7f9 fd44 	bl	8007210 <HAL_PCD_Init>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d78e:	f7f4 f9af 	bl	8001af0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d792:	2180      	movs	r1, #128	@ 0x80
 800d794:	4808      	ldr	r0, [pc, #32]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d796:	f7fa ff70 	bl	800867a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d79a:	2240      	movs	r2, #64	@ 0x40
 800d79c:	2100      	movs	r1, #0
 800d79e:	4806      	ldr	r0, [pc, #24]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d7a0:	f7fa ff24 	bl	80085ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7a4:	2280      	movs	r2, #128	@ 0x80
 800d7a6:	2101      	movs	r1, #1
 800d7a8:	4803      	ldr	r0, [pc, #12]	@ (800d7b8 <USBD_LL_Init+0x94>)
 800d7aa:	f7fa ff1f 	bl	80085ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	20001370 	.word	0x20001370

0800d7bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7f9 fe2b 	bl	800742e <HAL_PCD_Start>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f942 	bl	800da68 <USBD_Get_USB_Status>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	4608      	mov	r0, r1
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	461a      	mov	r2, r3
 800d800:	4603      	mov	r3, r0
 800d802:	70fb      	strb	r3, [r7, #3]
 800d804:	460b      	mov	r3, r1
 800d806:	70bb      	strb	r3, [r7, #2]
 800d808:	4613      	mov	r3, r2
 800d80a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d81a:	78bb      	ldrb	r3, [r7, #2]
 800d81c:	883a      	ldrh	r2, [r7, #0]
 800d81e:	78f9      	ldrb	r1, [r7, #3]
 800d820:	f7fa faff 	bl	8007e22 <HAL_PCD_EP_Open>
 800d824:	4603      	mov	r3, r0
 800d826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f000 f91c 	bl	800da68 <USBD_Get_USB_Status>
 800d830:	4603      	mov	r3, r0
 800d832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d834:	7bbb      	ldrb	r3, [r7, #14]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	460b      	mov	r3, r1
 800d848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d858:	78fa      	ldrb	r2, [r7, #3]
 800d85a:	4611      	mov	r1, r2
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fa fb4a 	bl	8007ef6 <HAL_PCD_EP_Close>
 800d862:	4603      	mov	r3, r0
 800d864:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d866:	7bfb      	ldrb	r3, [r7, #15]
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 f8fd 	bl	800da68 <USBD_Get_USB_Status>
 800d86e:	4603      	mov	r3, r0
 800d870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d872:	7bbb      	ldrb	r3, [r7, #14]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d896:	78fa      	ldrb	r2, [r7, #3]
 800d898:	4611      	mov	r1, r2
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fa fc02 	bl	80080a4 <HAL_PCD_EP_SetStall>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 f8de 	bl	800da68 <USBD_Get_USB_Status>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8d4:	78fa      	ldrb	r2, [r7, #3]
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fa fc46 	bl	800816a <HAL_PCD_EP_ClrStall>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 f8bf 	bl	800da68 <USBD_Get_USB_Status>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d90a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d90c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d910:	2b00      	cmp	r3, #0
 800d912:	da0b      	bge.n	800d92c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d914:	78fb      	ldrb	r3, [r7, #3]
 800d916:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d91a:	68f9      	ldr	r1, [r7, #12]
 800d91c:	4613      	mov	r3, r2
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	4413      	add	r3, r2
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	440b      	add	r3, r1
 800d926:	3316      	adds	r3, #22
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	e00b      	b.n	800d944 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d92c:	78fb      	ldrb	r3, [r7, #3]
 800d92e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d932:	68f9      	ldr	r1, [r7, #12]
 800d934:	4613      	mov	r3, r2
 800d936:	00db      	lsls	r3, r3, #3
 800d938:	4413      	add	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	440b      	add	r3, r1
 800d93e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d942:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d944:	4618      	mov	r0, r3
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d95c:	2300      	movs	r3, #0
 800d95e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d960:	2300      	movs	r3, #0
 800d962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d96a:	78fa      	ldrb	r2, [r7, #3]
 800d96c:	4611      	mov	r1, r2
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fa fa33 	bl	8007dda <HAL_PCD_SetAddress>
 800d974:	4603      	mov	r3, r0
 800d976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d978:	7bfb      	ldrb	r3, [r7, #15]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 f874 	bl	800da68 <USBD_Get_USB_Status>
 800d980:	4603      	mov	r3, r0
 800d982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d984:	7bbb      	ldrb	r3, [r7, #14]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b086      	sub	sp, #24
 800d992:	af00      	add	r7, sp, #0
 800d994:	60f8      	str	r0, [r7, #12]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
 800d99a:	460b      	mov	r3, r1
 800d99c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9ac:	7af9      	ldrb	r1, [r7, #11]
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	f7fa fb3d 	bl	8008030 <HAL_PCD_EP_Transmit>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f000 f853 	bl	800da68 <USBD_Get_USB_Status>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	607a      	str	r2, [r7, #4]
 800d9da:	603b      	str	r3, [r7, #0]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9ee:	7af9      	ldrb	r1, [r7, #11]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	f7fa fac9 	bl	8007f8a <HAL_PCD_EP_Receive>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 f832 	bl	800da68 <USBD_Get_USB_Status>
 800da04:	4603      	mov	r3, r0
 800da06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da08:	7dbb      	ldrb	r3, [r7, #22]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3718      	adds	r7, #24
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b082      	sub	sp, #8
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	460b      	mov	r3, r1
 800da1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da24:	78fa      	ldrb	r2, [r7, #3]
 800da26:	4611      	mov	r1, r2
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fa fae9 	bl	8008000 <HAL_PCD_EP_GetRxCount>
 800da2e:	4603      	mov	r3, r0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da40:	4b03      	ldr	r3, [pc, #12]	@ (800da50 <USBD_static_malloc+0x18>)
}
 800da42:	4618      	mov	r0, r3
 800da44:	370c      	adds	r7, #12
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	20001854 	.word	0x20001854

0800da54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]

}
 800da5c:	bf00      	nop
 800da5e:	370c      	adds	r7, #12
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4603      	mov	r3, r0
 800da70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	2b03      	cmp	r3, #3
 800da7a:	d817      	bhi.n	800daac <USBD_Get_USB_Status+0x44>
 800da7c:	a201      	add	r2, pc, #4	@ (adr r2, 800da84 <USBD_Get_USB_Status+0x1c>)
 800da7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da82:	bf00      	nop
 800da84:	0800da95 	.word	0x0800da95
 800da88:	0800da9b 	.word	0x0800da9b
 800da8c:	0800daa1 	.word	0x0800daa1
 800da90:	0800daa7 	.word	0x0800daa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800da94:	2300      	movs	r3, #0
 800da96:	73fb      	strb	r3, [r7, #15]
    break;
 800da98:	e00b      	b.n	800dab2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da9a:	2303      	movs	r3, #3
 800da9c:	73fb      	strb	r3, [r7, #15]
    break;
 800da9e:	e008      	b.n	800dab2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800daa0:	2301      	movs	r3, #1
 800daa2:	73fb      	strb	r3, [r7, #15]
    break;
 800daa4:	e005      	b.n	800dab2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800daa6:	2303      	movs	r3, #3
 800daa8:	73fb      	strb	r3, [r7, #15]
    break;
 800daaa:	e002      	b.n	800dab2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800daac:	2303      	movs	r3, #3
 800daae:	73fb      	strb	r3, [r7, #15]
    break;
 800dab0:	bf00      	nop
  }
  return usb_status;
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3714      	adds	r7, #20
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <memset>:
 800dac0:	4402      	add	r2, r0
 800dac2:	4603      	mov	r3, r0
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d100      	bne.n	800daca <memset+0xa>
 800dac8:	4770      	bx	lr
 800daca:	f803 1b01 	strb.w	r1, [r3], #1
 800dace:	e7f9      	b.n	800dac4 <memset+0x4>

0800dad0 <__libc_init_array>:
 800dad0:	b570      	push	{r4, r5, r6, lr}
 800dad2:	4d0d      	ldr	r5, [pc, #52]	@ (800db08 <__libc_init_array+0x38>)
 800dad4:	4c0d      	ldr	r4, [pc, #52]	@ (800db0c <__libc_init_array+0x3c>)
 800dad6:	1b64      	subs	r4, r4, r5
 800dad8:	10a4      	asrs	r4, r4, #2
 800dada:	2600      	movs	r6, #0
 800dadc:	42a6      	cmp	r6, r4
 800dade:	d109      	bne.n	800daf4 <__libc_init_array+0x24>
 800dae0:	4d0b      	ldr	r5, [pc, #44]	@ (800db10 <__libc_init_array+0x40>)
 800dae2:	4c0c      	ldr	r4, [pc, #48]	@ (800db14 <__libc_init_array+0x44>)
 800dae4:	f000 f818 	bl	800db18 <_init>
 800dae8:	1b64      	subs	r4, r4, r5
 800daea:	10a4      	asrs	r4, r4, #2
 800daec:	2600      	movs	r6, #0
 800daee:	42a6      	cmp	r6, r4
 800daf0:	d105      	bne.n	800dafe <__libc_init_array+0x2e>
 800daf2:	bd70      	pop	{r4, r5, r6, pc}
 800daf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800daf8:	4798      	blx	r3
 800dafa:	3601      	adds	r6, #1
 800dafc:	e7ee      	b.n	800dadc <__libc_init_array+0xc>
 800dafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800db02:	4798      	blx	r3
 800db04:	3601      	adds	r6, #1
 800db06:	e7f2      	b.n	800daee <__libc_init_array+0x1e>
 800db08:	0800dbb0 	.word	0x0800dbb0
 800db0c:	0800dbb0 	.word	0x0800dbb0
 800db10:	0800dbb0 	.word	0x0800dbb0
 800db14:	0800dbb4 	.word	0x0800dbb4

0800db18 <_init>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	bf00      	nop
 800db1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1e:	bc08      	pop	{r3}
 800db20:	469e      	mov	lr, r3
 800db22:	4770      	bx	lr

0800db24 <_fini>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	bf00      	nop
 800db28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2a:	bc08      	pop	{r3}
 800db2c:	469e      	mov	lr, r3
 800db2e:	4770      	bx	lr
