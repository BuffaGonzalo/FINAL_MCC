
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f224  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  0800f3c4  0800f3c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101e0  080101e0  00012184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080101e0  080101e0  000111e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101e8  080101e8  00012184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101e8  080101e8  000111e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080101ec  080101ec  000111ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  080101f0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000184  08010374  00012184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08010374  00012c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac55  00000000  00000000  000121b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434b  00000000  00000000  0002ce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00031158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001be0f  00000000  00000000  000329d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020053  00000000  00000000  0004e7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a007d  00000000  00000000  0006e83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010e8b7  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000012d4  00000000  00000000  0010e8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d38  00000000  00000000  0010fbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00116908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3ac 	.word	0x0800f3ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800f3ac 	.word	0x0800f3ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e00a      	b.n	8000dbc <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	ddf1      	ble.n	8000da6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	20000480 	.word	0x20000480
 8000dd4:	20000490 	.word	0x20000490

08000dd8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200006bd 	.word	0x200006bd

08000df8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200006be 	.word	0x200006be

08000e18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d116      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e34:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b28      	cmp	r3, #40	@ 0x28
 8000e3c:	d107      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000e44:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e46:	7813      	ldrb	r3, [r2, #0]
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4906      	ldr	r1, [pc, #24]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e54:	f002 fe1c 	bl	8003a90 <HAL_ADC_Start_DMA>
	}

	if(htim->Instance ==TIM4){ //100ms
		//ONDISPLAY=TRUE;
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40010000 	.word	0x40010000
 8000e64:	2000047c 	.word	0x2000047c
 8000e68:	200006bc 	.word	0x200006bc
 8000e6c:	20000480 	.word	0x20000480
 8000e70:	200001a0 	.word	0x200001a0

08000e74 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e018      	b.n	8000eb6 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	441a      	add	r2, r3
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <USBRxData+0x58>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <USBRxData+0x58>)
 8000e90:	795b      	ldrb	r3, [r3, #5]
 8000e92:	1c58      	adds	r0, r3, #1
 8000e94:	b2c4      	uxtb	r4, r0
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <USBRxData+0x58>)
 8000e98:	7144      	strb	r4, [r0, #5]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <USBRxData+0x58>)
 8000ea2:	795a      	ldrb	r2, [r3, #5]
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <USBRxData+0x58>)
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <USBRxData+0x58>)
 8000eae:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8e2      	bhi.n	8000e84 <USBRxData+0x10>
	}

}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc90      	pop	{r4, r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200004ac 	.word	0x200004ac

08000ed0 <USBTask>:

void USBTask() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0c2      	sub	sp, #264	@ 0x108
 8000ed4:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000ed6:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <USBTask+0x90>)
 8000ed8:	791a      	ldrb	r2, [r3, #4]
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <USBTask+0x90>)
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d039      	beq.n	8000f56 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000ee2:	481f      	ldr	r0, [pc, #124]	@ (8000f60 <USBTask+0x90>)
 8000ee4:	f002 fa8a 	bl	80033fc <unerPrtcl_DecodeHeader>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000eee:	491d      	ldr	r1, [pc, #116]	@ (8000f64 <USBTask+0x94>)
 8000ef0:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <USBTask+0x90>)
 8000ef2:	f000 f839 	bl	8000f68 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000efc:	e01d      	b.n	8000f3a <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <USBTask+0x94>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <USBTask+0x94>)
 8000f04:	7a1b      	ldrb	r3, [r3, #8]
 8000f06:	1c59      	adds	r1, r3, #1
 8000f08:	b2c8      	uxtb	r0, r1
 8000f0a:	4916      	ldr	r1, [pc, #88]	@ (8000f64 <USBTask+0x94>)
 8000f0c:	7208      	strb	r0, [r1, #8]
 8000f0e:	441a      	add	r2, r3
 8000f10:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f14:	7811      	ldrb	r1, [r2, #0]
 8000f16:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000f1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000f1e:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <USBTask+0x94>)
 8000f22:	7a1a      	ldrb	r2, [r3, #8]
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <USBTask+0x94>)
 8000f26:	799b      	ldrb	r3, [r3, #6]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <USBTask+0x94>)
 8000f2e:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000f30:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <USBTask+0x94>)
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3db      	bcc.n	8000efe <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <USBTask+0x94>)
 8000f48:	79db      	ldrb	r3, [r3, #7]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00d f915 	bl	800e180 <CDC_Transmit_FS>
	}

}
 8000f56:	bf00      	nop
 8000f58:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200004ac 	.word	0x200004ac
 8000f64:	200004a0 	.word	0x200004a0

08000f68 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	7a12      	ldrb	r2, [r2, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	3bf0      	subs	r3, #240	@ 0xf0
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	f200 8129 	bhi.w	80011d8 <decodeCommand+0x270>
 8000f86:	a201      	add	r2, pc, #4	@ (adr r2, 8000f8c <decodeCommand+0x24>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	08000f9d 	.word	0x08000f9d
 8000f90:	08000fbd 	.word	0x08000fbd
 8000f94:	08000fdd 	.word	0x08000fdd
 8000f98:	080010c1 	.word	0x080010c1
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	21f0      	movs	r1, #240	@ 0xf0
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f002 f909 	bl	80031b8 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000fa6:	210d      	movs	r1, #13
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f002 f9b4 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	7a5b      	ldrb	r3, [r3, #9]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f002 f9ae 	bl	8003316 <unerPrtcl_PutByteOnTx>
		break;
 8000fba:	e123      	b.n	8001204 <decodeCommand+0x29c>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000fbc:	220d      	movs	r2, #13
 8000fbe:	21f1      	movs	r1, #241	@ 0xf1
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f002 f8f9 	bl	80031b8 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000fc6:	4991      	ldr	r1, [pc, #580]	@ (800120c <decodeCommand+0x2a4>)
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f002 f9d2 	bl	8003372 <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	7a5b      	ldrb	r3, [r3, #9]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f002 f99e 	bl	8003316 <unerPrtcl_PutByteOnTx>
		break;
 8000fda:	e113      	b.n	8001204 <decodeCommand+0x29c>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000fdc:	220d      	movs	r2, #13
 8000fde:	21f2      	movs	r1, #242	@ 0xf2
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f002 f8e9 	bl	80031b8 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 8000fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8001210 <decodeCommand+0x2a8>)
 8000fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fec:	4b89      	ldr	r3, [pc, #548]	@ (8001214 <decodeCommand+0x2ac>)
 8000fee:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000ff0:	4b88      	ldr	r3, [pc, #544]	@ (8001214 <decodeCommand+0x2ac>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	f002 f98d 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000ffc:	4b85      	ldr	r3, [pc, #532]	@ (8001214 <decodeCommand+0x2ac>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	4619      	mov	r1, r3
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f002 f987 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 8001008:	4b83      	ldr	r3, [pc, #524]	@ (8001218 <decodeCommand+0x2b0>)
 800100a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800100e:	4b81      	ldr	r3, [pc, #516]	@ (8001214 <decodeCommand+0x2ac>)
 8001010:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001012:	4b80      	ldr	r3, [pc, #512]	@ (8001214 <decodeCommand+0x2ac>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	6838      	ldr	r0, [r7, #0]
 800101a:	f002 f97c 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800101e:	4b7d      	ldr	r3, [pc, #500]	@ (8001214 <decodeCommand+0x2ac>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	4619      	mov	r1, r3
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f002 f976 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 800102a:	4b7c      	ldr	r3, [pc, #496]	@ (800121c <decodeCommand+0x2b4>)
 800102c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001030:	4b78      	ldr	r3, [pc, #480]	@ (8001214 <decodeCommand+0x2ac>)
 8001032:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001034:	4b77      	ldr	r3, [pc, #476]	@ (8001214 <decodeCommand+0x2ac>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f002 f96b 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001040:	4b74      	ldr	r3, [pc, #464]	@ (8001214 <decodeCommand+0x2ac>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	4619      	mov	r1, r3
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f002 f965 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 800104c:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <decodeCommand+0x2b8>)
 800104e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001052:	4b70      	ldr	r3, [pc, #448]	@ (8001214 <decodeCommand+0x2ac>)
 8001054:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001056:	4b6f      	ldr	r3, [pc, #444]	@ (8001214 <decodeCommand+0x2ac>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f002 f95a 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001062:	4b6c      	ldr	r3, [pc, #432]	@ (8001214 <decodeCommand+0x2ac>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	4619      	mov	r1, r3
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f002 f954 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 800106e:	4b6d      	ldr	r3, [pc, #436]	@ (8001224 <decodeCommand+0x2bc>)
 8001070:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001074:	4b67      	ldr	r3, [pc, #412]	@ (8001214 <decodeCommand+0x2ac>)
 8001076:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001078:	4b66      	ldr	r3, [pc, #408]	@ (8001214 <decodeCommand+0x2ac>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f002 f949 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001084:	4b63      	ldr	r3, [pc, #396]	@ (8001214 <decodeCommand+0x2ac>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	4619      	mov	r1, r3
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f002 f943 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 8001090:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <decodeCommand+0x2c0>)
 8001092:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <decodeCommand+0x2ac>)
 8001098:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800109a:	4b5e      	ldr	r3, [pc, #376]	@ (8001214 <decodeCommand+0x2ac>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f002 f938 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001214 <decodeCommand+0x2ac>)
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	4619      	mov	r1, r3
 80010ac:	6838      	ldr	r0, [r7, #0]
 80010ae:	f002 f932 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	7a5b      	ldrb	r3, [r3, #9]
 80010b6:	4619      	mov	r1, r3
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f002 f92c 	bl	8003316 <unerPrtcl_PutByteOnTx>
		break;
 80010be:	e0a1      	b.n	8001204 <decodeCommand+0x29c>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 80010c0:	2211      	movs	r2, #17
 80010c2:	21f3      	movs	r1, #243	@ 0xf3
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f002 f877 	bl	80031b8 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <decodeCommand+0x2c4>)
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	4b51      	ldr	r3, [pc, #324]	@ (8001214 <decodeCommand+0x2ac>)
 80010d0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010d2:	4b50      	ldr	r3, [pc, #320]	@ (8001214 <decodeCommand+0x2ac>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f002 f91c 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010de:	4b4d      	ldr	r3, [pc, #308]	@ (8001214 <decodeCommand+0x2ac>)
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	4619      	mov	r1, r3
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f002 f916 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <decodeCommand+0x2c4>)
 80010ec:	885a      	ldrh	r2, [r3, #2]
 80010ee:	4b49      	ldr	r3, [pc, #292]	@ (8001214 <decodeCommand+0x2ac>)
 80010f0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010f2:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <decodeCommand+0x2ac>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f002 f90c 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010fe:	4b45      	ldr	r3, [pc, #276]	@ (8001214 <decodeCommand+0x2ac>)
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	4619      	mov	r1, r3
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f002 f906 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 800110a:	4b48      	ldr	r3, [pc, #288]	@ (800122c <decodeCommand+0x2c4>)
 800110c:	889a      	ldrh	r2, [r3, #4]
 800110e:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <decodeCommand+0x2ac>)
 8001110:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001112:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <decodeCommand+0x2ac>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f002 f8fc 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800111e:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <decodeCommand+0x2ac>)
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	4619      	mov	r1, r3
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f002 f8f6 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 800112a:	4b40      	ldr	r3, [pc, #256]	@ (800122c <decodeCommand+0x2c4>)
 800112c:	88da      	ldrh	r2, [r3, #6]
 800112e:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <decodeCommand+0x2ac>)
 8001130:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001132:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <decodeCommand+0x2ac>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f002 f8ec 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800113e:	4b35      	ldr	r3, [pc, #212]	@ (8001214 <decodeCommand+0x2ac>)
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	4619      	mov	r1, r3
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f002 f8e6 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 800114a:	4b38      	ldr	r3, [pc, #224]	@ (800122c <decodeCommand+0x2c4>)
 800114c:	891a      	ldrh	r2, [r3, #8]
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <decodeCommand+0x2ac>)
 8001150:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001152:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <decodeCommand+0x2ac>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f002 f8dc 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800115e:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <decodeCommand+0x2ac>)
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	4619      	mov	r1, r3
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f002 f8d6 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 800116a:	4b30      	ldr	r3, [pc, #192]	@ (800122c <decodeCommand+0x2c4>)
 800116c:	895a      	ldrh	r2, [r3, #10]
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <decodeCommand+0x2ac>)
 8001170:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001172:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <decodeCommand+0x2ac>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f002 f8cc 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <decodeCommand+0x2ac>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	4619      	mov	r1, r3
 8001184:	6838      	ldr	r0, [r7, #0]
 8001186:	f002 f8c6 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 800118a:	4b28      	ldr	r3, [pc, #160]	@ (800122c <decodeCommand+0x2c4>)
 800118c:	899a      	ldrh	r2, [r3, #12]
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <decodeCommand+0x2ac>)
 8001190:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <decodeCommand+0x2ac>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f002 f8bc 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <decodeCommand+0x2ac>)
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	4619      	mov	r1, r3
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f002 f8b6 	bl	8003316 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <decodeCommand+0x2c4>)
 80011ac:	89da      	ldrh	r2, [r3, #14]
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <decodeCommand+0x2ac>)
 80011b0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <decodeCommand+0x2ac>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f002 f8ac 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <decodeCommand+0x2ac>)
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	4619      	mov	r1, r3
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f002 f8a6 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	7a5b      	ldrb	r3, [r3, #9]
 80011ce:	4619      	mov	r1, r3
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f002 f8a0 	bl	8003316 <unerPrtcl_PutByteOnTx>
		break;
 80011d6:	e015      	b.n	8001204 <decodeCommand+0x29c>
		break;
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	7a12      	ldrb	r2, [r2, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2202      	movs	r2, #2
 80011e6:	4619      	mov	r1, r3
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f001 ffe5 	bl	80031b8 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 80011ee:	21ff      	movs	r1, #255	@ 0xff
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f002 f890 	bl	8003316 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	7a5b      	ldrb	r3, [r3, #9]
 80011fa:	4619      	mov	r1, r3
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f002 f88a 	bl	8003316 <unerPrtcl_PutByteOnTx>
		break;
 8001202:	bf00      	nop
	}
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0801017c 	.word	0x0801017c
 8001210:	200006c0 	.word	0x200006c0
 8001214:	200006b8 	.word	0x200006b8
 8001218:	200006c2 	.word	0x200006c2
 800121c:	200006c4 	.word	0x200006c4
 8001220:	200006c6 	.word	0x200006c6
 8001224:	200006c8 	.word	0x200006c8
 8001228:	200006ca 	.word	0x200006ca
 800122c:	20000490 	.word	0x20000490

08001230 <do10ms>:

void do10ms() {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	if (IS10MS) {
 8001234:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <do10ms+0x80>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d034      	beq.n	80012ac <do10ms+0x7c>
		IS10MS = FALSE;
 8001242:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <do10ms+0x80>)
 8001244:	7813      	ldrb	r3, [r2, #0]
 8001246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800124a:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <do10ms+0x84>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3b01      	subs	r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <do10ms+0x84>)
 8001256:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <do10ms+0x88>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <do10ms+0x88>)
 8001262:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 8001264:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <do10ms+0x88>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10c      	bne.n	8001286 <do10ms+0x56>
			tmo20ms = 2;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <do10ms+0x88>)
 800126e:	2202      	movs	r2, #2
 8001270:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 8001272:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <do10ms+0x80>)
 8001274:	7813      	ldrb	r3, [r2, #0]
 8001276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127a:	7013      	strb	r3, [r2, #0]
			ONMPU = TRUE;
 800127c:	4a0c      	ldr	r2, [pc, #48]	@ (80012b0 <do10ms+0x80>)
 800127e:	7813      	ldrb	r3, [r2, #0]
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <do10ms+0x84>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10e      	bne.n	80012ac <do10ms+0x7c>
			tmo100ms = 10;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <do10ms+0x84>)
 8001290:	220a      	movs	r2, #10
 8001292:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 8001294:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <do10ms+0x80>)
 8001296:	7813      	ldrb	r3, [r2, #0]
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	7013      	strb	r3, [r2, #0]
			ONDISPLAY = TRUE;
 800129e:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <do10ms+0x80>)
 80012a0:	7813      	ldrb	r3, [r2, #0]
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 80012a8:	f000 f808 	bl	80012bc <heartBeatTask>
		}
	}
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200006bc 	.word	0x200006bc
 80012b4:	20000028 	.word	0x20000028
 80012b8:	20000029 	.word	0x20000029

080012bc <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <heartBeatTask+0x44>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001304 <heartBeatTask+0x48>)
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	4611      	mov	r1, r2
 80012cc:	2201      	movs	r2, #1
 80012ce:	408a      	lsls	r2, r1
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80012d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012da:	480b      	ldr	r0, [pc, #44]	@ (8001308 <heartBeatTask+0x4c>)
 80012dc:	f003 fdff 	bl	8004ede <HAL_GPIO_TogglePin>

	times++;
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <heartBeatTask+0x48>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <heartBeatTask+0x48>)
 80012ea:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <heartBeatTask+0x48>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <heartBeatTask+0x48>)
 80012f8:	701a      	strb	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000
 8001304:	200006cc 	.word	0x200006cc
 8001308:	40020800 	.word	0x40020800

0800130c <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af04      	add	r7, sp, #16
 8001312:	6039      	str	r1, [r7, #0]
 8001314:	4611      	mov	r1, r2
 8001316:	461a      	mov	r2, r3
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	460b      	mov	r3, r1
 800131e:	71bb      	strb	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	b299      	uxth	r1, r3
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	b29a      	uxth	r2, r3
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	b29b      	uxth	r3, r3
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	9002      	str	r0, [sp, #8]
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	4803      	ldr	r0, [pc, #12]	@ (800134c <displayMemWrite+0x40>)
 8001340:	f003 ff42 	bl	80051c8 <HAL_I2C_Mem_Write>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000248 	.word	0x20000248

08001350 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af02      	add	r7, sp, #8
 8001356:	6039      	str	r1, [r7, #0]
 8001358:	4611      	mov	r1, r2
 800135a:	461a      	mov	r2, r3
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	460b      	mov	r3, r1
 8001362:	71bb      	strb	r3, [r7, #6]
 8001364:	4613      	mov	r3, r2
 8001366:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	b299      	uxth	r1, r3
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	b29a      	uxth	r2, r3
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	b29b      	uxth	r3, r3
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <displayMemWriteDMA+0x3c>)
 800137e:	f004 f81d 	bl	80053bc <HAL_I2C_Mem_Write_DMA>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000248 	.word	0x20000248

08001390 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af04      	add	r7, sp, #16
 8001396:	6039      	str	r1, [r7, #0]
 8001398:	4611      	mov	r1, r2
 800139a:	461a      	mov	r2, r3
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	460b      	mov	r3, r1
 80013a2:	71bb      	strb	r3, [r7, #6]
 80013a4:	4613      	mov	r3, r2
 80013a6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	b299      	uxth	r1, r3
 80013ac:	797b      	ldrb	r3, [r7, #5]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	9002      	str	r0, [sp, #8]
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <mpuMemWrite+0x40>)
 80013c4:	f003 ff00 	bl	80051c8 <HAL_I2C_Mem_Write>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000248 	.word	0x20000248

080013d4 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6039      	str	r1, [r7, #0]
 80013dc:	4611      	mov	r1, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	460b      	mov	r3, r1
 80013e6:	71bb      	strb	r3, [r7, #6]
 80013e8:	4613      	mov	r3, r2
 80013ea:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	b299      	uxth	r1, r3
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	4803      	ldr	r0, [pc, #12]	@ (8001410 <mpuMemReadDMA+0x3c>)
 8001402:	f004 f939 	bl	8005678 <HAL_I2C_Mem_Read_DMA>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000248 	.word	0x20000248

08001414 <displayTask>:

void displayTask() {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af02      	add	r7, sp, #8
	char data[8];
	uint8_t y = 0, x = 2;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	2302      	movs	r3, #2
 8001420:	73bb      	strb	r3, [r7, #14]
	static uint8_t init = FALSE;
	static uint8_t wait = FALSE;
	static uint8_t over = TRUE;

	if(!over){
 8001422:	4bab      	ldr	r3, [pc, #684]	@ (80016d0 <displayTask+0x2bc>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d104      	bne.n	8001434 <displayTask+0x20>
		ONMPU=FALSE;
 800142a:	4aaa      	ldr	r2, [pc, #680]	@ (80016d4 <displayTask+0x2c0>)
 800142c:	7813      	ldrb	r3, [r2, #0]
 800142e:	f023 0302 	bic.w	r3, r3, #2
 8001432:	7013      	strb	r3, [r2, #0]
	}

	if (ONMPU) { //Espera de la pantalla
 8001434:	4ba7      	ldr	r3, [pc, #668]	@ (80016d4 <displayTask+0x2c0>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d008      	beq.n	8001454 <displayTask+0x40>
		wait = TRUE;
 8001442:	4ba5      	ldr	r3, [pc, #660]	@ (80016d8 <displayTask+0x2c4>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
		ONDISPLAY = FALSE;
 8001448:	4aa2      	ldr	r2, [pc, #648]	@ (80016d4 <displayTask+0x2c0>)
 800144a:	7813      	ldrb	r3, [r2, #0]
 800144c:	f023 0308 	bic.w	r3, r3, #8
 8001450:	7013      	strb	r3, [r2, #0]
 8001452:	e139      	b.n	80016c8 <displayTask+0x2b4>
		return;
	}

	if (wait && !ONMPU) { //MPU terminó, entra pantalla
 8001454:	4ba0      	ldr	r3, [pc, #640]	@ (80016d8 <displayTask+0x2c4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d011      	beq.n	8001480 <displayTask+0x6c>
 800145c:	4b9d      	ldr	r3, [pc, #628]	@ (80016d4 <displayTask+0x2c0>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10a      	bne.n	8001480 <displayTask+0x6c>
		wait = FALSE;
 800146a:	4b9b      	ldr	r3, [pc, #620]	@ (80016d8 <displayTask+0x2c4>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
		init = TRUE;
 8001470:	4b9a      	ldr	r3, [pc, #616]	@ (80016dc <displayTask+0x2c8>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
		ONDISPLAY = TRUE;
 8001476:	4a97      	ldr	r2, [pc, #604]	@ (80016d4 <displayTask+0x2c0>)
 8001478:	7813      	ldrb	r3, [r2, #0]
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	7013      	strb	r3, [r2, #0]
	}

	//OVERDISPLAY = FALSE;
	if(ONDISPLAY){
 8001480:	4b94      	ldr	r3, [pc, #592]	@ (80016d4 <displayTask+0x2c0>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 811c 	beq.w	80016c8 <displayTask+0x2b4>
	if (init) {
 8001490:	4b92      	ldr	r3, [pc, #584]	@ (80016dc <displayTask+0x2c8>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8107 	beq.w	80016a8 <displayTask+0x294>
		init = FALSE;
 800149a:	4b90      	ldr	r3, [pc, #576]	@ (80016dc <displayTask+0x2c8>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
		over = FALSE;
 80014a0:	4b8b      	ldr	r3, [pc, #556]	@ (80016d0 <displayTask+0x2bc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
		ssd1306_Fill(White);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f001 f8fe 	bl	80026a8 <ssd1306_Fill>
		//ssd1306_DrawBitmap(0, 0, chat_gpt_128x64, 128, 64, White);
		//ssd1306_FillRectangle(55, 30, 80, 55, Black);

		x += 48;
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	3330      	adds	r3, #48	@ 0x30
 80014b0:	73bb      	strb	r3, [r7, #14]
		y = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fa9f 	bl	8002a00 <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "ACC");
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4a86      	ldr	r2, [pc, #536]	@ (80016e0 <displayTask+0x2cc>)
 80014c6:	2108      	movs	r1, #8
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00d fabb 	bl	800ea44 <sniprintf>
		ssd1306_WriteString(data, Font_11x18, Black);
 80014ce:	4b85      	ldr	r3, [pc, #532]	@ (80016e4 <displayTask+0x2d0>)
 80014d0:	1d38      	adds	r0, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d8:	f001 fa6c 	bl	80029b4 <ssd1306_WriteString>
		x += 33;
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	3321      	adds	r3, #33	@ 0x21
 80014e0:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fa89 	bl	8002a00 <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "GYR");
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4a7d      	ldr	r2, [pc, #500]	@ (80016e8 <displayTask+0x2d4>)
 80014f2:	2108      	movs	r1, #8
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00d faa5 	bl	800ea44 <sniprintf>
		ssd1306_WriteString(data, Font_11x18, Black);
 80014fa:	4b7a      	ldr	r3, [pc, #488]	@ (80016e4 <displayTask+0x2d0>)
 80014fc:	1d38      	adds	r0, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	f001 fa56 	bl	80029b4 <ssd1306_WriteString>
//			x += 48;
//			ssd1306_SetCursor(x, y);
//			snprintf(data, sizeof(data), "gz:%u", gz);
//			ssd1306_WriteString(data, Font_6x8, Black);

		ssd1306_Line(5, 60, 5, (60 - (adcDataTx[0] / 4090) * 25), Black);
 8001508:	4b78      	ldr	r3, [pc, #480]	@ (80016ec <displayTask+0x2d8>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	4a78      	ldr	r2, [pc, #480]	@ (80016f0 <displayTask+0x2dc>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0adb      	lsrs	r3, r3, #11
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	00d2      	lsls	r2, r2, #3
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	461a      	mov	r2, r3
 8001520:	0151      	lsls	r1, r2, #5
 8001522:	461a      	mov	r2, r3
 8001524:	460b      	mov	r3, r1
 8001526:	4413      	add	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	333c      	adds	r3, #60	@ 0x3c
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2200      	movs	r2, #0
 8001530:	9200      	str	r2, [sp, #0]
 8001532:	2205      	movs	r2, #5
 8001534:	213c      	movs	r1, #60	@ 0x3c
 8001536:	2005      	movs	r0, #5
 8001538:	f001 fa7a 	bl	8002a30 <ssd1306_Line>
		ssd1306_Line(7, 60, 7, (60 - (adcDataTx[1] / 4090) * 25), Black);
 800153c:	4b6b      	ldr	r3, [pc, #428]	@ (80016ec <displayTask+0x2d8>)
 800153e:	885b      	ldrh	r3, [r3, #2]
 8001540:	4a6b      	ldr	r2, [pc, #428]	@ (80016f0 <displayTask+0x2dc>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0adb      	lsrs	r3, r3, #11
 8001548:	b29b      	uxth	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	00d2      	lsls	r2, r2, #3
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	461a      	mov	r2, r3
 8001554:	0151      	lsls	r1, r2, #5
 8001556:	461a      	mov	r2, r3
 8001558:	460b      	mov	r3, r1
 800155a:	4413      	add	r3, r2
 800155c:	b2db      	uxtb	r3, r3
 800155e:	333c      	adds	r3, #60	@ 0x3c
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2200      	movs	r2, #0
 8001564:	9200      	str	r2, [sp, #0]
 8001566:	2207      	movs	r2, #7
 8001568:	213c      	movs	r1, #60	@ 0x3c
 800156a:	2007      	movs	r0, #7
 800156c:	f001 fa60 	bl	8002a30 <ssd1306_Line>
		ssd1306_Line(9, 60, 9, (60 - (adcDataTx[2] / 4090) * 25), Black);
 8001570:	4b5e      	ldr	r3, [pc, #376]	@ (80016ec <displayTask+0x2d8>)
 8001572:	889b      	ldrh	r3, [r3, #4]
 8001574:	4a5e      	ldr	r2, [pc, #376]	@ (80016f0 <displayTask+0x2dc>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0adb      	lsrs	r3, r3, #11
 800157c:	b29b      	uxth	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	00d2      	lsls	r2, r2, #3
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	461a      	mov	r2, r3
 8001588:	0151      	lsls	r1, r2, #5
 800158a:	461a      	mov	r2, r3
 800158c:	460b      	mov	r3, r1
 800158e:	4413      	add	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	333c      	adds	r3, #60	@ 0x3c
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2200      	movs	r2, #0
 8001598:	9200      	str	r2, [sp, #0]
 800159a:	2209      	movs	r2, #9
 800159c:	213c      	movs	r1, #60	@ 0x3c
 800159e:	2009      	movs	r0, #9
 80015a0:	f001 fa46 	bl	8002a30 <ssd1306_Line>
		ssd1306_Line(11, 60, 11, (60 - (adcDataTx[3] / 4090) * 25), Black);
 80015a4:	4b51      	ldr	r3, [pc, #324]	@ (80016ec <displayTask+0x2d8>)
 80015a6:	88db      	ldrh	r3, [r3, #6]
 80015a8:	4a51      	ldr	r2, [pc, #324]	@ (80016f0 <displayTask+0x2dc>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0adb      	lsrs	r3, r3, #11
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	00d2      	lsls	r2, r2, #3
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	0151      	lsls	r1, r2, #5
 80015be:	461a      	mov	r2, r3
 80015c0:	460b      	mov	r3, r1
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	333c      	adds	r3, #60	@ 0x3c
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2200      	movs	r2, #0
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	220b      	movs	r2, #11
 80015d0:	213c      	movs	r1, #60	@ 0x3c
 80015d2:	200b      	movs	r0, #11
 80015d4:	f001 fa2c 	bl	8002a30 <ssd1306_Line>
		ssd1306_Line(13, 60, 13, (60 - (adcDataTx[4] / 4090) * 25), Black);
 80015d8:	4b44      	ldr	r3, [pc, #272]	@ (80016ec <displayTask+0x2d8>)
 80015da:	891b      	ldrh	r3, [r3, #8]
 80015dc:	4a44      	ldr	r2, [pc, #272]	@ (80016f0 <displayTask+0x2dc>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0adb      	lsrs	r3, r3, #11
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	00d2      	lsls	r2, r2, #3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	0151      	lsls	r1, r2, #5
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	4413      	add	r3, r2
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	333c      	adds	r3, #60	@ 0x3c
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2200      	movs	r2, #0
 8001600:	9200      	str	r2, [sp, #0]
 8001602:	220d      	movs	r2, #13
 8001604:	213c      	movs	r1, #60	@ 0x3c
 8001606:	200d      	movs	r0, #13
 8001608:	f001 fa12 	bl	8002a30 <ssd1306_Line>
		ssd1306_Line(15, 60, 15, (60 - (adcDataTx[5] / 4090) * 25), Black);
 800160c:	4b37      	ldr	r3, [pc, #220]	@ (80016ec <displayTask+0x2d8>)
 800160e:	895b      	ldrh	r3, [r3, #10]
 8001610:	4a37      	ldr	r2, [pc, #220]	@ (80016f0 <displayTask+0x2dc>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0adb      	lsrs	r3, r3, #11
 8001618:	b29b      	uxth	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	00d2      	lsls	r2, r2, #3
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	0151      	lsls	r1, r2, #5
 8001626:	461a      	mov	r2, r3
 8001628:	460b      	mov	r3, r1
 800162a:	4413      	add	r3, r2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	333c      	adds	r3, #60	@ 0x3c
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2200      	movs	r2, #0
 8001634:	9200      	str	r2, [sp, #0]
 8001636:	220f      	movs	r2, #15
 8001638:	213c      	movs	r1, #60	@ 0x3c
 800163a:	200f      	movs	r0, #15
 800163c:	f001 f9f8 	bl	8002a30 <ssd1306_Line>
		ssd1306_Line(17, 60, 17, (60 - (adcDataTx[6] / 4090) * 25), Black);
 8001640:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <displayTask+0x2d8>)
 8001642:	899b      	ldrh	r3, [r3, #12]
 8001644:	4a2a      	ldr	r2, [pc, #168]	@ (80016f0 <displayTask+0x2dc>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0adb      	lsrs	r3, r3, #11
 800164c:	b29b      	uxth	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	00d2      	lsls	r2, r2, #3
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	461a      	mov	r2, r3
 8001658:	0151      	lsls	r1, r2, #5
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	4413      	add	r3, r2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	333c      	adds	r3, #60	@ 0x3c
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2200      	movs	r2, #0
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	2211      	movs	r2, #17
 800166c:	213c      	movs	r1, #60	@ 0x3c
 800166e:	2011      	movs	r0, #17
 8001670:	f001 f9de 	bl	8002a30 <ssd1306_Line>
		ssd1306_Line(19, 60, 19, (60 - (adcDataTx[7] / 4090) * 25), Black);
 8001674:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <displayTask+0x2d8>)
 8001676:	89db      	ldrh	r3, [r3, #14]
 8001678:	4a1d      	ldr	r2, [pc, #116]	@ (80016f0 <displayTask+0x2dc>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0adb      	lsrs	r3, r3, #11
 8001680:	b29b      	uxth	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	00d2      	lsls	r2, r2, #3
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	461a      	mov	r2, r3
 800168c:	0151      	lsls	r1, r2, #5
 800168e:	461a      	mov	r2, r3
 8001690:	460b      	mov	r3, r1
 8001692:	4413      	add	r3, r2
 8001694:	b2db      	uxtb	r3, r3
 8001696:	333c      	adds	r3, #60	@ 0x3c
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2200      	movs	r2, #0
 800169c:	9200      	str	r2, [sp, #0]
 800169e:	2213      	movs	r2, #19
 80016a0:	213c      	movs	r1, #60	@ 0x3c
 80016a2:	2013      	movs	r0, #19
 80016a4:	f001 f9c4 	bl	8002a30 <ssd1306_Line>
	}

	if (ssd1306_UpdateScreenDMA()) {
 80016a8:	f001 f83e 	bl	8002728 <ssd1306_UpdateScreenDMA>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00a      	beq.n	80016c8 <displayTask+0x2b4>
		ONDISPLAY = FALSE;
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <displayTask+0x2c0>)
 80016b4:	7813      	ldrb	r3, [r2, #0]
 80016b6:	f023 0308 	bic.w	r3, r3, #8
 80016ba:	7013      	strb	r3, [r2, #0]
		over = TRUE;
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <displayTask+0x2bc>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
		init = TRUE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <displayTask+0x2c8>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
	}
	}
}
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000002a 	.word	0x2000002a
 80016d4:	200006bc 	.word	0x200006bc
 80016d8:	200006cd 	.word	0x200006cd
 80016dc:	200006ce 	.word	0x200006ce
 80016e0:	0800f3c4 	.word	0x0800f3c4
 80016e4:	08010170 	.word	0x08010170
 80016e8:	0800f3c8 	.word	0x0800f3c8
 80016ec:	20000490 	.word	0x20000490
 80016f0:	80301207 	.word	0x80301207

080016f4 <mpuTask>:


void mpuTask() {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af02      	add	r7, sp, #8

	if (ONMPU) {
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <mpuTask+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <mpuTask+0x3c>
		if (mpu6050_Read()) {
 8001708:	f000 fce2 	bl	80020d0 <mpu6050_Read>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00e      	beq.n	8001730 <mpuTask+0x3c>
			ONMPU = FALSE;
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <mpuTask+0x44>)
 8001714:	7813      	ldrb	r3, [r2, #0]
 8001716:	f023 0302 	bic.w	r3, r3, #2
 800171a:	7013      	strb	r3, [r2, #0]
			mpu6050_GetData(&ax, &ay, &az, &gx, &gy, &gz);
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <mpuTask+0x48>)
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <mpuTask+0x4c>)
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <mpuTask+0x50>)
 8001726:	4a08      	ldr	r2, [pc, #32]	@ (8001748 <mpuTask+0x54>)
 8001728:	4908      	ldr	r1, [pc, #32]	@ (800174c <mpuTask+0x58>)
 800172a:	4809      	ldr	r0, [pc, #36]	@ (8001750 <mpuTask+0x5c>)
 800172c:	f000 fe84 	bl	8002438 <mpu6050_GetData>
		}
	}

}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200006bc 	.word	0x200006bc
 800173c:	200006ca 	.word	0x200006ca
 8001740:	200006c8 	.word	0x200006c8
 8001744:	200006c6 	.word	0x200006c6
 8001748:	200006c4 	.word	0x200006c4
 800174c:	200006c2 	.word	0x200006c2
 8001750:	200006c0 	.word	0x200006c0

08001754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001758:	f001 ffb0 	bl	80036bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175c:	f000 f878 	bl	8001850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001760:	f000 fbda 	bl	8001f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8001764:	f000 fb9a 	bl	8001e9c <MX_DMA_Init>
  MX_ADC1_Init();
 8001768:	f000 f8da 	bl	8001920 <MX_ADC1_Init>
  MX_I2C1_Init();
 800176c:	f000 f98c 	bl	8001a88 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001770:	f000 f9b8 	bl	8001ae4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001774:	f00c fbea 	bl	800df4c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001778:	f000 fa1a 	bl	8001bb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800177c:	f000 fa7c 	bl	8001c78 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001780:	f000 fb28 	bl	8001dd4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8001784:	4821      	ldr	r0, [pc, #132]	@ (800180c <main+0xb8>)
 8001786:	f00c fd33 	bl	800e1f0 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1);
 800178a:	4821      	ldr	r0, [pc, #132]	@ (8001810 <main+0xbc>)
 800178c:	f008 f940 	bl	8009a10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001790:	4820      	ldr	r0, [pc, #128]	@ (8001814 <main+0xc0>)
 8001792:	f008 f93d 	bl	8009a10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001796:	4820      	ldr	r0, [pc, #128]	@ (8001818 <main+0xc4>)
 8001798:	f008 f93a 	bl	8009a10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 800179c:	481f      	ldr	r0, [pc, #124]	@ (800181c <main+0xc8>)
 800179e:	f008 f937 	bl	8009a10 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017a8:	481d      	ldr	r0, [pc, #116]	@ (8001820 <main+0xcc>)
 80017aa:	f003 fb7f 	bl	8004eac <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 80017ae:	481d      	ldr	r0, [pc, #116]	@ (8001824 <main+0xd0>)
 80017b0:	f000 ff00 	bl	80025b4 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 80017b4:	481c      	ldr	r0, [pc, #112]	@ (8001828 <main+0xd4>)
 80017b6:	f000 feed 	bl	8002594 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 80017ba:	481c      	ldr	r0, [pc, #112]	@ (800182c <main+0xd8>)
 80017bc:	f000 feda 	bl	8002574 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 80017c0:	f000 ff08 	bl	80025d4 <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 80017c4:	481a      	ldr	r0, [pc, #104]	@ (8001830 <main+0xdc>)
 80017c6:	f000 fc0d 	bl	8001fe4 <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <main+0xe0>)
 80017cc:	f000 fc1a 	bl	8002004 <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 80017d0:	4819      	ldr	r0, [pc, #100]	@ (8001838 <main+0xe4>)
 80017d2:	f000 fc27 	bl	8002024 <mpu6050_Attach_MemReadDMA>
	MPU6050_Init();
 80017d6:	f000 fc5f 	bl	8002098 <MPU6050_Init>

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <main+0xe8>)
 80017dc:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <main+0xec>)
 80017de:	4919      	ldr	r1, [pc, #100]	@ (8001844 <main+0xf0>)
 80017e0:	4819      	ldr	r0, [pc, #100]	@ (8001848 <main+0xf4>)
 80017e2:	f001 ff09 	bl	80035f8 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <main+0xf8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	OVERDISPLAY = TRUE;
 80017ec:	4a17      	ldr	r2, [pc, #92]	@ (800184c <main+0xf8>)
 80017ee:	7813      	ldrb	r3, [r2, #0]
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 80017f6:	f7ff fd1b 	bl	8001230 <do10ms>
		USBTask();
 80017fa:	f7ff fb69 	bl	8000ed0 <USBTask>
		displayTask();
 80017fe:	f7ff fe09 	bl	8001414 <displayTask>
		mpuTask();
 8001802:	f7ff ff77 	bl	80016f4 <mpuTask>
		do10ms();
 8001806:	bf00      	nop
 8001808:	e7f5      	b.n	80017f6 <main+0xa2>
 800180a:	bf00      	nop
 800180c:	08000e75 	.word	0x08000e75
 8001810:	2000035c 	.word	0x2000035c
 8001814:	200003a4 	.word	0x200003a4
 8001818:	200003ec 	.word	0x200003ec
 800181c:	20000434 	.word	0x20000434
 8001820:	40020800 	.word	0x40020800
 8001824:	200006bd 	.word	0x200006bd
 8001828:	0800130d 	.word	0x0800130d
 800182c:	08001351 	.word	0x08001351
 8001830:	200006be 	.word	0x200006be
 8001834:	08001391 	.word	0x08001391
 8001838:	080013d5 	.word	0x080013d5
 800183c:	200004b8 	.word	0x200004b8
 8001840:	200005b8 	.word	0x200005b8
 8001844:	200004a0 	.word	0x200004a0
 8001848:	200004ac 	.word	0x200004ac
 800184c:	200006bc 	.word	0x200006bc

08001850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b094      	sub	sp, #80	@ 0x50
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	2230      	movs	r2, #48	@ 0x30
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f00d f940 	bl	800eae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <SystemClock_Config+0xc8>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	4a26      	ldr	r2, [pc, #152]	@ (8001918 <SystemClock_Config+0xc8>)
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001882:	6413      	str	r3, [r2, #64]	@ 0x40
 8001884:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <SystemClock_Config+0xc8>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	4b21      	ldr	r3, [pc, #132]	@ (800191c <SystemClock_Config+0xcc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a20      	ldr	r2, [pc, #128]	@ (800191c <SystemClock_Config+0xcc>)
 800189a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <SystemClock_Config+0xcc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b6:	2302      	movs	r3, #2
 80018b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018c0:	2319      	movs	r3, #25
 80018c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018c4:	23c0      	movs	r3, #192	@ 0xc0
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018cc:	2304      	movs	r3, #4
 80018ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	4618      	mov	r0, r3
 80018d6:	f007 fc07 	bl	80090e8 <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018e0:	f000 fb7a 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e4:	230f      	movs	r3, #15
 80018e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e8:	2302      	movs	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2103      	movs	r1, #3
 8001900:	4618      	mov	r0, r3
 8001902:	f007 fe69 	bl	80095d8 <HAL_RCC_ClockConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800190c:	f000 fb64 	bl	8001fd8 <Error_Handler>
  }
}
 8001910:	bf00      	nop
 8001912:	3750      	adds	r7, #80	@ 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000

08001920 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001926:	463b      	mov	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001932:	4b52      	ldr	r3, [pc, #328]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001934:	4a52      	ldr	r2, [pc, #328]	@ (8001a80 <MX_ADC1_Init+0x160>)
 8001936:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001938:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 800193a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800193e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001940:	4b4e      	ldr	r3, [pc, #312]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001946:	4b4d      	ldr	r3, [pc, #308]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001948:	2201      	movs	r2, #1
 800194a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800194c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 800194e:	2200      	movs	r2, #0
 8001950:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001952:	4b4a      	ldr	r3, [pc, #296]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800195a:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 800195c:	2200      	movs	r2, #0
 800195e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001960:	4b46      	ldr	r3, [pc, #280]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001962:	4a48      	ldr	r2, [pc, #288]	@ (8001a84 <MX_ADC1_Init+0x164>)
 8001964:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001966:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800196c:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 800196e:	2208      	movs	r2, #8
 8001970:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001972:	4b42      	ldr	r3, [pc, #264]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800197a:	4b40      	ldr	r3, [pc, #256]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 800197c:	2201      	movs	r2, #1
 800197e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001980:	483e      	ldr	r0, [pc, #248]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001982:	f001 ff31 	bl	80037e8 <HAL_ADC_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800198c:	f000 fb24 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001994:	2301      	movs	r3, #1
 8001996:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	4619      	mov	r1, r3
 80019a0:	4836      	ldr	r0, [pc, #216]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 80019a2:	f002 f987 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019ac:	f000 fb14 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b8:	463b      	mov	r3, r7
 80019ba:	4619      	mov	r1, r3
 80019bc:	482f      	ldr	r0, [pc, #188]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 80019be:	f002 f979 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019c8:	f000 fb06 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80019d0:	2303      	movs	r3, #3
 80019d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	4828      	ldr	r0, [pc, #160]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 80019da:	f002 f96b 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80019e4:	f000 faf8 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019e8:	2303      	movs	r3, #3
 80019ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80019ec:	2304      	movs	r3, #4
 80019ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	4619      	mov	r1, r3
 80019f4:	4821      	ldr	r0, [pc, #132]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 80019f6:	f002 f95d 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001a00:	f000 faea 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a04:	2304      	movs	r3, #4
 8001a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001a08:	2305      	movs	r3, #5
 8001a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481a      	ldr	r0, [pc, #104]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001a12:	f002 f94f 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001a1c:	f000 fadc 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a20:	2305      	movs	r3, #5
 8001a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001a24:	2306      	movs	r3, #6
 8001a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4813      	ldr	r0, [pc, #76]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001a2e:	f002 f941 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001a38:	f000 face 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a3c:	2306      	movs	r3, #6
 8001a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001a40:	2307      	movs	r3, #7
 8001a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001a4a:	f002 f933 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001a54:	f000 fac0 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <MX_ADC1_Init+0x15c>)
 8001a66:	f002 f925 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001a70:	f000 fab2 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200001a0 	.word	0x200001a0
 8001a80:	40012000 	.word	0x40012000
 8001a84:	0f000001 	.word	0x0f000001

08001a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001a8e:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <MX_I2C1_Init+0x54>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001a94:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <MX_I2C1_Init+0x58>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001aa6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	@ (8001ad8 <MX_I2C1_Init+0x50>)
 8001ac6:	f003 fa25 	bl	8004f14 <HAL_I2C_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad0:	f000 fa82 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000248 	.word	0x20000248
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	00061a80 	.word	0x00061a80

08001ae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	@ 0x30
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b12:	4a26      	ldr	r2, [pc, #152]	@ (8001bac <MX_TIM1_Init+0xc8>)
 8001b14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8001b16:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b18:	225f      	movs	r2, #95	@ 0x5f
 8001b1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001b22:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b24:	22f9      	movs	r2, #249	@ 0xf9
 8001b26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b3a:	481b      	ldr	r0, [pc, #108]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b3c:	f007 ff18 	bl	8009970 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001b46:	f000 fa47 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b50:	f107 0320 	add.w	r3, r7, #32
 8001b54:	4619      	mov	r1, r3
 8001b56:	4814      	ldr	r0, [pc, #80]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b58:	f008 f9c8 	bl	8009eec <HAL_TIM_ConfigClockSource>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b62:	f000 fa39 	bl	8001fd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4619      	mov	r1, r3
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b76:	f008 fa80 	bl	800a07a <HAL_TIM_SlaveConfigSynchro>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001b80:	f000 fa2a 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <MX_TIM1_Init+0xc4>)
 8001b92:	f008 fe1b 	bl	800a7cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001b9c:	f000 fa1c 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	3730      	adds	r7, #48	@ 0x30
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000035c 	.word	0x2000035c
 8001bac:	40010000 	.word	0x40010000

08001bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	@ 0x30
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001bde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001be4:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001be6:	225f      	movs	r2, #95	@ 0x5f
 8001be8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001bf0:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001bf2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001bf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c04:	481b      	ldr	r0, [pc, #108]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001c06:	f007 feb3 	bl	8009970 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001c10:	f000 f9e2 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c18:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4814      	ldr	r0, [pc, #80]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001c22:	f008 f963 	bl	8009eec <HAL_TIM_ConfigClockSource>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001c2c:	f000 f9d4 	bl	8001fd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001c40:	f008 fa1b 	bl	800a07a <HAL_TIM_SlaveConfigSynchro>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c4a:	f000 f9c5 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <MX_TIM2_Init+0xc4>)
 8001c5c:	f008 fdb6 	bl	800a7cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001c66:	f000 f9b7 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	@ 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200003a4 	.word	0x200003a4

08001c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b092      	sub	sp, #72	@ 0x48
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb8:	4b44      	ldr	r3, [pc, #272]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001cba:	4a45      	ldr	r2, [pc, #276]	@ (8001dd0 <MX_TIM3_Init+0x158>)
 8001cbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001cbe:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001cc0:	225f      	movs	r2, #95	@ 0x5f
 8001cc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc4:	4b41      	ldr	r3, [pc, #260]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001cca:	4b40      	ldr	r3, [pc, #256]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001ccc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cde:	483b      	ldr	r0, [pc, #236]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001ce0:	f007 fe46 	bl	8009970 <HAL_TIM_Base_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001cea:	f000 f975 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4834      	ldr	r0, [pc, #208]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001cfc:	f008 f8f6 	bl	8009eec <HAL_TIM_ConfigClockSource>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d06:	f000 f967 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d0a:	4830      	ldr	r0, [pc, #192]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001d0c:	f007 fee2 	bl	8009ad4 <HAL_TIM_PWM_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001d16:	f000 f95f 	bl	8001fd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	4828      	ldr	r0, [pc, #160]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001d2a:	f008 f9a6 	bl	800a07a <HAL_TIM_SlaveConfigSynchro>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001d34:	f000 f950 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4821      	ldr	r0, [pc, #132]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001d48:	f008 fd40 	bl	800a7cc <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001d52:	f000 f941 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d56:	2360      	movs	r3, #96	@ 0x60
 8001d58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d66:	463b      	mov	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4817      	ldr	r0, [pc, #92]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001d6e:	f007 fffb 	bl	8009d68 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001d78:	f000 f92e 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2204      	movs	r2, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4812      	ldr	r0, [pc, #72]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001d84:	f007 fff0 	bl	8009d68 <HAL_TIM_PWM_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001d8e:	f000 f923 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	2208      	movs	r2, #8
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001d9a:	f007 ffe5 	bl	8009d68 <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001da4:	f000 f918 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	220c      	movs	r2, #12
 8001dac:	4619      	mov	r1, r3
 8001dae:	4807      	ldr	r0, [pc, #28]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001db0:	f007 ffda 	bl	8009d68 <HAL_TIM_PWM_ConfigChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001dba:	f000 f90d 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dbe:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <MX_TIM3_Init+0x154>)
 8001dc0:	f001 f8c6 	bl	8002f50 <HAL_TIM_MspPostInit>

}
 8001dc4:	bf00      	nop
 8001dc6:	3748      	adds	r7, #72	@ 0x48
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200003ec 	.word	0x200003ec
 8001dd0:	40000400 	.word	0x40000400

08001dd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	@ 0x30
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0320 	add.w	r3, r7, #32
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e00:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e02:	4a25      	ldr	r2, [pc, #148]	@ (8001e98 <MX_TIM4_Init+0xc4>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 191;
 8001e06:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e08:	22bf      	movs	r2, #191	@ 0xbf
 8001e0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8001e12:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e14:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001e18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e26:	481b      	ldr	r0, [pc, #108]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e28:	f007 fda2 	bl	8009970 <HAL_TIM_Base_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001e32:	f000 f8d1 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4619      	mov	r1, r3
 8001e42:	4814      	ldr	r0, [pc, #80]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e44:	f008 f852 	bl	8009eec <HAL_TIM_ConfigClockSource>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e4e:	f000 f8c3 	bl	8001fd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e62:	f008 f90a 	bl	800a07a <HAL_TIM_SlaveConfigSynchro>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001e6c:	f000 f8b4 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <MX_TIM4_Init+0xc0>)
 8001e7e:	f008 fca5 	bl	800a7cc <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001e88:	f000 f8a6 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	3730      	adds	r7, #48	@ 0x30
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000434 	.word	0x20000434
 8001e98:	40000800 	.word	0x40000800

08001e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <MX_DMA_Init+0x78>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8001f14 <MX_DMA_Init+0x78>)
 8001eac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <MX_DMA_Init+0x78>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <MX_DMA_Init+0x78>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <MX_DMA_Init+0x78>)
 8001ec8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_DMA_Init+0x78>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	200b      	movs	r0, #11
 8001ee0:	f002 fa7d 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ee4:	200b      	movs	r0, #11
 8001ee6:	f002 fa96 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	200c      	movs	r0, #12
 8001ef0:	f002 fa75 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ef4:	200c      	movs	r0, #12
 8001ef6:	f002 fa8e 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	2038      	movs	r0, #56	@ 0x38
 8001f00:	f002 fa6d 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f04:	2038      	movs	r0, #56	@ 0x38
 8001f06:	f002 fa86 	bl	8004416 <HAL_NVIC_EnableIRQ>

}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a26      	ldr	r2, [pc, #152]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a18      	ldr	r2, [pc, #96]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a11      	ldr	r2, [pc, #68]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <MX_GPIO_Init+0xb8>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa4:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <MX_GPIO_Init+0xbc>)
 8001fa6:	f002 ff81 	bl	8004eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001faa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4804      	ldr	r0, [pc, #16]	@ (8001fd4 <MX_GPIO_Init+0xbc>)
 8001fc4:	f002 fdee 	bl	8004ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	@ 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020800 	.word	0x40020800

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <Error_Handler+0x8>

08001fe4 <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	200006d0 	.word	0x200006d0

08002004 <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 800200c:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <mpu6050_Attach_MemWrite+0x1c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200006d4 	.word	0x200006d4

08002024 <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 800202c:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <mpu6050_Attach_MemReadDMA+0x1c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	200006d8 	.word	0x200006d8

08002044 <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <mpu6050_WriteData+0x24>)
 8002052:	681c      	ldr	r4, [r3, #0]
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	2201      	movs	r2, #1
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	20d0      	movs	r0, #208	@ 0xd0
 800205c:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop
 8002068:	200006d4 	.word	0x200006d4

0800206c <mpu6050_ReadDataDMA>:

void mpu6050_ReadDataDMA(uint8_t* buffer, size_t size, uint8_t type) {
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	4613      	mov	r3, r2
 8002078:	71fb      	strb	r3, [r7, #7]
	memReadDMA(MPU6050_ADDR, buffer, size, type);
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <mpu6050_ReadDataDMA+0x28>)
 800207c:	681c      	ldr	r4, [r3, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	20d0      	movs	r0, #208	@ 0xd0
 8002088:	47a0      	blx	r4
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
 8002092:	bf00      	nop
 8002094:	200006d8 	.word	0x200006d8

08002098 <MPU6050_Init>:


void MPU6050_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 800209e:	2300      	movs	r3, #0
 80020a0:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	216b      	movs	r1, #107	@ 0x6b
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ffcc 	bl	8002044 <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 80020ac:	2300      	movs	r3, #0
 80020ae:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	211c      	movs	r1, #28
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ffc5 	bl	8002044 <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 80020ba:	2300      	movs	r3, #0
 80020bc:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	211b      	movs	r1, #27
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ffbe 	bl	8002044 <mpu6050_WriteData>

}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <mpu6050_Read>:

char mpu6050_Read(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
//		gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
//
//	return 1;


	if (*mpu6050_RxCplt || state == 1) {
 80020d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002358 <mpu6050_Read+0x288>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <mpu6050_Read+0x18>
 80020de:	4b9f      	ldr	r3, [pc, #636]	@ (800235c <mpu6050_Read+0x28c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	f040 8198 	bne.w	8002418 <mpu6050_Read+0x348>
		*mpu6050_RxCplt = 0;  // Reset completion flag
 80020e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002358 <mpu6050_Read+0x288>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
		switch (state) {
 80020f0:	4b9a      	ldr	r3, [pc, #616]	@ (800235c <mpu6050_Read+0x28c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d002      	beq.n	80020fe <mpu6050_Read+0x2e>
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d009      	beq.n	8002110 <mpu6050_Read+0x40>
 80020fc:	e18c      	b.n	8002418 <mpu6050_Read+0x348>
		case 1:
			state=2;
 80020fe:	4b97      	ldr	r3, [pc, #604]	@ (800235c <mpu6050_Read+0x28c>)
 8002100:	2202      	movs	r2, #2
 8002102:	701a      	strb	r2, [r3, #0]
			// Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
			mpu6050_ReadDataDMA(Rec_Data, 14, ACCEL_XOUT_H_REG);
 8002104:	223b      	movs	r2, #59	@ 0x3b
 8002106:	210e      	movs	r1, #14
 8002108:	4895      	ldr	r0, [pc, #596]	@ (8002360 <mpu6050_Read+0x290>)
 800210a:	f7ff ffaf 	bl	800206c <mpu6050_ReadDataDMA>
			break;
 800210e:	e183      	b.n	8002418 <mpu6050_Read+0x348>
		case 2:
			state=1;
 8002110:	4b92      	ldr	r3, [pc, #584]	@ (800235c <mpu6050_Read+0x28c>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
			// Combinar bytes altos y bajos en variables de 16 bits con signo
			//Valores accelerometro
			ax = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); //primer byte  es la parte alta, segundo parte baja
 8002116:	4b92      	ldr	r3, [pc, #584]	@ (8002360 <mpu6050_Read+0x290>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b21b      	sxth	r3, r3
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b21a      	sxth	r2, r3
 8002120:	4b8f      	ldr	r3, [pc, #572]	@ (8002360 <mpu6050_Read+0x290>)
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	b21b      	sxth	r3, r3
 8002126:	4313      	orrs	r3, r2
 8002128:	b21b      	sxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	4b8d      	ldr	r3, [pc, #564]	@ (8002364 <mpu6050_Read+0x294>)
 800212e:	601a      	str	r2, [r3, #0]
			ay = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002130:	4b8b      	ldr	r3, [pc, #556]	@ (8002360 <mpu6050_Read+0x290>)
 8002132:	789b      	ldrb	r3, [r3, #2]
 8002134:	b21b      	sxth	r3, r3
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21a      	sxth	r2, r3
 800213a:	4b89      	ldr	r3, [pc, #548]	@ (8002360 <mpu6050_Read+0x290>)
 800213c:	78db      	ldrb	r3, [r3, #3]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4b88      	ldr	r3, [pc, #544]	@ (8002368 <mpu6050_Read+0x298>)
 8002148:	601a      	str	r2, [r3, #0]
			az = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800214a:	4b85      	ldr	r3, [pc, #532]	@ (8002360 <mpu6050_Read+0x290>)
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	b21b      	sxth	r3, r3
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21a      	sxth	r2, r3
 8002154:	4b82      	ldr	r3, [pc, #520]	@ (8002360 <mpu6050_Read+0x290>)
 8002156:	795b      	ldrb	r3, [r3, #5]
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21b      	sxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	4b82      	ldr	r3, [pc, #520]	@ (800236c <mpu6050_Read+0x29c>)
 8002162:	601a      	str	r2, [r3, #0]
			//Medida temperatura
			//t = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
			//Valores del giroscopio
			gx = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002164:	4b7e      	ldr	r3, [pc, #504]	@ (8002360 <mpu6050_Read+0x290>)
 8002166:	7a1b      	ldrb	r3, [r3, #8]
 8002168:	b21b      	sxth	r3, r3
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	4b7c      	ldr	r3, [pc, #496]	@ (8002360 <mpu6050_Read+0x290>)
 8002170:	7a5b      	ldrb	r3, [r3, #9]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21b      	sxth	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4b7d      	ldr	r3, [pc, #500]	@ (8002370 <mpu6050_Read+0x2a0>)
 800217c:	601a      	str	r2, [r3, #0]
			gy = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800217e:	4b78      	ldr	r3, [pc, #480]	@ (8002360 <mpu6050_Read+0x290>)
 8002180:	7a9b      	ldrb	r3, [r3, #10]
 8002182:	b21b      	sxth	r3, r3
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	4b75      	ldr	r3, [pc, #468]	@ (8002360 <mpu6050_Read+0x290>)
 800218a:	7adb      	ldrb	r3, [r3, #11]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21b      	sxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	4b77      	ldr	r3, [pc, #476]	@ (8002374 <mpu6050_Read+0x2a4>)
 8002196:	601a      	str	r2, [r3, #0]
			gz = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002198:	4b71      	ldr	r3, [pc, #452]	@ (8002360 <mpu6050_Read+0x290>)
 800219a:	7b1b      	ldrb	r3, [r3, #12]
 800219c:	b21b      	sxth	r3, r3
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002360 <mpu6050_Read+0x290>)
 80021a4:	7b5b      	ldrb	r3, [r3, #13]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b72      	ldr	r3, [pc, #456]	@ (8002378 <mpu6050_Read+0x2a8>)
 80021b0:	601a      	str	r2, [r3, #0]


			if (abs(ax) <= OFFSET_AX)
 80021b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002364 <mpu6050_Read+0x294>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 80021ba:	db08      	blt.n	80021ce <mpu6050_Read+0xfe>
 80021bc:	4b69      	ldr	r3, [pc, #420]	@ (8002364 <mpu6050_Read+0x294>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80021c4:	dc03      	bgt.n	80021ce <mpu6050_Read+0xfe>
				ax_real = 0;
 80021c6:	4b6d      	ldr	r3, [pc, #436]	@ (800237c <mpu6050_Read+0x2ac>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	801a      	strh	r2, [r3, #0]
 80021cc:	e025      	b.n	800221a <mpu6050_Read+0x14a>
			else
				ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 80021ce:	4b65      	ldr	r3, [pc, #404]	@ (8002364 <mpu6050_Read+0x294>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021da:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002380 <mpu6050_Read+0x2b0>
 80021de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021e2:	ee16 0a90 	vmov	r0, s13
 80021e6:	f7fe f9af 	bl	8000548 <__aeabi_f2d>
 80021ea:	a359      	add	r3, pc, #356	@ (adr r3, 8002350 <mpu6050_Read+0x280>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe fa02 	bl	80005f8 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	4b60      	ldr	r3, [pc, #384]	@ (8002384 <mpu6050_Read+0x2b4>)
 8002202:	f7fe f9f9 	bl	80005f8 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fc05 	bl	8000a1c <__aeabi_d2iz>
 8002212:	4603      	mov	r3, r0
 8002214:	b21a      	sxth	r2, r3
 8002216:	4b59      	ldr	r3, [pc, #356]	@ (800237c <mpu6050_Read+0x2ac>)
 8002218:	801a      	strh	r2, [r3, #0]

			if (abs(ay) <= OFFSET_AY)
 800221a:	4b53      	ldr	r3, [pc, #332]	@ (8002368 <mpu6050_Read+0x298>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8002222:	db08      	blt.n	8002236 <mpu6050_Read+0x166>
 8002224:	4b50      	ldr	r3, [pc, #320]	@ (8002368 <mpu6050_Read+0x298>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800222c:	dc03      	bgt.n	8002236 <mpu6050_Read+0x166>
				ay_real = 0;
 800222e:	4b56      	ldr	r3, [pc, #344]	@ (8002388 <mpu6050_Read+0x2b8>)
 8002230:	2200      	movs	r2, #0
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	e025      	b.n	8002282 <mpu6050_Read+0x1b2>
			else
				ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8002236:	4b4c      	ldr	r3, [pc, #304]	@ (8002368 <mpu6050_Read+0x298>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002242:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002380 <mpu6050_Read+0x2b0>
 8002246:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800224a:	ee16 0a90 	vmov	r0, s13
 800224e:	f7fe f97b 	bl	8000548 <__aeabi_f2d>
 8002252:	a33f      	add	r3, pc, #252	@ (adr r3, 8002350 <mpu6050_Read+0x280>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	f7fe f9ce 	bl	80005f8 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	4b46      	ldr	r3, [pc, #280]	@ (8002384 <mpu6050_Read+0x2b4>)
 800226a:	f7fe f9c5 	bl	80005f8 <__aeabi_dmul>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe fbd1 	bl	8000a1c <__aeabi_d2iz>
 800227a:	4603      	mov	r3, r0
 800227c:	b21a      	sxth	r2, r3
 800227e:	4b42      	ldr	r3, [pc, #264]	@ (8002388 <mpu6050_Read+0x2b8>)
 8002280:	801a      	strh	r2, [r3, #0]

			if (abs(az) <= OFFSET_AZ)
 8002282:	4b3a      	ldr	r3, [pc, #232]	@ (800236c <mpu6050_Read+0x29c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a41      	ldr	r2, [pc, #260]	@ (800238c <mpu6050_Read+0x2bc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	db0a      	blt.n	80022a2 <mpu6050_Read+0x1d2>
 800228c:	4b37      	ldr	r3, [pc, #220]	@ (800236c <mpu6050_Read+0x29c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002294:	4293      	cmp	r3, r2
 8002296:	dc04      	bgt.n	80022a2 <mpu6050_Read+0x1d2>
				az_real = 9.81 * MULTIPLICADORFLOAT; // en reposo debería medir ~1g hacia Z
 8002298:	4b3d      	ldr	r3, [pc, #244]	@ (8002390 <mpu6050_Read+0x2c0>)
 800229a:	f240 32d5 	movw	r2, #981	@ 0x3d5
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	e025      	b.n	80022ee <mpu6050_Read+0x21e>
			else
				az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 80022a2:	4b32      	ldr	r3, [pc, #200]	@ (800236c <mpu6050_Read+0x29c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ae:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002380 <mpu6050_Read+0x2b0>
 80022b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022b6:	ee16 0a90 	vmov	r0, s13
 80022ba:	f7fe f945 	bl	8000548 <__aeabi_f2d>
 80022be:	a324      	add	r3, pc, #144	@ (adr r3, 8002350 <mpu6050_Read+0x280>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe f998 	bl	80005f8 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <mpu6050_Read+0x2b4>)
 80022d6:	f7fe f98f 	bl	80005f8 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fb9b 	bl	8000a1c <__aeabi_d2iz>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	4b29      	ldr	r3, [pc, #164]	@ (8002390 <mpu6050_Read+0x2c0>)
 80022ec:	801a      	strh	r2, [r3, #0]

			// Aplicar offset y escalar a grados/segundo (centésimas)
			if (abs(gx) <= OFFSET_GX)
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <mpu6050_Read+0x2a0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 80022f6:	db08      	blt.n	800230a <mpu6050_Read+0x23a>
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <mpu6050_Read+0x2a0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002300:	dc03      	bgt.n	800230a <mpu6050_Read+0x23a>
				gx_real = 0;
 8002302:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <mpu6050_Read+0x2c4>)
 8002304:	2200      	movs	r2, #0
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	e014      	b.n	8002334 <mpu6050_Read+0x264>
			else
				gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 800230a:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <mpu6050_Read+0x2a0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002316:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002398 <mpu6050_Read+0x2c8>
 800231a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800231e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800239c <mpu6050_Read+0x2cc>
 8002322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800232a:	ee17 3a90 	vmov	r3, s15
 800232e:	b21a      	sxth	r2, r3
 8002330:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <mpu6050_Read+0x2c4>)
 8002332:	801a      	strh	r2, [r3, #0]

			if (abs(gy) <= OFFSET_GY)
 8002334:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <mpu6050_Read+0x2a4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 800233c:	db32      	blt.n	80023a4 <mpu6050_Read+0x2d4>
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <mpu6050_Read+0x2a4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8002346:	dc2d      	bgt.n	80023a4 <mpu6050_Read+0x2d4>
				gy_real = 0;
 8002348:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <mpu6050_Read+0x2d0>)
 800234a:	2200      	movs	r2, #0
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	e03e      	b.n	80023ce <mpu6050_Read+0x2fe>
 8002350:	51eb851f 	.word	0x51eb851f
 8002354:	40239eb8 	.word	0x40239eb8
 8002358:	200006d0 	.word	0x200006d0
 800235c:	2000002b 	.word	0x2000002b
 8002360:	20000700 	.word	0x20000700
 8002364:	200006e8 	.word	0x200006e8
 8002368:	200006ec 	.word	0x200006ec
 800236c:	200006f0 	.word	0x200006f0
 8002370:	200006f4 	.word	0x200006f4
 8002374:	200006f8 	.word	0x200006f8
 8002378:	200006fc 	.word	0x200006fc
 800237c:	200006dc 	.word	0x200006dc
 8002380:	46800000 	.word	0x46800000
 8002384:	40590000 	.word	0x40590000
 8002388:	200006de 	.word	0x200006de
 800238c:	ffffb1e0 	.word	0xffffb1e0
 8002390:	200006e0 	.word	0x200006e0
 8002394:	200006e2 	.word	0x200006e2
 8002398:	43030000 	.word	0x43030000
 800239c:	42c80000 	.word	0x42c80000
 80023a0:	200006e4 	.word	0x200006e4
			else
				gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 80023a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <mpu6050_Read+0x350>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	ee07 3a90 	vmov	s15, r3
 80023ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b0:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002424 <mpu6050_Read+0x354>
 80023b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023b8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002428 <mpu6050_Read+0x358>
 80023bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c4:	ee17 3a90 	vmov	r3, s15
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	4b18      	ldr	r3, [pc, #96]	@ (800242c <mpu6050_Read+0x35c>)
 80023cc:	801a      	strh	r2, [r3, #0]

			if (abs(gz) <= OFFSET_GZ)
 80023ce:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <mpu6050_Read+0x360>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 80023d6:	db08      	blt.n	80023ea <mpu6050_Read+0x31a>
 80023d8:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <mpu6050_Read+0x360>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80023e0:	dc03      	bgt.n	80023ea <mpu6050_Read+0x31a>
				gz_real = 0;
 80023e2:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <mpu6050_Read+0x364>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e014      	b.n	8002414 <mpu6050_Read+0x344>
			else
				gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 80023ea:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <mpu6050_Read+0x360>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002424 <mpu6050_Read+0x354>
 80023fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023fe:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002428 <mpu6050_Read+0x358>
 8002402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240a:	ee17 3a90 	vmov	r3, s15
 800240e:	b21a      	sxth	r2, r3
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <mpu6050_Read+0x364>)
 8002412:	801a      	strh	r2, [r3, #0]

			return 1;
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <mpu6050_Read+0x34a>
			break;
		}
	}
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200006f8 	.word	0x200006f8
 8002424:	43030000 	.word	0x43030000
 8002428:	42c80000 	.word	0x42c80000
 800242c:	200006e4 	.word	0x200006e4
 8002430:	200006fc 	.word	0x200006fc
 8002434:	200006e6 	.word	0x200006e6

08002438 <mpu6050_GetData>:

void mpu6050_GetData(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
    if (ax) *ax = ax_real;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <mpu6050_GetData+0x1e>
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <mpu6050_GetData+0x7c>)
 800244e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	801a      	strh	r2, [r3, #0]
    if (ay) *ay = ay_real;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <mpu6050_GetData+0x2e>
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <mpu6050_GetData+0x80>)
 800245e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	801a      	strh	r2, [r3, #0]
    if (az) *az = az_real;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <mpu6050_GetData+0x3e>
 800246c:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <mpu6050_GetData+0x84>)
 800246e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	801a      	strh	r2, [r3, #0]

    if (gx) *gx = gx_real;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <mpu6050_GetData+0x4e>
 800247c:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <mpu6050_GetData+0x88>)
 800247e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	801a      	strh	r2, [r3, #0]
    if (gy) *gy = gy_real;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <mpu6050_GetData+0x5e>
 800248c:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <mpu6050_GetData+0x8c>)
 800248e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	801a      	strh	r2, [r3, #0]
    if (gz) *gz = gz_real;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <mpu6050_GetData+0x6e>
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <mpu6050_GetData+0x90>)
 800249e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	801a      	strh	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200006dc 	.word	0x200006dc
 80024b8:	200006de 	.word	0x200006de
 80024bc:	200006e0 	.word	0x200006e0
 80024c0:	200006e2 	.word	0x200006e2
 80024c4:	200006e4 	.word	0x200006e4
 80024c8:	200006e6 	.word	0x200006e6

080024cc <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <ssd1306_WriteCommand+0x20>)
 80024e8:	681c      	ldr	r4, [r3, #0]
 80024ea:	1df9      	adds	r1, r7, #7
 80024ec:	2300      	movs	r3, #0
 80024ee:	2201      	movs	r2, #1
 80024f0:	2078      	movs	r0, #120	@ 0x78
 80024f2:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd90      	pop	{r4, r7, pc}
 80024fc:	20000714 	.word	0x20000714

08002500 <ssd1306_WriteCommandDMA>:

void ssd1306_WriteCommandDMA(uint8_t byte) {
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 800250a:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <ssd1306_WriteCommandDMA+0x20>)
 800250c:	681c      	ldr	r4, [r3, #0]
 800250e:	1df9      	adds	r1, r7, #7
 8002510:	2300      	movs	r3, #0
 8002512:	2201      	movs	r2, #1
 8002514:	2078      	movs	r0, #120	@ 0x78
 8002516:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}
 8002520:	20000718 	.word	0x20000718

08002524 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <ssd1306_WriteData+0x24>)
 8002530:	681c      	ldr	r4, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	2340      	movs	r3, #64	@ 0x40
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	2078      	movs	r0, #120	@ 0x78
 800253c:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bd90      	pop	{r4, r7, pc}
 8002546:	bf00      	nop
 8002548:	20000714 	.word	0x20000714

0800254c <ssd1306_WriteDataDMA>:

void ssd1306_WriteDataDMA(uint8_t* buffer, size_t buff_size) {
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	memWriteDMA(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <ssd1306_WriteDataDMA+0x24>)
 8002558:	681c      	ldr	r4, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	2340      	movs	r3, #64	@ 0x40
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	2078      	movs	r0, #120	@ 0x78
 8002564:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	20000718 	.word	0x20000718

08002574 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 800257c:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <ssd1306_Attach_MemWriteDMA+0x1c>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000718 	.word	0x20000718

08002594 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 800259c:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <ssd1306_Attach_MemWrite+0x1c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000714 	.word	0x20000714

080025b4 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 80025bc:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000710 	.word	0x20000710

080025d4 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80025d8:	f7ff ff78 	bl	80024cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80025dc:	2064      	movs	r0, #100	@ 0x64
 80025de:	f001 f8df 	bl	80037a0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 faa4 	bl	8002b30 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80025e8:	2020      	movs	r0, #32
 80025ea:	f7ff ff77 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff ff74 	bl	80024dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80025f4:	20b0      	movs	r0, #176	@ 0xb0
 80025f6:	f7ff ff71 	bl	80024dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80025fa:	20c8      	movs	r0, #200	@ 0xc8
 80025fc:	f7ff ff6e 	bl	80024dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002600:	2000      	movs	r0, #0
 8002602:	f7ff ff6b 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002606:	2010      	movs	r0, #16
 8002608:	f7ff ff68 	bl	80024dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800260c:	2040      	movs	r0, #64	@ 0x40
 800260e:	f7ff ff65 	bl	80024dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002612:	20ff      	movs	r0, #255	@ 0xff
 8002614:	f000 fa78 	bl	8002b08 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002618:	20a1      	movs	r0, #161	@ 0xa1
 800261a:	f7ff ff5f 	bl	80024dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800261e:	20a6      	movs	r0, #166	@ 0xa6
 8002620:	f7ff ff5c 	bl	80024dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002624:	20a8      	movs	r0, #168	@ 0xa8
 8002626:	f7ff ff59 	bl	80024dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800262a:	203f      	movs	r0, #63	@ 0x3f
 800262c:	f7ff ff56 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002630:	20a4      	movs	r0, #164	@ 0xa4
 8002632:	f7ff ff53 	bl	80024dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002636:	20d3      	movs	r0, #211	@ 0xd3
 8002638:	f7ff ff50 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800263c:	2000      	movs	r0, #0
 800263e:	f7ff ff4d 	bl	80024dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002642:	20d5      	movs	r0, #213	@ 0xd5
 8002644:	f7ff ff4a 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002648:	20f0      	movs	r0, #240	@ 0xf0
 800264a:	f7ff ff47 	bl	80024dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800264e:	20d9      	movs	r0, #217	@ 0xd9
 8002650:	f7ff ff44 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002654:	2022      	movs	r0, #34	@ 0x22
 8002656:	f7ff ff41 	bl	80024dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800265a:	20da      	movs	r0, #218	@ 0xda
 800265c:	f7ff ff3e 	bl	80024dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002660:	2012      	movs	r0, #18
 8002662:	f7ff ff3b 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002666:	20db      	movs	r0, #219	@ 0xdb
 8002668:	f7ff ff38 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800266c:	2020      	movs	r0, #32
 800266e:	f7ff ff35 	bl	80024dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002672:	208d      	movs	r0, #141	@ 0x8d
 8002674:	f7ff ff32 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002678:	2014      	movs	r0, #20
 800267a:	f7ff ff2f 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800267e:	2001      	movs	r0, #1
 8002680:	f000 fa56 	bl	8002b30 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002684:	2000      	movs	r0, #0
 8002686:	f000 f80f 	bl	80026a8 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800268a:	f000 f825 	bl	80026d8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800268e:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <ssd1306_Init+0xd0>)
 8002690:	2200      	movs	r2, #0
 8002692:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <ssd1306_Init+0xd0>)
 8002696:	2200      	movs	r2, #0
 8002698:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800269a:	4b02      	ldr	r3, [pc, #8]	@ (80026a4 <ssd1306_Init+0xd0>)
 800269c:	2201      	movs	r2, #1
 800269e:	711a      	strb	r2, [r3, #4]
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000b1c 	.word	0x20000b1c

080026a8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <ssd1306_Fill+0x14>
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <ssd1306_Fill+0x16>
 80026bc:	23ff      	movs	r3, #255	@ 0xff
 80026be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026c2:	4619      	mov	r1, r3
 80026c4:	4803      	ldr	r0, [pc, #12]	@ (80026d4 <ssd1306_Fill+0x2c>)
 80026c6:	f00c fa0d 	bl	800eae4 <memset>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000071c 	.word	0x2000071c

080026d8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026de:	2300      	movs	r3, #0
 80026e0:	71fb      	strb	r3, [r7, #7]
 80026e2:	e016      	b.n	8002712 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	3b50      	subs	r3, #80	@ 0x50
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fef6 	bl	80024dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff fef3 	bl	80024dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80026f6:	2010      	movs	r0, #16
 80026f8:	f7ff fef0 	bl	80024dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	01db      	lsls	r3, r3, #7
 8002700:	4a08      	ldr	r2, [pc, #32]	@ (8002724 <ssd1306_UpdateScreen+0x4c>)
 8002702:	4413      	add	r3, r2
 8002704:	2180      	movs	r1, #128	@ 0x80
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff0c 	bl	8002524 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	3301      	adds	r3, #1
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	2b07      	cmp	r3, #7
 8002716:	d9e5      	bls.n	80026e4 <ssd1306_UpdateScreen+0xc>
    }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2000071c 	.word	0x2000071c

08002728 <ssd1306_UpdateScreenDMA>:


/* Write the screenbuffer with changed to the screen */
char ssd1306_UpdateScreenDMA(void) {
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction

	if (*SSD1306_TxCplt || state == 1) {
 800272c:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <ssd1306_UpdateScreenDMA+0xb0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <ssd1306_UpdateScreenDMA+0x16>
 8002736:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <ssd1306_UpdateScreenDMA+0xb4>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d149      	bne.n	80027d2 <ssd1306_UpdateScreenDMA+0xaa>
		*SSD1306_TxCplt = 0;  // Reset completion flag
 800273e:	4b26      	ldr	r3, [pc, #152]	@ (80027d8 <ssd1306_UpdateScreenDMA+0xb0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]

		switch (state) {
 8002746:	4b25      	ldr	r3, [pc, #148]	@ (80027dc <ssd1306_UpdateScreenDMA+0xb4>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	2b03      	cmp	r3, #3
 800274e:	d840      	bhi.n	80027d2 <ssd1306_UpdateScreenDMA+0xaa>
 8002750:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <ssd1306_UpdateScreenDMA+0x30>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002769 	.word	0x08002769
 800275c:	0800277f 	.word	0x0800277f
 8002760:	0800278d 	.word	0x0800278d
 8002764:	0800279b 	.word	0x0800279b
		case 1:  // Set page address
			ssd1306_WriteCommandDMA(0xB0 + current_page);
 8002768:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <ssd1306_UpdateScreenDMA+0xb8>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	3b50      	subs	r3, #80	@ 0x50
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fec5 	bl	8002500 <ssd1306_WriteCommandDMA>
			state = 2;
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <ssd1306_UpdateScreenDMA+0xb4>)
 8002778:	2202      	movs	r2, #2
 800277a:	701a      	strb	r2, [r3, #0]
			break;
 800277c:	e029      	b.n	80027d2 <ssd1306_UpdateScreenDMA+0xaa>
		case 2:  // Set column address low nibble
			ssd1306_WriteCommandDMA(0x00 + SSD1306_X_OFFSET_LOWER);
 800277e:	2000      	movs	r0, #0
 8002780:	f7ff febe 	bl	8002500 <ssd1306_WriteCommandDMA>
			state = 3;
 8002784:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <ssd1306_UpdateScreenDMA+0xb4>)
 8002786:	2203      	movs	r2, #3
 8002788:	701a      	strb	r2, [r3, #0]
			break;
 800278a:	e022      	b.n	80027d2 <ssd1306_UpdateScreenDMA+0xaa>
		case 3:  // Set column address high nibble
			ssd1306_WriteCommandDMA(0x10 + SSD1306_X_OFFSET_UPPER);
 800278c:	2010      	movs	r0, #16
 800278e:	f7ff feb7 	bl	8002500 <ssd1306_WriteCommandDMA>
			state = 4;
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <ssd1306_UpdateScreenDMA+0xb4>)
 8002794:	2204      	movs	r2, #4
 8002796:	701a      	strb	r2, [r3, #0]
			break;
 8002798:	e01b      	b.n	80027d2 <ssd1306_UpdateScreenDMA+0xaa>
		case 4:  // Write page data
			ssd1306_WriteDataDMA(&SSD1306_Buffer[SSD1306_WIDTH*current_page],SSD1306_WIDTH);
 800279a:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <ssd1306_UpdateScreenDMA+0xb8>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	01db      	lsls	r3, r3, #7
 80027a0:	4a10      	ldr	r2, [pc, #64]	@ (80027e4 <ssd1306_UpdateScreenDMA+0xbc>)
 80027a2:	4413      	add	r3, r2
 80027a4:	2180      	movs	r1, #128	@ 0x80
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fed0 	bl	800254c <ssd1306_WriteDataDMA>
			current_page++;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <ssd1306_UpdateScreenDMA+0xb8>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <ssd1306_UpdateScreenDMA+0xb8>)
 80027b6:	701a      	strb	r2, [r3, #0]
			state = 1;  // Start over with next page
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <ssd1306_UpdateScreenDMA+0xb4>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]

			if (current_page > 7){//SSD1306_HEIGHT/8) {
 80027be:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <ssd1306_UpdateScreenDMA+0xb8>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b07      	cmp	r3, #7
 80027c4:	d904      	bls.n	80027d0 <ssd1306_UpdateScreenDMA+0xa8>
				current_page = 0;
 80027c6:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <ssd1306_UpdateScreenDMA+0xb8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
				return 1;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e001      	b.n	80027d4 <ssd1306_UpdateScreenDMA+0xac>
			}
			break;
 80027d0:	bf00      	nop
		}
	}
	return 0;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000710 	.word	0x20000710
 80027dc:	2000002c 	.word	0x2000002c
 80027e0:	20000b22 	.word	0x20000b22
 80027e4:	2000071c 	.word	0x2000071c

080027e8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	460b      	mov	r3, r1
 80027f4:	71bb      	strb	r3, [r7, #6]
 80027f6:	4613      	mov	r3, r2
 80027f8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db3d      	blt.n	800287e <ssd1306_DrawPixel+0x96>
 8002802:	79bb      	ldrb	r3, [r7, #6]
 8002804:	2b3f      	cmp	r3, #63	@ 0x3f
 8002806:	d83a      	bhi.n	800287e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002808:	797b      	ldrb	r3, [r7, #5]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d11a      	bne.n	8002844 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800280e:	79fa      	ldrb	r2, [r7, #7]
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	08db      	lsrs	r3, r3, #3
 8002814:	b2d8      	uxtb	r0, r3
 8002816:	4603      	mov	r3, r0
 8002818:	01db      	lsls	r3, r3, #7
 800281a:	4413      	add	r3, r2
 800281c:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <ssd1306_DrawPixel+0xa4>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	b25a      	sxtb	r2, r3
 8002822:	79bb      	ldrb	r3, [r7, #6]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	b25b      	sxtb	r3, r3
 8002830:	4313      	orrs	r3, r2
 8002832:	b259      	sxtb	r1, r3
 8002834:	79fa      	ldrb	r2, [r7, #7]
 8002836:	4603      	mov	r3, r0
 8002838:	01db      	lsls	r3, r3, #7
 800283a:	4413      	add	r3, r2
 800283c:	b2c9      	uxtb	r1, r1
 800283e:	4a13      	ldr	r2, [pc, #76]	@ (800288c <ssd1306_DrawPixel+0xa4>)
 8002840:	54d1      	strb	r1, [r2, r3]
 8002842:	e01d      	b.n	8002880 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002844:	79fa      	ldrb	r2, [r7, #7]
 8002846:	79bb      	ldrb	r3, [r7, #6]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	b2d8      	uxtb	r0, r3
 800284c:	4603      	mov	r3, r0
 800284e:	01db      	lsls	r3, r3, #7
 8002850:	4413      	add	r3, r2
 8002852:	4a0e      	ldr	r2, [pc, #56]	@ (800288c <ssd1306_DrawPixel+0xa4>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	b25a      	sxtb	r2, r3
 8002858:	79bb      	ldrb	r3, [r7, #6]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	b25b      	sxtb	r3, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	b25b      	sxtb	r3, r3
 800286a:	4013      	ands	r3, r2
 800286c:	b259      	sxtb	r1, r3
 800286e:	79fa      	ldrb	r2, [r7, #7]
 8002870:	4603      	mov	r3, r0
 8002872:	01db      	lsls	r3, r3, #7
 8002874:	4413      	add	r3, r2
 8002876:	b2c9      	uxtb	r1, r1
 8002878:	4a04      	ldr	r2, [pc, #16]	@ (800288c <ssd1306_DrawPixel+0xa4>)
 800287a:	54d1      	strb	r1, [r2, r3]
 800287c:	e000      	b.n	8002880 <ssd1306_DrawPixel+0x98>
        return;
 800287e:	bf00      	nop
    }
}
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	2000071c 	.word	0x2000071c

08002890 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	4604      	mov	r4, r0
 8002898:	4638      	mov	r0, r7
 800289a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800289e:	4623      	mov	r3, r4
 80028a0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b1f      	cmp	r3, #31
 80028a6:	d902      	bls.n	80028ae <ssd1306_WriteChar+0x1e>
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80028ac:	d901      	bls.n	80028b2 <ssd1306_WriteChar+0x22>
        return 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e079      	b.n	80029a6 <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <ssd1306_WriteChar+0x34>
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	3b20      	subs	r3, #32
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	e000      	b.n	80028c6 <ssd1306_WriteChar+0x36>
 80028c4:	783b      	ldrb	r3, [r7, #0]
 80028c6:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80028c8:	4b39      	ldr	r3, [pc, #228]	@ (80029b0 <ssd1306_WriteChar+0x120>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	4413      	add	r3, r2
 80028d2:	2b80      	cmp	r3, #128	@ 0x80
 80028d4:	dc06      	bgt.n	80028e4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80028d6:	4b36      	ldr	r3, [pc, #216]	@ (80029b0 <ssd1306_WriteChar+0x120>)
 80028d8:	885b      	ldrh	r3, [r3, #2]
 80028da:	461a      	mov	r2, r3
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80028e0:	2b40      	cmp	r3, #64	@ 0x40
 80028e2:	dd01      	ble.n	80028e8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e05e      	b.n	80029a6 <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	e04d      	b.n	800298a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	3b20      	subs	r3, #32
 80028f4:	7879      	ldrb	r1, [r7, #1]
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4619      	mov	r1, r3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	440b      	add	r3, r1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	e036      	b.n	800297c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800291e:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <ssd1306_WriteChar+0x120>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	4413      	add	r3, r2
 800292a:	b2d8      	uxtb	r0, r3
 800292c:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <ssd1306_WriteChar+0x120>)
 800292e:	885b      	ldrh	r3, [r3, #2]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4413      	add	r3, r2
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800293e:	4619      	mov	r1, r3
 8002940:	f7ff ff52 	bl	80027e8 <ssd1306_DrawPixel>
 8002944:	e017      	b.n	8002976 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002946:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <ssd1306_WriteChar+0x120>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4413      	add	r3, r2
 8002952:	b2d8      	uxtb	r0, r3
 8002954:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <ssd1306_WriteChar+0x120>)
 8002956:	885b      	ldrh	r3, [r3, #2]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4413      	add	r3, r2
 8002960:	b2d9      	uxtb	r1, r3
 8002962:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	f7ff ff39 	bl	80027e8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	3301      	adds	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	429a      	cmp	r2, r3
 8002982:	d3c4      	bcc.n	800290e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	787b      	ldrb	r3, [r7, #1]
 800298c:	461a      	mov	r2, r3
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4293      	cmp	r3, r2
 8002992:	d3ac      	bcc.n	80028ee <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <ssd1306_WriteChar+0x120>)
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4413      	add	r3, r2
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <ssd1306_WriteChar+0x120>)
 80029a2:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000b1c 	.word	0x20000b1c

080029b4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	4638      	mov	r0, r7
 80029be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80029c2:	e013      	b.n	80029ec <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	7818      	ldrb	r0, [r3, #0]
 80029c8:	7e3b      	ldrb	r3, [r7, #24]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	463b      	mov	r3, r7
 80029ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d0:	f7ff ff5e 	bl	8002890 <ssd1306_WriteChar>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d002      	beq.n	80029e6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	e008      	b.n	80029f8 <ssd1306_WriteString+0x44>
        }
        str++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3301      	adds	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e7      	bne.n	80029c4 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	781b      	ldrb	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	460a      	mov	r2, r1
 8002a0a:	71fb      	strb	r3, [r7, #7]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <ssd1306_SetCursor+0x2c>)
 8002a16:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002a18:	79bb      	ldrb	r3, [r7, #6]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <ssd1306_SetCursor+0x2c>)
 8002a1e:	805a      	strh	r2, [r3, #2]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	20000b1c 	.word	0x20000b1c

08002a30 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4604      	mov	r4, r0
 8002a38:	4608      	mov	r0, r1
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4623      	mov	r3, r4
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	4603      	mov	r3, r0
 8002a44:	71bb      	strb	r3, [r7, #6]
 8002a46:	460b      	mov	r3, r1
 8002a48:	717b      	strb	r3, [r7, #5]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002a4e:	797a      	ldrb	r2, [r7, #5]
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bfb8      	it	lt
 8002a58:	425b      	neglt	r3, r3
 8002a5a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002a5c:	793a      	ldrb	r2, [r7, #4]
 8002a5e:	79bb      	ldrb	r3, [r7, #6]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfb8      	it	lt
 8002a66:	425b      	neglt	r3, r3
 8002a68:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002a6a:	79fa      	ldrb	r2, [r7, #7]
 8002a6c:	797b      	ldrb	r3, [r7, #5]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d201      	bcs.n	8002a76 <ssd1306_Line+0x46>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e001      	b.n	8002a7a <ssd1306_Line+0x4a>
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002a7c:	79ba      	ldrb	r2, [r7, #6]
 8002a7e:	793b      	ldrb	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d201      	bcs.n	8002a88 <ssd1306_Line+0x58>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e001      	b.n	8002a8c <ssd1306_Line+0x5c>
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8002a96:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002a9a:	7939      	ldrb	r1, [r7, #4]
 8002a9c:	797b      	ldrb	r3, [r7, #5]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fea2 	bl	80027e8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002aa4:	e024      	b.n	8002af0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002aa6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002aaa:	79b9      	ldrb	r1, [r7, #6]
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fe9a 	bl	80027e8 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	425b      	negs	r3, r3
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	dd08      	ble.n	8002ad6 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	da08      	bge.n	8002af0 <ssd1306_Line+0xc0>
            error += deltaX;
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	79bb      	ldrb	r3, [r7, #6]
 8002aec:	4413      	add	r3, r2
 8002aee:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002af0:	79fa      	ldrb	r2, [r7, #7]
 8002af2:	797b      	ldrb	r3, [r7, #5]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1d6      	bne.n	8002aa6 <ssd1306_Line+0x76>
 8002af8:	79ba      	ldrb	r2, [r7, #6]
 8002afa:	793b      	ldrb	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1d2      	bne.n	8002aa6 <ssd1306_Line+0x76>
        }
    }
    return;
 8002b00:	bf00      	nop
}
 8002b02:	3724      	adds	r7, #36	@ 0x24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002b12:	2381      	movs	r3, #129	@ 0x81
 8002b14:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fcdf 	bl	80024dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fcdb 	bl	80024dc <ssd1306_WriteCommand>
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002b40:	23af      	movs	r3, #175	@ 0xaf
 8002b42:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002b44:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <ssd1306_SetDisplayOn+0x38>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	715a      	strb	r2, [r3, #5]
 8002b4a:	e004      	b.n	8002b56 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002b4c:	23ae      	movs	r3, #174	@ 0xae
 8002b4e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <ssd1306_SetDisplayOn+0x38>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fcbf 	bl	80024dc <ssd1306_WriteCommand>
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000b1c 	.word	0x20000b1c

08002b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	4a08      	ldr	r2, [pc, #32]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	@ 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a32      	ldr	r2, [pc, #200]	@ (8002ca4 <HAL_ADC_MspInit+0xe8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d15e      	bne.n	8002c9c <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_ADC_MspInit+0xec>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <HAL_ADC_MspInit+0xec>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bee:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca8 <HAL_ADC_MspInit+0xec>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <HAL_ADC_MspInit+0xec>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <HAL_ADC_MspInit+0xec>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ca8 <HAL_ADC_MspInit+0xec>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c16:	23ff      	movs	r3, #255	@ 0xff
 8002c18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	4619      	mov	r1, r3
 8002c28:	4820      	ldr	r0, [pc, #128]	@ (8002cac <HAL_ADC_MspInit+0xf0>)
 8002c2a:	f001 ffbb 	bl	8004ba4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c30:	4a20      	ldr	r2, [pc, #128]	@ (8002cb4 <HAL_ADC_MspInit+0xf8>)
 8002c32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c34:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c46:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c56:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c5e:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c70:	480f      	ldr	r0, [pc, #60]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c72:	f001 fbeb 	bl	800444c <HAL_DMA_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002c7c:	f7ff f9ac 	bl	8001fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c84:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c86:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <HAL_ADC_MspInit+0xf4>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2012      	movs	r0, #18
 8002c92:	f001 fba4 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c96:	2012      	movs	r0, #18
 8002c98:	f001 fbbd 	bl	8004416 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3728      	adds	r7, #40	@ 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40012000 	.word	0x40012000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	200001e8 	.word	0x200001e8
 8002cb4:	40026410 	.word	0x40026410

08002cb8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e14 <HAL_I2C_MspInit+0x15c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	f040 8097 	bne.w	8002e0a <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e18 <HAL_I2C_MspInit+0x160>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	4a4c      	ldr	r2, [pc, #304]	@ (8002e18 <HAL_I2C_MspInit+0x160>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cec:	4b4a      	ldr	r3, [pc, #296]	@ (8002e18 <HAL_I2C_MspInit+0x160>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cf8:	23c0      	movs	r3, #192	@ 0xc0
 8002cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cfc:	2312      	movs	r3, #18
 8002cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d08:	2304      	movs	r3, #4
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	4842      	ldr	r0, [pc, #264]	@ (8002e1c <HAL_I2C_MspInit+0x164>)
 8002d14:	f001 ff46 	bl	8004ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <HAL_I2C_MspInit+0x160>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	4a3d      	ldr	r2, [pc, #244]	@ (8002e18 <HAL_I2C_MspInit+0x160>)
 8002d22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d28:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <HAL_I2C_MspInit+0x160>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002d34:	4b3a      	ldr	r3, [pc, #232]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d36:	4a3b      	ldr	r2, [pc, #236]	@ (8002e24 <HAL_I2C_MspInit+0x16c>)
 8002d38:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002d3a:	4b39      	ldr	r3, [pc, #228]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d40:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d42:	4b37      	ldr	r3, [pc, #220]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d48:	4b35      	ldr	r3, [pc, #212]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4e:	4b34      	ldr	r3, [pc, #208]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d54:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d56:	4b32      	ldr	r3, [pc, #200]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5c:	4b30      	ldr	r3, [pc, #192]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002d62:	4b2f      	ldr	r3, [pc, #188]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d68:	4b2d      	ldr	r3, [pc, #180]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d74:	482a      	ldr	r0, [pc, #168]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d76:	f001 fb69 	bl	800444c <HAL_DMA_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002d80:	f7ff f92a 	bl	8001fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d88:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d8a:	4a25      	ldr	r2, [pc, #148]	@ (8002e20 <HAL_I2C_MspInit+0x168>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002d90:	4b25      	ldr	r3, [pc, #148]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002d92:	4a26      	ldr	r2, [pc, #152]	@ (8002e2c <HAL_I2C_MspInit+0x174>)
 8002d94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002d96:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d9c:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002d9e:	2240      	movs	r2, #64	@ 0x40
 8002da0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da2:	4b21      	ldr	r3, [pc, #132]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002da8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002db0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dc2:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dc8:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002dce:	4816      	ldr	r0, [pc, #88]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002dd0:	f001 fb3c 	bl	800444c <HAL_DMA_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002dda:	f7ff f8fd 	bl	8001fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a11      	ldr	r2, [pc, #68]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002de2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002de4:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <HAL_I2C_MspInit+0x170>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	201f      	movs	r0, #31
 8002df0:	f001 faf5 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002df4:	201f      	movs	r0, #31
 8002df6:	f001 fb0e 	bl	8004416 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2020      	movs	r0, #32
 8002e00:	f001 faed 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002e04:	2020      	movs	r0, #32
 8002e06:	f001 fb06 	bl	8004416 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	@ 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40005400 	.word	0x40005400
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020400 	.word	0x40020400
 8002e20:	2000029c 	.word	0x2000029c
 8002e24:	40026010 	.word	0x40026010
 8002e28:	200002fc 	.word	0x200002fc
 8002e2c:	40026028 	.word	0x40026028

08002e30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a40      	ldr	r2, [pc, #256]	@ (8002f40 <HAL_TIM_Base_MspInit+0x110>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d12e      	bne.n	8002ea0 <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e52:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	2018      	movs	r0, #24
 8002e64:	f001 fabb 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e68:	2018      	movs	r0, #24
 8002e6a:	f001 fad4 	bl	8004416 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	2019      	movs	r0, #25
 8002e74:	f001 fab3 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e78:	2019      	movs	r0, #25
 8002e7a:	f001 facc 	bl	8004416 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	201a      	movs	r0, #26
 8002e84:	f001 faab 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e88:	201a      	movs	r0, #26
 8002e8a:	f001 fac4 	bl	8004416 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2100      	movs	r1, #0
 8002e92:	201b      	movs	r0, #27
 8002e94:	f001 faa3 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002e98:	201b      	movs	r0, #27
 8002e9a:	f001 fabc 	bl	8004416 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e9e:	e04a      	b.n	8002f36 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea8:	d116      	bne.n	8002ed8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	4b25      	ldr	r3, [pc, #148]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	4a24      	ldr	r2, [pc, #144]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eba:	4b22      	ldr	r3, [pc, #136]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	201c      	movs	r0, #28
 8002ecc:	f001 fa87 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ed0:	201c      	movs	r0, #28
 8002ed2:	f001 faa0 	bl	8004416 <HAL_NVIC_EnableIRQ>
}
 8002ed6:	e02e      	b.n	8002f36 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1a      	ldr	r2, [pc, #104]	@ (8002f48 <HAL_TIM_Base_MspInit+0x118>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d116      	bne.n	8002f10 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	4b17      	ldr	r3, [pc, #92]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	4a16      	ldr	r2, [pc, #88]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef2:	4b14      	ldr	r3, [pc, #80]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	201d      	movs	r0, #29
 8002f04:	f001 fa6b 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f08:	201d      	movs	r0, #29
 8002f0a:	f001 fa84 	bl	8004416 <HAL_NVIC_EnableIRQ>
}
 8002f0e:	e012      	b.n	8002f36 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <HAL_TIM_Base_MspInit+0x11c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10d      	bne.n	8002f36 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_TIM_Base_MspInit+0x114>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
}
 8002f36:	bf00      	nop
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800

08002f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a12      	ldr	r2, [pc, #72]	@ (8002fb8 <HAL_TIM_MspPostInit+0x68>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d11d      	bne.n	8002fae <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <HAL_TIM_MspPostInit+0x6c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	4a10      	ldr	r2, [pc, #64]	@ (8002fbc <HAL_TIM_MspPostInit+0x6c>)
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <HAL_TIM_MspPostInit+0x6c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002f8e:	2333      	movs	r3, #51	@ 0x33
 8002f90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4805      	ldr	r0, [pc, #20]	@ (8002fc0 <HAL_TIM_MspPostInit+0x70>)
 8002faa:	f001 fdfb 	bl	8004ba4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fae:	bf00      	nop
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020400 	.word	0x40020400

08002fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <NMI_Handler+0x4>

08002fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	bf00      	nop
 8002fda:	e7fd      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <BusFault_Handler+0x4>

08002fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <UsageFault_Handler+0x4>

08002fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800301a:	f000 fba1 	bl	8003760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003028:	4802      	ldr	r0, [pc, #8]	@ (8003034 <DMA1_Stream0_IRQHandler+0x10>)
 800302a:	f001 fb37 	bl	800469c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000029c 	.word	0x2000029c

08003038 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800303c:	4802      	ldr	r0, [pc, #8]	@ (8003048 <DMA1_Stream1_IRQHandler+0x10>)
 800303e:	f001 fb2d 	bl	800469c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200002fc 	.word	0x200002fc

0800304c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003050:	4802      	ldr	r0, [pc, #8]	@ (800305c <ADC_IRQHandler+0x10>)
 8003052:	f000 fc0c 	bl	800386e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200001a0 	.word	0x200001a0

08003060 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003064:	4802      	ldr	r0, [pc, #8]	@ (8003070 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003066:	f006 fd8e 	bl	8009b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000035c 	.word	0x2000035c

08003074 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003078:	4802      	ldr	r0, [pc, #8]	@ (8003084 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800307a:	f006 fd84 	bl	8009b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000035c 	.word	0x2000035c

08003088 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800308c:	4802      	ldr	r0, [pc, #8]	@ (8003098 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800308e:	f006 fd7a 	bl	8009b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2000035c 	.word	0x2000035c

0800309c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030a0:	4802      	ldr	r0, [pc, #8]	@ (80030ac <TIM1_CC_IRQHandler+0x10>)
 80030a2:	f006 fd70 	bl	8009b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000035c 	.word	0x2000035c

080030b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030b4:	4802      	ldr	r0, [pc, #8]	@ (80030c0 <TIM2_IRQHandler+0x10>)
 80030b6:	f006 fd66 	bl	8009b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200003a4 	.word	0x200003a4

080030c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030c8:	4802      	ldr	r0, [pc, #8]	@ (80030d4 <TIM3_IRQHandler+0x10>)
 80030ca:	f006 fd5c 	bl	8009b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	200003ec 	.word	0x200003ec

080030d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030dc:	4802      	ldr	r0, [pc, #8]	@ (80030e8 <I2C1_EV_IRQHandler+0x10>)
 80030de:	f002 fc5b 	bl	8005998 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000248 	.word	0x20000248

080030ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80030f0:	4802      	ldr	r0, [pc, #8]	@ (80030fc <I2C1_ER_IRQHandler+0x10>)
 80030f2:	f002 fdc2 	bl	8005c7a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000248 	.word	0x20000248

08003100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003104:	4802      	ldr	r0, [pc, #8]	@ (8003110 <DMA2_Stream0_IRQHandler+0x10>)
 8003106:	f001 fac9 	bl	800469c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200001e8 	.word	0x200001e8

08003114 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003118:	4802      	ldr	r0, [pc, #8]	@ (8003124 <OTG_FS_IRQHandler+0x10>)
 800311a:	f004 fed7 	bl	8007ecc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20001414 	.word	0x20001414

08003128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003130:	4a14      	ldr	r2, [pc, #80]	@ (8003184 <_sbrk+0x5c>)
 8003132:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <_sbrk+0x60>)
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800313c:	4b13      	ldr	r3, [pc, #76]	@ (800318c <_sbrk+0x64>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <_sbrk+0x64>)
 8003146:	4a12      	ldr	r2, [pc, #72]	@ (8003190 <_sbrk+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d207      	bcs.n	8003168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003158:	f00b fccc 	bl	800eaf4 <__errno>
 800315c:	4603      	mov	r3, r0
 800315e:	220c      	movs	r2, #12
 8003160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e009      	b.n	800317c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003168:	4b08      	ldr	r3, [pc, #32]	@ (800318c <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800316e:	4b07      	ldr	r3, [pc, #28]	@ (800318c <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	4a05      	ldr	r2, [pc, #20]	@ (800318c <_sbrk+0x64>)
 8003178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20020000 	.word	0x20020000
 8003188:	00000400 	.word	0x00000400
 800318c:	20000b24 	.word	0x20000b24
 8003190:	20001c60 	.word	0x20001c60

08003194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <SystemInit+0x20>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319e:	4a05      	ldr	r2, [pc, #20]	@ (80031b4 <SystemInit+0x20>)
 80031a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
 80031c4:	4613      	mov	r3, r2
 80031c6:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 80031c8:	78bb      	ldrb	r3, [r7, #2]
 80031ca:	3301      	adds	r3, #1
 80031cc:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	795a      	ldrb	r2, [r3, #5]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	795b      	ldrb	r3, [r3, #5]
 80031e4:	1c59      	adds	r1, r3, #1
 80031e6:	b2c8      	uxtb	r0, r1
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	7148      	strb	r0, [r1, #5]
 80031ec:	4413      	add	r3, r2
 80031ee:	2255      	movs	r2, #85	@ 0x55
 80031f0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	795a      	ldrb	r2, [r3, #5]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	799b      	ldrb	r3, [r3, #6]
 80031fa:	4013      	ands	r3, r2
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	795b      	ldrb	r3, [r3, #5]
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	b2c8      	uxtb	r0, r1
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	7148      	strb	r0, [r1, #5]
 8003212:	4413      	add	r3, r2
 8003214:	224e      	movs	r2, #78	@ 0x4e
 8003216:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	795a      	ldrb	r2, [r3, #5]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	799b      	ldrb	r3, [r3, #6]
 8003220:	4013      	ands	r3, r2
 8003222:	b2da      	uxtb	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	795b      	ldrb	r3, [r3, #5]
 8003230:	1c59      	adds	r1, r3, #1
 8003232:	b2c8      	uxtb	r0, r1
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	7148      	strb	r0, [r1, #5]
 8003238:	4413      	add	r3, r2
 800323a:	2245      	movs	r2, #69	@ 0x45
 800323c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	795a      	ldrb	r2, [r3, #5]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	799b      	ldrb	r3, [r3, #6]
 8003246:	4013      	ands	r3, r2
 8003248:	b2da      	uxtb	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	795b      	ldrb	r3, [r3, #5]
 8003256:	1c59      	adds	r1, r3, #1
 8003258:	b2c8      	uxtb	r0, r1
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	7148      	strb	r0, [r1, #5]
 800325e:	4413      	add	r3, r2
 8003260:	2252      	movs	r2, #82	@ 0x52
 8003262:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	795a      	ldrb	r2, [r3, #5]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	799b      	ldrb	r3, [r3, #6]
 800326c:	4013      	ands	r3, r2
 800326e:	b2da      	uxtb	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	795b      	ldrb	r3, [r3, #5]
 800327c:	1c59      	adds	r1, r3, #1
 800327e:	b2c8      	uxtb	r0, r1
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	7148      	strb	r0, [r1, #5]
 8003284:	4413      	add	r3, r2
 8003286:	78ba      	ldrb	r2, [r7, #2]
 8003288:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	795a      	ldrb	r2, [r3, #5]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	799b      	ldrb	r3, [r3, #6]
 8003292:	4013      	ands	r3, r2
 8003294:	b2da      	uxtb	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	795b      	ldrb	r3, [r3, #5]
 80032a2:	1c59      	adds	r1, r3, #1
 80032a4:	b2c8      	uxtb	r0, r1
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	7148      	strb	r0, [r1, #5]
 80032aa:	4413      	add	r3, r2
 80032ac:	223a      	movs	r2, #58	@ 0x3a
 80032ae:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	795a      	ldrb	r2, [r3, #5]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	799b      	ldrb	r3, [r3, #6]
 80032b8:	4013      	ands	r3, r2
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	795b      	ldrb	r3, [r3, #5]
 80032c8:	1c59      	adds	r1, r3, #1
 80032ca:	b2c8      	uxtb	r0, r1
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	7148      	strb	r0, [r1, #5]
 80032d0:	4413      	add	r3, r2
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	795a      	ldrb	r2, [r3, #5]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	799b      	ldrb	r3, [r3, #6]
 80032de:	4013      	ands	r3, r2
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2207      	movs	r2, #7
 80032ea:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7a5a      	ldrb	r2, [r3, #9]
 80032f0:	78b9      	ldrb	r1, [r7, #2]
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	404b      	eors	r3, r1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4053      	eors	r3, r2
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8003300:	b2da      	uxtb	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7a5b      	ldrb	r3, [r3, #9]
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	79db      	ldrb	r3, [r3, #7]
 8003326:	3301      	adds	r3, #1
 8003328:	b2da      	uxtb	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	795b      	ldrb	r3, [r3, #5]
 8003336:	1c59      	adds	r1, r3, #1
 8003338:	b2c8      	uxtb	r0, r1
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	7148      	strb	r0, [r1, #5]
 800333e:	4413      	add	r3, r2
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	795a      	ldrb	r2, [r3, #5]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	799b      	ldrb	r3, [r3, #6]
 800334c:	4013      	ands	r3, r2
 800334e:	b2da      	uxtb	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7a5a      	ldrb	r2, [r3, #9]
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	4053      	eors	r3, r2
 800335c:	b2da      	uxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7a5b      	ldrb	r3, [r3, #9]
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 8003372:	b490      	push	{r4, r7}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8003380:	e02c      	b.n	80033dc <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	79db      	ldrb	r3, [r3, #7]
 8003386:	3301      	adds	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	441a      	add	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	795b      	ldrb	r3, [r3, #5]
 80033a0:	1c58      	adds	r0, r3, #1
 80033a2:	b2c4      	uxtb	r4, r0
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	7144      	strb	r4, [r0, #5]
 80033a8:	440b      	add	r3, r1
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	795a      	ldrb	r2, [r3, #5]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	799b      	ldrb	r3, [r3, #6]
 80033b6:	4013      	ands	r3, r2
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	73fa      	strb	r2, [r7, #15]
 80033c8:	461a      	mov	r2, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	4413      	add	r3, r2
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7a5b      	ldrb	r3, [r3, #9]
 80033d4:	4053      	eors	r3, r2
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ca      	bne.n	8003382 <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7a5b      	ldrb	r3, [r3, #9]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc90      	pop	{r4, r7}
 80033f8:	4770      	bx	lr
	...

080033fc <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	795b      	ldrb	r3, [r3, #5]
 800340c:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 800340e:	e0e4      	b.n	80035da <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8003410:	4b78      	ldr	r3, [pc, #480]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b07      	cmp	r3, #7
 8003416:	f200 80c9 	bhi.w	80035ac <unerPrtcl_DecodeHeader+0x1b0>
 800341a:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <unerPrtcl_DecodeHeader+0x24>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003441 	.word	0x08003441
 8003424:	0800345b 	.word	0x0800345b
 8003428:	08003499 	.word	0x08003499
 800342c:	080034c5 	.word	0x080034c5
 8003430:	080034f1 	.word	0x080034f1
 8003434:	08003507 	.word	0x08003507
 8003438:	080035ad 	.word	0x080035ad
 800343c:	08003569 	.word	0x08003569
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	7912      	ldrb	r2, [r2, #4]
 8003448:	4413      	add	r3, r2
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b55      	cmp	r3, #85	@ 0x55
 800344e:	f040 80b1 	bne.w	80035b4 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 8003452:	4b68      	ldr	r3, [pc, #416]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
                }
            break;
 8003458:	e0ac      	b.n	80035b4 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	7912      	ldrb	r2, [r2, #4]
 8003462:	4413      	add	r3, r2
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b4e      	cmp	r3, #78	@ 0x4e
 8003468:	d103      	bne.n	8003472 <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 800346a:	4b62      	ldr	r3, [pc, #392]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8003470:	e0a2      	b.n	80035b8 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	7912      	ldrb	r2, [r2, #4]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b55      	cmp	r3, #85	@ 0x55
 8003480:	f000 809a 	beq.w	80035b8 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 8003484:	4b5b      	ldr	r3, [pc, #364]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	711a      	strb	r2, [r3, #4]
            break;
 8003496:	e08f      	b.n	80035b8 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	7912      	ldrb	r2, [r2, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b45      	cmp	r3, #69	@ 0x45
 80034a6:	d103      	bne.n	80034b0 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 80034a8:	4b52      	ldr	r3, [pc, #328]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 80034aa:	2203      	movs	r2, #3
 80034ac:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80034ae:	e086      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80034b0:	4b50      	ldr	r3, [pc, #320]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	791b      	ldrb	r3, [r3, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	711a      	strb	r2, [r3, #4]
            break;
 80034c2:	e07c      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	7912      	ldrb	r2, [r2, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b52      	cmp	r3, #82	@ 0x52
 80034d2:	d103      	bne.n	80034dc <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 80034d4:	4b47      	ldr	r3, [pc, #284]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 80034d6:	2204      	movs	r2, #4
 80034d8:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80034da:	e070      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80034dc:	4b45      	ldr	r3, [pc, #276]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	791b      	ldrb	r3, [r3, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	711a      	strb	r2, [r3, #4]
            break;
 80034ee:	e066      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	7912      	ldrb	r2, [r2, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 80034fe:	4b3d      	ldr	r3, [pc, #244]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 8003500:	2205      	movs	r2, #5
 8003502:	701a      	strb	r2, [r3, #0]
            break;
 8003504:	e05b      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	7912      	ldrb	r2, [r2, #4]
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b3a      	cmp	r3, #58	@ 0x3a
 8003514:	d11e      	bne.n	8003554 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 8003516:	4b37      	ldr	r3, [pc, #220]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 8003518:	2207      	movs	r2, #7
 800351a:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	791b      	ldrb	r3, [r3, #4]
 8003520:	3301      	adds	r3, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7a1a      	ldrb	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	799b      	ldrb	r3, [r3, #6]
 8003530:	4013      	ands	r3, r2
 8003532:	b2da      	uxtb	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7a5a      	ldrb	r2, [r3, #9]
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	4053      	eors	r3, r2
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8003552:	e034      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8003554:	4b27      	ldr	r3, [pc, #156]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	791b      	ldrb	r3, [r3, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	711a      	strb	r2, [r3, #4]
            break;
 8003566:	e02a      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	3b01      	subs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00c      	beq.n	800358e <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7a5a      	ldrb	r2, [r3, #9]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	7909      	ldrb	r1, [r1, #4]
 8003580:	440b      	add	r3, r1
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	4053      	eors	r3, r2
 8003586:	b2da      	uxtb	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 800358c:	e016      	b.n	80035bc <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 800358e:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	7912      	ldrb	r2, [r2, #4]
 800359c:	4413      	add	r3, r2
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7a5b      	ldrb	r3, [r3, #9]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d109      	bne.n	80035bc <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e01d      	b.n	80035e8 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 80035ac:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <unerPrtcl_DecodeHeader+0x1f8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
            break;
 80035b2:	e004      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035b4:	bf00      	nop
 80035b6:	e002      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035b8:	bf00      	nop
 80035ba:	e000      	b.n	80035be <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035bc:	bf00      	nop
        }
        dataRx->indexR++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	791b      	ldrb	r3, [r3, #4]
 80035c2:	3301      	adds	r3, #1
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	791a      	ldrb	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	799b      	ldrb	r3, [r3, #6]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	7bba      	ldrb	r2, [r7, #14]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	f47f af15 	bne.w	8003410 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	20000b28 	.word	0x20000b28

080035f8 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	22ff      	movs	r2, #255	@ 0xff
 8003628:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2200      	movs	r2, #0
 800363a:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2200      	movs	r2, #0
 8003640:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	22ff      	movs	r2, #255	@ 0xff
 8003652:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2200      	movs	r2, #0
 8003658:	725a      	strb	r2, [r3, #9]

}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800366c:	f7ff fd92 	bl	8003194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003670:	480c      	ldr	r0, [pc, #48]	@ (80036a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003672:	490d      	ldr	r1, [pc, #52]	@ (80036a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003674:	4a0d      	ldr	r2, [pc, #52]	@ (80036ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003678:	e002      	b.n	8003680 <LoopCopyDataInit>

0800367a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800367a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800367c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367e:	3304      	adds	r3, #4

08003680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003684:	d3f9      	bcc.n	800367a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003686:	4a0a      	ldr	r2, [pc, #40]	@ (80036b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003688:	4c0a      	ldr	r4, [pc, #40]	@ (80036b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800368c:	e001      	b.n	8003692 <LoopFillZerobss>

0800368e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003690:	3204      	adds	r2, #4

08003692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003694:	d3fb      	bcc.n	800368e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003696:	f00b fa33 	bl	800eb00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800369a:	f7fe f85b 	bl	8001754 <main>
  bx  lr    
 800369e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80036ac:	080101f0 	.word	0x080101f0
  ldr r2, =_sbss
 80036b0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80036b4:	20001c60 	.word	0x20001c60

080036b8 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b8:	e7fe      	b.n	80036b8 <DMA1_Stream2_IRQHandler>
	...

080036bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c0:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_Init+0x40>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <HAL_Init+0x40>)
 80036c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_Init+0x40>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_Init+0x40>)
 80036d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d8:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a07      	ldr	r2, [pc, #28]	@ (80036fc <HAL_Init+0x40>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e4:	2003      	movs	r0, #3
 80036e6:	f000 fe6f 	bl	80043c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ea:	200f      	movs	r0, #15
 80036ec:	f000 f808 	bl	8003700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f0:	f7ff fa3c 	bl	8002b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023c00 	.word	0x40023c00

08003700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003708:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <HAL_InitTick+0x54>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_InitTick+0x58>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003716:	fbb3 f3f1 	udiv	r3, r3, r1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fe87 	bl	8004432 <HAL_SYSTICK_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e00e      	b.n	800374c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d80a      	bhi.n	800374a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003734:	2200      	movs	r2, #0
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f000 fe4f 	bl	80043de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003740:	4a06      	ldr	r2, [pc, #24]	@ (800375c <HAL_InitTick+0x5c>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000030 	.word	0x20000030
 8003758:	20000038 	.word	0x20000038
 800375c:	20000034 	.word	0x20000034

08003760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003764:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <HAL_IncTick+0x20>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_IncTick+0x24>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4413      	add	r3, r2
 8003770:	4a04      	ldr	r2, [pc, #16]	@ (8003784 <HAL_IncTick+0x24>)
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000038 	.word	0x20000038
 8003784:	20000b2c 	.word	0x20000b2c

08003788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return uwTick;
 800378c:	4b03      	ldr	r3, [pc, #12]	@ (800379c <HAL_GetTick+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000b2c 	.word	0x20000b2c

080037a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7ff ffee 	bl	8003788 <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d005      	beq.n	80037c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ba:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <HAL_Delay+0x44>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037c6:	bf00      	nop
 80037c8:	f7ff ffde 	bl	8003788 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d8f7      	bhi.n	80037c8 <HAL_Delay+0x28>
  {
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000038 	.word	0x20000038

080037e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e033      	b.n	8003866 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff f9d8 	bl	8002bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800382e:	f023 0302 	bic.w	r3, r3, #2
 8003832:	f043 0202 	orr.w	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fb6c 	bl	8003f18 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	641a      	str	r2, [r3, #64]	@ 0x40
 8003856:	e001      	b.n	800385c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d049      	beq.n	8003938 <HAL_ADC_IRQHandler+0xca>
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d046      	beq.n	8003938 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d12b      	bne.n	8003928 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d127      	bne.n	8003928 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038de:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d119      	bne.n	8003928 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0220 	bic.w	r2, r2, #32
 8003902:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fd fa35 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0212 	mvn.w	r2, #18
 8003936:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d057      	beq.n	80039fe <HAL_ADC_IRQHandler+0x190>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d054      	beq.n	80039fe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d139      	bne.n	80039ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003980:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d12b      	bne.n	80039ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d124      	bne.n	80039ee <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11d      	bne.n	80039ee <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d119      	bne.n	80039ee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039c8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f043 0201 	orr.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fc10 	bl	8004214 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 020c 	mvn.w	r2, #12
 80039fc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d017      	beq.n	8003a44 <HAL_ADC_IRQHandler+0x1d6>
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d014      	beq.n	8003a44 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d10d      	bne.n	8003a44 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f929 	bl	8003c8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f06f 0201 	mvn.w	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a52:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d015      	beq.n	8003a86 <HAL_ADC_IRQHandler+0x218>
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d012      	beq.n	8003a86 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a64:	f043 0202 	orr.w	r2, r3, #2
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0220 	mvn.w	r2, #32
 8003a74:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f912 	bl	8003ca0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0220 	mvn.w	r2, #32
 8003a84:	601a      	str	r2, [r3, #0]
  }
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_Start_DMA+0x22>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0d0      	b.n	8003c54 <HAL_ADC_Start_DMA+0x1c4>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d018      	beq.n	8003afa <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ad8:	4b60      	ldr	r3, [pc, #384]	@ (8003c5c <HAL_ADC_Start_DMA+0x1cc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a60      	ldr	r2, [pc, #384]	@ (8003c60 <HAL_ADC_Start_DMA+0x1d0>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0c9a      	lsrs	r2, r3, #18
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4413      	add	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003aec:	e002      	b.n	8003af4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f9      	bne.n	8003aee <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b08:	d107      	bne.n	8003b1a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b18:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f040 8088 	bne.w	8003c3a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b68:	d106      	bne.n	8003b78 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f023 0206 	bic.w	r2, r3, #6
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b76:	e002      	b.n	8003b7e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b86:	4b37      	ldr	r3, [pc, #220]	@ (8003c64 <HAL_ADC_Start_DMA+0x1d4>)
 8003b88:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	4a36      	ldr	r2, [pc, #216]	@ (8003c68 <HAL_ADC_Start_DMA+0x1d8>)
 8003b90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b96:	4a35      	ldr	r2, [pc, #212]	@ (8003c6c <HAL_ADC_Start_DMA+0x1dc>)
 8003b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9e:	4a34      	ldr	r2, [pc, #208]	@ (8003c70 <HAL_ADC_Start_DMA+0x1e0>)
 8003ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003baa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003bba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	334c      	adds	r3, #76	@ 0x4c
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f000 fce4 	bl	80045a8 <HAL_DMA_Start_IT>
 8003be0:	4603      	mov	r3, r0
 8003be2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10f      	bne.n	8003c10 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d129      	bne.n	8003c52 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	e020      	b.n	8003c52 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a17      	ldr	r2, [pc, #92]	@ (8003c74 <HAL_ADC_Start_DMA+0x1e4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d11b      	bne.n	8003c52 <HAL_ADC_Start_DMA+0x1c2>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d114      	bne.n	8003c52 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	e00b      	b.n	8003c52 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f043 0210 	orr.w	r2, r3, #16
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000030 	.word	0x20000030
 8003c60:	431bde83 	.word	0x431bde83
 8003c64:	40012300 	.word	0x40012300
 8003c68:	08004111 	.word	0x08004111
 8003c6c:	080041cb 	.word	0x080041cb
 8003c70:	080041e7 	.word	0x080041e7
 8003c74:	40012000 	.word	0x40012000

08003c78 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x1c>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e113      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x244>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b09      	cmp	r3, #9
 8003cde:	d925      	bls.n	8003d2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68d9      	ldr	r1, [r3, #12]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b1e      	subs	r3, #30
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	400a      	ands	r2, r1
 8003d04:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68d9      	ldr	r1, [r3, #12]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4618      	mov	r0, r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4403      	add	r3, r0
 8003d1e:	3b1e      	subs	r3, #30
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	e022      	b.n	8003d72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6919      	ldr	r1, [r3, #16]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	2207      	movs	r2, #7
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43da      	mvns	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4403      	add	r3, r0
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b06      	cmp	r3, #6
 8003d78:	d824      	bhi.n	8003dc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	3b05      	subs	r3, #5
 8003d8c:	221f      	movs	r2, #31
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	400a      	ands	r2, r1
 8003d9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	4618      	mov	r0, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	3b05      	subs	r3, #5
 8003db6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dc2:	e04c      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d824      	bhi.n	8003e16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	3b23      	subs	r3, #35	@ 0x23
 8003dde:	221f      	movs	r2, #31
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43da      	mvns	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	400a      	ands	r2, r1
 8003dec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	3b23      	subs	r3, #35	@ 0x23
 8003e08:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e14:	e023      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	3b41      	subs	r3, #65	@ 0x41
 8003e28:	221f      	movs	r2, #31
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	400a      	ands	r2, r1
 8003e36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4618      	mov	r0, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	3b41      	subs	r3, #65	@ 0x41
 8003e52:	fa00 f203 	lsl.w	r2, r0, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e5e:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <HAL_ADC_ConfigChannel+0x250>)
 8003e60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a28      	ldr	r2, [pc, #160]	@ (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10f      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x1d8>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d10b      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d12b      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_ADC_ConfigChannel+0x258>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x1f4>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b11      	cmp	r3, #17
 8003ea6:	d122      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a11      	ldr	r2, [pc, #68]	@ (8003f0c <HAL_ADC_ConfigChannel+0x258>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d111      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eca:	4b11      	ldr	r3, [pc, #68]	@ (8003f10 <HAL_ADC_ConfigChannel+0x25c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <HAL_ADC_ConfigChannel+0x260>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	0c9a      	lsrs	r2, r3, #18
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ee0:	e002      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f9      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40012300 	.word	0x40012300
 8003f08:	40012000 	.word	0x40012000
 8003f0c:	10000012 	.word	0x10000012
 8003f10:	20000030 	.word	0x20000030
 8003f14:	431bde83 	.word	0x431bde83

08003f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f20:	4b79      	ldr	r3, [pc, #484]	@ (8004108 <ADC_Init+0x1f0>)
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	4a58      	ldr	r2, [pc, #352]	@ (800410c <ADC_Init+0x1f4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e00f      	b.n	8004016 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004014:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0202 	bic.w	r2, r2, #2
 8004024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7e1b      	ldrb	r3, [r3, #24]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004052:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	3b01      	subs	r3, #1
 8004070:	035a      	lsls	r2, r3, #13
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e007      	b.n	800408c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	051a      	lsls	r2, r3, #20
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040ce:	025a      	lsls	r2, r3, #9
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	029a      	lsls	r2, r3, #10
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40012300 	.word	0x40012300
 800410c:	0f000001 	.word	0x0f000001

08004110 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13c      	bne.n	80041a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d12b      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004148:	2b00      	cmp	r3, #0
 800414a:	d127      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004164:	2b00      	cmp	r3, #0
 8004166:	d119      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0220 	bic.w	r2, r2, #32
 8004176:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7fc fdfb 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041a2:	e00e      	b.n	80041c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff fd75 	bl	8003ca0 <HAL_ADC_ErrorCallback>
}
 80041b6:	e004      	b.n	80041c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff fd4d 	bl	8003c78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2240      	movs	r2, #64	@ 0x40
 80041f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	f043 0204 	orr.w	r2, r3, #4
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fd4a 	bl	8003ca0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004238:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <__NVIC_SetPriorityGrouping+0x44>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004244:	4013      	ands	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425a:	4a04      	ldr	r2, [pc, #16]	@ (800426c <__NVIC_SetPriorityGrouping+0x44>)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	60d3      	str	r3, [r2, #12]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004274:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <__NVIC_GetPriorityGrouping+0x18>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	f003 0307 	and.w	r3, r3, #7
}
 800427e:	4618      	mov	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	2b00      	cmp	r3, #0
 800429c:	db0b      	blt.n	80042b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	f003 021f 	and.w	r2, r3, #31
 80042a4:	4907      	ldr	r1, [pc, #28]	@ (80042c4 <__NVIC_EnableIRQ+0x38>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	2001      	movs	r0, #1
 80042ae:	fa00 f202 	lsl.w	r2, r0, r2
 80042b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000e100 	.word	0xe000e100

080042c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	db0a      	blt.n	80042f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	490c      	ldr	r1, [pc, #48]	@ (8004314 <__NVIC_SetPriority+0x4c>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	0112      	lsls	r2, r2, #4
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	440b      	add	r3, r1
 80042ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f0:	e00a      	b.n	8004308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4908      	ldr	r1, [pc, #32]	@ (8004318 <__NVIC_SetPriority+0x50>)
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	3b04      	subs	r3, #4
 8004300:	0112      	lsls	r2, r2, #4
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	440b      	add	r3, r1
 8004306:	761a      	strb	r2, [r3, #24]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000e100 	.word	0xe000e100
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	@ 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f1c3 0307 	rsb	r3, r3, #7
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf28      	it	cs
 800433a:	2304      	movcs	r3, #4
 800433c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3304      	adds	r3, #4
 8004342:	2b06      	cmp	r3, #6
 8004344:	d902      	bls.n	800434c <NVIC_EncodePriority+0x30>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3b03      	subs	r3, #3
 800434a:	e000      	b.n	800434e <NVIC_EncodePriority+0x32>
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004350:	f04f 32ff 	mov.w	r2, #4294967295
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43da      	mvns	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	401a      	ands	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004364:	f04f 31ff 	mov.w	r1, #4294967295
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	43d9      	mvns	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004374:	4313      	orrs	r3, r2
         );
}
 8004376:	4618      	mov	r0, r3
 8004378:	3724      	adds	r7, #36	@ 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004394:	d301      	bcc.n	800439a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004396:	2301      	movs	r3, #1
 8004398:	e00f      	b.n	80043ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <SysTick_Config+0x40>)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3b01      	subs	r3, #1
 80043a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043a2:	210f      	movs	r1, #15
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	f7ff ff8e 	bl	80042c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <SysTick_Config+0x40>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043b2:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <SysTick_Config+0x40>)
 80043b4:	2207      	movs	r2, #7
 80043b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000e010 	.word	0xe000e010

080043c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff29 	bl	8004228 <__NVIC_SetPriorityGrouping>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043f0:	f7ff ff3e 	bl	8004270 <__NVIC_GetPriorityGrouping>
 80043f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff8e 	bl	800431c <NVIC_EncodePriority>
 8004400:	4602      	mov	r2, r0
 8004402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff5d 	bl	80042c8 <__NVIC_SetPriority>
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	4603      	mov	r3, r0
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff ff31 	bl	800428c <__NVIC_EnableIRQ>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ffa2 	bl	8004384 <SysTick_Config>
 8004440:	4603      	mov	r3, r0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7ff f996 	bl	8003788 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e099      	b.n	800459c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004488:	e00f      	b.n	80044aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800448a:	f7ff f97d 	bl	8003788 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b05      	cmp	r3, #5
 8004496:	d908      	bls.n	80044aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2203      	movs	r2, #3
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e078      	b.n	800459c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e8      	bne.n	800448a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4b38      	ldr	r3, [pc, #224]	@ (80045a4 <HAL_DMA_Init+0x158>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	2b04      	cmp	r3, #4
 8004502:	d107      	bne.n	8004514 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	4313      	orrs	r3, r2
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0307 	bic.w	r3, r3, #7
 800452a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	2b04      	cmp	r3, #4
 800453c:	d117      	bne.n	800456e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 faab 	bl	8004aac <DMA_CheckFifoParam>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2240      	movs	r2, #64	@ 0x40
 8004560:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800456a:	2301      	movs	r3, #1
 800456c:	e016      	b.n	800459c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa62 	bl	8004a40 <DMA_CalcBaseAndBitshift>
 800457c:	4603      	mov	r3, r0
 800457e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004584:	223f      	movs	r2, #63	@ 0x3f
 8004586:	409a      	lsls	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	f010803f 	.word	0xf010803f

080045a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_DMA_Start_IT+0x26>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e040      	b.n	8004650 <HAL_DMA_Start_IT+0xa8>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d12f      	bne.n	8004642 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f9f4 	bl	80049e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004600:	223f      	movs	r2, #63	@ 0x3f
 8004602:	409a      	lsls	r2, r3
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0216 	orr.w	r2, r2, #22
 8004616:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e005      	b.n	800464e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800464a:	2302      	movs	r3, #2
 800464c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d004      	beq.n	8004676 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2280      	movs	r2, #128	@ 0x80
 8004670:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e00c      	b.n	8004690 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2205      	movs	r2, #5
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0201 	bic.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046a8:	4b8e      	ldr	r3, [pc, #568]	@ (80048e4 <HAL_DMA_IRQHandler+0x248>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a8e      	ldr	r2, [pc, #568]	@ (80048e8 <HAL_DMA_IRQHandler+0x24c>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0a9b      	lsrs	r3, r3, #10
 80046b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c6:	2208      	movs	r2, #8
 80046c8:	409a      	lsls	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01a      	beq.n	8004708 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d013      	beq.n	8004708 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0204 	bic.w	r2, r2, #4
 80046ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f4:	2208      	movs	r2, #8
 80046f6:	409a      	lsls	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004700:	f043 0201 	orr.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d012      	beq.n	800473e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472a:	2201      	movs	r2, #1
 800472c:	409a      	lsls	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	f043 0202 	orr.w	r2, r3, #2
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004742:	2204      	movs	r2, #4
 8004744:	409a      	lsls	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004760:	2204      	movs	r2, #4
 8004762:	409a      	lsls	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476c:	f043 0204 	orr.w	r2, r3, #4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	2210      	movs	r2, #16
 800477a:	409a      	lsls	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d043      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d03c      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	2210      	movs	r2, #16
 8004798:	409a      	lsls	r2, r3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d108      	bne.n	80047cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d024      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
 80047ca:	e01f      	b.n	800480c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
 80047dc:	e016      	b.n	800480c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0208 	bic.w	r2, r2, #8
 80047fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004810:	2220      	movs	r2, #32
 8004812:	409a      	lsls	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 808f 	beq.w	800493c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8087 	beq.w	800493c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004832:	2220      	movs	r2, #32
 8004834:	409a      	lsls	r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b05      	cmp	r3, #5
 8004844:	d136      	bne.n	80048b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0216 	bic.w	r2, r2, #22
 8004854:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004864:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <HAL_DMA_IRQHandler+0x1da>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0208 	bic.w	r2, r2, #8
 8004884:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488a:	223f      	movs	r2, #63	@ 0x3f
 800488c:	409a      	lsls	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d07e      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
        }
        return;
 80048b2:	e079      	b.n	80049a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01d      	beq.n	80048fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10d      	bne.n	80048ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d031      	beq.n	800493c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
 80048e0:	e02c      	b.n	800493c <HAL_DMA_IRQHandler+0x2a0>
 80048e2:	bf00      	nop
 80048e4:	20000030 	.word	0x20000030
 80048e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d023      	beq.n	800493c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	4798      	blx	r3
 80048fc:	e01e      	b.n	800493c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10f      	bne.n	800492c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0210 	bic.w	r2, r2, #16
 800491a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004940:	2b00      	cmp	r3, #0
 8004942:	d032      	beq.n	80049aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d022      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2205      	movs	r2, #5
 8004954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	3301      	adds	r3, #1
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	429a      	cmp	r2, r3
 8004972:	d307      	bcc.n	8004984 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f2      	bne.n	8004968 <HAL_DMA_IRQHandler+0x2cc>
 8004982:	e000      	b.n	8004986 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004984:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
 80049a6:	e000      	b.n	80049aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80049a8:	bf00      	nop
    }
  }
}
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049be:	b2db      	uxtb	r3, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b40      	cmp	r3, #64	@ 0x40
 8004a10:	d108      	bne.n	8004a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a22:	e007      	b.n	8004a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	3b10      	subs	r3, #16
 8004a50:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a5a:	4a13      	ldr	r2, [pc, #76]	@ (8004aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d909      	bls.n	8004a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	1d1a      	adds	r2, r3, #4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a80:	e007      	b.n	8004a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	aaaaaaab 	.word	0xaaaaaaab
 8004aa8:	080101a4 	.word	0x080101a4

08004aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d11f      	bne.n	8004b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d856      	bhi.n	8004b7a <DMA_CheckFifoParam+0xce>
 8004acc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad4 <DMA_CheckFifoParam+0x28>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004af7 	.word	0x08004af7
 8004adc:	08004ae5 	.word	0x08004ae5
 8004ae0:	08004b7b 	.word	0x08004b7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d046      	beq.n	8004b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af4:	e043      	b.n	8004b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004afe:	d140      	bne.n	8004b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b04:	e03d      	b.n	8004b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b0e:	d121      	bne.n	8004b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d837      	bhi.n	8004b86 <DMA_CheckFifoParam+0xda>
 8004b16:	a201      	add	r2, pc, #4	@ (adr r2, 8004b1c <DMA_CheckFifoParam+0x70>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b33 	.word	0x08004b33
 8004b24:	08004b2d 	.word	0x08004b2d
 8004b28:	08004b45 	.word	0x08004b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b30:	e030      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d025      	beq.n	8004b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b42:	e022      	b.n	8004b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b4c:	d11f      	bne.n	8004b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b52:	e01c      	b.n	8004b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d903      	bls.n	8004b62 <DMA_CheckFifoParam+0xb6>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d003      	beq.n	8004b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b60:	e018      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
      break;
 8004b66:	e015      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e00b      	b.n	8004b92 <DMA_CheckFifoParam+0xe6>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e00a      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e008      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b82:	bf00      	nop
 8004b84:	e006      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b92:	bf00      	nop
    }
  } 
  
  return status; 
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	@ 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e159      	b.n	8004e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	f040 8148 	bne.w	8004e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d005      	beq.n	8004bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d130      	bne.n	8004c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	2203      	movs	r2, #3
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 0201 	and.w	r2, r3, #1
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d017      	beq.n	8004c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d123      	bne.n	8004ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	08da      	lsrs	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	220f      	movs	r2, #15
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	08da      	lsrs	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3208      	adds	r2, #8
 8004ce2:	69b9      	ldr	r1, [r7, #24]
 8004ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80a2 	beq.w	8004e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b57      	ldr	r3, [pc, #348]	@ (8004e8c <HAL_GPIO_Init+0x2e8>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d32:	4a56      	ldr	r2, [pc, #344]	@ (8004e8c <HAL_GPIO_Init+0x2e8>)
 8004d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d3a:	4b54      	ldr	r3, [pc, #336]	@ (8004e8c <HAL_GPIO_Init+0x2e8>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d46:	4a52      	ldr	r2, [pc, #328]	@ (8004e90 <HAL_GPIO_Init+0x2ec>)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a49      	ldr	r2, [pc, #292]	@ (8004e94 <HAL_GPIO_Init+0x2f0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d019      	beq.n	8004da6 <HAL_GPIO_Init+0x202>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a48      	ldr	r2, [pc, #288]	@ (8004e98 <HAL_GPIO_Init+0x2f4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_GPIO_Init+0x1fe>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a47      	ldr	r2, [pc, #284]	@ (8004e9c <HAL_GPIO_Init+0x2f8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00d      	beq.n	8004d9e <HAL_GPIO_Init+0x1fa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a46      	ldr	r2, [pc, #280]	@ (8004ea0 <HAL_GPIO_Init+0x2fc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <HAL_GPIO_Init+0x1f6>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a45      	ldr	r2, [pc, #276]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_GPIO_Init+0x1f2>
 8004d92:	2304      	movs	r3, #4
 8004d94:	e008      	b.n	8004da8 <HAL_GPIO_Init+0x204>
 8004d96:	2307      	movs	r3, #7
 8004d98:	e006      	b.n	8004da8 <HAL_GPIO_Init+0x204>
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e004      	b.n	8004da8 <HAL_GPIO_Init+0x204>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e002      	b.n	8004da8 <HAL_GPIO_Init+0x204>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <HAL_GPIO_Init+0x204>
 8004da6:	2300      	movs	r3, #0
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	f002 0203 	and.w	r2, r2, #3
 8004dae:	0092      	lsls	r2, r2, #2
 8004db0:	4093      	lsls	r3, r2
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004db8:	4935      	ldr	r1, [pc, #212]	@ (8004e90 <HAL_GPIO_Init+0x2ec>)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	089b      	lsrs	r3, r3, #2
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dc6:	4b38      	ldr	r3, [pc, #224]	@ (8004ea8 <HAL_GPIO_Init+0x304>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dea:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea8 <HAL_GPIO_Init+0x304>)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004df0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <HAL_GPIO_Init+0x304>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e14:	4a24      	ldr	r2, [pc, #144]	@ (8004ea8 <HAL_GPIO_Init+0x304>)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ea8 <HAL_GPIO_Init+0x304>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea8 <HAL_GPIO_Init+0x304>)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e44:	4b18      	ldr	r3, [pc, #96]	@ (8004ea8 <HAL_GPIO_Init+0x304>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e68:	4a0f      	ldr	r2, [pc, #60]	@ (8004ea8 <HAL_GPIO_Init+0x304>)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3301      	adds	r3, #1
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b0f      	cmp	r3, #15
 8004e78:	f67f aea2 	bls.w	8004bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	3724      	adds	r7, #36	@ 0x24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40013800 	.word	0x40013800
 8004e94:	40020000 	.word	0x40020000
 8004e98:	40020400 	.word	0x40020400
 8004e9c:	40020800 	.word	0x40020800
 8004ea0:	40020c00 	.word	0x40020c00
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40013c00 	.word	0x40013c00

08004eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	807b      	strh	r3, [r7, #2]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ebc:	787b      	ldrb	r3, [r7, #1]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ec2:	887a      	ldrh	r2, [r7, #2]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ec8:	e003      	b.n	8004ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004eca:	887b      	ldrh	r3, [r7, #2]
 8004ecc:	041a      	lsls	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	619a      	str	r2, [r3, #24]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ef0:	887a      	ldrh	r2, [r7, #2]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	041a      	lsls	r2, r3, #16
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	43d9      	mvns	r1, r3
 8004efc:	887b      	ldrh	r3, [r7, #2]
 8004efe:	400b      	ands	r3, r1
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	619a      	str	r2, [r3, #24]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e12b      	b.n	800517e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fd febc 	bl	8002cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	@ 0x24
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f78:	f004 fce6 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 8004f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a81      	ldr	r2, [pc, #516]	@ (8005188 <HAL_I2C_Init+0x274>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d807      	bhi.n	8004f98 <HAL_I2C_Init+0x84>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a80      	ldr	r2, [pc, #512]	@ (800518c <HAL_I2C_Init+0x278>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	bf94      	ite	ls
 8004f90:	2301      	movls	r3, #1
 8004f92:	2300      	movhi	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e006      	b.n	8004fa6 <HAL_I2C_Init+0x92>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a7d      	ldr	r2, [pc, #500]	@ (8005190 <HAL_I2C_Init+0x27c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bf94      	ite	ls
 8004fa0:	2301      	movls	r3, #1
 8004fa2:	2300      	movhi	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e0e7      	b.n	800517e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4a78      	ldr	r2, [pc, #480]	@ (8005194 <HAL_I2C_Init+0x280>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	0c9b      	lsrs	r3, r3, #18
 8004fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8005188 <HAL_I2C_Init+0x274>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d802      	bhi.n	8004fe8 <HAL_I2C_Init+0xd4>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	e009      	b.n	8004ffc <HAL_I2C_Init+0xe8>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	4a69      	ldr	r2, [pc, #420]	@ (8005198 <HAL_I2C_Init+0x284>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	099b      	lsrs	r3, r3, #6
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	430b      	orrs	r3, r1
 8005002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800500e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	495c      	ldr	r1, [pc, #368]	@ (8005188 <HAL_I2C_Init+0x274>)
 8005018:	428b      	cmp	r3, r1
 800501a:	d819      	bhi.n	8005050 <HAL_I2C_Init+0x13c>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1e59      	subs	r1, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fbb1 f3f3 	udiv	r3, r1, r3
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005030:	400b      	ands	r3, r1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_I2C_Init+0x138>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1e59      	subs	r1, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	fbb1 f3f3 	udiv	r3, r1, r3
 8005044:	3301      	adds	r3, #1
 8005046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800504a:	e051      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 800504c:	2304      	movs	r3, #4
 800504e:	e04f      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d111      	bne.n	800507c <HAL_I2C_Init+0x168>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	1e58      	subs	r0, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6859      	ldr	r1, [r3, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	440b      	add	r3, r1
 8005066:	fbb0 f3f3 	udiv	r3, r0, r3
 800506a:	3301      	adds	r3, #1
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e012      	b.n	80050a2 <HAL_I2C_Init+0x18e>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1e58      	subs	r0, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	0099      	lsls	r1, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005092:	3301      	adds	r3, #1
 8005094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Init+0x196>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e022      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10e      	bne.n	80050d0 <HAL_I2C_Init+0x1bc>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1e58      	subs	r0, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	440b      	add	r3, r1
 80050c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80050c4:	3301      	adds	r3, #1
 80050c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ce:	e00f      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1e58      	subs	r0, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	0099      	lsls	r1, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e6:	3301      	adds	r3, #1
 80050e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	6809      	ldr	r1, [r1, #0]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800511e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6911      	ldr	r1, [r2, #16]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68d2      	ldr	r2, [r2, #12]
 800512a:	4311      	orrs	r1, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	430b      	orrs	r3, r1
 8005132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	000186a0 	.word	0x000186a0
 800518c:	001e847f 	.word	0x001e847f
 8005190:	003d08ff 	.word	0x003d08ff
 8005194:	431bde83 	.word	0x431bde83
 8005198:	10624dd3 	.word	0x10624dd3

0800519c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ae:	2b80      	cmp	r3, #128	@ 0x80
 80051b0:	d103      	bne.n	80051ba <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	611a      	str	r2, [r3, #16]
  }
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	461a      	mov	r2, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	817b      	strh	r3, [r7, #10]
 80051da:	460b      	mov	r3, r1
 80051dc:	813b      	strh	r3, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051e2:	f7fe fad1 	bl	8003788 <HAL_GetTick>
 80051e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	f040 80d9 	bne.w	80053a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	2319      	movs	r3, #25
 80051fc:	2201      	movs	r2, #1
 80051fe:	496d      	ldr	r1, [pc, #436]	@ (80053b4 <HAL_I2C_Mem_Write+0x1ec>)
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f002 faf9 	bl	80077f8 <I2C_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
 800520e:	e0cc      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_I2C_Mem_Write+0x56>
 800521a:	2302      	movs	r3, #2
 800521c:	e0c5      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d007      	beq.n	8005244 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2221      	movs	r2, #33	@ 0x21
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2240      	movs	r2, #64	@ 0x40
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005274:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a4d      	ldr	r2, [pc, #308]	@ (80053b8 <HAL_I2C_Mem_Write+0x1f0>)
 8005284:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005286:	88f8      	ldrh	r0, [r7, #6]
 8005288:	893a      	ldrh	r2, [r7, #8]
 800528a:	8979      	ldrh	r1, [r7, #10]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f001 ff6c 	bl	8007174 <I2C_RequestMemoryWrite>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d052      	beq.n	8005348 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e081      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f002 fbbe 	bl	8007a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00d      	beq.n	80052d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d107      	bne.n	80052ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e06b      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d11b      	bne.n	8005348 <HAL_I2C_Mem_Write+0x180>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d017      	beq.n	8005348 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1aa      	bne.n	80052a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f002 fbb1 	bl	8007abc <I2C_WaitOnBTFFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	2b04      	cmp	r3, #4
 8005366:	d107      	bne.n	8005378 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005376:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e016      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800538a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	00100002 	.word	0x00100002
 80053b8:	ffff0000 	.word	0xffff0000

080053bc <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	@ 0x28
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	4608      	mov	r0, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	461a      	mov	r2, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	817b      	strh	r3, [r7, #10]
 80053ce:	460b      	mov	r3, r1
 80053d0:	813b      	strh	r3, [r7, #8]
 80053d2:	4613      	mov	r3, r2
 80053d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053da:	f7fe f9d5 	bl	8003788 <HAL_GetTick>
 80053de:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	f040 8136 	bne.w	800565a <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053ee:	4b9d      	ldr	r3, [pc, #628]	@ (8005664 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	08db      	lsrs	r3, r3, #3
 80053f4:	4a9c      	ldr	r2, [pc, #624]	@ (8005668 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	0a1a      	lsrs	r2, r3, #8
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	009a      	lsls	r2, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	3b01      	subs	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d112      	bne.n	800543a <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
 8005438:	e110      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d0df      	beq.n	8005408 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_I2C_Mem_Write_DMA+0x9a>
 8005452:	2302      	movs	r3, #2
 8005454:	e102      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x2a0>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d007      	beq.n	800547c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800548a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2221      	movs	r2, #33	@ 0x21
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2240      	movs	r2, #64	@ 0x40
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80054ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a6c      	ldr	r2, [pc, #432]	@ (800566c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80054bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80054be:	897a      	ldrh	r2, [r7, #10]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80054c4:	893a      	ldrh	r2, [r7, #8]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80a9 	beq.w	8005632 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02a      	beq.n	800553e <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ec:	4a60      	ldr	r2, [pc, #384]	@ (8005670 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80054ee:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f4:	4a5f      	ldr	r2, [pc, #380]	@ (8005674 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80054f6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fc:	2200      	movs	r2, #0
 80054fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005504:	2200      	movs	r2, #0
 8005506:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550c:	2200      	movs	r2, #0
 800550e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005514:	2200      	movs	r2, #0
 8005516:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	4619      	mov	r1, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3310      	adds	r3, #16
 8005528:	461a      	mov	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552e:	f7ff f83b 	bl	80045a8 <HAL_DMA_Start_IT>
 8005532:	4603      	mov	r3, r0
 8005534:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005536:	7efb      	ldrb	r3, [r7, #27]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d166      	bne.n	800560a <HAL_I2C_Mem_Write_DMA+0x24e>
 800553c:	e013      	b.n	8005566 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e07a      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005566:	88f8      	ldrh	r0, [r7, #6]
 8005568:	893a      	ldrh	r2, [r7, #8]
 800556a:	8979      	ldrh	r1, [r7, #10]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	2323      	movs	r3, #35	@ 0x23
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	4603      	mov	r3, r0
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f001 fdfc 	bl	8007174 <I2C_RequestMemoryWrite>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d022      	beq.n	80055c8 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff f866 	bl	8004658 <HAL_DMA_Abort_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005594:	2200      	movs	r2, #0
 8005596:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e049      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005604:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e028      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	f043 0210 	orr.w	r2, r3, #16
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e014      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800565a:	2302      	movs	r3, #2
  }
}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000030 	.word	0x20000030
 8005668:	14f8b589 	.word	0x14f8b589
 800566c:	ffff0000 	.word	0xffff0000
 8005670:	08007471 	.word	0x08007471
 8005674:	0800762f 	.word	0x0800762f

08005678 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	@ 0x30
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	4603      	mov	r3, r0
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	460b      	mov	r3, r1
 800568c:	813b      	strh	r3, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005692:	f7fe f879 	bl	8003788 <HAL_GetTick>
 8005696:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	f040 8172 	bne.w	800598e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056aa:	4b93      	ldr	r3, [pc, #588]	@ (80058f8 <HAL_I2C_Mem_Read_DMA+0x280>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	4a92      	ldr	r2, [pc, #584]	@ (80058fc <HAL_I2C_Mem_Read_DMA+0x284>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	0a1a      	lsrs	r2, r3, #8
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009a      	lsls	r2, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d112      	bne.n	80056f6 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	f043 0220 	orr.w	r2, r3, #32
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e14c      	b.n	8005990 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b02      	cmp	r3, #2
 8005702:	d0df      	beq.n	80056c4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_I2C_Mem_Read_DMA+0x9a>
 800570e:	2302      	movs	r3, #2
 8005710:	e13e      	b.n	8005990 <HAL_I2C_Mem_Read_DMA+0x318>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d007      	beq.n	8005738 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2222      	movs	r2, #34	@ 0x22
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2240      	movs	r2, #64	@ 0x40
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005762:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a62      	ldr	r2, [pc, #392]	@ (8005900 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800577a:	897a      	ldrh	r2, [r7, #10]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005780:	893a      	ldrh	r2, [r7, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80cc 	beq.w	8005934 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02d      	beq.n	8005800 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	4a56      	ldr	r2, [pc, #344]	@ (8005904 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80057aa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	4a55      	ldr	r2, [pc, #340]	@ (8005908 <HAL_I2C_Mem_Read_DMA+0x290>)
 80057b2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	2200      	movs	r2, #0
 80057ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	2200      	movs	r2, #0
 80057c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c8:	2200      	movs	r2, #0
 80057ca:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d0:	2200      	movs	r2, #0
 80057d2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3310      	adds	r3, #16
 80057de:	4619      	mov	r1, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	461a      	mov	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ea:	f7fe fedd 	bl	80045a8 <HAL_DMA_Start_IT>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80057f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f040 8087 	bne.w	800590c <HAL_I2C_Mem_Read_DMA+0x294>
 80057fe:	e013      	b.n	8005828 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0b3      	b.n	8005990 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005828:	88f8      	ldrh	r0, [r7, #6]
 800582a:	893a      	ldrh	r2, [r7, #8]
 800582c:	8979      	ldrh	r1, [r7, #10]
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	2323      	movs	r3, #35	@ 0x23
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	4603      	mov	r3, r0
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f001 fd31 	bl	80072a0 <I2C_RequestMemoryRead>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d023      	beq.n	800588c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe ff05 	bl	8004658 <HAL_DMA_Abort_IT>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005858:	2200      	movs	r2, #0
 800585a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800586a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e081      	b.n	8005990 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005890:	2b01      	cmp	r3, #1
 8005892:	d108      	bne.n	80058a6 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e007      	b.n	80058b6 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058e2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058f2:	605a      	str	r2, [r3, #4]
 80058f4:	e049      	b.n	800598a <HAL_I2C_Mem_Read_DMA+0x312>
 80058f6:	bf00      	nop
 80058f8:	20000030 	.word	0x20000030
 80058fc:	14f8b589 	.word	0x14f8b589
 8005900:	ffff0000 	.word	0xffff0000
 8005904:	08007471 	.word	0x08007471
 8005908:	0800762f 	.word	0x0800762f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	f043 0210 	orr.w	r2, r3, #16
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e02d      	b.n	8005990 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005934:	88f8      	ldrh	r0, [r7, #6]
 8005936:	893a      	ldrh	r2, [r7, #8]
 8005938:	8979      	ldrh	r1, [r7, #10]
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	2323      	movs	r3, #35	@ 0x23
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4603      	mov	r3, r0
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f001 fcab 	bl	80072a0 <I2C_RequestMemoryRead>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e01d      	b.n	8005990 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005978:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e000      	b.n	8005990 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	3728      	adds	r7, #40	@ 0x28
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d003      	beq.n	80059d0 <HAL_I2C_EV_IRQHandler+0x38>
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	f040 80c1 	bne.w	8005b52 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10d      	bne.n	8005a06 <HAL_I2C_EV_IRQHandler+0x6e>
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80059f0:	d003      	beq.n	80059fa <HAL_I2C_EV_IRQHandler+0x62>
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80059f8:	d101      	bne.n	80059fe <HAL_I2C_EV_IRQHandler+0x66>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_I2C_EV_IRQHandler+0x68>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f000 8132 	beq.w	8005c6a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <HAL_I2C_EV_IRQHandler+0x92>
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	0a5b      	lsrs	r3, r3, #9
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d006      	beq.n	8005a2a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f002 f8f6 	bl	8007c0e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fd87 	bl	8006536 <I2C_Master_SB>
 8005a28:	e092      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	08db      	lsrs	r3, r3, #3
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <HAL_I2C_EV_IRQHandler+0xb2>
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	0a5b      	lsrs	r3, r3, #9
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fdfd 	bl	8006642 <I2C_Master_ADD10>
 8005a48:	e082      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <HAL_I2C_EV_IRQHandler+0xd2>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	0a5b      	lsrs	r3, r3, #9
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fe17 	bl	8006696 <I2C_Master_ADDR>
 8005a68:	e072      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	089b      	lsrs	r3, r3, #2
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d03b      	beq.n	8005aee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a84:	f000 80f3 	beq.w	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	09db      	lsrs	r3, r3, #7
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00f      	beq.n	8005ab4 <HAL_I2C_EV_IRQHandler+0x11c>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	0a9b      	lsrs	r3, r3, #10
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d009      	beq.n	8005ab4 <HAL_I2C_EV_IRQHandler+0x11c>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	089b      	lsrs	r3, r3, #2
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d103      	bne.n	8005ab4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f9df 	bl	8005e70 <I2C_MasterTransmit_TXE>
 8005ab2:	e04d      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80d6 	beq.w	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	0a5b      	lsrs	r3, r3, #9
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80cf 	beq.w	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	2b21      	cmp	r3, #33	@ 0x21
 8005ad4:	d103      	bne.n	8005ade <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa66 	bl	8005fa8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005adc:	e0c7      	b.n	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	2b40      	cmp	r3, #64	@ 0x40
 8005ae2:	f040 80c4 	bne.w	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fad4 	bl	8006094 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aec:	e0bf      	b.n	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005afc:	f000 80b7 	beq.w	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00f      	beq.n	8005b2c <HAL_I2C_EV_IRQHandler+0x194>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	0a9b      	lsrs	r3, r3, #10
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d009      	beq.n	8005b2c <HAL_I2C_EV_IRQHandler+0x194>
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb4d 	bl	80061c4 <I2C_MasterReceive_RXNE>
 8005b2a:	e011      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 809a 	beq.w	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	0a5b      	lsrs	r3, r3, #9
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8093 	beq.w	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fc03 	bl	8006354 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b4e:	e08e      	b.n	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b50:	e08d      	b.n	8005c6e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d004      	beq.n	8005b64 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	e007      	b.n	8005b74 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d012      	beq.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x20e>
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	0a5b      	lsrs	r3, r3, #9
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 ffc8 	bl	8006b34 <I2C_Slave_ADDR>
 8005ba4:	e066      	b.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	091b      	lsrs	r3, r3, #4
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x22e>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	0a5b      	lsrs	r3, r3, #9
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 f802 	bl	8006bc8 <I2C_Slave_STOPF>
 8005bc4:	e056      	b.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	2b21      	cmp	r3, #33	@ 0x21
 8005bca:	d002      	beq.n	8005bd2 <HAL_I2C_EV_IRQHandler+0x23a>
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	2b29      	cmp	r3, #41	@ 0x29
 8005bd0:	d125      	bne.n	8005c1e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	09db      	lsrs	r3, r3, #7
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00f      	beq.n	8005bfe <HAL_I2C_EV_IRQHandler+0x266>
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	0a9b      	lsrs	r3, r3, #10
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_I2C_EV_IRQHandler+0x266>
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	089b      	lsrs	r3, r3, #2
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d103      	bne.n	8005bfe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fede 	bl	80069b8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bfc:	e039      	b.n	8005c72 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	089b      	lsrs	r3, r3, #2
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d033      	beq.n	8005c72 <HAL_I2C_EV_IRQHandler+0x2da>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	0a5b      	lsrs	r3, r3, #9
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02d      	beq.n	8005c72 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 ff0b 	bl	8006a32 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c1c:	e029      	b.n	8005c72 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	099b      	lsrs	r3, r3, #6
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00f      	beq.n	8005c4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	0a9b      	lsrs	r3, r3, #10
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	089b      	lsrs	r3, r3, #2
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 ff16 	bl	8006a74 <I2C_SlaveReceive_RXNE>
 8005c48:	e014      	b.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	089b      	lsrs	r3, r3, #2
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	0a5b      	lsrs	r3, r3, #9
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 ff44 	bl	8006af0 <I2C_SlaveReceive_BTF>
 8005c68:	e004      	b.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c72:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b08a      	sub	sp, #40	@ 0x28
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c9c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_I2C_ER_IRQHandler+0x4e>
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	0a1b      	lsrs	r3, r3, #8
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cc6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	0a5b      	lsrs	r3, r3, #9
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_I2C_ER_IRQHandler+0x78>
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	f043 0302 	orr.w	r3, r3, #2
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005cf0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	0a9b      	lsrs	r3, r3, #10
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d03f      	beq.n	8005d7e <HAL_I2C_ER_IRQHandler+0x104>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d039      	beq.n	8005d7e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005d0a:	7efb      	ldrb	r3, [r7, #27]
 8005d0c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d1c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d22:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005d24:	7ebb      	ldrb	r3, [r7, #26]
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d112      	bne.n	8005d50 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10f      	bne.n	8005d50 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
 8005d32:	2b21      	cmp	r3, #33	@ 0x21
 8005d34:	d008      	beq.n	8005d48 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	2b29      	cmp	r3, #41	@ 0x29
 8005d3a:	d005      	beq.n	8005d48 <HAL_I2C_ER_IRQHandler+0xce>
 8005d3c:	7cfb      	ldrb	r3, [r7, #19]
 8005d3e:	2b28      	cmp	r3, #40	@ 0x28
 8005d40:	d106      	bne.n	8005d50 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b21      	cmp	r3, #33	@ 0x21
 8005d46:	d103      	bne.n	8005d50 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f001 f86d 	bl	8006e28 <I2C_Slave_AF>
 8005d4e:	e016      	b.n	8005d7e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d58:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	f043 0304 	orr.w	r3, r3, #4
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d62:	7efb      	ldrb	r3, [r7, #27]
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d002      	beq.n	8005d6e <HAL_I2C_ER_IRQHandler+0xf4>
 8005d68:	7efb      	ldrb	r3, [r7, #27]
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d107      	bne.n	8005d7e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d7c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	0adb      	lsrs	r3, r3, #11
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00e      	beq.n	8005da8 <HAL_I2C_ER_IRQHandler+0x12e>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	0a1b      	lsrs	r3, r3, #8
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	f043 0308 	orr.w	r3, r3, #8
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005da6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 f8a8 	bl	8006f10 <I2C_ITError>
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	3728      	adds	r7, #40	@ 0x28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
 8005e24:	4613      	mov	r3, r2
 8005e26:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e7e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e86:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d150      	bne.n	8005f38 <I2C_MasterTransmit_TXE+0xc8>
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b21      	cmp	r3, #33	@ 0x21
 8005e9a:	d14d      	bne.n	8005f38 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d01d      	beq.n	8005ede <I2C_MasterTransmit_TXE+0x6e>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d01a      	beq.n	8005ede <I2C_MasterTransmit_TXE+0x6e>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005eae:	d016      	beq.n	8005ede <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ebe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2211      	movs	r2, #17
 8005ec4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ff76 	bl	8005dc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005edc:	e060      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005eec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005efc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	d107      	bne.n	8005f28 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fa ff59 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f26:	e03b      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ff49 	bl	8005dc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f36:	e033      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2b21      	cmp	r3, #33	@ 0x21
 8005f3c:	d005      	beq.n	8005f4a <I2C_MasterTransmit_TXE+0xda>
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	2b40      	cmp	r3, #64	@ 0x40
 8005f42:	d12d      	bne.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b22      	cmp	r3, #34	@ 0x22
 8005f48:	d12a      	bne.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d108      	bne.n	8005f66 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f62:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005f64:	e01c      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b40      	cmp	r3, #64	@ 0x40
 8005f70:	d103      	bne.n	8005f7a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f88e 	bl	8006094 <I2C_MemoryTransmit_TXE_BTF>
}
 8005f78:	e012      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f9e:	e7ff      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b21      	cmp	r3, #33	@ 0x21
 8005fc0:	d164      	bne.n	800608c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005ff0:	e04c      	b.n	800608c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d01d      	beq.n	8006034 <I2C_MasterTransmit_BTF+0x8c>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d01a      	beq.n	8006034 <I2C_MasterTransmit_BTF+0x8c>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006004:	d016      	beq.n	8006034 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006014:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2211      	movs	r2, #17
 800601a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff fecb 	bl	8005dc8 <HAL_I2C_MasterTxCpltCallback>
}
 8006032:	e02b      	b.n	800608c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006042:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006052:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b40      	cmp	r3, #64	@ 0x40
 800606c:	d107      	bne.n	800607e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fa feae 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 800607c:	e006      	b.n	800608c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fe9e 	bl	8005dc8 <HAL_I2C_MasterTxCpltCallback>
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d11d      	bne.n	80060e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d10b      	bne.n	80060cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c4:	1c9a      	adds	r2, r3, #2
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80060ca:	e077      	b.n	80061bc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	121b      	asrs	r3, r3, #8
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060e6:	e069      	b.n	80061bc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10b      	bne.n	8006108 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006106:	e059      	b.n	80061bc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610c:	2b02      	cmp	r3, #2
 800610e:	d152      	bne.n	80061b6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b22      	cmp	r3, #34	@ 0x22
 8006114:	d10d      	bne.n	8006132 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006124:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006130:	e044      	b.n	80061bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b21      	cmp	r3, #33	@ 0x21
 8006140:	d112      	bne.n	8006168 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006166:	e029      	b.n	80061bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d124      	bne.n	80061bc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	2b21      	cmp	r3, #33	@ 0x21
 8006176:	d121      	bne.n	80061bc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006186:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006196:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fa fe12 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 80061b4:	e002      	b.n	80061bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fe fff0 	bl	800519c <I2C_Flush_DR>
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b22      	cmp	r3, #34	@ 0x22
 80061d6:	f040 80b9 	bne.w	800634c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d921      	bls.n	8006232 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b03      	cmp	r3, #3
 800621c:	f040 8096 	bne.w	800634c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800622e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006230:	e08c      	b.n	800634c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	2b02      	cmp	r3, #2
 8006238:	d07f      	beq.n	800633a <I2C_MasterReceive_RXNE+0x176>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d002      	beq.n	8006246 <I2C_MasterReceive_RXNE+0x82>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d179      	bne.n	800633a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fc80 	bl	8007b4c <I2C_WaitOnSTOPRequestThroughIT>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d14c      	bne.n	80062ec <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006260:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006270:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b40      	cmp	r3, #64	@ 0x40
 80062aa:	d10a      	bne.n	80062c2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fa fd9c 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062c0:	e044      	b.n	800634c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d002      	beq.n	80062d6 <I2C_MasterReceive_RXNE+0x112>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d103      	bne.n	80062de <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	@ 0x30
 80062dc:	e002      	b.n	80062e4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2212      	movs	r2, #18
 80062e2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fd79 	bl	8005ddc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062ea:	e02f      	b.n	800634c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fd88 	bl	8005e48 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006338:	e008      	b.n	800634c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006348:	605a      	str	r2, [r3, #4]
}
 800634a:	e7ff      	b.n	800634c <I2C_MasterReceive_RXNE+0x188>
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b04      	cmp	r3, #4
 800636a:	d11b      	bne.n	80063a4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800637a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063a2:	e0c4      	b.n	800652e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d129      	bne.n	8006402 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d00a      	beq.n	80063da <I2C_MasterReceive_BTF+0x86>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d007      	beq.n	80063da <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006400:	e095      	b.n	800652e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d17d      	bne.n	8006508 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d002      	beq.n	8006418 <I2C_MasterReceive_BTF+0xc4>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b10      	cmp	r3, #16
 8006416:	d108      	bne.n	800642a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	e016      	b.n	8006458 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d002      	beq.n	8006436 <I2C_MasterReceive_BTF+0xe2>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d108      	bne.n	8006448 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e007      	b.n	8006458 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006456:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b40      	cmp	r3, #64	@ 0x40
 80064c6:	d10a      	bne.n	80064de <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fa fc8e 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 80064dc:	e027      	b.n	800652e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d002      	beq.n	80064f2 <I2C_MasterReceive_BTF+0x19e>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d103      	bne.n	80064fa <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80064f8:	e002      	b.n	8006500 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2212      	movs	r2, #18
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff fc6b 	bl	8005ddc <HAL_I2C_MasterRxCpltCallback>
}
 8006506:	e012      	b.n	800652e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b40      	cmp	r3, #64	@ 0x40
 8006548:	d117      	bne.n	800657a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006556:	b2db      	uxtb	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006562:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006564:	e067      	b.n	8006636 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	b2da      	uxtb	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	611a      	str	r2, [r3, #16]
}
 8006578:	e05d      	b.n	8006636 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006582:	d133      	bne.n	80065ec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b21      	cmp	r3, #33	@ 0x21
 800658e:	d109      	bne.n	80065a4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065a0:	611a      	str	r2, [r3, #16]
 80065a2:	e008      	b.n	80065b6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	f043 0301 	orr.w	r3, r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <I2C_Master_SB+0x92>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d108      	bne.n	80065da <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d032      	beq.n	8006636 <I2C_Master_SB+0x100>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d02d      	beq.n	8006636 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065e8:	605a      	str	r2, [r3, #4]
}
 80065ea:	e024      	b.n	8006636 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10e      	bne.n	8006612 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	11db      	asrs	r3, r3, #7
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f063 030f 	orn	r3, r3, #15
 8006608:	b2da      	uxtb	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	611a      	str	r2, [r3, #16]
}
 8006610:	e011      	b.n	8006636 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006616:	2b01      	cmp	r3, #1
 8006618:	d10d      	bne.n	8006636 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	b29b      	uxth	r3, r3
 8006620:	11db      	asrs	r3, r3, #7
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0306 	and.w	r3, r3, #6
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f063 030e 	orn	r3, r3, #14
 800662e:	b2da      	uxtb	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	611a      	str	r2, [r3, #16]
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664e:	b2da      	uxtb	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <I2C_Master_ADD10+0x26>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d108      	bne.n	800667a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00c      	beq.n	800668a <I2C_Master_ADD10+0x48>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006688:	605a      	str	r2, [r3, #4]
  }
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006696:	b480      	push	{r7}
 8006698:	b091      	sub	sp, #68	@ 0x44
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b22      	cmp	r3, #34	@ 0x22
 80066be:	f040 8169 	bne.w	8006994 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10f      	bne.n	80066ea <I2C_Master_ADDR+0x54>
 80066ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80066ce:	2b40      	cmp	r3, #64	@ 0x40
 80066d0:	d10b      	bne.n	80066ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d2:	2300      	movs	r3, #0
 80066d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	e160      	b.n	80069ac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d11d      	bne.n	800672e <I2C_Master_ADDR+0x98>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80066fa:	d118      	bne.n	800672e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fc:	2300      	movs	r3, #0
 80066fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006720:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	651a      	str	r2, [r3, #80]	@ 0x50
 800672c:	e13e      	b.n	80069ac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d113      	bne.n	8006760 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006738:	2300      	movs	r3, #0
 800673a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e115      	b.n	800698c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b01      	cmp	r3, #1
 8006768:	f040 808a 	bne.w	8006880 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800676c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006772:	d137      	bne.n	80067e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006782:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800678e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006792:	d113      	bne.n	80067bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	e0e7      	b.n	800698c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067bc:	2300      	movs	r3, #0
 80067be:	623b      	str	r3, [r7, #32]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	623b      	str	r3, [r7, #32]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	e0d3      	b.n	800698c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d02e      	beq.n	8006848 <I2C_Master_ADDR+0x1b2>
 80067ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d02b      	beq.n	8006848 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80067f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f2:	2b12      	cmp	r3, #18
 80067f4:	d102      	bne.n	80067fc <I2C_Master_ADDR+0x166>
 80067f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d125      	bne.n	8006848 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00e      	beq.n	8006820 <I2C_Master_ADDR+0x18a>
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	2b02      	cmp	r3, #2
 8006806:	d00b      	beq.n	8006820 <I2C_Master_ADDR+0x18a>
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	2b10      	cmp	r3, #16
 800680c:	d008      	beq.n	8006820 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e007      	b.n	8006830 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800682e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	e0a1      	b.n	800698c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006856:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e085      	b.n	800698c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d14d      	bne.n	8006926 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688c:	2b04      	cmp	r3, #4
 800688e:	d016      	beq.n	80068be <I2C_Master_ADDR+0x228>
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	2b02      	cmp	r3, #2
 8006894:	d013      	beq.n	80068be <I2C_Master_ADDR+0x228>
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	2b10      	cmp	r3, #16
 800689a:	d010      	beq.n	80068be <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068aa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	e007      	b.n	80068ce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068cc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068dc:	d117      	bne.n	800690e <I2C_Master_ADDR+0x278>
 80068de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068e4:	d00b      	beq.n	80068fe <I2C_Master_ADDR+0x268>
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d008      	beq.n	80068fe <I2C_Master_ADDR+0x268>
 80068ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d005      	beq.n	80068fe <I2C_Master_ADDR+0x268>
 80068f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d002      	beq.n	80068fe <I2C_Master_ADDR+0x268>
 80068f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d107      	bne.n	800690e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800690c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	e032      	b.n	800698c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006934:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006944:	d117      	bne.n	8006976 <I2C_Master_ADDR+0x2e0>
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800694c:	d00b      	beq.n	8006966 <I2C_Master_ADDR+0x2d0>
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	2b01      	cmp	r3, #1
 8006952:	d008      	beq.n	8006966 <I2C_Master_ADDR+0x2d0>
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	2b08      	cmp	r3, #8
 8006958:	d005      	beq.n	8006966 <I2C_Master_ADDR+0x2d0>
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	2b10      	cmp	r3, #16
 800695e:	d002      	beq.n	8006966 <I2C_Master_ADDR+0x2d0>
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	2b20      	cmp	r3, #32
 8006964:	d107      	bne.n	8006976 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006974:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006976:	2300      	movs	r3, #0
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006992:	e00b      	b.n	80069ac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
}
 80069aa:	e7ff      	b.n	80069ac <I2C_Master_ADDR+0x316>
 80069ac:	bf00      	nop
 80069ae:	3744      	adds	r7, #68	@ 0x44
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d02b      	beq.n	8006a2a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	781a      	ldrb	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d114      	bne.n	8006a2a <I2C_SlaveTransmit_TXE+0x72>
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b29      	cmp	r3, #41	@ 0x29
 8006a04:	d111      	bne.n	8006a2a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a14:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2221      	movs	r2, #33	@ 0x21
 8006a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2228      	movs	r2, #40	@ 0x28
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff f9e3 	bl	8005df0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a2a:	bf00      	nop
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d011      	beq.n	8006a68 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d02c      	beq.n	8006ae8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d114      	bne.n	8006ae8 <I2C_SlaveReceive_RXNE+0x74>
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ac2:	d111      	bne.n	8006ae8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ad2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2222      	movs	r2, #34	@ 0x22
 8006ad8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2228      	movs	r2, #40	@ 0x28
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff f98e 	bl	8005e04 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d012      	beq.n	8006b28 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b4e:	2b28      	cmp	r3, #40	@ 0x28
 8006b50:	d127      	bne.n	8006ba2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b60:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	089b      	lsrs	r3, r3, #2
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	09db      	lsrs	r3, r3, #7
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	81bb      	strh	r3, [r7, #12]
 8006b84:	e002      	b.n	8006b8c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006b94:	89ba      	ldrh	r2, [r7, #12]
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff f93c 	bl	8005e18 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ba0:	e00e      	b.n	8006bc0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	60bb      	str	r3, [r7, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bd6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006be6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006be8:	2300      	movs	r3, #0
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c24:	d172      	bne.n	8006d0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	2b22      	cmp	r3, #34	@ 0x22
 8006c2a:	d002      	beq.n	8006c32 <I2C_Slave_STOPF+0x6a>
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c30:	d135      	bne.n	8006c9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	f043 0204 	orr.w	r2, r3, #4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fd fea0 	bl	80049b0 <HAL_DMA_GetState>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d049      	beq.n	8006d0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	4a69      	ldr	r2, [pc, #420]	@ (8006e20 <I2C_Slave_STOPF+0x258>)
 8006c7c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd fce8 	bl	8004658 <HAL_DMA_Abort_IT>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d03d      	beq.n	8006d0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c9c:	e035      	b.n	8006d0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cba:	f043 0204 	orr.w	r2, r3, #4
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fd fe6a 	bl	80049b0 <HAL_DMA_GetState>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d014      	beq.n	8006d0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8006e20 <I2C_Slave_STOPF+0x258>)
 8006ce8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fd fcb2 	bl	8004658 <HAL_DMA_Abort_IT>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	e000      	b.n	8006d0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d03e      	beq.n	8006d94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d112      	bne.n	8006d4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d54:	2b40      	cmp	r3, #64	@ 0x40
 8006d56:	d112      	bne.n	8006d7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8c:	f043 0204 	orr.w	r2, r3, #4
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8b7 	bl	8006f10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006da2:	e039      	b.n	8006e18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006da8:	d109      	bne.n	8006dbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2228      	movs	r2, #40	@ 0x28
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff f823 	bl	8005e04 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b28      	cmp	r3, #40	@ 0x28
 8006dc8:	d111      	bne.n	8006dee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	@ (8006e24 <I2C_Slave_STOPF+0x25c>)
 8006dce:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff f824 	bl	8005e34 <HAL_I2C_ListenCpltCallback>
}
 8006dec:	e014      	b.n	8006e18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df2:	2b22      	cmp	r3, #34	@ 0x22
 8006df4:	d002      	beq.n	8006dfc <I2C_Slave_STOPF+0x234>
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b22      	cmp	r3, #34	@ 0x22
 8006dfa:	d10d      	bne.n	8006e18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fe fff6 	bl	8005e04 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	080076a9 	.word	0x080076a9
 8006e24:	ffff0000 	.word	0xffff0000

08006e28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d002      	beq.n	8006e4a <I2C_Slave_AF+0x22>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d129      	bne.n	8006e9e <I2C_Slave_AF+0x76>
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	2b28      	cmp	r3, #40	@ 0x28
 8006e4e:	d126      	bne.n	8006e9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a2e      	ldr	r2, [pc, #184]	@ (8006f0c <I2C_Slave_AF+0xe4>)
 8006e54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fe ffcc 	bl	8005e34 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006e9c:	e031      	b.n	8006f02 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b21      	cmp	r3, #33	@ 0x21
 8006ea2:	d129      	bne.n	8006ef8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a19      	ldr	r2, [pc, #100]	@ (8006f0c <I2C_Slave_AF+0xe4>)
 8006ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2221      	movs	r2, #33	@ 0x21
 8006eae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ece:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ed8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fe f956 	bl	800519c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7fe ff7d 	bl	8005df0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ef6:	e004      	b.n	8006f02 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f00:	615a      	str	r2, [r3, #20]
}
 8006f02:	bf00      	nop
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	ffff0000 	.word	0xffff0000

08006f10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	2b10      	cmp	r3, #16
 8006f2c:	d002      	beq.n	8006f34 <I2C_ITError+0x24>
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b40      	cmp	r3, #64	@ 0x40
 8006f32:	d10a      	bne.n	8006f4a <I2C_ITError+0x3a>
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b22      	cmp	r3, #34	@ 0x22
 8006f38:	d107      	bne.n	8006f4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f50:	2b28      	cmp	r3, #40	@ 0x28
 8006f52:	d107      	bne.n	8006f64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2228      	movs	r2, #40	@ 0x28
 8006f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006f62:	e015      	b.n	8006f90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f72:	d00a      	beq.n	8006f8a <I2C_ITError+0x7a>
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	2b60      	cmp	r3, #96	@ 0x60
 8006f78:	d007      	beq.n	8006f8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f9e:	d162      	bne.n	8007066 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d020      	beq.n	8007000 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc2:	4a6a      	ldr	r2, [pc, #424]	@ (800716c <I2C_ITError+0x25c>)
 8006fc4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fd fb44 	bl	8004658 <HAL_DMA_Abort_IT>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8089 	beq.w	80070ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	4798      	blx	r3
 8006ffe:	e074      	b.n	80070ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007004:	4a59      	ldr	r2, [pc, #356]	@ (800716c <I2C_ITError+0x25c>)
 8007006:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700c:	4618      	mov	r0, r3
 800700e:	f7fd fb23 	bl	8004658 <HAL_DMA_Abort_IT>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d068      	beq.n	80070ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b40      	cmp	r3, #64	@ 0x40
 8007024:	d10b      	bne.n	800703e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0201 	bic.w	r2, r2, #1
 800704c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	e041      	b.n	80070ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b60      	cmp	r3, #96	@ 0x60
 8007070:	d125      	bne.n	80070be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708a:	2b40      	cmp	r3, #64	@ 0x40
 800708c:	d10b      	bne.n	80070a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fe fed0 	bl	8005e5c <HAL_I2C_AbortCpltCallback>
 80070bc:	e015      	b.n	80070ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c8:	2b40      	cmp	r3, #64	@ 0x40
 80070ca:	d10b      	bne.n	80070e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fe feaf 	bl	8005e48 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10e      	bne.n	8007118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007100:	2b00      	cmp	r3, #0
 8007102:	d109      	bne.n	8007118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007126:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800712e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b04      	cmp	r3, #4
 800713a:	d113      	bne.n	8007164 <I2C_ITError+0x254>
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b28      	cmp	r3, #40	@ 0x28
 8007140:	d110      	bne.n	8007164 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a0a      	ldr	r2, [pc, #40]	@ (8007170 <I2C_ITError+0x260>)
 8007146:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fe fe68 	bl	8005e34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	080076a9 	.word	0x080076a9
 8007170:	ffff0000 	.word	0xffff0000

08007174 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af02      	add	r7, sp, #8
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	4608      	mov	r0, r1
 800717e:	4611      	mov	r1, r2
 8007180:	461a      	mov	r2, r3
 8007182:	4603      	mov	r3, r0
 8007184:	817b      	strh	r3, [r7, #10]
 8007186:	460b      	mov	r3, r1
 8007188:	813b      	strh	r3, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800719c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 fb24 	bl	80077f8 <I2C_WaitOnFlagUntilTimeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071c4:	d103      	bne.n	80071ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e05f      	b.n	8007292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071d2:	897b      	ldrh	r3, [r7, #10]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	461a      	mov	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80071e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	492d      	ldr	r1, [pc, #180]	@ (800729c <I2C_RequestMemoryWrite+0x128>)
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fb7f 	bl	80078ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e04c      	b.n	8007292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800720e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007210:	6a39      	ldr	r1, [r7, #32]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fc0a 	bl	8007a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00d      	beq.n	800723a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007222:	2b04      	cmp	r3, #4
 8007224:	d107      	bne.n	8007236 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e02b      	b.n	8007292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d105      	bne.n	800724c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007240:	893b      	ldrh	r3, [r7, #8]
 8007242:	b2da      	uxtb	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	611a      	str	r2, [r3, #16]
 800724a:	e021      	b.n	8007290 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800724c:	893b      	ldrh	r3, [r7, #8]
 800724e:	0a1b      	lsrs	r3, r3, #8
 8007250:	b29b      	uxth	r3, r3
 8007252:	b2da      	uxtb	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800725a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800725c:	6a39      	ldr	r1, [r7, #32]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 fbe4 	bl	8007a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00d      	beq.n	8007286 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	2b04      	cmp	r3, #4
 8007270:	d107      	bne.n	8007282 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e005      	b.n	8007292 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007286:	893b      	ldrh	r3, [r7, #8]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	00010002 	.word	0x00010002

080072a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	817b      	strh	r3, [r7, #10]
 80072b2:	460b      	mov	r3, r1
 80072b4:	813b      	strh	r3, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fa86 	bl	80077f8 <I2C_WaitOnFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00d      	beq.n	800730e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007300:	d103      	bne.n	800730a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007308:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e0aa      	b.n	8007464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800730e:	897b      	ldrh	r3, [r7, #10]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800731c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	6a3a      	ldr	r2, [r7, #32]
 8007322:	4952      	ldr	r1, [pc, #328]	@ (800746c <I2C_RequestMemoryRead+0x1cc>)
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fae1 	bl	80078ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e097      	b.n	8007464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800734a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734c:	6a39      	ldr	r1, [r7, #32]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fb6c 	bl	8007a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00d      	beq.n	8007376 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735e:	2b04      	cmp	r3, #4
 8007360:	d107      	bne.n	8007372 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e076      	b.n	8007464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d105      	bne.n	8007388 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800737c:	893b      	ldrh	r3, [r7, #8]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	611a      	str	r2, [r3, #16]
 8007386:	e021      	b.n	80073cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007388:	893b      	ldrh	r3, [r7, #8]
 800738a:	0a1b      	lsrs	r3, r3, #8
 800738c:	b29b      	uxth	r3, r3
 800738e:	b2da      	uxtb	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007398:	6a39      	ldr	r1, [r7, #32]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fb46 	bl	8007a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d107      	bne.n	80073be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e050      	b.n	8007464 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073c2:	893b      	ldrh	r3, [r7, #8]
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ce:	6a39      	ldr	r1, [r7, #32]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fb2b 	bl	8007a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00d      	beq.n	80073f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d107      	bne.n	80073f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e035      	b.n	8007464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007406:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	2200      	movs	r2, #0
 8007410:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f9ef 	bl	80077f8 <I2C_WaitOnFlagUntilTimeout>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00d      	beq.n	800743c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800742a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800742e:	d103      	bne.n	8007438 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007436:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e013      	b.n	8007464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800743c:	897b      	ldrh	r3, [r7, #10]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f043 0301 	orr.w	r3, r3, #1
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	6a3a      	ldr	r2, [r7, #32]
 8007450:	4906      	ldr	r1, [pc, #24]	@ (800746c <I2C_RequestMemoryRead+0x1cc>)
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fa4a 	bl	80078ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	00010002 	.word	0x00010002

08007470 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007484:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800748c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80074a2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b0:	2200      	movs	r2, #0
 80074b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	2200      	movs	r2, #0
 80074c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80074c4:	7cfb      	ldrb	r3, [r7, #19]
 80074c6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80074ca:	2b21      	cmp	r3, #33	@ 0x21
 80074cc:	d007      	beq.n	80074de <I2C_DMAXferCplt+0x6e>
 80074ce:	7cfb      	ldrb	r3, [r7, #19]
 80074d0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80074d4:	2b22      	cmp	r3, #34	@ 0x22
 80074d6:	d131      	bne.n	800753c <I2C_DMAXferCplt+0xcc>
 80074d8:	7cbb      	ldrb	r3, [r7, #18]
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d12e      	bne.n	800753c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074ec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2200      	movs	r2, #0
 80074f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80074f4:	7cfb      	ldrb	r3, [r7, #19]
 80074f6:	2b29      	cmp	r3, #41	@ 0x29
 80074f8:	d10a      	bne.n	8007510 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2221      	movs	r2, #33	@ 0x21
 80074fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2228      	movs	r2, #40	@ 0x28
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007508:	6978      	ldr	r0, [r7, #20]
 800750a:	f7fe fc71 	bl	8005df0 <HAL_I2C_SlaveTxCpltCallback>
 800750e:	e00c      	b.n	800752a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007510:	7cfb      	ldrb	r3, [r7, #19]
 8007512:	2b2a      	cmp	r3, #42	@ 0x2a
 8007514:	d109      	bne.n	800752a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2222      	movs	r2, #34	@ 0x22
 800751a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2228      	movs	r2, #40	@ 0x28
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007524:	6978      	ldr	r0, [r7, #20]
 8007526:	f7fe fc6d 	bl	8005e04 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007538:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800753a:	e074      	b.n	8007626 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d06e      	beq.n	8007626 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b01      	cmp	r3, #1
 8007550:	d107      	bne.n	8007562 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007560:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007570:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007578:	d009      	beq.n	800758e <I2C_DMAXferCplt+0x11e>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b08      	cmp	r3, #8
 800757e:	d006      	beq.n	800758e <I2C_DMAXferCplt+0x11e>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007586:	d002      	beq.n	800758e <I2C_DMAXferCplt+0x11e>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b20      	cmp	r3, #32
 800758c:	d107      	bne.n	800759e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800759c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075ac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075bc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2200      	movs	r2, #0
 80075c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80075cc:	6978      	ldr	r0, [r7, #20]
 80075ce:	f7fe fc3b 	bl	8005e48 <HAL_I2C_ErrorCallback>
}
 80075d2:	e028      	b.n	8007626 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b40      	cmp	r3, #64	@ 0x40
 80075e6:	d10a      	bne.n	80075fe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2200      	movs	r2, #0
 80075f4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80075f6:	6978      	ldr	r0, [r7, #20]
 80075f8:	f7f9 fbfe 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 80075fc:	e013      	b.n	8007626 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b08      	cmp	r3, #8
 800760a:	d002      	beq.n	8007612 <I2C_DMAXferCplt+0x1a2>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b20      	cmp	r3, #32
 8007610:	d103      	bne.n	800761a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2200      	movs	r2, #0
 8007616:	631a      	str	r2, [r3, #48]	@ 0x30
 8007618:	e002      	b.n	8007620 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2212      	movs	r2, #18
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007620:	6978      	ldr	r0, [r7, #20]
 8007622:	f7fe fbdb 	bl	8005ddc <HAL_I2C_MasterRxCpltCallback>
}
 8007626:	bf00      	nop
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007648:	2200      	movs	r2, #0
 800764a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	2200      	movs	r2, #0
 800765a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fd f9b5 	bl	80049cc <HAL_DMA_GetError>
 8007662:	4603      	mov	r3, r0
 8007664:	2b02      	cmp	r3, #2
 8007666:	d01b      	beq.n	80076a0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007676:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007692:	f043 0210 	orr.w	r2, r3, #16
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7fe fbd4 	bl	8005e48 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076a0:	bf00      	nop
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076c2:	4b4b      	ldr	r3, [pc, #300]	@ (80077f0 <I2C_DMAAbort+0x148>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	08db      	lsrs	r3, r3, #3
 80076c8:	4a4a      	ldr	r2, [pc, #296]	@ (80077f4 <I2C_DMAAbort+0x14c>)
 80076ca:	fba2 2303 	umull	r2, r3, r2, r3
 80076ce:	0a1a      	lsrs	r2, r3, #8
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	00da      	lsls	r2, r3, #3
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	f043 0220 	orr.w	r2, r3, #32
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80076ee:	e00a      	b.n	8007706 <I2C_DMAAbort+0x5e>
    }
    count--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007704:	d0ea      	beq.n	80076dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007712:	2200      	movs	r2, #0
 8007714:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007722:	2200      	movs	r2, #0
 8007724:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007734:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2200      	movs	r2, #0
 800773a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007748:	2200      	movs	r2, #0
 800774a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007758:	2200      	movs	r2, #0
 800775a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b60      	cmp	r3, #96	@ 0x60
 8007776:	d10e      	bne.n	8007796 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2200      	movs	r2, #0
 800778c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800778e:	6978      	ldr	r0, [r7, #20]
 8007790:	f7fe fb64 	bl	8005e5c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007794:	e027      	b.n	80077e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007796:	7cfb      	ldrb	r3, [r7, #19]
 8007798:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800779c:	2b28      	cmp	r3, #40	@ 0x28
 800779e:	d117      	bne.n	80077d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2200      	movs	r2, #0
 80077c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2228      	movs	r2, #40	@ 0x28
 80077ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80077ce:	e007      	b.n	80077e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80077e0:	6978      	ldr	r0, [r7, #20]
 80077e2:	f7fe fb31 	bl	8005e48 <HAL_I2C_ErrorCallback>
}
 80077e6:	bf00      	nop
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000030 	.word	0x20000030
 80077f4:	14f8b589 	.word	0x14f8b589

080077f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4613      	mov	r3, r2
 8007806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007808:	e048      	b.n	800789c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d044      	beq.n	800789c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007812:	f7fb ffb9 	bl	8003788 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d302      	bcc.n	8007828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d139      	bne.n	800789c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	0c1b      	lsrs	r3, r3, #16
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b01      	cmp	r3, #1
 8007830:	d10d      	bne.n	800784e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	43da      	mvns	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	4013      	ands	r3, r2
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	461a      	mov	r2, r3
 800784c:	e00c      	b.n	8007868 <I2C_WaitOnFlagUntilTimeout+0x70>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	43da      	mvns	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4013      	ands	r3, r2
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	429a      	cmp	r2, r3
 800786c:	d116      	bne.n	800789c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007888:	f043 0220 	orr.w	r2, r3, #32
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e023      	b.n	80078e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d10d      	bne.n	80078c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	43da      	mvns	r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4013      	ands	r3, r2
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	e00c      	b.n	80078dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	43da      	mvns	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4013      	ands	r3, r2
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	bf0c      	ite	eq
 80078d4:	2301      	moveq	r3, #1
 80078d6:	2300      	movne	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d093      	beq.n	800780a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078fa:	e071      	b.n	80079e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800790a:	d123      	bne.n	8007954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800791a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007940:	f043 0204 	orr.w	r2, r3, #4
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e067      	b.n	8007a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795a:	d041      	beq.n	80079e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795c:	f7fb ff14 	bl	8003788 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	429a      	cmp	r2, r3
 800796a:	d302      	bcc.n	8007972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d136      	bne.n	80079e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	0c1b      	lsrs	r3, r3, #16
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	d10c      	bne.n	8007996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	43da      	mvns	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4013      	ands	r3, r2
 8007988:	b29b      	uxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	bf14      	ite	ne
 800798e:	2301      	movne	r3, #1
 8007990:	2300      	moveq	r3, #0
 8007992:	b2db      	uxtb	r3, r3
 8007994:	e00b      	b.n	80079ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	43da      	mvns	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4013      	ands	r3, r2
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bf14      	ite	ne
 80079a8:	2301      	movne	r3, #1
 80079aa:	2300      	moveq	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d016      	beq.n	80079e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079cc:	f043 0220 	orr.w	r2, r3, #32
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e021      	b.n	8007a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d10c      	bne.n	8007a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	43da      	mvns	r2, r3
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4013      	ands	r3, r2
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bf14      	ite	ne
 80079fc:	2301      	movne	r3, #1
 80079fe:	2300      	moveq	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	e00b      	b.n	8007a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	43da      	mvns	r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bf14      	ite	ne
 8007a16:	2301      	movne	r3, #1
 8007a18:	2300      	moveq	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f47f af6d 	bne.w	80078fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a38:	e034      	b.n	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f8b8 	bl	8007bb0 <I2C_IsAcknowledgeFailed>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e034      	b.n	8007ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d028      	beq.n	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a52:	f7fb fe99 	bl	8003788 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d302      	bcc.n	8007a68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11d      	bne.n	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a72:	2b80      	cmp	r3, #128	@ 0x80
 8007a74:	d016      	beq.n	8007aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a90:	f043 0220 	orr.w	r2, r3, #32
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e007      	b.n	8007ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aae:	2b80      	cmp	r3, #128	@ 0x80
 8007ab0:	d1c3      	bne.n	8007a3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ac8:	e034      	b.n	8007b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f870 	bl	8007bb0 <I2C_IsAcknowledgeFailed>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e034      	b.n	8007b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae0:	d028      	beq.n	8007b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae2:	f7fb fe51 	bl	8003788 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d302      	bcc.n	8007af8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d11d      	bne.n	8007b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d016      	beq.n	8007b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b20:	f043 0220 	orr.w	r2, r3, #32
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e007      	b.n	8007b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d1c3      	bne.n	8007aca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b58:	4b13      	ldr	r3, [pc, #76]	@ (8007ba8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	4a13      	ldr	r2, [pc, #76]	@ (8007bac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007b60:	fba2 2303 	umull	r2, r3, r2, r3
 8007b64:	0a1a      	lsrs	r2, r3, #8
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d107      	bne.n	8007b8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7e:	f043 0220 	orr.w	r2, r3, #32
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e008      	b.n	8007b9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b98:	d0e9      	beq.n	8007b6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	20000030 	.word	0x20000030
 8007bac:	14f8b589 	.word	0x14f8b589

08007bb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc6:	d11b      	bne.n	8007c00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bec:	f043 0204 	orr.w	r2, r3, #4
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007c1e:	d103      	bne.n	8007c28 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c26:	e007      	b.n	8007c38 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007c30:	d102      	bne.n	8007c38 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2208      	movs	r2, #8
 8007c36:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e101      	b.n	8007e5a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f006 fbdd 	bl	800e430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2203      	movs	r2, #3
 8007c7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c84:	d102      	bne.n	8007c8c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f002 ff34 	bl	800aafe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7c1a      	ldrb	r2, [r3, #16]
 8007c9e:	f88d 2000 	strb.w	r2, [sp]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ca6:	f002 fe13 	bl	800a8d0 <USB_CoreInit>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e0ce      	b.n	8007e5a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f002 ff2c 	bl	800ab20 <USB_SetCurrentMode>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e0bf      	b.n	8007e5a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
 8007cde:	e04a      	b.n	8007d76 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ce0:	7bfa      	ldrb	r2, [r7, #15]
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	3315      	adds	r3, #21
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007cf4:	7bfa      	ldrb	r2, [r7, #15]
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	3314      	adds	r3, #20
 8007d04:	7bfa      	ldrb	r2, [r7, #15]
 8007d06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d08:	7bfa      	ldrb	r2, [r7, #15]
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	b298      	uxth	r0, r3
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	332e      	adds	r3, #46	@ 0x2e
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	3318      	adds	r3, #24
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d34:	7bfa      	ldrb	r2, [r7, #15]
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	331c      	adds	r3, #28
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d48:	7bfa      	ldrb	r2, [r7, #15]
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	3320      	adds	r3, #32
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d5c:	7bfa      	ldrb	r2, [r7, #15]
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	3324      	adds	r3, #36	@ 0x24
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	3301      	adds	r3, #1
 8007d74:	73fb      	strb	r3, [r7, #15]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	791b      	ldrb	r3, [r3, #4]
 8007d7a:	7bfa      	ldrb	r2, [r7, #15]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d3af      	bcc.n	8007ce0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d80:	2300      	movs	r3, #0
 8007d82:	73fb      	strb	r3, [r7, #15]
 8007d84:	e044      	b.n	8007e10 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d86:	7bfa      	ldrb	r2, [r7, #15]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d9c:	7bfa      	ldrb	r2, [r7, #15]
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4613      	mov	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007dae:	7bfa      	ldrb	r2, [r7, #15]
 8007db0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007db2:	7bfa      	ldrb	r2, [r7, #15]
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007dc8:	7bfa      	ldrb	r2, [r7, #15]
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007dde:	7bfa      	ldrb	r2, [r7, #15]
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007df4:	7bfa      	ldrb	r2, [r7, #15]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	791b      	ldrb	r3, [r3, #4]
 8007e14:	7bfa      	ldrb	r2, [r7, #15]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d3b5      	bcc.n	8007d86 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	7c1a      	ldrb	r2, [r3, #16]
 8007e22:	f88d 2000 	strb.w	r2, [sp]
 8007e26:	3304      	adds	r3, #4
 8007e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e2a:	f002 fec5 	bl	800abb8 <USB_DevInit>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e00c      	b.n	8007e5a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f003 ff0f 	bl	800bc76 <USB_DevDisconnect>

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <HAL_PCD_Start+0x1c>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e022      	b.n	8007ec4 <HAL_PCD_Start+0x62>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d105      	bne.n	8007ea6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f002 fe16 	bl	800aadc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f003 febd 	bl	800bc34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ecc:	b590      	push	{r4, r7, lr}
 8007ece:	b08d      	sub	sp, #52	@ 0x34
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f003 ff7b 	bl	800bdde <USB_GetMode>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f040 848c 	bne.w	8008808 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f003 fedf 	bl	800bcb8 <USB_ReadInterrupts>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8482 	beq.w	8008806 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	0a1b      	lsrs	r3, r3, #8
 8007f0c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f003 fecc 	bl	800bcb8 <USB_ReadInterrupts>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d107      	bne.n	8007f3a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695a      	ldr	r2, [r3, #20]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f002 0202 	and.w	r2, r2, #2
 8007f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f003 feba 	bl	800bcb8 <USB_ReadInterrupts>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d161      	bne.n	8008012 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	699a      	ldr	r2, [r3, #24]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0210 	bic.w	r2, r2, #16
 8007f5c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	f003 020f 	and.w	r2, r3, #15
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	4413      	add	r3, r2
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007f84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f88:	d124      	bne.n	8007fd4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d035      	beq.n	8008002 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6a38      	ldr	r0, [r7, #32]
 8007faa:	f003 fcf1 	bl	800b990 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	091b      	lsrs	r3, r3, #4
 8007fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fba:	441a      	add	r2, r3
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	695a      	ldr	r2, [r3, #20]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	091b      	lsrs	r3, r3, #4
 8007fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fcc:	441a      	add	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	615a      	str	r2, [r3, #20]
 8007fd2:	e016      	b.n	8008002 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007fda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007fde:	d110      	bne.n	8008002 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6a38      	ldr	r0, [r7, #32]
 8007fec:	f003 fcd0 	bl	800b990 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	695a      	ldr	r2, [r3, #20]
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	091b      	lsrs	r3, r3, #4
 8007ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ffc:	441a      	add	r2, r3
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0210 	orr.w	r2, r2, #16
 8008010:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4618      	mov	r0, r3
 8008018:	f003 fe4e 	bl	800bcb8 <USB_ReadInterrupts>
 800801c:	4603      	mov	r3, r0
 800801e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008022:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008026:	f040 80a7 	bne.w	8008178 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f003 fe53 	bl	800bcde <USB_ReadDevAllOutEpInterrupt>
 8008038:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800803a:	e099      	b.n	8008170 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 808e 	beq.w	8008164 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f003 fe77 	bl	800bd46 <USB_ReadDevOutEPInterrupt>
 8008058:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00c      	beq.n	800807e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008070:	461a      	mov	r2, r3
 8008072:	2301      	movs	r3, #1
 8008074:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008076:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fea3 	bl	8008dc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00c      	beq.n	80080a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008094:	461a      	mov	r2, r3
 8008096:	2308      	movs	r3, #8
 8008098:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800809a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 ff79 	bl	8008f94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d008      	beq.n	80080be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b8:	461a      	mov	r2, r3
 80080ba:	2310      	movs	r3, #16
 80080bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d030      	beq.n	800812a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d0:	2b80      	cmp	r3, #128	@ 0x80
 80080d2:	d109      	bne.n	80080e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80080e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ea:	4613      	mov	r3, r2
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	4413      	add	r3, r2
 80080fa:	3304      	adds	r3, #4
 80080fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	78db      	ldrb	r3, [r3, #3]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d108      	bne.n	8008118 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2200      	movs	r2, #0
 800810a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	b2db      	uxtb	r3, r3
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f006 fa88 	bl	800e628 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008124:	461a      	mov	r2, r3
 8008126:	2302      	movs	r3, #2
 8008128:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	d008      	beq.n	8008146 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008140:	461a      	mov	r2, r3
 8008142:	2320      	movs	r3, #32
 8008144:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d009      	beq.n	8008164 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815c:	461a      	mov	r2, r3
 800815e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008162:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	3301      	adds	r3, #1
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800816a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816c:	085b      	lsrs	r3, r3, #1
 800816e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008172:	2b00      	cmp	r3, #0
 8008174:	f47f af62 	bne.w	800803c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f003 fd9b 	bl	800bcb8 <USB_ReadInterrupts>
 8008182:	4603      	mov	r3, r0
 8008184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008188:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800818c:	f040 80db 	bne.w	8008346 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f003 fdbc 	bl	800bd12 <USB_ReadDevAllInEpInterrupt>
 800819a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80081a0:	e0cd      	b.n	800833e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80c2 	beq.w	8008332 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f003 fde2 	bl	800bd82 <USB_ReadDevInEPInterrupt>
 80081be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d057      	beq.n	800827a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	2201      	movs	r2, #1
 80081d2:	fa02 f303 	lsl.w	r3, r2, r3
 80081d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	43db      	mvns	r3, r3
 80081e4:	69f9      	ldr	r1, [r7, #28]
 80081e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081ea:	4013      	ands	r3, r2
 80081ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081fa:	461a      	mov	r2, r3
 80081fc:	2301      	movs	r3, #1
 80081fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	799b      	ldrb	r3, [r3, #6]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d132      	bne.n	800826e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820c:	4613      	mov	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	3320      	adds	r3, #32
 8008218:	6819      	ldr	r1, [r3, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800821e:	4613      	mov	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4403      	add	r3, r0
 8008228:	331c      	adds	r3, #28
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4419      	add	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008232:	4613      	mov	r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4403      	add	r3, r0
 800823c:	3320      	adds	r3, #32
 800823e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008242:	2b00      	cmp	r3, #0
 8008244:	d113      	bne.n	800826e <HAL_PCD_IRQHandler+0x3a2>
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	3324      	adds	r3, #36	@ 0x24
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d108      	bne.n	800826e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008266:	461a      	mov	r2, r3
 8008268:	2101      	movs	r1, #1
 800826a:	f003 fde9 	bl	800be40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	b2db      	uxtb	r3, r3
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f006 f95c 	bl	800e532 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b00      	cmp	r3, #0
 8008282:	d008      	beq.n	8008296 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008290:	461a      	mov	r2, r3
 8008292:	2308      	movs	r3, #8
 8008294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	d008      	beq.n	80082b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ac:	461a      	mov	r2, r3
 80082ae:	2310      	movs	r3, #16
 80082b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d008      	beq.n	80082ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c8:	461a      	mov	r2, r3
 80082ca:	2340      	movs	r3, #64	@ 0x40
 80082cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d023      	beq.n	8008320 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80082d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082da:	6a38      	ldr	r0, [r7, #32]
 80082dc:	f002 fdd0 	bl	800ae80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80082e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e2:	4613      	mov	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	3310      	adds	r3, #16
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4413      	add	r3, r2
 80082f0:	3304      	adds	r3, #4
 80082f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	78db      	ldrb	r3, [r3, #3]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d108      	bne.n	800830e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2200      	movs	r2, #0
 8008300:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	b2db      	uxtb	r3, r3
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f006 f99f 	bl	800e64c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831a:	461a      	mov	r2, r3
 800831c:	2302      	movs	r3, #2
 800831e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800832a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fcbd 	bl	8008cac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	3301      	adds	r3, #1
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833a:	085b      	lsrs	r3, r3, #1
 800833c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008340:	2b00      	cmp	r3, #0
 8008342:	f47f af2e 	bne.w	80081a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f003 fcb4 	bl	800bcb8 <USB_ReadInterrupts>
 8008350:	4603      	mov	r3, r0
 8008352:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800835a:	d122      	bne.n	80083a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800836a:	f023 0301 	bic.w	r3, r3, #1
 800836e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008376:	2b01      	cmp	r3, #1
 8008378:	d108      	bne.n	800838c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008382:	2100      	movs	r1, #0
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fea3 	bl	80090d0 <HAL_PCDEx_LPM_Callback>
 800838a:	e002      	b.n	8008392 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f006 f93d 	bl	800e60c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	695a      	ldr	r2, [r3, #20]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80083a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f003 fc86 	bl	800bcb8 <USB_ReadInterrupts>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b6:	d112      	bne.n	80083de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d102      	bne.n	80083ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f006 f8f9 	bl	800e5c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695a      	ldr	r2, [r3, #20]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80083dc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f003 fc68 	bl	800bcb8 <USB_ReadInterrupts>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80083ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f2:	f040 80b7 	bne.w	8008564 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008404:	f023 0301 	bic.w	r3, r3, #1
 8008408:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2110      	movs	r1, #16
 8008410:	4618      	mov	r0, r3
 8008412:	f002 fd35 	bl	800ae80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008416:	2300      	movs	r3, #0
 8008418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800841a:	e046      	b.n	80084aa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800841c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008428:	461a      	mov	r2, r3
 800842a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800842e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	440a      	add	r2, r1
 8008446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800844a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800844e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	461a      	mov	r2, r3
 800845e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008462:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800847e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008482:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800849e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a6:	3301      	adds	r3, #1
 80084a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	791b      	ldrb	r3, [r3, #4]
 80084ae:	461a      	mov	r2, r3
 80084b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d3b2      	bcc.n	800841c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084c4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80084c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7bdb      	ldrb	r3, [r3, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d016      	beq.n	8008500 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084e2:	f043 030b 	orr.w	r3, r3, #11
 80084e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084f8:	f043 030b 	orr.w	r3, r3, #11
 80084fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80084fe:	e015      	b.n	800852c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800850e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008512:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008516:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	69fa      	ldr	r2, [r7, #28]
 8008522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008526:	f043 030b 	orr.w	r3, r3, #11
 800852a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	69fa      	ldr	r2, [r7, #28]
 8008536:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800853a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800853e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800854e:	461a      	mov	r2, r3
 8008550:	f003 fc76 	bl	800be40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695a      	ldr	r2, [r3, #20]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f003 fba5 	bl	800bcb8 <USB_ReadInterrupts>
 800856e:	4603      	mov	r3, r0
 8008570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008578:	d123      	bne.n	80085c2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f003 fc3b 	bl	800bdfa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4618      	mov	r0, r3
 800858a:	f002 fcf2 	bl	800af72 <USB_GetDevSpeed>
 800858e:	4603      	mov	r3, r0
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681c      	ldr	r4, [r3, #0]
 800859a:	f001 f9c9 	bl	8009930 <HAL_RCC_GetHCLKFreq>
 800859e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80085a4:	461a      	mov	r2, r3
 80085a6:	4620      	mov	r0, r4
 80085a8:	f002 f9f6 	bl	800a998 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f005 ffe8 	bl	800e582 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695a      	ldr	r2, [r3, #20]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80085c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f003 fb76 	bl	800bcb8 <USB_ReadInterrupts>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b08      	cmp	r3, #8
 80085d4:	d10a      	bne.n	80085ec <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f005 ffc5 	bl	800e566 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695a      	ldr	r2, [r3, #20]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f002 0208 	and.w	r2, r2, #8
 80085ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f003 fb61 	bl	800bcb8 <USB_ReadInterrupts>
 80085f6:	4603      	mov	r3, r0
 80085f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fc:	2b80      	cmp	r3, #128	@ 0x80
 80085fe:	d123      	bne.n	8008648 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800860c:	2301      	movs	r3, #1
 800860e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008610:	e014      	b.n	800863c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008616:	4613      	mov	r3, r2
 8008618:	00db      	lsls	r3, r3, #3
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d105      	bne.n	8008636 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	b2db      	uxtb	r3, r3
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fb0a 	bl	8008c4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	3301      	adds	r3, #1
 800863a:	627b      	str	r3, [r7, #36]	@ 0x24
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	791b      	ldrb	r3, [r3, #4]
 8008640:	461a      	mov	r2, r3
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	4293      	cmp	r3, r2
 8008646:	d3e4      	bcc.n	8008612 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f003 fb33 	bl	800bcb8 <USB_ReadInterrupts>
 8008652:	4603      	mov	r3, r0
 8008654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800865c:	d13c      	bne.n	80086d8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800865e:	2301      	movs	r3, #1
 8008660:	627b      	str	r3, [r7, #36]	@ 0x24
 8008662:	e02b      	b.n	80086bc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008678:	4613      	mov	r3, r2
 800867a:	00db      	lsls	r3, r3, #3
 800867c:	4413      	add	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	440b      	add	r3, r1
 8008682:	3318      	adds	r3, #24
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d115      	bne.n	80086b6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800868a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800868c:	2b00      	cmp	r3, #0
 800868e:	da12      	bge.n	80086b6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008694:	4613      	mov	r3, r2
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	3317      	adds	r3, #23
 80086a0:	2201      	movs	r2, #1
 80086a2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 faca 	bl	8008c4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	3301      	adds	r3, #1
 80086ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	791b      	ldrb	r3, [r3, #4]
 80086c0:	461a      	mov	r2, r3
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d3cd      	bcc.n	8008664 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695a      	ldr	r2, [r3, #20]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80086d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f003 faeb 	bl	800bcb8 <USB_ReadInterrupts>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086ec:	d156      	bne.n	800879c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086ee:	2301      	movs	r3, #1
 80086f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f2:	e045      	b.n	8008780 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008708:	4613      	mov	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d12e      	bne.n	800877a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800871c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800871e:	2b00      	cmp	r3, #0
 8008720:	da2b      	bge.n	800877a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	0c1a      	lsrs	r2, r3, #16
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800872c:	4053      	eors	r3, r2
 800872e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008732:	2b00      	cmp	r3, #0
 8008734:	d121      	bne.n	800877a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800873a:	4613      	mov	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008748:	2201      	movs	r2, #1
 800874a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008776:	6053      	str	r3, [r2, #4]
            break;
 8008778:	e008      	b.n	800878c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877c:	3301      	adds	r3, #1
 800877e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	791b      	ldrb	r3, [r3, #4]
 8008784:	461a      	mov	r2, r3
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	4293      	cmp	r3, r2
 800878a:	d3b3      	bcc.n	80086f4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800879a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f003 fa89 	bl	800bcb8 <USB_ReadInterrupts>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b0:	d10a      	bne.n	80087c8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f005 ff5c 	bl	800e670 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80087c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f003 fa73 	bl	800bcb8 <USB_ReadInterrupts>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d115      	bne.n	8008808 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f005 ff4c 	bl	800e68c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6859      	ldr	r1, [r3, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	430a      	orrs	r2, r1
 8008802:	605a      	str	r2, [r3, #4]
 8008804:	e000      	b.n	8008808 <HAL_PCD_IRQHandler+0x93c>
      return;
 8008806:	bf00      	nop
    }
  }
}
 8008808:	3734      	adds	r7, #52	@ 0x34
 800880a:	46bd      	mov	sp, r7
 800880c:	bd90      	pop	{r4, r7, pc}

0800880e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_PCD_SetAddress+0x1a>
 8008824:	2302      	movs	r3, #2
 8008826:	e012      	b.n	800884e <HAL_PCD_SetAddress+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	78fa      	ldrb	r2, [r7, #3]
 8008834:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f003 f9d2 	bl	800bbe8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	461a      	mov	r2, r3
 8008864:	4603      	mov	r3, r0
 8008866:	70fb      	strb	r3, [r7, #3]
 8008868:	460b      	mov	r3, r1
 800886a:	803b      	strh	r3, [r7, #0]
 800886c:	4613      	mov	r3, r2
 800886e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008878:	2b00      	cmp	r3, #0
 800887a:	da0f      	bge.n	800889c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	f003 020f 	and.w	r2, r3, #15
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	3310      	adds	r3, #16
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	4413      	add	r3, r2
 8008890:	3304      	adds	r3, #4
 8008892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2201      	movs	r2, #1
 8008898:	705a      	strb	r2, [r3, #1]
 800889a:	e00f      	b.n	80088bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	f003 020f 	and.w	r2, r3, #15
 80088a2:	4613      	mov	r3, r2
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	4413      	add	r3, r2
 80088b2:	3304      	adds	r3, #4
 80088b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80088c8:	883b      	ldrh	r3, [r7, #0]
 80088ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	78ba      	ldrb	r2, [r7, #2]
 80088d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d004      	beq.n	80088ea <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80088ea:	78bb      	ldrb	r3, [r7, #2]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d102      	bne.n	80088f6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_PCD_EP_Open+0xae>
 8008900:	2302      	movs	r3, #2
 8008902:	e00e      	b.n	8008922 <HAL_PCD_EP_Open+0xcc>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68f9      	ldr	r1, [r7, #12]
 8008912:	4618      	mov	r0, r3
 8008914:	f002 fb52 	bl	800afbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008920:	7afb      	ldrb	r3, [r7, #11]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800893a:	2b00      	cmp	r3, #0
 800893c:	da0f      	bge.n	800895e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	f003 020f 	and.w	r2, r3, #15
 8008944:	4613      	mov	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	3310      	adds	r3, #16
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	3304      	adds	r3, #4
 8008954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	705a      	strb	r2, [r3, #1]
 800895c:	e00f      	b.n	800897e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	4413      	add	r3, r2
 8008974:	3304      	adds	r3, #4
 8008976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	b2da      	uxtb	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <HAL_PCD_EP_Close+0x6e>
 8008994:	2302      	movs	r3, #2
 8008996:	e00e      	b.n	80089b6 <HAL_PCD_EP_Close+0x8c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68f9      	ldr	r1, [r7, #12]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f002 fb90 	bl	800b0cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b086      	sub	sp, #24
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
 80089ca:	460b      	mov	r3, r1
 80089cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089ce:	7afb      	ldrb	r3, [r7, #11]
 80089d0:	f003 020f 	and.w	r2, r3, #15
 80089d4:	4613      	mov	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4413      	add	r3, r2
 80089e4:	3304      	adds	r3, #4
 80089e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2200      	movs	r2, #0
 80089f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2200      	movs	r2, #0
 80089fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	f003 030f 	and.w	r3, r3, #15
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	799b      	ldrb	r3, [r3, #6]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d102      	bne.n	8008a1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6818      	ldr	r0, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	799b      	ldrb	r3, [r3, #6]
 8008a22:	461a      	mov	r2, r3
 8008a24:	6979      	ldr	r1, [r7, #20]
 8008a26:	f002 fc2d 	bl	800b284 <USB_EPStartXfer>

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	f003 020f 	and.w	r2, r3, #15
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	440b      	add	r3, r1
 8008a52:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008a56:	681b      	ldr	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	607a      	str	r2, [r7, #4]
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	460b      	mov	r3, r1
 8008a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	f003 020f 	and.w	r2, r3, #15
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	3310      	adds	r3, #16
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	3304      	adds	r3, #4
 8008a8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aa4:	7afb      	ldrb	r3, [r7, #11]
 8008aa6:	f003 030f 	and.w	r3, r3, #15
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	799b      	ldrb	r3, [r3, #6]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d102      	bne.n	8008abe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	799b      	ldrb	r3, [r3, #6]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6979      	ldr	r1, [r7, #20]
 8008aca:	f002 fbdb 	bl	800b284 <USB_EPStartXfer>

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	7912      	ldrb	r2, [r2, #4]
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d901      	bls.n	8008af6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e04f      	b.n	8008b96 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da0f      	bge.n	8008b1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008afe:	78fb      	ldrb	r3, [r7, #3]
 8008b00:	f003 020f 	and.w	r2, r3, #15
 8008b04:	4613      	mov	r3, r2
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	3310      	adds	r3, #16
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	4413      	add	r3, r2
 8008b12:	3304      	adds	r3, #4
 8008b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	705a      	strb	r2, [r3, #1]
 8008b1c:	e00d      	b.n	8008b3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	4413      	add	r3, r2
 8008b30:	3304      	adds	r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d101      	bne.n	8008b5a <HAL_PCD_EP_SetStall+0x82>
 8008b56:	2302      	movs	r3, #2
 8008b58:	e01d      	b.n	8008b96 <HAL_PCD_EP_SetStall+0xbe>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f002 ff69 	bl	800ba40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b6e:	78fb      	ldrb	r3, [r7, #3]
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d109      	bne.n	8008b8c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7999      	ldrb	r1, [r3, #6]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b86:	461a      	mov	r2, r3
 8008b88:	f003 f95a 	bl	800be40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008baa:	78fb      	ldrb	r3, [r7, #3]
 8008bac:	f003 030f 	and.w	r3, r3, #15
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	7912      	ldrb	r2, [r2, #4]
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d901      	bls.n	8008bbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e042      	b.n	8008c42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da0f      	bge.n	8008be4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	f003 020f 	and.w	r2, r3, #15
 8008bca:	4613      	mov	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	3310      	adds	r3, #16
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3304      	adds	r3, #4
 8008bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	705a      	strb	r2, [r3, #1]
 8008be2:	e00f      	b.n	8008c04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d101      	bne.n	8008c24 <HAL_PCD_EP_ClrStall+0x86>
 8008c20:	2302      	movs	r3, #2
 8008c22:	e00e      	b.n	8008c42 <HAL_PCD_EP_ClrStall+0xa4>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68f9      	ldr	r1, [r7, #12]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f002 ff72 	bl	800bb1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	da0c      	bge.n	8008c78 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	f003 020f 	and.w	r2, r3, #15
 8008c64:	4613      	mov	r3, r2
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	3310      	adds	r3, #16
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4413      	add	r3, r2
 8008c72:	3304      	adds	r3, #4
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e00c      	b.n	8008c92 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	f003 020f 	and.w	r2, r3, #15
 8008c7e:	4613      	mov	r3, r2
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	3304      	adds	r3, #4
 8008c90:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68f9      	ldr	r1, [r7, #12]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f002 fd91 	bl	800b7c0 <USB_EPStopXfer>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08a      	sub	sp, #40	@ 0x28
 8008cb0:	af02      	add	r7, sp, #8
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	3310      	adds	r3, #16
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	4413      	add	r3, r2
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	695a      	ldr	r2, [r3, #20]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d901      	bls.n	8008ce4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e06b      	b.n	8008dbc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	691a      	ldr	r2, [r3, #16]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d902      	bls.n	8008d00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	3303      	adds	r3, #3
 8008d04:	089b      	lsrs	r3, r3, #2
 8008d06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d08:	e02a      	b.n	8008d60 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	691a      	ldr	r2, [r3, #16]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d902      	bls.n	8008d26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	3303      	adds	r3, #3
 8008d2a:	089b      	lsrs	r3, r3, #2
 8008d2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68d9      	ldr	r1, [r3, #12]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	4603      	mov	r3, r0
 8008d42:	6978      	ldr	r0, [r7, #20]
 8008d44:	f002 fde6 	bl	800b914 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	441a      	add	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	695a      	ldr	r2, [r3, #20]
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	441a      	add	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d809      	bhi.n	8008d8a <PCD_WriteEmptyTxFifo+0xde>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	695a      	ldr	r2, [r3, #20]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d203      	bcs.n	8008d8a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1bf      	bne.n	8008d0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d811      	bhi.n	8008dba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	43db      	mvns	r3, r3
 8008db0:	6939      	ldr	r1, [r7, #16]
 8008db2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008db6:	4013      	ands	r3, r2
 8008db8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	333c      	adds	r3, #60	@ 0x3c
 8008ddc:	3304      	adds	r3, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	799b      	ldrb	r3, [r3, #6]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d17b      	bne.n	8008ef2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d015      	beq.n	8008e30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	4a61      	ldr	r2, [pc, #388]	@ (8008f8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	f240 80b9 	bls.w	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 80b3 	beq.w	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e26:	461a      	mov	r2, r3
 8008e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e2c:	6093      	str	r3, [r2, #8]
 8008e2e:	e0a7      	b.n	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d009      	beq.n	8008e4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e46:	461a      	mov	r2, r3
 8008e48:	2320      	movs	r3, #32
 8008e4a:	6093      	str	r3, [r2, #8]
 8008e4c:	e098      	b.n	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f040 8093 	bne.w	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8008f8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d90f      	bls.n	8008e82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00a      	beq.n	8008e82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e7e:	6093      	str	r3, [r2, #8]
 8008e80:	e07e      	b.n	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	4413      	add	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	4413      	add	r3, r2
 8008e94:	3304      	adds	r3, #4
 8008e96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a1a      	ldr	r2, [r3, #32]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	0159      	lsls	r1, r3, #5
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	440b      	add	r3, r1
 8008ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eae:	1ad2      	subs	r2, r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d114      	bne.n	8008ee4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ecc:	461a      	mov	r2, r3
 8008ece:	2101      	movs	r1, #1
 8008ed0:	f002 ffb6 	bl	800be40 <USB_EP0_OutStart>
 8008ed4:	e006      	b.n	8008ee4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	441a      	add	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f005 fb06 	bl	800e4fc <HAL_PCD_DataOutStageCallback>
 8008ef0:	e046      	b.n	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	4a26      	ldr	r2, [pc, #152]	@ (8008f90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d124      	bne.n	8008f44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00a      	beq.n	8008f1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f10:	461a      	mov	r2, r3
 8008f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f16:	6093      	str	r3, [r2, #8]
 8008f18:	e032      	b.n	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f003 0320 	and.w	r3, r3, #32
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d008      	beq.n	8008f36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f30:	461a      	mov	r2, r3
 8008f32:	2320      	movs	r3, #32
 8008f34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f005 fadd 	bl	800e4fc <HAL_PCD_DataOutStageCallback>
 8008f42:	e01d      	b.n	8008f80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d114      	bne.n	8008f74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d108      	bne.n	8008f74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	2100      	movs	r1, #0
 8008f70:	f002 ff66 	bl	800be40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f005 fabe 	bl	800e4fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3720      	adds	r7, #32
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	4f54300a 	.word	0x4f54300a
 8008f90:	4f54310a 	.word	0x4f54310a

08008f94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	333c      	adds	r3, #60	@ 0x3c
 8008fac:	3304      	adds	r3, #4
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4a15      	ldr	r2, [pc, #84]	@ (800901c <PCD_EP_OutSetupPacket_int+0x88>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d90e      	bls.n	8008fe8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d009      	beq.n	8008fe8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fe6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f005 fa75 	bl	800e4d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800901c <PCD_EP_OutSetupPacket_int+0x88>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d90c      	bls.n	8009010 <PCD_EP_OutSetupPacket_int+0x7c>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	799b      	ldrb	r3, [r3, #6]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d108      	bne.n	8009010 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009008:	461a      	mov	r2, r3
 800900a:	2101      	movs	r1, #1
 800900c:	f002 ff18 	bl	800be40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	4f54300a 	.word	0x4f54300a

08009020 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
 800902c:	4613      	mov	r3, r2
 800902e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009036:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d107      	bne.n	800904e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800903e:	883b      	ldrh	r3, [r7, #0]
 8009040:	0419      	lsls	r1, r3, #16
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	430a      	orrs	r2, r1
 800904a:	629a      	str	r2, [r3, #40]	@ 0x28
 800904c:	e028      	b.n	80090a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009054:	0c1b      	lsrs	r3, r3, #16
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	4413      	add	r3, r2
 800905a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	e00d      	b.n	800907e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	3340      	adds	r3, #64	@ 0x40
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	0c1b      	lsrs	r3, r3, #16
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	4413      	add	r3, r2
 8009076:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	3301      	adds	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
 800907e:	7bfa      	ldrb	r2, [r7, #15]
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	3b01      	subs	r3, #1
 8009084:	429a      	cmp	r2, r3
 8009086:	d3ec      	bcc.n	8009062 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009088:	883b      	ldrh	r3, [r7, #0]
 800908a:	0418      	lsls	r0, r3, #16
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6819      	ldr	r1, [r3, #0]
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	3b01      	subs	r3, #1
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	4302      	orrs	r2, r0
 8009098:	3340      	adds	r3, #64	@ 0x40
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	440b      	add	r3, r1
 800909e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	887a      	ldrh	r2, [r7, #2]
 80090c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e267      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d075      	beq.n	80091f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009106:	4b88      	ldr	r3, [pc, #544]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 030c 	and.w	r3, r3, #12
 800910e:	2b04      	cmp	r3, #4
 8009110:	d00c      	beq.n	800912c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009112:	4b85      	ldr	r3, [pc, #532]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800911a:	2b08      	cmp	r3, #8
 800911c:	d112      	bne.n	8009144 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800911e:	4b82      	ldr	r3, [pc, #520]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009126:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800912a:	d10b      	bne.n	8009144 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800912c:	4b7e      	ldr	r3, [pc, #504]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d05b      	beq.n	80091f0 <HAL_RCC_OscConfig+0x108>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d157      	bne.n	80091f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e242      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800914c:	d106      	bne.n	800915c <HAL_RCC_OscConfig+0x74>
 800914e:	4b76      	ldr	r3, [pc, #472]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a75      	ldr	r2, [pc, #468]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	e01d      	b.n	8009198 <HAL_RCC_OscConfig+0xb0>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009164:	d10c      	bne.n	8009180 <HAL_RCC_OscConfig+0x98>
 8009166:	4b70      	ldr	r3, [pc, #448]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a6f      	ldr	r2, [pc, #444]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 800916c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	4b6d      	ldr	r3, [pc, #436]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a6c      	ldr	r2, [pc, #432]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	e00b      	b.n	8009198 <HAL_RCC_OscConfig+0xb0>
 8009180:	4b69      	ldr	r3, [pc, #420]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a68      	ldr	r2, [pc, #416]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	4b66      	ldr	r3, [pc, #408]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a65      	ldr	r2, [pc, #404]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d013      	beq.n	80091c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091a0:	f7fa faf2 	bl	8003788 <HAL_GetTick>
 80091a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091a6:	e008      	b.n	80091ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091a8:	f7fa faee 	bl	8003788 <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	2b64      	cmp	r3, #100	@ 0x64
 80091b4:	d901      	bls.n	80091ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e207      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ba:	4b5b      	ldr	r3, [pc, #364]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f0      	beq.n	80091a8 <HAL_RCC_OscConfig+0xc0>
 80091c6:	e014      	b.n	80091f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c8:	f7fa fade 	bl	8003788 <HAL_GetTick>
 80091cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091ce:	e008      	b.n	80091e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091d0:	f7fa fada 	bl	8003788 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b64      	cmp	r3, #100	@ 0x64
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e1f3      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091e2:	4b51      	ldr	r3, [pc, #324]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1f0      	bne.n	80091d0 <HAL_RCC_OscConfig+0xe8>
 80091ee:	e000      	b.n	80091f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d063      	beq.n	80092c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80091fe:	4b4a      	ldr	r3, [pc, #296]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 030c 	and.w	r3, r3, #12
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800920a:	4b47      	ldr	r3, [pc, #284]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009212:	2b08      	cmp	r3, #8
 8009214:	d11c      	bne.n	8009250 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009216:	4b44      	ldr	r3, [pc, #272]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d116      	bne.n	8009250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009222:	4b41      	ldr	r3, [pc, #260]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <HAL_RCC_OscConfig+0x152>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d001      	beq.n	800923a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e1c7      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800923a:	4b3b      	ldr	r3, [pc, #236]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	4937      	ldr	r1, [pc, #220]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 800924a:	4313      	orrs	r3, r2
 800924c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800924e:	e03a      	b.n	80092c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d020      	beq.n	800929a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009258:	4b34      	ldr	r3, [pc, #208]	@ (800932c <HAL_RCC_OscConfig+0x244>)
 800925a:	2201      	movs	r2, #1
 800925c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800925e:	f7fa fa93 	bl	8003788 <HAL_GetTick>
 8009262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009264:	e008      	b.n	8009278 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009266:	f7fa fa8f 	bl	8003788 <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	2b02      	cmp	r3, #2
 8009272:	d901      	bls.n	8009278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e1a8      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009278:	4b2b      	ldr	r3, [pc, #172]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d0f0      	beq.n	8009266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009284:	4b28      	ldr	r3, [pc, #160]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	4925      	ldr	r1, [pc, #148]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 8009294:	4313      	orrs	r3, r2
 8009296:	600b      	str	r3, [r1, #0]
 8009298:	e015      	b.n	80092c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800929a:	4b24      	ldr	r3, [pc, #144]	@ (800932c <HAL_RCC_OscConfig+0x244>)
 800929c:	2200      	movs	r2, #0
 800929e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a0:	f7fa fa72 	bl	8003788 <HAL_GetTick>
 80092a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092a6:	e008      	b.n	80092ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092a8:	f7fa fa6e 	bl	8003788 <HAL_GetTick>
 80092ac:	4602      	mov	r2, r0
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d901      	bls.n	80092ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e187      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1f0      	bne.n	80092a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d036      	beq.n	8009340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d016      	beq.n	8009308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092da:	4b15      	ldr	r3, [pc, #84]	@ (8009330 <HAL_RCC_OscConfig+0x248>)
 80092dc:	2201      	movs	r2, #1
 80092de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e0:	f7fa fa52 	bl	8003788 <HAL_GetTick>
 80092e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092e6:	e008      	b.n	80092fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092e8:	f7fa fa4e 	bl	8003788 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d901      	bls.n	80092fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e167      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <HAL_RCC_OscConfig+0x240>)
 80092fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0f0      	beq.n	80092e8 <HAL_RCC_OscConfig+0x200>
 8009306:	e01b      	b.n	8009340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009308:	4b09      	ldr	r3, [pc, #36]	@ (8009330 <HAL_RCC_OscConfig+0x248>)
 800930a:	2200      	movs	r2, #0
 800930c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800930e:	f7fa fa3b 	bl	8003788 <HAL_GetTick>
 8009312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009314:	e00e      	b.n	8009334 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009316:	f7fa fa37 	bl	8003788 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d907      	bls.n	8009334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e150      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
 8009328:	40023800 	.word	0x40023800
 800932c:	42470000 	.word	0x42470000
 8009330:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009334:	4b88      	ldr	r3, [pc, #544]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1ea      	bne.n	8009316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8097 	beq.w	800947c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800934e:	2300      	movs	r3, #0
 8009350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009352:	4b81      	ldr	r3, [pc, #516]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10f      	bne.n	800937e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800935e:	2300      	movs	r3, #0
 8009360:	60bb      	str	r3, [r7, #8]
 8009362:	4b7d      	ldr	r3, [pc, #500]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009366:	4a7c      	ldr	r2, [pc, #496]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800936c:	6413      	str	r3, [r2, #64]	@ 0x40
 800936e:	4b7a      	ldr	r3, [pc, #488]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009376:	60bb      	str	r3, [r7, #8]
 8009378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800937a:	2301      	movs	r3, #1
 800937c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800937e:	4b77      	ldr	r3, [pc, #476]	@ (800955c <HAL_RCC_OscConfig+0x474>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009386:	2b00      	cmp	r3, #0
 8009388:	d118      	bne.n	80093bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800938a:	4b74      	ldr	r3, [pc, #464]	@ (800955c <HAL_RCC_OscConfig+0x474>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a73      	ldr	r2, [pc, #460]	@ (800955c <HAL_RCC_OscConfig+0x474>)
 8009390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009396:	f7fa f9f7 	bl	8003788 <HAL_GetTick>
 800939a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800939c:	e008      	b.n	80093b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800939e:	f7fa f9f3 	bl	8003788 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d901      	bls.n	80093b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e10c      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093b0:	4b6a      	ldr	r3, [pc, #424]	@ (800955c <HAL_RCC_OscConfig+0x474>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0f0      	beq.n	800939e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d106      	bne.n	80093d2 <HAL_RCC_OscConfig+0x2ea>
 80093c4:	4b64      	ldr	r3, [pc, #400]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80093c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093c8:	4a63      	ldr	r2, [pc, #396]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80093ca:	f043 0301 	orr.w	r3, r3, #1
 80093ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80093d0:	e01c      	b.n	800940c <HAL_RCC_OscConfig+0x324>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	2b05      	cmp	r3, #5
 80093d8:	d10c      	bne.n	80093f4 <HAL_RCC_OscConfig+0x30c>
 80093da:	4b5f      	ldr	r3, [pc, #380]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093de:	4a5e      	ldr	r2, [pc, #376]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80093e0:	f043 0304 	orr.w	r3, r3, #4
 80093e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80093e6:	4b5c      	ldr	r3, [pc, #368]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80093e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ea:	4a5b      	ldr	r2, [pc, #364]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80093f2:	e00b      	b.n	800940c <HAL_RCC_OscConfig+0x324>
 80093f4:	4b58      	ldr	r3, [pc, #352]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80093f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f8:	4a57      	ldr	r2, [pc, #348]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80093fa:	f023 0301 	bic.w	r3, r3, #1
 80093fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009400:	4b55      	ldr	r3, [pc, #340]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009404:	4a54      	ldr	r2, [pc, #336]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009406:	f023 0304 	bic.w	r3, r3, #4
 800940a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d015      	beq.n	8009440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009414:	f7fa f9b8 	bl	8003788 <HAL_GetTick>
 8009418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800941a:	e00a      	b.n	8009432 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800941c:	f7fa f9b4 	bl	8003788 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800942a:	4293      	cmp	r3, r2
 800942c:	d901      	bls.n	8009432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e0cb      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009432:	4b49      	ldr	r3, [pc, #292]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ee      	beq.n	800941c <HAL_RCC_OscConfig+0x334>
 800943e:	e014      	b.n	800946a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009440:	f7fa f9a2 	bl	8003788 <HAL_GetTick>
 8009444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009446:	e00a      	b.n	800945e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009448:	f7fa f99e 	bl	8003788 <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009456:	4293      	cmp	r3, r2
 8009458:	d901      	bls.n	800945e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e0b5      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800945e:	4b3e      	ldr	r3, [pc, #248]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1ee      	bne.n	8009448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d105      	bne.n	800947c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009470:	4b39      	ldr	r3, [pc, #228]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009474:	4a38      	ldr	r2, [pc, #224]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800947a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 80a1 	beq.w	80095c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009486:	4b34      	ldr	r3, [pc, #208]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f003 030c 	and.w	r3, r3, #12
 800948e:	2b08      	cmp	r3, #8
 8009490:	d05c      	beq.n	800954c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d141      	bne.n	800951e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800949a:	4b31      	ldr	r3, [pc, #196]	@ (8009560 <HAL_RCC_OscConfig+0x478>)
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094a0:	f7fa f972 	bl	8003788 <HAL_GetTick>
 80094a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094a6:	e008      	b.n	80094ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094a8:	f7fa f96e 	bl	8003788 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d901      	bls.n	80094ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e087      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094ba:	4b27      	ldr	r3, [pc, #156]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1f0      	bne.n	80094a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69da      	ldr	r2, [r3, #28]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d4:	019b      	lsls	r3, r3, #6
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094dc:	085b      	lsrs	r3, r3, #1
 80094de:	3b01      	subs	r3, #1
 80094e0:	041b      	lsls	r3, r3, #16
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e8:	061b      	lsls	r3, r3, #24
 80094ea:	491b      	ldr	r1, [pc, #108]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009560 <HAL_RCC_OscConfig+0x478>)
 80094f2:	2201      	movs	r2, #1
 80094f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094f6:	f7fa f947 	bl	8003788 <HAL_GetTick>
 80094fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094fc:	e008      	b.n	8009510 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094fe:	f7fa f943 	bl	8003788 <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b02      	cmp	r3, #2
 800950a:	d901      	bls.n	8009510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e05c      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009510:	4b11      	ldr	r3, [pc, #68]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0f0      	beq.n	80094fe <HAL_RCC_OscConfig+0x416>
 800951c:	e054      	b.n	80095c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800951e:	4b10      	ldr	r3, [pc, #64]	@ (8009560 <HAL_RCC_OscConfig+0x478>)
 8009520:	2200      	movs	r2, #0
 8009522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009524:	f7fa f930 	bl	8003788 <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800952c:	f7fa f92c 	bl	8003788 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e045      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800953e:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <HAL_RCC_OscConfig+0x470>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1f0      	bne.n	800952c <HAL_RCC_OscConfig+0x444>
 800954a:	e03d      	b.n	80095c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d107      	bne.n	8009564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e038      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
 8009558:	40023800 	.word	0x40023800
 800955c:	40007000 	.word	0x40007000
 8009560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009564:	4b1b      	ldr	r3, [pc, #108]	@ (80095d4 <HAL_RCC_OscConfig+0x4ec>)
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d028      	beq.n	80095c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800957c:	429a      	cmp	r2, r3
 800957e:	d121      	bne.n	80095c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800958a:	429a      	cmp	r2, r3
 800958c:	d11a      	bne.n	80095c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009594:	4013      	ands	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800959a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800959c:	4293      	cmp	r3, r2
 800959e:	d111      	bne.n	80095c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095aa:	085b      	lsrs	r3, r3, #1
 80095ac:	3b01      	subs	r3, #1
 80095ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d107      	bne.n	80095c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d001      	beq.n	80095c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e000      	b.n	80095ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40023800 	.word	0x40023800

080095d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e0cc      	b.n	8009786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095ec:	4b68      	ldr	r3, [pc, #416]	@ (8009790 <HAL_RCC_ClockConfig+0x1b8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d90c      	bls.n	8009614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095fa:	4b65      	ldr	r3, [pc, #404]	@ (8009790 <HAL_RCC_ClockConfig+0x1b8>)
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	b2d2      	uxtb	r2, r2
 8009600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009602:	4b63      	ldr	r3, [pc, #396]	@ (8009790 <HAL_RCC_ClockConfig+0x1b8>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d001      	beq.n	8009614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e0b8      	b.n	8009786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d020      	beq.n	8009662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0304 	and.w	r3, r3, #4
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800962c:	4b59      	ldr	r3, [pc, #356]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	4a58      	ldr	r2, [pc, #352]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 8009632:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0308 	and.w	r3, r3, #8
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009644:	4b53      	ldr	r3, [pc, #332]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	4a52      	ldr	r2, [pc, #328]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 800964a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800964e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009650:	4b50      	ldr	r3, [pc, #320]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	494d      	ldr	r1, [pc, #308]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 800965e:	4313      	orrs	r3, r2
 8009660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	2b00      	cmp	r3, #0
 800966c:	d044      	beq.n	80096f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d107      	bne.n	8009686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009676:	4b47      	ldr	r3, [pc, #284]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d119      	bne.n	80096b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e07f      	b.n	8009786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2b02      	cmp	r3, #2
 800968c:	d003      	beq.n	8009696 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009692:	2b03      	cmp	r3, #3
 8009694:	d107      	bne.n	80096a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009696:	4b3f      	ldr	r3, [pc, #252]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d109      	bne.n	80096b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e06f      	b.n	8009786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096a6:	4b3b      	ldr	r3, [pc, #236]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e067      	b.n	8009786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096b6:	4b37      	ldr	r3, [pc, #220]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f023 0203 	bic.w	r2, r3, #3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	4934      	ldr	r1, [pc, #208]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096c8:	f7fa f85e 	bl	8003788 <HAL_GetTick>
 80096cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ce:	e00a      	b.n	80096e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096d0:	f7fa f85a 	bl	8003788 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096de:	4293      	cmp	r3, r2
 80096e0:	d901      	bls.n	80096e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e04f      	b.n	8009786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096e6:	4b2b      	ldr	r3, [pc, #172]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 020c 	and.w	r2, r3, #12
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d1eb      	bne.n	80096d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096f8:	4b25      	ldr	r3, [pc, #148]	@ (8009790 <HAL_RCC_ClockConfig+0x1b8>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0307 	and.w	r3, r3, #7
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d20c      	bcs.n	8009720 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009706:	4b22      	ldr	r3, [pc, #136]	@ (8009790 <HAL_RCC_ClockConfig+0x1b8>)
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	b2d2      	uxtb	r2, r2
 800970c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800970e:	4b20      	ldr	r3, [pc, #128]	@ (8009790 <HAL_RCC_ClockConfig+0x1b8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0307 	and.w	r3, r3, #7
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	429a      	cmp	r2, r3
 800971a:	d001      	beq.n	8009720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e032      	b.n	8009786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	d008      	beq.n	800973e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800972c:	4b19      	ldr	r3, [pc, #100]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	4916      	ldr	r1, [pc, #88]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 800973a:	4313      	orrs	r3, r2
 800973c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0308 	and.w	r3, r3, #8
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800974a:	4b12      	ldr	r3, [pc, #72]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	00db      	lsls	r3, r3, #3
 8009758:	490e      	ldr	r1, [pc, #56]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 800975a:	4313      	orrs	r3, r2
 800975c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800975e:	f000 f821 	bl	80097a4 <HAL_RCC_GetSysClockFreq>
 8009762:	4602      	mov	r2, r0
 8009764:	4b0b      	ldr	r3, [pc, #44]	@ (8009794 <HAL_RCC_ClockConfig+0x1bc>)
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	091b      	lsrs	r3, r3, #4
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	490a      	ldr	r1, [pc, #40]	@ (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 8009770:	5ccb      	ldrb	r3, [r1, r3]
 8009772:	fa22 f303 	lsr.w	r3, r2, r3
 8009776:	4a09      	ldr	r2, [pc, #36]	@ (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800977a:	4b09      	ldr	r3, [pc, #36]	@ (80097a0 <HAL_RCC_ClockConfig+0x1c8>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4618      	mov	r0, r3
 8009780:	f7f9 ffbe 	bl	8003700 <HAL_InitTick>

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	40023c00 	.word	0x40023c00
 8009794:	40023800 	.word	0x40023800
 8009798:	0801018c 	.word	0x0801018c
 800979c:	20000030 	.word	0x20000030
 80097a0:	20000034 	.word	0x20000034

080097a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097a8:	b090      	sub	sp, #64	@ 0x40
 80097aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097bc:	4b59      	ldr	r3, [pc, #356]	@ (8009924 <HAL_RCC_GetSysClockFreq+0x180>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f003 030c 	and.w	r3, r3, #12
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d00d      	beq.n	80097e4 <HAL_RCC_GetSysClockFreq+0x40>
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	f200 80a1 	bhi.w	8009910 <HAL_RCC_GetSysClockFreq+0x16c>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <HAL_RCC_GetSysClockFreq+0x34>
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d003      	beq.n	80097de <HAL_RCC_GetSysClockFreq+0x3a>
 80097d6:	e09b      	b.n	8009910 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097d8:	4b53      	ldr	r3, [pc, #332]	@ (8009928 <HAL_RCC_GetSysClockFreq+0x184>)
 80097da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80097dc:	e09b      	b.n	8009916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097de:	4b53      	ldr	r3, [pc, #332]	@ (800992c <HAL_RCC_GetSysClockFreq+0x188>)
 80097e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80097e2:	e098      	b.n	8009916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097e4:	4b4f      	ldr	r3, [pc, #316]	@ (8009924 <HAL_RCC_GetSysClockFreq+0x180>)
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097ee:	4b4d      	ldr	r3, [pc, #308]	@ (8009924 <HAL_RCC_GetSysClockFreq+0x180>)
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d028      	beq.n	800984c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097fa:	4b4a      	ldr	r3, [pc, #296]	@ (8009924 <HAL_RCC_GetSysClockFreq+0x180>)
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	099b      	lsrs	r3, r3, #6
 8009800:	2200      	movs	r2, #0
 8009802:	623b      	str	r3, [r7, #32]
 8009804:	627a      	str	r2, [r7, #36]	@ 0x24
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800980c:	2100      	movs	r1, #0
 800980e:	4b47      	ldr	r3, [pc, #284]	@ (800992c <HAL_RCC_GetSysClockFreq+0x188>)
 8009810:	fb03 f201 	mul.w	r2, r3, r1
 8009814:	2300      	movs	r3, #0
 8009816:	fb00 f303 	mul.w	r3, r0, r3
 800981a:	4413      	add	r3, r2
 800981c:	4a43      	ldr	r2, [pc, #268]	@ (800992c <HAL_RCC_GetSysClockFreq+0x188>)
 800981e:	fba0 1202 	umull	r1, r2, r0, r2
 8009822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009824:	460a      	mov	r2, r1
 8009826:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800982a:	4413      	add	r3, r2
 800982c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800982e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009830:	2200      	movs	r2, #0
 8009832:	61bb      	str	r3, [r7, #24]
 8009834:	61fa      	str	r2, [r7, #28]
 8009836:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800983a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800983e:	f7f7 f915 	bl	8000a6c <__aeabi_uldivmod>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4613      	mov	r3, r2
 8009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800984a:	e053      	b.n	80098f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800984c:	4b35      	ldr	r3, [pc, #212]	@ (8009924 <HAL_RCC_GetSysClockFreq+0x180>)
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	099b      	lsrs	r3, r3, #6
 8009852:	2200      	movs	r2, #0
 8009854:	613b      	str	r3, [r7, #16]
 8009856:	617a      	str	r2, [r7, #20]
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800985e:	f04f 0b00 	mov.w	fp, #0
 8009862:	4652      	mov	r2, sl
 8009864:	465b      	mov	r3, fp
 8009866:	f04f 0000 	mov.w	r0, #0
 800986a:	f04f 0100 	mov.w	r1, #0
 800986e:	0159      	lsls	r1, r3, #5
 8009870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009874:	0150      	lsls	r0, r2, #5
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	ebb2 080a 	subs.w	r8, r2, sl
 800987e:	eb63 090b 	sbc.w	r9, r3, fp
 8009882:	f04f 0200 	mov.w	r2, #0
 8009886:	f04f 0300 	mov.w	r3, #0
 800988a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800988e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009892:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009896:	ebb2 0408 	subs.w	r4, r2, r8
 800989a:	eb63 0509 	sbc.w	r5, r3, r9
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	f04f 0300 	mov.w	r3, #0
 80098a6:	00eb      	lsls	r3, r5, #3
 80098a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098ac:	00e2      	lsls	r2, r4, #3
 80098ae:	4614      	mov	r4, r2
 80098b0:	461d      	mov	r5, r3
 80098b2:	eb14 030a 	adds.w	r3, r4, sl
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	eb45 030b 	adc.w	r3, r5, fp
 80098bc:	607b      	str	r3, [r7, #4]
 80098be:	f04f 0200 	mov.w	r2, #0
 80098c2:	f04f 0300 	mov.w	r3, #0
 80098c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80098ca:	4629      	mov	r1, r5
 80098cc:	028b      	lsls	r3, r1, #10
 80098ce:	4621      	mov	r1, r4
 80098d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098d4:	4621      	mov	r1, r4
 80098d6:	028a      	lsls	r2, r1, #10
 80098d8:	4610      	mov	r0, r2
 80098da:	4619      	mov	r1, r3
 80098dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098de:	2200      	movs	r2, #0
 80098e0:	60bb      	str	r3, [r7, #8]
 80098e2:	60fa      	str	r2, [r7, #12]
 80098e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098e8:	f7f7 f8c0 	bl	8000a6c <__aeabi_uldivmod>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	4613      	mov	r3, r2
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80098f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009924 <HAL_RCC_GetSysClockFreq+0x180>)
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	0c1b      	lsrs	r3, r3, #16
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	3301      	adds	r3, #1
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009904:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	fbb2 f3f3 	udiv	r3, r2, r3
 800990c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800990e:	e002      	b.n	8009916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009910:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <HAL_RCC_GetSysClockFreq+0x184>)
 8009912:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009918:	4618      	mov	r0, r3
 800991a:	3740      	adds	r7, #64	@ 0x40
 800991c:	46bd      	mov	sp, r7
 800991e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009922:	bf00      	nop
 8009924:	40023800 	.word	0x40023800
 8009928:	00f42400 	.word	0x00f42400
 800992c:	017d7840 	.word	0x017d7840

08009930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009934:	4b03      	ldr	r3, [pc, #12]	@ (8009944 <HAL_RCC_GetHCLKFreq+0x14>)
 8009936:	681b      	ldr	r3, [r3, #0]
}
 8009938:	4618      	mov	r0, r3
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	20000030 	.word	0x20000030

08009948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800994c:	f7ff fff0 	bl	8009930 <HAL_RCC_GetHCLKFreq>
 8009950:	4602      	mov	r2, r0
 8009952:	4b05      	ldr	r3, [pc, #20]	@ (8009968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	0a9b      	lsrs	r3, r3, #10
 8009958:	f003 0307 	and.w	r3, r3, #7
 800995c:	4903      	ldr	r1, [pc, #12]	@ (800996c <HAL_RCC_GetPCLK1Freq+0x24>)
 800995e:	5ccb      	ldrb	r3, [r1, r3]
 8009960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009964:	4618      	mov	r0, r3
 8009966:	bd80      	pop	{r7, pc}
 8009968:	40023800 	.word	0x40023800
 800996c:	0801019c 	.word	0x0801019c

08009970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e041      	b.n	8009a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7f9 fa4a 	bl	8002e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f000 fbce 	bl	800a150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d001      	beq.n	8009a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e044      	b.n	8009ab2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d018      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x6c>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a52:	d013      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x6c>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a1a      	ldr	r2, [pc, #104]	@ (8009ac4 <HAL_TIM_Base_Start_IT+0xb4>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d00e      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x6c>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a19      	ldr	r2, [pc, #100]	@ (8009ac8 <HAL_TIM_Base_Start_IT+0xb8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d009      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x6c>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a17      	ldr	r2, [pc, #92]	@ (8009acc <HAL_TIM_Base_Start_IT+0xbc>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d004      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x6c>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a16      	ldr	r2, [pc, #88]	@ (8009ad0 <HAL_TIM_Base_Start_IT+0xc0>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d111      	bne.n	8009aa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b06      	cmp	r3, #6
 8009a8c:	d010      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f042 0201 	orr.w	r2, r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9e:	e007      	b.n	8009ab0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f042 0201 	orr.w	r2, r2, #1
 8009aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	40010000 	.word	0x40010000
 8009ac4:	40000400 	.word	0x40000400
 8009ac8:	40000800 	.word	0x40000800
 8009acc:	40000c00 	.word	0x40000c00
 8009ad0:	40014000 	.word	0x40014000

08009ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e041      	b.n	8009b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f839 	bl	8009b72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	f000 fb1c 	bl	800a150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d020      	beq.n	8009bea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d01b      	beq.n	8009bea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f06f 0202 	mvn.w	r2, #2
 8009bba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fa9e 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009bd6:	e005      	b.n	8009be4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fa90 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 faa1 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f003 0304 	and.w	r3, r3, #4
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d020      	beq.n	8009c36 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01b      	beq.n	8009c36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f06f 0204 	mvn.w	r2, #4
 8009c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fa78 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009c22:	e005      	b.n	8009c30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fa6a 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa7b 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	f003 0308 	and.w	r3, r3, #8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d020      	beq.n	8009c82 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f003 0308 	and.w	r3, r3, #8
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d01b      	beq.n	8009c82 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f06f 0208 	mvn.w	r2, #8
 8009c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2204      	movs	r2, #4
 8009c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fa52 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009c6e:	e005      	b.n	8009c7c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fa44 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa55 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	f003 0310 	and.w	r3, r3, #16
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d020      	beq.n	8009cce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f003 0310 	and.w	r3, r3, #16
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d01b      	beq.n	8009cce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f06f 0210 	mvn.w	r2, #16
 8009c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2208      	movs	r2, #8
 8009ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa2c 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009cba:	e005      	b.n	8009cc8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fa1e 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa2f 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00c      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f06f 0201 	mvn.w	r2, #1
 8009cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7f7 f893 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00c      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d007      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fdd3 	bl	800a8bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00c      	beq.n	8009d3a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fa00 	bl	800a13a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f003 0320 	and.w	r3, r3, #32
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00c      	beq.n	8009d5e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d007      	beq.n	8009d5e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f06f 0220 	mvn.w	r2, #32
 8009d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fda5 	bl	800a8a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e0ae      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b0c      	cmp	r3, #12
 8009d92:	f200 809f 	bhi.w	8009ed4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d96:	a201      	add	r2, pc, #4	@ (adr r2, 8009d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009dd1 	.word	0x08009dd1
 8009da0:	08009ed5 	.word	0x08009ed5
 8009da4:	08009ed5 	.word	0x08009ed5
 8009da8:	08009ed5 	.word	0x08009ed5
 8009dac:	08009e11 	.word	0x08009e11
 8009db0:	08009ed5 	.word	0x08009ed5
 8009db4:	08009ed5 	.word	0x08009ed5
 8009db8:	08009ed5 	.word	0x08009ed5
 8009dbc:	08009e53 	.word	0x08009e53
 8009dc0:	08009ed5 	.word	0x08009ed5
 8009dc4:	08009ed5 	.word	0x08009ed5
 8009dc8:	08009ed5 	.word	0x08009ed5
 8009dcc:	08009e93 	.word	0x08009e93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68b9      	ldr	r1, [r7, #8]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 fa40 	bl	800a25c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	699a      	ldr	r2, [r3, #24]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0208 	orr.w	r2, r2, #8
 8009dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f022 0204 	bic.w	r2, r2, #4
 8009dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6999      	ldr	r1, [r3, #24]
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	619a      	str	r2, [r3, #24]
      break;
 8009e0e:	e064      	b.n	8009eda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fa86 	bl	800a328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	699a      	ldr	r2, [r3, #24]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	699a      	ldr	r2, [r3, #24]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6999      	ldr	r1, [r3, #24]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	021a      	lsls	r2, r3, #8
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	430a      	orrs	r2, r1
 8009e4e:	619a      	str	r2, [r3, #24]
      break;
 8009e50:	e043      	b.n	8009eda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68b9      	ldr	r1, [r7, #8]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fad1 	bl	800a400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69da      	ldr	r2, [r3, #28]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f042 0208 	orr.w	r2, r2, #8
 8009e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69da      	ldr	r2, [r3, #28]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0204 	bic.w	r2, r2, #4
 8009e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69d9      	ldr	r1, [r3, #28]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	691a      	ldr	r2, [r3, #16]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	61da      	str	r2, [r3, #28]
      break;
 8009e90:	e023      	b.n	8009eda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fb1b 	bl	800a4d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69da      	ldr	r2, [r3, #28]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69da      	ldr	r2, [r3, #28]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	69d9      	ldr	r1, [r3, #28]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	021a      	lsls	r2, r3, #8
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	61da      	str	r2, [r3, #28]
      break;
 8009ed2:	e002      	b.n	8009eda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_TIM_ConfigClockSource+0x1c>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e0b4      	b.n	800a072 <HAL_TIM_ConfigClockSource+0x186>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f40:	d03e      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0xd4>
 8009f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f46:	f200 8087 	bhi.w	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f4e:	f000 8086 	beq.w	800a05e <HAL_TIM_ConfigClockSource+0x172>
 8009f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f56:	d87f      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f58:	2b70      	cmp	r3, #112	@ 0x70
 8009f5a:	d01a      	beq.n	8009f92 <HAL_TIM_ConfigClockSource+0xa6>
 8009f5c:	2b70      	cmp	r3, #112	@ 0x70
 8009f5e:	d87b      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f60:	2b60      	cmp	r3, #96	@ 0x60
 8009f62:	d050      	beq.n	800a006 <HAL_TIM_ConfigClockSource+0x11a>
 8009f64:	2b60      	cmp	r3, #96	@ 0x60
 8009f66:	d877      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f68:	2b50      	cmp	r3, #80	@ 0x50
 8009f6a:	d03c      	beq.n	8009fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8009f6c:	2b50      	cmp	r3, #80	@ 0x50
 8009f6e:	d873      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f70:	2b40      	cmp	r3, #64	@ 0x40
 8009f72:	d058      	beq.n	800a026 <HAL_TIM_ConfigClockSource+0x13a>
 8009f74:	2b40      	cmp	r3, #64	@ 0x40
 8009f76:	d86f      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f78:	2b30      	cmp	r3, #48	@ 0x30
 8009f7a:	d064      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0x15a>
 8009f7c:	2b30      	cmp	r3, #48	@ 0x30
 8009f7e:	d86b      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f80:	2b20      	cmp	r3, #32
 8009f82:	d060      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0x15a>
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	d867      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d05c      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0x15a>
 8009f8c:	2b10      	cmp	r3, #16
 8009f8e:	d05a      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0x15a>
 8009f90:	e062      	b.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fa2:	f000 fbf2 	bl	800a78a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009fb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	609a      	str	r2, [r3, #8]
      break;
 8009fbe:	e04f      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fd0:	f000 fbdb 	bl	800a78a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	689a      	ldr	r2, [r3, #8]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fe2:	609a      	str	r2, [r3, #8]
      break;
 8009fe4:	e03c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f000 fb4f 	bl	800a696 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2150      	movs	r1, #80	@ 0x50
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fba8 	bl	800a754 <TIM_ITRx_SetConfig>
      break;
 800a004:	e02c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a012:	461a      	mov	r2, r3
 800a014:	f000 fb6e 	bl	800a6f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2160      	movs	r1, #96	@ 0x60
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fb98 	bl	800a754 <TIM_ITRx_SetConfig>
      break;
 800a024:	e01c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a032:	461a      	mov	r2, r3
 800a034:	f000 fb2f 	bl	800a696 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2140      	movs	r1, #64	@ 0x40
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 fb88 	bl	800a754 <TIM_ITRx_SetConfig>
      break;
 800a044:	e00c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4619      	mov	r1, r3
 800a050:	4610      	mov	r0, r2
 800a052:	f000 fb7f 	bl	800a754 <TIM_ITRx_SetConfig>
      break;
 800a056:	e003      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	73fb      	strb	r3, [r7, #15]
      break;
 800a05c:	e000      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a05e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a070:	7bfb      	ldrb	r3, [r7, #15]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b082      	sub	sp, #8
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d101      	bne.n	800a092 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a08e:	2302      	movs	r3, #2
 800a090:	e031      	b.n	800a0f6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2202      	movs	r2, #2
 800a09e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fa65 	bl	800a574 <TIM_SlaveTimer_SetConfig>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d009      	beq.n	800a0c4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e018      	b.n	800a0f6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0d2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68da      	ldr	r2, [r3, #12]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a0e2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a106:	bf00      	nop
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a142:	bf00      	nop
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a37      	ldr	r2, [pc, #220]	@ (800a240 <TIM_Base_SetConfig+0xf0>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d00f      	beq.n	800a188 <TIM_Base_SetConfig+0x38>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a16e:	d00b      	beq.n	800a188 <TIM_Base_SetConfig+0x38>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a34      	ldr	r2, [pc, #208]	@ (800a244 <TIM_Base_SetConfig+0xf4>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d007      	beq.n	800a188 <TIM_Base_SetConfig+0x38>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a33      	ldr	r2, [pc, #204]	@ (800a248 <TIM_Base_SetConfig+0xf8>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d003      	beq.n	800a188 <TIM_Base_SetConfig+0x38>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a32      	ldr	r2, [pc, #200]	@ (800a24c <TIM_Base_SetConfig+0xfc>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d108      	bne.n	800a19a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a18e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a28      	ldr	r2, [pc, #160]	@ (800a240 <TIM_Base_SetConfig+0xf0>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d01b      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a8:	d017      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a25      	ldr	r2, [pc, #148]	@ (800a244 <TIM_Base_SetConfig+0xf4>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d013      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a24      	ldr	r2, [pc, #144]	@ (800a248 <TIM_Base_SetConfig+0xf8>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d00f      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a23      	ldr	r2, [pc, #140]	@ (800a24c <TIM_Base_SetConfig+0xfc>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d00b      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a22      	ldr	r2, [pc, #136]	@ (800a250 <TIM_Base_SetConfig+0x100>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d007      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a21      	ldr	r2, [pc, #132]	@ (800a254 <TIM_Base_SetConfig+0x104>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d003      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a20      	ldr	r2, [pc, #128]	@ (800a258 <TIM_Base_SetConfig+0x108>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d108      	bne.n	800a1ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a0c      	ldr	r2, [pc, #48]	@ (800a240 <TIM_Base_SetConfig+0xf0>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d103      	bne.n	800a21a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	691a      	ldr	r2, [r3, #16]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f043 0204 	orr.w	r2, r3, #4
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	601a      	str	r2, [r3, #0]
}
 800a232:	bf00      	nop
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	40010000 	.word	0x40010000
 800a244:	40000400 	.word	0x40000400
 800a248:	40000800 	.word	0x40000800
 800a24c:	40000c00 	.word	0x40000c00
 800a250:	40014000 	.word	0x40014000
 800a254:	40014400 	.word	0x40014400
 800a258:	40014800 	.word	0x40014800

0800a25c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	f023 0201 	bic.w	r2, r3, #1
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 0303 	bic.w	r3, r3, #3
 800a292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f023 0302 	bic.w	r3, r3, #2
 800a2a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a1c      	ldr	r2, [pc, #112]	@ (800a324 <TIM_OC1_SetConfig+0xc8>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d10c      	bne.n	800a2d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f023 0308 	bic.w	r3, r3, #8
 800a2be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f023 0304 	bic.w	r3, r3, #4
 800a2d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a13      	ldr	r2, [pc, #76]	@ (800a324 <TIM_OC1_SetConfig+0xc8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d111      	bne.n	800a2fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	621a      	str	r2, [r3, #32]
}
 800a318:	bf00      	nop
 800a31a:	371c      	adds	r7, #28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	40010000 	.word	0x40010000

0800a328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a328:	b480      	push	{r7}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a1b      	ldr	r3, [r3, #32]
 800a33c:	f023 0210 	bic.w	r2, r3, #16
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	4313      	orrs	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f023 0320 	bic.w	r3, r3, #32
 800a372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	011b      	lsls	r3, r3, #4
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a1e      	ldr	r2, [pc, #120]	@ (800a3fc <TIM_OC2_SetConfig+0xd4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d10d      	bne.n	800a3a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a38e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	011b      	lsls	r3, r3, #4
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	4313      	orrs	r3, r2
 800a39a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a15      	ldr	r2, [pc, #84]	@ (800a3fc <TIM_OC2_SetConfig+0xd4>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d113      	bne.n	800a3d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	621a      	str	r2, [r3, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	40010000 	.word	0x40010000

0800a400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f023 0303 	bic.w	r3, r3, #3
 800a436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d0 <TIM_OC3_SetConfig+0xd0>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d10d      	bne.n	800a47a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	4313      	orrs	r3, r2
 800a470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a14      	ldr	r2, [pc, #80]	@ (800a4d0 <TIM_OC3_SetConfig+0xd0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d113      	bne.n	800a4aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	621a      	str	r2, [r3, #32]
}
 800a4c4:	bf00      	nop
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	40010000 	.word	0x40010000

0800a4d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	4313      	orrs	r3, r2
 800a516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a51e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	031b      	lsls	r3, r3, #12
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4313      	orrs	r3, r2
 800a52a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a10      	ldr	r2, [pc, #64]	@ (800a570 <TIM_OC4_SetConfig+0x9c>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d109      	bne.n	800a548 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a53a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	019b      	lsls	r3, r3, #6
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	621a      	str	r2, [r3, #32]
}
 800a562:	bf00      	nop
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	40010000 	.word	0x40010000

0800a574 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a590:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	4313      	orrs	r3, r2
 800a59a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	f023 0307 	bic.w	r3, r3, #7
 800a5a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	2b70      	cmp	r3, #112	@ 0x70
 800a5bc:	d01a      	beq.n	800a5f4 <TIM_SlaveTimer_SetConfig+0x80>
 800a5be:	2b70      	cmp	r3, #112	@ 0x70
 800a5c0:	d860      	bhi.n	800a684 <TIM_SlaveTimer_SetConfig+0x110>
 800a5c2:	2b60      	cmp	r3, #96	@ 0x60
 800a5c4:	d054      	beq.n	800a670 <TIM_SlaveTimer_SetConfig+0xfc>
 800a5c6:	2b60      	cmp	r3, #96	@ 0x60
 800a5c8:	d85c      	bhi.n	800a684 <TIM_SlaveTimer_SetConfig+0x110>
 800a5ca:	2b50      	cmp	r3, #80	@ 0x50
 800a5cc:	d046      	beq.n	800a65c <TIM_SlaveTimer_SetConfig+0xe8>
 800a5ce:	2b50      	cmp	r3, #80	@ 0x50
 800a5d0:	d858      	bhi.n	800a684 <TIM_SlaveTimer_SetConfig+0x110>
 800a5d2:	2b40      	cmp	r3, #64	@ 0x40
 800a5d4:	d019      	beq.n	800a60a <TIM_SlaveTimer_SetConfig+0x96>
 800a5d6:	2b40      	cmp	r3, #64	@ 0x40
 800a5d8:	d854      	bhi.n	800a684 <TIM_SlaveTimer_SetConfig+0x110>
 800a5da:	2b30      	cmp	r3, #48	@ 0x30
 800a5dc:	d055      	beq.n	800a68a <TIM_SlaveTimer_SetConfig+0x116>
 800a5de:	2b30      	cmp	r3, #48	@ 0x30
 800a5e0:	d850      	bhi.n	800a684 <TIM_SlaveTimer_SetConfig+0x110>
 800a5e2:	2b20      	cmp	r3, #32
 800a5e4:	d051      	beq.n	800a68a <TIM_SlaveTimer_SetConfig+0x116>
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d84c      	bhi.n	800a684 <TIM_SlaveTimer_SetConfig+0x110>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d04d      	beq.n	800a68a <TIM_SlaveTimer_SetConfig+0x116>
 800a5ee:	2b10      	cmp	r3, #16
 800a5f0:	d04b      	beq.n	800a68a <TIM_SlaveTimer_SetConfig+0x116>
 800a5f2:	e047      	b.n	800a684 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a604:	f000 f8c1 	bl	800a78a <TIM_ETR_SetConfig>
      break;
 800a608:	e040      	b.n	800a68c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b05      	cmp	r3, #5
 800a610:	d101      	bne.n	800a616 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e03b      	b.n	800a68e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6a1a      	ldr	r2, [r3, #32]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0201 	bic.w	r2, r2, #1
 800a62c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a63c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	011b      	lsls	r3, r3, #4
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	4313      	orrs	r3, r2
 800a648:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	621a      	str	r2, [r3, #32]
      break;
 800a65a:	e017      	b.n	800a68c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a668:	461a      	mov	r2, r3
 800a66a:	f000 f814 	bl	800a696 <TIM_TI1_ConfigInputStage>
      break;
 800a66e:	e00d      	b.n	800a68c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a67c:	461a      	mov	r2, r3
 800a67e:	f000 f839 	bl	800a6f4 <TIM_TI2_ConfigInputStage>
      break;
 800a682:	e003      	b.n	800a68c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	75fb      	strb	r3, [r7, #23]
      break;
 800a688:	e000      	b.n	800a68c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a68a:	bf00      	nop
  }

  return status;
 800a68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a696:	b480      	push	{r7}
 800a698:	b087      	sub	sp, #28
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	60f8      	str	r0, [r7, #12]
 800a69e:	60b9      	str	r1, [r7, #8]
 800a6a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	f023 0201 	bic.w	r2, r3, #1
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	011b      	lsls	r3, r3, #4
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f023 030a 	bic.w	r3, r3, #10
 800a6d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	621a      	str	r2, [r3, #32]
}
 800a6e8:	bf00      	nop
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	f023 0210 	bic.w	r2, r3, #16
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a71e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	031b      	lsls	r3, r3, #12
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	4313      	orrs	r3, r2
 800a728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a730:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	011b      	lsls	r3, r3, #4
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	4313      	orrs	r3, r2
 800a73a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	621a      	str	r2, [r3, #32]
}
 800a748:	bf00      	nop
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a76a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4313      	orrs	r3, r2
 800a772:	f043 0307 	orr.w	r3, r3, #7
 800a776:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	609a      	str	r2, [r3, #8]
}
 800a77e:	bf00      	nop
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b087      	sub	sp, #28
 800a78e:	af00      	add	r7, sp, #0
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	607a      	str	r2, [r7, #4]
 800a796:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	021a      	lsls	r2, r3, #8
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	431a      	orrs	r2, r3
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	609a      	str	r2, [r3, #8]
}
 800a7be:	bf00      	nop
 800a7c0:	371c      	adds	r7, #28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
	...

0800a7cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d101      	bne.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	e050      	b.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a80a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	4313      	orrs	r3, r2
 800a814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a1c      	ldr	r2, [pc, #112]	@ (800a894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d018      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a830:	d013      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a18      	ldr	r2, [pc, #96]	@ (800a898 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00e      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a16      	ldr	r2, [pc, #88]	@ (800a89c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d009      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a15      	ldr	r2, [pc, #84]	@ (800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d004      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a13      	ldr	r2, [pc, #76]	@ (800a8a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d10c      	bne.n	800a874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	4313      	orrs	r3, r2
 800a86a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	40010000 	.word	0x40010000
 800a898:	40000400 	.word	0x40000400
 800a89c:	40000800 	.word	0x40000800
 800a8a0:	40000c00 	.word	0x40000c00
 800a8a4:	40014000 	.word	0x40014000

0800a8a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	f107 001c 	add.w	r0, r7, #28
 800a8de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d123      	bne.n	800a932 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a8fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a912:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a916:	2b01      	cmp	r3, #1
 800a918:	d105      	bne.n	800a926 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f001 fae8 	bl	800befc <USB_CoreReset>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]
 800a930:	e01b      	b.n	800a96a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 fadc 	bl	800befc <USB_CoreReset>
 800a944:	4603      	mov	r3, r0
 800a946:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a948:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d106      	bne.n	800a95e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a954:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a95c:	e005      	b.n	800a96a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a962:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a96a:	7fbb      	ldrb	r3, [r7, #30]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d10b      	bne.n	800a988 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f043 0206 	orr.w	r2, r3, #6
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f043 0220 	orr.w	r2, r3, #32
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a988:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a994:	b004      	add	sp, #16
 800a996:	4770      	bx	lr

0800a998 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d165      	bne.n	800aa78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	4a41      	ldr	r2, [pc, #260]	@ (800aab4 <USB_SetTurnaroundTime+0x11c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d906      	bls.n	800a9c2 <USB_SetTurnaroundTime+0x2a>
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4a40      	ldr	r2, [pc, #256]	@ (800aab8 <USB_SetTurnaroundTime+0x120>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d202      	bcs.n	800a9c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a9bc:	230f      	movs	r3, #15
 800a9be:	617b      	str	r3, [r7, #20]
 800a9c0:	e062      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	4a3c      	ldr	r2, [pc, #240]	@ (800aab8 <USB_SetTurnaroundTime+0x120>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d306      	bcc.n	800a9d8 <USB_SetTurnaroundTime+0x40>
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	4a3b      	ldr	r2, [pc, #236]	@ (800aabc <USB_SetTurnaroundTime+0x124>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d202      	bcs.n	800a9d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a9d2:	230e      	movs	r3, #14
 800a9d4:	617b      	str	r3, [r7, #20]
 800a9d6:	e057      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	4a38      	ldr	r2, [pc, #224]	@ (800aabc <USB_SetTurnaroundTime+0x124>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d306      	bcc.n	800a9ee <USB_SetTurnaroundTime+0x56>
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	4a37      	ldr	r2, [pc, #220]	@ (800aac0 <USB_SetTurnaroundTime+0x128>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d202      	bcs.n	800a9ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a9e8:	230d      	movs	r3, #13
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	e04c      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	4a33      	ldr	r2, [pc, #204]	@ (800aac0 <USB_SetTurnaroundTime+0x128>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d306      	bcc.n	800aa04 <USB_SetTurnaroundTime+0x6c>
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	4a32      	ldr	r2, [pc, #200]	@ (800aac4 <USB_SetTurnaroundTime+0x12c>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d802      	bhi.n	800aa04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a9fe:	230c      	movs	r3, #12
 800aa00:	617b      	str	r3, [r7, #20]
 800aa02:	e041      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	4a2f      	ldr	r2, [pc, #188]	@ (800aac4 <USB_SetTurnaroundTime+0x12c>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d906      	bls.n	800aa1a <USB_SetTurnaroundTime+0x82>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	4a2e      	ldr	r2, [pc, #184]	@ (800aac8 <USB_SetTurnaroundTime+0x130>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d802      	bhi.n	800aa1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aa14:	230b      	movs	r3, #11
 800aa16:	617b      	str	r3, [r7, #20]
 800aa18:	e036      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	4a2a      	ldr	r2, [pc, #168]	@ (800aac8 <USB_SetTurnaroundTime+0x130>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d906      	bls.n	800aa30 <USB_SetTurnaroundTime+0x98>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	4a29      	ldr	r2, [pc, #164]	@ (800aacc <USB_SetTurnaroundTime+0x134>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d802      	bhi.n	800aa30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aa2a:	230a      	movs	r3, #10
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	e02b      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	4a26      	ldr	r2, [pc, #152]	@ (800aacc <USB_SetTurnaroundTime+0x134>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d906      	bls.n	800aa46 <USB_SetTurnaroundTime+0xae>
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4a25      	ldr	r2, [pc, #148]	@ (800aad0 <USB_SetTurnaroundTime+0x138>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d202      	bcs.n	800aa46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aa40:	2309      	movs	r3, #9
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	e020      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	4a21      	ldr	r2, [pc, #132]	@ (800aad0 <USB_SetTurnaroundTime+0x138>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d306      	bcc.n	800aa5c <USB_SetTurnaroundTime+0xc4>
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	4a20      	ldr	r2, [pc, #128]	@ (800aad4 <USB_SetTurnaroundTime+0x13c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d802      	bhi.n	800aa5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aa56:	2308      	movs	r3, #8
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	e015      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	4a1d      	ldr	r2, [pc, #116]	@ (800aad4 <USB_SetTurnaroundTime+0x13c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d906      	bls.n	800aa72 <USB_SetTurnaroundTime+0xda>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	4a1c      	ldr	r2, [pc, #112]	@ (800aad8 <USB_SetTurnaroundTime+0x140>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d202      	bcs.n	800aa72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aa6c:	2307      	movs	r3, #7
 800aa6e:	617b      	str	r3, [r7, #20]
 800aa70:	e00a      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aa72:	2306      	movs	r3, #6
 800aa74:	617b      	str	r3, [r7, #20]
 800aa76:	e007      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aa78:	79fb      	ldrb	r3, [r7, #7]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d102      	bne.n	800aa84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aa7e:	2309      	movs	r3, #9
 800aa80:	617b      	str	r3, [r7, #20]
 800aa82:	e001      	b.n	800aa88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aa84:	2309      	movs	r3, #9
 800aa86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	68da      	ldr	r2, [r3, #12]
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	029b      	lsls	r3, r3, #10
 800aa9c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	00d8acbf 	.word	0x00d8acbf
 800aab8:	00e4e1c0 	.word	0x00e4e1c0
 800aabc:	00f42400 	.word	0x00f42400
 800aac0:	01067380 	.word	0x01067380
 800aac4:	011a499f 	.word	0x011a499f
 800aac8:	01312cff 	.word	0x01312cff
 800aacc:	014ca43f 	.word	0x014ca43f
 800aad0:	016e3600 	.word	0x016e3600
 800aad4:	01a6ab1f 	.word	0x01a6ab1f
 800aad8:	01e84800 	.word	0x01e84800

0800aadc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	f043 0201 	orr.w	r2, r3, #1
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	f023 0201 	bic.w	r2, r3, #1
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d115      	bne.n	800ab6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab4e:	200a      	movs	r0, #10
 800ab50:	f7f8 fe26 	bl	80037a0 <HAL_Delay>
      ms += 10U;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	330a      	adds	r3, #10
 800ab58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 f93f 	bl	800bdde <USB_GetMode>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d01e      	beq.n	800aba4 <USB_SetCurrentMode+0x84>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab6a:	d9f0      	bls.n	800ab4e <USB_SetCurrentMode+0x2e>
 800ab6c:	e01a      	b.n	800aba4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab6e:	78fb      	ldrb	r3, [r7, #3]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d115      	bne.n	800aba0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab80:	200a      	movs	r0, #10
 800ab82:	f7f8 fe0d 	bl	80037a0 <HAL_Delay>
      ms += 10U;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	330a      	adds	r3, #10
 800ab8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f001 f926 	bl	800bdde <USB_GetMode>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d005      	beq.n	800aba4 <USB_SetCurrentMode+0x84>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab9c:	d9f0      	bls.n	800ab80 <USB_SetCurrentMode+0x60>
 800ab9e:	e001      	b.n	800aba4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e005      	b.n	800abb0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2bc8      	cmp	r3, #200	@ 0xc8
 800aba8:	d101      	bne.n	800abae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abb8:	b084      	sub	sp, #16
 800abba:	b580      	push	{r7, lr}
 800abbc:	b086      	sub	sp, #24
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800abc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abd2:	2300      	movs	r3, #0
 800abd4:	613b      	str	r3, [r7, #16]
 800abd6:	e009      	b.n	800abec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	3340      	adds	r3, #64	@ 0x40
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	3301      	adds	r3, #1
 800abea:	613b      	str	r3, [r7, #16]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2b0e      	cmp	r3, #14
 800abf0:	d9f2      	bls.n	800abd8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800abf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d11c      	bne.n	800ac34 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac08:	f043 0302 	orr.w	r3, r3, #2
 800ac0c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac2a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac32:	e00b      	b.n	800ac4c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac38:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac44:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac52:	461a      	mov	r2, r3
 800ac54:	2300      	movs	r3, #0
 800ac56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d10d      	bne.n	800ac7c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d104      	bne.n	800ac72 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac68:	2100      	movs	r1, #0
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f968 	bl	800af40 <USB_SetDevSpeed>
 800ac70:	e008      	b.n	800ac84 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac72:	2101      	movs	r1, #1
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f963 	bl	800af40 <USB_SetDevSpeed>
 800ac7a:	e003      	b.n	800ac84 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac7c:	2103      	movs	r1, #3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f95e 	bl	800af40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac84:	2110      	movs	r1, #16
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f8fa 	bl	800ae80 <USB_FlushTxFifo>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f924 	bl	800aee4 <USB_FlushRxFifo>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acac:	461a      	mov	r2, r3
 800acae:	2300      	movs	r3, #0
 800acb0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acb8:	461a      	mov	r2, r3
 800acba:	2300      	movs	r3, #0
 800acbc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc4:	461a      	mov	r2, r3
 800acc6:	2300      	movs	r3, #0
 800acc8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acca:	2300      	movs	r3, #0
 800accc:	613b      	str	r3, [r7, #16]
 800acce:	e043      	b.n	800ad58 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ace2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ace6:	d118      	bne.n	800ad1a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acfa:	461a      	mov	r2, r3
 800acfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	e013      	b.n	800ad2c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad10:	461a      	mov	r2, r3
 800ad12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	e008      	b.n	800ad2c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	015a      	lsls	r2, r3, #5
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	4413      	add	r3, r2
 800ad22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad26:	461a      	mov	r2, r3
 800ad28:	2300      	movs	r3, #0
 800ad2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad38:	461a      	mov	r2, r3
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	3301      	adds	r3, #1
 800ad56:	613b      	str	r3, [r7, #16]
 800ad58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d3b5      	bcc.n	800acd0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]
 800ad68:	e043      	b.n	800adf2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad80:	d118      	bne.n	800adb4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad94:	461a      	mov	r2, r3
 800ad96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	e013      	b.n	800adc6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adaa:	461a      	mov	r2, r3
 800adac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	e008      	b.n	800adc6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc0:	461a      	mov	r2, r3
 800adc2:	2300      	movs	r3, #0
 800adc4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add2:	461a      	mov	r2, r3
 800add4:	2300      	movs	r3, #0
 800add6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade4:	461a      	mov	r2, r3
 800ade6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800adea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	3301      	adds	r3, #1
 800adf0:	613b      	str	r3, [r7, #16]
 800adf2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800adf6:	461a      	mov	r2, r3
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d3b5      	bcc.n	800ad6a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ae1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d105      	bne.n	800ae34 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	f043 0210 	orr.w	r2, r3, #16
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	699a      	ldr	r2, [r3, #24]
 800ae38:	4b10      	ldr	r3, [pc, #64]	@ (800ae7c <USB_DevInit+0x2c4>)
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	f043 0208 	orr.w	r2, r3, #8
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d107      	bne.n	800ae6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae64:	f043 0304 	orr.w	r3, r3, #4
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae78:	b004      	add	sp, #16
 800ae7a:	4770      	bx	lr
 800ae7c:	803c3800 	.word	0x803c3800

0800ae80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3301      	adds	r3, #1
 800ae92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae9a:	d901      	bls.n	800aea0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e01b      	b.n	800aed8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	daf2      	bge.n	800ae8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	019b      	lsls	r3, r3, #6
 800aeb0:	f043 0220 	orr.w	r2, r3, #32
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3301      	adds	r3, #1
 800aebc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aec4:	d901      	bls.n	800aeca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e006      	b.n	800aed8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	d0f0      	beq.n	800aeb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aefc:	d901      	bls.n	800af02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aefe:	2303      	movs	r3, #3
 800af00:	e018      	b.n	800af34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	daf2      	bge.n	800aef0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2210      	movs	r2, #16
 800af12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3301      	adds	r3, #1
 800af18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af20:	d901      	bls.n	800af26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800af22:	2303      	movs	r3, #3
 800af24:	e006      	b.n	800af34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	f003 0310 	and.w	r3, r3, #16
 800af2e:	2b10      	cmp	r3, #16
 800af30:	d0f0      	beq.n	800af14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af60:	4313      	orrs	r3, r2
 800af62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800af72:	b480      	push	{r7}
 800af74:	b087      	sub	sp, #28
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f003 0306 	and.w	r3, r3, #6
 800af8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d102      	bne.n	800af98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800af92:	2300      	movs	r3, #0
 800af94:	75fb      	strb	r3, [r7, #23]
 800af96:	e00a      	b.n	800afae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d002      	beq.n	800afa4 <USB_GetDevSpeed+0x32>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b06      	cmp	r3, #6
 800afa2:	d102      	bne.n	800afaa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800afa4:	2302      	movs	r3, #2
 800afa6:	75fb      	strb	r3, [r7, #23]
 800afa8:	e001      	b.n	800afae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800afaa:	230f      	movs	r3, #15
 800afac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800afae:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	371c      	adds	r7, #28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	785b      	ldrb	r3, [r3, #1]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d13a      	bne.n	800b04e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	f003 030f 	and.w	r3, r3, #15
 800afe8:	2101      	movs	r1, #1
 800afea:	fa01 f303 	lsl.w	r3, r1, r3
 800afee:	b29b      	uxth	r3, r3
 800aff0:	68f9      	ldr	r1, [r7, #12]
 800aff2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aff6:	4313      	orrs	r3, r2
 800aff8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d155      	bne.n	800b0bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	791b      	ldrb	r3, [r3, #4]
 800b02a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b02c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	059b      	lsls	r3, r3, #22
 800b032:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b034:	4313      	orrs	r3, r2
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	0151      	lsls	r1, r2, #5
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	440a      	add	r2, r1
 800b03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	e036      	b.n	800b0bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b054:	69da      	ldr	r2, [r3, #28]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	f003 030f 	and.w	r3, r3, #15
 800b05e:	2101      	movs	r1, #1
 800b060:	fa01 f303 	lsl.w	r3, r1, r3
 800b064:	041b      	lsls	r3, r3, #16
 800b066:	68f9      	ldr	r1, [r7, #12]
 800b068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b06c:	4313      	orrs	r3, r2
 800b06e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	4413      	add	r3, r2
 800b078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d11a      	bne.n	800b0bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	791b      	ldrb	r3, [r3, #4]
 800b0a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b0a2:	430b      	orrs	r3, r1
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	0151      	lsls	r1, r2, #5
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	440a      	add	r2, r1
 800b0ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
	...

0800b0cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	785b      	ldrb	r3, [r3, #1]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d161      	bne.n	800b1ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	015a      	lsls	r2, r3, #5
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0fe:	d11f      	bne.n	800b140 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	015a      	lsls	r2, r3, #5
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4413      	add	r3, r2
 800b108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	0151      	lsls	r1, r2, #5
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	440a      	add	r2, r1
 800b116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b11a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b11e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	0151      	lsls	r1, r2, #5
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	440a      	add	r2, r1
 800b136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b13a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b13e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	f003 030f 	and.w	r3, r3, #15
 800b150:	2101      	movs	r1, #1
 800b152:	fa01 f303 	lsl.w	r3, r1, r3
 800b156:	b29b      	uxth	r3, r3
 800b158:	43db      	mvns	r3, r3
 800b15a:	68f9      	ldr	r1, [r7, #12]
 800b15c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b160:	4013      	ands	r3, r2
 800b162:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b16a:	69da      	ldr	r2, [r3, #28]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	f003 030f 	and.w	r3, r3, #15
 800b174:	2101      	movs	r1, #1
 800b176:	fa01 f303 	lsl.w	r3, r1, r3
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	43db      	mvns	r3, r3
 800b17e:	68f9      	ldr	r1, [r7, #12]
 800b180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b184:	4013      	ands	r3, r2
 800b186:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	0159      	lsls	r1, r3, #5
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	440b      	add	r3, r1
 800b19e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	4b35      	ldr	r3, [pc, #212]	@ (800b27c <USB_DeactivateEndpoint+0x1b0>)
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	600b      	str	r3, [r1, #0]
 800b1aa:	e060      	b.n	800b26e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	015a      	lsls	r2, r3, #5
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1c2:	d11f      	bne.n	800b204 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68ba      	ldr	r2, [r7, #8]
 800b1d4:	0151      	lsls	r1, r2, #5
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	440a      	add	r2, r1
 800b1da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b202:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b20a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f003 030f 	and.w	r3, r3, #15
 800b214:	2101      	movs	r1, #1
 800b216:	fa01 f303 	lsl.w	r3, r1, r3
 800b21a:	041b      	lsls	r3, r3, #16
 800b21c:	43db      	mvns	r3, r3
 800b21e:	68f9      	ldr	r1, [r7, #12]
 800b220:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b224:	4013      	ands	r3, r2
 800b226:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b22e:	69da      	ldr	r2, [r3, #28]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f003 030f 	and.w	r3, r3, #15
 800b238:	2101      	movs	r1, #1
 800b23a:	fa01 f303 	lsl.w	r3, r1, r3
 800b23e:	041b      	lsls	r3, r3, #16
 800b240:	43db      	mvns	r3, r3
 800b242:	68f9      	ldr	r1, [r7, #12]
 800b244:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b248:	4013      	ands	r3, r2
 800b24a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	0159      	lsls	r1, r3, #5
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	440b      	add	r3, r1
 800b262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b266:	4619      	mov	r1, r3
 800b268:	4b05      	ldr	r3, [pc, #20]	@ (800b280 <USB_DeactivateEndpoint+0x1b4>)
 800b26a:	4013      	ands	r3, r2
 800b26c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	ec337800 	.word	0xec337800
 800b280:	eff37800 	.word	0xeff37800

0800b284 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08a      	sub	sp, #40	@ 0x28
 800b288:	af02      	add	r7, sp, #8
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	785b      	ldrb	r3, [r3, #1]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	f040 817f 	bne.w	800b5a4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d132      	bne.n	800b314 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	015a      	lsls	r2, r3, #5
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	0151      	lsls	r1, r2, #5
 800b2c0:	69fa      	ldr	r2, [r7, #28]
 800b2c2:	440a      	add	r2, r1
 800b2c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2c8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b2cc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b2d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	0151      	lsls	r1, r2, #5
 800b2e4:	69fa      	ldr	r2, [r7, #28]
 800b2e6:	440a      	add	r2, r1
 800b2e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	015a      	lsls	r2, r3, #5
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	0151      	lsls	r1, r2, #5
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	440a      	add	r2, r1
 800b308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b30c:	0cdb      	lsrs	r3, r3, #19
 800b30e:	04db      	lsls	r3, r3, #19
 800b310:	6113      	str	r3, [r2, #16]
 800b312:	e097      	b.n	800b444 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	015a      	lsls	r2, r3, #5
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	0151      	lsls	r1, r2, #5
 800b326:	69fa      	ldr	r2, [r7, #28]
 800b328:	440a      	add	r2, r1
 800b32a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b32e:	0cdb      	lsrs	r3, r3, #19
 800b330:	04db      	lsls	r3, r3, #19
 800b332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	69ba      	ldr	r2, [r7, #24]
 800b344:	0151      	lsls	r1, r2, #5
 800b346:	69fa      	ldr	r2, [r7, #28]
 800b348:	440a      	add	r2, r1
 800b34a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b34e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b352:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b356:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d11a      	bne.n	800b394 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	691a      	ldr	r2, [r3, #16]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	429a      	cmp	r2, r3
 800b368:	d903      	bls.n	800b372 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	69ba      	ldr	r2, [r7, #24]
 800b382:	0151      	lsls	r1, r2, #5
 800b384:	69fa      	ldr	r2, [r7, #28]
 800b386:	440a      	add	r2, r1
 800b388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b38c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b390:	6113      	str	r3, [r2, #16]
 800b392:	e044      	b.n	800b41e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	691a      	ldr	r2, [r3, #16]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	4413      	add	r3, r2
 800b39e:	1e5a      	subs	r2, r3, #1
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3b6:	691a      	ldr	r2, [r3, #16]
 800b3b8:	8afb      	ldrh	r3, [r7, #22]
 800b3ba:	04d9      	lsls	r1, r3, #19
 800b3bc:	4ba4      	ldr	r3, [pc, #656]	@ (800b650 <USB_EPStartXfer+0x3cc>)
 800b3be:	400b      	ands	r3, r1
 800b3c0:	69b9      	ldr	r1, [r7, #24]
 800b3c2:	0148      	lsls	r0, r1, #5
 800b3c4:	69f9      	ldr	r1, [r7, #28]
 800b3c6:	4401      	add	r1, r0
 800b3c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	791b      	ldrb	r3, [r3, #4]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d122      	bne.n	800b41e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	69ba      	ldr	r2, [r7, #24]
 800b3e8:	0151      	lsls	r1, r2, #5
 800b3ea:	69fa      	ldr	r2, [r7, #28]
 800b3ec:	440a      	add	r2, r1
 800b3ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3f2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b3f6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b404:	691a      	ldr	r2, [r3, #16]
 800b406:	8afb      	ldrh	r3, [r7, #22]
 800b408:	075b      	lsls	r3, r3, #29
 800b40a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b40e:	69b9      	ldr	r1, [r7, #24]
 800b410:	0148      	lsls	r0, r1, #5
 800b412:	69f9      	ldr	r1, [r7, #28]
 800b414:	4401      	add	r1, r0
 800b416:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b41a:	4313      	orrs	r3, r2
 800b41c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b42a:	691a      	ldr	r2, [r3, #16]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b434:	69b9      	ldr	r1, [r7, #24]
 800b436:	0148      	lsls	r0, r1, #5
 800b438:	69f9      	ldr	r1, [r7, #28]
 800b43a:	4401      	add	r1, r0
 800b43c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b440:	4313      	orrs	r3, r2
 800b442:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b444:	79fb      	ldrb	r3, [r7, #7]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d14b      	bne.n	800b4e2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d009      	beq.n	800b466 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	015a      	lsls	r2, r3, #5
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	4413      	add	r3, r2
 800b45a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b45e:	461a      	mov	r2, r3
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	791b      	ldrb	r3, [r3, #4]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d128      	bne.n	800b4c0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d110      	bne.n	800b4a0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	4413      	add	r3, r2
 800b486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	69ba      	ldr	r2, [r7, #24]
 800b48e:	0151      	lsls	r1, r2, #5
 800b490:	69fa      	ldr	r2, [r7, #28]
 800b492:	440a      	add	r2, r1
 800b494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b498:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	e00f      	b.n	800b4c0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	0151      	lsls	r1, r2, #5
 800b4b2:	69fa      	ldr	r2, [r7, #28]
 800b4b4:	440a      	add	r2, r1
 800b4b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4be:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	0151      	lsls	r1, r2, #5
 800b4d2:	69fa      	ldr	r2, [r7, #28]
 800b4d4:	440a      	add	r2, r1
 800b4d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	e166      	b.n	800b7b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	015a      	lsls	r2, r3, #5
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	0151      	lsls	r1, r2, #5
 800b4f4:	69fa      	ldr	r2, [r7, #28]
 800b4f6:	440a      	add	r2, r1
 800b4f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b500:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	791b      	ldrb	r3, [r3, #4]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d015      	beq.n	800b536 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f000 814e 	beq.w	800b7b0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b51a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 030f 	and.w	r3, r3, #15
 800b524:	2101      	movs	r1, #1
 800b526:	fa01 f303 	lsl.w	r3, r1, r3
 800b52a:	69f9      	ldr	r1, [r7, #28]
 800b52c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b530:	4313      	orrs	r3, r2
 800b532:	634b      	str	r3, [r1, #52]	@ 0x34
 800b534:	e13c      	b.n	800b7b0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b542:	2b00      	cmp	r3, #0
 800b544:	d110      	bne.n	800b568 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	0151      	lsls	r1, r2, #5
 800b558:	69fa      	ldr	r2, [r7, #28]
 800b55a:	440a      	add	r2, r1
 800b55c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b560:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	e00f      	b.n	800b588 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	0151      	lsls	r1, r2, #5
 800b57a:	69fa      	ldr	r2, [r7, #28]
 800b57c:	440a      	add	r2, r1
 800b57e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b586:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	68d9      	ldr	r1, [r3, #12]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	781a      	ldrb	r2, [r3, #0]
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	b298      	uxth	r0, r3
 800b596:	79fb      	ldrb	r3, [r7, #7]
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	4603      	mov	r3, r0
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f000 f9b9 	bl	800b914 <USB_WritePacket>
 800b5a2:	e105      	b.n	800b7b0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	0151      	lsls	r1, r2, #5
 800b5b6:	69fa      	ldr	r2, [r7, #28]
 800b5b8:	440a      	add	r2, r1
 800b5ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5be:	0cdb      	lsrs	r3, r3, #19
 800b5c0:	04db      	lsls	r3, r3, #19
 800b5c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	015a      	lsls	r2, r3, #5
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	69ba      	ldr	r2, [r7, #24]
 800b5d4:	0151      	lsls	r1, r2, #5
 800b5d6:	69fa      	ldr	r2, [r7, #28]
 800b5d8:	440a      	add	r2, r1
 800b5da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b5e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b5e6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d132      	bne.n	800b654 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	689a      	ldr	r2, [r3, #8]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	689a      	ldr	r2, [r3, #8]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	015a      	lsls	r2, r3, #5
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	4413      	add	r3, r2
 800b60e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b61c:	69b9      	ldr	r1, [r7, #24]
 800b61e:	0148      	lsls	r0, r1, #5
 800b620:	69f9      	ldr	r1, [r7, #28]
 800b622:	4401      	add	r1, r0
 800b624:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b628:	4313      	orrs	r3, r2
 800b62a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	015a      	lsls	r2, r3, #5
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	4413      	add	r3, r2
 800b634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	69ba      	ldr	r2, [r7, #24]
 800b63c:	0151      	lsls	r1, r2, #5
 800b63e:	69fa      	ldr	r2, [r7, #28]
 800b640:	440a      	add	r2, r1
 800b642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b646:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b64a:	6113      	str	r3, [r2, #16]
 800b64c:	e062      	b.n	800b714 <USB_EPStartXfer+0x490>
 800b64e:	bf00      	nop
 800b650:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d123      	bne.n	800b6a4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	015a      	lsls	r2, r3, #5
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	4413      	add	r3, r2
 800b664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b668:	691a      	ldr	r2, [r3, #16]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b672:	69b9      	ldr	r1, [r7, #24]
 800b674:	0148      	lsls	r0, r1, #5
 800b676:	69f9      	ldr	r1, [r7, #28]
 800b678:	4401      	add	r1, r0
 800b67a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b67e:	4313      	orrs	r3, r2
 800b680:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	69ba      	ldr	r2, [r7, #24]
 800b692:	0151      	lsls	r1, r2, #5
 800b694:	69fa      	ldr	r2, [r7, #28]
 800b696:	440a      	add	r2, r1
 800b698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b69c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6a0:	6113      	str	r3, [r2, #16]
 800b6a2:	e037      	b.n	800b714 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	691a      	ldr	r2, [r3, #16]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	1e5a      	subs	r2, r3, #1
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	8afa      	ldrh	r2, [r7, #22]
 800b6c0:	fb03 f202 	mul.w	r2, r3, r2
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6d4:	691a      	ldr	r2, [r3, #16]
 800b6d6:	8afb      	ldrh	r3, [r7, #22]
 800b6d8:	04d9      	lsls	r1, r3, #19
 800b6da:	4b38      	ldr	r3, [pc, #224]	@ (800b7bc <USB_EPStartXfer+0x538>)
 800b6dc:	400b      	ands	r3, r1
 800b6de:	69b9      	ldr	r1, [r7, #24]
 800b6e0:	0148      	lsls	r0, r1, #5
 800b6e2:	69f9      	ldr	r1, [r7, #28]
 800b6e4:	4401      	add	r1, r0
 800b6e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	015a      	lsls	r2, r3, #5
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6fa:	691a      	ldr	r2, [r3, #16]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b704:	69b9      	ldr	r1, [r7, #24]
 800b706:	0148      	lsls	r0, r1, #5
 800b708:	69f9      	ldr	r1, [r7, #28]
 800b70a:	4401      	add	r1, r0
 800b70c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b710:	4313      	orrs	r3, r2
 800b712:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	2b01      	cmp	r3, #1
 800b718:	d10d      	bne.n	800b736 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d009      	beq.n	800b736 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	68d9      	ldr	r1, [r3, #12]
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	015a      	lsls	r2, r3, #5
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	4413      	add	r3, r2
 800b72e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b732:	460a      	mov	r2, r1
 800b734:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	791b      	ldrb	r3, [r3, #4]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d128      	bne.n	800b790 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d110      	bne.n	800b770 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	0151      	lsls	r1, r2, #5
 800b760:	69fa      	ldr	r2, [r7, #28]
 800b762:	440a      	add	r2, r1
 800b764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b768:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	e00f      	b.n	800b790 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	69ba      	ldr	r2, [r7, #24]
 800b780:	0151      	lsls	r1, r2, #5
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	440a      	add	r2, r1
 800b786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b78a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b78e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	0151      	lsls	r1, r2, #5
 800b7a2:	69fa      	ldr	r2, [r7, #28]
 800b7a4:	440a      	add	r2, r1
 800b7a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b7ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3720      	adds	r7, #32
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	1ff80000 	.word	0x1ff80000

0800b7c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	785b      	ldrb	r3, [r3, #1]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d14a      	bne.n	800b874 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7f6:	f040 8086 	bne.w	800b906 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	4413      	add	r3, r2
 800b804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	0151      	lsls	r1, r2, #5
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	440a      	add	r2, r1
 800b814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b818:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b81c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	015a      	lsls	r2, r3, #5
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	4413      	add	r3, r2
 800b828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	7812      	ldrb	r2, [r2, #0]
 800b832:	0151      	lsls	r1, r2, #5
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	440a      	add	r2, r1
 800b838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b83c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b840:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3301      	adds	r3, #1
 800b846:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b84e:	4293      	cmp	r3, r2
 800b850:	d902      	bls.n	800b858 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	75fb      	strb	r3, [r7, #23]
          break;
 800b856:	e056      	b.n	800b906 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	015a      	lsls	r2, r3, #5
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	4413      	add	r3, r2
 800b862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b86c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b870:	d0e7      	beq.n	800b842 <USB_EPStopXfer+0x82>
 800b872:	e048      	b.n	800b906 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	015a      	lsls	r2, r3, #5
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	4413      	add	r3, r2
 800b87e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b888:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b88c:	d13b      	bne.n	800b906 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	7812      	ldrb	r2, [r2, #0]
 800b8a2:	0151      	lsls	r1, r2, #5
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	440a      	add	r2, r1
 800b8a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b8b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	015a      	lsls	r2, r3, #5
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	7812      	ldrb	r2, [r2, #0]
 800b8c6:	0151      	lsls	r1, r2, #5
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	440a      	add	r2, r1
 800b8cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d902      	bls.n	800b8ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	75fb      	strb	r3, [r7, #23]
          break;
 800b8ea:	e00c      	b.n	800b906 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	015a      	lsls	r2, r3, #5
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b904:	d0e7      	beq.n	800b8d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b906:	7dfb      	ldrb	r3, [r7, #23]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	371c      	adds	r7, #28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b914:	b480      	push	{r7}
 800b916:	b089      	sub	sp, #36	@ 0x24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	4611      	mov	r1, r2
 800b920:	461a      	mov	r2, r3
 800b922:	460b      	mov	r3, r1
 800b924:	71fb      	strb	r3, [r7, #7]
 800b926:	4613      	mov	r3, r2
 800b928:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b932:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b936:	2b00      	cmp	r3, #0
 800b938:	d123      	bne.n	800b982 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b93a:	88bb      	ldrh	r3, [r7, #4]
 800b93c:	3303      	adds	r3, #3
 800b93e:	089b      	lsrs	r3, r3, #2
 800b940:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b942:	2300      	movs	r3, #0
 800b944:	61bb      	str	r3, [r7, #24]
 800b946:	e018      	b.n	800b97a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b948:	79fb      	ldrb	r3, [r7, #7]
 800b94a:	031a      	lsls	r2, r3, #12
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b954:	461a      	mov	r2, r3
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	3301      	adds	r3, #1
 800b960:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	3301      	adds	r3, #1
 800b966:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	3301      	adds	r3, #1
 800b96c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	3301      	adds	r3, #1
 800b972:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	3301      	adds	r3, #1
 800b978:	61bb      	str	r3, [r7, #24]
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d3e2      	bcc.n	800b948 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3724      	adds	r7, #36	@ 0x24
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b990:	b480      	push	{r7}
 800b992:	b08b      	sub	sp, #44	@ 0x2c
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	4613      	mov	r3, r2
 800b99c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b9a6:	88fb      	ldrh	r3, [r7, #6]
 800b9a8:	089b      	lsrs	r3, r3, #2
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b9ae:	88fb      	ldrh	r3, [r7, #6]
 800b9b0:	f003 0303 	and.w	r3, r3, #3
 800b9b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	623b      	str	r3, [r7, #32]
 800b9ba:	e014      	b.n	800b9e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9dc:	3301      	adds	r3, #1
 800b9de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	623b      	str	r3, [r7, #32]
 800b9e6:	6a3a      	ldr	r2, [r7, #32]
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d3e6      	bcc.n	800b9bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b9ee:	8bfb      	ldrh	r3, [r7, #30]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d01e      	beq.n	800ba32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f107 0310 	add.w	r3, r7, #16
 800ba04:	6812      	ldr	r2, [r2, #0]
 800ba06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	fa22 f303 	lsr.w	r3, r2, r3
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba18:	701a      	strb	r2, [r3, #0]
      i++;
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba22:	3301      	adds	r3, #1
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ba26:	8bfb      	ldrh	r3, [r7, #30]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ba2c:	8bfb      	ldrh	r3, [r7, #30]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1ea      	bne.n	800ba08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	372c      	adds	r7, #44	@ 0x2c
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	785b      	ldrb	r3, [r3, #1]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d12c      	bne.n	800bab6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	015a      	lsls	r2, r3, #5
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4413      	add	r3, r2
 800ba64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	db12      	blt.n	800ba94 <USB_EPSetStall+0x54>
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00f      	beq.n	800ba94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	0151      	lsls	r1, r2, #5
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	440a      	add	r2, r1
 800ba8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	015a      	lsls	r2, r3, #5
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	0151      	lsls	r1, r2, #5
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	440a      	add	r2, r1
 800baaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800baae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bab2:	6013      	str	r3, [r2, #0]
 800bab4:	e02b      	b.n	800bb0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	4413      	add	r3, r2
 800babe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	db12      	blt.n	800baee <USB_EPSetStall+0xae>
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00f      	beq.n	800baee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	0151      	lsls	r1, r2, #5
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	440a      	add	r2, r1
 800bae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bae8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800baec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	0151      	lsls	r1, r2, #5
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	440a      	add	r2, r1
 800bb04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bb0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d128      	bne.n	800bb8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	0151      	lsls	r1, r2, #5
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	440a      	add	r2, r1
 800bb4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	791b      	ldrb	r3, [r3, #4]
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d003      	beq.n	800bb68 <USB_EPClearStall+0x4c>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	791b      	ldrb	r3, [r3, #4]
 800bb64:	2b02      	cmp	r3, #2
 800bb66:	d138      	bne.n	800bbda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	0151      	lsls	r1, r2, #5
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	440a      	add	r2, r1
 800bb7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	e027      	b.n	800bbda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	0151      	lsls	r1, r2, #5
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	440a      	add	r2, r1
 800bba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bba4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bba8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	791b      	ldrb	r3, [r3, #4]
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d003      	beq.n	800bbba <USB_EPClearStall+0x9e>
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	791b      	ldrb	r3, [r3, #4]
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d10f      	bne.n	800bbda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	015a      	lsls	r2, r3, #5
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	0151      	lsls	r1, r2, #5
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	440a      	add	r2, r1
 800bbd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bc0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	78fb      	ldrb	r3, [r7, #3]
 800bc16:	011b      	lsls	r3, r3, #4
 800bc18:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bc1c:	68f9      	ldr	r1, [r7, #12]
 800bc1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc22:	4313      	orrs	r3, r2
 800bc24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc4e:	f023 0303 	bic.w	r3, r3, #3
 800bc52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc62:	f023 0302 	bic.w	r3, r3, #2
 800bc66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b085      	sub	sp, #20
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc90:	f023 0303 	bic.w	r3, r3, #3
 800bc94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bca4:	f043 0302 	orr.w	r3, r3, #2
 800bca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	699b      	ldr	r3, [r3, #24]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4013      	ands	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b085      	sub	sp, #20
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcf0:	699b      	ldr	r3, [r3, #24]
 800bcf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	4013      	ands	r3, r2
 800bd00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	0c1b      	lsrs	r3, r3, #16
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b085      	sub	sp, #20
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	4013      	ands	r3, r2
 800bd34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	b29b      	uxth	r3, r3
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b085      	sub	sp, #20
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bd56:	78fb      	ldrb	r3, [r7, #3]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	4013      	ands	r3, r2
 800bd72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd74:	68bb      	ldr	r3, [r7, #8]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b087      	sub	sp, #28
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bda2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bda4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bda6:	78fb      	ldrb	r3, [r7, #3]
 800bda8:	f003 030f 	and.w	r3, r3, #15
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb2:	01db      	lsls	r3, r3, #7
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bdbc:	78fb      	ldrb	r3, [r7, #3]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	4013      	ands	r3, r2
 800bdce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bdd0:	68bb      	ldr	r3, [r7, #8]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	371c      	adds	r7, #28
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b083      	sub	sp, #12
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	f003 0301 	and.w	r3, r3, #1
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b085      	sub	sp, #20
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800be18:	f023 0307 	bic.w	r3, r3, #7
 800be1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800be40:	b480      	push	{r7}
 800be42:	b087      	sub	sp, #28
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	460b      	mov	r3, r1
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	333c      	adds	r3, #60	@ 0x3c
 800be56:	3304      	adds	r3, #4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	4a26      	ldr	r2, [pc, #152]	@ (800bef8 <USB_EP0_OutStart+0xb8>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d90a      	bls.n	800be7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be74:	d101      	bne.n	800be7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	e037      	b.n	800beea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be80:	461a      	mov	r2, r3
 800be82:	2300      	movs	r3, #0
 800be84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800be98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bea8:	f043 0318 	orr.w	r3, r3, #24
 800beac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bebc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bec0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bec2:	7afb      	ldrb	r3, [r7, #11]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d10f      	bne.n	800bee8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bece:	461a      	mov	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bee2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bee6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	371c      	adds	r7, #28
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	4f54300a 	.word	0x4f54300a

0800befc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf04:	2300      	movs	r3, #0
 800bf06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf14:	d901      	bls.n	800bf1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	e022      	b.n	800bf60 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	daf2      	bge.n	800bf08 <USB_CoreReset+0xc>

  count = 10U;
 800bf22:	230a      	movs	r3, #10
 800bf24:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800bf26:	e002      	b.n	800bf2e <USB_CoreReset+0x32>
  {
    count--;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1f9      	bne.n	800bf28 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	f043 0201 	orr.w	r2, r3, #1
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3301      	adds	r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf4c:	d901      	bls.n	800bf52 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e006      	b.n	800bf60 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d0f0      	beq.n	800bf40 <USB_CoreReset+0x44>

  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	460b      	mov	r3, r1
 800bf76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bf7c:	f002 fd1e 	bl	800e9bc <USBD_static_malloc>
 800bf80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d109      	bne.n	800bf9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	32b0      	adds	r2, #176	@ 0xb0
 800bf92:	2100      	movs	r1, #0
 800bf94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e0d4      	b.n	800c146 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bf9c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f002 fd9e 	bl	800eae4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	32b0      	adds	r2, #176	@ 0xb0
 800bfb2:	68f9      	ldr	r1, [r7, #12]
 800bfb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	32b0      	adds	r2, #176	@ 0xb0
 800bfc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7c1b      	ldrb	r3, [r3, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d138      	bne.n	800c046 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bfd4:	4b5e      	ldr	r3, [pc, #376]	@ (800c150 <USBD_CDC_Init+0x1e4>)
 800bfd6:	7819      	ldrb	r1, [r3, #0]
 800bfd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfdc:	2202      	movs	r2, #2
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f002 fbc9 	bl	800e776 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bfe4:	4b5a      	ldr	r3, [pc, #360]	@ (800c150 <USBD_CDC_Init+0x1e4>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	f003 020f 	and.w	r2, r3, #15
 800bfec:	6879      	ldr	r1, [r7, #4]
 800bfee:	4613      	mov	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	440b      	add	r3, r1
 800bff8:	3323      	adds	r3, #35	@ 0x23
 800bffa:	2201      	movs	r2, #1
 800bffc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bffe:	4b55      	ldr	r3, [pc, #340]	@ (800c154 <USBD_CDC_Init+0x1e8>)
 800c000:	7819      	ldrb	r1, [r3, #0]
 800c002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c006:	2202      	movs	r2, #2
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f002 fbb4 	bl	800e776 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c00e:	4b51      	ldr	r3, [pc, #324]	@ (800c154 <USBD_CDC_Init+0x1e8>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	f003 020f 	and.w	r2, r3, #15
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	4613      	mov	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	440b      	add	r3, r1
 800c022:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c026:	2201      	movs	r2, #1
 800c028:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c02a:	4b4b      	ldr	r3, [pc, #300]	@ (800c158 <USBD_CDC_Init+0x1ec>)
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	f003 020f 	and.w	r2, r3, #15
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	4613      	mov	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	440b      	add	r3, r1
 800c03e:	331c      	adds	r3, #28
 800c040:	2210      	movs	r2, #16
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	e035      	b.n	800c0b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c046:	4b42      	ldr	r3, [pc, #264]	@ (800c150 <USBD_CDC_Init+0x1e4>)
 800c048:	7819      	ldrb	r1, [r3, #0]
 800c04a:	2340      	movs	r3, #64	@ 0x40
 800c04c:	2202      	movs	r2, #2
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f002 fb91 	bl	800e776 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c054:	4b3e      	ldr	r3, [pc, #248]	@ (800c150 <USBD_CDC_Init+0x1e4>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	f003 020f 	and.w	r2, r3, #15
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	4613      	mov	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	440b      	add	r3, r1
 800c068:	3323      	adds	r3, #35	@ 0x23
 800c06a:	2201      	movs	r2, #1
 800c06c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c06e:	4b39      	ldr	r3, [pc, #228]	@ (800c154 <USBD_CDC_Init+0x1e8>)
 800c070:	7819      	ldrb	r1, [r3, #0]
 800c072:	2340      	movs	r3, #64	@ 0x40
 800c074:	2202      	movs	r2, #2
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f002 fb7d 	bl	800e776 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c07c:	4b35      	ldr	r3, [pc, #212]	@ (800c154 <USBD_CDC_Init+0x1e8>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	f003 020f 	and.w	r2, r3, #15
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	440b      	add	r3, r1
 800c090:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c094:	2201      	movs	r2, #1
 800c096:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c098:	4b2f      	ldr	r3, [pc, #188]	@ (800c158 <USBD_CDC_Init+0x1ec>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	f003 020f 	and.w	r2, r3, #15
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	331c      	adds	r3, #28
 800c0ae:	2210      	movs	r2, #16
 800c0b0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0b2:	4b29      	ldr	r3, [pc, #164]	@ (800c158 <USBD_CDC_Init+0x1ec>)
 800c0b4:	7819      	ldrb	r1, [r3, #0]
 800c0b6:	2308      	movs	r3, #8
 800c0b8:	2203      	movs	r2, #3
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f002 fb5b 	bl	800e776 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c0c0:	4b25      	ldr	r3, [pc, #148]	@ (800c158 <USBD_CDC_Init+0x1ec>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	f003 020f 	and.w	r2, r3, #15
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3323      	adds	r3, #35	@ 0x23
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	33b0      	adds	r3, #176	@ 0xb0
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c110:	2302      	movs	r3, #2
 800c112:	e018      	b.n	800c146 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	7c1b      	ldrb	r3, [r3, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10a      	bne.n	800c132 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c11c:	4b0d      	ldr	r3, [pc, #52]	@ (800c154 <USBD_CDC_Init+0x1e8>)
 800c11e:	7819      	ldrb	r1, [r3, #0]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f002 fc12 	bl	800e954 <USBD_LL_PrepareReceive>
 800c130:	e008      	b.n	800c144 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c132:	4b08      	ldr	r3, [pc, #32]	@ (800c154 <USBD_CDC_Init+0x1e8>)
 800c134:	7819      	ldrb	r1, [r3, #0]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c13c:	2340      	movs	r3, #64	@ 0x40
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f002 fc08 	bl	800e954 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	200000c3 	.word	0x200000c3
 800c154:	200000c4 	.word	0x200000c4
 800c158:	200000c5 	.word	0x200000c5

0800c15c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c168:	4b3a      	ldr	r3, [pc, #232]	@ (800c254 <USBD_CDC_DeInit+0xf8>)
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f002 fb27 	bl	800e7c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c174:	4b37      	ldr	r3, [pc, #220]	@ (800c254 <USBD_CDC_DeInit+0xf8>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	f003 020f 	and.w	r2, r3, #15
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	4613      	mov	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4413      	add	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	440b      	add	r3, r1
 800c188:	3323      	adds	r3, #35	@ 0x23
 800c18a:	2200      	movs	r2, #0
 800c18c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c18e:	4b32      	ldr	r3, [pc, #200]	@ (800c258 <USBD_CDC_DeInit+0xfc>)
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f002 fb14 	bl	800e7c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c19a:	4b2f      	ldr	r3, [pc, #188]	@ (800c258 <USBD_CDC_DeInit+0xfc>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	f003 020f 	and.w	r2, r3, #15
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	440b      	add	r3, r1
 800c1ae:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c1b6:	4b29      	ldr	r3, [pc, #164]	@ (800c25c <USBD_CDC_DeInit+0x100>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f002 fb00 	bl	800e7c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c1c2:	4b26      	ldr	r3, [pc, #152]	@ (800c25c <USBD_CDC_DeInit+0x100>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	f003 020f 	and.w	r2, r3, #15
 800c1ca:	6879      	ldr	r1, [r7, #4]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	440b      	add	r3, r1
 800c1d6:	3323      	adds	r3, #35	@ 0x23
 800c1d8:	2200      	movs	r2, #0
 800c1da:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c1dc:	4b1f      	ldr	r3, [pc, #124]	@ (800c25c <USBD_CDC_DeInit+0x100>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	f003 020f 	and.w	r2, r3, #15
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	440b      	add	r3, r1
 800c1f0:	331c      	adds	r3, #28
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	32b0      	adds	r2, #176	@ 0xb0
 800c200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d01f      	beq.n	800c248 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	33b0      	adds	r3, #176	@ 0xb0
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	32b0      	adds	r2, #176	@ 0xb0
 800c226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f002 fbd4 	bl	800e9d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	32b0      	adds	r2, #176	@ 0xb0
 800c23a:	2100      	movs	r1, #0
 800c23c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	200000c3 	.word	0x200000c3
 800c258:	200000c4 	.word	0x200000c4
 800c25c:	200000c5 	.word	0x200000c5

0800c260 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	32b0      	adds	r2, #176	@ 0xb0
 800c274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c278:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c27a:	2300      	movs	r3, #0
 800c27c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c27e:	2300      	movs	r3, #0
 800c280:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d101      	bne.n	800c290 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e0bf      	b.n	800c410 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d050      	beq.n	800c33e <USBD_CDC_Setup+0xde>
 800c29c:	2b20      	cmp	r3, #32
 800c29e:	f040 80af 	bne.w	800c400 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	88db      	ldrh	r3, [r3, #6]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d03a      	beq.n	800c320 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	b25b      	sxtb	r3, r3
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da1b      	bge.n	800c2ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	33b0      	adds	r3, #176	@ 0xb0
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c2ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	88d2      	ldrh	r2, [r2, #6]
 800c2d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	88db      	ldrh	r3, [r3, #6]
 800c2d6:	2b07      	cmp	r3, #7
 800c2d8:	bf28      	it	cs
 800c2da:	2307      	movcs	r3, #7
 800c2dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	89fa      	ldrh	r2, [r7, #14]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f001 fda9 	bl	800de3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c2ea:	e090      	b.n	800c40e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	785a      	ldrb	r2, [r3, #1]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	88db      	ldrh	r3, [r3, #6]
 800c2fa:	2b3f      	cmp	r3, #63	@ 0x3f
 800c2fc:	d803      	bhi.n	800c306 <USBD_CDC_Setup+0xa6>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	88db      	ldrh	r3, [r3, #6]
 800c302:	b2da      	uxtb	r2, r3
 800c304:	e000      	b.n	800c308 <USBD_CDC_Setup+0xa8>
 800c306:	2240      	movs	r2, #64	@ 0x40
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c30e:	6939      	ldr	r1, [r7, #16]
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c316:	461a      	mov	r2, r3
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f001 fdbe 	bl	800de9a <USBD_CtlPrepareRx>
      break;
 800c31e:	e076      	b.n	800c40e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	33b0      	adds	r3, #176	@ 0xb0
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	7850      	ldrb	r0, [r2, #1]
 800c336:	2200      	movs	r2, #0
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	4798      	blx	r3
      break;
 800c33c:	e067      	b.n	800c40e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	785b      	ldrb	r3, [r3, #1]
 800c342:	2b0b      	cmp	r3, #11
 800c344:	d851      	bhi.n	800c3ea <USBD_CDC_Setup+0x18a>
 800c346:	a201      	add	r2, pc, #4	@ (adr r2, 800c34c <USBD_CDC_Setup+0xec>)
 800c348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34c:	0800c37d 	.word	0x0800c37d
 800c350:	0800c3f9 	.word	0x0800c3f9
 800c354:	0800c3eb 	.word	0x0800c3eb
 800c358:	0800c3eb 	.word	0x0800c3eb
 800c35c:	0800c3eb 	.word	0x0800c3eb
 800c360:	0800c3eb 	.word	0x0800c3eb
 800c364:	0800c3eb 	.word	0x0800c3eb
 800c368:	0800c3eb 	.word	0x0800c3eb
 800c36c:	0800c3eb 	.word	0x0800c3eb
 800c370:	0800c3eb 	.word	0x0800c3eb
 800c374:	0800c3a7 	.word	0x0800c3a7
 800c378:	0800c3d1 	.word	0x0800c3d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b03      	cmp	r3, #3
 800c386:	d107      	bne.n	800c398 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c388:	f107 030a 	add.w	r3, r7, #10
 800c38c:	2202      	movs	r2, #2
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f001 fd53 	bl	800de3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c396:	e032      	b.n	800c3fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f001 fcd1 	bl	800dd42 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	75fb      	strb	r3, [r7, #23]
          break;
 800c3a4:	e02b      	b.n	800c3fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d107      	bne.n	800c3c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c3b2:	f107 030d 	add.w	r3, r7, #13
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f001 fd3e 	bl	800de3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3c0:	e01d      	b.n	800c3fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f001 fcbc 	bl	800dd42 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	75fb      	strb	r3, [r7, #23]
          break;
 800c3ce:	e016      	b.n	800c3fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d00f      	beq.n	800c3fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f001 fcaf 	bl	800dd42 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c3e8:	e008      	b.n	800c3fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f001 fca8 	bl	800dd42 <USBD_CtlError>
          ret = USBD_FAIL;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	75fb      	strb	r3, [r7, #23]
          break;
 800c3f6:	e002      	b.n	800c3fe <USBD_CDC_Setup+0x19e>
          break;
 800c3f8:	bf00      	nop
 800c3fa:	e008      	b.n	800c40e <USBD_CDC_Setup+0x1ae>
          break;
 800c3fc:	bf00      	nop
      }
      break;
 800c3fe:	e006      	b.n	800c40e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f001 fc9d 	bl	800dd42 <USBD_CtlError>
      ret = USBD_FAIL;
 800c408:	2303      	movs	r3, #3
 800c40a:	75fb      	strb	r3, [r7, #23]
      break;
 800c40c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3718      	adds	r7, #24
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c42a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	32b0      	adds	r2, #176	@ 0xb0
 800c436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c43e:	2303      	movs	r3, #3
 800c440:	e065      	b.n	800c50e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	32b0      	adds	r2, #176	@ 0xb0
 800c44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c450:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c452:	78fb      	ldrb	r3, [r7, #3]
 800c454:	f003 020f 	and.w	r2, r3, #15
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	4613      	mov	r3, r2
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	440b      	add	r3, r1
 800c464:	3314      	adds	r3, #20
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d02f      	beq.n	800c4cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c46c:	78fb      	ldrb	r3, [r7, #3]
 800c46e:	f003 020f 	and.w	r2, r3, #15
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	3314      	adds	r3, #20
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	78fb      	ldrb	r3, [r7, #3]
 800c484:	f003 010f 	and.w	r1, r3, #15
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	460b      	mov	r3, r1
 800c48c:	00db      	lsls	r3, r3, #3
 800c48e:	440b      	add	r3, r1
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4403      	add	r3, r0
 800c494:	331c      	adds	r3, #28
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	fbb2 f1f3 	udiv	r1, r2, r3
 800c49c:	fb01 f303 	mul.w	r3, r1, r3
 800c4a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d112      	bne.n	800c4cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c4a6:	78fb      	ldrb	r3, [r7, #3]
 800c4a8:	f003 020f 	and.w	r2, r3, #15
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	440b      	add	r3, r1
 800c4b8:	3314      	adds	r3, #20
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c4be:	78f9      	ldrb	r1, [r7, #3]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f002 fa24 	bl	800e912 <USBD_LL_Transmit>
 800c4ca:	e01f      	b.n	800c50c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	33b0      	adds	r3, #176	@ 0xb0
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d010      	beq.n	800c50c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	33b0      	adds	r3, #176	@ 0xb0
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	4413      	add	r3, r2
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c508:	78fa      	ldrb	r2, [r7, #3]
 800c50a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b084      	sub	sp, #16
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	460b      	mov	r3, r1
 800c520:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	32b0      	adds	r2, #176	@ 0xb0
 800c52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c530:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	32b0      	adds	r2, #176	@ 0xb0
 800c53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c544:	2303      	movs	r3, #3
 800c546:	e01a      	b.n	800c57e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c548:	78fb      	ldrb	r3, [r7, #3]
 800c54a:	4619      	mov	r1, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f002 fa22 	bl	800e996 <USBD_LL_GetRxDataSize>
 800c552:	4602      	mov	r2, r0
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	33b0      	adds	r3, #176	@ 0xb0
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c578:	4611      	mov	r1, r2
 800c57a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	32b0      	adds	r2, #176	@ 0xb0
 800c598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e024      	b.n	800c5f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	33b0      	adds	r3, #176	@ 0xb0
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d019      	beq.n	800c5f0 <USBD_CDC_EP0_RxReady+0x6a>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c5c2:	2bff      	cmp	r3, #255	@ 0xff
 800c5c4:	d014      	beq.n	800c5f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	33b0      	adds	r3, #176	@ 0xb0
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c5de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	22ff      	movs	r2, #255	@ 0xff
 800c5ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
	...

0800c5fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c604:	2182      	movs	r1, #130	@ 0x82
 800c606:	4818      	ldr	r0, [pc, #96]	@ (800c668 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c608:	f000 fd62 	bl	800d0d0 <USBD_GetEpDesc>
 800c60c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c60e:	2101      	movs	r1, #1
 800c610:	4815      	ldr	r0, [pc, #84]	@ (800c668 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c612:	f000 fd5d 	bl	800d0d0 <USBD_GetEpDesc>
 800c616:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c618:	2181      	movs	r1, #129	@ 0x81
 800c61a:	4813      	ldr	r0, [pc, #76]	@ (800c668 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c61c:	f000 fd58 	bl	800d0d0 <USBD_GetEpDesc>
 800c620:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2210      	movs	r2, #16
 800c62c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d006      	beq.n	800c642 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	2200      	movs	r2, #0
 800c638:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c63c:	711a      	strb	r2, [r3, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d006      	beq.n	800c656 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c650:	711a      	strb	r2, [r3, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2243      	movs	r2, #67	@ 0x43
 800c65a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c65c:	4b02      	ldr	r3, [pc, #8]	@ (800c668 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20000080 	.word	0x20000080

0800c66c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c674:	2182      	movs	r1, #130	@ 0x82
 800c676:	4818      	ldr	r0, [pc, #96]	@ (800c6d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c678:	f000 fd2a 	bl	800d0d0 <USBD_GetEpDesc>
 800c67c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c67e:	2101      	movs	r1, #1
 800c680:	4815      	ldr	r0, [pc, #84]	@ (800c6d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c682:	f000 fd25 	bl	800d0d0 <USBD_GetEpDesc>
 800c686:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c688:	2181      	movs	r1, #129	@ 0x81
 800c68a:	4813      	ldr	r0, [pc, #76]	@ (800c6d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c68c:	f000 fd20 	bl	800d0d0 <USBD_GetEpDesc>
 800c690:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	2210      	movs	r2, #16
 800c69c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d006      	beq.n	800c6b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	711a      	strb	r2, [r3, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f042 0202 	orr.w	r2, r2, #2
 800c6b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d006      	beq.n	800c6c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	711a      	strb	r2, [r3, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f042 0202 	orr.w	r2, r2, #2
 800c6c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2243      	movs	r2, #67	@ 0x43
 800c6ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6cc:	4b02      	ldr	r3, [pc, #8]	@ (800c6d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000080 	.word	0x20000080

0800c6dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6e4:	2182      	movs	r1, #130	@ 0x82
 800c6e6:	4818      	ldr	r0, [pc, #96]	@ (800c748 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6e8:	f000 fcf2 	bl	800d0d0 <USBD_GetEpDesc>
 800c6ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	4815      	ldr	r0, [pc, #84]	@ (800c748 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6f2:	f000 fced 	bl	800d0d0 <USBD_GetEpDesc>
 800c6f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c6f8:	2181      	movs	r1, #129	@ 0x81
 800c6fa:	4813      	ldr	r0, [pc, #76]	@ (800c748 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6fc:	f000 fce8 	bl	800d0d0 <USBD_GetEpDesc>
 800c700:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2210      	movs	r2, #16
 800c70c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d006      	beq.n	800c722 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	2200      	movs	r2, #0
 800c718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c71c:	711a      	strb	r2, [r3, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d006      	beq.n	800c736 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c730:	711a      	strb	r2, [r3, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2243      	movs	r2, #67	@ 0x43
 800c73a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c73c:	4b02      	ldr	r3, [pc, #8]	@ (800c748 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20000080 	.word	0x20000080

0800c74c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	220a      	movs	r2, #10
 800c758:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c75a:	4b03      	ldr	r3, [pc, #12]	@ (800c768 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	2000003c 	.word	0x2000003c

0800c76c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c77c:	2303      	movs	r3, #3
 800c77e:	e009      	b.n	800c794 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	33b0      	adds	r3, #176	@ 0xb0
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	32b0      	adds	r2, #176	@ 0xb0
 800c7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d101      	bne.n	800c7c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	e008      	b.n	800c7d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	371c      	adds	r7, #28
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	32b0      	adds	r2, #176	@ 0xb0
 800c7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d101      	bne.n	800c808 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c804:	2303      	movs	r3, #3
 800c806:	e004      	b.n	800c812 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
	...

0800c820 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	32b0      	adds	r2, #176	@ 0xb0
 800c832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c836:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c838:	2301      	movs	r3, #1
 800c83a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d101      	bne.n	800c846 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c842:	2303      	movs	r3, #3
 800c844:	e025      	b.n	800c892 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d11f      	bne.n	800c890 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2201      	movs	r2, #1
 800c854:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c858:	4b10      	ldr	r3, [pc, #64]	@ (800c89c <USBD_CDC_TransmitPacket+0x7c>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	f003 020f 	and.w	r2, r3, #15
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	4613      	mov	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	4403      	add	r3, r0
 800c872:	3314      	adds	r3, #20
 800c874:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c876:	4b09      	ldr	r3, [pc, #36]	@ (800c89c <USBD_CDC_TransmitPacket+0x7c>)
 800c878:	7819      	ldrb	r1, [r3, #0]
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f002 f843 	bl	800e912 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c890:	7bfb      	ldrb	r3, [r7, #15]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	200000c3 	.word	0x200000c3

0800c8a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	32b0      	adds	r2, #176	@ 0xb0
 800c8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	32b0      	adds	r2, #176	@ 0xb0
 800c8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e018      	b.n	800c900 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	7c1b      	ldrb	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10a      	bne.n	800c8ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c908 <USBD_CDC_ReceivePacket+0x68>)
 800c8d8:	7819      	ldrb	r1, [r3, #0]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f002 f835 	bl	800e954 <USBD_LL_PrepareReceive>
 800c8ea:	e008      	b.n	800c8fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8ec:	4b06      	ldr	r3, [pc, #24]	@ (800c908 <USBD_CDC_ReceivePacket+0x68>)
 800c8ee:	7819      	ldrb	r1, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8f6:	2340      	movs	r3, #64	@ 0x40
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f002 f82b 	bl	800e954 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	200000c4 	.word	0x200000c4

0800c90c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	4613      	mov	r3, r2
 800c918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c920:	2303      	movs	r3, #3
 800c922:	e01f      	b.n	800c964 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2200      	movs	r2, #0
 800c938:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d003      	beq.n	800c94a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	79fa      	ldrb	r2, [r7, #7]
 800c956:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f001 fea5 	bl	800e6a8 <USBD_LL_Init>
 800c95e:	4603      	mov	r3, r0
 800c960:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c962:	7dfb      	ldrb	r3, [r7, #23]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3718      	adds	r7, #24
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c976:	2300      	movs	r3, #0
 800c978:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c980:	2303      	movs	r3, #3
 800c982:	e025      	b.n	800c9d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	32ae      	adds	r2, #174	@ 0xae
 800c996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00f      	beq.n	800c9c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	32ae      	adds	r2, #174	@ 0xae
 800c9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b0:	f107 020e 	add.w	r2, r7, #14
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	4798      	blx	r3
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f001 fead 	bl	800e740 <USBD_LL_Start>
 800c9e6:	4603      	mov	r3, r0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c9f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b084      	sub	sp, #16
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d009      	beq.n	800ca34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	78fa      	ldrb	r2, [r7, #3]
 800ca2a:	4611      	mov	r1, r2
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	4798      	blx	r3
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	460b      	mov	r3, r1
 800ca48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	78fa      	ldrb	r2, [r7, #3]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	4798      	blx	r3
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca64:	2303      	movs	r3, #3
 800ca66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f001 f922 	bl	800dcce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ca98:	461a      	mov	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800caa6:	f003 031f 	and.w	r3, r3, #31
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d01a      	beq.n	800cae4 <USBD_LL_SetupStage+0x72>
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d822      	bhi.n	800caf8 <USBD_LL_SetupStage+0x86>
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <USBD_LL_SetupStage+0x4a>
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d00a      	beq.n	800cad0 <USBD_LL_SetupStage+0x5e>
 800caba:	e01d      	b.n	800caf8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fb77 	bl	800d1b8 <USBD_StdDevReq>
 800caca:	4603      	mov	r3, r0
 800cacc:	73fb      	strb	r3, [r7, #15]
      break;
 800cace:	e020      	b.n	800cb12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fbdf 	bl	800d29c <USBD_StdItfReq>
 800cade:	4603      	mov	r3, r0
 800cae0:	73fb      	strb	r3, [r7, #15]
      break;
 800cae2:	e016      	b.n	800cb12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 fc41 	bl	800d374 <USBD_StdEPReq>
 800caf2:	4603      	mov	r3, r0
 800caf4:	73fb      	strb	r3, [r7, #15]
      break;
 800caf6:	e00c      	b.n	800cb12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cafe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f001 fe7a 	bl	800e800 <USBD_LL_StallEP>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb10:	bf00      	nop
  }

  return ret;
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	460b      	mov	r3, r1
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800cb2e:	7afb      	ldrb	r3, [r7, #11]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d177      	bne.n	800cc24 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cb3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	f040 80a1 	bne.w	800cc8a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	693a      	ldr	r2, [r7, #16]
 800cb4e:	8992      	ldrh	r2, [r2, #12]
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d91c      	bls.n	800cb8e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	8992      	ldrh	r2, [r2, #12]
 800cb5c:	1a9a      	subs	r2, r3, r2
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	8992      	ldrh	r2, [r2, #12]
 800cb6a:	441a      	add	r2, r3
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	6919      	ldr	r1, [r3, #16]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	899b      	ldrh	r3, [r3, #12]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	bf38      	it	cc
 800cb82:	4613      	movcc	r3, r2
 800cb84:	461a      	mov	r2, r3
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f001 f9a8 	bl	800dedc <USBD_CtlContinueRx>
 800cb8c:	e07d      	b.n	800cc8a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb94:	f003 031f 	and.w	r3, r3, #31
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d014      	beq.n	800cbc6 <USBD_LL_DataOutStage+0xaa>
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d81d      	bhi.n	800cbdc <USBD_LL_DataOutStage+0xc0>
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <USBD_LL_DataOutStage+0x8e>
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d003      	beq.n	800cbb0 <USBD_LL_DataOutStage+0x94>
 800cba8:	e018      	b.n	800cbdc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	75bb      	strb	r3, [r7, #22]
            break;
 800cbae:	e018      	b.n	800cbe2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	4619      	mov	r1, r3
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f000 fa6e 	bl	800d09c <USBD_CoreFindIF>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	75bb      	strb	r3, [r7, #22]
            break;
 800cbc4:	e00d      	b.n	800cbe2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	4619      	mov	r1, r3
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f000 fa70 	bl	800d0b6 <USBD_CoreFindEP>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	75bb      	strb	r3, [r7, #22]
            break;
 800cbda:	e002      	b.n	800cbe2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	75bb      	strb	r3, [r7, #22]
            break;
 800cbe0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cbe2:	7dbb      	ldrb	r3, [r7, #22]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d119      	bne.n	800cc1c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b03      	cmp	r3, #3
 800cbf2:	d113      	bne.n	800cc1c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cbf4:	7dba      	ldrb	r2, [r7, #22]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	32ae      	adds	r2, #174	@ 0xae
 800cbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbfe:	691b      	ldr	r3, [r3, #16]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00b      	beq.n	800cc1c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800cc04:	7dba      	ldrb	r2, [r7, #22]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc0c:	7dba      	ldrb	r2, [r7, #22]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	32ae      	adds	r2, #174	@ 0xae
 800cc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f001 f96e 	bl	800defe <USBD_CtlSendStatus>
 800cc22:	e032      	b.n	800cc8a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc24:	7afb      	ldrb	r3, [r7, #11]
 800cc26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f000 fa41 	bl	800d0b6 <USBD_CoreFindEP>
 800cc34:	4603      	mov	r3, r0
 800cc36:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc38:	7dbb      	ldrb	r3, [r7, #22]
 800cc3a:	2bff      	cmp	r3, #255	@ 0xff
 800cc3c:	d025      	beq.n	800cc8a <USBD_LL_DataOutStage+0x16e>
 800cc3e:	7dbb      	ldrb	r3, [r7, #22]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d122      	bne.n	800cc8a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	2b03      	cmp	r3, #3
 800cc4e:	d117      	bne.n	800cc80 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cc50:	7dba      	ldrb	r2, [r7, #22]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	32ae      	adds	r2, #174	@ 0xae
 800cc56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc5a:	699b      	ldr	r3, [r3, #24]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00f      	beq.n	800cc80 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800cc60:	7dba      	ldrb	r2, [r7, #22]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cc68:	7dba      	ldrb	r2, [r7, #22]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	32ae      	adds	r2, #174	@ 0xae
 800cc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	7afa      	ldrb	r2, [r7, #11]
 800cc76:	4611      	mov	r1, r2
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	4798      	blx	r3
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	e000      	b.n	800cc8c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800cca2:	7afb      	ldrb	r3, [r7, #11]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d178      	bne.n	800cd9a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3314      	adds	r3, #20
 800ccac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d163      	bne.n	800cd80 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	8992      	ldrh	r2, [r2, #12]
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d91c      	bls.n	800ccfe <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	8992      	ldrh	r2, [r2, #12]
 800cccc:	1a9a      	subs	r2, r3, r2
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	693a      	ldr	r2, [r7, #16]
 800ccd8:	8992      	ldrh	r2, [r2, #12]
 800ccda:	441a      	add	r2, r3
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	6919      	ldr	r1, [r3, #16]
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	461a      	mov	r2, r3
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f001 f8c4 	bl	800de78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f001 fe2c 	bl	800e954 <USBD_LL_PrepareReceive>
 800ccfc:	e040      	b.n	800cd80 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	899b      	ldrh	r3, [r3, #12]
 800cd02:	461a      	mov	r2, r3
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d11c      	bne.n	800cd46 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d316      	bcc.n	800cd46 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d20f      	bcs.n	800cd46 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd26:	2200      	movs	r2, #0
 800cd28:	2100      	movs	r1, #0
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f001 f8a4 	bl	800de78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd38:	2300      	movs	r3, #0
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f001 fe08 	bl	800e954 <USBD_LL_PrepareReceive>
 800cd44:	e01c      	b.n	800cd80 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d10f      	bne.n	800cd72 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d009      	beq.n	800cd72 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd72:	2180      	movs	r1, #128	@ 0x80
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f001 fd43 	bl	800e800 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f001 f8d2 	bl	800df24 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d03a      	beq.n	800ce00 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7ff fe30 	bl	800c9f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cd98:	e032      	b.n	800ce00 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cd9a:	7afb      	ldrb	r3, [r7, #11]
 800cd9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	4619      	mov	r1, r3
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f000 f986 	bl	800d0b6 <USBD_CoreFindEP>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	2bff      	cmp	r3, #255	@ 0xff
 800cdb2:	d025      	beq.n	800ce00 <USBD_LL_DataInStage+0x16c>
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d122      	bne.n	800ce00 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b03      	cmp	r3, #3
 800cdc4:	d11c      	bne.n	800ce00 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cdc6:	7dfa      	ldrb	r2, [r7, #23]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	32ae      	adds	r2, #174	@ 0xae
 800cdcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd0:	695b      	ldr	r3, [r3, #20]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d014      	beq.n	800ce00 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800cdd6:	7dfa      	ldrb	r2, [r7, #23]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cdde:	7dfa      	ldrb	r2, [r7, #23]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	32ae      	adds	r2, #174	@ 0xae
 800cde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde8:	695b      	ldr	r3, [r3, #20]
 800cdea:	7afa      	ldrb	r2, [r7, #11]
 800cdec:	4611      	mov	r1, r2
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	4798      	blx	r3
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cdf6:	7dbb      	ldrb	r3, [r7, #22]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800cdfc:	7dbb      	ldrb	r3, [r7, #22]
 800cdfe:	e000      	b.n	800ce02 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b084      	sub	sp, #16
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d014      	beq.n	800ce70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00e      	beq.n	800ce70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	6852      	ldr	r2, [r2, #4]
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	4611      	mov	r1, r2
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	4798      	blx	r3
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce70:	2340      	movs	r3, #64	@ 0x40
 800ce72:	2200      	movs	r2, #0
 800ce74:	2100      	movs	r1, #0
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f001 fc7d 	bl	800e776 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2240      	movs	r2, #64	@ 0x40
 800ce88:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce8c:	2340      	movs	r3, #64	@ 0x40
 800ce8e:	2200      	movs	r2, #0
 800ce90:	2180      	movs	r1, #128	@ 0x80
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f001 fc6f 	bl	800e776 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2240      	movs	r2, #64	@ 0x40
 800cea4:	841a      	strh	r2, [r3, #32]

  return ret;
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	78fa      	ldrb	r2, [r7, #3]
 800cec0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	2b04      	cmp	r3, #4
 800cee2:	d006      	beq.n	800cef2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2204      	movs	r2, #4
 800cef6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	2b04      	cmp	r3, #4
 800cf1a:	d106      	bne.n	800cf2a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	2b03      	cmp	r3, #3
 800cf4a:	d110      	bne.n	800cf6e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00b      	beq.n	800cf6e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf5c:	69db      	ldr	r3, [r3, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d005      	beq.n	800cf6e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	460b      	mov	r3, r1
 800cf82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	32ae      	adds	r2, #174	@ 0xae
 800cf8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d101      	bne.n	800cf9a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf96:	2303      	movs	r3, #3
 800cf98:	e01c      	b.n	800cfd4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b03      	cmp	r3, #3
 800cfa4:	d115      	bne.n	800cfd2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	32ae      	adds	r2, #174	@ 0xae
 800cfb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb4:	6a1b      	ldr	r3, [r3, #32]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d00b      	beq.n	800cfd2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	32ae      	adds	r2, #174	@ 0xae
 800cfc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	78fa      	ldrb	r2, [r7, #3]
 800cfcc:	4611      	mov	r1, r2
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	32ae      	adds	r2, #174	@ 0xae
 800cff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cffa:	2303      	movs	r3, #3
 800cffc:	e01c      	b.n	800d038 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b03      	cmp	r3, #3
 800d008:	d115      	bne.n	800d036 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	32ae      	adds	r2, #174	@ 0xae
 800d014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00b      	beq.n	800d036 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	32ae      	adds	r2, #174	@ 0xae
 800d028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d02e:	78fa      	ldrb	r2, [r7, #3]
 800d030:	4611      	mov	r1, r2
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b084      	sub	sp, #16
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00e      	beq.n	800d092 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	6852      	ldr	r2, [r2, #4]
 800d080:	b2d2      	uxtb	r2, r2
 800d082:	4611      	mov	r1, r2
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	4798      	blx	r3
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d08e:	2303      	movs	r3, #3
 800d090:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d092:	7bfb      	ldrb	r3, [r7, #15]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	b083      	sub	sp, #12
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	460b      	mov	r3, r1
 800d0c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	885b      	ldrh	r3, [r3, #2]
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	7812      	ldrb	r2, [r2, #0]
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d91f      	bls.n	800d136 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d0fc:	e013      	b.n	800d126 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d0fe:	f107 030a 	add.w	r3, r7, #10
 800d102:	4619      	mov	r1, r3
 800d104:	6978      	ldr	r0, [r7, #20]
 800d106:	f000 f81b 	bl	800d140 <USBD_GetNextDesc>
 800d10a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	785b      	ldrb	r3, [r3, #1]
 800d110:	2b05      	cmp	r3, #5
 800d112:	d108      	bne.n	800d126 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	789b      	ldrb	r3, [r3, #2]
 800d11c:	78fa      	ldrb	r2, [r7, #3]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d008      	beq.n	800d134 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	885b      	ldrh	r3, [r3, #2]
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	897b      	ldrh	r3, [r7, #10]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d8e5      	bhi.n	800d0fe <USBD_GetEpDesc+0x2e>
 800d132:	e000      	b.n	800d136 <USBD_GetEpDesc+0x66>
          break;
 800d134:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d136:	693b      	ldr	r3, [r7, #16]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	7812      	ldrb	r2, [r2, #0]
 800d156:	4413      	add	r3, r2
 800d158:	b29a      	uxth	r2, r3
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4413      	add	r3, r2
 800d168:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d16a:	68fb      	ldr	r3, [r7, #12]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d178:	b480      	push	{r7}
 800d17a:	b087      	sub	sp, #28
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	3301      	adds	r3, #1
 800d18e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d196:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d19a:	021b      	lsls	r3, r3, #8
 800d19c:	b21a      	sxth	r2, r3
 800d19e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	b21b      	sxth	r3, r3
 800d1a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d1a8:	89fb      	ldrh	r3, [r7, #14]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	371c      	adds	r7, #28
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
	...

0800d1b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1ce:	2b40      	cmp	r3, #64	@ 0x40
 800d1d0:	d005      	beq.n	800d1de <USBD_StdDevReq+0x26>
 800d1d2:	2b40      	cmp	r3, #64	@ 0x40
 800d1d4:	d857      	bhi.n	800d286 <USBD_StdDevReq+0xce>
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00f      	beq.n	800d1fa <USBD_StdDevReq+0x42>
 800d1da:	2b20      	cmp	r3, #32
 800d1dc:	d153      	bne.n	800d286 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	32ae      	adds	r2, #174	@ 0xae
 800d1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	4798      	blx	r3
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f8:	e04a      	b.n	800d290 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	785b      	ldrb	r3, [r3, #1]
 800d1fe:	2b09      	cmp	r3, #9
 800d200:	d83b      	bhi.n	800d27a <USBD_StdDevReq+0xc2>
 800d202:	a201      	add	r2, pc, #4	@ (adr r2, 800d208 <USBD_StdDevReq+0x50>)
 800d204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d208:	0800d25d 	.word	0x0800d25d
 800d20c:	0800d271 	.word	0x0800d271
 800d210:	0800d27b 	.word	0x0800d27b
 800d214:	0800d267 	.word	0x0800d267
 800d218:	0800d27b 	.word	0x0800d27b
 800d21c:	0800d23b 	.word	0x0800d23b
 800d220:	0800d231 	.word	0x0800d231
 800d224:	0800d27b 	.word	0x0800d27b
 800d228:	0800d253 	.word	0x0800d253
 800d22c:	0800d245 	.word	0x0800d245
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d230:	6839      	ldr	r1, [r7, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fa3e 	bl	800d6b4 <USBD_GetDescriptor>
          break;
 800d238:	e024      	b.n	800d284 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fba3 	bl	800d988 <USBD_SetAddress>
          break;
 800d242:	e01f      	b.n	800d284 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fbe2 	bl	800da10 <USBD_SetConfig>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73fb      	strb	r3, [r7, #15]
          break;
 800d250:	e018      	b.n	800d284 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fc85 	bl	800db64 <USBD_GetConfig>
          break;
 800d25a:	e013      	b.n	800d284 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fcb6 	bl	800dbd0 <USBD_GetStatus>
          break;
 800d264:	e00e      	b.n	800d284 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fce5 	bl	800dc38 <USBD_SetFeature>
          break;
 800d26e:	e009      	b.n	800d284 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fd09 	bl	800dc8a <USBD_ClrFeature>
          break;
 800d278:	e004      	b.n	800d284 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fd60 	bl	800dd42 <USBD_CtlError>
          break;
 800d282:	bf00      	nop
      }
      break;
 800d284:	e004      	b.n	800d290 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fd5a 	bl	800dd42 <USBD_CtlError>
      break;
 800d28e:	bf00      	nop
  }

  return ret;
 800d290:	7bfb      	ldrb	r3, [r7, #15]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop

0800d29c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d2b2:	2b40      	cmp	r3, #64	@ 0x40
 800d2b4:	d005      	beq.n	800d2c2 <USBD_StdItfReq+0x26>
 800d2b6:	2b40      	cmp	r3, #64	@ 0x40
 800d2b8:	d852      	bhi.n	800d360 <USBD_StdItfReq+0xc4>
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d001      	beq.n	800d2c2 <USBD_StdItfReq+0x26>
 800d2be:	2b20      	cmp	r3, #32
 800d2c0:	d14e      	bne.n	800d360 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d840      	bhi.n	800d352 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	889b      	ldrh	r3, [r3, #4]
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d836      	bhi.n	800d348 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	889b      	ldrh	r3, [r3, #4]
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7ff feda 	bl	800d09c <USBD_CoreFindIF>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2ec:	7bbb      	ldrb	r3, [r7, #14]
 800d2ee:	2bff      	cmp	r3, #255	@ 0xff
 800d2f0:	d01d      	beq.n	800d32e <USBD_StdItfReq+0x92>
 800d2f2:	7bbb      	ldrb	r3, [r7, #14]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d11a      	bne.n	800d32e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d2f8:	7bba      	ldrb	r2, [r7, #14]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	32ae      	adds	r2, #174	@ 0xae
 800d2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00f      	beq.n	800d328 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d308:	7bba      	ldrb	r2, [r7, #14]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d310:	7bba      	ldrb	r2, [r7, #14]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	32ae      	adds	r2, #174	@ 0xae
 800d316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	4798      	blx	r3
 800d322:	4603      	mov	r3, r0
 800d324:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d326:	e004      	b.n	800d332 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d328:	2303      	movs	r3, #3
 800d32a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d32c:	e001      	b.n	800d332 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d32e:	2303      	movs	r3, #3
 800d330:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	88db      	ldrh	r3, [r3, #6]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d110      	bne.n	800d35c <USBD_StdItfReq+0xc0>
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10d      	bne.n	800d35c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fddc 	bl	800defe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d346:	e009      	b.n	800d35c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 fcf9 	bl	800dd42 <USBD_CtlError>
          break;
 800d350:	e004      	b.n	800d35c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fcf4 	bl	800dd42 <USBD_CtlError>
          break;
 800d35a:	e000      	b.n	800d35e <USBD_StdItfReq+0xc2>
          break;
 800d35c:	bf00      	nop
      }
      break;
 800d35e:	e004      	b.n	800d36a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 fced 	bl	800dd42 <USBD_CtlError>
      break;
 800d368:	bf00      	nop
  }

  return ret;
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	889b      	ldrh	r3, [r3, #4]
 800d386:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d390:	2b40      	cmp	r3, #64	@ 0x40
 800d392:	d007      	beq.n	800d3a4 <USBD_StdEPReq+0x30>
 800d394:	2b40      	cmp	r3, #64	@ 0x40
 800d396:	f200 8181 	bhi.w	800d69c <USBD_StdEPReq+0x328>
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d02a      	beq.n	800d3f4 <USBD_StdEPReq+0x80>
 800d39e:	2b20      	cmp	r3, #32
 800d3a0:	f040 817c 	bne.w	800d69c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3a4:	7bbb      	ldrb	r3, [r7, #14]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7ff fe84 	bl	800d0b6 <USBD_CoreFindEP>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3b2:	7b7b      	ldrb	r3, [r7, #13]
 800d3b4:	2bff      	cmp	r3, #255	@ 0xff
 800d3b6:	f000 8176 	beq.w	800d6a6 <USBD_StdEPReq+0x332>
 800d3ba:	7b7b      	ldrb	r3, [r7, #13]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 8172 	bne.w	800d6a6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800d3c2:	7b7a      	ldrb	r2, [r7, #13]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d3ca:	7b7a      	ldrb	r2, [r7, #13]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	32ae      	adds	r2, #174	@ 0xae
 800d3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 8165 	beq.w	800d6a6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d3dc:	7b7a      	ldrb	r2, [r7, #13]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	32ae      	adds	r2, #174	@ 0xae
 800d3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	6839      	ldr	r1, [r7, #0]
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	4798      	blx	r3
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d3f2:	e158      	b.n	800d6a6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	785b      	ldrb	r3, [r3, #1]
 800d3f8:	2b03      	cmp	r3, #3
 800d3fa:	d008      	beq.n	800d40e <USBD_StdEPReq+0x9a>
 800d3fc:	2b03      	cmp	r3, #3
 800d3fe:	f300 8147 	bgt.w	800d690 <USBD_StdEPReq+0x31c>
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 809b 	beq.w	800d53e <USBD_StdEPReq+0x1ca>
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d03c      	beq.n	800d486 <USBD_StdEPReq+0x112>
 800d40c:	e140      	b.n	800d690 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b02      	cmp	r3, #2
 800d418:	d002      	beq.n	800d420 <USBD_StdEPReq+0xac>
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d016      	beq.n	800d44c <USBD_StdEPReq+0xd8>
 800d41e:	e02c      	b.n	800d47a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d420:	7bbb      	ldrb	r3, [r7, #14]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00d      	beq.n	800d442 <USBD_StdEPReq+0xce>
 800d426:	7bbb      	ldrb	r3, [r7, #14]
 800d428:	2b80      	cmp	r3, #128	@ 0x80
 800d42a:	d00a      	beq.n	800d442 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d42c:	7bbb      	ldrb	r3, [r7, #14]
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f001 f9e5 	bl	800e800 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d436:	2180      	movs	r1, #128	@ 0x80
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f001 f9e1 	bl	800e800 <USBD_LL_StallEP>
 800d43e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d440:	e020      	b.n	800d484 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d442:	6839      	ldr	r1, [r7, #0]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 fc7c 	bl	800dd42 <USBD_CtlError>
              break;
 800d44a:	e01b      	b.n	800d484 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	885b      	ldrh	r3, [r3, #2]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10e      	bne.n	800d472 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00b      	beq.n	800d472 <USBD_StdEPReq+0xfe>
 800d45a:	7bbb      	ldrb	r3, [r7, #14]
 800d45c:	2b80      	cmp	r3, #128	@ 0x80
 800d45e:	d008      	beq.n	800d472 <USBD_StdEPReq+0xfe>
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	88db      	ldrh	r3, [r3, #6]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d104      	bne.n	800d472 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d468:	7bbb      	ldrb	r3, [r7, #14]
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f001 f9c7 	bl	800e800 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fd43 	bl	800defe <USBD_CtlSendStatus>

              break;
 800d478:	e004      	b.n	800d484 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fc60 	bl	800dd42 <USBD_CtlError>
              break;
 800d482:	bf00      	nop
          }
          break;
 800d484:	e109      	b.n	800d69a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d002      	beq.n	800d498 <USBD_StdEPReq+0x124>
 800d492:	2b03      	cmp	r3, #3
 800d494:	d016      	beq.n	800d4c4 <USBD_StdEPReq+0x150>
 800d496:	e04b      	b.n	800d530 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d498:	7bbb      	ldrb	r3, [r7, #14]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00d      	beq.n	800d4ba <USBD_StdEPReq+0x146>
 800d49e:	7bbb      	ldrb	r3, [r7, #14]
 800d4a0:	2b80      	cmp	r3, #128	@ 0x80
 800d4a2:	d00a      	beq.n	800d4ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4a4:	7bbb      	ldrb	r3, [r7, #14]
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f001 f9a9 	bl	800e800 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4ae:	2180      	movs	r1, #128	@ 0x80
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f001 f9a5 	bl	800e800 <USBD_LL_StallEP>
 800d4b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4b8:	e040      	b.n	800d53c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fc40 	bl	800dd42 <USBD_CtlError>
              break;
 800d4c2:	e03b      	b.n	800d53c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	885b      	ldrh	r3, [r3, #2]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d136      	bne.n	800d53a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4cc:	7bbb      	ldrb	r3, [r7, #14]
 800d4ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d004      	beq.n	800d4e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4d6:	7bbb      	ldrb	r3, [r7, #14]
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f001 f9af 	bl	800e83e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 fd0c 	bl	800defe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7ff fde3 	bl	800d0b6 <USBD_CoreFindEP>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4f4:	7b7b      	ldrb	r3, [r7, #13]
 800d4f6:	2bff      	cmp	r3, #255	@ 0xff
 800d4f8:	d01f      	beq.n	800d53a <USBD_StdEPReq+0x1c6>
 800d4fa:	7b7b      	ldrb	r3, [r7, #13]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d11c      	bne.n	800d53a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d500:	7b7a      	ldrb	r2, [r7, #13]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d508:	7b7a      	ldrb	r2, [r7, #13]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	32ae      	adds	r2, #174	@ 0xae
 800d50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d010      	beq.n	800d53a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d518:	7b7a      	ldrb	r2, [r7, #13]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	32ae      	adds	r2, #174	@ 0xae
 800d51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	6839      	ldr	r1, [r7, #0]
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	4798      	blx	r3
 800d52a:	4603      	mov	r3, r0
 800d52c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d52e:	e004      	b.n	800d53a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d530:	6839      	ldr	r1, [r7, #0]
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fc05 	bl	800dd42 <USBD_CtlError>
              break;
 800d538:	e000      	b.n	800d53c <USBD_StdEPReq+0x1c8>
              break;
 800d53a:	bf00      	nop
          }
          break;
 800d53c:	e0ad      	b.n	800d69a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b02      	cmp	r3, #2
 800d548:	d002      	beq.n	800d550 <USBD_StdEPReq+0x1dc>
 800d54a:	2b03      	cmp	r3, #3
 800d54c:	d033      	beq.n	800d5b6 <USBD_StdEPReq+0x242>
 800d54e:	e099      	b.n	800d684 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d550:	7bbb      	ldrb	r3, [r7, #14]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d007      	beq.n	800d566 <USBD_StdEPReq+0x1f2>
 800d556:	7bbb      	ldrb	r3, [r7, #14]
 800d558:	2b80      	cmp	r3, #128	@ 0x80
 800d55a:	d004      	beq.n	800d566 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fbef 	bl	800dd42 <USBD_CtlError>
                break;
 800d564:	e093      	b.n	800d68e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	da0b      	bge.n	800d586 <USBD_StdEPReq+0x212>
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
 800d570:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d574:	4613      	mov	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4413      	add	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	3310      	adds	r3, #16
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	4413      	add	r3, r2
 800d582:	3304      	adds	r3, #4
 800d584:	e00b      	b.n	800d59e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d586:	7bbb      	ldrb	r3, [r7, #14]
 800d588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d58c:	4613      	mov	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	4413      	add	r3, r2
 800d59c:	3304      	adds	r3, #4
 800d59e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	330e      	adds	r3, #14
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fc44 	bl	800de3c <USBD_CtlSendData>
              break;
 800d5b4:	e06b      	b.n	800d68e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d5b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	da11      	bge.n	800d5e2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5be:	7bbb      	ldrb	r3, [r7, #14]
 800d5c0:	f003 020f 	and.w	r2, r3, #15
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	440b      	add	r3, r1
 800d5d0:	3323      	adds	r3, #35	@ 0x23
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d117      	bne.n	800d608 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fbb1 	bl	800dd42 <USBD_CtlError>
                  break;
 800d5e0:	e055      	b.n	800d68e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5e2:	7bbb      	ldrb	r3, [r7, #14]
 800d5e4:	f003 020f 	and.w	r2, r3, #15
 800d5e8:	6879      	ldr	r1, [r7, #4]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	4413      	add	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	440b      	add	r3, r1
 800d5f4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d104      	bne.n	800d608 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d5fe:	6839      	ldr	r1, [r7, #0]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fb9e 	bl	800dd42 <USBD_CtlError>
                  break;
 800d606:	e042      	b.n	800d68e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	da0b      	bge.n	800d628 <USBD_StdEPReq+0x2b4>
 800d610:	7bbb      	ldrb	r3, [r7, #14]
 800d612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d616:	4613      	mov	r3, r2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4413      	add	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	3310      	adds	r3, #16
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	4413      	add	r3, r2
 800d624:	3304      	adds	r3, #4
 800d626:	e00b      	b.n	800d640 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d628:	7bbb      	ldrb	r3, [r7, #14]
 800d62a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d62e:	4613      	mov	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4413      	add	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	3304      	adds	r3, #4
 800d640:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d642:	7bbb      	ldrb	r3, [r7, #14]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <USBD_StdEPReq+0x2da>
 800d648:	7bbb      	ldrb	r3, [r7, #14]
 800d64a:	2b80      	cmp	r3, #128	@ 0x80
 800d64c:	d103      	bne.n	800d656 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2200      	movs	r2, #0
 800d652:	739a      	strb	r2, [r3, #14]
 800d654:	e00e      	b.n	800d674 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d656:	7bbb      	ldrb	r3, [r7, #14]
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f001 f90e 	bl	800e87c <USBD_LL_IsStallEP>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2201      	movs	r2, #1
 800d66a:	739a      	strb	r2, [r3, #14]
 800d66c:	e002      	b.n	800d674 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	2200      	movs	r2, #0
 800d672:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	330e      	adds	r3, #14
 800d678:	2202      	movs	r2, #2
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fbdd 	bl	800de3c <USBD_CtlSendData>
              break;
 800d682:	e004      	b.n	800d68e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fb5b 	bl	800dd42 <USBD_CtlError>
              break;
 800d68c:	bf00      	nop
          }
          break;
 800d68e:	e004      	b.n	800d69a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800d690:	6839      	ldr	r1, [r7, #0]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fb55 	bl	800dd42 <USBD_CtlError>
          break;
 800d698:	bf00      	nop
      }
      break;
 800d69a:	e005      	b.n	800d6a8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fb4f 	bl	800dd42 <USBD_CtlError>
      break;
 800d6a4:	e000      	b.n	800d6a8 <USBD_StdEPReq+0x334>
      break;
 800d6a6:	bf00      	nop
  }

  return ret;
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
	...

0800d6b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	885b      	ldrh	r3, [r3, #2]
 800d6ce:	0a1b      	lsrs	r3, r3, #8
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	2b06      	cmp	r3, #6
 800d6d6:	f200 8128 	bhi.w	800d92a <USBD_GetDescriptor+0x276>
 800d6da:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e0 <USBD_GetDescriptor+0x2c>)
 800d6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e0:	0800d6fd 	.word	0x0800d6fd
 800d6e4:	0800d715 	.word	0x0800d715
 800d6e8:	0800d755 	.word	0x0800d755
 800d6ec:	0800d92b 	.word	0x0800d92b
 800d6f0:	0800d92b 	.word	0x0800d92b
 800d6f4:	0800d8cb 	.word	0x0800d8cb
 800d6f8:	0800d8f7 	.word	0x0800d8f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	7c12      	ldrb	r2, [r2, #16]
 800d708:	f107 0108 	add.w	r1, r7, #8
 800d70c:	4610      	mov	r0, r2
 800d70e:	4798      	blx	r3
 800d710:	60f8      	str	r0, [r7, #12]
      break;
 800d712:	e112      	b.n	800d93a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	7c1b      	ldrb	r3, [r3, #16]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10d      	bne.n	800d738 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d724:	f107 0208 	add.w	r2, r7, #8
 800d728:	4610      	mov	r0, r2
 800d72a:	4798      	blx	r3
 800d72c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	3301      	adds	r3, #1
 800d732:	2202      	movs	r2, #2
 800d734:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d736:	e100      	b.n	800d93a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d740:	f107 0208 	add.w	r2, r7, #8
 800d744:	4610      	mov	r0, r2
 800d746:	4798      	blx	r3
 800d748:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	3301      	adds	r3, #1
 800d74e:	2202      	movs	r2, #2
 800d750:	701a      	strb	r2, [r3, #0]
      break;
 800d752:	e0f2      	b.n	800d93a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	885b      	ldrh	r3, [r3, #2]
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b05      	cmp	r3, #5
 800d75c:	f200 80ac 	bhi.w	800d8b8 <USBD_GetDescriptor+0x204>
 800d760:	a201      	add	r2, pc, #4	@ (adr r2, 800d768 <USBD_GetDescriptor+0xb4>)
 800d762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d766:	bf00      	nop
 800d768:	0800d781 	.word	0x0800d781
 800d76c:	0800d7b5 	.word	0x0800d7b5
 800d770:	0800d7e9 	.word	0x0800d7e9
 800d774:	0800d81d 	.word	0x0800d81d
 800d778:	0800d851 	.word	0x0800d851
 800d77c:	0800d885 	.word	0x0800d885
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00b      	beq.n	800d7a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	7c12      	ldrb	r2, [r2, #16]
 800d798:	f107 0108 	add.w	r1, r7, #8
 800d79c:	4610      	mov	r0, r2
 800d79e:	4798      	blx	r3
 800d7a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7a2:	e091      	b.n	800d8c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 facb 	bl	800dd42 <USBD_CtlError>
            err++;
 800d7ac:	7afb      	ldrb	r3, [r7, #11]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d7b2:	e089      	b.n	800d8c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00b      	beq.n	800d7d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	7c12      	ldrb	r2, [r2, #16]
 800d7cc:	f107 0108 	add.w	r1, r7, #8
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	4798      	blx	r3
 800d7d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7d6:	e077      	b.n	800d8c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fab1 	bl	800dd42 <USBD_CtlError>
            err++;
 800d7e0:	7afb      	ldrb	r3, [r7, #11]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d7e6:	e06f      	b.n	800d8c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00b      	beq.n	800d80c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	7c12      	ldrb	r2, [r2, #16]
 800d800:	f107 0108 	add.w	r1, r7, #8
 800d804:	4610      	mov	r0, r2
 800d806:	4798      	blx	r3
 800d808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d80a:	e05d      	b.n	800d8c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa97 	bl	800dd42 <USBD_CtlError>
            err++;
 800d814:	7afb      	ldrb	r3, [r7, #11]
 800d816:	3301      	adds	r3, #1
 800d818:	72fb      	strb	r3, [r7, #11]
          break;
 800d81a:	e055      	b.n	800d8c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d822:	691b      	ldr	r3, [r3, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00b      	beq.n	800d840 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	7c12      	ldrb	r2, [r2, #16]
 800d834:	f107 0108 	add.w	r1, r7, #8
 800d838:	4610      	mov	r0, r2
 800d83a:	4798      	blx	r3
 800d83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d83e:	e043      	b.n	800d8c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d840:	6839      	ldr	r1, [r7, #0]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 fa7d 	bl	800dd42 <USBD_CtlError>
            err++;
 800d848:	7afb      	ldrb	r3, [r7, #11]
 800d84a:	3301      	adds	r3, #1
 800d84c:	72fb      	strb	r3, [r7, #11]
          break;
 800d84e:	e03b      	b.n	800d8c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00b      	beq.n	800d874 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d862:	695b      	ldr	r3, [r3, #20]
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	7c12      	ldrb	r2, [r2, #16]
 800d868:	f107 0108 	add.w	r1, r7, #8
 800d86c:	4610      	mov	r0, r2
 800d86e:	4798      	blx	r3
 800d870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d872:	e029      	b.n	800d8c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d874:	6839      	ldr	r1, [r7, #0]
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 fa63 	bl	800dd42 <USBD_CtlError>
            err++;
 800d87c:	7afb      	ldrb	r3, [r7, #11]
 800d87e:	3301      	adds	r3, #1
 800d880:	72fb      	strb	r3, [r7, #11]
          break;
 800d882:	e021      	b.n	800d8c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d88a:	699b      	ldr	r3, [r3, #24]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00b      	beq.n	800d8a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	7c12      	ldrb	r2, [r2, #16]
 800d89c:	f107 0108 	add.w	r1, r7, #8
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	4798      	blx	r3
 800d8a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8a6:	e00f      	b.n	800d8c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8a8:	6839      	ldr	r1, [r7, #0]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fa49 	bl	800dd42 <USBD_CtlError>
            err++;
 800d8b0:	7afb      	ldrb	r3, [r7, #11]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d8b6:	e007      	b.n	800d8c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 fa41 	bl	800dd42 <USBD_CtlError>
          err++;
 800d8c0:	7afb      	ldrb	r3, [r7, #11]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d8c6:	bf00      	nop
      }
      break;
 800d8c8:	e037      	b.n	800d93a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	7c1b      	ldrb	r3, [r3, #16]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d109      	bne.n	800d8e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8da:	f107 0208 	add.w	r2, r7, #8
 800d8de:	4610      	mov	r0, r2
 800d8e0:	4798      	blx	r3
 800d8e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8e4:	e029      	b.n	800d93a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8e6:	6839      	ldr	r1, [r7, #0]
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 fa2a 	bl	800dd42 <USBD_CtlError>
        err++;
 800d8ee:	7afb      	ldrb	r3, [r7, #11]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	72fb      	strb	r3, [r7, #11]
      break;
 800d8f4:	e021      	b.n	800d93a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	7c1b      	ldrb	r3, [r3, #16]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d10d      	bne.n	800d91a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d906:	f107 0208 	add.w	r2, r7, #8
 800d90a:	4610      	mov	r0, r2
 800d90c:	4798      	blx	r3
 800d90e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	3301      	adds	r3, #1
 800d914:	2207      	movs	r2, #7
 800d916:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d918:	e00f      	b.n	800d93a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 fa10 	bl	800dd42 <USBD_CtlError>
        err++;
 800d922:	7afb      	ldrb	r3, [r7, #11]
 800d924:	3301      	adds	r3, #1
 800d926:	72fb      	strb	r3, [r7, #11]
      break;
 800d928:	e007      	b.n	800d93a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fa08 	bl	800dd42 <USBD_CtlError>
      err++;
 800d932:	7afb      	ldrb	r3, [r7, #11]
 800d934:	3301      	adds	r3, #1
 800d936:	72fb      	strb	r3, [r7, #11]
      break;
 800d938:	bf00      	nop
  }

  if (err != 0U)
 800d93a:	7afb      	ldrb	r3, [r7, #11]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d11e      	bne.n	800d97e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	88db      	ldrh	r3, [r3, #6]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d016      	beq.n	800d976 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d948:	893b      	ldrh	r3, [r7, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00e      	beq.n	800d96c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	88da      	ldrh	r2, [r3, #6]
 800d952:	893b      	ldrh	r3, [r7, #8]
 800d954:	4293      	cmp	r3, r2
 800d956:	bf28      	it	cs
 800d958:	4613      	movcs	r3, r2
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d95e:	893b      	ldrh	r3, [r7, #8]
 800d960:	461a      	mov	r2, r3
 800d962:	68f9      	ldr	r1, [r7, #12]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 fa69 	bl	800de3c <USBD_CtlSendData>
 800d96a:	e009      	b.n	800d980 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d96c:	6839      	ldr	r1, [r7, #0]
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 f9e7 	bl	800dd42 <USBD_CtlError>
 800d974:	e004      	b.n	800d980 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 fac1 	bl	800defe <USBD_CtlSendStatus>
 800d97c:	e000      	b.n	800d980 <USBD_GetDescriptor+0x2cc>
    return;
 800d97e:	bf00      	nop
  }
}
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop

0800d988 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	889b      	ldrh	r3, [r3, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d131      	bne.n	800d9fe <USBD_SetAddress+0x76>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	88db      	ldrh	r3, [r3, #6]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d12d      	bne.n	800d9fe <USBD_SetAddress+0x76>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	885b      	ldrh	r3, [r3, #2]
 800d9a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9a8:	d829      	bhi.n	800d9fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	885b      	ldrh	r3, [r3, #2]
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	2b03      	cmp	r3, #3
 800d9c0:	d104      	bne.n	800d9cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 f9bc 	bl	800dd42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ca:	e01d      	b.n	800da08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	7bfa      	ldrb	r2, [r7, #15]
 800d9d0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d9d4:	7bfb      	ldrb	r3, [r7, #15]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 ff7b 	bl	800e8d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fa8d 	bl	800defe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d004      	beq.n	800d9f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2202      	movs	r2, #2
 800d9ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9f2:	e009      	b.n	800da08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9fc:	e004      	b.n	800da08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f99e 	bl	800dd42 <USBD_CtlError>
  }
}
 800da06:	bf00      	nop
 800da08:	bf00      	nop
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da1a:	2300      	movs	r3, #0
 800da1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	885b      	ldrh	r3, [r3, #2]
 800da22:	b2da      	uxtb	r2, r3
 800da24:	4b4e      	ldr	r3, [pc, #312]	@ (800db60 <USBD_SetConfig+0x150>)
 800da26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da28:	4b4d      	ldr	r3, [pc, #308]	@ (800db60 <USBD_SetConfig+0x150>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d905      	bls.n	800da3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da30:	6839      	ldr	r1, [r7, #0]
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f985 	bl	800dd42 <USBD_CtlError>
    return USBD_FAIL;
 800da38:	2303      	movs	r3, #3
 800da3a:	e08c      	b.n	800db56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da42:	b2db      	uxtb	r3, r3
 800da44:	2b02      	cmp	r3, #2
 800da46:	d002      	beq.n	800da4e <USBD_SetConfig+0x3e>
 800da48:	2b03      	cmp	r3, #3
 800da4a:	d029      	beq.n	800daa0 <USBD_SetConfig+0x90>
 800da4c:	e075      	b.n	800db3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da4e:	4b44      	ldr	r3, [pc, #272]	@ (800db60 <USBD_SetConfig+0x150>)
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d020      	beq.n	800da98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da56:	4b42      	ldr	r3, [pc, #264]	@ (800db60 <USBD_SetConfig+0x150>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da60:	4b3f      	ldr	r3, [pc, #252]	@ (800db60 <USBD_SetConfig+0x150>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7fe ffcd 	bl	800ca06 <USBD_SetClassConfig>
 800da6c:	4603      	mov	r3, r0
 800da6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da70:	7bfb      	ldrb	r3, [r7, #15]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d008      	beq.n	800da88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da76:	6839      	ldr	r1, [r7, #0]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f962 	bl	800dd42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2202      	movs	r2, #2
 800da82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da86:	e065      	b.n	800db54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 fa38 	bl	800defe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2203      	movs	r2, #3
 800da92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800da96:	e05d      	b.n	800db54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fa30 	bl	800defe <USBD_CtlSendStatus>
      break;
 800da9e:	e059      	b.n	800db54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800daa0:	4b2f      	ldr	r3, [pc, #188]	@ (800db60 <USBD_SetConfig+0x150>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d112      	bne.n	800dace <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2202      	movs	r2, #2
 800daac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dab0:	4b2b      	ldr	r3, [pc, #172]	@ (800db60 <USBD_SetConfig+0x150>)
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	461a      	mov	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800daba:	4b29      	ldr	r3, [pc, #164]	@ (800db60 <USBD_SetConfig+0x150>)
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	4619      	mov	r1, r3
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7fe ffbc 	bl	800ca3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fa19 	bl	800defe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dacc:	e042      	b.n	800db54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dace:	4b24      	ldr	r3, [pc, #144]	@ (800db60 <USBD_SetConfig+0x150>)
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	461a      	mov	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d02a      	beq.n	800db32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	4619      	mov	r1, r3
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7fe ffaa 	bl	800ca3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800daea:	4b1d      	ldr	r3, [pc, #116]	@ (800db60 <USBD_SetConfig+0x150>)
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800daf4:	4b1a      	ldr	r3, [pc, #104]	@ (800db60 <USBD_SetConfig+0x150>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7fe ff83 	bl	800ca06 <USBD_SetClassConfig>
 800db00:	4603      	mov	r3, r0
 800db02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800db04:	7bfb      	ldrb	r3, [r7, #15]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00f      	beq.n	800db2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800db0a:	6839      	ldr	r1, [r7, #0]
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f918 	bl	800dd42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	b2db      	uxtb	r3, r3
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7fe ff8f 	bl	800ca3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800db28:	e014      	b.n	800db54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 f9e7 	bl	800defe <USBD_CtlSendStatus>
      break;
 800db30:	e010      	b.n	800db54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f9e3 	bl	800defe <USBD_CtlSendStatus>
      break;
 800db38:	e00c      	b.n	800db54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 f900 	bl	800dd42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db42:	4b07      	ldr	r3, [pc, #28]	@ (800db60 <USBD_SetConfig+0x150>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7fe ff78 	bl	800ca3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db4e:	2303      	movs	r3, #3
 800db50:	73fb      	strb	r3, [r7, #15]
      break;
 800db52:	bf00      	nop
  }

  return ret;
 800db54:	7bfb      	ldrb	r3, [r7, #15]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	20000b30 	.word	0x20000b30

0800db64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	88db      	ldrh	r3, [r3, #6]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d004      	beq.n	800db80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db76:	6839      	ldr	r1, [r7, #0]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 f8e2 	bl	800dd42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db7e:	e023      	b.n	800dbc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b02      	cmp	r3, #2
 800db8a:	dc02      	bgt.n	800db92 <USBD_GetConfig+0x2e>
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dc03      	bgt.n	800db98 <USBD_GetConfig+0x34>
 800db90:	e015      	b.n	800dbbe <USBD_GetConfig+0x5a>
 800db92:	2b03      	cmp	r3, #3
 800db94:	d00b      	beq.n	800dbae <USBD_GetConfig+0x4a>
 800db96:	e012      	b.n	800dbbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	3308      	adds	r3, #8
 800dba2:	2201      	movs	r2, #1
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f948 	bl	800de3c <USBD_CtlSendData>
        break;
 800dbac:	e00c      	b.n	800dbc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 f940 	bl	800de3c <USBD_CtlSendData>
        break;
 800dbbc:	e004      	b.n	800dbc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f8be 	bl	800dd42 <USBD_CtlError>
        break;
 800dbc6:	bf00      	nop
}
 800dbc8:	bf00      	nop
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d81e      	bhi.n	800dc26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	88db      	ldrh	r3, [r3, #6]
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d004      	beq.n	800dbfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f8a5 	bl	800dd42 <USBD_CtlError>
        break;
 800dbf8:	e01a      	b.n	800dc30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d005      	beq.n	800dc16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	f043 0202 	orr.w	r2, r3, #2
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	330c      	adds	r3, #12
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f90c 	bl	800de3c <USBD_CtlSendData>
      break;
 800dc24:	e004      	b.n	800dc30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 f88a 	bl	800dd42 <USBD_CtlError>
      break;
 800dc2e:	bf00      	nop
  }
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	885b      	ldrh	r3, [r3, #2]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d107      	bne.n	800dc5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f953 	bl	800defe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc58:	e013      	b.n	800dc82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	885b      	ldrh	r3, [r3, #2]
 800dc5e:	2b02      	cmp	r3, #2
 800dc60:	d10b      	bne.n	800dc7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	889b      	ldrh	r3, [r3, #4]
 800dc66:	0a1b      	lsrs	r3, r3, #8
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f943 	bl	800defe <USBD_CtlSendStatus>
}
 800dc78:	e003      	b.n	800dc82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc7a:	6839      	ldr	r1, [r7, #0]
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f860 	bl	800dd42 <USBD_CtlError>
}
 800dc82:	bf00      	nop
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b082      	sub	sp, #8
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d80b      	bhi.n	800dcba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	885b      	ldrh	r3, [r3, #2]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d10c      	bne.n	800dcc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 f923 	bl	800defe <USBD_CtlSendStatus>
      }
      break;
 800dcb8:	e004      	b.n	800dcc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 f840 	bl	800dd42 <USBD_CtlError>
      break;
 800dcc2:	e000      	b.n	800dcc6 <USBD_ClrFeature+0x3c>
      break;
 800dcc4:	bf00      	nop
  }
}
 800dcc6:	bf00      	nop
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	781a      	ldrb	r2, [r3, #0]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	3301      	adds	r3, #1
 800dce8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	781a      	ldrb	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f7ff fa3d 	bl	800d178 <SWAPBYTE>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	461a      	mov	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f7ff fa30 	bl	800d178 <SWAPBYTE>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3301      	adds	r3, #1
 800dd24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f7ff fa23 	bl	800d178 <SWAPBYTE>
 800dd32:	4603      	mov	r3, r0
 800dd34:	461a      	mov	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	80da      	strh	r2, [r3, #6]
}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd4c:	2180      	movs	r1, #128	@ 0x80
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 fd56 	bl	800e800 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd54:	2100      	movs	r1, #0
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fd52 	bl	800e800 <USBD_LL_StallEP>
}
 800dd5c:	bf00      	nop
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd70:	2300      	movs	r3, #0
 800dd72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d042      	beq.n	800de00 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dd7e:	6938      	ldr	r0, [r7, #16]
 800dd80:	f000 f842 	bl	800de08 <USBD_GetLen>
 800dd84:	4603      	mov	r3, r0
 800dd86:	3301      	adds	r3, #1
 800dd88:	005b      	lsls	r3, r3, #1
 800dd8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd8e:	d808      	bhi.n	800dda2 <USBD_GetString+0x3e>
 800dd90:	6938      	ldr	r0, [r7, #16]
 800dd92:	f000 f839 	bl	800de08 <USBD_GetLen>
 800dd96:	4603      	mov	r3, r0
 800dd98:	3301      	adds	r3, #1
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	005b      	lsls	r3, r3, #1
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	e001      	b.n	800dda6 <USBD_GetString+0x42>
 800dda2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ddaa:	7dfb      	ldrb	r3, [r7, #23]
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	4413      	add	r3, r2
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	7812      	ldrb	r2, [r2, #0]
 800ddb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ddbc:	7dfb      	ldrb	r3, [r7, #23]
 800ddbe:	68ba      	ldr	r2, [r7, #8]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	2203      	movs	r2, #3
 800ddc4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddc6:	7dfb      	ldrb	r3, [r7, #23]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ddcc:	e013      	b.n	800ddf6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	7812      	ldrb	r2, [r2, #0]
 800ddd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	3301      	adds	r3, #1
 800ddde:	613b      	str	r3, [r7, #16]
    idx++;
 800dde0:	7dfb      	ldrb	r3, [r7, #23]
 800dde2:	3301      	adds	r3, #1
 800dde4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	4413      	add	r3, r2
 800ddec:	2200      	movs	r2, #0
 800ddee:	701a      	strb	r2, [r3, #0]
    idx++;
 800ddf0:	7dfb      	ldrb	r3, [r7, #23]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1e7      	bne.n	800ddce <USBD_GetString+0x6a>
 800ddfe:	e000      	b.n	800de02 <USBD_GetString+0x9e>
    return;
 800de00:	bf00      	nop
  }
}
 800de02:	3718      	adds	r7, #24
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de10:	2300      	movs	r3, #0
 800de12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de18:	e005      	b.n	800de26 <USBD_GetLen+0x1e>
  {
    len++;
 800de1a:	7bfb      	ldrb	r3, [r7, #15]
 800de1c:	3301      	adds	r3, #1
 800de1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	3301      	adds	r3, #1
 800de24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1f5      	bne.n	800de1a <USBD_GetLen+0x12>
  }

  return len;
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2202      	movs	r2, #2
 800de4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	2100      	movs	r1, #0
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f000 fd52 	bl	800e912 <USBD_LL_Transmit>

  return USBD_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68ba      	ldr	r2, [r7, #8]
 800de88:	2100      	movs	r1, #0
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f000 fd41 	bl	800e912 <USBD_LL_Transmit>

  return USBD_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2203      	movs	r2, #3
 800deaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	2100      	movs	r1, #0
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 fd41 	bl	800e954 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ded2:	2300      	movs	r3, #0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	68ba      	ldr	r2, [r7, #8]
 800deec:	2100      	movs	r1, #0
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f000 fd30 	bl	800e954 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800defe:	b580      	push	{r7, lr}
 800df00:	b082      	sub	sp, #8
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2204      	movs	r2, #4
 800df0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df0e:	2300      	movs	r3, #0
 800df10:	2200      	movs	r2, #0
 800df12:	2100      	movs	r1, #0
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fcfc 	bl	800e912 <USBD_LL_Transmit>

  return USBD_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2205      	movs	r2, #5
 800df30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df34:	2300      	movs	r3, #0
 800df36:	2200      	movs	r2, #0
 800df38:	2100      	movs	r1, #0
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 fd0a 	bl	800e954 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df50:	2200      	movs	r2, #0
 800df52:	4912      	ldr	r1, [pc, #72]	@ (800df9c <MX_USB_DEVICE_Init+0x50>)
 800df54:	4812      	ldr	r0, [pc, #72]	@ (800dfa0 <MX_USB_DEVICE_Init+0x54>)
 800df56:	f7fe fcd9 	bl	800c90c <USBD_Init>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df60:	f7f4 f83a 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df64:	490f      	ldr	r1, [pc, #60]	@ (800dfa4 <MX_USB_DEVICE_Init+0x58>)
 800df66:	480e      	ldr	r0, [pc, #56]	@ (800dfa0 <MX_USB_DEVICE_Init+0x54>)
 800df68:	f7fe fd00 	bl	800c96c <USBD_RegisterClass>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d001      	beq.n	800df76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df72:	f7f4 f831 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df76:	490c      	ldr	r1, [pc, #48]	@ (800dfa8 <MX_USB_DEVICE_Init+0x5c>)
 800df78:	4809      	ldr	r0, [pc, #36]	@ (800dfa0 <MX_USB_DEVICE_Init+0x54>)
 800df7a:	f7fe fbf7 	bl	800c76c <USBD_CDC_RegisterInterface>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d001      	beq.n	800df88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df84:	f7f4 f828 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df88:	4805      	ldr	r0, [pc, #20]	@ (800dfa0 <MX_USB_DEVICE_Init+0x54>)
 800df8a:	f7fe fd25 	bl	800c9d8 <USBD_Start>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df94:	f7f4 f820 	bl	8001fd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df98:	bf00      	nop
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	200000e4 	.word	0x200000e4
 800dfa0:	20000b34 	.word	0x20000b34
 800dfa4:	20000048 	.word	0x20000048
 800dfa8:	200000d0 	.word	0x200000d0

0800dfac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	4905      	ldr	r1, [pc, #20]	@ (800dfc8 <CDC_Init_FS+0x1c>)
 800dfb4:	4805      	ldr	r0, [pc, #20]	@ (800dfcc <CDC_Init_FS+0x20>)
 800dfb6:	f7fe fbf3 	bl	800c7a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dfba:	4905      	ldr	r1, [pc, #20]	@ (800dfd0 <CDC_Init_FS+0x24>)
 800dfbc:	4803      	ldr	r0, [pc, #12]	@ (800dfcc <CDC_Init_FS+0x20>)
 800dfbe:	f7fe fc11 	bl	800c7e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dfc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	20001010 	.word	0x20001010
 800dfcc:	20000b34 	.word	0x20000b34
 800dfd0:	20000e10 	.word	0x20000e10

0800dfd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dfd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	6039      	str	r1, [r7, #0]
 800dfee:	71fb      	strb	r3, [r7, #7]
 800dff0:	4613      	mov	r3, r2
 800dff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dff4:	79fb      	ldrb	r3, [r7, #7]
 800dff6:	2b23      	cmp	r3, #35	@ 0x23
 800dff8:	f200 8098 	bhi.w	800e12c <CDC_Control_FS+0x148>
 800dffc:	a201      	add	r2, pc, #4	@ (adr r2, 800e004 <CDC_Control_FS+0x20>)
 800dffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e002:	bf00      	nop
 800e004:	0800e12d 	.word	0x0800e12d
 800e008:	0800e12d 	.word	0x0800e12d
 800e00c:	0800e12d 	.word	0x0800e12d
 800e010:	0800e12d 	.word	0x0800e12d
 800e014:	0800e12d 	.word	0x0800e12d
 800e018:	0800e12d 	.word	0x0800e12d
 800e01c:	0800e12d 	.word	0x0800e12d
 800e020:	0800e12d 	.word	0x0800e12d
 800e024:	0800e12d 	.word	0x0800e12d
 800e028:	0800e12d 	.word	0x0800e12d
 800e02c:	0800e12d 	.word	0x0800e12d
 800e030:	0800e12d 	.word	0x0800e12d
 800e034:	0800e12d 	.word	0x0800e12d
 800e038:	0800e12d 	.word	0x0800e12d
 800e03c:	0800e12d 	.word	0x0800e12d
 800e040:	0800e12d 	.word	0x0800e12d
 800e044:	0800e12d 	.word	0x0800e12d
 800e048:	0800e12d 	.word	0x0800e12d
 800e04c:	0800e12d 	.word	0x0800e12d
 800e050:	0800e12d 	.word	0x0800e12d
 800e054:	0800e12d 	.word	0x0800e12d
 800e058:	0800e12d 	.word	0x0800e12d
 800e05c:	0800e12d 	.word	0x0800e12d
 800e060:	0800e12d 	.word	0x0800e12d
 800e064:	0800e12d 	.word	0x0800e12d
 800e068:	0800e12d 	.word	0x0800e12d
 800e06c:	0800e12d 	.word	0x0800e12d
 800e070:	0800e12d 	.word	0x0800e12d
 800e074:	0800e12d 	.word	0x0800e12d
 800e078:	0800e12d 	.word	0x0800e12d
 800e07c:	0800e12d 	.word	0x0800e12d
 800e080:	0800e12d 	.word	0x0800e12d
 800e084:	0800e095 	.word	0x0800e095
 800e088:	0800e0d9 	.word	0x0800e0d9
 800e08c:	0800e12d 	.word	0x0800e12d
 800e090:	0800e12d 	.word	0x0800e12d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	461a      	mov	r2, r3
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	3301      	adds	r3, #1
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	021b      	lsls	r3, r3, #8
 800e0a2:	431a      	orrs	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	3302      	adds	r3, #2
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	041b      	lsls	r3, r3, #16
 800e0ac:	431a      	orrs	r2, r3
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	3303      	adds	r3, #3
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	061b      	lsls	r3, r3, #24
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4b20      	ldr	r3, [pc, #128]	@ (800e13c <CDC_Control_FS+0x158>)
 800e0bc:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	791a      	ldrb	r2, [r3, #4]
 800e0c2:	4b1e      	ldr	r3, [pc, #120]	@ (800e13c <CDC_Control_FS+0x158>)
 800e0c4:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	795a      	ldrb	r2, [r3, #5]
 800e0ca:	4b1c      	ldr	r3, [pc, #112]	@ (800e13c <CDC_Control_FS+0x158>)
 800e0cc:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	799a      	ldrb	r2, [r3, #6]
 800e0d2:	4b1a      	ldr	r3, [pc, #104]	@ (800e13c <CDC_Control_FS+0x158>)
 800e0d4:	719a      	strb	r2, [r3, #6]
    break;
 800e0d6:	e02a      	b.n	800e12e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800e0d8:	4b18      	ldr	r3, [pc, #96]	@ (800e13c <CDC_Control_FS+0x158>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800e0e2:	4b16      	ldr	r3, [pc, #88]	@ (800e13c <CDC_Control_FS+0x158>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	0a1a      	lsrs	r2, r3, #8
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	b2d2      	uxtb	r2, r2
 800e0ee:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800e0f0:	4b12      	ldr	r3, [pc, #72]	@ (800e13c <CDC_Control_FS+0x158>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	0c1a      	lsrs	r2, r3, #16
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	3302      	adds	r3, #2
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800e0fe:	4b0f      	ldr	r3, [pc, #60]	@ (800e13c <CDC_Control_FS+0x158>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	0e1a      	lsrs	r2, r3, #24
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	3303      	adds	r3, #3
 800e108:	b2d2      	uxtb	r2, r2
 800e10a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	3304      	adds	r3, #4
 800e110:	4a0a      	ldr	r2, [pc, #40]	@ (800e13c <CDC_Control_FS+0x158>)
 800e112:	7912      	ldrb	r2, [r2, #4]
 800e114:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	3305      	adds	r3, #5
 800e11a:	4a08      	ldr	r2, [pc, #32]	@ (800e13c <CDC_Control_FS+0x158>)
 800e11c:	7952      	ldrb	r2, [r2, #5]
 800e11e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	3306      	adds	r3, #6
 800e124:	4a05      	ldr	r2, [pc, #20]	@ (800e13c <CDC_Control_FS+0x158>)
 800e126:	7992      	ldrb	r2, [r2, #6]
 800e128:	701a      	strb	r2, [r3, #0]
    break;
 800e12a:	e000      	b.n	800e12e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e12c:	bf00      	nop
  }

  return (USBD_OK);
 800e12e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e130:	4618      	mov	r0, r3
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	200000c8 	.word	0x200000c8

0800e140 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800e14a:	4b0b      	ldr	r3, [pc, #44]	@ (800e178 <CDC_Receive_FS+0x38>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d006      	beq.n	800e160 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800e152:	4b09      	ldr	r3, [pc, #36]	@ (800e178 <CDC_Receive_FS+0x38>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	6812      	ldr	r2, [r2, #0]
 800e15a:	4611      	mov	r1, r2
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e160:	6879      	ldr	r1, [r7, #4]
 800e162:	4806      	ldr	r0, [pc, #24]	@ (800e17c <CDC_Receive_FS+0x3c>)
 800e164:	f7fe fb3e 	bl	800c7e4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e168:	4804      	ldr	r0, [pc, #16]	@ (800e17c <CDC_Receive_FS+0x3c>)
 800e16a:	f7fe fb99 	bl	800c8a0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800e16e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20001210 	.word	0x20001210
 800e17c:	20000b34 	.word	0x20000b34

0800e180 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e18c:	2300      	movs	r3, #0
 800e18e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e190:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c8 <CDC_Transmit_FS+0x48>)
 800e192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e196:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e00b      	b.n	800e1be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e1a6:	887b      	ldrh	r3, [r7, #2]
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	6879      	ldr	r1, [r7, #4]
 800e1ac:	4806      	ldr	r0, [pc, #24]	@ (800e1c8 <CDC_Transmit_FS+0x48>)
 800e1ae:	f7fe faf7 	bl	800c7a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e1b2:	4805      	ldr	r0, [pc, #20]	@ (800e1c8 <CDC_Transmit_FS+0x48>)
 800e1b4:	f7fe fb34 	bl	800c820 <USBD_CDC_TransmitPacket>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	20000b34 	.word	0x20000b34

0800e1cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b087      	sub	sp, #28
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e1de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	371c      	adds	r7, #28
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr
	...

0800e1f0 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800e1f8:	4a04      	ldr	r2, [pc, #16]	@ (800e20c <CDC_Attach_Rx+0x1c>)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6013      	str	r3, [r2, #0]
}
 800e1fe:	bf00      	nop
 800e200:	370c      	adds	r7, #12
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	20001210 	.word	0x20001210

0800e210 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	4603      	mov	r3, r0
 800e218:	6039      	str	r1, [r7, #0]
 800e21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	2212      	movs	r2, #18
 800e220:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e222:	4b03      	ldr	r3, [pc, #12]	@ (800e230 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e224:	4618      	mov	r0, r3
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	20000100 	.word	0x20000100

0800e234 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	4603      	mov	r3, r0
 800e23c:	6039      	str	r1, [r7, #0]
 800e23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2204      	movs	r2, #4
 800e244:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e246:	4b03      	ldr	r3, [pc, #12]	@ (800e254 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	20000114 	.word	0x20000114

0800e258 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	6039      	str	r1, [r7, #0]
 800e262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d105      	bne.n	800e276 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	4907      	ldr	r1, [pc, #28]	@ (800e28c <USBD_FS_ProductStrDescriptor+0x34>)
 800e26e:	4808      	ldr	r0, [pc, #32]	@ (800e290 <USBD_FS_ProductStrDescriptor+0x38>)
 800e270:	f7ff fd78 	bl	800dd64 <USBD_GetString>
 800e274:	e004      	b.n	800e280 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	4904      	ldr	r1, [pc, #16]	@ (800e28c <USBD_FS_ProductStrDescriptor+0x34>)
 800e27a:	4805      	ldr	r0, [pc, #20]	@ (800e290 <USBD_FS_ProductStrDescriptor+0x38>)
 800e27c:	f7ff fd72 	bl	800dd64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e280:	4b02      	ldr	r3, [pc, #8]	@ (800e28c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e282:	4618      	mov	r0, r3
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	20001214 	.word	0x20001214
 800e290:	0800f3cc 	.word	0x0800f3cc

0800e294 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	4603      	mov	r3, r0
 800e29c:	6039      	str	r1, [r7, #0]
 800e29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	4904      	ldr	r1, [pc, #16]	@ (800e2b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e2a4:	4804      	ldr	r0, [pc, #16]	@ (800e2b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e2a6:	f7ff fd5d 	bl	800dd64 <USBD_GetString>
  return USBD_StrDesc;
 800e2aa:	4b02      	ldr	r3, [pc, #8]	@ (800e2b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20001214 	.word	0x20001214
 800e2b8:	0800f3e4 	.word	0x0800f3e4

0800e2bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	6039      	str	r1, [r7, #0]
 800e2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	221a      	movs	r2, #26
 800e2cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e2ce:	f000 f843 	bl	800e358 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e2d2:	4b02      	ldr	r3, [pc, #8]	@ (800e2dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20000118 	.word	0x20000118

0800e2e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	6039      	str	r1, [r7, #0]
 800e2ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d105      	bne.n	800e2fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e2f2:	683a      	ldr	r2, [r7, #0]
 800e2f4:	4907      	ldr	r1, [pc, #28]	@ (800e314 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e2f6:	4808      	ldr	r0, [pc, #32]	@ (800e318 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e2f8:	f7ff fd34 	bl	800dd64 <USBD_GetString>
 800e2fc:	e004      	b.n	800e308 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e2fe:	683a      	ldr	r2, [r7, #0]
 800e300:	4904      	ldr	r1, [pc, #16]	@ (800e314 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e302:	4805      	ldr	r0, [pc, #20]	@ (800e318 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e304:	f7ff fd2e 	bl	800dd64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e308:	4b02      	ldr	r3, [pc, #8]	@ (800e314 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	20001214 	.word	0x20001214
 800e318:	0800f3f8 	.word	0x0800f3f8

0800e31c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	4603      	mov	r3, r0
 800e324:	6039      	str	r1, [r7, #0]
 800e326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d105      	bne.n	800e33a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	4907      	ldr	r1, [pc, #28]	@ (800e350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e332:	4808      	ldr	r0, [pc, #32]	@ (800e354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e334:	f7ff fd16 	bl	800dd64 <USBD_GetString>
 800e338:	e004      	b.n	800e344 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e33a:	683a      	ldr	r2, [r7, #0]
 800e33c:	4904      	ldr	r1, [pc, #16]	@ (800e350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e33e:	4805      	ldr	r0, [pc, #20]	@ (800e354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e340:	f7ff fd10 	bl	800dd64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e344:	4b02      	ldr	r3, [pc, #8]	@ (800e350 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e346:	4618      	mov	r0, r3
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	20001214 	.word	0x20001214
 800e354:	0800f404 	.word	0x0800f404

0800e358 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e35e:	4b0f      	ldr	r3, [pc, #60]	@ (800e39c <Get_SerialNum+0x44>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e364:	4b0e      	ldr	r3, [pc, #56]	@ (800e3a0 <Get_SerialNum+0x48>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e36a:	4b0e      	ldr	r3, [pc, #56]	@ (800e3a4 <Get_SerialNum+0x4c>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	4413      	add	r3, r2
 800e376:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d009      	beq.n	800e392 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e37e:	2208      	movs	r2, #8
 800e380:	4909      	ldr	r1, [pc, #36]	@ (800e3a8 <Get_SerialNum+0x50>)
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 f814 	bl	800e3b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e388:	2204      	movs	r2, #4
 800e38a:	4908      	ldr	r1, [pc, #32]	@ (800e3ac <Get_SerialNum+0x54>)
 800e38c:	68b8      	ldr	r0, [r7, #8]
 800e38e:	f000 f80f 	bl	800e3b0 <IntToUnicode>
  }
}
 800e392:	bf00      	nop
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	1fff7a10 	.word	0x1fff7a10
 800e3a0:	1fff7a14 	.word	0x1fff7a14
 800e3a4:	1fff7a18 	.word	0x1fff7a18
 800e3a8:	2000011a 	.word	0x2000011a
 800e3ac:	2000012a 	.word	0x2000012a

0800e3b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	75fb      	strb	r3, [r7, #23]
 800e3c6:	e027      	b.n	800e418 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	0f1b      	lsrs	r3, r3, #28
 800e3cc:	2b09      	cmp	r3, #9
 800e3ce:	d80b      	bhi.n	800e3e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	0f1b      	lsrs	r3, r3, #28
 800e3d4:	b2da      	uxtb	r2, r3
 800e3d6:	7dfb      	ldrb	r3, [r7, #23]
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	4619      	mov	r1, r3
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	440b      	add	r3, r1
 800e3e0:	3230      	adds	r2, #48	@ 0x30
 800e3e2:	b2d2      	uxtb	r2, r2
 800e3e4:	701a      	strb	r2, [r3, #0]
 800e3e6:	e00a      	b.n	800e3fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	0f1b      	lsrs	r3, r3, #28
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	7dfb      	ldrb	r3, [r7, #23]
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	440b      	add	r3, r1
 800e3f8:	3237      	adds	r2, #55	@ 0x37
 800e3fa:	b2d2      	uxtb	r2, r2
 800e3fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	011b      	lsls	r3, r3, #4
 800e402:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	3301      	adds	r3, #1
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	4413      	add	r3, r2
 800e40e:	2200      	movs	r2, #0
 800e410:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e412:	7dfb      	ldrb	r3, [r7, #23]
 800e414:	3301      	adds	r3, #1
 800e416:	75fb      	strb	r3, [r7, #23]
 800e418:	7dfa      	ldrb	r2, [r7, #23]
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d3d3      	bcc.n	800e3c8 <IntToUnicode+0x18>
  }
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	371c      	adds	r7, #28
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
	...

0800e430 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08a      	sub	sp, #40	@ 0x28
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e438:	f107 0314 	add.w	r3, r7, #20
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]
 800e440:	605a      	str	r2, [r3, #4]
 800e442:	609a      	str	r2, [r3, #8]
 800e444:	60da      	str	r2, [r3, #12]
 800e446:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e450:	d13a      	bne.n	800e4c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e452:	2300      	movs	r3, #0
 800e454:	613b      	str	r3, [r7, #16]
 800e456:	4b1e      	ldr	r3, [pc, #120]	@ (800e4d0 <HAL_PCD_MspInit+0xa0>)
 800e458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e45a:	4a1d      	ldr	r2, [pc, #116]	@ (800e4d0 <HAL_PCD_MspInit+0xa0>)
 800e45c:	f043 0301 	orr.w	r3, r3, #1
 800e460:	6313      	str	r3, [r2, #48]	@ 0x30
 800e462:	4b1b      	ldr	r3, [pc, #108]	@ (800e4d0 <HAL_PCD_MspInit+0xa0>)
 800e464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	613b      	str	r3, [r7, #16]
 800e46c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e46e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e474:	2302      	movs	r3, #2
 800e476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e47c:	2303      	movs	r3, #3
 800e47e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e480:	230a      	movs	r3, #10
 800e482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e484:	f107 0314 	add.w	r3, r7, #20
 800e488:	4619      	mov	r1, r3
 800e48a:	4812      	ldr	r0, [pc, #72]	@ (800e4d4 <HAL_PCD_MspInit+0xa4>)
 800e48c:	f7f6 fb8a 	bl	8004ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e490:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d0 <HAL_PCD_MspInit+0xa0>)
 800e492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e494:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d0 <HAL_PCD_MspInit+0xa0>)
 800e496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e49a:	6353      	str	r3, [r2, #52]	@ 0x34
 800e49c:	2300      	movs	r3, #0
 800e49e:	60fb      	str	r3, [r7, #12]
 800e4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d0 <HAL_PCD_MspInit+0xa0>)
 800e4a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4a4:	4a0a      	ldr	r2, [pc, #40]	@ (800e4d0 <HAL_PCD_MspInit+0xa0>)
 800e4a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e4aa:	6453      	str	r3, [r2, #68]	@ 0x44
 800e4ac:	4b08      	ldr	r3, [pc, #32]	@ (800e4d0 <HAL_PCD_MspInit+0xa0>)
 800e4ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4b4:	60fb      	str	r3, [r7, #12]
 800e4b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	2100      	movs	r1, #0
 800e4bc:	2043      	movs	r0, #67	@ 0x43
 800e4be:	f7f5 ff8e 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4c2:	2043      	movs	r0, #67	@ 0x43
 800e4c4:	f7f5 ffa7 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4c8:	bf00      	nop
 800e4ca:	3728      	adds	r7, #40	@ 0x28
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	40023800 	.word	0x40023800
 800e4d4:	40020000 	.word	0x40020000

0800e4d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	f7fe fabf 	bl	800ca72 <USBD_LL_SetupStage>
}
 800e4f4:	bf00      	nop
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	460b      	mov	r3, r1
 800e506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e50e:	78fa      	ldrb	r2, [r7, #3]
 800e510:	6879      	ldr	r1, [r7, #4]
 800e512:	4613      	mov	r3, r2
 800e514:	00db      	lsls	r3, r3, #3
 800e516:	4413      	add	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	440b      	add	r3, r1
 800e51c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	78fb      	ldrb	r3, [r7, #3]
 800e524:	4619      	mov	r1, r3
 800e526:	f7fe faf9 	bl	800cb1c <USBD_LL_DataOutStage>
}
 800e52a:	bf00      	nop
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	460b      	mov	r3, r1
 800e53c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e544:	78fa      	ldrb	r2, [r7, #3]
 800e546:	6879      	ldr	r1, [r7, #4]
 800e548:	4613      	mov	r3, r2
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	4413      	add	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	440b      	add	r3, r1
 800e552:	3320      	adds	r3, #32
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	78fb      	ldrb	r3, [r7, #3]
 800e558:	4619      	mov	r1, r3
 800e55a:	f7fe fb9b 	bl	800cc94 <USBD_LL_DataInStage>
}
 800e55e:	bf00      	nop
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b082      	sub	sp, #8
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e574:	4618      	mov	r0, r3
 800e576:	f7fe fcdf 	bl	800cf38 <USBD_LL_SOF>
}
 800e57a:	bf00      	nop
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b084      	sub	sp, #16
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e58a:	2301      	movs	r3, #1
 800e58c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	79db      	ldrb	r3, [r3, #7]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d001      	beq.n	800e59a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e596:	f7f3 fd1f 	bl	8001fd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5a0:	7bfa      	ldrb	r2, [r7, #15]
 800e5a2:	4611      	mov	r1, r2
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fe fc83 	bl	800ceb0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fe fc2a 	bl	800ce0a <USBD_LL_Reset>
}
 800e5b6:	bf00      	nop
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
	...

0800e5c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fe fc7e 	bl	800ced0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	6812      	ldr	r2, [r2, #0]
 800e5e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e5e6:	f043 0301 	orr.w	r3, r3, #1
 800e5ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	7adb      	ldrb	r3, [r3, #11]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d005      	beq.n	800e600 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5f4:	4b04      	ldr	r3, [pc, #16]	@ (800e608 <HAL_PCD_SuspendCallback+0x48>)
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	4a03      	ldr	r2, [pc, #12]	@ (800e608 <HAL_PCD_SuspendCallback+0x48>)
 800e5fa:	f043 0306 	orr.w	r3, r3, #6
 800e5fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e600:	bf00      	nop
 800e602:	3708      	adds	r7, #8
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	e000ed00 	.word	0xe000ed00

0800e60c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe fc74 	bl	800cf08 <USBD_LL_Resume>
}
 800e620:	bf00      	nop
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	460b      	mov	r3, r1
 800e632:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e63a:	78fa      	ldrb	r2, [r7, #3]
 800e63c:	4611      	mov	r1, r2
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fccc 	bl	800cfdc <USBD_LL_IsoOUTIncomplete>
}
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	460b      	mov	r3, r1
 800e656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e65e:	78fa      	ldrb	r2, [r7, #3]
 800e660:	4611      	mov	r1, r2
 800e662:	4618      	mov	r0, r3
 800e664:	f7fe fc88 	bl	800cf78 <USBD_LL_IsoINIncomplete>
}
 800e668:	bf00      	nop
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fe fcde 	bl	800d040 <USBD_LL_DevConnected>
}
 800e684:	bf00      	nop
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe fcdb 	bl	800d056 <USBD_LL_DevDisconnected>
}
 800e6a0:	bf00      	nop
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d13c      	bne.n	800e732 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e6b8:	4a20      	ldr	r2, [pc, #128]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e6c8:	4b1c      	ldr	r3, [pc, #112]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e6ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e6d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6d2:	2204      	movs	r2, #4
 800e6d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6d6:	4b19      	ldr	r3, [pc, #100]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6d8:	2202      	movs	r2, #2
 800e6da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e6dc:	4b17      	ldr	r3, [pc, #92]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6e2:	4b16      	ldr	r3, [pc, #88]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6e4:	2202      	movs	r2, #2
 800e6e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e6e8:	4b14      	ldr	r3, [pc, #80]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e6ee:	4b13      	ldr	r3, [pc, #76]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e6f4:	4b11      	ldr	r3, [pc, #68]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e6fa:	4b10      	ldr	r3, [pc, #64]	@ (800e73c <USBD_LL_Init+0x94>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e700:	4b0e      	ldr	r3, [pc, #56]	@ (800e73c <USBD_LL_Init+0x94>)
 800e702:	2200      	movs	r2, #0
 800e704:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e706:	480d      	ldr	r0, [pc, #52]	@ (800e73c <USBD_LL_Init+0x94>)
 800e708:	f7f9 fa9c 	bl	8007c44 <HAL_PCD_Init>
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d001      	beq.n	800e716 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e712:	f7f3 fc61 	bl	8001fd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e716:	2180      	movs	r1, #128	@ 0x80
 800e718:	4808      	ldr	r0, [pc, #32]	@ (800e73c <USBD_LL_Init+0x94>)
 800e71a:	f7fa fcc8 	bl	80090ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e71e:	2240      	movs	r2, #64	@ 0x40
 800e720:	2100      	movs	r1, #0
 800e722:	4806      	ldr	r0, [pc, #24]	@ (800e73c <USBD_LL_Init+0x94>)
 800e724:	f7fa fc7c 	bl	8009020 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e728:	2280      	movs	r2, #128	@ 0x80
 800e72a:	2101      	movs	r1, #1
 800e72c:	4803      	ldr	r0, [pc, #12]	@ (800e73c <USBD_LL_Init+0x94>)
 800e72e:	f7fa fc77 	bl	8009020 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20001414 	.word	0x20001414

0800e740 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e748:	2300      	movs	r3, #0
 800e74a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e756:	4618      	mov	r0, r3
 800e758:	f7f9 fb83 	bl	8007e62 <HAL_PCD_Start>
 800e75c:	4603      	mov	r3, r0
 800e75e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e760:	7bfb      	ldrb	r3, [r7, #15]
 800e762:	4618      	mov	r0, r3
 800e764:	f000 f942 	bl	800e9ec <USBD_Get_USB_Status>
 800e768:	4603      	mov	r3, r0
 800e76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e776:	b580      	push	{r7, lr}
 800e778:	b084      	sub	sp, #16
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	4608      	mov	r0, r1
 800e780:	4611      	mov	r1, r2
 800e782:	461a      	mov	r2, r3
 800e784:	4603      	mov	r3, r0
 800e786:	70fb      	strb	r3, [r7, #3]
 800e788:	460b      	mov	r3, r1
 800e78a:	70bb      	strb	r3, [r7, #2]
 800e78c:	4613      	mov	r3, r2
 800e78e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e790:	2300      	movs	r3, #0
 800e792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e794:	2300      	movs	r3, #0
 800e796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e79e:	78bb      	ldrb	r3, [r7, #2]
 800e7a0:	883a      	ldrh	r2, [r7, #0]
 800e7a2:	78f9      	ldrb	r1, [r7, #3]
 800e7a4:	f7fa f857 	bl	8008856 <HAL_PCD_EP_Open>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7ac:	7bfb      	ldrb	r3, [r7, #15]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 f91c 	bl	800e9ec <USBD_Get_USB_Status>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7dc:	78fa      	ldrb	r2, [r7, #3]
 800e7de:	4611      	mov	r1, r2
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fa f8a2 	bl	800892a <HAL_PCD_EP_Close>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f000 f8fd 	bl	800e9ec <USBD_Get_USB_Status>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	460b      	mov	r3, r1
 800e80a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e80c:	2300      	movs	r3, #0
 800e80e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e810:	2300      	movs	r3, #0
 800e812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e81a:	78fa      	ldrb	r2, [r7, #3]
 800e81c:	4611      	mov	r1, r2
 800e81e:	4618      	mov	r0, r3
 800e820:	f7fa f95a 	bl	8008ad8 <HAL_PCD_EP_SetStall>
 800e824:	4603      	mov	r3, r0
 800e826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e828:	7bfb      	ldrb	r3, [r7, #15]
 800e82a:	4618      	mov	r0, r3
 800e82c:	f000 f8de 	bl	800e9ec <USBD_Get_USB_Status>
 800e830:	4603      	mov	r3, r0
 800e832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e834:	7bbb      	ldrb	r3, [r7, #14]
}
 800e836:	4618      	mov	r0, r3
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b084      	sub	sp, #16
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	460b      	mov	r3, r1
 800e848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e84a:	2300      	movs	r3, #0
 800e84c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e84e:	2300      	movs	r3, #0
 800e850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e858:	78fa      	ldrb	r2, [r7, #3]
 800e85a:	4611      	mov	r1, r2
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fa f99e 	bl	8008b9e <HAL_PCD_EP_ClrStall>
 800e862:	4603      	mov	r3, r0
 800e864:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e866:	7bfb      	ldrb	r3, [r7, #15]
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 f8bf 	bl	800e9ec <USBD_Get_USB_Status>
 800e86e:	4603      	mov	r3, r0
 800e870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e872:	7bbb      	ldrb	r3, [r7, #14]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3710      	adds	r7, #16
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	460b      	mov	r3, r1
 800e886:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e88e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e894:	2b00      	cmp	r3, #0
 800e896:	da0b      	bge.n	800e8b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e898:	78fb      	ldrb	r3, [r7, #3]
 800e89a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e89e:	68f9      	ldr	r1, [r7, #12]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	00db      	lsls	r3, r3, #3
 800e8a4:	4413      	add	r3, r2
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	440b      	add	r3, r1
 800e8aa:	3316      	adds	r3, #22
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	e00b      	b.n	800e8c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8b6:	68f9      	ldr	r1, [r7, #12]
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	00db      	lsls	r3, r3, #3
 800e8bc:	4413      	add	r3, r2
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	440b      	add	r3, r1
 800e8c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e8c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3714      	adds	r7, #20
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	460b      	mov	r3, r1
 800e8de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e8ee:	78fa      	ldrb	r2, [r7, #3]
 800e8f0:	4611      	mov	r1, r2
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7f9 ff8b 	bl	800880e <HAL_PCD_SetAddress>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8fc:	7bfb      	ldrb	r3, [r7, #15]
 800e8fe:	4618      	mov	r0, r3
 800e900:	f000 f874 	bl	800e9ec <USBD_Get_USB_Status>
 800e904:	4603      	mov	r3, r0
 800e906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e908:	7bbb      	ldrb	r3, [r7, #14]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b086      	sub	sp, #24
 800e916:	af00      	add	r7, sp, #0
 800e918:	60f8      	str	r0, [r7, #12]
 800e91a:	607a      	str	r2, [r7, #4]
 800e91c:	603b      	str	r3, [r7, #0]
 800e91e:	460b      	mov	r3, r1
 800e920:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e922:	2300      	movs	r3, #0
 800e924:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e926:	2300      	movs	r3, #0
 800e928:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e930:	7af9      	ldrb	r1, [r7, #11]
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	f7fa f895 	bl	8008a64 <HAL_PCD_EP_Transmit>
 800e93a:	4603      	mov	r3, r0
 800e93c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e93e:	7dfb      	ldrb	r3, [r7, #23]
 800e940:	4618      	mov	r0, r3
 800e942:	f000 f853 	bl	800e9ec <USBD_Get_USB_Status>
 800e946:	4603      	mov	r3, r0
 800e948:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e94a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af00      	add	r7, sp, #0
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	607a      	str	r2, [r7, #4]
 800e95e:	603b      	str	r3, [r7, #0]
 800e960:	460b      	mov	r3, r1
 800e962:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e964:	2300      	movs	r3, #0
 800e966:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e968:	2300      	movs	r3, #0
 800e96a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e972:	7af9      	ldrb	r1, [r7, #11]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	f7fa f821 	bl	80089be <HAL_PCD_EP_Receive>
 800e97c:	4603      	mov	r3, r0
 800e97e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e980:	7dfb      	ldrb	r3, [r7, #23]
 800e982:	4618      	mov	r0, r3
 800e984:	f000 f832 	bl	800e9ec <USBD_Get_USB_Status>
 800e988:	4603      	mov	r3, r0
 800e98a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e98c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}

0800e996 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b082      	sub	sp, #8
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
 800e99e:	460b      	mov	r3, r1
 800e9a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9a8:	78fa      	ldrb	r2, [r7, #3]
 800e9aa:	4611      	mov	r1, r2
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7fa f841 	bl	8008a34 <HAL_PCD_EP_GetRxCount>
 800e9b2:	4603      	mov	r3, r0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e9c4:	4b03      	ldr	r3, [pc, #12]	@ (800e9d4 <USBD_static_malloc+0x18>)
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	370c      	adds	r7, #12
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	200018f8 	.word	0x200018f8

0800e9d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]

}
 800e9e0:	bf00      	nop
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e9fa:	79fb      	ldrb	r3, [r7, #7]
 800e9fc:	2b03      	cmp	r3, #3
 800e9fe:	d817      	bhi.n	800ea30 <USBD_Get_USB_Status+0x44>
 800ea00:	a201      	add	r2, pc, #4	@ (adr r2, 800ea08 <USBD_Get_USB_Status+0x1c>)
 800ea02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea06:	bf00      	nop
 800ea08:	0800ea19 	.word	0x0800ea19
 800ea0c:	0800ea1f 	.word	0x0800ea1f
 800ea10:	0800ea25 	.word	0x0800ea25
 800ea14:	0800ea2b 	.word	0x0800ea2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea1c:	e00b      	b.n	800ea36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea1e:	2303      	movs	r3, #3
 800ea20:	73fb      	strb	r3, [r7, #15]
    break;
 800ea22:	e008      	b.n	800ea36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea24:	2301      	movs	r3, #1
 800ea26:	73fb      	strb	r3, [r7, #15]
    break;
 800ea28:	e005      	b.n	800ea36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea2a:	2303      	movs	r3, #3
 800ea2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea2e:	e002      	b.n	800ea36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea30:	2303      	movs	r3, #3
 800ea32:	73fb      	strb	r3, [r7, #15]
    break;
 800ea34:	bf00      	nop
  }
  return usb_status;
 800ea36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3714      	adds	r7, #20
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <sniprintf>:
 800ea44:	b40c      	push	{r2, r3}
 800ea46:	b530      	push	{r4, r5, lr}
 800ea48:	4b18      	ldr	r3, [pc, #96]	@ (800eaac <sniprintf+0x68>)
 800ea4a:	1e0c      	subs	r4, r1, #0
 800ea4c:	681d      	ldr	r5, [r3, #0]
 800ea4e:	b09d      	sub	sp, #116	@ 0x74
 800ea50:	da08      	bge.n	800ea64 <sniprintf+0x20>
 800ea52:	238b      	movs	r3, #139	@ 0x8b
 800ea54:	602b      	str	r3, [r5, #0]
 800ea56:	f04f 30ff 	mov.w	r0, #4294967295
 800ea5a:	b01d      	add	sp, #116	@ 0x74
 800ea5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea60:	b002      	add	sp, #8
 800ea62:	4770      	bx	lr
 800ea64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ea68:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea6c:	f04f 0300 	mov.w	r3, #0
 800ea70:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ea72:	bf14      	ite	ne
 800ea74:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea78:	4623      	moveq	r3, r4
 800ea7a:	9304      	str	r3, [sp, #16]
 800ea7c:	9307      	str	r3, [sp, #28]
 800ea7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea82:	9002      	str	r0, [sp, #8]
 800ea84:	9006      	str	r0, [sp, #24]
 800ea86:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ea8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ea8c:	ab21      	add	r3, sp, #132	@ 0x84
 800ea8e:	a902      	add	r1, sp, #8
 800ea90:	4628      	mov	r0, r5
 800ea92:	9301      	str	r3, [sp, #4]
 800ea94:	f000 f9bc 	bl	800ee10 <_svfiprintf_r>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	bfbc      	itt	lt
 800ea9c:	238b      	movlt	r3, #139	@ 0x8b
 800ea9e:	602b      	strlt	r3, [r5, #0]
 800eaa0:	2c00      	cmp	r4, #0
 800eaa2:	d0da      	beq.n	800ea5a <sniprintf+0x16>
 800eaa4:	9b02      	ldr	r3, [sp, #8]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	701a      	strb	r2, [r3, #0]
 800eaaa:	e7d6      	b.n	800ea5a <sniprintf+0x16>
 800eaac:	20000134 	.word	0x20000134

0800eab0 <memmove>:
 800eab0:	4288      	cmp	r0, r1
 800eab2:	b510      	push	{r4, lr}
 800eab4:	eb01 0402 	add.w	r4, r1, r2
 800eab8:	d902      	bls.n	800eac0 <memmove+0x10>
 800eaba:	4284      	cmp	r4, r0
 800eabc:	4623      	mov	r3, r4
 800eabe:	d807      	bhi.n	800ead0 <memmove+0x20>
 800eac0:	1e43      	subs	r3, r0, #1
 800eac2:	42a1      	cmp	r1, r4
 800eac4:	d008      	beq.n	800ead8 <memmove+0x28>
 800eac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eace:	e7f8      	b.n	800eac2 <memmove+0x12>
 800ead0:	4402      	add	r2, r0
 800ead2:	4601      	mov	r1, r0
 800ead4:	428a      	cmp	r2, r1
 800ead6:	d100      	bne.n	800eada <memmove+0x2a>
 800ead8:	bd10      	pop	{r4, pc}
 800eada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eae2:	e7f7      	b.n	800ead4 <memmove+0x24>

0800eae4 <memset>:
 800eae4:	4402      	add	r2, r0
 800eae6:	4603      	mov	r3, r0
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d100      	bne.n	800eaee <memset+0xa>
 800eaec:	4770      	bx	lr
 800eaee:	f803 1b01 	strb.w	r1, [r3], #1
 800eaf2:	e7f9      	b.n	800eae8 <memset+0x4>

0800eaf4 <__errno>:
 800eaf4:	4b01      	ldr	r3, [pc, #4]	@ (800eafc <__errno+0x8>)
 800eaf6:	6818      	ldr	r0, [r3, #0]
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop
 800eafc:	20000134 	.word	0x20000134

0800eb00 <__libc_init_array>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	4d0d      	ldr	r5, [pc, #52]	@ (800eb38 <__libc_init_array+0x38>)
 800eb04:	4c0d      	ldr	r4, [pc, #52]	@ (800eb3c <__libc_init_array+0x3c>)
 800eb06:	1b64      	subs	r4, r4, r5
 800eb08:	10a4      	asrs	r4, r4, #2
 800eb0a:	2600      	movs	r6, #0
 800eb0c:	42a6      	cmp	r6, r4
 800eb0e:	d109      	bne.n	800eb24 <__libc_init_array+0x24>
 800eb10:	4d0b      	ldr	r5, [pc, #44]	@ (800eb40 <__libc_init_array+0x40>)
 800eb12:	4c0c      	ldr	r4, [pc, #48]	@ (800eb44 <__libc_init_array+0x44>)
 800eb14:	f000 fc4a 	bl	800f3ac <_init>
 800eb18:	1b64      	subs	r4, r4, r5
 800eb1a:	10a4      	asrs	r4, r4, #2
 800eb1c:	2600      	movs	r6, #0
 800eb1e:	42a6      	cmp	r6, r4
 800eb20:	d105      	bne.n	800eb2e <__libc_init_array+0x2e>
 800eb22:	bd70      	pop	{r4, r5, r6, pc}
 800eb24:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb28:	4798      	blx	r3
 800eb2a:	3601      	adds	r6, #1
 800eb2c:	e7ee      	b.n	800eb0c <__libc_init_array+0xc>
 800eb2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb32:	4798      	blx	r3
 800eb34:	3601      	adds	r6, #1
 800eb36:	e7f2      	b.n	800eb1e <__libc_init_array+0x1e>
 800eb38:	080101e8 	.word	0x080101e8
 800eb3c:	080101e8 	.word	0x080101e8
 800eb40:	080101e8 	.word	0x080101e8
 800eb44:	080101ec 	.word	0x080101ec

0800eb48 <__retarget_lock_acquire_recursive>:
 800eb48:	4770      	bx	lr

0800eb4a <__retarget_lock_release_recursive>:
 800eb4a:	4770      	bx	lr

0800eb4c <memcpy>:
 800eb4c:	440a      	add	r2, r1
 800eb4e:	4291      	cmp	r1, r2
 800eb50:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb54:	d100      	bne.n	800eb58 <memcpy+0xc>
 800eb56:	4770      	bx	lr
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb62:	4291      	cmp	r1, r2
 800eb64:	d1f9      	bne.n	800eb5a <memcpy+0xe>
 800eb66:	bd10      	pop	{r4, pc}

0800eb68 <_free_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	2900      	cmp	r1, #0
 800eb6e:	d041      	beq.n	800ebf4 <_free_r+0x8c>
 800eb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb74:	1f0c      	subs	r4, r1, #4
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	bfb8      	it	lt
 800eb7a:	18e4      	addlt	r4, r4, r3
 800eb7c:	f000 f8e0 	bl	800ed40 <__malloc_lock>
 800eb80:	4a1d      	ldr	r2, [pc, #116]	@ (800ebf8 <_free_r+0x90>)
 800eb82:	6813      	ldr	r3, [r2, #0]
 800eb84:	b933      	cbnz	r3, 800eb94 <_free_r+0x2c>
 800eb86:	6063      	str	r3, [r4, #4]
 800eb88:	6014      	str	r4, [r2, #0]
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb90:	f000 b8dc 	b.w	800ed4c <__malloc_unlock>
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	d908      	bls.n	800ebaa <_free_r+0x42>
 800eb98:	6820      	ldr	r0, [r4, #0]
 800eb9a:	1821      	adds	r1, r4, r0
 800eb9c:	428b      	cmp	r3, r1
 800eb9e:	bf01      	itttt	eq
 800eba0:	6819      	ldreq	r1, [r3, #0]
 800eba2:	685b      	ldreq	r3, [r3, #4]
 800eba4:	1809      	addeq	r1, r1, r0
 800eba6:	6021      	streq	r1, [r4, #0]
 800eba8:	e7ed      	b.n	800eb86 <_free_r+0x1e>
 800ebaa:	461a      	mov	r2, r3
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	b10b      	cbz	r3, 800ebb4 <_free_r+0x4c>
 800ebb0:	42a3      	cmp	r3, r4
 800ebb2:	d9fa      	bls.n	800ebaa <_free_r+0x42>
 800ebb4:	6811      	ldr	r1, [r2, #0]
 800ebb6:	1850      	adds	r0, r2, r1
 800ebb8:	42a0      	cmp	r0, r4
 800ebba:	d10b      	bne.n	800ebd4 <_free_r+0x6c>
 800ebbc:	6820      	ldr	r0, [r4, #0]
 800ebbe:	4401      	add	r1, r0
 800ebc0:	1850      	adds	r0, r2, r1
 800ebc2:	4283      	cmp	r3, r0
 800ebc4:	6011      	str	r1, [r2, #0]
 800ebc6:	d1e0      	bne.n	800eb8a <_free_r+0x22>
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	6053      	str	r3, [r2, #4]
 800ebce:	4408      	add	r0, r1
 800ebd0:	6010      	str	r0, [r2, #0]
 800ebd2:	e7da      	b.n	800eb8a <_free_r+0x22>
 800ebd4:	d902      	bls.n	800ebdc <_free_r+0x74>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	e7d6      	b.n	800eb8a <_free_r+0x22>
 800ebdc:	6820      	ldr	r0, [r4, #0]
 800ebde:	1821      	adds	r1, r4, r0
 800ebe0:	428b      	cmp	r3, r1
 800ebe2:	bf04      	itt	eq
 800ebe4:	6819      	ldreq	r1, [r3, #0]
 800ebe6:	685b      	ldreq	r3, [r3, #4]
 800ebe8:	6063      	str	r3, [r4, #4]
 800ebea:	bf04      	itt	eq
 800ebec:	1809      	addeq	r1, r1, r0
 800ebee:	6021      	streq	r1, [r4, #0]
 800ebf0:	6054      	str	r4, [r2, #4]
 800ebf2:	e7ca      	b.n	800eb8a <_free_r+0x22>
 800ebf4:	bd38      	pop	{r3, r4, r5, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20001c5c 	.word	0x20001c5c

0800ebfc <sbrk_aligned>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	4e0f      	ldr	r6, [pc, #60]	@ (800ec3c <sbrk_aligned+0x40>)
 800ec00:	460c      	mov	r4, r1
 800ec02:	6831      	ldr	r1, [r6, #0]
 800ec04:	4605      	mov	r5, r0
 800ec06:	b911      	cbnz	r1, 800ec0e <sbrk_aligned+0x12>
 800ec08:	f000 fb8a 	bl	800f320 <_sbrk_r>
 800ec0c:	6030      	str	r0, [r6, #0]
 800ec0e:	4621      	mov	r1, r4
 800ec10:	4628      	mov	r0, r5
 800ec12:	f000 fb85 	bl	800f320 <_sbrk_r>
 800ec16:	1c43      	adds	r3, r0, #1
 800ec18:	d103      	bne.n	800ec22 <sbrk_aligned+0x26>
 800ec1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ec1e:	4620      	mov	r0, r4
 800ec20:	bd70      	pop	{r4, r5, r6, pc}
 800ec22:	1cc4      	adds	r4, r0, #3
 800ec24:	f024 0403 	bic.w	r4, r4, #3
 800ec28:	42a0      	cmp	r0, r4
 800ec2a:	d0f8      	beq.n	800ec1e <sbrk_aligned+0x22>
 800ec2c:	1a21      	subs	r1, r4, r0
 800ec2e:	4628      	mov	r0, r5
 800ec30:	f000 fb76 	bl	800f320 <_sbrk_r>
 800ec34:	3001      	adds	r0, #1
 800ec36:	d1f2      	bne.n	800ec1e <sbrk_aligned+0x22>
 800ec38:	e7ef      	b.n	800ec1a <sbrk_aligned+0x1e>
 800ec3a:	bf00      	nop
 800ec3c:	20001c58 	.word	0x20001c58

0800ec40 <_malloc_r>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	1ccd      	adds	r5, r1, #3
 800ec46:	f025 0503 	bic.w	r5, r5, #3
 800ec4a:	3508      	adds	r5, #8
 800ec4c:	2d0c      	cmp	r5, #12
 800ec4e:	bf38      	it	cc
 800ec50:	250c      	movcc	r5, #12
 800ec52:	2d00      	cmp	r5, #0
 800ec54:	4606      	mov	r6, r0
 800ec56:	db01      	blt.n	800ec5c <_malloc_r+0x1c>
 800ec58:	42a9      	cmp	r1, r5
 800ec5a:	d904      	bls.n	800ec66 <_malloc_r+0x26>
 800ec5c:	230c      	movs	r3, #12
 800ec5e:	6033      	str	r3, [r6, #0]
 800ec60:	2000      	movs	r0, #0
 800ec62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed3c <_malloc_r+0xfc>
 800ec6a:	f000 f869 	bl	800ed40 <__malloc_lock>
 800ec6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ec72:	461c      	mov	r4, r3
 800ec74:	bb44      	cbnz	r4, 800ecc8 <_malloc_r+0x88>
 800ec76:	4629      	mov	r1, r5
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f7ff ffbf 	bl	800ebfc <sbrk_aligned>
 800ec7e:	1c43      	adds	r3, r0, #1
 800ec80:	4604      	mov	r4, r0
 800ec82:	d158      	bne.n	800ed36 <_malloc_r+0xf6>
 800ec84:	f8d8 4000 	ldr.w	r4, [r8]
 800ec88:	4627      	mov	r7, r4
 800ec8a:	2f00      	cmp	r7, #0
 800ec8c:	d143      	bne.n	800ed16 <_malloc_r+0xd6>
 800ec8e:	2c00      	cmp	r4, #0
 800ec90:	d04b      	beq.n	800ed2a <_malloc_r+0xea>
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	4639      	mov	r1, r7
 800ec96:	4630      	mov	r0, r6
 800ec98:	eb04 0903 	add.w	r9, r4, r3
 800ec9c:	f000 fb40 	bl	800f320 <_sbrk_r>
 800eca0:	4581      	cmp	r9, r0
 800eca2:	d142      	bne.n	800ed2a <_malloc_r+0xea>
 800eca4:	6821      	ldr	r1, [r4, #0]
 800eca6:	1a6d      	subs	r5, r5, r1
 800eca8:	4629      	mov	r1, r5
 800ecaa:	4630      	mov	r0, r6
 800ecac:	f7ff ffa6 	bl	800ebfc <sbrk_aligned>
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d03a      	beq.n	800ed2a <_malloc_r+0xea>
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	442b      	add	r3, r5
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	f8d8 3000 	ldr.w	r3, [r8]
 800ecbe:	685a      	ldr	r2, [r3, #4]
 800ecc0:	bb62      	cbnz	r2, 800ed1c <_malloc_r+0xdc>
 800ecc2:	f8c8 7000 	str.w	r7, [r8]
 800ecc6:	e00f      	b.n	800ece8 <_malloc_r+0xa8>
 800ecc8:	6822      	ldr	r2, [r4, #0]
 800ecca:	1b52      	subs	r2, r2, r5
 800eccc:	d420      	bmi.n	800ed10 <_malloc_r+0xd0>
 800ecce:	2a0b      	cmp	r2, #11
 800ecd0:	d917      	bls.n	800ed02 <_malloc_r+0xc2>
 800ecd2:	1961      	adds	r1, r4, r5
 800ecd4:	42a3      	cmp	r3, r4
 800ecd6:	6025      	str	r5, [r4, #0]
 800ecd8:	bf18      	it	ne
 800ecda:	6059      	strne	r1, [r3, #4]
 800ecdc:	6863      	ldr	r3, [r4, #4]
 800ecde:	bf08      	it	eq
 800ece0:	f8c8 1000 	streq.w	r1, [r8]
 800ece4:	5162      	str	r2, [r4, r5]
 800ece6:	604b      	str	r3, [r1, #4]
 800ece8:	4630      	mov	r0, r6
 800ecea:	f000 f82f 	bl	800ed4c <__malloc_unlock>
 800ecee:	f104 000b 	add.w	r0, r4, #11
 800ecf2:	1d23      	adds	r3, r4, #4
 800ecf4:	f020 0007 	bic.w	r0, r0, #7
 800ecf8:	1ac2      	subs	r2, r0, r3
 800ecfa:	bf1c      	itt	ne
 800ecfc:	1a1b      	subne	r3, r3, r0
 800ecfe:	50a3      	strne	r3, [r4, r2]
 800ed00:	e7af      	b.n	800ec62 <_malloc_r+0x22>
 800ed02:	6862      	ldr	r2, [r4, #4]
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	bf0c      	ite	eq
 800ed08:	f8c8 2000 	streq.w	r2, [r8]
 800ed0c:	605a      	strne	r2, [r3, #4]
 800ed0e:	e7eb      	b.n	800ece8 <_malloc_r+0xa8>
 800ed10:	4623      	mov	r3, r4
 800ed12:	6864      	ldr	r4, [r4, #4]
 800ed14:	e7ae      	b.n	800ec74 <_malloc_r+0x34>
 800ed16:	463c      	mov	r4, r7
 800ed18:	687f      	ldr	r7, [r7, #4]
 800ed1a:	e7b6      	b.n	800ec8a <_malloc_r+0x4a>
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	42a3      	cmp	r3, r4
 800ed22:	d1fb      	bne.n	800ed1c <_malloc_r+0xdc>
 800ed24:	2300      	movs	r3, #0
 800ed26:	6053      	str	r3, [r2, #4]
 800ed28:	e7de      	b.n	800ece8 <_malloc_r+0xa8>
 800ed2a:	230c      	movs	r3, #12
 800ed2c:	6033      	str	r3, [r6, #0]
 800ed2e:	4630      	mov	r0, r6
 800ed30:	f000 f80c 	bl	800ed4c <__malloc_unlock>
 800ed34:	e794      	b.n	800ec60 <_malloc_r+0x20>
 800ed36:	6005      	str	r5, [r0, #0]
 800ed38:	e7d6      	b.n	800ece8 <_malloc_r+0xa8>
 800ed3a:	bf00      	nop
 800ed3c:	20001c5c 	.word	0x20001c5c

0800ed40 <__malloc_lock>:
 800ed40:	4801      	ldr	r0, [pc, #4]	@ (800ed48 <__malloc_lock+0x8>)
 800ed42:	f7ff bf01 	b.w	800eb48 <__retarget_lock_acquire_recursive>
 800ed46:	bf00      	nop
 800ed48:	20001c54 	.word	0x20001c54

0800ed4c <__malloc_unlock>:
 800ed4c:	4801      	ldr	r0, [pc, #4]	@ (800ed54 <__malloc_unlock+0x8>)
 800ed4e:	f7ff befc 	b.w	800eb4a <__retarget_lock_release_recursive>
 800ed52:	bf00      	nop
 800ed54:	20001c54 	.word	0x20001c54

0800ed58 <__ssputs_r>:
 800ed58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed5c:	688e      	ldr	r6, [r1, #8]
 800ed5e:	461f      	mov	r7, r3
 800ed60:	42be      	cmp	r6, r7
 800ed62:	680b      	ldr	r3, [r1, #0]
 800ed64:	4682      	mov	sl, r0
 800ed66:	460c      	mov	r4, r1
 800ed68:	4690      	mov	r8, r2
 800ed6a:	d82d      	bhi.n	800edc8 <__ssputs_r+0x70>
 800ed6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed74:	d026      	beq.n	800edc4 <__ssputs_r+0x6c>
 800ed76:	6965      	ldr	r5, [r4, #20]
 800ed78:	6909      	ldr	r1, [r1, #16]
 800ed7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed7e:	eba3 0901 	sub.w	r9, r3, r1
 800ed82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed86:	1c7b      	adds	r3, r7, #1
 800ed88:	444b      	add	r3, r9
 800ed8a:	106d      	asrs	r5, r5, #1
 800ed8c:	429d      	cmp	r5, r3
 800ed8e:	bf38      	it	cc
 800ed90:	461d      	movcc	r5, r3
 800ed92:	0553      	lsls	r3, r2, #21
 800ed94:	d527      	bpl.n	800ede6 <__ssputs_r+0x8e>
 800ed96:	4629      	mov	r1, r5
 800ed98:	f7ff ff52 	bl	800ec40 <_malloc_r>
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	b360      	cbz	r0, 800edfa <__ssputs_r+0xa2>
 800eda0:	6921      	ldr	r1, [r4, #16]
 800eda2:	464a      	mov	r2, r9
 800eda4:	f7ff fed2 	bl	800eb4c <memcpy>
 800eda8:	89a3      	ldrh	r3, [r4, #12]
 800edaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800edae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edb2:	81a3      	strh	r3, [r4, #12]
 800edb4:	6126      	str	r6, [r4, #16]
 800edb6:	6165      	str	r5, [r4, #20]
 800edb8:	444e      	add	r6, r9
 800edba:	eba5 0509 	sub.w	r5, r5, r9
 800edbe:	6026      	str	r6, [r4, #0]
 800edc0:	60a5      	str	r5, [r4, #8]
 800edc2:	463e      	mov	r6, r7
 800edc4:	42be      	cmp	r6, r7
 800edc6:	d900      	bls.n	800edca <__ssputs_r+0x72>
 800edc8:	463e      	mov	r6, r7
 800edca:	6820      	ldr	r0, [r4, #0]
 800edcc:	4632      	mov	r2, r6
 800edce:	4641      	mov	r1, r8
 800edd0:	f7ff fe6e 	bl	800eab0 <memmove>
 800edd4:	68a3      	ldr	r3, [r4, #8]
 800edd6:	1b9b      	subs	r3, r3, r6
 800edd8:	60a3      	str	r3, [r4, #8]
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	4433      	add	r3, r6
 800edde:	6023      	str	r3, [r4, #0]
 800ede0:	2000      	movs	r0, #0
 800ede2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ede6:	462a      	mov	r2, r5
 800ede8:	f000 faaa 	bl	800f340 <_realloc_r>
 800edec:	4606      	mov	r6, r0
 800edee:	2800      	cmp	r0, #0
 800edf0:	d1e0      	bne.n	800edb4 <__ssputs_r+0x5c>
 800edf2:	6921      	ldr	r1, [r4, #16]
 800edf4:	4650      	mov	r0, sl
 800edf6:	f7ff feb7 	bl	800eb68 <_free_r>
 800edfa:	230c      	movs	r3, #12
 800edfc:	f8ca 3000 	str.w	r3, [sl]
 800ee00:	89a3      	ldrh	r3, [r4, #12]
 800ee02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee06:	81a3      	strh	r3, [r4, #12]
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0c:	e7e9      	b.n	800ede2 <__ssputs_r+0x8a>
	...

0800ee10 <_svfiprintf_r>:
 800ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	4698      	mov	r8, r3
 800ee16:	898b      	ldrh	r3, [r1, #12]
 800ee18:	061b      	lsls	r3, r3, #24
 800ee1a:	b09d      	sub	sp, #116	@ 0x74
 800ee1c:	4607      	mov	r7, r0
 800ee1e:	460d      	mov	r5, r1
 800ee20:	4614      	mov	r4, r2
 800ee22:	d510      	bpl.n	800ee46 <_svfiprintf_r+0x36>
 800ee24:	690b      	ldr	r3, [r1, #16]
 800ee26:	b973      	cbnz	r3, 800ee46 <_svfiprintf_r+0x36>
 800ee28:	2140      	movs	r1, #64	@ 0x40
 800ee2a:	f7ff ff09 	bl	800ec40 <_malloc_r>
 800ee2e:	6028      	str	r0, [r5, #0]
 800ee30:	6128      	str	r0, [r5, #16]
 800ee32:	b930      	cbnz	r0, 800ee42 <_svfiprintf_r+0x32>
 800ee34:	230c      	movs	r3, #12
 800ee36:	603b      	str	r3, [r7, #0]
 800ee38:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3c:	b01d      	add	sp, #116	@ 0x74
 800ee3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee42:	2340      	movs	r3, #64	@ 0x40
 800ee44:	616b      	str	r3, [r5, #20]
 800ee46:	2300      	movs	r3, #0
 800ee48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee4a:	2320      	movs	r3, #32
 800ee4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee50:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee54:	2330      	movs	r3, #48	@ 0x30
 800ee56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eff4 <_svfiprintf_r+0x1e4>
 800ee5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee5e:	f04f 0901 	mov.w	r9, #1
 800ee62:	4623      	mov	r3, r4
 800ee64:	469a      	mov	sl, r3
 800ee66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee6a:	b10a      	cbz	r2, 800ee70 <_svfiprintf_r+0x60>
 800ee6c:	2a25      	cmp	r2, #37	@ 0x25
 800ee6e:	d1f9      	bne.n	800ee64 <_svfiprintf_r+0x54>
 800ee70:	ebba 0b04 	subs.w	fp, sl, r4
 800ee74:	d00b      	beq.n	800ee8e <_svfiprintf_r+0x7e>
 800ee76:	465b      	mov	r3, fp
 800ee78:	4622      	mov	r2, r4
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	f7ff ff6b 	bl	800ed58 <__ssputs_r>
 800ee82:	3001      	adds	r0, #1
 800ee84:	f000 80a7 	beq.w	800efd6 <_svfiprintf_r+0x1c6>
 800ee88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee8a:	445a      	add	r2, fp
 800ee8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f000 809f 	beq.w	800efd6 <_svfiprintf_r+0x1c6>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eea2:	f10a 0a01 	add.w	sl, sl, #1
 800eea6:	9304      	str	r3, [sp, #16]
 800eea8:	9307      	str	r3, [sp, #28]
 800eeaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeae:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeb0:	4654      	mov	r4, sl
 800eeb2:	2205      	movs	r2, #5
 800eeb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb8:	484e      	ldr	r0, [pc, #312]	@ (800eff4 <_svfiprintf_r+0x1e4>)
 800eeba:	f7f1 f991 	bl	80001e0 <memchr>
 800eebe:	9a04      	ldr	r2, [sp, #16]
 800eec0:	b9d8      	cbnz	r0, 800eefa <_svfiprintf_r+0xea>
 800eec2:	06d0      	lsls	r0, r2, #27
 800eec4:	bf44      	itt	mi
 800eec6:	2320      	movmi	r3, #32
 800eec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eecc:	0711      	lsls	r1, r2, #28
 800eece:	bf44      	itt	mi
 800eed0:	232b      	movmi	r3, #43	@ 0x2b
 800eed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eed6:	f89a 3000 	ldrb.w	r3, [sl]
 800eeda:	2b2a      	cmp	r3, #42	@ 0x2a
 800eedc:	d015      	beq.n	800ef0a <_svfiprintf_r+0xfa>
 800eede:	9a07      	ldr	r2, [sp, #28]
 800eee0:	4654      	mov	r4, sl
 800eee2:	2000      	movs	r0, #0
 800eee4:	f04f 0c0a 	mov.w	ip, #10
 800eee8:	4621      	mov	r1, r4
 800eeea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeee:	3b30      	subs	r3, #48	@ 0x30
 800eef0:	2b09      	cmp	r3, #9
 800eef2:	d94b      	bls.n	800ef8c <_svfiprintf_r+0x17c>
 800eef4:	b1b0      	cbz	r0, 800ef24 <_svfiprintf_r+0x114>
 800eef6:	9207      	str	r2, [sp, #28]
 800eef8:	e014      	b.n	800ef24 <_svfiprintf_r+0x114>
 800eefa:	eba0 0308 	sub.w	r3, r0, r8
 800eefe:	fa09 f303 	lsl.w	r3, r9, r3
 800ef02:	4313      	orrs	r3, r2
 800ef04:	9304      	str	r3, [sp, #16]
 800ef06:	46a2      	mov	sl, r4
 800ef08:	e7d2      	b.n	800eeb0 <_svfiprintf_r+0xa0>
 800ef0a:	9b03      	ldr	r3, [sp, #12]
 800ef0c:	1d19      	adds	r1, r3, #4
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	9103      	str	r1, [sp, #12]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	bfbb      	ittet	lt
 800ef16:	425b      	neglt	r3, r3
 800ef18:	f042 0202 	orrlt.w	r2, r2, #2
 800ef1c:	9307      	strge	r3, [sp, #28]
 800ef1e:	9307      	strlt	r3, [sp, #28]
 800ef20:	bfb8      	it	lt
 800ef22:	9204      	strlt	r2, [sp, #16]
 800ef24:	7823      	ldrb	r3, [r4, #0]
 800ef26:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef28:	d10a      	bne.n	800ef40 <_svfiprintf_r+0x130>
 800ef2a:	7863      	ldrb	r3, [r4, #1]
 800ef2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef2e:	d132      	bne.n	800ef96 <_svfiprintf_r+0x186>
 800ef30:	9b03      	ldr	r3, [sp, #12]
 800ef32:	1d1a      	adds	r2, r3, #4
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	9203      	str	r2, [sp, #12]
 800ef38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef3c:	3402      	adds	r4, #2
 800ef3e:	9305      	str	r3, [sp, #20]
 800ef40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f004 <_svfiprintf_r+0x1f4>
 800ef44:	7821      	ldrb	r1, [r4, #0]
 800ef46:	2203      	movs	r2, #3
 800ef48:	4650      	mov	r0, sl
 800ef4a:	f7f1 f949 	bl	80001e0 <memchr>
 800ef4e:	b138      	cbz	r0, 800ef60 <_svfiprintf_r+0x150>
 800ef50:	9b04      	ldr	r3, [sp, #16]
 800ef52:	eba0 000a 	sub.w	r0, r0, sl
 800ef56:	2240      	movs	r2, #64	@ 0x40
 800ef58:	4082      	lsls	r2, r0
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	3401      	adds	r4, #1
 800ef5e:	9304      	str	r3, [sp, #16]
 800ef60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef64:	4824      	ldr	r0, [pc, #144]	@ (800eff8 <_svfiprintf_r+0x1e8>)
 800ef66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef6a:	2206      	movs	r2, #6
 800ef6c:	f7f1 f938 	bl	80001e0 <memchr>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d036      	beq.n	800efe2 <_svfiprintf_r+0x1d2>
 800ef74:	4b21      	ldr	r3, [pc, #132]	@ (800effc <_svfiprintf_r+0x1ec>)
 800ef76:	bb1b      	cbnz	r3, 800efc0 <_svfiprintf_r+0x1b0>
 800ef78:	9b03      	ldr	r3, [sp, #12]
 800ef7a:	3307      	adds	r3, #7
 800ef7c:	f023 0307 	bic.w	r3, r3, #7
 800ef80:	3308      	adds	r3, #8
 800ef82:	9303      	str	r3, [sp, #12]
 800ef84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef86:	4433      	add	r3, r6
 800ef88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef8a:	e76a      	b.n	800ee62 <_svfiprintf_r+0x52>
 800ef8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef90:	460c      	mov	r4, r1
 800ef92:	2001      	movs	r0, #1
 800ef94:	e7a8      	b.n	800eee8 <_svfiprintf_r+0xd8>
 800ef96:	2300      	movs	r3, #0
 800ef98:	3401      	adds	r4, #1
 800ef9a:	9305      	str	r3, [sp, #20]
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	f04f 0c0a 	mov.w	ip, #10
 800efa2:	4620      	mov	r0, r4
 800efa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efa8:	3a30      	subs	r2, #48	@ 0x30
 800efaa:	2a09      	cmp	r2, #9
 800efac:	d903      	bls.n	800efb6 <_svfiprintf_r+0x1a6>
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d0c6      	beq.n	800ef40 <_svfiprintf_r+0x130>
 800efb2:	9105      	str	r1, [sp, #20]
 800efb4:	e7c4      	b.n	800ef40 <_svfiprintf_r+0x130>
 800efb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800efba:	4604      	mov	r4, r0
 800efbc:	2301      	movs	r3, #1
 800efbe:	e7f0      	b.n	800efa2 <_svfiprintf_r+0x192>
 800efc0:	ab03      	add	r3, sp, #12
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	462a      	mov	r2, r5
 800efc6:	4b0e      	ldr	r3, [pc, #56]	@ (800f000 <_svfiprintf_r+0x1f0>)
 800efc8:	a904      	add	r1, sp, #16
 800efca:	4638      	mov	r0, r7
 800efcc:	f3af 8000 	nop.w
 800efd0:	1c42      	adds	r2, r0, #1
 800efd2:	4606      	mov	r6, r0
 800efd4:	d1d6      	bne.n	800ef84 <_svfiprintf_r+0x174>
 800efd6:	89ab      	ldrh	r3, [r5, #12]
 800efd8:	065b      	lsls	r3, r3, #25
 800efda:	f53f af2d 	bmi.w	800ee38 <_svfiprintf_r+0x28>
 800efde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efe0:	e72c      	b.n	800ee3c <_svfiprintf_r+0x2c>
 800efe2:	ab03      	add	r3, sp, #12
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	462a      	mov	r2, r5
 800efe8:	4b05      	ldr	r3, [pc, #20]	@ (800f000 <_svfiprintf_r+0x1f0>)
 800efea:	a904      	add	r1, sp, #16
 800efec:	4638      	mov	r0, r7
 800efee:	f000 f879 	bl	800f0e4 <_printf_i>
 800eff2:	e7ed      	b.n	800efd0 <_svfiprintf_r+0x1c0>
 800eff4:	080101ac 	.word	0x080101ac
 800eff8:	080101b6 	.word	0x080101b6
 800effc:	00000000 	.word	0x00000000
 800f000:	0800ed59 	.word	0x0800ed59
 800f004:	080101b2 	.word	0x080101b2

0800f008 <_printf_common>:
 800f008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f00c:	4616      	mov	r6, r2
 800f00e:	4698      	mov	r8, r3
 800f010:	688a      	ldr	r2, [r1, #8]
 800f012:	690b      	ldr	r3, [r1, #16]
 800f014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f018:	4293      	cmp	r3, r2
 800f01a:	bfb8      	it	lt
 800f01c:	4613      	movlt	r3, r2
 800f01e:	6033      	str	r3, [r6, #0]
 800f020:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f024:	4607      	mov	r7, r0
 800f026:	460c      	mov	r4, r1
 800f028:	b10a      	cbz	r2, 800f02e <_printf_common+0x26>
 800f02a:	3301      	adds	r3, #1
 800f02c:	6033      	str	r3, [r6, #0]
 800f02e:	6823      	ldr	r3, [r4, #0]
 800f030:	0699      	lsls	r1, r3, #26
 800f032:	bf42      	ittt	mi
 800f034:	6833      	ldrmi	r3, [r6, #0]
 800f036:	3302      	addmi	r3, #2
 800f038:	6033      	strmi	r3, [r6, #0]
 800f03a:	6825      	ldr	r5, [r4, #0]
 800f03c:	f015 0506 	ands.w	r5, r5, #6
 800f040:	d106      	bne.n	800f050 <_printf_common+0x48>
 800f042:	f104 0a19 	add.w	sl, r4, #25
 800f046:	68e3      	ldr	r3, [r4, #12]
 800f048:	6832      	ldr	r2, [r6, #0]
 800f04a:	1a9b      	subs	r3, r3, r2
 800f04c:	42ab      	cmp	r3, r5
 800f04e:	dc26      	bgt.n	800f09e <_printf_common+0x96>
 800f050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f054:	6822      	ldr	r2, [r4, #0]
 800f056:	3b00      	subs	r3, #0
 800f058:	bf18      	it	ne
 800f05a:	2301      	movne	r3, #1
 800f05c:	0692      	lsls	r2, r2, #26
 800f05e:	d42b      	bmi.n	800f0b8 <_printf_common+0xb0>
 800f060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f064:	4641      	mov	r1, r8
 800f066:	4638      	mov	r0, r7
 800f068:	47c8      	blx	r9
 800f06a:	3001      	adds	r0, #1
 800f06c:	d01e      	beq.n	800f0ac <_printf_common+0xa4>
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	6922      	ldr	r2, [r4, #16]
 800f072:	f003 0306 	and.w	r3, r3, #6
 800f076:	2b04      	cmp	r3, #4
 800f078:	bf02      	ittt	eq
 800f07a:	68e5      	ldreq	r5, [r4, #12]
 800f07c:	6833      	ldreq	r3, [r6, #0]
 800f07e:	1aed      	subeq	r5, r5, r3
 800f080:	68a3      	ldr	r3, [r4, #8]
 800f082:	bf0c      	ite	eq
 800f084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f088:	2500      	movne	r5, #0
 800f08a:	4293      	cmp	r3, r2
 800f08c:	bfc4      	itt	gt
 800f08e:	1a9b      	subgt	r3, r3, r2
 800f090:	18ed      	addgt	r5, r5, r3
 800f092:	2600      	movs	r6, #0
 800f094:	341a      	adds	r4, #26
 800f096:	42b5      	cmp	r5, r6
 800f098:	d11a      	bne.n	800f0d0 <_printf_common+0xc8>
 800f09a:	2000      	movs	r0, #0
 800f09c:	e008      	b.n	800f0b0 <_printf_common+0xa8>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	4652      	mov	r2, sl
 800f0a2:	4641      	mov	r1, r8
 800f0a4:	4638      	mov	r0, r7
 800f0a6:	47c8      	blx	r9
 800f0a8:	3001      	adds	r0, #1
 800f0aa:	d103      	bne.n	800f0b4 <_printf_common+0xac>
 800f0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b4:	3501      	adds	r5, #1
 800f0b6:	e7c6      	b.n	800f046 <_printf_common+0x3e>
 800f0b8:	18e1      	adds	r1, r4, r3
 800f0ba:	1c5a      	adds	r2, r3, #1
 800f0bc:	2030      	movs	r0, #48	@ 0x30
 800f0be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0c2:	4422      	add	r2, r4
 800f0c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0cc:	3302      	adds	r3, #2
 800f0ce:	e7c7      	b.n	800f060 <_printf_common+0x58>
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	4622      	mov	r2, r4
 800f0d4:	4641      	mov	r1, r8
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	47c8      	blx	r9
 800f0da:	3001      	adds	r0, #1
 800f0dc:	d0e6      	beq.n	800f0ac <_printf_common+0xa4>
 800f0de:	3601      	adds	r6, #1
 800f0e0:	e7d9      	b.n	800f096 <_printf_common+0x8e>
	...

0800f0e4 <_printf_i>:
 800f0e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e8:	7e0f      	ldrb	r7, [r1, #24]
 800f0ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0ec:	2f78      	cmp	r7, #120	@ 0x78
 800f0ee:	4691      	mov	r9, r2
 800f0f0:	4680      	mov	r8, r0
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	469a      	mov	sl, r3
 800f0f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f0fa:	d807      	bhi.n	800f10c <_printf_i+0x28>
 800f0fc:	2f62      	cmp	r7, #98	@ 0x62
 800f0fe:	d80a      	bhi.n	800f116 <_printf_i+0x32>
 800f100:	2f00      	cmp	r7, #0
 800f102:	f000 80d1 	beq.w	800f2a8 <_printf_i+0x1c4>
 800f106:	2f58      	cmp	r7, #88	@ 0x58
 800f108:	f000 80b8 	beq.w	800f27c <_printf_i+0x198>
 800f10c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f110:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f114:	e03a      	b.n	800f18c <_printf_i+0xa8>
 800f116:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f11a:	2b15      	cmp	r3, #21
 800f11c:	d8f6      	bhi.n	800f10c <_printf_i+0x28>
 800f11e:	a101      	add	r1, pc, #4	@ (adr r1, 800f124 <_printf_i+0x40>)
 800f120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f124:	0800f17d 	.word	0x0800f17d
 800f128:	0800f191 	.word	0x0800f191
 800f12c:	0800f10d 	.word	0x0800f10d
 800f130:	0800f10d 	.word	0x0800f10d
 800f134:	0800f10d 	.word	0x0800f10d
 800f138:	0800f10d 	.word	0x0800f10d
 800f13c:	0800f191 	.word	0x0800f191
 800f140:	0800f10d 	.word	0x0800f10d
 800f144:	0800f10d 	.word	0x0800f10d
 800f148:	0800f10d 	.word	0x0800f10d
 800f14c:	0800f10d 	.word	0x0800f10d
 800f150:	0800f28f 	.word	0x0800f28f
 800f154:	0800f1bb 	.word	0x0800f1bb
 800f158:	0800f249 	.word	0x0800f249
 800f15c:	0800f10d 	.word	0x0800f10d
 800f160:	0800f10d 	.word	0x0800f10d
 800f164:	0800f2b1 	.word	0x0800f2b1
 800f168:	0800f10d 	.word	0x0800f10d
 800f16c:	0800f1bb 	.word	0x0800f1bb
 800f170:	0800f10d 	.word	0x0800f10d
 800f174:	0800f10d 	.word	0x0800f10d
 800f178:	0800f251 	.word	0x0800f251
 800f17c:	6833      	ldr	r3, [r6, #0]
 800f17e:	1d1a      	adds	r2, r3, #4
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6032      	str	r2, [r6, #0]
 800f184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f188:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f18c:	2301      	movs	r3, #1
 800f18e:	e09c      	b.n	800f2ca <_printf_i+0x1e6>
 800f190:	6833      	ldr	r3, [r6, #0]
 800f192:	6820      	ldr	r0, [r4, #0]
 800f194:	1d19      	adds	r1, r3, #4
 800f196:	6031      	str	r1, [r6, #0]
 800f198:	0606      	lsls	r6, r0, #24
 800f19a:	d501      	bpl.n	800f1a0 <_printf_i+0xbc>
 800f19c:	681d      	ldr	r5, [r3, #0]
 800f19e:	e003      	b.n	800f1a8 <_printf_i+0xc4>
 800f1a0:	0645      	lsls	r5, r0, #25
 800f1a2:	d5fb      	bpl.n	800f19c <_printf_i+0xb8>
 800f1a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1a8:	2d00      	cmp	r5, #0
 800f1aa:	da03      	bge.n	800f1b4 <_printf_i+0xd0>
 800f1ac:	232d      	movs	r3, #45	@ 0x2d
 800f1ae:	426d      	negs	r5, r5
 800f1b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1b4:	4858      	ldr	r0, [pc, #352]	@ (800f318 <_printf_i+0x234>)
 800f1b6:	230a      	movs	r3, #10
 800f1b8:	e011      	b.n	800f1de <_printf_i+0xfa>
 800f1ba:	6821      	ldr	r1, [r4, #0]
 800f1bc:	6833      	ldr	r3, [r6, #0]
 800f1be:	0608      	lsls	r0, r1, #24
 800f1c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1c4:	d402      	bmi.n	800f1cc <_printf_i+0xe8>
 800f1c6:	0649      	lsls	r1, r1, #25
 800f1c8:	bf48      	it	mi
 800f1ca:	b2ad      	uxthmi	r5, r5
 800f1cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1ce:	4852      	ldr	r0, [pc, #328]	@ (800f318 <_printf_i+0x234>)
 800f1d0:	6033      	str	r3, [r6, #0]
 800f1d2:	bf14      	ite	ne
 800f1d4:	230a      	movne	r3, #10
 800f1d6:	2308      	moveq	r3, #8
 800f1d8:	2100      	movs	r1, #0
 800f1da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1de:	6866      	ldr	r6, [r4, #4]
 800f1e0:	60a6      	str	r6, [r4, #8]
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	db05      	blt.n	800f1f2 <_printf_i+0x10e>
 800f1e6:	6821      	ldr	r1, [r4, #0]
 800f1e8:	432e      	orrs	r6, r5
 800f1ea:	f021 0104 	bic.w	r1, r1, #4
 800f1ee:	6021      	str	r1, [r4, #0]
 800f1f0:	d04b      	beq.n	800f28a <_printf_i+0x1a6>
 800f1f2:	4616      	mov	r6, r2
 800f1f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1f8:	fb03 5711 	mls	r7, r3, r1, r5
 800f1fc:	5dc7      	ldrb	r7, [r0, r7]
 800f1fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f202:	462f      	mov	r7, r5
 800f204:	42bb      	cmp	r3, r7
 800f206:	460d      	mov	r5, r1
 800f208:	d9f4      	bls.n	800f1f4 <_printf_i+0x110>
 800f20a:	2b08      	cmp	r3, #8
 800f20c:	d10b      	bne.n	800f226 <_printf_i+0x142>
 800f20e:	6823      	ldr	r3, [r4, #0]
 800f210:	07df      	lsls	r7, r3, #31
 800f212:	d508      	bpl.n	800f226 <_printf_i+0x142>
 800f214:	6923      	ldr	r3, [r4, #16]
 800f216:	6861      	ldr	r1, [r4, #4]
 800f218:	4299      	cmp	r1, r3
 800f21a:	bfde      	ittt	le
 800f21c:	2330      	movle	r3, #48	@ 0x30
 800f21e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f222:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f226:	1b92      	subs	r2, r2, r6
 800f228:	6122      	str	r2, [r4, #16]
 800f22a:	f8cd a000 	str.w	sl, [sp]
 800f22e:	464b      	mov	r3, r9
 800f230:	aa03      	add	r2, sp, #12
 800f232:	4621      	mov	r1, r4
 800f234:	4640      	mov	r0, r8
 800f236:	f7ff fee7 	bl	800f008 <_printf_common>
 800f23a:	3001      	adds	r0, #1
 800f23c:	d14a      	bne.n	800f2d4 <_printf_i+0x1f0>
 800f23e:	f04f 30ff 	mov.w	r0, #4294967295
 800f242:	b004      	add	sp, #16
 800f244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f248:	6823      	ldr	r3, [r4, #0]
 800f24a:	f043 0320 	orr.w	r3, r3, #32
 800f24e:	6023      	str	r3, [r4, #0]
 800f250:	4832      	ldr	r0, [pc, #200]	@ (800f31c <_printf_i+0x238>)
 800f252:	2778      	movs	r7, #120	@ 0x78
 800f254:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f258:	6823      	ldr	r3, [r4, #0]
 800f25a:	6831      	ldr	r1, [r6, #0]
 800f25c:	061f      	lsls	r7, r3, #24
 800f25e:	f851 5b04 	ldr.w	r5, [r1], #4
 800f262:	d402      	bmi.n	800f26a <_printf_i+0x186>
 800f264:	065f      	lsls	r7, r3, #25
 800f266:	bf48      	it	mi
 800f268:	b2ad      	uxthmi	r5, r5
 800f26a:	6031      	str	r1, [r6, #0]
 800f26c:	07d9      	lsls	r1, r3, #31
 800f26e:	bf44      	itt	mi
 800f270:	f043 0320 	orrmi.w	r3, r3, #32
 800f274:	6023      	strmi	r3, [r4, #0]
 800f276:	b11d      	cbz	r5, 800f280 <_printf_i+0x19c>
 800f278:	2310      	movs	r3, #16
 800f27a:	e7ad      	b.n	800f1d8 <_printf_i+0xf4>
 800f27c:	4826      	ldr	r0, [pc, #152]	@ (800f318 <_printf_i+0x234>)
 800f27e:	e7e9      	b.n	800f254 <_printf_i+0x170>
 800f280:	6823      	ldr	r3, [r4, #0]
 800f282:	f023 0320 	bic.w	r3, r3, #32
 800f286:	6023      	str	r3, [r4, #0]
 800f288:	e7f6      	b.n	800f278 <_printf_i+0x194>
 800f28a:	4616      	mov	r6, r2
 800f28c:	e7bd      	b.n	800f20a <_printf_i+0x126>
 800f28e:	6833      	ldr	r3, [r6, #0]
 800f290:	6825      	ldr	r5, [r4, #0]
 800f292:	6961      	ldr	r1, [r4, #20]
 800f294:	1d18      	adds	r0, r3, #4
 800f296:	6030      	str	r0, [r6, #0]
 800f298:	062e      	lsls	r6, r5, #24
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	d501      	bpl.n	800f2a2 <_printf_i+0x1be>
 800f29e:	6019      	str	r1, [r3, #0]
 800f2a0:	e002      	b.n	800f2a8 <_printf_i+0x1c4>
 800f2a2:	0668      	lsls	r0, r5, #25
 800f2a4:	d5fb      	bpl.n	800f29e <_printf_i+0x1ba>
 800f2a6:	8019      	strh	r1, [r3, #0]
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	6123      	str	r3, [r4, #16]
 800f2ac:	4616      	mov	r6, r2
 800f2ae:	e7bc      	b.n	800f22a <_printf_i+0x146>
 800f2b0:	6833      	ldr	r3, [r6, #0]
 800f2b2:	1d1a      	adds	r2, r3, #4
 800f2b4:	6032      	str	r2, [r6, #0]
 800f2b6:	681e      	ldr	r6, [r3, #0]
 800f2b8:	6862      	ldr	r2, [r4, #4]
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f7f0 ff8f 	bl	80001e0 <memchr>
 800f2c2:	b108      	cbz	r0, 800f2c8 <_printf_i+0x1e4>
 800f2c4:	1b80      	subs	r0, r0, r6
 800f2c6:	6060      	str	r0, [r4, #4]
 800f2c8:	6863      	ldr	r3, [r4, #4]
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2d2:	e7aa      	b.n	800f22a <_printf_i+0x146>
 800f2d4:	6923      	ldr	r3, [r4, #16]
 800f2d6:	4632      	mov	r2, r6
 800f2d8:	4649      	mov	r1, r9
 800f2da:	4640      	mov	r0, r8
 800f2dc:	47d0      	blx	sl
 800f2de:	3001      	adds	r0, #1
 800f2e0:	d0ad      	beq.n	800f23e <_printf_i+0x15a>
 800f2e2:	6823      	ldr	r3, [r4, #0]
 800f2e4:	079b      	lsls	r3, r3, #30
 800f2e6:	d413      	bmi.n	800f310 <_printf_i+0x22c>
 800f2e8:	68e0      	ldr	r0, [r4, #12]
 800f2ea:	9b03      	ldr	r3, [sp, #12]
 800f2ec:	4298      	cmp	r0, r3
 800f2ee:	bfb8      	it	lt
 800f2f0:	4618      	movlt	r0, r3
 800f2f2:	e7a6      	b.n	800f242 <_printf_i+0x15e>
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	4632      	mov	r2, r6
 800f2f8:	4649      	mov	r1, r9
 800f2fa:	4640      	mov	r0, r8
 800f2fc:	47d0      	blx	sl
 800f2fe:	3001      	adds	r0, #1
 800f300:	d09d      	beq.n	800f23e <_printf_i+0x15a>
 800f302:	3501      	adds	r5, #1
 800f304:	68e3      	ldr	r3, [r4, #12]
 800f306:	9903      	ldr	r1, [sp, #12]
 800f308:	1a5b      	subs	r3, r3, r1
 800f30a:	42ab      	cmp	r3, r5
 800f30c:	dcf2      	bgt.n	800f2f4 <_printf_i+0x210>
 800f30e:	e7eb      	b.n	800f2e8 <_printf_i+0x204>
 800f310:	2500      	movs	r5, #0
 800f312:	f104 0619 	add.w	r6, r4, #25
 800f316:	e7f5      	b.n	800f304 <_printf_i+0x220>
 800f318:	080101bd 	.word	0x080101bd
 800f31c:	080101ce 	.word	0x080101ce

0800f320 <_sbrk_r>:
 800f320:	b538      	push	{r3, r4, r5, lr}
 800f322:	4d06      	ldr	r5, [pc, #24]	@ (800f33c <_sbrk_r+0x1c>)
 800f324:	2300      	movs	r3, #0
 800f326:	4604      	mov	r4, r0
 800f328:	4608      	mov	r0, r1
 800f32a:	602b      	str	r3, [r5, #0]
 800f32c:	f7f3 fefc 	bl	8003128 <_sbrk>
 800f330:	1c43      	adds	r3, r0, #1
 800f332:	d102      	bne.n	800f33a <_sbrk_r+0x1a>
 800f334:	682b      	ldr	r3, [r5, #0]
 800f336:	b103      	cbz	r3, 800f33a <_sbrk_r+0x1a>
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	bd38      	pop	{r3, r4, r5, pc}
 800f33c:	20001c50 	.word	0x20001c50

0800f340 <_realloc_r>:
 800f340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f344:	4607      	mov	r7, r0
 800f346:	4614      	mov	r4, r2
 800f348:	460d      	mov	r5, r1
 800f34a:	b921      	cbnz	r1, 800f356 <_realloc_r+0x16>
 800f34c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f350:	4611      	mov	r1, r2
 800f352:	f7ff bc75 	b.w	800ec40 <_malloc_r>
 800f356:	b92a      	cbnz	r2, 800f364 <_realloc_r+0x24>
 800f358:	f7ff fc06 	bl	800eb68 <_free_r>
 800f35c:	4625      	mov	r5, r4
 800f35e:	4628      	mov	r0, r5
 800f360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f364:	f000 f81a 	bl	800f39c <_malloc_usable_size_r>
 800f368:	4284      	cmp	r4, r0
 800f36a:	4606      	mov	r6, r0
 800f36c:	d802      	bhi.n	800f374 <_realloc_r+0x34>
 800f36e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f372:	d8f4      	bhi.n	800f35e <_realloc_r+0x1e>
 800f374:	4621      	mov	r1, r4
 800f376:	4638      	mov	r0, r7
 800f378:	f7ff fc62 	bl	800ec40 <_malloc_r>
 800f37c:	4680      	mov	r8, r0
 800f37e:	b908      	cbnz	r0, 800f384 <_realloc_r+0x44>
 800f380:	4645      	mov	r5, r8
 800f382:	e7ec      	b.n	800f35e <_realloc_r+0x1e>
 800f384:	42b4      	cmp	r4, r6
 800f386:	4622      	mov	r2, r4
 800f388:	4629      	mov	r1, r5
 800f38a:	bf28      	it	cs
 800f38c:	4632      	movcs	r2, r6
 800f38e:	f7ff fbdd 	bl	800eb4c <memcpy>
 800f392:	4629      	mov	r1, r5
 800f394:	4638      	mov	r0, r7
 800f396:	f7ff fbe7 	bl	800eb68 <_free_r>
 800f39a:	e7f1      	b.n	800f380 <_realloc_r+0x40>

0800f39c <_malloc_usable_size_r>:
 800f39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3a0:	1f18      	subs	r0, r3, #4
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	bfbc      	itt	lt
 800f3a6:	580b      	ldrlt	r3, [r1, r0]
 800f3a8:	18c0      	addlt	r0, r0, r3
 800f3aa:	4770      	bx	lr

0800f3ac <_init>:
 800f3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ae:	bf00      	nop
 800f3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3b2:	bc08      	pop	{r3}
 800f3b4:	469e      	mov	lr, r3
 800f3b6:	4770      	bx	lr

0800f3b8 <_fini>:
 800f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ba:	bf00      	nop
 800f3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3be:	bc08      	pop	{r3}
 800f3c0:	469e      	mov	lr, r3
 800f3c2:	4770      	bx	lr
