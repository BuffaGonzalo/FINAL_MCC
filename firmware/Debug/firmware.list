
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e774  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800e914  0800e914  0000f914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efec  0800efec  00010184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800efec  0800efec  0000ffec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eff4  0800eff4  00010184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eff4  0800eff4  0000fff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eff8  0800eff8  0000fff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800effc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a04  20000184  0800f180  00010184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b88  0800f180  00010b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a97c  00000000  00000000  000101b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434a  00000000  00000000  0002ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  0002ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001be09  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001fdac  00000000  00000000  0004c4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009ffec  00000000  00000000  0006c285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010c271  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000012ac  00000000  00000000  0010c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c70  00000000  00000000  0010d560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001141d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8fc 	.word	0x0800e8fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800e8fc 	.word	0x0800e8fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e00a      	b.n	8000dbc <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	ddf1      	ble.n	8000da6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200003a8 	.word	0x200003a8
 8000dd4:	200003b8 	.word	0x200003b8

08000dd8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200005e5 	.word	0x200005e5

08000df8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200005e6 	.word	0x200005e6

08000e18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d116      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e34:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b28      	cmp	r3, #40	@ 0x28
 8000e3c:	d107      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000e44:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e46:	7813      	ldrb	r3, [r2, #0]
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4906      	ldr	r1, [pc, #24]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e54:	f002 fb6c 	bl	8003530 <HAL_ADC_Start_DMA>
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40010000 	.word	0x40010000
 8000e64:	200003a4 	.word	0x200003a4
 8000e68:	200005e4 	.word	0x200005e4
 8000e6c:	200003a8 	.word	0x200003a8
 8000e70:	200001a0 	.word	0x200001a0

08000e74 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e018      	b.n	8000eb6 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	441a      	add	r2, r3
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <USBRxData+0x58>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <USBRxData+0x58>)
 8000e90:	795b      	ldrb	r3, [r3, #5]
 8000e92:	1c58      	adds	r0, r3, #1
 8000e94:	b2c4      	uxtb	r4, r0
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <USBRxData+0x58>)
 8000e98:	7144      	strb	r4, [r0, #5]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <USBRxData+0x58>)
 8000ea2:	795a      	ldrb	r2, [r3, #5]
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <USBRxData+0x58>)
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <USBRxData+0x58>)
 8000eae:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8e2      	bhi.n	8000e84 <USBRxData+0x10>
	}

}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc90      	pop	{r4, r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200003d4 	.word	0x200003d4

08000ed0 <USBTask>:

void USBTask() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0c2      	sub	sp, #264	@ 0x108
 8000ed4:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000ed6:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <USBTask+0x90>)
 8000ed8:	791a      	ldrb	r2, [r3, #4]
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <USBTask+0x90>)
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d039      	beq.n	8000f56 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000ee2:	481f      	ldr	r0, [pc, #124]	@ (8000f60 <USBTask+0x90>)
 8000ee4:	f001 ffda 	bl	8002e9c <unerPrtcl_DecodeHeader>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000eee:	491d      	ldr	r1, [pc, #116]	@ (8000f64 <USBTask+0x94>)
 8000ef0:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <USBTask+0x90>)
 8000ef2:	f000 f839 	bl	8000f68 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000efc:	e01d      	b.n	8000f3a <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <USBTask+0x94>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <USBTask+0x94>)
 8000f04:	7a1b      	ldrb	r3, [r3, #8]
 8000f06:	1c59      	adds	r1, r3, #1
 8000f08:	b2c8      	uxtb	r0, r1
 8000f0a:	4916      	ldr	r1, [pc, #88]	@ (8000f64 <USBTask+0x94>)
 8000f0c:	7208      	strb	r0, [r1, #8]
 8000f0e:	441a      	add	r2, r3
 8000f10:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f14:	7811      	ldrb	r1, [r2, #0]
 8000f16:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000f1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000f1e:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <USBTask+0x94>)
 8000f22:	7a1a      	ldrb	r2, [r3, #8]
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <USBTask+0x94>)
 8000f26:	799b      	ldrb	r3, [r3, #6]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <USBTask+0x94>)
 8000f2e:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000f30:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <USBTask+0x94>)
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3db      	bcc.n	8000efe <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <USBTask+0x94>)
 8000f48:	79db      	ldrb	r3, [r3, #7]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00c fbbd 	bl	800d6d0 <CDC_Transmit_FS>
	}

}
 8000f56:	bf00      	nop
 8000f58:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200003d4 	.word	0x200003d4
 8000f64:	200003c8 	.word	0x200003c8

08000f68 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	7a12      	ldrb	r2, [r2, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	3bf0      	subs	r3, #240	@ 0xf0
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	f200 812f 	bhi.w	80011e4 <decodeCommand+0x27c>
 8000f86:	a201      	add	r2, pc, #4	@ (adr r2, 8000f8c <decodeCommand+0x24>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	08000f9d 	.word	0x08000f9d
 8000f90:	08000fbd 	.word	0x08000fbd
 8000f94:	08000fdd 	.word	0x08000fdd
 8000f98:	080010cd 	.word	0x080010cd
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	21f0      	movs	r1, #240	@ 0xf0
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f001 fe59 	bl	8002c58 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000fa6:	210d      	movs	r1, #13
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f001 ff04 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	7a5b      	ldrb	r3, [r3, #9]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f001 fefe 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		break;
 8000fba:	e129      	b.n	8001210 <decodeCommand+0x2a8>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000fbc:	220d      	movs	r2, #13
 8000fbe:	21f1      	movs	r1, #241	@ 0xf1
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f001 fe49 	bl	8002c58 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000fc6:	4994      	ldr	r1, [pc, #592]	@ (8001218 <decodeCommand+0x2b0>)
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f001 ff22 	bl	8002e12 <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	7a5b      	ldrb	r3, [r3, #9]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f001 feee 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		break;
 8000fda:	e119      	b.n	8001210 <decodeCommand+0x2a8>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000fdc:	220d      	movs	r2, #13
 8000fde:	21f2      	movs	r1, #242	@ 0xf2
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f001 fe39 	bl	8002c58 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = ax;
 8000fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800121c <decodeCommand+0x2b4>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b8c      	ldr	r3, [pc, #560]	@ (8001220 <decodeCommand+0x2b8>)
 8000ff0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000ff2:	4b8b      	ldr	r3, [pc, #556]	@ (8001220 <decodeCommand+0x2b8>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6838      	ldr	r0, [r7, #0]
 8000ffa:	f001 fedc 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000ffe:	4b88      	ldr	r3, [pc, #544]	@ (8001220 <decodeCommand+0x2b8>)
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	4619      	mov	r1, r3
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f001 fed6 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = ay;
 800100a:	4b86      	ldr	r3, [pc, #536]	@ (8001224 <decodeCommand+0x2bc>)
 800100c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b83      	ldr	r3, [pc, #524]	@ (8001220 <decodeCommand+0x2b8>)
 8001014:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001016:	4b82      	ldr	r3, [pc, #520]	@ (8001220 <decodeCommand+0x2b8>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 feca 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001022:	4b7f      	ldr	r3, [pc, #508]	@ (8001220 <decodeCommand+0x2b8>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	4619      	mov	r1, r3
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f001 fec4 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = az;
 800102e:	4b7e      	ldr	r3, [pc, #504]	@ (8001228 <decodeCommand+0x2c0>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b7a      	ldr	r3, [pc, #488]	@ (8001220 <decodeCommand+0x2b8>)
 8001038:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800103a:	4b79      	ldr	r3, [pc, #484]	@ (8001220 <decodeCommand+0x2b8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f001 feb8 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001046:	4b76      	ldr	r3, [pc, #472]	@ (8001220 <decodeCommand+0x2b8>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	4619      	mov	r1, r3
 800104c:	6838      	ldr	r0, [r7, #0]
 800104e:	f001 feb2 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gx;
 8001052:	4b76      	ldr	r3, [pc, #472]	@ (800122c <decodeCommand+0x2c4>)
 8001054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b71      	ldr	r3, [pc, #452]	@ (8001220 <decodeCommand+0x2b8>)
 800105c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800105e:	4b70      	ldr	r3, [pc, #448]	@ (8001220 <decodeCommand+0x2b8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f001 fea6 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800106a:	4b6d      	ldr	r3, [pc, #436]	@ (8001220 <decodeCommand+0x2b8>)
 800106c:	785b      	ldrb	r3, [r3, #1]
 800106e:	4619      	mov	r1, r3
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f001 fea0 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gy;
 8001076:	4b6e      	ldr	r3, [pc, #440]	@ (8001230 <decodeCommand+0x2c8>)
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b68      	ldr	r3, [pc, #416]	@ (8001220 <decodeCommand+0x2b8>)
 8001080:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001082:	4b67      	ldr	r3, [pc, #412]	@ (8001220 <decodeCommand+0x2b8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f001 fe94 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800108e:	4b64      	ldr	r3, [pc, #400]	@ (8001220 <decodeCommand+0x2b8>)
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	4619      	mov	r1, r3
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f001 fe8e 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gz;
 800109a:	4b66      	ldr	r3, [pc, #408]	@ (8001234 <decodeCommand+0x2cc>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001220 <decodeCommand+0x2b8>)
 80010a4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001220 <decodeCommand+0x2b8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	6838      	ldr	r0, [r7, #0]
 80010ae:	f001 fe82 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001220 <decodeCommand+0x2b8>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	4619      	mov	r1, r3
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f001 fe7c 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	7a5b      	ldrb	r3, [r3, #9]
 80010c2:	4619      	mov	r1, r3
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f001 fe76 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		break;
 80010ca:	e0a1      	b.n	8001210 <decodeCommand+0x2a8>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 80010cc:	2211      	movs	r2, #17
 80010ce:	21f3      	movs	r1, #243	@ 0xf3
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	f001 fdc1 	bl	8002c58 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 80010d6:	4b58      	ldr	r3, [pc, #352]	@ (8001238 <decodeCommand+0x2d0>)
 80010d8:	881a      	ldrh	r2, [r3, #0]
 80010da:	4b51      	ldr	r3, [pc, #324]	@ (8001220 <decodeCommand+0x2b8>)
 80010dc:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010de:	4b50      	ldr	r3, [pc, #320]	@ (8001220 <decodeCommand+0x2b8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f001 fe66 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001220 <decodeCommand+0x2b8>)
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	4619      	mov	r1, r3
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f001 fe60 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 80010f6:	4b50      	ldr	r3, [pc, #320]	@ (8001238 <decodeCommand+0x2d0>)
 80010f8:	885a      	ldrh	r2, [r3, #2]
 80010fa:	4b49      	ldr	r3, [pc, #292]	@ (8001220 <decodeCommand+0x2b8>)
 80010fc:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010fe:	4b48      	ldr	r3, [pc, #288]	@ (8001220 <decodeCommand+0x2b8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f001 fe56 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800110a:	4b45      	ldr	r3, [pc, #276]	@ (8001220 <decodeCommand+0x2b8>)
 800110c:	785b      	ldrb	r3, [r3, #1]
 800110e:	4619      	mov	r1, r3
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f001 fe50 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 8001116:	4b48      	ldr	r3, [pc, #288]	@ (8001238 <decodeCommand+0x2d0>)
 8001118:	889a      	ldrh	r2, [r3, #4]
 800111a:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <decodeCommand+0x2b8>)
 800111c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800111e:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <decodeCommand+0x2b8>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4619      	mov	r1, r3
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f001 fe46 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800112a:	4b3d      	ldr	r3, [pc, #244]	@ (8001220 <decodeCommand+0x2b8>)
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	4619      	mov	r1, r3
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f001 fe40 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 8001136:	4b40      	ldr	r3, [pc, #256]	@ (8001238 <decodeCommand+0x2d0>)
 8001138:	88da      	ldrh	r2, [r3, #6]
 800113a:	4b39      	ldr	r3, [pc, #228]	@ (8001220 <decodeCommand+0x2b8>)
 800113c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <decodeCommand+0x2b8>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f001 fe36 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800114a:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <decodeCommand+0x2b8>)
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	4619      	mov	r1, r3
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f001 fe30 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 8001156:	4b38      	ldr	r3, [pc, #224]	@ (8001238 <decodeCommand+0x2d0>)
 8001158:	891a      	ldrh	r2, [r3, #8]
 800115a:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <decodeCommand+0x2b8>)
 800115c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800115e:	4b30      	ldr	r3, [pc, #192]	@ (8001220 <decodeCommand+0x2b8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f001 fe26 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800116a:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <decodeCommand+0x2b8>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	4619      	mov	r1, r3
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f001 fe20 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 8001176:	4b30      	ldr	r3, [pc, #192]	@ (8001238 <decodeCommand+0x2d0>)
 8001178:	895a      	ldrh	r2, [r3, #10]
 800117a:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <decodeCommand+0x2b8>)
 800117c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800117e:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <decodeCommand+0x2b8>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	6838      	ldr	r0, [r7, #0]
 8001186:	f001 fe16 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800118a:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <decodeCommand+0x2b8>)
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	4619      	mov	r1, r3
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	f001 fe10 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <decodeCommand+0x2d0>)
 8001198:	899a      	ldrh	r2, [r3, #12]
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <decodeCommand+0x2b8>)
 800119c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <decodeCommand+0x2b8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f001 fe06 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <decodeCommand+0x2b8>)
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	4619      	mov	r1, r3
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f001 fe00 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <decodeCommand+0x2d0>)
 80011b8:	89da      	ldrh	r2, [r3, #14]
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <decodeCommand+0x2b8>)
 80011bc:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <decodeCommand+0x2b8>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fdf6 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <decodeCommand+0x2b8>)
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	4619      	mov	r1, r3
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f001 fdf0 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	7a5b      	ldrb	r3, [r3, #9]
 80011da:	4619      	mov	r1, r3
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	f001 fdea 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		break;
 80011e2:	e015      	b.n	8001210 <decodeCommand+0x2a8>
		break;
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	7a12      	ldrb	r2, [r2, #8]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2202      	movs	r2, #2
 80011f2:	4619      	mov	r1, r3
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f001 fd2f 	bl	8002c58 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 80011fa:	21ff      	movs	r1, #255	@ 0xff
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f001 fdda 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	7a5b      	ldrb	r3, [r3, #9]
 8001206:	4619      	mov	r1, r3
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f001 fdd4 	bl	8002db6 <unerPrtcl_PutByteOnTx>
		break;
 800120e:	bf00      	nop
	}
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800ef88 	.word	0x0800ef88
 800121c:	200005e8 	.word	0x200005e8
 8001220:	200005e0 	.word	0x200005e0
 8001224:	200005ea 	.word	0x200005ea
 8001228:	200005ec 	.word	0x200005ec
 800122c:	200005ee 	.word	0x200005ee
 8001230:	200005f0 	.word	0x200005f0
 8001234:	200005f2 	.word	0x200005f2
 8001238:	200003b8 	.word	0x200003b8

0800123c <do10ms>:

void do10ms() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	if (IS10MS) {
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <do10ms+0x6c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02a      	beq.n	80012a4 <do10ms+0x68>
		IS10MS = FALSE;
 800124e:	4a16      	ldr	r2, [pc, #88]	@ (80012a8 <do10ms+0x6c>)
 8001250:	7813      	ldrb	r3, [r2, #0]
 8001252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001256:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <do10ms+0x70>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <do10ms+0x70>)
 8001262:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <do10ms+0x74>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <do10ms+0x74>)
 800126e:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <do10ms+0x74>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <do10ms+0x4c>
			tmo20ms = 2;
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <do10ms+0x74>)
 800127a:	2202      	movs	r2, #2
 800127c:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <do10ms+0x6c>)
 8001280:	7813      	ldrb	r3, [r2, #0]
 8001282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001286:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <do10ms+0x70>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d109      	bne.n	80012a4 <do10ms+0x68>
			tmo100ms = 10;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <do10ms+0x70>)
 8001292:	220a      	movs	r2, #10
 8001294:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 8001296:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <do10ms+0x6c>)
 8001298:	7813      	ldrb	r3, [r2, #0]
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 80012a0:	f000 f808 	bl	80012b4 <heartBeatTask>
		}
	}
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200005e4 	.word	0x200005e4
 80012ac:	20000028 	.word	0x20000028
 80012b0:	20000029 	.word	0x20000029

080012b4 <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <heartBeatTask+0x44>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	43db      	mvns	r3, r3
 80012be:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <heartBeatTask+0x48>)
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	4611      	mov	r1, r2
 80012c4:	2201      	movs	r2, #1
 80012c6:	408a      	lsls	r2, r1
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80012ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d2:	480b      	ldr	r0, [pc, #44]	@ (8001300 <heartBeatTask+0x4c>)
 80012d4:	f003 fb53 	bl	800497e <HAL_GPIO_TogglePin>

	times++;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <heartBeatTask+0x48>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <heartBeatTask+0x48>)
 80012e2:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <heartBeatTask+0x48>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <heartBeatTask+0x48>)
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000000 	.word	0x20000000
 80012fc:	200005f4 	.word	0x200005f4
 8001300:	40020800 	.word	0x40020800

08001304 <displayTask>:

void displayTask() {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
	static uint8_t init = TRUE;
	uint8_t y = 0, x = 2;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	2302      	movs	r3, #2
 8001310:	73bb      	strb	r3, [r7, #14]
	if (IS100MS) {
 8001312:	4b69      	ldr	r3, [pc, #420]	@ (80014b8 <displayTask+0x1b4>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80ac 	beq.w	800147a <displayTask+0x176>
		ONDISPLAY=TRUE;
 8001322:	4a65      	ldr	r2, [pc, #404]	@ (80014b8 <displayTask+0x1b4>)
 8001324:	7813      	ldrb	r3, [r2, #0]
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	7013      	strb	r3, [r2, #0]
		IS100MS=FALSE;
 800132c:	4a62      	ldr	r2, [pc, #392]	@ (80014b8 <displayTask+0x1b4>)
 800132e:	7813      	ldrb	r3, [r2, #0]
 8001330:	f023 0320 	bic.w	r3, r3, #32
 8001334:	7013      	strb	r3, [r2, #0]
		if (init) {
 8001336:	4b61      	ldr	r3, [pc, #388]	@ (80014bc <displayTask+0x1b8>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <displayTask+0x48>
			init = FALSE;
 800133e:	4b5f      	ldr	r3, [pc, #380]	@ (80014bc <displayTask+0x1b8>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
			ssd1306_Fill(White);
 8001344:	2001      	movs	r0, #1
 8001346:	f000 ffbb 	bl	80022c0 <ssd1306_Fill>
 800134a:	e096      	b.n	800147a <displayTask+0x176>
			//ssd1306_DrawBitmap(0, 0, chat_gpt_128x64, 128, 64, White);
		} else {
			char data[8];
			ssd1306_SetCursor(x, y);
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 f960 	bl	8002618 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "ax:%u", ax);
 8001358:	4b59      	ldr	r3, [pc, #356]	@ (80014c0 <displayTask+0x1bc>)
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	1d38      	adds	r0, r7, #4
 8001360:	4a58      	ldr	r2, [pc, #352]	@ (80014c4 <displayTask+0x1c0>)
 8001362:	2108      	movs	r1, #8
 8001364:	f00c fe16 	bl	800df94 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 8001368:	4b57      	ldr	r3, [pc, #348]	@ (80014c8 <displayTask+0x1c4>)
 800136a:	1d38      	adds	r0, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001372:	f001 f92b 	bl	80025cc <ssd1306_WriteString>
			x += 48;
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	3330      	adds	r3, #48	@ 0x30
 800137a:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f948 	bl	8002618 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gx:%u", gx);
 8001388:	4b50      	ldr	r3, [pc, #320]	@ (80014cc <displayTask+0x1c8>)
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	1d38      	adds	r0, r7, #4
 8001390:	4a4f      	ldr	r2, [pc, #316]	@ (80014d0 <displayTask+0x1cc>)
 8001392:	2108      	movs	r1, #8
 8001394:	f00c fdfe 	bl	800df94 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 8001398:	4b4b      	ldr	r3, [pc, #300]	@ (80014c8 <displayTask+0x1c4>)
 800139a:	1d38      	adds	r0, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	9200      	str	r2, [sp, #0]
 80013a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a2:	f001 f913 	bl	80025cc <ssd1306_WriteString>
			x = 2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	73bb      	strb	r3, [r7, #14]
			y += 8;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	3308      	adds	r3, #8
 80013ae:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(2, y);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f001 f92f 	bl	8002618 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "ay:%u", ay);
 80013ba:	4b46      	ldr	r3, [pc, #280]	@ (80014d4 <displayTask+0x1d0>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	1d38      	adds	r0, r7, #4
 80013c2:	4a45      	ldr	r2, [pc, #276]	@ (80014d8 <displayTask+0x1d4>)
 80013c4:	2108      	movs	r1, #8
 80013c6:	f00c fde5 	bl	800df94 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 80013ca:	4b3f      	ldr	r3, [pc, #252]	@ (80014c8 <displayTask+0x1c4>)
 80013cc:	1d38      	adds	r0, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d4:	f001 f8fa 	bl	80025cc <ssd1306_WriteString>
			x += 48;
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	3330      	adds	r3, #48	@ 0x30
 80013dc:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 f917 	bl	8002618 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gy:%u", gy);
 80013ea:	4b3c      	ldr	r3, [pc, #240]	@ (80014dc <displayTask+0x1d8>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	1d38      	adds	r0, r7, #4
 80013f2:	4a3b      	ldr	r2, [pc, #236]	@ (80014e0 <displayTask+0x1dc>)
 80013f4:	2108      	movs	r1, #8
 80013f6:	f00c fdcd 	bl	800df94 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 80013fa:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <displayTask+0x1c4>)
 80013fc:	1d38      	adds	r0, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	9200      	str	r2, [sp, #0]
 8001402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001404:	f001 f8e2 	bl	80025cc <ssd1306_WriteString>
			x = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	73bb      	strb	r3, [r7, #14]
			y += 8;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3308      	adds	r3, #8
 8001410:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(2, y);
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	4619      	mov	r1, r3
 8001416:	2002      	movs	r0, #2
 8001418:	f001 f8fe 	bl	8002618 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "az:%u", az);
 800141c:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <displayTask+0x1e0>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	1d38      	adds	r0, r7, #4
 8001424:	4a30      	ldr	r2, [pc, #192]	@ (80014e8 <displayTask+0x1e4>)
 8001426:	2108      	movs	r1, #8
 8001428:	f00c fdb4 	bl	800df94 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 800142c:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <displayTask+0x1c4>)
 800142e:	1d38      	adds	r0, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001436:	f001 f8c9 	bl	80025cc <ssd1306_WriteString>
			x += 48;
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	3330      	adds	r3, #48	@ 0x30
 800143e:	73bb      	strb	r3, [r7, #14]
			ssd1306_SetCursor(x, y);
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f001 f8e6 	bl	8002618 <ssd1306_SetCursor>
			snprintf(data, sizeof(data), "gz:%u", gz);
 800144c:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <displayTask+0x1e8>)
 800144e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001452:	1d38      	adds	r0, r7, #4
 8001454:	4a26      	ldr	r2, [pc, #152]	@ (80014f0 <displayTask+0x1ec>)
 8001456:	2108      	movs	r1, #8
 8001458:	f00c fd9c 	bl	800df94 <sniprintf>
			ssd1306_WriteString(data, Font_6x8, Black);
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <displayTask+0x1c4>)
 800145e:	1d38      	adds	r0, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	9200      	str	r2, [sp, #0]
 8001464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001466:	f001 f8b1 	bl	80025cc <ssd1306_WriteString>

			ssd1306_FillRectangle(55, 30, 80, 55, Black);
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2337      	movs	r3, #55	@ 0x37
 8001470:	2250      	movs	r2, #80	@ 0x50
 8001472:	211e      	movs	r1, #30
 8001474:	2037      	movs	r0, #55	@ 0x37
 8001476:	f001 f8e7 	bl	8002648 <ssd1306_FillRectangle>
		}
	}
	if (ONDISPLAY) {
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <displayTask+0x1b4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <displayTask+0x1ac>
		ONMPU=FALSE;
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <displayTask+0x1b4>)
 800148a:	7813      	ldrb	r3, [r2, #0]
 800148c:	f023 0302 	bic.w	r3, r3, #2
 8001490:	7013      	strb	r3, [r2, #0]
		if (ssd1306_UpdateScreenDMA()){
 8001492:	f000 ff55 	bl	8002340 <ssd1306_UpdateScreenDMA>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <displayTask+0x1ac>
			ONDISPLAY = FALSE; //Sali de la pantalla
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <displayTask+0x1b4>)
 800149e:	7813      	ldrb	r3, [r2, #0]
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	7013      	strb	r3, [r2, #0]
			ONMPU=TRUE; //Permite obtención de datos MPU posterior a actualizar pantalla
 80014a6:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <displayTask+0x1b4>)
 80014a8:	7813      	ldrb	r3, [r2, #0]
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	7013      	strb	r3, [r2, #0]
		}
	}
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200005e4 	.word	0x200005e4
 80014bc:	2000002a 	.word	0x2000002a
 80014c0:	200005e8 	.word	0x200005e8
 80014c4:	0800e914 	.word	0x0800e914
 80014c8:	0800ef7c 	.word	0x0800ef7c
 80014cc:	200005ee 	.word	0x200005ee
 80014d0:	0800e91c 	.word	0x0800e91c
 80014d4:	200005ea 	.word	0x200005ea
 80014d8:	0800e924 	.word	0x0800e924
 80014dc:	200005f0 	.word	0x200005f0
 80014e0:	0800e92c 	.word	0x0800e92c
 80014e4:	200005ec 	.word	0x200005ec
 80014e8:	0800e934 	.word	0x0800e934
 80014ec:	200005f2 	.word	0x200005f2
 80014f0:	0800e93c 	.word	0x0800e93c

080014f4 <displayMemWrite>:


void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af04      	add	r7, sp, #16
 80014fa:	6039      	str	r1, [r7, #0]
 80014fc:	4611      	mov	r1, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	460b      	mov	r3, r1
 8001506:	71bb      	strb	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	b299      	uxth	r1, r3
 8001510:	797b      	ldrb	r3, [r7, #5]
 8001512:	b29a      	uxth	r2, r3
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	9002      	str	r0, [sp, #8]
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	4803      	ldr	r0, [pc, #12]	@ (8001534 <displayMemWrite+0x40>)
 8001528:	f003 fb9e 	bl	8004c68 <HAL_I2C_Mem_Write>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000248 	.word	0x20000248

08001538 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af02      	add	r7, sp, #8
 800153e:	6039      	str	r1, [r7, #0]
 8001540:	4611      	mov	r1, r2
 8001542:	461a      	mov	r2, r3
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	460b      	mov	r3, r1
 800154a:	71bb      	strb	r3, [r7, #6]
 800154c:	4613      	mov	r3, r2
 800154e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	b299      	uxth	r1, r3
 8001554:	797b      	ldrb	r3, [r7, #5]
 8001556:	b29a      	uxth	r2, r3
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	b29b      	uxth	r3, r3
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <displayMemWriteDMA+0x3c>)
 8001566:	f003 fc79 	bl	8004e5c <HAL_I2C_Mem_Write_DMA>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000248 	.word	0x20000248

08001578 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
 800157e:	6039      	str	r1, [r7, #0]
 8001580:	4611      	mov	r1, r2
 8001582:	461a      	mov	r2, r3
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	460b      	mov	r3, r1
 800158a:	71bb      	strb	r3, [r7, #6]
 800158c:	4613      	mov	r3, r2
 800158e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	b299      	uxth	r1, r3
 8001594:	797b      	ldrb	r3, [r7, #5]
 8001596:	b29a      	uxth	r2, r3
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	b29b      	uxth	r3, r3
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	9002      	str	r0, [sp, #8]
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2301      	movs	r3, #1
 80015aa:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <mpuMemWrite+0x40>)
 80015ac:	f003 fb5c 	bl	8004c68 <HAL_I2C_Mem_Write>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000248 	.word	0x20000248

080015bc <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6039      	str	r1, [r7, #0]
 80015c4:	4611      	mov	r1, r2
 80015c6:	461a      	mov	r2, r3
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	460b      	mov	r3, r1
 80015ce:	71bb      	strb	r3, [r7, #6]
 80015d0:	4613      	mov	r3, r2
 80015d2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	b299      	uxth	r1, r3
 80015d8:	797b      	ldrb	r3, [r7, #5]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2301      	movs	r3, #1
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <mpuMemReadDMA+0x3c>)
 80015ea:	f003 fd95 	bl	8005118 <HAL_I2C_Mem_Read_DMA>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000248 	.word	0x20000248

080015fc <mpuTask>:

void mpuTask(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af02      	add	r7, sp, #8
//		ONMPU=TRUE;
//		IS20MS = FALSE;
//	}


	if (ONMPU) {
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <mpuTask+0x70>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d018      	beq.n	8001642 <mpuTask+0x46>
		ONDISPLAY=FALSE;
 8001610:	4a16      	ldr	r2, [pc, #88]	@ (800166c <mpuTask+0x70>)
 8001612:	7813      	ldrb	r3, [r2, #0]
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	7013      	strb	r3, [r2, #0]
		if(mpu6050_Read()){
 800161a:	f000 fb65 	bl	8001ce8 <mpu6050_Read>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00e      	beq.n	8001642 <mpuTask+0x46>
			mpu6050_GetData(&ax, &ay, &az, &gx, &gy, &gz);
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <mpuTask+0x74>)
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <mpuTask+0x78>)
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <mpuTask+0x7c>)
 800162e:	4a13      	ldr	r2, [pc, #76]	@ (800167c <mpuTask+0x80>)
 8001630:	4913      	ldr	r1, [pc, #76]	@ (8001680 <mpuTask+0x84>)
 8001632:	4814      	ldr	r0, [pc, #80]	@ (8001684 <mpuTask+0x88>)
 8001634:	f000 fd0c 	bl	8002050 <mpu6050_GetData>
			ONMPU=FALSE;
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <mpuTask+0x70>)
 800163a:	7813      	ldrb	r3, [r2, #0]
 800163c:	f023 0302 	bic.w	r3, r3, #2
 8001640:	7013      	strb	r3, [r2, #0]
		}
	}
	if (IS20MS) {
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <mpuTask+0x70>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <mpuTask+0x68>
		ONMPU=TRUE;
 8001650:	4a06      	ldr	r2, [pc, #24]	@ (800166c <mpuTask+0x70>)
 8001652:	7813      	ldrb	r3, [r2, #0]
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	7013      	strb	r3, [r2, #0]
		IS20MS = FALSE;
 800165a:	4a04      	ldr	r2, [pc, #16]	@ (800166c <mpuTask+0x70>)
 800165c:	7813      	ldrb	r3, [r2, #0]
 800165e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001662:	7013      	strb	r3, [r2, #0]
	}
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200005e4 	.word	0x200005e4
 8001670:	200005f2 	.word	0x200005f2
 8001674:	200005f0 	.word	0x200005f0
 8001678:	200005ee 	.word	0x200005ee
 800167c:	200005ec 	.word	0x200005ec
 8001680:	200005ea 	.word	0x200005ea
 8001684:	200005e8 	.word	0x200005e8

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168c:	f001 fd66 	bl	800315c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001690:	f000 f85e 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001694:	f000 fa4a 	bl	8001b2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001698:	f000 fa0a 	bl	8001ab0 <MX_DMA_Init>
  MX_ADC1_Init();
 800169c:	f000 f8c0 	bl	8001820 <MX_ADC1_Init>
  MX_I2C1_Init();
 80016a0:	f000 f972 	bl	8001988 <MX_I2C1_Init>
  MX_TIM1_Init();
 80016a4:	f000 f99e 	bl	80019e4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80016a8:	f00b fef8 	bl	800d49c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 80016ac:	481a      	ldr	r0, [pc, #104]	@ (8001718 <main+0x90>)
 80016ae:	f00c f847 	bl	800d740 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 80016b2:	481a      	ldr	r0, [pc, #104]	@ (800171c <main+0x94>)
 80016b4:	f007 fefc 	bl	80094b0 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016be:	4818      	ldr	r0, [pc, #96]	@ (8001720 <main+0x98>)
 80016c0:	f003 f944 	bl	800494c <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 80016c4:	4817      	ldr	r0, [pc, #92]	@ (8001724 <main+0x9c>)
 80016c6:	f000 fd81 	bl	80021cc <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 80016ca:	4817      	ldr	r0, [pc, #92]	@ (8001728 <main+0xa0>)
 80016cc:	f000 fd6e 	bl	80021ac <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 80016d0:	4816      	ldr	r0, [pc, #88]	@ (800172c <main+0xa4>)
 80016d2:	f000 fd5b 	bl	800218c <ssd1306_Attach_MemWriteDMA>

	ssd1306_Init();
 80016d6:	f000 fd89 	bl	80021ec <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 80016da:	4815      	ldr	r0, [pc, #84]	@ (8001730 <main+0xa8>)
 80016dc:	f000 fa8c 	bl	8001bf8 <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 80016e0:	4814      	ldr	r0, [pc, #80]	@ (8001734 <main+0xac>)
 80016e2:	f000 fa99 	bl	8001c18 <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 80016e6:	4814      	ldr	r0, [pc, #80]	@ (8001738 <main+0xb0>)
 80016e8:	f000 faa6 	bl	8001c38 <mpu6050_Attach_MemReadDMA>

	MPU6050_Init();
 80016ec:	f000 fade 	bl	8001cac <MPU6050_Init>


	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <main+0xb4>)
 80016f2:	4a13      	ldr	r2, [pc, #76]	@ (8001740 <main+0xb8>)
 80016f4:	4913      	ldr	r1, [pc, #76]	@ (8001744 <main+0xbc>)
 80016f6:	4814      	ldr	r0, [pc, #80]	@ (8001748 <main+0xc0>)
 80016f8:	f001 fcce 	bl	8003098 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <main+0xc4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 8001702:	f7ff fd9b 	bl	800123c <do10ms>
		USBTask();
 8001706:	f7ff fbe3 	bl	8000ed0 <USBTask>

		mpuTask();
 800170a:	f7ff ff77 	bl	80015fc <mpuTask>
		displayTask();
 800170e:	f7ff fdf9 	bl	8001304 <displayTask>
		do10ms();
 8001712:	bf00      	nop
 8001714:	e7f5      	b.n	8001702 <main+0x7a>
 8001716:	bf00      	nop
 8001718:	08000e75 	.word	0x08000e75
 800171c:	2000035c 	.word	0x2000035c
 8001720:	40020800 	.word	0x40020800
 8001724:	200005e5 	.word	0x200005e5
 8001728:	080014f5 	.word	0x080014f5
 800172c:	08001539 	.word	0x08001539
 8001730:	200005e6 	.word	0x200005e6
 8001734:	08001579 	.word	0x08001579
 8001738:	080015bd 	.word	0x080015bd
 800173c:	200003e0 	.word	0x200003e0
 8001740:	200004e0 	.word	0x200004e0
 8001744:	200003c8 	.word	0x200003c8
 8001748:	200003d4 	.word	0x200003d4
 800174c:	200005e4 	.word	0x200005e4

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	@ 0x50
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2230      	movs	r2, #48	@ 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f00c fc68 	bl	800e034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <SystemClock_Config+0xc8>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	4a26      	ldr	r2, [pc, #152]	@ (8001818 <SystemClock_Config+0xc8>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	@ 0x40
 8001784:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <SystemClock_Config+0xc8>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	4b21      	ldr	r3, [pc, #132]	@ (800181c <SystemClock_Config+0xcc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a20      	ldr	r2, [pc, #128]	@ (800181c <SystemClock_Config+0xcc>)
 800179a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <SystemClock_Config+0xcc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b6:	2302      	movs	r3, #2
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017c0:	2319      	movs	r3, #25
 80017c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017c4:	23c0      	movs	r3, #192	@ 0xc0
 80017c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017cc:	2304      	movs	r3, #4
 80017ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 f9d7 	bl	8008b88 <HAL_RCC_OscConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017e0:	f000 fa04 	bl	8001bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e4:	230f      	movs	r3, #15
 80017e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e8:	2302      	movs	r3, #2
 80017ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	2103      	movs	r1, #3
 8001800:	4618      	mov	r0, r3
 8001802:	f007 fc39 	bl	8009078 <HAL_RCC_ClockConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800180c:	f000 f9ee 	bl	8001bec <Error_Handler>
  }
}
 8001810:	bf00      	nop
 8001812:	3750      	adds	r7, #80	@ 0x50
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000

08001820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001832:	4b52      	ldr	r3, [pc, #328]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001834:	4a52      	ldr	r2, [pc, #328]	@ (8001980 <MX_ADC1_Init+0x160>)
 8001836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001838:	4b50      	ldr	r3, [pc, #320]	@ (800197c <MX_ADC1_Init+0x15c>)
 800183a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800183e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001840:	4b4e      	ldr	r3, [pc, #312]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001846:	4b4d      	ldr	r3, [pc, #308]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001848:	2201      	movs	r2, #1
 800184a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800184c:	4b4b      	ldr	r3, [pc, #300]	@ (800197c <MX_ADC1_Init+0x15c>)
 800184e:	2200      	movs	r2, #0
 8001850:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001852:	4b4a      	ldr	r3, [pc, #296]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800185a:	4b48      	ldr	r3, [pc, #288]	@ (800197c <MX_ADC1_Init+0x15c>)
 800185c:	2200      	movs	r2, #0
 800185e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001860:	4b46      	ldr	r3, [pc, #280]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001862:	4a48      	ldr	r2, [pc, #288]	@ (8001984 <MX_ADC1_Init+0x164>)
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001866:	4b45      	ldr	r3, [pc, #276]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800186c:	4b43      	ldr	r3, [pc, #268]	@ (800197c <MX_ADC1_Init+0x15c>)
 800186e:	2208      	movs	r2, #8
 8001870:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001872:	4b42      	ldr	r3, [pc, #264]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800187a:	4b40      	ldr	r3, [pc, #256]	@ (800197c <MX_ADC1_Init+0x15c>)
 800187c:	2201      	movs	r2, #1
 800187e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001880:	483e      	ldr	r0, [pc, #248]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001882:	f001 fd01 	bl	8003288 <HAL_ADC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800188c:	f000 f9ae 	bl	8001bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001890:	2300      	movs	r3, #0
 8001892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4836      	ldr	r0, [pc, #216]	@ (800197c <MX_ADC1_Init+0x15c>)
 80018a2:	f001 ff57 	bl	8003754 <HAL_ADC_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018ac:	f000 f99e 	bl	8001bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	482f      	ldr	r0, [pc, #188]	@ (800197c <MX_ADC1_Init+0x15c>)
 80018be:	f001 ff49 	bl	8003754 <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018c8:	f000 f990 	bl	8001bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018d0:	2303      	movs	r3, #3
 80018d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4828      	ldr	r0, [pc, #160]	@ (800197c <MX_ADC1_Init+0x15c>)
 80018da:	f001 ff3b 	bl	8003754 <HAL_ADC_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80018e4:	f000 f982 	bl	8001bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018e8:	2303      	movs	r3, #3
 80018ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80018ec:	2304      	movs	r3, #4
 80018ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f0:	463b      	mov	r3, r7
 80018f2:	4619      	mov	r1, r3
 80018f4:	4821      	ldr	r0, [pc, #132]	@ (800197c <MX_ADC1_Init+0x15c>)
 80018f6:	f001 ff2d 	bl	8003754 <HAL_ADC_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001900:	f000 f974 	bl	8001bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001904:	2304      	movs	r3, #4
 8001906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001908:	2305      	movs	r3, #5
 800190a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	481a      	ldr	r0, [pc, #104]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001912:	f001 ff1f 	bl	8003754 <HAL_ADC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800191c:	f000 f966 	bl	8001bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001920:	2305      	movs	r3, #5
 8001922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001924:	2306      	movs	r3, #6
 8001926:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001928:	463b      	mov	r3, r7
 800192a:	4619      	mov	r1, r3
 800192c:	4813      	ldr	r0, [pc, #76]	@ (800197c <MX_ADC1_Init+0x15c>)
 800192e:	f001 ff11 	bl	8003754 <HAL_ADC_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001938:	f000 f958 	bl	8001bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800193c:	2306      	movs	r3, #6
 800193e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001940:	2307      	movs	r3, #7
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <MX_ADC1_Init+0x15c>)
 800194a:	f001 ff03 	bl	8003754 <HAL_ADC_ConfigChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001954:	f000 f94a 	bl	8001bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001958:	2307      	movs	r3, #7
 800195a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800195c:	2308      	movs	r3, #8
 800195e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_ADC1_Init+0x15c>)
 8001966:	f001 fef5 	bl	8003754 <HAL_ADC_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001970:	f000 f93c 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001a0 	.word	0x200001a0
 8001980:	40012000 	.word	0x40012000
 8001984:	0f000001 	.word	0x0f000001

08001988 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <MX_I2C1_Init+0x50>)
 800198e:	4a13      	ldr	r2, [pc, #76]	@ (80019dc <MX_I2C1_Init+0x54>)
 8001990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_I2C1_Init+0x50>)
 8001994:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <MX_I2C1_Init+0x58>)
 8001996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_I2C1_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019c6:	f002 fff5 	bl	80049b4 <HAL_I2C_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019d0:	f000 f90c 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000248 	.word	0x20000248
 80019dc:	40005400 	.word	0x40005400
 80019e0:	00061a80 	.word	0x00061a80

080019e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	@ 0x30
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a12:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <MX_TIM1_Init+0xc8>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a18:	225f      	movs	r2, #95	@ 0x5f
 8001a1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001a22:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a24:	22f9      	movs	r2, #249	@ 0xf9
 8001a26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a3a:	481b      	ldr	r0, [pc, #108]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a3c:	f007 fce8 	bl	8009410 <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001a46:	f000 f8d1 	bl	8001bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4619      	mov	r1, r3
 8001a56:	4814      	ldr	r0, [pc, #80]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a58:	f007 fe7c 	bl	8009754 <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a62:	f000 f8c3 	bl	8001bec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a76:	f007 ff34 	bl	80098e2 <HAL_TIM_SlaveConfigSynchro>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001a80:	f000 f8b4 	bl	8001bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_TIM1_Init+0xc4>)
 8001a92:	f008 f943 	bl	8009d1c <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001a9c:	f000 f8a6 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	3730      	adds	r7, #48	@ 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000035c 	.word	0x2000035c
 8001aac:	40010000 	.word	0x40010000

08001ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <MX_DMA_Init+0x78>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a1a      	ldr	r2, [pc, #104]	@ (8001b28 <MX_DMA_Init+0x78>)
 8001ac0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_DMA_Init+0x78>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_DMA_Init+0x78>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a13      	ldr	r2, [pc, #76]	@ (8001b28 <MX_DMA_Init+0x78>)
 8001adc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <MX_DMA_Init+0x78>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	200b      	movs	r0, #11
 8001af4:	f002 f9c3 	bl	8003e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001af8:	200b      	movs	r0, #11
 8001afa:	f002 f9dc 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	200c      	movs	r0, #12
 8001b04:	f002 f9bb 	bl	8003e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b08:	200c      	movs	r0, #12
 8001b0a:	f002 f9d4 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2038      	movs	r0, #56	@ 0x38
 8001b14:	f002 f9b3 	bl	8003e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b18:	2038      	movs	r0, #56	@ 0x38
 8001b1a:	f002 f9cc 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b27      	ldr	r3, [pc, #156]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a26      	ldr	r2, [pc, #152]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_GPIO_Init+0xb8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb8:	480b      	ldr	r0, [pc, #44]	@ (8001be8 <MX_GPIO_Init+0xbc>)
 8001bba:	f002 fec7 	bl	800494c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <MX_GPIO_Init+0xbc>)
 8001bd8:	f002 fd34 	bl	8004644 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	@ 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800

08001bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf0:	b672      	cpsid	i
}
 8001bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <Error_Handler+0x8>

08001bf8 <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	MPU6050_RxCplt = (uint8_t *)PtrRx;
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	200005f8 	.word	0x200005f8

08001c18 <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <mpu6050_Attach_MemWrite+0x1c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200005fc 	.word	0x200005fc

08001c38 <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 8001c40:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <mpu6050_Attach_MemReadDMA+0x1c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000600 	.word	0x20000600

08001c58 <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <mpu6050_WriteData+0x24>)
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	20d0      	movs	r0, #208	@ 0xd0
 8001c70:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200005fc 	.word	0x200005fc

08001c80 <mpu6050_ReadDataDMA>:

void mpu6050_ReadDataDMA(uint8_t* buffer, size_t buff_size, uint8_t type) {
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	71fb      	strb	r3, [r7, #7]
	memReadDMA(MPU6050_ADDR, buffer, buff_size, type);
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <mpu6050_ReadDataDMA+0x28>)
 8001c90:	681c      	ldr	r4, [r3, #0]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	68f9      	ldr	r1, [r7, #12]
 8001c9a:	20d0      	movs	r0, #208	@ 0xd0
 8001c9c:	47a0      	blx	r4
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000600 	.word	0x20000600

08001cac <MPU6050_Init>:


void MPU6050_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	216b      	movs	r1, #107	@ 0x6b
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ffcc 	bl	8001c58 <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	211c      	movs	r1, #28
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffc5 	bl	8001c58 <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	211b      	movs	r1, #27
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ffbe 	bl	8001c58 <mpu6050_WriteData>

}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	0000      	movs	r0, r0
	...

08001ce8 <mpu6050_Read>:

char mpu6050_Read(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

	static uint8_t Rec_Data[14];
	static uint8_t state = 1;

	if (*MPU6050_RxCplt || state == 1) {
 8001cec:	4ba0      	ldr	r3, [pc, #640]	@ (8001f70 <mpu6050_Read+0x288>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d104      	bne.n	8001d00 <mpu6050_Read+0x18>
 8001cf6:	4b9f      	ldr	r3, [pc, #636]	@ (8001f74 <mpu6050_Read+0x28c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	f040 8198 	bne.w	8002030 <mpu6050_Read+0x348>
		*MPU6050_RxCplt = 0;  // Reset completion flag
 8001d00:	4b9b      	ldr	r3, [pc, #620]	@ (8001f70 <mpu6050_Read+0x288>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
		switch (state) {
 8001d08:	4b9a      	ldr	r3, [pc, #616]	@ (8001f74 <mpu6050_Read+0x28c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d002      	beq.n	8001d16 <mpu6050_Read+0x2e>
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d009      	beq.n	8001d28 <mpu6050_Read+0x40>
 8001d14:	e18c      	b.n	8002030 <mpu6050_Read+0x348>
		case 1:
			// Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
			state=2;
 8001d16:	4b97      	ldr	r3, [pc, #604]	@ (8001f74 <mpu6050_Read+0x28c>)
 8001d18:	2202      	movs	r2, #2
 8001d1a:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
			mpu6050_ReadDataDMA(Rec_Data, 14, GYRO_XOUT_H_REG);
 8001d1c:	2243      	movs	r2, #67	@ 0x43
 8001d1e:	210e      	movs	r1, #14
 8001d20:	4895      	ldr	r0, [pc, #596]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d22:	f7ff ffad 	bl	8001c80 <mpu6050_ReadDataDMA>

			break;
 8001d26:	e183      	b.n	8002030 <mpu6050_Read+0x348>
		case 2:
			state=1;
 8001d28:	4b92      	ldr	r3, [pc, #584]	@ (8001f74 <mpu6050_Read+0x28c>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
			// Combinar bytes altos y bajos en variables de 16 bits con signo
			//Valores accelerometro
			ax = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); //primer byte  es la parte alta, segundo parte baja
 8001d2e:	4b92      	ldr	r3, [pc, #584]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b8f      	ldr	r3, [pc, #572]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b8d      	ldr	r3, [pc, #564]	@ (8001f7c <mpu6050_Read+0x294>)
 8001d46:	601a      	str	r2, [r3, #0]
			ay = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001d48:	4b8b      	ldr	r3, [pc, #556]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d4a:	789b      	ldrb	r3, [r3, #2]
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	4b89      	ldr	r3, [pc, #548]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d54:	78db      	ldrb	r3, [r3, #3]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b88      	ldr	r3, [pc, #544]	@ (8001f80 <mpu6050_Read+0x298>)
 8001d60:	601a      	str	r2, [r3, #0]
			az = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001d62:	4b85      	ldr	r3, [pc, #532]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	4b82      	ldr	r3, [pc, #520]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d6e:	795b      	ldrb	r3, [r3, #5]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b82      	ldr	r3, [pc, #520]	@ (8001f84 <mpu6050_Read+0x29c>)
 8001d7a:	601a      	str	r2, [r3, #0]
			//Medida temperatura
			//t = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
			//Valoresd el giroscopio
			gx = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d7e:	7a1b      	ldrb	r3, [r3, #8]
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	4b7c      	ldr	r3, [pc, #496]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d88:	7a5b      	ldrb	r3, [r3, #9]
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b7d      	ldr	r3, [pc, #500]	@ (8001f88 <mpu6050_Read+0x2a0>)
 8001d94:	601a      	str	r2, [r3, #0]
			gy = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001d96:	4b78      	ldr	r3, [pc, #480]	@ (8001f78 <mpu6050_Read+0x290>)
 8001d98:	7a9b      	ldrb	r3, [r3, #10]
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	4b75      	ldr	r3, [pc, #468]	@ (8001f78 <mpu6050_Read+0x290>)
 8001da2:	7adb      	ldrb	r3, [r3, #11]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b77      	ldr	r3, [pc, #476]	@ (8001f8c <mpu6050_Read+0x2a4>)
 8001dae:	601a      	str	r2, [r3, #0]
			gz = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001db0:	4b71      	ldr	r3, [pc, #452]	@ (8001f78 <mpu6050_Read+0x290>)
 8001db2:	7b1b      	ldrb	r3, [r3, #12]
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	4b6f      	ldr	r3, [pc, #444]	@ (8001f78 <mpu6050_Read+0x290>)
 8001dbc:	7b5b      	ldrb	r3, [r3, #13]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b72      	ldr	r3, [pc, #456]	@ (8001f90 <mpu6050_Read+0x2a8>)
 8001dc8:	601a      	str	r2, [r3, #0]


			if (abs(ax) <= OFFSET_AX)
 8001dca:	4b6c      	ldr	r3, [pc, #432]	@ (8001f7c <mpu6050_Read+0x294>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001dd2:	db08      	blt.n	8001de6 <mpu6050_Read+0xfe>
 8001dd4:	4b69      	ldr	r3, [pc, #420]	@ (8001f7c <mpu6050_Read+0x294>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001ddc:	dc03      	bgt.n	8001de6 <mpu6050_Read+0xfe>
				ax_real = 0;
 8001dde:	4b6d      	ldr	r3, [pc, #436]	@ (8001f94 <mpu6050_Read+0x2ac>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	801a      	strh	r2, [r3, #0]
 8001de4:	e025      	b.n	8001e32 <mpu6050_Read+0x14a>
			else
				ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001de6:	4b65      	ldr	r3, [pc, #404]	@ (8001f7c <mpu6050_Read+0x294>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df2:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001f98 <mpu6050_Read+0x2b0>
 8001df6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dfa:	ee16 0a90 	vmov	r0, s13
 8001dfe:	f7fe fba3 	bl	8000548 <__aeabi_f2d>
 8001e02:	a359      	add	r3, pc, #356	@ (adr r3, 8001f68 <mpu6050_Read+0x280>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe fbf6 	bl	80005f8 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b60      	ldr	r3, [pc, #384]	@ (8001f9c <mpu6050_Read+0x2b4>)
 8001e1a:	f7fe fbed 	bl	80005f8 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fdf9 	bl	8000a1c <__aeabi_d2iz>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	4b59      	ldr	r3, [pc, #356]	@ (8001f94 <mpu6050_Read+0x2ac>)
 8001e30:	801a      	strh	r2, [r3, #0]

			if (abs(ay) <= OFFSET_AY)
 8001e32:	4b53      	ldr	r3, [pc, #332]	@ (8001f80 <mpu6050_Read+0x298>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001e3a:	db08      	blt.n	8001e4e <mpu6050_Read+0x166>
 8001e3c:	4b50      	ldr	r3, [pc, #320]	@ (8001f80 <mpu6050_Read+0x298>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001e44:	dc03      	bgt.n	8001e4e <mpu6050_Read+0x166>
				ay_real = 0;
 8001e46:	4b56      	ldr	r3, [pc, #344]	@ (8001fa0 <mpu6050_Read+0x2b8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	e025      	b.n	8001e9a <mpu6050_Read+0x1b2>
			else
				ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f80 <mpu6050_Read+0x298>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001f98 <mpu6050_Read+0x2b0>
 8001e5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e62:	ee16 0a90 	vmov	r0, s13
 8001e66:	f7fe fb6f 	bl	8000548 <__aeabi_f2d>
 8001e6a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001f68 <mpu6050_Read+0x280>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f7fe fbc2 	bl	80005f8 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	4b46      	ldr	r3, [pc, #280]	@ (8001f9c <mpu6050_Read+0x2b4>)
 8001e82:	f7fe fbb9 	bl	80005f8 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fdc5 	bl	8000a1c <__aeabi_d2iz>
 8001e92:	4603      	mov	r3, r0
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	4b42      	ldr	r3, [pc, #264]	@ (8001fa0 <mpu6050_Read+0x2b8>)
 8001e98:	801a      	strh	r2, [r3, #0]

			if (abs(az) <= OFFSET_AZ)
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f84 <mpu6050_Read+0x29c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a41      	ldr	r2, [pc, #260]	@ (8001fa4 <mpu6050_Read+0x2bc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	db0a      	blt.n	8001eba <mpu6050_Read+0x1d2>
 8001ea4:	4b37      	ldr	r3, [pc, #220]	@ (8001f84 <mpu6050_Read+0x29c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001eac:	4293      	cmp	r3, r2
 8001eae:	dc04      	bgt.n	8001eba <mpu6050_Read+0x1d2>
				az_real = 9.81 * MULTIPLICADORFLOAT; // en reposo debería medir ~1g hacia Z
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa8 <mpu6050_Read+0x2c0>)
 8001eb2:	f240 32d5 	movw	r2, #981	@ 0x3d5
 8001eb6:	801a      	strh	r2, [r3, #0]
 8001eb8:	e025      	b.n	8001f06 <mpu6050_Read+0x21e>
			else
				az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001eba:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <mpu6050_Read+0x29c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001f98 <mpu6050_Read+0x2b0>
 8001eca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ece:	ee16 0a90 	vmov	r0, s13
 8001ed2:	f7fe fb39 	bl	8000548 <__aeabi_f2d>
 8001ed6:	a324      	add	r3, pc, #144	@ (adr r3, 8001f68 <mpu6050_Read+0x280>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fb8c 	bl	80005f8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <mpu6050_Read+0x2b4>)
 8001eee:	f7fe fb83 	bl	80005f8 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fd8f 	bl	8000a1c <__aeabi_d2iz>
 8001efe:	4603      	mov	r3, r0
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	4b29      	ldr	r3, [pc, #164]	@ (8001fa8 <mpu6050_Read+0x2c0>)
 8001f04:	801a      	strh	r2, [r3, #0]

			// Aplicar offset y escalar a grados/segundo (centésimas)
			if (abs(gx) <= OFFSET_GX)
 8001f06:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <mpu6050_Read+0x2a0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001f0e:	db08      	blt.n	8001f22 <mpu6050_Read+0x23a>
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <mpu6050_Read+0x2a0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001f18:	dc03      	bgt.n	8001f22 <mpu6050_Read+0x23a>
				gx_real = 0;
 8001f1a:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <mpu6050_Read+0x2c4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	801a      	strh	r2, [r3, #0]
 8001f20:	e014      	b.n	8001f4c <mpu6050_Read+0x264>
			else
				gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <mpu6050_Read+0x2a0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001fb0 <mpu6050_Read+0x2c8>
 8001f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f36:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001fb4 <mpu6050_Read+0x2cc>
 8001f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f42:	ee17 3a90 	vmov	r3, s15
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <mpu6050_Read+0x2c4>)
 8001f4a:	801a      	strh	r2, [r3, #0]

			if (abs(gy) <= OFFSET_GY)
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <mpu6050_Read+0x2a4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001f54:	db32      	blt.n	8001fbc <mpu6050_Read+0x2d4>
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <mpu6050_Read+0x2a4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001f5e:	dc2d      	bgt.n	8001fbc <mpu6050_Read+0x2d4>
				gy_real = 0;
 8001f60:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <mpu6050_Read+0x2d0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	e03e      	b.n	8001fe6 <mpu6050_Read+0x2fe>
 8001f68:	51eb851f 	.word	0x51eb851f
 8001f6c:	40239eb8 	.word	0x40239eb8
 8001f70:	200005f8 	.word	0x200005f8
 8001f74:	2000002b 	.word	0x2000002b
 8001f78:	20000628 	.word	0x20000628
 8001f7c:	20000610 	.word	0x20000610
 8001f80:	20000614 	.word	0x20000614
 8001f84:	20000618 	.word	0x20000618
 8001f88:	2000061c 	.word	0x2000061c
 8001f8c:	20000620 	.word	0x20000620
 8001f90:	20000624 	.word	0x20000624
 8001f94:	20000604 	.word	0x20000604
 8001f98:	46800000 	.word	0x46800000
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	20000606 	.word	0x20000606
 8001fa4:	ffffb1e0 	.word	0xffffb1e0
 8001fa8:	20000608 	.word	0x20000608
 8001fac:	2000060a 	.word	0x2000060a
 8001fb0:	43030000 	.word	0x43030000
 8001fb4:	42c80000 	.word	0x42c80000
 8001fb8:	2000060c 	.word	0x2000060c
			else
				gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <mpu6050_Read+0x350>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc8:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800203c <mpu6050_Read+0x354>
 8001fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002040 <mpu6050_Read+0x358>
 8001fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fdc:	ee17 3a90 	vmov	r3, s15
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	4b18      	ldr	r3, [pc, #96]	@ (8002044 <mpu6050_Read+0x35c>)
 8001fe4:	801a      	strh	r2, [r3, #0]

			if (abs(gz) <= OFFSET_GZ)
 8001fe6:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <mpu6050_Read+0x360>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001fee:	db08      	blt.n	8002002 <mpu6050_Read+0x31a>
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <mpu6050_Read+0x360>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001ff8:	dc03      	bgt.n	8002002 <mpu6050_Read+0x31a>
				gz_real = 0;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <mpu6050_Read+0x364>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	801a      	strh	r2, [r3, #0]
 8002000:	e014      	b.n	800202c <mpu6050_Read+0x344>
			else
				gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <mpu6050_Read+0x360>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800203c <mpu6050_Read+0x354>
 8002012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002016:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002040 <mpu6050_Read+0x358>
 800201a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002022:	ee17 3a90 	vmov	r3, s15
 8002026:	b21a      	sxth	r2, r3
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <mpu6050_Read+0x364>)
 800202a:	801a      	strh	r2, [r3, #0]

			return 1;
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <mpu6050_Read+0x34a>
			break;
		}
	}
	return 0;
 8002030:	2300      	movs	r3, #0
//    else
//        gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
//
//    return 1;

}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000620 	.word	0x20000620
 800203c:	43030000 	.word	0x43030000
 8002040:	42c80000 	.word	0x42c80000
 8002044:	2000060c 	.word	0x2000060c
 8002048:	20000624 	.word	0x20000624
 800204c:	2000060e 	.word	0x2000060e

08002050 <mpu6050_GetData>:

void mpu6050_GetData(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
    if (ax) *ax = ax_real;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <mpu6050_GetData+0x1e>
 8002064:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <mpu6050_GetData+0x7c>)
 8002066:	f9b3 2000 	ldrsh.w	r2, [r3]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	801a      	strh	r2, [r3, #0]
    if (ay) *ay = ay_real;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <mpu6050_GetData+0x2e>
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <mpu6050_GetData+0x80>)
 8002076:	f9b3 2000 	ldrsh.w	r2, [r3]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	801a      	strh	r2, [r3, #0]
    if (az) *az = az_real;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <mpu6050_GetData+0x3e>
 8002084:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <mpu6050_GetData+0x84>)
 8002086:	f9b3 2000 	ldrsh.w	r2, [r3]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	801a      	strh	r2, [r3, #0]

    if (gx) *gx = gx_real;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <mpu6050_GetData+0x4e>
 8002094:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <mpu6050_GetData+0x88>)
 8002096:	f9b3 2000 	ldrsh.w	r2, [r3]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	801a      	strh	r2, [r3, #0]
    if (gy) *gy = gy_real;
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <mpu6050_GetData+0x5e>
 80020a4:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <mpu6050_GetData+0x8c>)
 80020a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	801a      	strh	r2, [r3, #0]
    if (gz) *gz = gz_real;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <mpu6050_GetData+0x6e>
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <mpu6050_GetData+0x90>)
 80020b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	801a      	strh	r2, [r3, #0]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000604 	.word	0x20000604
 80020d0:	20000606 	.word	0x20000606
 80020d4:	20000608 	.word	0x20000608
 80020d8:	2000060a 	.word	0x2000060a
 80020dc:	2000060c 	.word	0x2000060c
 80020e0:	2000060e 	.word	0x2000060e

080020e4 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <ssd1306_WriteCommand+0x20>)
 8002100:	681c      	ldr	r4, [r3, #0]
 8002102:	1df9      	adds	r1, r7, #7
 8002104:	2300      	movs	r3, #0
 8002106:	2201      	movs	r2, #1
 8002108:	2078      	movs	r0, #120	@ 0x78
 800210a:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	2000063c 	.word	0x2000063c

08002118 <ssd1306_WriteCommandDMA>:

void ssd1306_WriteCommandDMA(uint8_t byte) {
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8002122:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <ssd1306_WriteCommandDMA+0x20>)
 8002124:	681c      	ldr	r4, [r3, #0]
 8002126:	1df9      	adds	r1, r7, #7
 8002128:	2300      	movs	r3, #0
 800212a:	2201      	movs	r2, #1
 800212c:	2078      	movs	r0, #120	@ 0x78
 800212e:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bd90      	pop	{r4, r7, pc}
 8002138:	20000640 	.word	0x20000640

0800213c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <ssd1306_WriteData+0x24>)
 8002148:	681c      	ldr	r4, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	2340      	movs	r3, #64	@ 0x40
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	2078      	movs	r0, #120	@ 0x78
 8002154:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	bf00      	nop
 8002160:	2000063c 	.word	0x2000063c

08002164 <ssd1306_WriteDataDMA>:

void ssd1306_WriteDataDMA(uint8_t* buffer, size_t buff_size) {
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	memWriteDMA(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <ssd1306_WriteDataDMA+0x24>)
 8002170:	681c      	ldr	r4, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	2340      	movs	r3, #64	@ 0x40
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	2078      	movs	r0, #120	@ 0x78
 800217c:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bd90      	pop	{r4, r7, pc}
 8002186:	bf00      	nop
 8002188:	20000640 	.word	0x20000640

0800218c <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8002194:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <ssd1306_Attach_MemWriteDMA+0x1c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000640 	.word	0x20000640

080021ac <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 80021b4:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <ssd1306_Attach_MemWrite+0x1c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000063c 	.word	0x2000063c

080021cc <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 80021d4:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000638 	.word	0x20000638

080021ec <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80021f0:	f7ff ff78 	bl	80020e4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80021f4:	2064      	movs	r0, #100	@ 0x64
 80021f6:	f001 f823 	bl	8003240 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 fa86 	bl	800270c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002200:	2020      	movs	r0, #32
 8002202:	f7ff ff77 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff ff74 	bl	80020f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800220c:	20b0      	movs	r0, #176	@ 0xb0
 800220e:	f7ff ff71 	bl	80020f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002212:	20c8      	movs	r0, #200	@ 0xc8
 8002214:	f7ff ff6e 	bl	80020f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff ff6b 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800221e:	2010      	movs	r0, #16
 8002220:	f7ff ff68 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002224:	2040      	movs	r0, #64	@ 0x40
 8002226:	f7ff ff65 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800222a:	20ff      	movs	r0, #255	@ 0xff
 800222c:	f000 fa5a 	bl	80026e4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002230:	20a1      	movs	r0, #161	@ 0xa1
 8002232:	f7ff ff5f 	bl	80020f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002236:	20a6      	movs	r0, #166	@ 0xa6
 8002238:	f7ff ff5c 	bl	80020f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800223c:	20a8      	movs	r0, #168	@ 0xa8
 800223e:	f7ff ff59 	bl	80020f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002242:	203f      	movs	r0, #63	@ 0x3f
 8002244:	f7ff ff56 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002248:	20a4      	movs	r0, #164	@ 0xa4
 800224a:	f7ff ff53 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800224e:	20d3      	movs	r0, #211	@ 0xd3
 8002250:	f7ff ff50 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002254:	2000      	movs	r0, #0
 8002256:	f7ff ff4d 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800225a:	20d5      	movs	r0, #213	@ 0xd5
 800225c:	f7ff ff4a 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002260:	20f0      	movs	r0, #240	@ 0xf0
 8002262:	f7ff ff47 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002266:	20d9      	movs	r0, #217	@ 0xd9
 8002268:	f7ff ff44 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800226c:	2022      	movs	r0, #34	@ 0x22
 800226e:	f7ff ff41 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002272:	20da      	movs	r0, #218	@ 0xda
 8002274:	f7ff ff3e 	bl	80020f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002278:	2012      	movs	r0, #18
 800227a:	f7ff ff3b 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800227e:	20db      	movs	r0, #219	@ 0xdb
 8002280:	f7ff ff38 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002284:	2020      	movs	r0, #32
 8002286:	f7ff ff35 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800228a:	208d      	movs	r0, #141	@ 0x8d
 800228c:	f7ff ff32 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002290:	2014      	movs	r0, #20
 8002292:	f7ff ff2f 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002296:	2001      	movs	r0, #1
 8002298:	f000 fa38 	bl	800270c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800229c:	2000      	movs	r0, #0
 800229e:	f000 f80f 	bl	80022c0 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80022a2:	f000 f825 	bl	80022f0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80022a6:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <ssd1306_Init+0xd0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80022ac:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <ssd1306_Init+0xd0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80022b2:	4b02      	ldr	r3, [pc, #8]	@ (80022bc <ssd1306_Init+0xd0>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	711a      	strb	r2, [r3, #4]
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000a44 	.word	0x20000a44

080022c0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <ssd1306_Fill+0x14>
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <ssd1306_Fill+0x16>
 80022d4:	23ff      	movs	r3, #255	@ 0xff
 80022d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022da:	4619      	mov	r1, r3
 80022dc:	4803      	ldr	r0, [pc, #12]	@ (80022ec <ssd1306_Fill+0x2c>)
 80022de:	f00b fea9 	bl	800e034 <memset>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000644 	.word	0x20000644

080022f0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	71fb      	strb	r3, [r7, #7]
 80022fa:	e016      	b.n	800232a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	3b50      	subs	r3, #80	@ 0x50
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fef6 	bl	80020f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002308:	2000      	movs	r0, #0
 800230a:	f7ff fef3 	bl	80020f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800230e:	2010      	movs	r0, #16
 8002310:	f7ff fef0 	bl	80020f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	01db      	lsls	r3, r3, #7
 8002318:	4a08      	ldr	r2, [pc, #32]	@ (800233c <ssd1306_UpdateScreen+0x4c>)
 800231a:	4413      	add	r3, r2
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff0c 	bl	800213c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	3301      	adds	r3, #1
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b07      	cmp	r3, #7
 800232e:	d9e5      	bls.n	80022fc <ssd1306_UpdateScreen+0xc>
    }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000644 	.word	0x20000644

08002340 <ssd1306_UpdateScreenDMA>:


/* Write the screenbuffer with changed to the screen */
char ssd1306_UpdateScreenDMA(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction

	if (*SSD1306_TxCplt || state == 1) {
 8002344:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <ssd1306_UpdateScreenDMA+0xb0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <ssd1306_UpdateScreenDMA+0x16>
 800234e:	4b29      	ldr	r3, [pc, #164]	@ (80023f4 <ssd1306_UpdateScreenDMA+0xb4>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d149      	bne.n	80023ea <ssd1306_UpdateScreenDMA+0xaa>
		*SSD1306_TxCplt = 0;  // Reset completion flag
 8002356:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <ssd1306_UpdateScreenDMA+0xb0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]

		switch (state) {
 800235e:	4b25      	ldr	r3, [pc, #148]	@ (80023f4 <ssd1306_UpdateScreenDMA+0xb4>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3b01      	subs	r3, #1
 8002364:	2b03      	cmp	r3, #3
 8002366:	d840      	bhi.n	80023ea <ssd1306_UpdateScreenDMA+0xaa>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <ssd1306_UpdateScreenDMA+0x30>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002381 	.word	0x08002381
 8002374:	08002397 	.word	0x08002397
 8002378:	080023a5 	.word	0x080023a5
 800237c:	080023b3 	.word	0x080023b3
		case 1:  // Set page address
			ssd1306_WriteCommandDMA(0xB0 + current_page);
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <ssd1306_UpdateScreenDMA+0xb8>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3b50      	subs	r3, #80	@ 0x50
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fec5 	bl	8002118 <ssd1306_WriteCommandDMA>
			state = 2;
 800238e:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <ssd1306_UpdateScreenDMA+0xb4>)
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
			break;
 8002394:	e029      	b.n	80023ea <ssd1306_UpdateScreenDMA+0xaa>
		case 2:  // Set column address low nibble
			ssd1306_WriteCommandDMA(0x00 + SSD1306_X_OFFSET_LOWER);
 8002396:	2000      	movs	r0, #0
 8002398:	f7ff febe 	bl	8002118 <ssd1306_WriteCommandDMA>
			state = 3;
 800239c:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <ssd1306_UpdateScreenDMA+0xb4>)
 800239e:	2203      	movs	r2, #3
 80023a0:	701a      	strb	r2, [r3, #0]
			break;
 80023a2:	e022      	b.n	80023ea <ssd1306_UpdateScreenDMA+0xaa>
		case 3:  // Set column address high nibble
			ssd1306_WriteCommandDMA(0x10 + SSD1306_X_OFFSET_UPPER);
 80023a4:	2010      	movs	r0, #16
 80023a6:	f7ff feb7 	bl	8002118 <ssd1306_WriteCommandDMA>
			state = 4;
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <ssd1306_UpdateScreenDMA+0xb4>)
 80023ac:	2204      	movs	r2, #4
 80023ae:	701a      	strb	r2, [r3, #0]
			break;
 80023b0:	e01b      	b.n	80023ea <ssd1306_UpdateScreenDMA+0xaa>
		case 4:  // Write page data
			ssd1306_WriteDataDMA(&SSD1306_Buffer[SSD1306_WIDTH*current_page],SSD1306_WIDTH);
 80023b2:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <ssd1306_UpdateScreenDMA+0xb8>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	01db      	lsls	r3, r3, #7
 80023b8:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <ssd1306_UpdateScreenDMA+0xbc>)
 80023ba:	4413      	add	r3, r2
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fed0 	bl	8002164 <ssd1306_WriteDataDMA>
			current_page++;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <ssd1306_UpdateScreenDMA+0xb8>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <ssd1306_UpdateScreenDMA+0xb8>)
 80023ce:	701a      	strb	r2, [r3, #0]

			if (current_page > 7){//SSD1306_HEIGHT/8) {
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <ssd1306_UpdateScreenDMA+0xb8>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b07      	cmp	r3, #7
 80023d6:	d904      	bls.n	80023e2 <ssd1306_UpdateScreenDMA+0xa2>
				current_page = 0;
 80023d8:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <ssd1306_UpdateScreenDMA+0xb8>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
				return 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	e004      	b.n	80023ec <ssd1306_UpdateScreenDMA+0xac>
			}
			state = 1;  // Start over with next page
 80023e2:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <ssd1306_UpdateScreenDMA+0xb4>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
			break;
 80023e8:	bf00      	nop
		}
	}
	return 0;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000638 	.word	0x20000638
 80023f4:	2000002c 	.word	0x2000002c
 80023f8:	20000a4a 	.word	0x20000a4a
 80023fc:	20000644 	.word	0x20000644

08002400 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	460b      	mov	r3, r1
 800240c:	71bb      	strb	r3, [r7, #6]
 800240e:	4613      	mov	r3, r2
 8002410:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db3d      	blt.n	8002496 <ssd1306_DrawPixel+0x96>
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	2b3f      	cmp	r3, #63	@ 0x3f
 800241e:	d83a      	bhi.n	8002496 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002420:	797b      	ldrb	r3, [r7, #5]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d11a      	bne.n	800245c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002426:	79fa      	ldrb	r2, [r7, #7]
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	4603      	mov	r3, r0
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	4413      	add	r3, r2
 8002434:	4a1b      	ldr	r2, [pc, #108]	@ (80024a4 <ssd1306_DrawPixel+0xa4>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	b25a      	sxtb	r2, r3
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	b25b      	sxtb	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b259      	sxtb	r1, r3
 800244c:	79fa      	ldrb	r2, [r7, #7]
 800244e:	4603      	mov	r3, r0
 8002450:	01db      	lsls	r3, r3, #7
 8002452:	4413      	add	r3, r2
 8002454:	b2c9      	uxtb	r1, r1
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <ssd1306_DrawPixel+0xa4>)
 8002458:	54d1      	strb	r1, [r2, r3]
 800245a:	e01d      	b.n	8002498 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	b2d8      	uxtb	r0, r3
 8002464:	4603      	mov	r3, r0
 8002466:	01db      	lsls	r3, r3, #7
 8002468:	4413      	add	r3, r2
 800246a:	4a0e      	ldr	r2, [pc, #56]	@ (80024a4 <ssd1306_DrawPixel+0xa4>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	b25a      	sxtb	r2, r3
 8002470:	79bb      	ldrb	r3, [r7, #6]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	b25b      	sxtb	r3, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	b25b      	sxtb	r3, r3
 8002482:	4013      	ands	r3, r2
 8002484:	b259      	sxtb	r1, r3
 8002486:	79fa      	ldrb	r2, [r7, #7]
 8002488:	4603      	mov	r3, r0
 800248a:	01db      	lsls	r3, r3, #7
 800248c:	4413      	add	r3, r2
 800248e:	b2c9      	uxtb	r1, r1
 8002490:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <ssd1306_DrawPixel+0xa4>)
 8002492:	54d1      	strb	r1, [r2, r3]
 8002494:	e000      	b.n	8002498 <ssd1306_DrawPixel+0x98>
        return;
 8002496:	bf00      	nop
    }
}
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000644 	.word	0x20000644

080024a8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4604      	mov	r4, r0
 80024b0:	4638      	mov	r0, r7
 80024b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80024b6:	4623      	mov	r3, r4
 80024b8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b1f      	cmp	r3, #31
 80024be:	d902      	bls.n	80024c6 <ssd1306_WriteChar+0x1e>
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80024c4:	d901      	bls.n	80024ca <ssd1306_WriteChar+0x22>
        return 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e079      	b.n	80025be <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <ssd1306_WriteChar+0x34>
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3b20      	subs	r3, #32
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	e000      	b.n	80024de <ssd1306_WriteChar+0x36>
 80024dc:	783b      	ldrb	r3, [r7, #0]
 80024de:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80024e0:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <ssd1306_WriteChar+0x120>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
 80024e8:	4413      	add	r3, r2
 80024ea:	2b80      	cmp	r3, #128	@ 0x80
 80024ec:	dc06      	bgt.n	80024fc <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <ssd1306_WriteChar+0x120>)
 80024f0:	885b      	ldrh	r3, [r3, #2]
 80024f2:	461a      	mov	r2, r3
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80024f8:	2b40      	cmp	r3, #64	@ 0x40
 80024fa:	dd01      	ble.n	8002500 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e05e      	b.n	80025be <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	e04d      	b.n	80025a2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	3b20      	subs	r3, #32
 800250c:	7879      	ldrb	r1, [r7, #1]
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4619      	mov	r1, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	440b      	add	r3, r1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e036      	b.n	8002594 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d013      	beq.n	800255e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002536:	4b24      	ldr	r3, [pc, #144]	@ (80025c8 <ssd1306_WriteChar+0x120>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4413      	add	r3, r2
 8002542:	b2d8      	uxtb	r0, r3
 8002544:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <ssd1306_WriteChar+0x120>)
 8002546:	885b      	ldrh	r3, [r3, #2]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4413      	add	r3, r2
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002556:	4619      	mov	r1, r3
 8002558:	f7ff ff52 	bl	8002400 <ssd1306_DrawPixel>
 800255c:	e017      	b.n	800258e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800255e:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <ssd1306_WriteChar+0x120>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4413      	add	r3, r2
 800256a:	b2d8      	uxtb	r0, r3
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <ssd1306_WriteChar+0x120>)
 800256e:	885b      	ldrh	r3, [r3, #2]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4413      	add	r3, r2
 8002578:	b2d9      	uxtb	r1, r3
 800257a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf0c      	ite	eq
 8002582:	2301      	moveq	r3, #1
 8002584:	2300      	movne	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	f7ff ff39 	bl	8002400 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	3301      	adds	r3, #1
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3c4      	bcc.n	8002526 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	3301      	adds	r3, #1
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	787b      	ldrb	r3, [r7, #1]
 80025a4:	461a      	mov	r2, r3
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d3ac      	bcc.n	8002506 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <ssd1306_WriteChar+0x120>)
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <ssd1306_WriteChar+0x120>)
 80025ba:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	@ 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000a44 	.word	0x20000a44

080025cc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	4638      	mov	r0, r7
 80025d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80025da:	e013      	b.n	8002604 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	7818      	ldrb	r0, [r3, #0]
 80025e0:	7e3b      	ldrb	r3, [r7, #24]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	463b      	mov	r3, r7
 80025e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e8:	f7ff ff5e 	bl	80024a8 <ssd1306_WriteChar>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d002      	beq.n	80025fe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	e008      	b.n	8002610 <ssd1306_WriteString+0x44>
        }
        str++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	3301      	adds	r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e7      	bne.n	80025dc <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	781b      	ldrb	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	460a      	mov	r2, r1
 8002622:	71fb      	strb	r3, [r7, #7]
 8002624:	4613      	mov	r3, r2
 8002626:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	b29a      	uxth	r2, r3
 800262c:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <ssd1306_SetCursor+0x2c>)
 800262e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <ssd1306_SetCursor+0x2c>)
 8002636:	805a      	strh	r2, [r3, #2]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	20000a44 	.word	0x20000a44

08002648 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4623      	mov	r3, r4
 8002658:	71fb      	strb	r3, [r7, #7]
 800265a:	4603      	mov	r3, r0
 800265c:	71bb      	strb	r3, [r7, #6]
 800265e:	460b      	mov	r3, r1
 8002660:	717b      	strb	r3, [r7, #5]
 8002662:	4613      	mov	r3, r2
 8002664:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002666:	79fa      	ldrb	r2, [r7, #7]
 8002668:	797b      	ldrb	r3, [r7, #5]
 800266a:	4293      	cmp	r3, r2
 800266c:	bf28      	it	cs
 800266e:	4613      	movcs	r3, r2
 8002670:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002672:	797a      	ldrb	r2, [r7, #5]
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4293      	cmp	r3, r2
 8002678:	bf38      	it	cc
 800267a:	4613      	movcc	r3, r2
 800267c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800267e:	79ba      	ldrb	r2, [r7, #6]
 8002680:	793b      	ldrb	r3, [r7, #4]
 8002682:	4293      	cmp	r3, r2
 8002684:	bf28      	it	cs
 8002686:	4613      	movcs	r3, r2
 8002688:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800268a:	793a      	ldrb	r2, [r7, #4]
 800268c:	79bb      	ldrb	r3, [r7, #6]
 800268e:	4293      	cmp	r3, r2
 8002690:	bf38      	it	cc
 8002692:	4613      	movcc	r3, r2
 8002694:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002696:	7afb      	ldrb	r3, [r7, #11]
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e017      	b.n	80026cc <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800269c:	7b7b      	ldrb	r3, [r7, #13]
 800269e:	73bb      	strb	r3, [r7, #14]
 80026a0:	e009      	b.n	80026b6 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80026a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026a6:	7bf9      	ldrb	r1, [r7, #15]
 80026a8:	7bbb      	ldrb	r3, [r7, #14]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fea8 	bl	8002400 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80026b0:	7bbb      	ldrb	r3, [r7, #14]
 80026b2:	3301      	adds	r3, #1
 80026b4:	73bb      	strb	r3, [r7, #14]
 80026b6:	7bba      	ldrb	r2, [r7, #14]
 80026b8:	7b3b      	ldrb	r3, [r7, #12]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d803      	bhi.n	80026c6 <ssd1306_FillRectangle+0x7e>
 80026be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	daed      	bge.n	80026a2 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	3301      	adds	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	7abb      	ldrb	r3, [r7, #10]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d803      	bhi.n	80026dc <ssd1306_FillRectangle+0x94>
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80026d8:	d9e0      	bls.n	800269c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
}
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}

080026e4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80026ee:	2381      	movs	r3, #129	@ 0x81
 80026f0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fcfd 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fcf9 	bl	80020f4 <ssd1306_WriteCommand>
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800271c:	23af      	movs	r3, #175	@ 0xaf
 800271e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <ssd1306_SetDisplayOn+0x38>)
 8002722:	2201      	movs	r2, #1
 8002724:	715a      	strb	r2, [r3, #5]
 8002726:	e004      	b.n	8002732 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002728:	23ae      	movs	r3, #174	@ 0xae
 800272a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <ssd1306_SetDisplayOn+0x38>)
 800272e:	2200      	movs	r2, #0
 8002730:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fcdd 	bl	80020f4 <ssd1306_WriteCommand>
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000a44 	.word	0x20000a44

08002748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <HAL_MspInit+0x4c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	4a0f      	ldr	r2, [pc, #60]	@ (8002794 <HAL_MspInit+0x4c>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800275c:	6453      	str	r3, [r2, #68]	@ 0x44
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_MspInit+0x4c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_MspInit+0x4c>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <HAL_MspInit+0x4c>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_MspInit+0x4c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a32      	ldr	r2, [pc, #200]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d15e      	bne.n	8002878 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	4b31      	ldr	r3, [pc, #196]	@ (8002884 <HAL_ADC_MspInit+0xec>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	4a30      	ldr	r2, [pc, #192]	@ (8002884 <HAL_ADC_MspInit+0xec>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002884 <HAL_ADC_MspInit+0xec>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <HAL_ADC_MspInit+0xec>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	4a29      	ldr	r2, [pc, #164]	@ (8002884 <HAL_ADC_MspInit+0xec>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e6:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <HAL_ADC_MspInit+0xec>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027f2:	23ff      	movs	r3, #255	@ 0xff
 80027f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f6:	2303      	movs	r3, #3
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	4820      	ldr	r0, [pc, #128]	@ (8002888 <HAL_ADC_MspInit+0xf0>)
 8002806:	f001 ff1d 	bl	8004644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 800280c:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <HAL_ADC_MspInit+0xf8>)
 800280e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002810:	4b1e      	ldr	r3, [pc, #120]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 8002824:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002828:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800282a:	4b18      	ldr	r3, [pc, #96]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 800282c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002830:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002832:	4b16      	ldr	r3, [pc, #88]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 8002834:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002838:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800283a:	4b14      	ldr	r3, [pc, #80]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 800283c:	2200      	movs	r2, #0
 800283e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800284c:	480f      	ldr	r0, [pc, #60]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 800284e:	f001 fb4d 	bl	8003eec <HAL_DMA_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002858:	f7ff f9c8 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0b      	ldr	r2, [pc, #44]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 8002860:	639a      	str	r2, [r3, #56]	@ 0x38
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <HAL_ADC_MspInit+0xf4>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	2100      	movs	r1, #0
 800286c:	2012      	movs	r0, #18
 800286e:	f001 fb06 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002872:	2012      	movs	r0, #18
 8002874:	f001 fb1f 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002878:	bf00      	nop
 800287a:	3728      	adds	r7, #40	@ 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40012000 	.word	0x40012000
 8002884:	40023800 	.word	0x40023800
 8002888:	40020000 	.word	0x40020000
 800288c:	200001e8 	.word	0x200001e8
 8002890:	40026410 	.word	0x40026410

08002894 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	@ 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a4f      	ldr	r2, [pc, #316]	@ (80029f0 <HAL_I2C_MspInit+0x15c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	f040 8097 	bne.w	80029e6 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	4b4d      	ldr	r3, [pc, #308]	@ (80029f4 <HAL_I2C_MspInit+0x160>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c0:	4a4c      	ldr	r2, [pc, #304]	@ (80029f4 <HAL_I2C_MspInit+0x160>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c8:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <HAL_I2C_MspInit+0x160>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028d4:	23c0      	movs	r3, #192	@ 0xc0
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d8:	2312      	movs	r3, #18
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028e4:	2304      	movs	r3, #4
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4842      	ldr	r0, [pc, #264]	@ (80029f8 <HAL_I2C_MspInit+0x164>)
 80028f0:	f001 fea8 	bl	8004644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <HAL_I2C_MspInit+0x160>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	4a3d      	ldr	r2, [pc, #244]	@ (80029f4 <HAL_I2C_MspInit+0x160>)
 80028fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002902:	6413      	str	r3, [r2, #64]	@ 0x40
 8002904:	4b3b      	ldr	r3, [pc, #236]	@ (80029f4 <HAL_I2C_MspInit+0x160>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002910:	4b3a      	ldr	r3, [pc, #232]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002912:	4a3b      	ldr	r2, [pc, #236]	@ (8002a00 <HAL_I2C_MspInit+0x16c>)
 8002914:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002916:	4b39      	ldr	r3, [pc, #228]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002918:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800291c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800291e:	4b37      	ldr	r3, [pc, #220]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002924:	4b35      	ldr	r3, [pc, #212]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 800292c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002930:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002932:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002938:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002940:	2200      	movs	r2, #0
 8002942:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002944:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800294a:	4b2c      	ldr	r3, [pc, #176]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002950:	482a      	ldr	r0, [pc, #168]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002952:	f001 facb 	bl	8003eec <HAL_DMA_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800295c:	f7ff f946 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a26      	ldr	r2, [pc, #152]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002964:	639a      	str	r2, [r3, #56]	@ 0x38
 8002966:	4a25      	ldr	r2, [pc, #148]	@ (80029fc <HAL_I2C_MspInit+0x168>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 800296e:	4a26      	ldr	r2, [pc, #152]	@ (8002a08 <HAL_I2C_MspInit+0x174>)
 8002970:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 8002974:	2200      	movs	r2, #0
 8002976:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002978:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 800297a:	2240      	movs	r2, #64	@ 0x40
 800297c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297e:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002984:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 8002986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800298a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 800298e:	2200      	movs	r2, #0
 8002990:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002992:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002998:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a4:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80029aa:	4816      	ldr	r0, [pc, #88]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 80029ac:	f001 fa9e 	bl	8003eec <HAL_DMA_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80029b6:	f7ff f919 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a11      	ldr	r2, [pc, #68]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 80029be:	635a      	str	r2, [r3, #52]	@ 0x34
 80029c0:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_I2C_MspInit+0x170>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	201f      	movs	r0, #31
 80029cc:	f001 fa57 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80029d0:	201f      	movs	r0, #31
 80029d2:	f001 fa70 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	2020      	movs	r0, #32
 80029dc:	f001 fa4f 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80029e0:	2020      	movs	r0, #32
 80029e2:	f001 fa68 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029e6:	bf00      	nop
 80029e8:	3728      	adds	r7, #40	@ 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40005400 	.word	0x40005400
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020400 	.word	0x40020400
 80029fc:	2000029c 	.word	0x2000029c
 8002a00:	40026010 	.word	0x40026010
 8002a04:	200002fc 	.word	0x200002fc
 8002a08:	40026028 	.word	0x40026028

08002a0c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	@ (8002a84 <HAL_TIM_Base_MspInit+0x78>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d12d      	bne.n	8002a7a <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <HAL_TIM_Base_MspInit+0x7c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <HAL_TIM_Base_MspInit+0x7c>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2e:	4b16      	ldr	r3, [pc, #88]	@ (8002a88 <HAL_TIM_Base_MspInit+0x7c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2018      	movs	r0, #24
 8002a40:	f001 fa1d 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a44:	2018      	movs	r0, #24
 8002a46:	f001 fa36 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2019      	movs	r0, #25
 8002a50:	f001 fa15 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a54:	2019      	movs	r0, #25
 8002a56:	f001 fa2e 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	201a      	movs	r0, #26
 8002a60:	f001 fa0d 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a64:	201a      	movs	r0, #26
 8002a66:	f001 fa26 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	201b      	movs	r0, #27
 8002a70:	f001 fa05 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a74:	201b      	movs	r0, #27
 8002a76:	f001 fa1e 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40023800 	.word	0x40023800

08002a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <NMI_Handler+0x4>

08002a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <HardFault_Handler+0x4>

08002a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <MemManage_Handler+0x4>

08002aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <BusFault_Handler+0x4>

08002aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <UsageFault_Handler+0x4>

08002ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae2:	f000 fb8d 	bl	8003200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002af0:	4802      	ldr	r0, [pc, #8]	@ (8002afc <DMA1_Stream0_IRQHandler+0x10>)
 8002af2:	f001 fb23 	bl	800413c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000029c 	.word	0x2000029c

08002b00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002b04:	4802      	ldr	r0, [pc, #8]	@ (8002b10 <DMA1_Stream1_IRQHandler+0x10>)
 8002b06:	f001 fb19 	bl	800413c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200002fc 	.word	0x200002fc

08002b14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b18:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <ADC_IRQHandler+0x10>)
 8002b1a:	f000 fbf8 	bl	800330e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200001a0 	.word	0x200001a0

08002b28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b2c:	4802      	ldr	r0, [pc, #8]	@ (8002b38 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002b2e:	f006 fd21 	bl	8009574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2000035c 	.word	0x2000035c

08002b3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b40:	4802      	ldr	r0, [pc, #8]	@ (8002b4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b42:	f006 fd17 	bl	8009574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000035c 	.word	0x2000035c

08002b50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b54:	4802      	ldr	r0, [pc, #8]	@ (8002b60 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002b56:	f006 fd0d 	bl	8009574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	2000035c 	.word	0x2000035c

08002b64 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b68:	4802      	ldr	r0, [pc, #8]	@ (8002b74 <TIM1_CC_IRQHandler+0x10>)
 8002b6a:	f006 fd03 	bl	8009574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000035c 	.word	0x2000035c

08002b78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b7c:	4802      	ldr	r0, [pc, #8]	@ (8002b88 <I2C1_EV_IRQHandler+0x10>)
 8002b7e:	f002 fc5b 	bl	8005438 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000248 	.word	0x20000248

08002b8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b90:	4802      	ldr	r0, [pc, #8]	@ (8002b9c <I2C1_ER_IRQHandler+0x10>)
 8002b92:	f002 fdc2 	bl	800571a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000248 	.word	0x20000248

08002ba0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ba4:	4802      	ldr	r0, [pc, #8]	@ (8002bb0 <DMA2_Stream0_IRQHandler+0x10>)
 8002ba6:	f001 fac9 	bl	800413c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200001e8 	.word	0x200001e8

08002bb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bb8:	4802      	ldr	r0, [pc, #8]	@ (8002bc4 <OTG_FS_IRQHandler+0x10>)
 8002bba:	f004 fed7 	bl	800796c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000133c 	.word	0x2000133c

08002bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	@ (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf8:	f00b fa24 	bl	800e044 <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20020000 	.word	0x20020000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	20000a4c 	.word	0x20000a4c
 8002c30:	20001b88 	.word	0x20001b88

08002c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <SystemInit+0x20>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <SystemInit+0x20>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
 8002c64:	4613      	mov	r3, r2
 8002c66:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8002c68:	78bb      	ldrb	r3, [r7, #2]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	795a      	ldrb	r2, [r3, #5]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	795b      	ldrb	r3, [r3, #5]
 8002c84:	1c59      	adds	r1, r3, #1
 8002c86:	b2c8      	uxtb	r0, r1
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	7148      	strb	r0, [r1, #5]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	2255      	movs	r2, #85	@ 0x55
 8002c90:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	795a      	ldrb	r2, [r3, #5]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	799b      	ldrb	r3, [r3, #6]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	795b      	ldrb	r3, [r3, #5]
 8002caa:	1c59      	adds	r1, r3, #1
 8002cac:	b2c8      	uxtb	r0, r1
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	7148      	strb	r0, [r1, #5]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	224e      	movs	r2, #78	@ 0x4e
 8002cb6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	795a      	ldrb	r2, [r3, #5]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	799b      	ldrb	r3, [r3, #6]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	795b      	ldrb	r3, [r3, #5]
 8002cd0:	1c59      	adds	r1, r3, #1
 8002cd2:	b2c8      	uxtb	r0, r1
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	7148      	strb	r0, [r1, #5]
 8002cd8:	4413      	add	r3, r2
 8002cda:	2245      	movs	r2, #69	@ 0x45
 8002cdc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	795a      	ldrb	r2, [r3, #5]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	799b      	ldrb	r3, [r3, #6]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	795b      	ldrb	r3, [r3, #5]
 8002cf6:	1c59      	adds	r1, r3, #1
 8002cf8:	b2c8      	uxtb	r0, r1
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	7148      	strb	r0, [r1, #5]
 8002cfe:	4413      	add	r3, r2
 8002d00:	2252      	movs	r2, #82	@ 0x52
 8002d02:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	795a      	ldrb	r2, [r3, #5]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	799b      	ldrb	r3, [r3, #6]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	795b      	ldrb	r3, [r3, #5]
 8002d1c:	1c59      	adds	r1, r3, #1
 8002d1e:	b2c8      	uxtb	r0, r1
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	7148      	strb	r0, [r1, #5]
 8002d24:	4413      	add	r3, r2
 8002d26:	78ba      	ldrb	r2, [r7, #2]
 8002d28:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	795a      	ldrb	r2, [r3, #5]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	799b      	ldrb	r3, [r3, #6]
 8002d32:	4013      	ands	r3, r2
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	795b      	ldrb	r3, [r3, #5]
 8002d42:	1c59      	adds	r1, r3, #1
 8002d44:	b2c8      	uxtb	r0, r1
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	7148      	strb	r0, [r1, #5]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	223a      	movs	r2, #58	@ 0x3a
 8002d4e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	795a      	ldrb	r2, [r3, #5]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	799b      	ldrb	r3, [r3, #6]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	795b      	ldrb	r3, [r3, #5]
 8002d68:	1c59      	adds	r1, r3, #1
 8002d6a:	b2c8      	uxtb	r0, r1
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	7148      	strb	r0, [r1, #5]
 8002d70:	4413      	add	r3, r2
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	795a      	ldrb	r2, [r3, #5]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	799b      	ldrb	r3, [r3, #6]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2207      	movs	r2, #7
 8002d8a:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7a5a      	ldrb	r2, [r3, #9]
 8002d90:	78b9      	ldrb	r1, [r7, #2]
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	404b      	eors	r3, r1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4053      	eors	r3, r2
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7a5b      	ldrb	r3, [r3, #9]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	79db      	ldrb	r3, [r3, #7]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	795b      	ldrb	r3, [r3, #5]
 8002dd6:	1c59      	adds	r1, r3, #1
 8002dd8:	b2c8      	uxtb	r0, r1
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	7148      	strb	r0, [r1, #5]
 8002dde:	4413      	add	r3, r2
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	795a      	ldrb	r2, [r3, #5]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	799b      	ldrb	r3, [r3, #6]
 8002dec:	4013      	ands	r3, r2
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7a5a      	ldrb	r2, [r3, #9]
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	4053      	eors	r3, r2
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7a5b      	ldrb	r3, [r3, #9]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 8002e12:	b490      	push	{r4, r7}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8002e20:	e02c      	b.n	8002e7c <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	79db      	ldrb	r3, [r3, #7]
 8002e26:	3301      	adds	r3, #1
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	441a      	add	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	795b      	ldrb	r3, [r3, #5]
 8002e40:	1c58      	adds	r0, r3, #1
 8002e42:	b2c4      	uxtb	r4, r0
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	7144      	strb	r4, [r0, #5]
 8002e48:	440b      	add	r3, r1
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	795a      	ldrb	r2, [r3, #5]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	799b      	ldrb	r3, [r3, #6]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	73fa      	strb	r2, [r7, #15]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7a5b      	ldrb	r3, [r3, #9]
 8002e74:	4053      	eors	r3, r2
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ca      	bne.n	8002e22 <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7a5b      	ldrb	r3, [r3, #9]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc90      	pop	{r4, r7}
 8002e98:	4770      	bx	lr
	...

08002e9c <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	795b      	ldrb	r3, [r3, #5]
 8002eac:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8002eae:	e0e4      	b.n	800307a <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8002eb0:	4b78      	ldr	r3, [pc, #480]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b07      	cmp	r3, #7
 8002eb6:	f200 80c9 	bhi.w	800304c <unerPrtcl_DecodeHeader+0x1b0>
 8002eba:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec0 <unerPrtcl_DecodeHeader+0x24>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002efb 	.word	0x08002efb
 8002ec8:	08002f39 	.word	0x08002f39
 8002ecc:	08002f65 	.word	0x08002f65
 8002ed0:	08002f91 	.word	0x08002f91
 8002ed4:	08002fa7 	.word	0x08002fa7
 8002ed8:	0800304d 	.word	0x0800304d
 8002edc:	08003009 	.word	0x08003009
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	7912      	ldrb	r2, [r2, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b55      	cmp	r3, #85	@ 0x55
 8002eee:	f040 80b1 	bne.w	8003054 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 8002ef2:	4b68      	ldr	r3, [pc, #416]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
                }
            break;
 8002ef8:	e0ac      	b.n	8003054 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	7912      	ldrb	r2, [r2, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f08:	d103      	bne.n	8002f12 <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8002f0a:	4b62      	ldr	r3, [pc, #392]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8002f10:	e0a2      	b.n	8003058 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	7912      	ldrb	r2, [r2, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b55      	cmp	r3, #85	@ 0x55
 8002f20:	f000 809a 	beq.w	8003058 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 8002f24:	4b5b      	ldr	r3, [pc, #364]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	791b      	ldrb	r3, [r3, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	711a      	strb	r2, [r3, #4]
            break;
 8002f36:	e08f      	b.n	8003058 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	7912      	ldrb	r2, [r2, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b45      	cmp	r3, #69	@ 0x45
 8002f46:	d103      	bne.n	8002f50 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8002f48:	4b52      	ldr	r3, [pc, #328]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002f4e:	e086      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002f50:	4b50      	ldr	r3, [pc, #320]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	791b      	ldrb	r3, [r3, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	711a      	strb	r2, [r3, #4]
            break;
 8002f62:	e07c      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	7912      	ldrb	r2, [r2, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b52      	cmp	r3, #82	@ 0x52
 8002f72:	d103      	bne.n	8002f7c <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 8002f74:	4b47      	ldr	r3, [pc, #284]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002f76:	2204      	movs	r2, #4
 8002f78:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002f7a:	e070      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002f7c:	4b45      	ldr	r3, [pc, #276]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	791b      	ldrb	r3, [r3, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	711a      	strb	r2, [r3, #4]
            break;
 8002f8e:	e066      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	7912      	ldrb	r2, [r2, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	701a      	strb	r2, [r3, #0]
            break;
 8002fa4:	e05b      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	7912      	ldrb	r2, [r2, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b3a      	cmp	r3, #58	@ 0x3a
 8002fb4:	d11e      	bne.n	8002ff4 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 8002fb6:	4b37      	ldr	r3, [pc, #220]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002fb8:	2207      	movs	r2, #7
 8002fba:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	791b      	ldrb	r3, [r3, #4]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7a1a      	ldrb	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	799b      	ldrb	r3, [r3, #6]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7a5a      	ldrb	r2, [r3, #9]
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	4053      	eors	r3, r2
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002ff2:	e034      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002ff4:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	791b      	ldrb	r3, [r3, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	711a      	strb	r2, [r3, #4]
            break;
 8003006:	e02a      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	3b01      	subs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00c      	beq.n	800302e <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7a5a      	ldrb	r2, [r3, #9]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	7909      	ldrb	r1, [r1, #4]
 8003020:	440b      	add	r3, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	4053      	eors	r3, r2
 8003026:	b2da      	uxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 800302c:	e016      	b.n	800305c <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 800302e:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	7912      	ldrb	r2, [r2, #4]
 800303c:	4413      	add	r3, r2
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7a5b      	ldrb	r3, [r3, #9]
 8003044:	429a      	cmp	r2, r3
 8003046:	d109      	bne.n	800305c <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	e01d      	b.n	8003088 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <unerPrtcl_DecodeHeader+0x1f8>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
            break;
 8003052:	e004      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8003054:	bf00      	nop
 8003056:	e002      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 800305c:	bf00      	nop
        }
        dataRx->indexR++;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	791b      	ldrb	r3, [r3, #4]
 8003062:	3301      	adds	r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	791a      	ldrb	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	799b      	ldrb	r3, [r3, #6]
 8003072:	4013      	ands	r3, r2
 8003074:	b2da      	uxtb	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	7bba      	ldrb	r2, [r7, #14]
 8003080:	429a      	cmp	r2, r3
 8003082:	f47f af15 	bne.w	8002eb0 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	20000a50 	.word	0x20000a50

08003098 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	22ff      	movs	r2, #255	@ 0xff
 80030c8:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2200      	movs	r2, #0
 80030ec:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	22ff      	movs	r2, #255	@ 0xff
 80030f2:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2200      	movs	r2, #0
 80030f8:	725a      	strb	r2, [r3, #9]

}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003140 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800310c:	f7ff fd92 	bl	8002c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003110:	480c      	ldr	r0, [pc, #48]	@ (8003144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003112:	490d      	ldr	r1, [pc, #52]	@ (8003148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003114:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003118:	e002      	b.n	8003120 <LoopCopyDataInit>

0800311a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800311a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800311c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800311e:	3304      	adds	r3, #4

08003120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003124:	d3f9      	bcc.n	800311a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003128:	4c0a      	ldr	r4, [pc, #40]	@ (8003154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800312a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800312c:	e001      	b.n	8003132 <LoopFillZerobss>

0800312e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800312e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003130:	3204      	adds	r2, #4

08003132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003134:	d3fb      	bcc.n	800312e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003136:	f00a ff8b 	bl	800e050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800313a:	f7fe faa5 	bl	8001688 <main>
  bx  lr    
 800313e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003148:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800314c:	0800effc 	.word	0x0800effc
  ldr r2, =_sbss
 8003150:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8003154:	20001b88 	.word	0x20001b88

08003158 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003158:	e7fe      	b.n	8003158 <DMA1_Stream2_IRQHandler>
	...

0800315c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003160:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <HAL_Init+0x40>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <HAL_Init+0x40>)
 8003166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800316a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_Init+0x40>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <HAL_Init+0x40>)
 8003172:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003178:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_Init+0x40>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a07      	ldr	r2, [pc, #28]	@ (800319c <HAL_Init+0x40>)
 800317e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003184:	2003      	movs	r0, #3
 8003186:	f000 fe6f 	bl	8003e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800318a:	200f      	movs	r0, #15
 800318c:	f000 f808 	bl	80031a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003190:	f7ff fada 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00

080031a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a8:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_InitTick+0x54>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <HAL_InitTick+0x58>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4619      	mov	r1, r3
 80031b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fe87 	bl	8003ed2 <HAL_SYSTICK_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00e      	b.n	80031ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b0f      	cmp	r3, #15
 80031d2:	d80a      	bhi.n	80031ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d4:	2200      	movs	r2, #0
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	f000 fe4f 	bl	8003e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e0:	4a06      	ldr	r2, [pc, #24]	@ (80031fc <HAL_InitTick+0x5c>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000030 	.word	0x20000030
 80031f8:	20000038 	.word	0x20000038
 80031fc:	20000034 	.word	0x20000034

08003200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <HAL_IncTick+0x20>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_IncTick+0x24>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4413      	add	r3, r2
 8003210:	4a04      	ldr	r2, [pc, #16]	@ (8003224 <HAL_IncTick+0x24>)
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000038 	.word	0x20000038
 8003224:	20000a54 	.word	0x20000a54

08003228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return uwTick;
 800322c:	4b03      	ldr	r3, [pc, #12]	@ (800323c <HAL_GetTick+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000a54 	.word	0x20000a54

08003240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff ffee 	bl	8003228 <HAL_GetTick>
 800324c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d005      	beq.n	8003266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800325a:	4b0a      	ldr	r3, [pc, #40]	@ (8003284 <HAL_Delay+0x44>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003266:	bf00      	nop
 8003268:	f7ff ffde 	bl	8003228 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	429a      	cmp	r2, r3
 8003276:	d8f7      	bhi.n	8003268 <HAL_Delay+0x28>
  {
  }
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000038 	.word	0x20000038

08003288 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e033      	b.n	8003306 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fa76 	bl	8002798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032ce:	f023 0302 	bic.w	r3, r3, #2
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fb6c 	bl	80039b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f023 0303 	bic.w	r3, r3, #3
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80032f6:	e001      	b.n	80032fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d049      	beq.n	80033d8 <HAL_ADC_IRQHandler+0xca>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d046      	beq.n	80033d8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d12b      	bne.n	80033c8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003374:	2b00      	cmp	r3, #0
 8003376:	d127      	bne.n	80033c8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003390:	2b00      	cmp	r3, #0
 8003392:	d119      	bne.n	80033c8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0220 	bic.w	r2, r2, #32
 80033a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	f043 0201 	orr.w	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fd fce5 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0212 	mvn.w	r2, #18
 80033d6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d057      	beq.n	800349e <HAL_ADC_IRQHandler+0x190>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d054      	beq.n	800349e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d139      	bne.n	800348e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12b      	bne.n	800348e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003440:	2b00      	cmp	r3, #0
 8003442:	d124      	bne.n	800348e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	d11d      	bne.n	800348e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003456:	2b00      	cmp	r3, #0
 8003458:	d119      	bne.n	800348e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003468:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fc10 	bl	8003cb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 020c 	mvn.w	r2, #12
 800349c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d017      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x1d6>
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d014      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d10d      	bne.n	80034e4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f929 	bl	800372c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0201 	mvn.w	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034f2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d015      	beq.n	8003526 <HAL_ADC_IRQHandler+0x218>
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003504:	f043 0202 	orr.w	r2, r3, #2
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0220 	mvn.w	r2, #32
 8003514:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f912 	bl	8003740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0220 	mvn.w	r2, #32
 8003524:	601a      	str	r2, [r3, #0]
  }
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_ADC_Start_DMA+0x22>
 800354e:	2302      	movs	r3, #2
 8003550:	e0d0      	b.n	80036f4 <HAL_ADC_Start_DMA+0x1c4>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d018      	beq.n	800359a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003578:	4b60      	ldr	r3, [pc, #384]	@ (80036fc <HAL_ADC_Start_DMA+0x1cc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a60      	ldr	r2, [pc, #384]	@ (8003700 <HAL_ADC_Start_DMA+0x1d0>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	0c9a      	lsrs	r2, r3, #18
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800358c:	e002      	b.n	8003594 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	3b01      	subs	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f9      	bne.n	800358e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a8:	d107      	bne.n	80035ba <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	f040 8088 	bne.w	80036da <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003608:	d106      	bne.n	8003618 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f023 0206 	bic.w	r2, r3, #6
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
 8003616:	e002      	b.n	800361e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003626:	4b37      	ldr	r3, [pc, #220]	@ (8003704 <HAL_ADC_Start_DMA+0x1d4>)
 8003628:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362e:	4a36      	ldr	r2, [pc, #216]	@ (8003708 <HAL_ADC_Start_DMA+0x1d8>)
 8003630:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003636:	4a35      	ldr	r2, [pc, #212]	@ (800370c <HAL_ADC_Start_DMA+0x1dc>)
 8003638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	4a34      	ldr	r2, [pc, #208]	@ (8003710 <HAL_ADC_Start_DMA+0x1e0>)
 8003640:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800364a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800365a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800366a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	334c      	adds	r3, #76	@ 0x4c
 8003676:	4619      	mov	r1, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f000 fce4 	bl	8004048 <HAL_DMA_Start_IT>
 8003680:	4603      	mov	r3, r0
 8003682:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10f      	bne.n	80036b0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d129      	bne.n	80036f2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	e020      	b.n	80036f2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a17      	ldr	r2, [pc, #92]	@ (8003714 <HAL_ADC_Start_DMA+0x1e4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d11b      	bne.n	80036f2 <HAL_ADC_Start_DMA+0x1c2>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d114      	bne.n	80036f2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	e00b      	b.n	80036f2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	f043 0210 	orr.w	r2, r3, #16
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	f043 0201 	orr.w	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80036f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000030 	.word	0x20000030
 8003700:	431bde83 	.word	0x431bde83
 8003704:	40012300 	.word	0x40012300
 8003708:	08003bb1 	.word	0x08003bb1
 800370c:	08003c6b 	.word	0x08003c6b
 8003710:	08003c87 	.word	0x08003c87
 8003714:	40012000 	.word	0x40012000

08003718 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x1c>
 800376c:	2302      	movs	r3, #2
 800376e:	e113      	b.n	8003998 <HAL_ADC_ConfigChannel+0x244>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b09      	cmp	r3, #9
 800377e:	d925      	bls.n	80037cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68d9      	ldr	r1, [r3, #12]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	3b1e      	subs	r3, #30
 8003796:	2207      	movs	r2, #7
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43da      	mvns	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	400a      	ands	r2, r1
 80037a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68d9      	ldr	r1, [r3, #12]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4618      	mov	r0, r3
 80037b8:	4603      	mov	r3, r0
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4403      	add	r3, r0
 80037be:	3b1e      	subs	r3, #30
 80037c0:	409a      	lsls	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	e022      	b.n	8003812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6919      	ldr	r1, [r3, #16]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	2207      	movs	r2, #7
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	400a      	ands	r2, r1
 80037ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6919      	ldr	r1, [r3, #16]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	4603      	mov	r3, r0
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4403      	add	r3, r0
 8003808:	409a      	lsls	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b06      	cmp	r3, #6
 8003818:	d824      	bhi.n	8003864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	3b05      	subs	r3, #5
 800382c:	221f      	movs	r2, #31
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	400a      	ands	r2, r1
 800383a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	4618      	mov	r0, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	3b05      	subs	r3, #5
 8003856:	fa00 f203 	lsl.w	r2, r0, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	635a      	str	r2, [r3, #52]	@ 0x34
 8003862:	e04c      	b.n	80038fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b0c      	cmp	r3, #12
 800386a:	d824      	bhi.n	80038b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	3b23      	subs	r3, #35	@ 0x23
 800387e:	221f      	movs	r2, #31
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43da      	mvns	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	400a      	ands	r2, r1
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	4618      	mov	r0, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	3b23      	subs	r3, #35	@ 0x23
 80038a8:	fa00 f203 	lsl.w	r2, r0, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80038b4:	e023      	b.n	80038fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3b41      	subs	r3, #65	@ 0x41
 80038c8:	221f      	movs	r2, #31
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	400a      	ands	r2, r1
 80038d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4618      	mov	r0, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	3b41      	subs	r3, #65	@ 0x41
 80038f2:	fa00 f203 	lsl.w	r2, r0, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038fe:	4b29      	ldr	r3, [pc, #164]	@ (80039a4 <HAL_ADC_ConfigChannel+0x250>)
 8003900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <HAL_ADC_ConfigChannel+0x254>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10f      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1d8>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b12      	cmp	r3, #18
 8003912:	d10b      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <HAL_ADC_ConfigChannel+0x254>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d12b      	bne.n	800398e <HAL_ADC_ConfigChannel+0x23a>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ac <HAL_ADC_ConfigChannel+0x258>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <HAL_ADC_ConfigChannel+0x1f4>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b11      	cmp	r3, #17
 8003946:	d122      	bne.n	800398e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a11      	ldr	r2, [pc, #68]	@ (80039ac <HAL_ADC_ConfigChannel+0x258>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800396a:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <HAL_ADC_ConfigChannel+0x25c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a11      	ldr	r2, [pc, #68]	@ (80039b4 <HAL_ADC_ConfigChannel+0x260>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	0c9a      	lsrs	r2, r3, #18
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003980:	e002      	b.n	8003988 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3b01      	subs	r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f9      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40012300 	.word	0x40012300
 80039a8:	40012000 	.word	0x40012000
 80039ac:	10000012 	.word	0x10000012
 80039b0:	20000030 	.word	0x20000030
 80039b4:	431bde83 	.word	0x431bde83

080039b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039c0:	4b79      	ldr	r3, [pc, #484]	@ (8003ba8 <ADC_Init+0x1f0>)
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	021a      	lsls	r2, r3, #8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6899      	ldr	r1, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	4a58      	ldr	r2, [pc, #352]	@ (8003bac <ADC_Init+0x1f4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d022      	beq.n	8003a96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6899      	ldr	r1, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	e00f      	b.n	8003ab6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ab4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0202 	bic.w	r2, r2, #2
 8003ac4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6899      	ldr	r1, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7e1b      	ldrb	r3, [r3, #24]
 8003ad0:	005a      	lsls	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003af2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	035a      	lsls	r2, r3, #13
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	e007      	b.n	8003b2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	051a      	lsls	r2, r3, #20
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6899      	ldr	r1, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b6e:	025a      	lsls	r2, r3, #9
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	029a      	lsls	r2, r3, #10
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40012300 	.word	0x40012300
 8003bac:	0f000001 	.word	0x0f000001

08003bb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d13c      	bne.n	8003c44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d12b      	bne.n	8003c3c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d127      	bne.n	8003c3c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d119      	bne.n	8003c3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0220 	bic.w	r2, r2, #32
 8003c16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7fd f8ab 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c42:	e00e      	b.n	8003c62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fd75 	bl	8003740 <HAL_ADC_ErrorCallback>
}
 8003c56:	e004      	b.n	8003c62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fd4d 	bl	8003718 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c92:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2240      	movs	r2, #64	@ 0x40
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff fd4a 	bl	8003740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d14:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <__NVIC_GetPriorityGrouping+0x18>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0307 	and.w	r3, r3, #7
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db0b      	blt.n	8003d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4907      	ldr	r1, [pc, #28]	@ (8003d64 <__NVIC_EnableIRQ+0x38>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	db0a      	blt.n	8003d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	490c      	ldr	r1, [pc, #48]	@ (8003db4 <__NVIC_SetPriority+0x4c>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	0112      	lsls	r2, r2, #4
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d90:	e00a      	b.n	8003da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4908      	ldr	r1, [pc, #32]	@ (8003db8 <__NVIC_SetPriority+0x50>)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	440b      	add	r3, r1
 8003da6:	761a      	strb	r2, [r3, #24]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000e100 	.word	0xe000e100
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	@ 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f1c3 0307 	rsb	r3, r3, #7
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	bf28      	it	cs
 8003dda:	2304      	movcs	r3, #4
 8003ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d902      	bls.n	8003dec <NVIC_EncodePriority+0x30>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3b03      	subs	r3, #3
 8003dea:	e000      	b.n	8003dee <NVIC_EncodePriority+0x32>
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	401a      	ands	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	4313      	orrs	r3, r2
         );
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3724      	adds	r7, #36	@ 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e34:	d301      	bcc.n	8003e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e36:	2301      	movs	r3, #1
 8003e38:	e00f      	b.n	8003e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e64 <SysTick_Config+0x40>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e42:	210f      	movs	r1, #15
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	f7ff ff8e 	bl	8003d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <SysTick_Config+0x40>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e52:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <SysTick_Config+0x40>)
 8003e54:	2207      	movs	r2, #7
 8003e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	e000e010 	.word	0xe000e010

08003e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff29 	bl	8003cc8 <__NVIC_SetPriorityGrouping>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e90:	f7ff ff3e 	bl	8003d10 <__NVIC_GetPriorityGrouping>
 8003e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff8e 	bl	8003dbc <NVIC_EncodePriority>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff5d 	bl	8003d68 <__NVIC_SetPriority>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff31 	bl	8003d2c <__NVIC_EnableIRQ>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ffa2 	bl	8003e24 <SysTick_Config>
 8003ee0:	4603      	mov	r3, r0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ef8:	f7ff f996 	bl	8003228 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e099      	b.n	800403c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f28:	e00f      	b.n	8003f4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f2a:	f7ff f97d 	bl	8003228 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b05      	cmp	r3, #5
 8003f36:	d908      	bls.n	8003f4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2203      	movs	r2, #3
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e078      	b.n	800403c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e8      	bne.n	8003f2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4b38      	ldr	r3, [pc, #224]	@ (8004044 <HAL_DMA_Init+0x158>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d107      	bne.n	8003fb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	4313      	orrs	r3, r2
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0307 	bic.w	r3, r3, #7
 8003fca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d117      	bne.n	800400e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 faab 	bl	800454c <DMA_CheckFifoParam>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2240      	movs	r2, #64	@ 0x40
 8004000:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800400a:	2301      	movs	r3, #1
 800400c:	e016      	b.n	800403c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa62 	bl	80044e0 <DMA_CalcBaseAndBitshift>
 800401c:	4603      	mov	r3, r0
 800401e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	223f      	movs	r2, #63	@ 0x3f
 8004026:	409a      	lsls	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	f010803f 	.word	0xf010803f

08004048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_DMA_Start_IT+0x26>
 800406a:	2302      	movs	r3, #2
 800406c:	e040      	b.n	80040f0 <HAL_DMA_Start_IT+0xa8>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d12f      	bne.n	80040e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f9f4 	bl	8004484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	223f      	movs	r2, #63	@ 0x3f
 80040a2:	409a      	lsls	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0216 	orr.w	r2, r2, #22
 80040b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0208 	orr.w	r2, r2, #8
 80040ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e005      	b.n	80040ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
 80040ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d004      	beq.n	8004116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2280      	movs	r2, #128	@ 0x80
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e00c      	b.n	8004130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2205      	movs	r2, #5
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004148:	4b8e      	ldr	r3, [pc, #568]	@ (8004384 <HAL_DMA_IRQHandler+0x248>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a8e      	ldr	r2, [pc, #568]	@ (8004388 <HAL_DMA_IRQHandler+0x24c>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0a9b      	lsrs	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	2208      	movs	r2, #8
 8004168:	409a      	lsls	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01a      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004194:	2208      	movs	r2, #8
 8004196:	409a      	lsls	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a0:	f043 0201 	orr.w	r2, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ac:	2201      	movs	r2, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ca:	2201      	movs	r2, #1
 80041cc:	409a      	lsls	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	2204      	movs	r2, #4
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004200:	2204      	movs	r2, #4
 8004202:	409a      	lsls	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004218:	2210      	movs	r2, #16
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d043      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d03c      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004236:	2210      	movs	r2, #16
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d018      	beq.n	800427e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d024      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
 800426a:	e01f      	b.n	80042ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e016      	b.n	80042ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0208 	bic.w	r2, r2, #8
 800429a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	2220      	movs	r2, #32
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 808f 	beq.w	80043dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8087 	beq.w	80043dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	2220      	movs	r2, #32
 80042d4:	409a      	lsls	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d136      	bne.n	8004354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0216 	bic.w	r2, r2, #22
 80042f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_DMA_IRQHandler+0x1da>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432a:	223f      	movs	r2, #63	@ 0x3f
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004346:	2b00      	cmp	r3, #0
 8004348:	d07e      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
        }
        return;
 8004352:	e079      	b.n	8004448 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01d      	beq.n	800439e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10d      	bne.n	800438c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004374:	2b00      	cmp	r3, #0
 8004376:	d031      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
 8004380:	e02c      	b.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
 8004382:	bf00      	nop
 8004384:	20000030 	.word	0x20000030
 8004388:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d023      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e01e      	b.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10f      	bne.n	80043cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0210 	bic.w	r2, r2, #16
 80043ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d032      	beq.n	800444a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d022      	beq.n	8004436 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2205      	movs	r2, #5
 80043f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	3301      	adds	r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	429a      	cmp	r2, r3
 8004412:	d307      	bcc.n	8004424 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f2      	bne.n	8004408 <HAL_DMA_IRQHandler+0x2cc>
 8004422:	e000      	b.n	8004426 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004424:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
 8004446:	e000      	b.n	800444a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004448:	bf00      	nop
    }
  }
}
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800445e:	b2db      	uxtb	r3, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b40      	cmp	r3, #64	@ 0x40
 80044b0:	d108      	bne.n	80044c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044c2:	e007      	b.n	80044d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	3b10      	subs	r3, #16
 80044f0:	4a14      	ldr	r2, [pc, #80]	@ (8004544 <DMA_CalcBaseAndBitshift+0x64>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044fa:	4a13      	ldr	r2, [pc, #76]	@ (8004548 <DMA_CalcBaseAndBitshift+0x68>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d909      	bls.n	8004522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004520:	e007      	b.n	8004532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	aaaaaaab 	.word	0xaaaaaaab
 8004548:	0800efb0 	.word	0x0800efb0

0800454c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11f      	bne.n	80045a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d856      	bhi.n	800461a <DMA_CheckFifoParam+0xce>
 800456c:	a201      	add	r2, pc, #4	@ (adr r2, 8004574 <DMA_CheckFifoParam+0x28>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004585 	.word	0x08004585
 8004578:	08004597 	.word	0x08004597
 800457c:	08004585 	.word	0x08004585
 8004580:	0800461b 	.word	0x0800461b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d046      	beq.n	800461e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004594:	e043      	b.n	800461e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800459e:	d140      	bne.n	8004622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a4:	e03d      	b.n	8004622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ae:	d121      	bne.n	80045f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d837      	bhi.n	8004626 <DMA_CheckFifoParam+0xda>
 80045b6:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <DMA_CheckFifoParam+0x70>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045d3 	.word	0x080045d3
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	080045e5 	.word	0x080045e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      break;
 80045d0:	e030      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d025      	beq.n	800462a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e2:	e022      	b.n	800462a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045ec:	d11f      	bne.n	800462e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045f2:	e01c      	b.n	800462e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d903      	bls.n	8004602 <DMA_CheckFifoParam+0xb6>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d003      	beq.n	8004608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004600:	e018      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      break;
 8004606:	e015      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e00b      	b.n	8004632 <DMA_CheckFifoParam+0xe6>
      break;
 800461a:	bf00      	nop
 800461c:	e00a      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e008      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e006      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004626:	bf00      	nop
 8004628:	e004      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;   
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004632:	bf00      	nop
    }
  } 
  
  return status; 
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	@ 0x24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e159      	b.n	8004914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004660:	2201      	movs	r2, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	f040 8148 	bne.w	800490e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d005      	beq.n	8004696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004692:	2b02      	cmp	r3, #2
 8004694:	d130      	bne.n	80046f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	2203      	movs	r2, #3
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046cc:	2201      	movs	r2, #1
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 0201 	and.w	r2, r3, #1
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	2b03      	cmp	r3, #3
 8004702:	d017      	beq.n	8004734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	2203      	movs	r2, #3
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d123      	bne.n	8004788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	08da      	lsrs	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3208      	adds	r2, #8
 8004748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	220f      	movs	r2, #15
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	69b9      	ldr	r1, [r7, #24]
 8004784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0203 	and.w	r2, r3, #3
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80a2 	beq.w	800490e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	4b57      	ldr	r3, [pc, #348]	@ (800492c <HAL_GPIO_Init+0x2e8>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	4a56      	ldr	r2, [pc, #344]	@ (800492c <HAL_GPIO_Init+0x2e8>)
 80047d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047da:	4b54      	ldr	r3, [pc, #336]	@ (800492c <HAL_GPIO_Init+0x2e8>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e6:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_GPIO_Init+0x2ec>)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	220f      	movs	r2, #15
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a49      	ldr	r2, [pc, #292]	@ (8004934 <HAL_GPIO_Init+0x2f0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d019      	beq.n	8004846 <HAL_GPIO_Init+0x202>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a48      	ldr	r2, [pc, #288]	@ (8004938 <HAL_GPIO_Init+0x2f4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_GPIO_Init+0x1fe>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a47      	ldr	r2, [pc, #284]	@ (800493c <HAL_GPIO_Init+0x2f8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00d      	beq.n	800483e <HAL_GPIO_Init+0x1fa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a46      	ldr	r2, [pc, #280]	@ (8004940 <HAL_GPIO_Init+0x2fc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <HAL_GPIO_Init+0x1f6>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a45      	ldr	r2, [pc, #276]	@ (8004944 <HAL_GPIO_Init+0x300>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d101      	bne.n	8004836 <HAL_GPIO_Init+0x1f2>
 8004832:	2304      	movs	r3, #4
 8004834:	e008      	b.n	8004848 <HAL_GPIO_Init+0x204>
 8004836:	2307      	movs	r3, #7
 8004838:	e006      	b.n	8004848 <HAL_GPIO_Init+0x204>
 800483a:	2303      	movs	r3, #3
 800483c:	e004      	b.n	8004848 <HAL_GPIO_Init+0x204>
 800483e:	2302      	movs	r3, #2
 8004840:	e002      	b.n	8004848 <HAL_GPIO_Init+0x204>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_GPIO_Init+0x204>
 8004846:	2300      	movs	r3, #0
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	f002 0203 	and.w	r2, r2, #3
 800484e:	0092      	lsls	r2, r2, #2
 8004850:	4093      	lsls	r3, r2
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004858:	4935      	ldr	r1, [pc, #212]	@ (8004930 <HAL_GPIO_Init+0x2ec>)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	3302      	adds	r3, #2
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004866:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <HAL_GPIO_Init+0x304>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488a:	4a2f      	ldr	r2, [pc, #188]	@ (8004948 <HAL_GPIO_Init+0x304>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004890:	4b2d      	ldr	r3, [pc, #180]	@ (8004948 <HAL_GPIO_Init+0x304>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b4:	4a24      	ldr	r2, [pc, #144]	@ (8004948 <HAL_GPIO_Init+0x304>)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ba:	4b23      	ldr	r3, [pc, #140]	@ (8004948 <HAL_GPIO_Init+0x304>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048de:	4a1a      	ldr	r2, [pc, #104]	@ (8004948 <HAL_GPIO_Init+0x304>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e4:	4b18      	ldr	r3, [pc, #96]	@ (8004948 <HAL_GPIO_Init+0x304>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004908:	4a0f      	ldr	r2, [pc, #60]	@ (8004948 <HAL_GPIO_Init+0x304>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3301      	adds	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	f67f aea2 	bls.w	8004660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3724      	adds	r7, #36	@ 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	40013800 	.word	0x40013800
 8004934:	40020000 	.word	0x40020000
 8004938:	40020400 	.word	0x40020400
 800493c:	40020800 	.word	0x40020800
 8004940:	40020c00 	.word	0x40020c00
 8004944:	40021000 	.word	0x40021000
 8004948:	40013c00 	.word	0x40013c00

0800494c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]
 8004958:	4613      	mov	r3, r2
 800495a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800495c:	787b      	ldrb	r3, [r7, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004962:	887a      	ldrh	r2, [r7, #2]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004968:	e003      	b.n	8004972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800496a:	887b      	ldrh	r3, [r7, #2]
 800496c:	041a      	lsls	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	619a      	str	r2, [r3, #24]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004990:	887a      	ldrh	r2, [r7, #2]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4013      	ands	r3, r2
 8004996:	041a      	lsls	r2, r3, #16
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	43d9      	mvns	r1, r3
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	400b      	ands	r3, r1
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	619a      	str	r2, [r3, #24]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e12b      	b.n	8004c1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fd ff5a 	bl	8002894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2224      	movs	r2, #36	@ 0x24
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a18:	f004 fce6 	bl	80093e8 <HAL_RCC_GetPCLK1Freq>
 8004a1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4a81      	ldr	r2, [pc, #516]	@ (8004c28 <HAL_I2C_Init+0x274>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d807      	bhi.n	8004a38 <HAL_I2C_Init+0x84>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4a80      	ldr	r2, [pc, #512]	@ (8004c2c <HAL_I2C_Init+0x278>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	bf94      	ite	ls
 8004a30:	2301      	movls	r3, #1
 8004a32:	2300      	movhi	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	e006      	b.n	8004a46 <HAL_I2C_Init+0x92>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a7d      	ldr	r2, [pc, #500]	@ (8004c30 <HAL_I2C_Init+0x27c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	bf94      	ite	ls
 8004a40:	2301      	movls	r3, #1
 8004a42:	2300      	movhi	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0e7      	b.n	8004c1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a78      	ldr	r2, [pc, #480]	@ (8004c34 <HAL_I2C_Init+0x280>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	0c9b      	lsrs	r3, r3, #18
 8004a58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c28 <HAL_I2C_Init+0x274>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d802      	bhi.n	8004a88 <HAL_I2C_Init+0xd4>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3301      	adds	r3, #1
 8004a86:	e009      	b.n	8004a9c <HAL_I2C_Init+0xe8>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	4a69      	ldr	r2, [pc, #420]	@ (8004c38 <HAL_I2C_Init+0x284>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	099b      	lsrs	r3, r3, #6
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004aae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	495c      	ldr	r1, [pc, #368]	@ (8004c28 <HAL_I2C_Init+0x274>)
 8004ab8:	428b      	cmp	r3, r1
 8004aba:	d819      	bhi.n	8004af0 <HAL_I2C_Init+0x13c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1e59      	subs	r1, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aca:	1c59      	adds	r1, r3, #1
 8004acc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ad0:	400b      	ands	r3, r1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_I2C_Init+0x138>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1e59      	subs	r1, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aea:	e051      	b.n	8004b90 <HAL_I2C_Init+0x1dc>
 8004aec:	2304      	movs	r3, #4
 8004aee:	e04f      	b.n	8004b90 <HAL_I2C_Init+0x1dc>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d111      	bne.n	8004b1c <HAL_I2C_Init+0x168>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1e58      	subs	r0, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6859      	ldr	r1, [r3, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	440b      	add	r3, r1
 8004b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e012      	b.n	8004b42 <HAL_I2C_Init+0x18e>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1e58      	subs	r0, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	0099      	lsls	r1, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Init+0x196>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e022      	b.n	8004b90 <HAL_I2C_Init+0x1dc>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10e      	bne.n	8004b70 <HAL_I2C_Init+0x1bc>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1e58      	subs	r0, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6859      	ldr	r1, [r3, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	440b      	add	r3, r1
 8004b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b64:	3301      	adds	r3, #1
 8004b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6e:	e00f      	b.n	8004b90 <HAL_I2C_Init+0x1dc>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1e58      	subs	r0, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	0099      	lsls	r1, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b86:	3301      	adds	r3, #1
 8004b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	6809      	ldr	r1, [r1, #0]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004bbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6911      	ldr	r1, [r2, #16]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68d2      	ldr	r2, [r2, #12]
 8004bca:	4311      	orrs	r1, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	000186a0 	.word	0x000186a0
 8004c2c:	001e847f 	.word	0x001e847f
 8004c30:	003d08ff 	.word	0x003d08ff
 8004c34:	431bde83 	.word	0x431bde83
 8004c38:	10624dd3 	.word	0x10624dd3

08004c3c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4e:	2b80      	cmp	r3, #128	@ 0x80
 8004c50:	d103      	bne.n	8004c5a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	817b      	strh	r3, [r7, #10]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	813b      	strh	r3, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c82:	f7fe fad1 	bl	8003228 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	f040 80d9 	bne.w	8004e48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2319      	movs	r3, #25
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	496d      	ldr	r1, [pc, #436]	@ (8004e54 <HAL_I2C_Mem_Write+0x1ec>)
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f002 faf9 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cac:	2302      	movs	r3, #2
 8004cae:	e0cc      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_I2C_Mem_Write+0x56>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e0c5      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d007      	beq.n	8004ce4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2221      	movs	r2, #33	@ 0x21
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2240      	movs	r2, #64	@ 0x40
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a4d      	ldr	r2, [pc, #308]	@ (8004e58 <HAL_I2C_Mem_Write+0x1f0>)
 8004d24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d26:	88f8      	ldrh	r0, [r7, #6]
 8004d28:	893a      	ldrh	r2, [r7, #8]
 8004d2a:	8979      	ldrh	r1, [r7, #10]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4603      	mov	r3, r0
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f001 ff6c 	bl	8006c14 <I2C_RequestMemoryWrite>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d052      	beq.n	8004de8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e081      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f002 fbbe 	bl	80074cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d107      	bne.n	8004d6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e06b      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d11b      	bne.n	8004de8 <HAL_I2C_Mem_Write+0x180>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d017      	beq.n	8004de8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1aa      	bne.n	8004d46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f002 fbb1 	bl	800755c <I2C_WaitOnBTFFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00d      	beq.n	8004e1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d107      	bne.n	8004e18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e016      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	00100002 	.word	0x00100002
 8004e58:	ffff0000 	.word	0xffff0000

08004e5c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	@ 0x28
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	4608      	mov	r0, r1
 8004e66:	4611      	mov	r1, r2
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	817b      	strh	r3, [r7, #10]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	813b      	strh	r3, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e7a:	f7fe f9d5 	bl	8003228 <HAL_GetTick>
 8004e7e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	f040 8136 	bne.w	80050fa <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e8e:	4b9d      	ldr	r3, [pc, #628]	@ (8005104 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	08db      	lsrs	r3, r3, #3
 8004e94:	4a9c      	ldr	r2, [pc, #624]	@ (8005108 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	0a1a      	lsrs	r2, r3, #8
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009a      	lsls	r2, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d112      	bne.n	8004eda <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	f043 0220 	orr.w	r2, r3, #32
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e110      	b.n	80050fc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d0df      	beq.n	8004ea8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_I2C_Mem_Write_DMA+0x9a>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e102      	b.n	80050fc <HAL_I2C_Mem_Write_DMA+0x2a0>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d007      	beq.n	8004f1c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2221      	movs	r2, #33	@ 0x21
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2240      	movs	r2, #64	@ 0x40
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a6c      	ldr	r2, [pc, #432]	@ (800510c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f5e:	897a      	ldrh	r2, [r7, #10]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004f64:	893a      	ldrh	r2, [r7, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80a9 	beq.w	80050d2 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02a      	beq.n	8004fde <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8c:	4a60      	ldr	r2, [pc, #384]	@ (8005110 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004f8e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f94:	4a5f      	ldr	r2, [pc, #380]	@ (8005114 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004f96:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fac:	2200      	movs	r2, #0
 8004fae:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3310      	adds	r3, #16
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fce:	f7ff f83b 	bl	8004048 <HAL_DMA_Start_IT>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004fd6:	7efb      	ldrb	r3, [r7, #27]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d166      	bne.n	80050aa <HAL_I2C_Mem_Write_DMA+0x24e>
 8004fdc:	e013      	b.n	8005006 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07a      	b.n	80050fc <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005006:	88f8      	ldrh	r0, [r7, #6]
 8005008:	893a      	ldrh	r2, [r7, #8]
 800500a:	8979      	ldrh	r1, [r7, #10]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	2323      	movs	r3, #35	@ 0x23
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4603      	mov	r3, r0
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f001 fdfc 	bl	8006c14 <I2C_RequestMemoryWrite>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d022      	beq.n	8005068 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff f866 	bl	80040f8 <HAL_DMA_Abort_IT>
 800502c:	4603      	mov	r3, r0
 800502e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005034:	2200      	movs	r2, #0
 8005036:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005046:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e049      	b.n	80050fc <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005094:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050a4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e028      	b.n	80050fc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	f043 0210 	orr.w	r2, r3, #16
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e014      	b.n	80050fc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
  }
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000030 	.word	0x20000030
 8005108:	14f8b589 	.word	0x14f8b589
 800510c:	ffff0000 	.word	0xffff0000
 8005110:	08006f11 	.word	0x08006f11
 8005114:	080070cf 	.word	0x080070cf

08005118 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08c      	sub	sp, #48	@ 0x30
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	4608      	mov	r0, r1
 8005122:	4611      	mov	r1, r2
 8005124:	461a      	mov	r2, r3
 8005126:	4603      	mov	r3, r0
 8005128:	817b      	strh	r3, [r7, #10]
 800512a:	460b      	mov	r3, r1
 800512c:	813b      	strh	r3, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005132:	f7fe f879 	bl	8003228 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b20      	cmp	r3, #32
 8005146:	f040 8172 	bne.w	800542e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800514a:	4b93      	ldr	r3, [pc, #588]	@ (8005398 <HAL_I2C_Mem_Read_DMA+0x280>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	08db      	lsrs	r3, r3, #3
 8005150:	4a92      	ldr	r2, [pc, #584]	@ (800539c <HAL_I2C_Mem_Read_DMA+0x284>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0a1a      	lsrs	r2, r3, #8
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009a      	lsls	r2, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	3b01      	subs	r3, #1
 8005168:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d112      	bne.n	8005196 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
 8005194:	e14c      	b.n	8005430 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d0df      	beq.n	8005164 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_I2C_Mem_Read_DMA+0x9a>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e13e      	b.n	8005430 <HAL_I2C_Mem_Read_DMA+0x318>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d007      	beq.n	80051d8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2222      	movs	r2, #34	@ 0x22
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2240      	movs	r2, #64	@ 0x40
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005208:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a62      	ldr	r2, [pc, #392]	@ (80053a0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005218:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800521a:	897a      	ldrh	r2, [r7, #10]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005220:	893a      	ldrh	r2, [r7, #8]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80cc 	beq.w	80053d4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d02d      	beq.n	80052a0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	4a56      	ldr	r2, [pc, #344]	@ (80053a4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800524a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	4a55      	ldr	r2, [pc, #340]	@ (80053a8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005252:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	2200      	movs	r2, #0
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	2200      	movs	r2, #0
 8005262:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	2200      	movs	r2, #0
 800526a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	2200      	movs	r2, #0
 8005272:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3310      	adds	r3, #16
 800527e:	4619      	mov	r1, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	461a      	mov	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528a:	f7fe fedd 	bl	8004048 <HAL_DMA_Start_IT>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 8087 	bne.w	80053ac <HAL_I2C_Mem_Read_DMA+0x294>
 800529e:	e013      	b.n	80052c8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0b3      	b.n	8005430 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80052c8:	88f8      	ldrh	r0, [r7, #6]
 80052ca:	893a      	ldrh	r2, [r7, #8]
 80052cc:	8979      	ldrh	r1, [r7, #10]
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	2323      	movs	r3, #35	@ 0x23
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4603      	mov	r3, r0
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f001 fd31 	bl	8006d40 <I2C_RequestMemoryRead>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d023      	beq.n	800532c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe ff05 	bl	80040f8 <HAL_DMA_Abort_IT>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	2200      	movs	r2, #0
 80052fa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0201 	bic.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e081      	b.n	8005430 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005330:	2b01      	cmp	r3, #1
 8005332:	d108      	bne.n	8005346 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e007      	b.n	8005356 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005354:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005382:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005392:	605a      	str	r2, [r3, #4]
 8005394:	e049      	b.n	800542a <HAL_I2C_Mem_Read_DMA+0x312>
 8005396:	bf00      	nop
 8005398:	20000030 	.word	0x20000030
 800539c:	14f8b589 	.word	0x14f8b589
 80053a0:	ffff0000 	.word	0xffff0000
 80053a4:	08006f11 	.word	0x08006f11
 80053a8:	080070cf 	.word	0x080070cf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	f043 0210 	orr.w	r2, r3, #16
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e02d      	b.n	8005430 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80053d4:	88f8      	ldrh	r0, [r7, #6]
 80053d6:	893a      	ldrh	r2, [r7, #8]
 80053d8:	8979      	ldrh	r1, [r7, #10]
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	2323      	movs	r3, #35	@ 0x23
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4603      	mov	r3, r0
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f001 fcab 	bl	8006d40 <I2C_RequestMemoryRead>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e01d      	b.n	8005430 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005418:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e000      	b.n	8005430 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800542e:	2302      	movs	r3, #2
  }
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	@ 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005458:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005460:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b10      	cmp	r3, #16
 8005466:	d003      	beq.n	8005470 <HAL_I2C_EV_IRQHandler+0x38>
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	f040 80c1 	bne.w	80055f2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10d      	bne.n	80054a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005490:	d003      	beq.n	800549a <HAL_I2C_EV_IRQHandler+0x62>
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005498:	d101      	bne.n	800549e <HAL_I2C_EV_IRQHandler+0x66>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_I2C_EV_IRQHandler+0x68>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	f000 8132 	beq.w	800570a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_I2C_EV_IRQHandler+0x92>
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	0a5b      	lsrs	r3, r3, #9
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d006      	beq.n	80054ca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f002 f8f6 	bl	80076ae <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fd87 	bl	8005fd6 <I2C_Master_SB>
 80054c8:	e092      	b.n	80055f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	08db      	lsrs	r3, r3, #3
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_I2C_EV_IRQHandler+0xb2>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	0a5b      	lsrs	r3, r3, #9
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fdfd 	bl	80060e2 <I2C_Master_ADD10>
 80054e8:	e082      	b.n	80055f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <HAL_I2C_EV_IRQHandler+0xd2>
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	0a5b      	lsrs	r3, r3, #9
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fe17 	bl	8006136 <I2C_Master_ADDR>
 8005508:	e072      	b.n	80055f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	089b      	lsrs	r3, r3, #2
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d03b      	beq.n	800558e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005524:	f000 80f3 	beq.w	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	09db      	lsrs	r3, r3, #7
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00f      	beq.n	8005554 <HAL_I2C_EV_IRQHandler+0x11c>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	0a9b      	lsrs	r3, r3, #10
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d009      	beq.n	8005554 <HAL_I2C_EV_IRQHandler+0x11c>
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d103      	bne.n	8005554 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f9df 	bl	8005910 <I2C_MasterTransmit_TXE>
 8005552:	e04d      	b.n	80055f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80d6 	beq.w	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	0a5b      	lsrs	r3, r3, #9
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80cf 	beq.w	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	2b21      	cmp	r3, #33	@ 0x21
 8005574:	d103      	bne.n	800557e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa66 	bl	8005a48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800557c:	e0c7      	b.n	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b40      	cmp	r3, #64	@ 0x40
 8005582:	f040 80c4 	bne.w	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fad4 	bl	8005b34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800558c:	e0bf      	b.n	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800559c:	f000 80b7 	beq.w	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	099b      	lsrs	r3, r3, #6
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00f      	beq.n	80055cc <HAL_I2C_EV_IRQHandler+0x194>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	0a9b      	lsrs	r3, r3, #10
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <HAL_I2C_EV_IRQHandler+0x194>
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fb4d 	bl	8005c64 <I2C_MasterReceive_RXNE>
 80055ca:	e011      	b.n	80055f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	089b      	lsrs	r3, r3, #2
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 809a 	beq.w	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	0a5b      	lsrs	r3, r3, #9
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8093 	beq.w	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fc03 	bl	8005df4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055ee:	e08e      	b.n	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
 80055f0:	e08d      	b.n	800570e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	e007      	b.n	8005614 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d012      	beq.n	8005646 <HAL_I2C_EV_IRQHandler+0x20e>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	0a5b      	lsrs	r3, r3, #9
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 ffc8 	bl	80065d4 <I2C_Slave_ADDR>
 8005644:	e066      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_I2C_EV_IRQHandler+0x22e>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	0a5b      	lsrs	r3, r3, #9
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 f802 	bl	8006668 <I2C_Slave_STOPF>
 8005664:	e056      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005666:	7bbb      	ldrb	r3, [r7, #14]
 8005668:	2b21      	cmp	r3, #33	@ 0x21
 800566a:	d002      	beq.n	8005672 <HAL_I2C_EV_IRQHandler+0x23a>
 800566c:	7bbb      	ldrb	r3, [r7, #14]
 800566e:	2b29      	cmp	r3, #41	@ 0x29
 8005670:	d125      	bne.n	80056be <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	09db      	lsrs	r3, r3, #7
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00f      	beq.n	800569e <HAL_I2C_EV_IRQHandler+0x266>
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	0a9b      	lsrs	r3, r3, #10
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d009      	beq.n	800569e <HAL_I2C_EV_IRQHandler+0x266>
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fede 	bl	8006458 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800569c:	e039      	b.n	8005712 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	089b      	lsrs	r3, r3, #2
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d033      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x2da>
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	0a5b      	lsrs	r3, r3, #9
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d02d      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 ff0b 	bl	80064d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056bc:	e029      	b.n	8005712 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00f      	beq.n	80056ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	0a9b      	lsrs	r3, r3, #10
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d103      	bne.n	80056ea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 ff16 	bl	8006514 <I2C_SlaveReceive_RXNE>
 80056e8:	e014      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	089b      	lsrs	r3, r3, #2
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00e      	beq.n	8005714 <HAL_I2C_EV_IRQHandler+0x2dc>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	0a5b      	lsrs	r3, r3, #9
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 ff44 	bl	8006590 <I2C_SlaveReceive_BTF>
 8005708:	e004      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800570a:	bf00      	nop
 800570c:	e002      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800570e:	bf00      	nop
 8005710:	e000      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005712:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b08a      	sub	sp, #40	@ 0x28
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800573c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00e      	beq.n	8005768 <HAL_I2C_ER_IRQHandler+0x4e>
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	0a1b      	lsrs	r3, r3, #8
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005766:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	0a5b      	lsrs	r3, r3, #9
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <HAL_I2C_ER_IRQHandler+0x78>
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	f043 0302 	orr.w	r3, r3, #2
 8005786:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005790:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	0a9b      	lsrs	r3, r3, #10
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d03f      	beq.n	800581e <HAL_I2C_ER_IRQHandler+0x104>
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d039      	beq.n	800581e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80057aa:	7efb      	ldrb	r3, [r7, #27]
 80057ac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057bc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80057c4:	7ebb      	ldrb	r3, [r7, #26]
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d112      	bne.n	80057f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80057d0:	7cfb      	ldrb	r3, [r7, #19]
 80057d2:	2b21      	cmp	r3, #33	@ 0x21
 80057d4:	d008      	beq.n	80057e8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	2b29      	cmp	r3, #41	@ 0x29
 80057da:	d005      	beq.n	80057e8 <HAL_I2C_ER_IRQHandler+0xce>
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	2b28      	cmp	r3, #40	@ 0x28
 80057e0:	d106      	bne.n	80057f0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b21      	cmp	r3, #33	@ 0x21
 80057e6:	d103      	bne.n	80057f0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 f86d 	bl	80068c8 <I2C_Slave_AF>
 80057ee:	e016      	b.n	800581e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057f8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	f043 0304 	orr.w	r3, r3, #4
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005802:	7efb      	ldrb	r3, [r7, #27]
 8005804:	2b10      	cmp	r3, #16
 8005806:	d002      	beq.n	800580e <HAL_I2C_ER_IRQHandler+0xf4>
 8005808:	7efb      	ldrb	r3, [r7, #27]
 800580a:	2b40      	cmp	r3, #64	@ 0x40
 800580c:	d107      	bne.n	800581e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800581c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	0adb      	lsrs	r3, r3, #11
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <HAL_I2C_ER_IRQHandler+0x12e>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	0a1b      	lsrs	r3, r3, #8
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	f043 0308 	orr.w	r3, r3, #8
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005846:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 f8a8 	bl	80069b0 <I2C_ITError>
  }
}
 8005860:	bf00      	nop
 8005862:	3728      	adds	r7, #40	@ 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	70fb      	strb	r3, [r7, #3]
 80058c4:	4613      	mov	r3, r2
 80058c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800591e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005926:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005932:	2b00      	cmp	r3, #0
 8005934:	d150      	bne.n	80059d8 <I2C_MasterTransmit_TXE+0xc8>
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b21      	cmp	r3, #33	@ 0x21
 800593a:	d14d      	bne.n	80059d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b08      	cmp	r3, #8
 8005940:	d01d      	beq.n	800597e <I2C_MasterTransmit_TXE+0x6e>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b20      	cmp	r3, #32
 8005946:	d01a      	beq.n	800597e <I2C_MasterTransmit_TXE+0x6e>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800594e:	d016      	beq.n	800597e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800595e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2211      	movs	r2, #17
 8005964:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff ff76 	bl	8005868 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800597c:	e060      	b.n	8005a40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800598c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800599c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d107      	bne.n	80059c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fb fa09 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059c6:	e03b      	b.n	8005a40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff ff49 	bl	8005868 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059d6:	e033      	b.n	8005a40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b21      	cmp	r3, #33	@ 0x21
 80059dc:	d005      	beq.n	80059ea <I2C_MasterTransmit_TXE+0xda>
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	2b40      	cmp	r3, #64	@ 0x40
 80059e2:	d12d      	bne.n	8005a40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b22      	cmp	r3, #34	@ 0x22
 80059e8:	d12a      	bne.n	8005a40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d108      	bne.n	8005a06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005a04:	e01c      	b.n	8005a40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d103      	bne.n	8005a1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f88e 	bl	8005b34 <I2C_MemoryTransmit_TXE_BTF>
}
 8005a18:	e012      	b.n	8005a40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	781a      	ldrb	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005a3e:	e7ff      	b.n	8005a40 <I2C_MasterTransmit_TXE+0x130>
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b21      	cmp	r3, #33	@ 0x21
 8005a60:	d164      	bne.n	8005b2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d012      	beq.n	8005a92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005a90:	e04c      	b.n	8005b2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d01d      	beq.n	8005ad4 <I2C_MasterTransmit_BTF+0x8c>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d01a      	beq.n	8005ad4 <I2C_MasterTransmit_BTF+0x8c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005aa4:	d016      	beq.n	8005ad4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ab4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2211      	movs	r2, #17
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fecb 	bl	8005868 <HAL_I2C_MasterTxCpltCallback>
}
 8005ad2:	e02b      	b.n	8005b2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ae2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b40      	cmp	r3, #64	@ 0x40
 8005b0c:	d107      	bne.n	8005b1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb f95e 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 8005b1c:	e006      	b.n	8005b2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fe9e 	bl	8005868 <HAL_I2C_MasterTxCpltCallback>
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d11d      	bne.n	8005b88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d10b      	bne.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b64:	1c9a      	adds	r2, r3, #2
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005b6a:	e077      	b.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	121b      	asrs	r3, r3, #8
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b86:	e069      	b.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d10b      	bne.n	8005ba8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ba6:	e059      	b.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d152      	bne.n	8005c56 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b22      	cmp	r3, #34	@ 0x22
 8005bb4:	d10d      	bne.n	8005bd2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bc4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005bd0:	e044      	b.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d015      	beq.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b21      	cmp	r3, #33	@ 0x21
 8005be0:	d112      	bne.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005c06:	e029      	b.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d124      	bne.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b21      	cmp	r3, #33	@ 0x21
 8005c16:	d121      	bne.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c26:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fb f8c2 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 8005c54:	e002      	b.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fe fff0 	bl	8004c3c <I2C_Flush_DR>
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b22      	cmp	r3, #34	@ 0x22
 8005c76:	f040 80b9 	bne.w	8005dec <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d921      	bls.n	8005cd2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	f040 8096 	bne.w	8005dec <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cce:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005cd0:	e08c      	b.n	8005dec <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d07f      	beq.n	8005dda <I2C_MasterReceive_RXNE+0x176>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d002      	beq.n	8005ce6 <I2C_MasterReceive_RXNE+0x82>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d179      	bne.n	8005dda <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fc80 	bl	80075ec <I2C_WaitOnSTOPRequestThroughIT>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d14c      	bne.n	8005d8c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d00:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b40      	cmp	r3, #64	@ 0x40
 8005d4a:	d10a      	bne.n	8005d62 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fb f84c 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d60:	e044      	b.n	8005dec <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d002      	beq.n	8005d76 <I2C_MasterReceive_RXNE+0x112>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d103      	bne.n	8005d7e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d7c:	e002      	b.n	8005d84 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2212      	movs	r2, #18
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff fd79 	bl	800587c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d8a:	e02f      	b.n	8005dec <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691a      	ldr	r2, [r3, #16]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fd88 	bl	80058e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005dd8:	e008      	b.n	8005dec <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de8:	605a      	str	r2, [r3, #4]
}
 8005dea:	e7ff      	b.n	8005dec <I2C_MasterReceive_RXNE+0x188>
 8005dec:	bf00      	nop
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d11b      	bne.n	8005e44 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e1a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005e42:	e0c4      	b.n	8005fce <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d129      	bne.n	8005ea2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d00a      	beq.n	8005e7a <I2C_MasterReceive_BTF+0x86>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d007      	beq.n	8005e7a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e78:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005ea0:	e095      	b.n	8005fce <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d17d      	bne.n	8005fa8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d002      	beq.n	8005eb8 <I2C_MasterReceive_BTF+0xc4>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d108      	bne.n	8005eca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	e016      	b.n	8005ef8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d002      	beq.n	8005ed6 <I2C_MasterReceive_BTF+0xe2>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d108      	bne.n	8005ee8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e007      	b.n	8005ef8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005f52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d10a      	bne.n	8005f7e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fa ff3e 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 8005f7c:	e027      	b.n	8005fce <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d002      	beq.n	8005f92 <I2C_MasterReceive_BTF+0x19e>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d103      	bne.n	8005f9a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f98:	e002      	b.n	8005fa0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2212      	movs	r2, #18
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fc6b 	bl	800587c <HAL_I2C_MasterRxCpltCallback>
}
 8005fa6:	e012      	b.n	8005fce <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b40      	cmp	r3, #64	@ 0x40
 8005fe8:	d117      	bne.n	800601a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006002:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006004:	e067      	b.n	80060d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	b2da      	uxtb	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	611a      	str	r2, [r3, #16]
}
 8006018:	e05d      	b.n	80060d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006022:	d133      	bne.n	800608c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b21      	cmp	r3, #33	@ 0x21
 800602e:	d109      	bne.n	8006044 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006040:	611a      	str	r2, [r3, #16]
 8006042:	e008      	b.n	8006056 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006048:	b2db      	uxtb	r3, r3
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	b2da      	uxtb	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <I2C_Master_SB+0x92>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d108      	bne.n	800607a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d032      	beq.n	80060d6 <I2C_Master_SB+0x100>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d02d      	beq.n	80060d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006088:	605a      	str	r2, [r3, #4]
}
 800608a:	e024      	b.n	80060d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10e      	bne.n	80060b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006098:	b29b      	uxth	r3, r3
 800609a:	11db      	asrs	r3, r3, #7
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0306 	and.w	r3, r3, #6
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f063 030f 	orn	r3, r3, #15
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	611a      	str	r2, [r3, #16]
}
 80060b0:	e011      	b.n	80060d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d10d      	bne.n	80060d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060be:	b29b      	uxth	r3, r3
 80060c0:	11db      	asrs	r3, r3, #7
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0306 	and.w	r3, r3, #6
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	f063 030e 	orn	r3, r3, #14
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	611a      	str	r2, [r3, #16]
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <I2C_Master_ADD10+0x26>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d108      	bne.n	800611a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00c      	beq.n	800612a <I2C_Master_ADD10+0x48>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006128:	605a      	str	r2, [r3, #4]
  }
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006136:	b480      	push	{r7}
 8006138:	b091      	sub	sp, #68	@ 0x44
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006144:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b22      	cmp	r3, #34	@ 0x22
 800615e:	f040 8169 	bne.w	8006434 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <I2C_Master_ADDR+0x54>
 800616a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800616e:	2b40      	cmp	r3, #64	@ 0x40
 8006170:	d10b      	bne.n	800618a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006172:	2300      	movs	r3, #0
 8006174:	633b      	str	r3, [r7, #48]	@ 0x30
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	633b      	str	r3, [r7, #48]	@ 0x30
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	633b      	str	r3, [r7, #48]	@ 0x30
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	e160      	b.n	800644c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800618e:	2b00      	cmp	r3, #0
 8006190:	d11d      	bne.n	80061ce <I2C_Master_ADDR+0x98>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800619a:	d118      	bne.n	80061ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619c:	2300      	movs	r3, #0
 800619e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80061cc:	e13e      	b.n	800644c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d113      	bne.n	8006200 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d8:	2300      	movs	r3, #0
 80061da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e115      	b.n	800642c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	f040 808a 	bne.w	8006320 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800620c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006212:	d137      	bne.n	8006284 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006222:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800622e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006232:	d113      	bne.n	800625c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006242:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006244:	2300      	movs	r3, #0
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	e0e7      	b.n	800642c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800625c:	2300      	movs	r3, #0
 800625e:	623b      	str	r3, [r7, #32]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	623b      	str	r3, [r7, #32]
 8006270:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	e0d3      	b.n	800642c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	2b08      	cmp	r3, #8
 8006288:	d02e      	beq.n	80062e8 <I2C_Master_ADDR+0x1b2>
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	2b20      	cmp	r3, #32
 800628e:	d02b      	beq.n	80062e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006292:	2b12      	cmp	r3, #18
 8006294:	d102      	bne.n	800629c <I2C_Master_ADDR+0x166>
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	2b01      	cmp	r3, #1
 800629a:	d125      	bne.n	80062e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d00e      	beq.n	80062c0 <I2C_Master_ADDR+0x18a>
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d00b      	beq.n	80062c0 <I2C_Master_ADDR+0x18a>
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	2b10      	cmp	r3, #16
 80062ac:	d008      	beq.n	80062c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e007      	b.n	80062d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	e0a1      	b.n	800642c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f8:	2300      	movs	r3, #0
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e085      	b.n	800642c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d14d      	bne.n	80063c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632c:	2b04      	cmp	r3, #4
 800632e:	d016      	beq.n	800635e <I2C_Master_ADDR+0x228>
 8006330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006332:	2b02      	cmp	r3, #2
 8006334:	d013      	beq.n	800635e <I2C_Master_ADDR+0x228>
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	2b10      	cmp	r3, #16
 800633a:	d010      	beq.n	800635e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800634a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e007      	b.n	800636e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800636c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800637c:	d117      	bne.n	80063ae <I2C_Master_ADDR+0x278>
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006384:	d00b      	beq.n	800639e <I2C_Master_ADDR+0x268>
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	2b01      	cmp	r3, #1
 800638a:	d008      	beq.n	800639e <I2C_Master_ADDR+0x268>
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	2b08      	cmp	r3, #8
 8006390:	d005      	beq.n	800639e <I2C_Master_ADDR+0x268>
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	2b10      	cmp	r3, #16
 8006396:	d002      	beq.n	800639e <I2C_Master_ADDR+0x268>
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	2b20      	cmp	r3, #32
 800639c:	d107      	bne.n	80063ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	e032      	b.n	800642c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e4:	d117      	bne.n	8006416 <I2C_Master_ADDR+0x2e0>
 80063e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063ec:	d00b      	beq.n	8006406 <I2C_Master_ADDR+0x2d0>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d008      	beq.n	8006406 <I2C_Master_ADDR+0x2d0>
 80063f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d005      	beq.n	8006406 <I2C_Master_ADDR+0x2d0>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d002      	beq.n	8006406 <I2C_Master_ADDR+0x2d0>
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	2b20      	cmp	r3, #32
 8006404:	d107      	bne.n	8006416 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006414:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006416:	2300      	movs	r3, #0
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	613b      	str	r3, [r7, #16]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006432:	e00b      	b.n	800644c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
}
 800644a:	e7ff      	b.n	800644c <I2C_Master_ADDR+0x316>
 800644c:	bf00      	nop
 800644e:	3744      	adds	r7, #68	@ 0x44
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006466:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d02b      	beq.n	80064ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d114      	bne.n	80064ca <I2C_SlaveTransmit_TXE+0x72>
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2b29      	cmp	r3, #41	@ 0x29
 80064a4:	d111      	bne.n	80064ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2221      	movs	r2, #33	@ 0x21
 80064ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2228      	movs	r2, #40	@ 0x28
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff f9e3 	bl	8005890 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d011      	beq.n	8006508 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006522:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d02c      	beq.n	8006588 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d114      	bne.n	8006588 <I2C_SlaveReceive_RXNE+0x74>
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b2a      	cmp	r3, #42	@ 0x2a
 8006562:	d111      	bne.n	8006588 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006572:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2222      	movs	r2, #34	@ 0x22
 8006578:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2228      	movs	r2, #40	@ 0x28
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff f98e 	bl	80058a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d012      	beq.n	80065c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065ee:	2b28      	cmp	r3, #40	@ 0x28
 80065f0:	d127      	bne.n	8006642 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006600:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	089b      	lsrs	r3, r3, #2
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800660e:	2301      	movs	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	09db      	lsrs	r3, r3, #7
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	81bb      	strh	r3, [r7, #12]
 8006624:	e002      	b.n	800662c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006634:	89ba      	ldrh	r2, [r7, #12]
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff f93c 	bl	80058b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006640:	e00e      	b.n	8006660 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006676:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006686:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006688:	2300      	movs	r3, #0
 800668a:	60bb      	str	r3, [r7, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066c4:	d172      	bne.n	80067ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b22      	cmp	r3, #34	@ 0x22
 80066ca:	d002      	beq.n	80066d2 <I2C_Slave_STOPF+0x6a>
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80066d0:	d135      	bne.n	800673e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	f043 0204 	orr.w	r2, r3, #4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006704:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	4618      	mov	r0, r3
 800670c:	f7fd fea0 	bl	8004450 <HAL_DMA_GetState>
 8006710:	4603      	mov	r3, r0
 8006712:	2b01      	cmp	r3, #1
 8006714:	d049      	beq.n	80067aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671a:	4a69      	ldr	r2, [pc, #420]	@ (80068c0 <I2C_Slave_STOPF+0x258>)
 800671c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006722:	4618      	mov	r0, r3
 8006724:	f7fd fce8 	bl	80040f8 <HAL_DMA_Abort_IT>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d03d      	beq.n	80067aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800673c:	e035      	b.n	80067aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	b29a      	uxth	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	f043 0204 	orr.w	r2, r3, #4
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006770:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006776:	4618      	mov	r0, r3
 8006778:	f7fd fe6a 	bl	8004450 <HAL_DMA_GetState>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	d014      	beq.n	80067ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006786:	4a4e      	ldr	r2, [pc, #312]	@ (80068c0 <I2C_Slave_STOPF+0x258>)
 8006788:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678e:	4618      	mov	r0, r3
 8006790:	f7fd fcb2 	bl	80040f8 <HAL_DMA_Abort_IT>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d008      	beq.n	80067ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067a4:	4610      	mov	r0, r2
 80067a6:	4798      	blx	r3
 80067a8:	e000      	b.n	80067ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d03e      	beq.n	8006834 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d112      	bne.n	80067ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f4:	2b40      	cmp	r3, #64	@ 0x40
 80067f6:	d112      	bne.n	800681e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682c:	f043 0204 	orr.w	r2, r3, #4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8b7 	bl	80069b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006842:	e039      	b.n	80068b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b2a      	cmp	r3, #42	@ 0x2a
 8006848:	d109      	bne.n	800685e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2228      	movs	r2, #40	@ 0x28
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff f823 	bl	80058a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b28      	cmp	r3, #40	@ 0x28
 8006868:	d111      	bne.n	800688e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a15      	ldr	r2, [pc, #84]	@ (80068c4 <I2C_Slave_STOPF+0x25c>)
 800686e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff f824 	bl	80058d4 <HAL_I2C_ListenCpltCallback>
}
 800688c:	e014      	b.n	80068b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006892:	2b22      	cmp	r3, #34	@ 0x22
 8006894:	d002      	beq.n	800689c <I2C_Slave_STOPF+0x234>
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b22      	cmp	r3, #34	@ 0x22
 800689a:	d10d      	bne.n	80068b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fe fff6 	bl	80058a4 <HAL_I2C_SlaveRxCpltCallback>
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	08007149 	.word	0x08007149
 80068c4:	ffff0000 	.word	0xffff0000

080068c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d002      	beq.n	80068ea <I2C_Slave_AF+0x22>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d129      	bne.n	800693e <I2C_Slave_AF+0x76>
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	2b28      	cmp	r3, #40	@ 0x28
 80068ee:	d126      	bne.n	800693e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a2e      	ldr	r2, [pc, #184]	@ (80069ac <I2C_Slave_AF+0xe4>)
 80068f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006904:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800690e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800691e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fe ffcc 	bl	80058d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800693c:	e031      	b.n	80069a2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2b21      	cmp	r3, #33	@ 0x21
 8006942:	d129      	bne.n	8006998 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a19      	ldr	r2, [pc, #100]	@ (80069ac <I2C_Slave_AF+0xe4>)
 8006948:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2221      	movs	r2, #33	@ 0x21
 800694e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800696e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006978:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006988:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fe f956 	bl	8004c3c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe ff7d 	bl	8005890 <HAL_I2C_SlaveTxCpltCallback>
}
 8006996:	e004      	b.n	80069a2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069a0:	615a      	str	r2, [r3, #20]
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	ffff0000 	.word	0xffff0000

080069b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	2b10      	cmp	r3, #16
 80069cc:	d002      	beq.n	80069d4 <I2C_ITError+0x24>
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	2b40      	cmp	r3, #64	@ 0x40
 80069d2:	d10a      	bne.n	80069ea <I2C_ITError+0x3a>
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	2b22      	cmp	r3, #34	@ 0x22
 80069d8:	d107      	bne.n	80069ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80069f0:	2b28      	cmp	r3, #40	@ 0x28
 80069f2:	d107      	bne.n	8006a04 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2228      	movs	r2, #40	@ 0x28
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006a02:	e015      	b.n	8006a30 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a12:	d00a      	beq.n	8006a2a <I2C_ITError+0x7a>
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	2b60      	cmp	r3, #96	@ 0x60
 8006a18:	d007      	beq.n	8006a2a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a3e:	d162      	bne.n	8006b06 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a4e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d020      	beq.n	8006aa0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	4a6a      	ldr	r2, [pc, #424]	@ (8006c0c <I2C_ITError+0x25c>)
 8006a64:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fd fb44 	bl	80040f8 <HAL_DMA_Abort_IT>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8089 	beq.w	8006b8a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0201 	bic.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4798      	blx	r3
 8006a9e:	e074      	b.n	8006b8a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	4a59      	ldr	r2, [pc, #356]	@ (8006c0c <I2C_ITError+0x25c>)
 8006aa6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fd fb23 	bl	80040f8 <HAL_DMA_Abort_IT>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d068      	beq.n	8006b8a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac2:	2b40      	cmp	r3, #64	@ 0x40
 8006ac4:	d10b      	bne.n	8006ade <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0201 	bic.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
 8006b04:	e041      	b.n	8006b8a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b60      	cmp	r3, #96	@ 0x60
 8006b10:	d125      	bne.n	8006b5e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2a:	2b40      	cmp	r3, #64	@ 0x40
 8006b2c:	d10b      	bne.n	8006b46 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fe fed0 	bl	80058fc <HAL_I2C_AbortCpltCallback>
 8006b5c:	e015      	b.n	8006b8a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b68:	2b40      	cmp	r3, #64	@ 0x40
 8006b6a:	d10b      	bne.n	8006b84 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7fe feaf 	bl	80058e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10e      	bne.n	8006bb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006bc6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d113      	bne.n	8006c04 <I2C_ITError+0x254>
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b28      	cmp	r3, #40	@ 0x28
 8006be0:	d110      	bne.n	8006c04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a0a      	ldr	r2, [pc, #40]	@ (8006c10 <I2C_ITError+0x260>)
 8006be6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fe fe68 	bl	80058d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	08007149 	.word	0x08007149
 8006c10:	ffff0000 	.word	0xffff0000

08006c14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	461a      	mov	r2, r3
 8006c22:	4603      	mov	r3, r0
 8006c24:	817b      	strh	r3, [r7, #10]
 8006c26:	460b      	mov	r3, r1
 8006c28:	813b      	strh	r3, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 fb24 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c64:	d103      	bne.n	8006c6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e05f      	b.n	8006d32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c72:	897b      	ldrh	r3, [r7, #10]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	6a3a      	ldr	r2, [r7, #32]
 8006c86:	492d      	ldr	r1, [pc, #180]	@ (8006d3c <I2C_RequestMemoryWrite+0x128>)
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fb7f 	bl	800738c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e04c      	b.n	8006d32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb0:	6a39      	ldr	r1, [r7, #32]
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fc0a 	bl	80074cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00d      	beq.n	8006cda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d107      	bne.n	8006cd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e02b      	b.n	8006d32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d105      	bne.n	8006cec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ce0:	893b      	ldrh	r3, [r7, #8]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	611a      	str	r2, [r3, #16]
 8006cea:	e021      	b.n	8006d30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cec:	893b      	ldrh	r3, [r7, #8]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cfc:	6a39      	ldr	r1, [r7, #32]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fbe4 	bl	80074cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d107      	bne.n	8006d22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e005      	b.n	8006d32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d26:	893b      	ldrh	r3, [r7, #8]
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	00010002 	.word	0x00010002

08006d40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	4608      	mov	r0, r1
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	817b      	strh	r3, [r7, #10]
 8006d52:	460b      	mov	r3, r1
 8006d54:	813b      	strh	r3, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fa86 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00d      	beq.n	8006dae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da0:	d103      	bne.n	8006daa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006da8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e0aa      	b.n	8006f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dae:	897b      	ldrh	r3, [r7, #10]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006dbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	6a3a      	ldr	r2, [r7, #32]
 8006dc2:	4952      	ldr	r1, [pc, #328]	@ (8006f0c <I2C_RequestMemoryRead+0x1cc>)
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fae1 	bl	800738c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e097      	b.n	8006f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dec:	6a39      	ldr	r1, [r7, #32]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fb6c 	bl	80074cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d107      	bne.n	8006e12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e076      	b.n	8006f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d105      	bne.n	8006e28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e1c:	893b      	ldrh	r3, [r7, #8]
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	611a      	str	r2, [r3, #16]
 8006e26:	e021      	b.n	8006e6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e28:	893b      	ldrh	r3, [r7, #8]
 8006e2a:	0a1b      	lsrs	r3, r3, #8
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e38:	6a39      	ldr	r1, [r7, #32]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fb46 	bl	80074cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00d      	beq.n	8006e62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d107      	bne.n	8006e5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e050      	b.n	8006f04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e62:	893b      	ldrh	r3, [r7, #8]
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e6e:	6a39      	ldr	r1, [r7, #32]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fb2b 	bl	80074cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00d      	beq.n	8006e98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d107      	bne.n	8006e94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e035      	b.n	8006f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ea6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f9ef 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00d      	beq.n	8006edc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ece:	d103      	bne.n	8006ed8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e013      	b.n	8006f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006edc:	897b      	ldrh	r3, [r7, #10]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	6a3a      	ldr	r2, [r7, #32]
 8006ef0:	4906      	ldr	r1, [pc, #24]	@ (8006f0c <I2C_RequestMemoryRead+0x1cc>)
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fa4a 	bl	800738c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	00010002 	.word	0x00010002

08006f10 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f24:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f2c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006f42:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f50:	2200      	movs	r2, #0
 8006f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f60:	2200      	movs	r2, #0
 8006f62:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006f64:	7cfb      	ldrb	r3, [r7, #19]
 8006f66:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006f6a:	2b21      	cmp	r3, #33	@ 0x21
 8006f6c:	d007      	beq.n	8006f7e <I2C_DMAXferCplt+0x6e>
 8006f6e:	7cfb      	ldrb	r3, [r7, #19]
 8006f70:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006f74:	2b22      	cmp	r3, #34	@ 0x22
 8006f76:	d131      	bne.n	8006fdc <I2C_DMAXferCplt+0xcc>
 8006f78:	7cbb      	ldrb	r3, [r7, #18]
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d12e      	bne.n	8006fdc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f8c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f94:	7cfb      	ldrb	r3, [r7, #19]
 8006f96:	2b29      	cmp	r3, #41	@ 0x29
 8006f98:	d10a      	bne.n	8006fb0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2221      	movs	r2, #33	@ 0x21
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2228      	movs	r2, #40	@ 0x28
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fa8:	6978      	ldr	r0, [r7, #20]
 8006faa:	f7fe fc71 	bl	8005890 <HAL_I2C_SlaveTxCpltCallback>
 8006fae:	e00c      	b.n	8006fca <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006fb0:	7cfb      	ldrb	r3, [r7, #19]
 8006fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fb4:	d109      	bne.n	8006fca <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2222      	movs	r2, #34	@ 0x22
 8006fba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2228      	movs	r2, #40	@ 0x28
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fc4:	6978      	ldr	r0, [r7, #20]
 8006fc6:	f7fe fc6d 	bl	80058a4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006fd8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006fda:	e074      	b.n	80070c6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d06e      	beq.n	80070c6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d107      	bne.n	8007002 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007000:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007010:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007018:	d009      	beq.n	800702e <I2C_DMAXferCplt+0x11e>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d006      	beq.n	800702e <I2C_DMAXferCplt+0x11e>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007026:	d002      	beq.n	800702e <I2C_DMAXferCplt+0x11e>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b20      	cmp	r3, #32
 800702c:	d107      	bne.n	800703e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800703c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800704c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800705c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2200      	movs	r2, #0
 8007062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800706c:	6978      	ldr	r0, [r7, #20]
 800706e:	f7fe fc3b 	bl	80058e8 <HAL_I2C_ErrorCallback>
}
 8007072:	e028      	b.n	80070c6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b40      	cmp	r3, #64	@ 0x40
 8007086:	d10a      	bne.n	800709e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007096:	6978      	ldr	r0, [r7, #20]
 8007098:	f7f9 feae 	bl	8000df8 <HAL_I2C_MemRxCpltCallback>
}
 800709c:	e013      	b.n	80070c6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d002      	beq.n	80070b2 <I2C_DMAXferCplt+0x1a2>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d103      	bne.n	80070ba <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2200      	movs	r2, #0
 80070b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80070b8:	e002      	b.n	80070c0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2212      	movs	r2, #18
 80070be:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80070c0:	6978      	ldr	r0, [r7, #20]
 80070c2:	f7fe fbdb 	bl	800587c <HAL_I2C_MasterRxCpltCallback>
}
 80070c6:	bf00      	nop
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e8:	2200      	movs	r2, #0
 80070ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f8:	2200      	movs	r2, #0
 80070fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fd f9b5 	bl	800446c <HAL_DMA_GetError>
 8007102:	4603      	mov	r3, r0
 8007104:	2b02      	cmp	r3, #2
 8007106:	d01b      	beq.n	8007140 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007116:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2220      	movs	r2, #32
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007132:	f043 0210 	orr.w	r2, r3, #16
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7fe fbd4 	bl	80058e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007158:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007160:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007162:	4b4b      	ldr	r3, [pc, #300]	@ (8007290 <I2C_DMAAbort+0x148>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	4a4a      	ldr	r2, [pc, #296]	@ (8007294 <I2C_DMAAbort+0x14c>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	0a1a      	lsrs	r2, r3, #8
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	00da      	lsls	r2, r3, #3
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	f043 0220 	orr.w	r2, r3, #32
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800718e:	e00a      	b.n	80071a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3b01      	subs	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a4:	d0ea      	beq.n	800717c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b2:	2200      	movs	r2, #0
 80071b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c2:	2200      	movs	r2, #0
 80071c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2200      	movs	r2, #0
 80071da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071e8:	2200      	movs	r2, #0
 80071ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f8:	2200      	movs	r2, #0
 80071fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b60      	cmp	r3, #96	@ 0x60
 8007216:	d10e      	bne.n	8007236 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2200      	movs	r2, #0
 800722c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800722e:	6978      	ldr	r0, [r7, #20]
 8007230:	f7fe fb64 	bl	80058fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007234:	e027      	b.n	8007286 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007236:	7cfb      	ldrb	r3, [r7, #19]
 8007238:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800723c:	2b28      	cmp	r3, #40	@ 0x28
 800723e:	d117      	bne.n	8007270 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800725e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2228      	movs	r2, #40	@ 0x28
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800726e:	e007      	b.n	8007280 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007280:	6978      	ldr	r0, [r7, #20]
 8007282:	f7fe fb31 	bl	80058e8 <HAL_I2C_ErrorCallback>
}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000030 	.word	0x20000030
 8007294:	14f8b589 	.word	0x14f8b589

08007298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	4613      	mov	r3, r2
 80072a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072a8:	e048      	b.n	800733c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d044      	beq.n	800733c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b2:	f7fb ffb9 	bl	8003228 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d302      	bcc.n	80072c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d139      	bne.n	800733c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d10d      	bne.n	80072ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	43da      	mvns	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4013      	ands	r3, r2
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf0c      	ite	eq
 80072e4:	2301      	moveq	r3, #1
 80072e6:	2300      	movne	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	e00c      	b.n	8007308 <I2C_WaitOnFlagUntilTimeout+0x70>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	43da      	mvns	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4013      	ands	r3, r2
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bf0c      	ite	eq
 8007300:	2301      	moveq	r3, #1
 8007302:	2300      	movne	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	429a      	cmp	r2, r3
 800730c:	d116      	bne.n	800733c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007328:	f043 0220 	orr.w	r2, r3, #32
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e023      	b.n	8007384 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b01      	cmp	r3, #1
 8007344:	d10d      	bne.n	8007362 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	43da      	mvns	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4013      	ands	r3, r2
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	e00c      	b.n	800737c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	43da      	mvns	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4013      	ands	r3, r2
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	bf0c      	ite	eq
 8007374:	2301      	moveq	r3, #1
 8007376:	2300      	movne	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	461a      	mov	r2, r3
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	429a      	cmp	r2, r3
 8007380:	d093      	beq.n	80072aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800739a:	e071      	b.n	8007480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073aa:	d123      	bne.n	80073f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e0:	f043 0204 	orr.w	r2, r3, #4
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e067      	b.n	80074c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fa:	d041      	beq.n	8007480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073fc:	f7fb ff14 	bl	8003228 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	429a      	cmp	r2, r3
 800740a:	d302      	bcc.n	8007412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d136      	bne.n	8007480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b01      	cmp	r3, #1
 800741a:	d10c      	bne.n	8007436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	43da      	mvns	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4013      	ands	r3, r2
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	bf14      	ite	ne
 800742e:	2301      	movne	r3, #1
 8007430:	2300      	moveq	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	e00b      	b.n	800744e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	43da      	mvns	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4013      	ands	r3, r2
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf14      	ite	ne
 8007448:	2301      	movne	r3, #1
 800744a:	2300      	moveq	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d016      	beq.n	8007480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	f043 0220 	orr.w	r2, r3, #32
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e021      	b.n	80074c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	0c1b      	lsrs	r3, r3, #16
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d10c      	bne.n	80074a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	43da      	mvns	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	e00b      	b.n	80074bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	43da      	mvns	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4013      	ands	r3, r2
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf14      	ite	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	2300      	moveq	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f47f af6d 	bne.w	800739c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074d8:	e034      	b.n	8007544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f8b8 	bl	8007650 <I2C_IsAcknowledgeFailed>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e034      	b.n	8007554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d028      	beq.n	8007544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f2:	f7fb fe99 	bl	8003228 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d302      	bcc.n	8007508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d11d      	bne.n	8007544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007512:	2b80      	cmp	r3, #128	@ 0x80
 8007514:	d016      	beq.n	8007544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2220      	movs	r2, #32
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007530:	f043 0220 	orr.w	r2, r3, #32
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e007      	b.n	8007554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754e:	2b80      	cmp	r3, #128	@ 0x80
 8007550:	d1c3      	bne.n	80074da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007568:	e034      	b.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f870 	bl	8007650 <I2C_IsAcknowledgeFailed>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e034      	b.n	80075e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007580:	d028      	beq.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007582:	f7fb fe51 	bl	8003228 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d11d      	bne.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d016      	beq.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	f043 0220 	orr.w	r2, r3, #32
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e007      	b.n	80075e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d1c3      	bne.n	800756a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80075f8:	4b13      	ldr	r3, [pc, #76]	@ (8007648 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	08db      	lsrs	r3, r3, #3
 80075fe:	4a13      	ldr	r2, [pc, #76]	@ (800764c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	0a1a      	lsrs	r2, r3, #8
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b01      	subs	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d107      	bne.n	800762a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	f043 0220 	orr.w	r2, r3, #32
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e008      	b.n	800763c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007638:	d0e9      	beq.n	800760e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	20000030 	.word	0x20000030
 800764c:	14f8b589 	.word	0x14f8b589

08007650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007666:	d11b      	bne.n	80076a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768c:	f043 0204 	orr.w	r2, r3, #4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80076be:	d103      	bne.n	80076c8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80076c6:	e007      	b.n	80076d8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80076d0:	d102      	bne.n	80076d8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2208      	movs	r2, #8
 80076d6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e101      	b.n	80078fa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f006 f935 	bl	800d980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2203      	movs	r2, #3
 800771a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007724:	d102      	bne.n	800772c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4618      	mov	r0, r3
 8007732:	f002 fc8c 	bl	800a04e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7c1a      	ldrb	r2, [r3, #16]
 800773e:	f88d 2000 	strb.w	r2, [sp]
 8007742:	3304      	adds	r3, #4
 8007744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007746:	f002 fb6b 	bl	8009e20 <USB_CoreInit>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0ce      	b.n	80078fa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2100      	movs	r1, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f002 fc84 	bl	800a070 <USB_SetCurrentMode>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2202      	movs	r2, #2
 8007772:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e0bf      	b.n	80078fa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
 800777e:	e04a      	b.n	8007816 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007780:	7bfa      	ldrb	r2, [r7, #15]
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	3315      	adds	r3, #21
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007794:	7bfa      	ldrb	r2, [r7, #15]
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	4613      	mov	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	3314      	adds	r3, #20
 80077a4:	7bfa      	ldrb	r2, [r7, #15]
 80077a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80077a8:	7bfa      	ldrb	r2, [r7, #15]
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	b298      	uxth	r0, r3
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	332e      	adds	r3, #46	@ 0x2e
 80077bc:	4602      	mov	r2, r0
 80077be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80077c0:	7bfa      	ldrb	r2, [r7, #15]
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	3318      	adds	r3, #24
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80077d4:	7bfa      	ldrb	r2, [r7, #15]
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	331c      	adds	r3, #28
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80077e8:	7bfa      	ldrb	r2, [r7, #15]
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3320      	adds	r3, #32
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80077fc:	7bfa      	ldrb	r2, [r7, #15]
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	3324      	adds	r3, #36	@ 0x24
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	3301      	adds	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	791b      	ldrb	r3, [r3, #4]
 800781a:	7bfa      	ldrb	r2, [r7, #15]
 800781c:	429a      	cmp	r2, r3
 800781e:	d3af      	bcc.n	8007780 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	e044      	b.n	80078b0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007826:	7bfa      	ldrb	r2, [r7, #15]
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800783c:	7bfa      	ldrb	r2, [r7, #15]
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4613      	mov	r3, r2
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800784e:	7bfa      	ldrb	r2, [r7, #15]
 8007850:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007868:	7bfa      	ldrb	r2, [r7, #15]
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800787e:	7bfa      	ldrb	r2, [r7, #15]
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007894:	7bfa      	ldrb	r2, [r7, #15]
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	4613      	mov	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	3301      	adds	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	791b      	ldrb	r3, [r3, #4]
 80078b4:	7bfa      	ldrb	r2, [r7, #15]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d3b5      	bcc.n	8007826 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7c1a      	ldrb	r2, [r3, #16]
 80078c2:	f88d 2000 	strb.w	r2, [sp]
 80078c6:	3304      	adds	r3, #4
 80078c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078ca:	f002 fc1d 	bl	800a108 <USB_DevInit>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e00c      	b.n	80078fa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f003 fc67 	bl	800b1c6 <USB_DevDisconnect>

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007916:	2b01      	cmp	r3, #1
 8007918:	d101      	bne.n	800791e <HAL_PCD_Start+0x1c>
 800791a:	2302      	movs	r3, #2
 800791c:	e022      	b.n	8007964 <HAL_PCD_Start+0x62>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007936:	2b01      	cmp	r3, #1
 8007938:	d105      	bne.n	8007946 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4618      	mov	r0, r3
 800794c:	f002 fb6e 	bl	800a02c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f003 fc15 	bl	800b184 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b08d      	sub	sp, #52	@ 0x34
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f003 fcd3 	bl	800b32e <USB_GetMode>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 848c 	bne.w	80082a8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f003 fc37 	bl	800b208 <USB_ReadInterrupts>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8482 	beq.w	80082a6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f003 fc24 	bl	800b208 <USB_ReadInterrupts>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d107      	bne.n	80079da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	695a      	ldr	r2, [r3, #20]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f002 0202 	and.w	r2, r2, #2
 80079d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f003 fc12 	bl	800b208 <USB_ReadInterrupts>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2b10      	cmp	r3, #16
 80079ec:	d161      	bne.n	8007ab2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	699a      	ldr	r2, [r3, #24]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0210 	bic.w	r2, r2, #16
 80079fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f003 020f 	and.w	r2, r3, #15
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4413      	add	r3, r2
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007a24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a28:	d124      	bne.n	8007a74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007a30:	4013      	ands	r3, r2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d035      	beq.n	8007aa2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	6a38      	ldr	r0, [r7, #32]
 8007a4a:	f003 fa49 	bl	800aee0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	091b      	lsrs	r3, r3, #4
 8007a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a5a:	441a      	add	r2, r3
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	695a      	ldr	r2, [r3, #20]
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	091b      	lsrs	r3, r3, #4
 8007a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a6c:	441a      	add	r2, r3
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	615a      	str	r2, [r3, #20]
 8007a72:	e016      	b.n	8007aa2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007a7a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007a7e:	d110      	bne.n	8007aa2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a86:	2208      	movs	r2, #8
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6a38      	ldr	r0, [r7, #32]
 8007a8c:	f003 fa28 	bl	800aee0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	695a      	ldr	r2, [r3, #20]
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	091b      	lsrs	r3, r3, #4
 8007a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a9c:	441a      	add	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699a      	ldr	r2, [r3, #24]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f042 0210 	orr.w	r2, r2, #16
 8007ab0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f003 fba6 	bl	800b208 <USB_ReadInterrupts>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ac2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ac6:	f040 80a7 	bne.w	8007c18 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f003 fbab 	bl	800b22e <USB_ReadDevAllOutEpInterrupt>
 8007ad8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007ada:	e099      	b.n	8007c10 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 808e 	beq.w	8007c04 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f003 fbcf 	bl	800b296 <USB_ReadDevOutEPInterrupt>
 8007af8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00c      	beq.n	8007b1e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b10:	461a      	mov	r2, r3
 8007b12:	2301      	movs	r3, #1
 8007b14:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007b16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fea3 	bl	8008864 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00c      	beq.n	8007b42 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b34:	461a      	mov	r2, r3
 8007b36:	2308      	movs	r3, #8
 8007b38:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007b3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 ff79 	bl	8008a34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b58:	461a      	mov	r2, r3
 8007b5a:	2310      	movs	r3, #16
 8007b5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d030      	beq.n	8007bca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b70:	2b80      	cmp	r3, #128	@ 0x80
 8007b72:	d109      	bne.n	8007b88 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b86:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	4413      	add	r3, r2
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	78db      	ldrb	r3, [r3, #3]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d108      	bne.n	8007bb8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f005 ffe0 	bl	800db78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d008      	beq.n	8007be6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be0:	461a      	mov	r2, r3
 8007be2:	2320      	movs	r3, #32
 8007be4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	3301      	adds	r3, #1
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	085b      	lsrs	r3, r3, #1
 8007c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f47f af62 	bne.w	8007adc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f003 faf3 	bl	800b208 <USB_ReadInterrupts>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c2c:	f040 80db 	bne.w	8007de6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f003 fb14 	bl	800b262 <USB_ReadDevAllInEpInterrupt>
 8007c3a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007c40:	e0cd      	b.n	8007dde <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 80c2 	beq.w	8007dd2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f003 fb3a 	bl	800b2d2 <USB_ReadDevInEPInterrupt>
 8007c5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d057      	beq.n	8007d1a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	2201      	movs	r2, #1
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	43db      	mvns	r3, r3
 8007c84:	69f9      	ldr	r1, [r7, #28]
 8007c86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	799b      	ldrb	r3, [r3, #6]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d132      	bne.n	8007d0e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cac:	4613      	mov	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3320      	adds	r3, #32
 8007cb8:	6819      	ldr	r1, [r3, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4403      	add	r3, r0
 8007cc8:	331c      	adds	r3, #28
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4419      	add	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4403      	add	r3, r0
 8007cdc:	3320      	adds	r3, #32
 8007cde:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d113      	bne.n	8007d0e <HAL_PCD_IRQHandler+0x3a2>
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	440b      	add	r3, r1
 8007cf4:	3324      	adds	r3, #36	@ 0x24
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d108      	bne.n	8007d0e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d06:	461a      	mov	r2, r3
 8007d08:	2101      	movs	r1, #1
 8007d0a:	f003 fb41 	bl	800b390 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f005 feb4 	bl	800da82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d008      	beq.n	8007d36 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d30:	461a      	mov	r2, r3
 8007d32:	2308      	movs	r3, #8
 8007d34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f003 0310 	and.w	r3, r3, #16
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	2310      	movs	r3, #16
 8007d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2340      	movs	r3, #64	@ 0x40
 8007d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d023      	beq.n	8007dc0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007d78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d7a:	6a38      	ldr	r0, [r7, #32]
 8007d7c:	f002 fb28 	bl	800a3d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d82:	4613      	mov	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	3310      	adds	r3, #16
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	4413      	add	r3, r2
 8007d90:	3304      	adds	r3, #4
 8007d92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	78db      	ldrb	r3, [r3, #3]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d108      	bne.n	8007dae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f005 fef7 	bl	800db9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dba:	461a      	mov	r2, r3
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007dca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fcbd 	bl	800874c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dda:	085b      	lsrs	r3, r3, #1
 8007ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f47f af2e 	bne.w	8007c42 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f003 fa0c 	bl	800b208 <USB_ReadInterrupts>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007df6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dfa:	d122      	bne.n	8007e42 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	69fa      	ldr	r2, [r7, #28]
 8007e06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d108      	bne.n	8007e2c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e22:	2100      	movs	r1, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fea3 	bl	8008b70 <HAL_PCDEx_LPM_Callback>
 8007e2a:	e002      	b.n	8007e32 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f005 fe95 	bl	800db5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f003 f9de 	bl	800b208 <USB_ReadInterrupts>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e56:	d112      	bne.n	8007e7e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d102      	bne.n	8007e6e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f005 fe51 	bl	800db10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695a      	ldr	r2, [r3, #20]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007e7c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f003 f9c0 	bl	800b208 <USB_ReadInterrupts>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e92:	f040 80b7 	bne.w	8008004 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ea4:	f023 0301 	bic.w	r3, r3, #1
 8007ea8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2110      	movs	r1, #16
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f002 fa8d 	bl	800a3d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eba:	e046      	b.n	8007f4a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ece:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007eee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007efc:	461a      	mov	r2, r3
 8007efe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f02:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f34:	0151      	lsls	r1, r2, #5
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	440a      	add	r2, r1
 8007f3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f42:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f46:	3301      	adds	r3, #1
 8007f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	791b      	ldrb	r3, [r3, #4]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d3b2      	bcc.n	8007ebc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f64:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007f68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7bdb      	ldrb	r3, [r3, #15]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d016      	beq.n	8007fa0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f7c:	69fa      	ldr	r2, [r7, #28]
 8007f7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f82:	f043 030b 	orr.w	r3, r3, #11
 8007f86:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f98:	f043 030b 	orr.w	r3, r3, #11
 8007f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f9e:	e015      	b.n	8007fcc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007fb2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007fb6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fc6:	f043 030b 	orr.w	r3, r3, #11
 8007fca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fda:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007fde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f003 f9ce 	bl	800b390 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	695a      	ldr	r2, [r3, #20]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f003 f8fd 	bl	800b208 <USB_ReadInterrupts>
 800800e:	4603      	mov	r3, r0
 8008010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008018:	d123      	bne.n	8008062 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f003 f993 	bl	800b34a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4618      	mov	r0, r3
 800802a:	f002 fa4a 	bl	800a4c2 <USB_GetDevSpeed>
 800802e:	4603      	mov	r3, r0
 8008030:	461a      	mov	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681c      	ldr	r4, [r3, #0]
 800803a:	f001 f9c9 	bl	80093d0 <HAL_RCC_GetHCLKFreq>
 800803e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008044:	461a      	mov	r2, r3
 8008046:	4620      	mov	r0, r4
 8008048:	f001 ff4e 	bl	8009ee8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f005 fd40 	bl	800dad2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008060:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f003 f8ce 	bl	800b208 <USB_ReadInterrupts>
 800806c:	4603      	mov	r3, r0
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b08      	cmp	r3, #8
 8008074:	d10a      	bne.n	800808c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f005 fd1d 	bl	800dab6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695a      	ldr	r2, [r3, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f002 0208 	and.w	r2, r2, #8
 800808a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f003 f8b9 	bl	800b208 <USB_ReadInterrupts>
 8008096:	4603      	mov	r3, r0
 8008098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800809c:	2b80      	cmp	r3, #128	@ 0x80
 800809e:	d123      	bne.n	80080e8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080ac:	2301      	movs	r3, #1
 80080ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b0:	e014      	b.n	80080dc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b6:	4613      	mov	r3, r2
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	440b      	add	r3, r1
 80080c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d105      	bne.n	80080d6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80080ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fb0a 	bl	80086ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	3301      	adds	r3, #1
 80080da:	627b      	str	r3, [r7, #36]	@ 0x24
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	791b      	ldrb	r3, [r3, #4]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d3e4      	bcc.n	80080b2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f003 f88b 	bl	800b208 <USB_ReadInterrupts>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080fc:	d13c      	bne.n	8008178 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080fe:	2301      	movs	r3, #1
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
 8008102:	e02b      	b.n	800815c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	3318      	adds	r3, #24
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d115      	bne.n	8008156 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800812a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800812c:	2b00      	cmp	r3, #0
 800812e:	da12      	bge.n	8008156 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008134:	4613      	mov	r3, r2
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	3317      	adds	r3, #23
 8008140:	2201      	movs	r2, #1
 8008142:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800814c:	b2db      	uxtb	r3, r3
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 faca 	bl	80086ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	3301      	adds	r3, #1
 800815a:	627b      	str	r3, [r7, #36]	@ 0x24
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	791b      	ldrb	r3, [r3, #4]
 8008160:	461a      	mov	r2, r3
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	4293      	cmp	r3, r2
 8008166:	d3cd      	bcc.n	8008104 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695a      	ldr	r2, [r3, #20]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f003 f843 	bl	800b208 <USB_ReadInterrupts>
 8008182:	4603      	mov	r3, r0
 8008184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008188:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800818c:	d156      	bne.n	800823c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800818e:	2301      	movs	r3, #1
 8008190:	627b      	str	r3, [r7, #36]	@ 0x24
 8008192:	e045      	b.n	8008220 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a8:	4613      	mov	r3, r2
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d12e      	bne.n	800821a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081be:	2b00      	cmp	r3, #0
 80081c0:	da2b      	bge.n	800821a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	0c1a      	lsrs	r2, r3, #16
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80081cc:	4053      	eors	r3, r2
 80081ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d121      	bne.n	800821a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80081e8:	2201      	movs	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008216:	6053      	str	r3, [r2, #4]
            break;
 8008218:	e008      	b.n	800822c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	3301      	adds	r3, #1
 800821e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	461a      	mov	r2, r3
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	4293      	cmp	r3, r2
 800822a:	d3b3      	bcc.n	8008194 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695a      	ldr	r2, [r3, #20]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800823a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f002 ffe1 	bl	800b208 <USB_ReadInterrupts>
 8008246:	4603      	mov	r3, r0
 8008248:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800824c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008250:	d10a      	bne.n	8008268 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f005 fcb4 	bl	800dbc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695a      	ldr	r2, [r3, #20]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4618      	mov	r0, r3
 800826e:	f002 ffcb 	bl	800b208 <USB_ReadInterrupts>
 8008272:	4603      	mov	r3, r0
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b04      	cmp	r3, #4
 800827a:	d115      	bne.n	80082a8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f005 fca4 	bl	800dbdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6859      	ldr	r1, [r3, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	605a      	str	r2, [r3, #4]
 80082a4:	e000      	b.n	80082a8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80082a6:	bf00      	nop
    }
  }
}
 80082a8:	3734      	adds	r7, #52	@ 0x34
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd90      	pop	{r4, r7, pc}

080082ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_PCD_SetAddress+0x1a>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e012      	b.n	80082ee <HAL_PCD_SetAddress+0x40>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	78fa      	ldrb	r2, [r7, #3]
 80082d4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	4611      	mov	r1, r2
 80082de:	4618      	mov	r0, r3
 80082e0:	f002 ff2a 	bl	800b138 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	4608      	mov	r0, r1
 8008300:	4611      	mov	r1, r2
 8008302:	461a      	mov	r2, r3
 8008304:	4603      	mov	r3, r0
 8008306:	70fb      	strb	r3, [r7, #3]
 8008308:	460b      	mov	r3, r1
 800830a:	803b      	strh	r3, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008318:	2b00      	cmp	r3, #0
 800831a:	da0f      	bge.n	800833c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	f003 020f 	and.w	r2, r3, #15
 8008322:	4613      	mov	r3, r2
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	3310      	adds	r3, #16
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	3304      	adds	r3, #4
 8008332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2201      	movs	r2, #1
 8008338:	705a      	strb	r2, [r3, #1]
 800833a:	e00f      	b.n	800835c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	f003 020f 	and.w	r2, r3, #15
 8008342:	4613      	mov	r3, r2
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	3304      	adds	r3, #4
 8008354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	b2da      	uxtb	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008368:	883b      	ldrh	r3, [r7, #0]
 800836a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	78ba      	ldrb	r2, [r7, #2]
 8008376:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	785b      	ldrb	r3, [r3, #1]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d004      	beq.n	800838a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800838a:	78bb      	ldrb	r3, [r7, #2]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d102      	bne.n	8008396 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_PCD_EP_Open+0xae>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e00e      	b.n	80083c2 <HAL_PCD_EP_Open+0xcc>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68f9      	ldr	r1, [r7, #12]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f002 f8aa 	bl	800a50c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80083c0:	7afb      	ldrb	r3, [r7, #11]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	da0f      	bge.n	80083fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	f003 020f 	and.w	r2, r3, #15
 80083e4:	4613      	mov	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	3310      	adds	r3, #16
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	4413      	add	r3, r2
 80083f2:	3304      	adds	r3, #4
 80083f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	705a      	strb	r2, [r3, #1]
 80083fc:	e00f      	b.n	800841e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	f003 020f 	and.w	r2, r3, #15
 8008404:	4613      	mov	r3, r2
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	4413      	add	r3, r2
 8008414:	3304      	adds	r3, #4
 8008416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	b2da      	uxtb	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_PCD_EP_Close+0x6e>
 8008434:	2302      	movs	r3, #2
 8008436:	e00e      	b.n	8008456 <HAL_PCD_EP_Close+0x8c>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68f9      	ldr	r1, [r7, #12]
 8008446:	4618      	mov	r0, r3
 8008448:	f002 f8e8 	bl	800a61c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b086      	sub	sp, #24
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	460b      	mov	r3, r1
 800846c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800846e:	7afb      	ldrb	r3, [r7, #11]
 8008470:	f003 020f 	and.w	r2, r3, #15
 8008474:	4613      	mov	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	3304      	adds	r3, #4
 8008486:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2200      	movs	r2, #0
 8008498:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2200      	movs	r2, #0
 800849e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084a0:	7afb      	ldrb	r3, [r7, #11]
 80084a2:	f003 030f 	and.w	r3, r3, #15
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	799b      	ldrb	r3, [r3, #6]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d102      	bne.n	80084ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	799b      	ldrb	r3, [r3, #6]
 80084c2:	461a      	mov	r2, r3
 80084c4:	6979      	ldr	r1, [r7, #20]
 80084c6:	f002 f985 	bl	800a7d4 <USB_EPStartXfer>

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	f003 020f 	and.w	r2, r3, #15
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80084f6:	681b      	ldr	r3, [r3, #0]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	607a      	str	r2, [r7, #4]
 800850e:	603b      	str	r3, [r7, #0]
 8008510:	460b      	mov	r3, r1
 8008512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	f003 020f 	and.w	r2, r3, #15
 800851a:	4613      	mov	r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	3310      	adds	r3, #16
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	3304      	adds	r3, #4
 800852a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2200      	movs	r2, #0
 800853c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2201      	movs	r2, #1
 8008542:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008544:	7afb      	ldrb	r3, [r7, #11]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	b2da      	uxtb	r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	799b      	ldrb	r3, [r3, #6]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d102      	bne.n	800855e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	799b      	ldrb	r3, [r3, #6]
 8008566:	461a      	mov	r2, r3
 8008568:	6979      	ldr	r1, [r7, #20]
 800856a:	f002 f933 	bl	800a7d4 <USB_EPStartXfer>

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	7912      	ldrb	r2, [r2, #4]
 800858e:	4293      	cmp	r3, r2
 8008590:	d901      	bls.n	8008596 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e04f      	b.n	8008636 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800859a:	2b00      	cmp	r3, #0
 800859c:	da0f      	bge.n	80085be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800859e:	78fb      	ldrb	r3, [r7, #3]
 80085a0:	f003 020f 	and.w	r2, r3, #15
 80085a4:	4613      	mov	r3, r2
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	3310      	adds	r3, #16
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	3304      	adds	r3, #4
 80085b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	705a      	strb	r2, [r3, #1]
 80085bc:	e00d      	b.n	80085da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	4613      	mov	r3, r2
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	4413      	add	r3, r2
 80085d0:	3304      	adds	r3, #4
 80085d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2201      	movs	r2, #1
 80085de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_PCD_EP_SetStall+0x82>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e01d      	b.n	8008636 <HAL_PCD_EP_SetStall+0xbe>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	4618      	mov	r0, r3
 800860a:	f002 fcc1 	bl	800af90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	2b00      	cmp	r3, #0
 8008616:	d109      	bne.n	800862c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7999      	ldrb	r1, [r3, #6]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008626:	461a      	mov	r2, r3
 8008628:	f002 feb2 	bl	800b390 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	7912      	ldrb	r2, [r2, #4]
 8008654:	4293      	cmp	r3, r2
 8008656:	d901      	bls.n	800865c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e042      	b.n	80086e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800865c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da0f      	bge.n	8008684 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	f003 020f 	and.w	r2, r3, #15
 800866a:	4613      	mov	r3, r2
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	3310      	adds	r3, #16
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	3304      	adds	r3, #4
 800867a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	705a      	strb	r2, [r3, #1]
 8008682:	e00f      	b.n	80086a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	f003 020f 	and.w	r2, r3, #15
 800868a:	4613      	mov	r3, r2
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	4413      	add	r3, r2
 800869a:	3304      	adds	r3, #4
 800869c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_PCD_EP_ClrStall+0x86>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e00e      	b.n	80086e2 <HAL_PCD_EP_ClrStall+0xa4>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68f9      	ldr	r1, [r7, #12]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f002 fcca 	bl	800b06c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80086f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	da0c      	bge.n	8008718 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	f003 020f 	and.w	r2, r3, #15
 8008704:	4613      	mov	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	3310      	adds	r3, #16
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	4413      	add	r3, r2
 8008712:	3304      	adds	r3, #4
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	e00c      	b.n	8008732 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	f003 020f 	and.w	r2, r3, #15
 800871e:	4613      	mov	r3, r2
 8008720:	00db      	lsls	r3, r3, #3
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	3304      	adds	r3, #4
 8008730:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68f9      	ldr	r1, [r7, #12]
 8008738:	4618      	mov	r0, r3
 800873a:	f002 fae9 	bl	800ad10 <USB_EPStopXfer>
 800873e:	4603      	mov	r3, r0
 8008740:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008742:	7afb      	ldrb	r3, [r7, #11]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	@ 0x28
 8008750:	af02      	add	r7, sp, #8
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	4613      	mov	r3, r2
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	3310      	adds	r3, #16
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4413      	add	r3, r2
 8008770:	3304      	adds	r3, #4
 8008772:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	429a      	cmp	r2, r3
 800877e:	d901      	bls.n	8008784 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e06b      	b.n	800885c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	691a      	ldr	r2, [r3, #16]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	429a      	cmp	r2, r3
 8008798:	d902      	bls.n	80087a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	3303      	adds	r3, #3
 80087a4:	089b      	lsrs	r3, r3, #2
 80087a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087a8:	e02a      	b.n	8008800 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d902      	bls.n	80087c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	3303      	adds	r3, #3
 80087ca:	089b      	lsrs	r3, r3, #2
 80087cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	68d9      	ldr	r1, [r3, #12]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	4603      	mov	r3, r0
 80087e2:	6978      	ldr	r0, [r7, #20]
 80087e4:	f002 fb3e 	bl	800ae64 <USB_WritePacket>

    ep->xfer_buff  += len;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	441a      	add	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	695a      	ldr	r2, [r3, #20]
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	441a      	add	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	429a      	cmp	r2, r3
 8008814:	d809      	bhi.n	800882a <PCD_WriteEmptyTxFifo+0xde>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800881e:	429a      	cmp	r2, r3
 8008820:	d203      	bcs.n	800882a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1bf      	bne.n	80087aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	429a      	cmp	r2, r3
 8008834:	d811      	bhi.n	800885a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	2201      	movs	r2, #1
 800883e:	fa02 f303 	lsl.w	r3, r2, r3
 8008842:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800884a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	43db      	mvns	r3, r3
 8008850:	6939      	ldr	r1, [r7, #16]
 8008852:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008856:	4013      	ands	r3, r2
 8008858:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3720      	adds	r7, #32
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	333c      	adds	r3, #60	@ 0x3c
 800887c:	3304      	adds	r3, #4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	799b      	ldrb	r3, [r3, #6]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d17b      	bne.n	8008992 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f003 0308 	and.w	r3, r3, #8
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d015      	beq.n	80088d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	4a61      	ldr	r2, [pc, #388]	@ (8008a2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	f240 80b9 	bls.w	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80b3 	beq.w	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c6:	461a      	mov	r2, r3
 80088c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088cc:	6093      	str	r3, [r2, #8]
 80088ce:	e0a7      	b.n	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e6:	461a      	mov	r2, r3
 80088e8:	2320      	movs	r3, #32
 80088ea:	6093      	str	r3, [r2, #8]
 80088ec:	e098      	b.n	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f040 8093 	bne.w	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	4a4b      	ldr	r2, [pc, #300]	@ (8008a2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d90f      	bls.n	8008922 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008918:	461a      	mov	r2, r3
 800891a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800891e:	6093      	str	r3, [r2, #8]
 8008920:	e07e      	b.n	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	4613      	mov	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	4413      	add	r3, r2
 8008934:	3304      	adds	r3, #4
 8008936:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a1a      	ldr	r2, [r3, #32]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	0159      	lsls	r1, r3, #5
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	440b      	add	r3, r1
 8008944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d114      	bne.n	8008984 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d109      	bne.n	8008976 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800896c:	461a      	mov	r2, r3
 800896e:	2101      	movs	r1, #1
 8008970:	f002 fd0e 	bl	800b390 <USB_EP0_OutStart>
 8008974:	e006      	b.n	8008984 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	441a      	add	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f005 f85e 	bl	800da4c <HAL_PCD_DataOutStageCallback>
 8008990:	e046      	b.n	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	4a26      	ldr	r2, [pc, #152]	@ (8008a30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d124      	bne.n	80089e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b0:	461a      	mov	r2, r3
 80089b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089b6:	6093      	str	r3, [r2, #8]
 80089b8:	e032      	b.n	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d008      	beq.n	80089d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d0:	461a      	mov	r2, r3
 80089d2:	2320      	movs	r3, #32
 80089d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f005 f835 	bl	800da4c <HAL_PCD_DataOutStageCallback>
 80089e2:	e01d      	b.n	8008a20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d114      	bne.n	8008a14 <PCD_EP_OutXfrComplete_int+0x1b0>
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	4613      	mov	r3, r2
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	440b      	add	r3, r1
 80089f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d108      	bne.n	8008a14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	2100      	movs	r1, #0
 8008a10:	f002 fcbe 	bl	800b390 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f005 f816 	bl	800da4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3720      	adds	r7, #32
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	4f54300a 	.word	0x4f54300a
 8008a30:	4f54310a 	.word	0x4f54310a

08008a34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	333c      	adds	r3, #60	@ 0x3c
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4a15      	ldr	r2, [pc, #84]	@ (8008abc <PCD_EP_OutSetupPacket_int+0x88>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d90e      	bls.n	8008a88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d009      	beq.n	8008a88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a80:	461a      	mov	r2, r3
 8008a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f004 ffcd 	bl	800da28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4a0a      	ldr	r2, [pc, #40]	@ (8008abc <PCD_EP_OutSetupPacket_int+0x88>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d90c      	bls.n	8008ab0 <PCD_EP_OutSetupPacket_int+0x7c>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	799b      	ldrb	r3, [r3, #6]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d108      	bne.n	8008ab0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	2101      	movs	r1, #1
 8008aac:	f002 fc70 	bl	800b390 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	4f54300a 	.word	0x4f54300a

08008ac0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
 8008acc:	4613      	mov	r3, r2
 8008ace:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d107      	bne.n	8008aee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008ade:	883b      	ldrh	r3, [r7, #0]
 8008ae0:	0419      	lsls	r1, r3, #16
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	629a      	str	r2, [r3, #40]	@ 0x28
 8008aec:	e028      	b.n	8008b40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af4:	0c1b      	lsrs	r3, r3, #16
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4413      	add	r3, r2
 8008afa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
 8008b00:	e00d      	b.n	8008b1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	3340      	adds	r3, #64	@ 0x40
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	0c1b      	lsrs	r3, r3, #16
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	4413      	add	r3, r2
 8008b16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	73fb      	strb	r3, [r7, #15]
 8008b1e:	7bfa      	ldrb	r2, [r7, #15]
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d3ec      	bcc.n	8008b02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008b28:	883b      	ldrh	r3, [r7, #0]
 8008b2a:	0418      	lsls	r0, r3, #16
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	4302      	orrs	r2, r0
 8008b38:	3340      	adds	r3, #64	@ 0x40
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	887a      	ldrh	r2, [r7, #2]
 8008b60:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e267      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d075      	beq.n	8008c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008ba6:	4b88      	ldr	r3, [pc, #544]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 030c 	and.w	r3, r3, #12
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d00c      	beq.n	8008bcc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bb2:	4b85      	ldr	r3, [pc, #532]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008bba:	2b08      	cmp	r3, #8
 8008bbc:	d112      	bne.n	8008be4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bbe:	4b82      	ldr	r3, [pc, #520]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bca:	d10b      	bne.n	8008be4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d05b      	beq.n	8008c90 <HAL_RCC_OscConfig+0x108>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d157      	bne.n	8008c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e242      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bec:	d106      	bne.n	8008bfc <HAL_RCC_OscConfig+0x74>
 8008bee:	4b76      	ldr	r3, [pc, #472]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a75      	ldr	r2, [pc, #468]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	e01d      	b.n	8008c38 <HAL_RCC_OscConfig+0xb0>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c04:	d10c      	bne.n	8008c20 <HAL_RCC_OscConfig+0x98>
 8008c06:	4b70      	ldr	r3, [pc, #448]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	4b6d      	ldr	r3, [pc, #436]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a6c      	ldr	r2, [pc, #432]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	e00b      	b.n	8008c38 <HAL_RCC_OscConfig+0xb0>
 8008c20:	4b69      	ldr	r3, [pc, #420]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a68      	ldr	r2, [pc, #416]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	4b66      	ldr	r3, [pc, #408]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a65      	ldr	r2, [pc, #404]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d013      	beq.n	8008c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c40:	f7fa faf2 	bl	8003228 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c48:	f7fa faee 	bl	8003228 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b64      	cmp	r3, #100	@ 0x64
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e207      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f0      	beq.n	8008c48 <HAL_RCC_OscConfig+0xc0>
 8008c66:	e014      	b.n	8008c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c68:	f7fa fade 	bl	8003228 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c70:	f7fa fada 	bl	8003228 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b64      	cmp	r3, #100	@ 0x64
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e1f3      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c82:	4b51      	ldr	r3, [pc, #324]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <HAL_RCC_OscConfig+0xe8>
 8008c8e:	e000      	b.n	8008c92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d063      	beq.n	8008d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 030c 	and.w	r3, r3, #12
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008caa:	4b47      	ldr	r3, [pc, #284]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008cb2:	2b08      	cmp	r3, #8
 8008cb4:	d11c      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cb6:	4b44      	ldr	r3, [pc, #272]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d116      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cc2:	4b41      	ldr	r3, [pc, #260]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <HAL_RCC_OscConfig+0x152>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d001      	beq.n	8008cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e1c7      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cda:	4b3b      	ldr	r3, [pc, #236]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4937      	ldr	r1, [pc, #220]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cee:	e03a      	b.n	8008d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d020      	beq.n	8008d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cf8:	4b34      	ldr	r3, [pc, #208]	@ (8008dcc <HAL_RCC_OscConfig+0x244>)
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cfe:	f7fa fa93 	bl	8003228 <HAL_GetTick>
 8008d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d04:	e008      	b.n	8008d18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d06:	f7fa fa8f 	bl	8003228 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d901      	bls.n	8008d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e1a8      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d18:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0f0      	beq.n	8008d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d24:	4b28      	ldr	r3, [pc, #160]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	4925      	ldr	r1, [pc, #148]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	600b      	str	r3, [r1, #0]
 8008d38:	e015      	b.n	8008d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d3a:	4b24      	ldr	r3, [pc, #144]	@ (8008dcc <HAL_RCC_OscConfig+0x244>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fa fa72 	bl	8003228 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d48:	f7fa fa6e 	bl	8003228 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e187      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f0      	bne.n	8008d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d036      	beq.n	8008de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d016      	beq.n	8008da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d7a:	4b15      	ldr	r3, [pc, #84]	@ (8008dd0 <HAL_RCC_OscConfig+0x248>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d80:	f7fa fa52 	bl	8003228 <HAL_GetTick>
 8008d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d88:	f7fa fa4e 	bl	8003228 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e167      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0f0      	beq.n	8008d88 <HAL_RCC_OscConfig+0x200>
 8008da6:	e01b      	b.n	8008de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008da8:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <HAL_RCC_OscConfig+0x248>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dae:	f7fa fa3b 	bl	8003228 <HAL_GetTick>
 8008db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008db4:	e00e      	b.n	8008dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008db6:	f7fa fa37 	bl	8003228 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d907      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e150      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	42470000 	.word	0x42470000
 8008dd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dd4:	4b88      	ldr	r3, [pc, #544]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1ea      	bne.n	8008db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8097 	beq.w	8008f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008df2:	4b81      	ldr	r3, [pc, #516]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10f      	bne.n	8008e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60bb      	str	r3, [r7, #8]
 8008e02:	4b7d      	ldr	r3, [pc, #500]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e06:	4a7c      	ldr	r2, [pc, #496]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e16:	60bb      	str	r3, [r7, #8]
 8008e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1e:	4b77      	ldr	r3, [pc, #476]	@ (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d118      	bne.n	8008e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e2a:	4b74      	ldr	r3, [pc, #464]	@ (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a73      	ldr	r2, [pc, #460]	@ (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e36:	f7fa f9f7 	bl	8003228 <HAL_GetTick>
 8008e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e3c:	e008      	b.n	8008e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e3e:	f7fa f9f3 	bl	8003228 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e10c      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e50:	4b6a      	ldr	r3, [pc, #424]	@ (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0f0      	beq.n	8008e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d106      	bne.n	8008e72 <HAL_RCC_OscConfig+0x2ea>
 8008e64:	4b64      	ldr	r3, [pc, #400]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e68:	4a63      	ldr	r2, [pc, #396]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e6a:	f043 0301 	orr.w	r3, r3, #1
 8008e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e70:	e01c      	b.n	8008eac <HAL_RCC_OscConfig+0x324>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	2b05      	cmp	r3, #5
 8008e78:	d10c      	bne.n	8008e94 <HAL_RCC_OscConfig+0x30c>
 8008e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e80:	f043 0304 	orr.w	r3, r3, #4
 8008e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e86:	4b5c      	ldr	r3, [pc, #368]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	f043 0301 	orr.w	r3, r3, #1
 8008e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e92:	e00b      	b.n	8008eac <HAL_RCC_OscConfig+0x324>
 8008e94:	4b58      	ldr	r3, [pc, #352]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e98:	4a57      	ldr	r2, [pc, #348]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e9a:	f023 0301 	bic.w	r3, r3, #1
 8008e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ea0:	4b55      	ldr	r3, [pc, #340]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ea4:	4a54      	ldr	r2, [pc, #336]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ea6:	f023 0304 	bic.w	r3, r3, #4
 8008eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d015      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb4:	f7fa f9b8 	bl	8003228 <HAL_GetTick>
 8008eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eba:	e00a      	b.n	8008ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ebc:	f7fa f9b4 	bl	8003228 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d901      	bls.n	8008ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e0cb      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed2:	4b49      	ldr	r3, [pc, #292]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0ee      	beq.n	8008ebc <HAL_RCC_OscConfig+0x334>
 8008ede:	e014      	b.n	8008f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ee0:	f7fa f9a2 	bl	8003228 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ee6:	e00a      	b.n	8008efe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ee8:	f7fa f99e 	bl	8003228 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e0b5      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008efe:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1ee      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d105      	bne.n	8008f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f10:	4b39      	ldr	r3, [pc, #228]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f14:	4a38      	ldr	r2, [pc, #224]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 80a1 	beq.w	8009068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f26:	4b34      	ldr	r3, [pc, #208]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 030c 	and.w	r3, r3, #12
 8008f2e:	2b08      	cmp	r3, #8
 8008f30:	d05c      	beq.n	8008fec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d141      	bne.n	8008fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f3a:	4b31      	ldr	r3, [pc, #196]	@ (8009000 <HAL_RCC_OscConfig+0x478>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f40:	f7fa f972 	bl	8003228 <HAL_GetTick>
 8008f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f48:	f7fa f96e 	bl	8003228 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e087      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f5a:	4b27      	ldr	r3, [pc, #156]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1f0      	bne.n	8008f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f74:	019b      	lsls	r3, r3, #6
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	041b      	lsls	r3, r3, #16
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	061b      	lsls	r3, r3, #24
 8008f8a:	491b      	ldr	r1, [pc, #108]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f90:	4b1b      	ldr	r3, [pc, #108]	@ (8009000 <HAL_RCC_OscConfig+0x478>)
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f96:	f7fa f947 	bl	8003228 <HAL_GetTick>
 8008f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f9c:	e008      	b.n	8008fb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f9e:	f7fa f943 	bl	8003228 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d901      	bls.n	8008fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e05c      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fb0:	4b11      	ldr	r3, [pc, #68]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0f0      	beq.n	8008f9e <HAL_RCC_OscConfig+0x416>
 8008fbc:	e054      	b.n	8009068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fbe:	4b10      	ldr	r3, [pc, #64]	@ (8009000 <HAL_RCC_OscConfig+0x478>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fc4:	f7fa f930 	bl	8003228 <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fcc:	f7fa f92c 	bl	8003228 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e045      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fde:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f0      	bne.n	8008fcc <HAL_RCC_OscConfig+0x444>
 8008fea:	e03d      	b.n	8009068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d107      	bne.n	8009004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e038      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	40007000 	.word	0x40007000
 8009000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009004:	4b1b      	ldr	r3, [pc, #108]	@ (8009074 <HAL_RCC_OscConfig+0x4ec>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d028      	beq.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800901c:	429a      	cmp	r2, r3
 800901e:	d121      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800902a:	429a      	cmp	r2, r3
 800902c:	d11a      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009034:	4013      	ands	r3, r2
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800903a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800903c:	4293      	cmp	r3, r2
 800903e:	d111      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	085b      	lsrs	r3, r3, #1
 800904c:	3b01      	subs	r3, #1
 800904e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009050:	429a      	cmp	r2, r3
 8009052:	d107      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009060:	429a      	cmp	r2, r3
 8009062:	d001      	beq.n	8009068 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e000      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40023800 	.word	0x40023800

08009078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e0cc      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800908c:	4b68      	ldr	r3, [pc, #416]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d90c      	bls.n	80090b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909a:	4b65      	ldr	r3, [pc, #404]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090a2:	4b63      	ldr	r3, [pc, #396]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d001      	beq.n	80090b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0b8      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d020      	beq.n	8009102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090cc:	4b59      	ldr	r3, [pc, #356]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	4a58      	ldr	r2, [pc, #352]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80090d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0308 	and.w	r3, r3, #8
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090e4:	4b53      	ldr	r3, [pc, #332]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	4a52      	ldr	r2, [pc, #328]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80090ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090f0:	4b50      	ldr	r3, [pc, #320]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	494d      	ldr	r1, [pc, #308]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d044      	beq.n	8009198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d107      	bne.n	8009126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009116:	4b47      	ldr	r3, [pc, #284]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d119      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e07f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d003      	beq.n	8009136 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009132:	2b03      	cmp	r3, #3
 8009134:	d107      	bne.n	8009146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009136:	4b3f      	ldr	r3, [pc, #252]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d109      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e06f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009146:	4b3b      	ldr	r3, [pc, #236]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e067      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009156:	4b37      	ldr	r3, [pc, #220]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f023 0203 	bic.w	r2, r3, #3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	4934      	ldr	r1, [pc, #208]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009164:	4313      	orrs	r3, r2
 8009166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009168:	f7fa f85e 	bl	8003228 <HAL_GetTick>
 800916c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800916e:	e00a      	b.n	8009186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009170:	f7fa f85a 	bl	8003228 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800917e:	4293      	cmp	r3, r2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e04f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009186:	4b2b      	ldr	r3, [pc, #172]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 020c 	and.w	r2, r3, #12
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	429a      	cmp	r2, r3
 8009196:	d1eb      	bne.n	8009170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009198:	4b25      	ldr	r3, [pc, #148]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d20c      	bcs.n	80091c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091a6:	4b22      	ldr	r3, [pc, #136]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ae:	4b20      	ldr	r3, [pc, #128]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d001      	beq.n	80091c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e032      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d008      	beq.n	80091de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091cc:	4b19      	ldr	r3, [pc, #100]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	4916      	ldr	r1, [pc, #88]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0308 	and.w	r3, r3, #8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d009      	beq.n	80091fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091ea:	4b12      	ldr	r3, [pc, #72]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	490e      	ldr	r1, [pc, #56]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80091fe:	f000 f821 	bl	8009244 <HAL_RCC_GetSysClockFreq>
 8009202:	4602      	mov	r2, r0
 8009204:	4b0b      	ldr	r3, [pc, #44]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	091b      	lsrs	r3, r3, #4
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	490a      	ldr	r1, [pc, #40]	@ (8009238 <HAL_RCC_ClockConfig+0x1c0>)
 8009210:	5ccb      	ldrb	r3, [r1, r3]
 8009212:	fa22 f303 	lsr.w	r3, r2, r3
 8009216:	4a09      	ldr	r2, [pc, #36]	@ (800923c <HAL_RCC_ClockConfig+0x1c4>)
 8009218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800921a:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <HAL_RCC_ClockConfig+0x1c8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4618      	mov	r0, r3
 8009220:	f7f9 ffbe 	bl	80031a0 <HAL_InitTick>

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40023c00 	.word	0x40023c00
 8009234:	40023800 	.word	0x40023800
 8009238:	0800ef98 	.word	0x0800ef98
 800923c:	20000030 	.word	0x20000030
 8009240:	20000034 	.word	0x20000034

08009244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009248:	b090      	sub	sp, #64	@ 0x40
 800924a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009254:	2300      	movs	r3, #0
 8009256:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800925c:	4b59      	ldr	r3, [pc, #356]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f003 030c 	and.w	r3, r3, #12
 8009264:	2b08      	cmp	r3, #8
 8009266:	d00d      	beq.n	8009284 <HAL_RCC_GetSysClockFreq+0x40>
 8009268:	2b08      	cmp	r3, #8
 800926a:	f200 80a1 	bhi.w	80093b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <HAL_RCC_GetSysClockFreq+0x34>
 8009272:	2b04      	cmp	r3, #4
 8009274:	d003      	beq.n	800927e <HAL_RCC_GetSysClockFreq+0x3a>
 8009276:	e09b      	b.n	80093b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009278:	4b53      	ldr	r3, [pc, #332]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800927a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800927c:	e09b      	b.n	80093b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800927e:	4b53      	ldr	r3, [pc, #332]	@ (80093cc <HAL_RCC_GetSysClockFreq+0x188>)
 8009280:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009282:	e098      	b.n	80093b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009284:	4b4f      	ldr	r3, [pc, #316]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800928e:	4b4d      	ldr	r3, [pc, #308]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d028      	beq.n	80092ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800929a:	4b4a      	ldr	r3, [pc, #296]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	099b      	lsrs	r3, r3, #6
 80092a0:	2200      	movs	r2, #0
 80092a2:	623b      	str	r3, [r7, #32]
 80092a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80092ac:	2100      	movs	r1, #0
 80092ae:	4b47      	ldr	r3, [pc, #284]	@ (80093cc <HAL_RCC_GetSysClockFreq+0x188>)
 80092b0:	fb03 f201 	mul.w	r2, r3, r1
 80092b4:	2300      	movs	r3, #0
 80092b6:	fb00 f303 	mul.w	r3, r0, r3
 80092ba:	4413      	add	r3, r2
 80092bc:	4a43      	ldr	r2, [pc, #268]	@ (80093cc <HAL_RCC_GetSysClockFreq+0x188>)
 80092be:	fba0 1202 	umull	r1, r2, r0, r2
 80092c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092c4:	460a      	mov	r2, r1
 80092c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80092c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ca:	4413      	add	r3, r2
 80092cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d0:	2200      	movs	r2, #0
 80092d2:	61bb      	str	r3, [r7, #24]
 80092d4:	61fa      	str	r2, [r7, #28]
 80092d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80092de:	f7f7 fbc5 	bl	8000a6c <__aeabi_uldivmod>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4613      	mov	r3, r2
 80092e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092ea:	e053      	b.n	8009394 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092ec:	4b35      	ldr	r3, [pc, #212]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	099b      	lsrs	r3, r3, #6
 80092f2:	2200      	movs	r2, #0
 80092f4:	613b      	str	r3, [r7, #16]
 80092f6:	617a      	str	r2, [r7, #20]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80092fe:	f04f 0b00 	mov.w	fp, #0
 8009302:	4652      	mov	r2, sl
 8009304:	465b      	mov	r3, fp
 8009306:	f04f 0000 	mov.w	r0, #0
 800930a:	f04f 0100 	mov.w	r1, #0
 800930e:	0159      	lsls	r1, r3, #5
 8009310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009314:	0150      	lsls	r0, r2, #5
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	ebb2 080a 	subs.w	r8, r2, sl
 800931e:	eb63 090b 	sbc.w	r9, r3, fp
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	f04f 0300 	mov.w	r3, #0
 800932a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800932e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009332:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009336:	ebb2 0408 	subs.w	r4, r2, r8
 800933a:	eb63 0509 	sbc.w	r5, r3, r9
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	f04f 0300 	mov.w	r3, #0
 8009346:	00eb      	lsls	r3, r5, #3
 8009348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800934c:	00e2      	lsls	r2, r4, #3
 800934e:	4614      	mov	r4, r2
 8009350:	461d      	mov	r5, r3
 8009352:	eb14 030a 	adds.w	r3, r4, sl
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	eb45 030b 	adc.w	r3, r5, fp
 800935c:	607b      	str	r3, [r7, #4]
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	f04f 0300 	mov.w	r3, #0
 8009366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800936a:	4629      	mov	r1, r5
 800936c:	028b      	lsls	r3, r1, #10
 800936e:	4621      	mov	r1, r4
 8009370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009374:	4621      	mov	r1, r4
 8009376:	028a      	lsls	r2, r1, #10
 8009378:	4610      	mov	r0, r2
 800937a:	4619      	mov	r1, r3
 800937c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937e:	2200      	movs	r2, #0
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	60fa      	str	r2, [r7, #12]
 8009384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009388:	f7f7 fb70 	bl	8000a6c <__aeabi_uldivmod>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4613      	mov	r3, r2
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009394:	4b0b      	ldr	r3, [pc, #44]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	0c1b      	lsrs	r3, r3, #16
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	3301      	adds	r3, #1
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80093a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80093ae:	e002      	b.n	80093b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093b0:	4b05      	ldr	r3, [pc, #20]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80093b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80093b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3740      	adds	r7, #64	@ 0x40
 80093bc:	46bd      	mov	sp, r7
 80093be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093c2:	bf00      	nop
 80093c4:	40023800 	.word	0x40023800
 80093c8:	00f42400 	.word	0x00f42400
 80093cc:	017d7840 	.word	0x017d7840

080093d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093d4:	4b03      	ldr	r3, [pc, #12]	@ (80093e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80093d6:	681b      	ldr	r3, [r3, #0]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20000030 	.word	0x20000030

080093e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80093ec:	f7ff fff0 	bl	80093d0 <HAL_RCC_GetHCLKFreq>
 80093f0:	4602      	mov	r2, r0
 80093f2:	4b05      	ldr	r3, [pc, #20]	@ (8009408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	0a9b      	lsrs	r3, r3, #10
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	4903      	ldr	r1, [pc, #12]	@ (800940c <HAL_RCC_GetPCLK1Freq+0x24>)
 80093fe:	5ccb      	ldrb	r3, [r1, r3]
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009404:	4618      	mov	r0, r3
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40023800 	.word	0x40023800
 800940c:	0800efa8 	.word	0x0800efa8

08009410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e041      	b.n	80094a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7f9 fae8 	bl	8002a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f000 fab2 	bl	80099b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d001      	beq.n	80094c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e044      	b.n	8009552 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1e      	ldr	r2, [pc, #120]	@ (8009560 <HAL_TIM_Base_Start_IT+0xb0>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d018      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094f2:	d013      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009564 <HAL_TIM_Base_Start_IT+0xb4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00e      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a19      	ldr	r2, [pc, #100]	@ (8009568 <HAL_TIM_Base_Start_IT+0xb8>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d009      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a17      	ldr	r2, [pc, #92]	@ (800956c <HAL_TIM_Base_Start_IT+0xbc>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d004      	beq.n	800951c <HAL_TIM_Base_Start_IT+0x6c>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a16      	ldr	r2, [pc, #88]	@ (8009570 <HAL_TIM_Base_Start_IT+0xc0>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d111      	bne.n	8009540 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b06      	cmp	r3, #6
 800952c:	d010      	beq.n	8009550 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0201 	orr.w	r2, r2, #1
 800953c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800953e:	e007      	b.n	8009550 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f042 0201 	orr.w	r2, r2, #1
 800954e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	40010000 	.word	0x40010000
 8009564:	40000400 	.word	0x40000400
 8009568:	40000800 	.word	0x40000800
 800956c:	40000c00 	.word	0x40000c00
 8009570:	40014000 	.word	0x40014000

08009574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d020      	beq.n	80095d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f003 0302 	and.w	r3, r3, #2
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01b      	beq.n	80095d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0202 	mvn.w	r2, #2
 80095a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f9db 	bl	800997a <HAL_TIM_IC_CaptureCallback>
 80095c4:	e005      	b.n	80095d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f9cd 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f9de 	bl	800998e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d020      	beq.n	8009624 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d01b      	beq.n	8009624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f06f 0204 	mvn.w	r2, #4
 80095f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2202      	movs	r2, #2
 80095fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f9b5 	bl	800997a <HAL_TIM_IC_CaptureCallback>
 8009610:	e005      	b.n	800961e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f9a7 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f9b8 	bl	800998e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f003 0308 	and.w	r3, r3, #8
 800962a:	2b00      	cmp	r3, #0
 800962c:	d020      	beq.n	8009670 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f003 0308 	and.w	r3, r3, #8
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01b      	beq.n	8009670 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0208 	mvn.w	r2, #8
 8009640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2204      	movs	r2, #4
 8009646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f003 0303 	and.w	r3, r3, #3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f98f 	bl	800997a <HAL_TIM_IC_CaptureCallback>
 800965c:	e005      	b.n	800966a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f981 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f992 	bl	800998e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	2b00      	cmp	r3, #0
 8009678:	d020      	beq.n	80096bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01b      	beq.n	80096bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f06f 0210 	mvn.w	r2, #16
 800968c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2208      	movs	r2, #8
 8009692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f969 	bl	800997a <HAL_TIM_IC_CaptureCallback>
 80096a8:	e005      	b.n	80096b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f95b 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f96c 	bl	800998e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00c      	beq.n	80096e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d007      	beq.n	80096e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f06f 0201 	mvn.w	r2, #1
 80096d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7f7 fb9c 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00c      	beq.n	8009704 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d007      	beq.n	8009704 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80096fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fb84 	bl	8009e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00c      	beq.n	8009728 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	d007      	beq.n	8009728 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f93d 	bl	80099a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00c      	beq.n	800974c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b00      	cmp	r3, #0
 800973a:	d007      	beq.n	800974c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f06f 0220 	mvn.w	r2, #32
 8009744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fb56 	bl	8009df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009768:	2b01      	cmp	r3, #1
 800976a:	d101      	bne.n	8009770 <HAL_TIM_ConfigClockSource+0x1c>
 800976c:	2302      	movs	r3, #2
 800976e:	e0b4      	b.n	80098da <HAL_TIM_ConfigClockSource+0x186>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800978e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a8:	d03e      	beq.n	8009828 <HAL_TIM_ConfigClockSource+0xd4>
 80097aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097ae:	f200 8087 	bhi.w	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
 80097b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097b6:	f000 8086 	beq.w	80098c6 <HAL_TIM_ConfigClockSource+0x172>
 80097ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097be:	d87f      	bhi.n	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
 80097c0:	2b70      	cmp	r3, #112	@ 0x70
 80097c2:	d01a      	beq.n	80097fa <HAL_TIM_ConfigClockSource+0xa6>
 80097c4:	2b70      	cmp	r3, #112	@ 0x70
 80097c6:	d87b      	bhi.n	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
 80097c8:	2b60      	cmp	r3, #96	@ 0x60
 80097ca:	d050      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x11a>
 80097cc:	2b60      	cmp	r3, #96	@ 0x60
 80097ce:	d877      	bhi.n	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
 80097d0:	2b50      	cmp	r3, #80	@ 0x50
 80097d2:	d03c      	beq.n	800984e <HAL_TIM_ConfigClockSource+0xfa>
 80097d4:	2b50      	cmp	r3, #80	@ 0x50
 80097d6:	d873      	bhi.n	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
 80097d8:	2b40      	cmp	r3, #64	@ 0x40
 80097da:	d058      	beq.n	800988e <HAL_TIM_ConfigClockSource+0x13a>
 80097dc:	2b40      	cmp	r3, #64	@ 0x40
 80097de:	d86f      	bhi.n	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
 80097e0:	2b30      	cmp	r3, #48	@ 0x30
 80097e2:	d064      	beq.n	80098ae <HAL_TIM_ConfigClockSource+0x15a>
 80097e4:	2b30      	cmp	r3, #48	@ 0x30
 80097e6:	d86b      	bhi.n	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d060      	beq.n	80098ae <HAL_TIM_ConfigClockSource+0x15a>
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	d867      	bhi.n	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d05c      	beq.n	80098ae <HAL_TIM_ConfigClockSource+0x15a>
 80097f4:	2b10      	cmp	r3, #16
 80097f6:	d05a      	beq.n	80098ae <HAL_TIM_ConfigClockSource+0x15a>
 80097f8:	e062      	b.n	80098c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800980a:	f000 fa66 	bl	8009cda <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800981c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	609a      	str	r2, [r3, #8]
      break;
 8009826:	e04f      	b.n	80098c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009838:	f000 fa4f 	bl	8009cda <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800984a:	609a      	str	r2, [r3, #8]
      break;
 800984c:	e03c      	b.n	80098c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800985a:	461a      	mov	r2, r3
 800985c:	f000 f9c3 	bl	8009be6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2150      	movs	r1, #80	@ 0x50
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fa1c 	bl	8009ca4 <TIM_ITRx_SetConfig>
      break;
 800986c:	e02c      	b.n	80098c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800987a:	461a      	mov	r2, r3
 800987c:	f000 f9e2 	bl	8009c44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2160      	movs	r1, #96	@ 0x60
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fa0c 	bl	8009ca4 <TIM_ITRx_SetConfig>
      break;
 800988c:	e01c      	b.n	80098c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800989a:	461a      	mov	r2, r3
 800989c:	f000 f9a3 	bl	8009be6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2140      	movs	r1, #64	@ 0x40
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 f9fc 	bl	8009ca4 <TIM_ITRx_SetConfig>
      break;
 80098ac:	e00c      	b.n	80098c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4619      	mov	r1, r3
 80098b8:	4610      	mov	r0, r2
 80098ba:	f000 f9f3 	bl	8009ca4 <TIM_ITRx_SetConfig>
      break;
 80098be:	e003      	b.n	80098c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
      break;
 80098c4:	e000      	b.n	80098c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80098c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b082      	sub	sp, #8
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d101      	bne.n	80098fa <HAL_TIM_SlaveConfigSynchro+0x18>
 80098f6:	2302      	movs	r3, #2
 80098f8:	e031      	b.n	800995e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2202      	movs	r2, #2
 8009906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f8d9 	bl	8009ac4 <TIM_SlaveTimer_SetConfig>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e018      	b.n	800995e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800993a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800994a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
	...

080099b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a37      	ldr	r2, [pc, #220]	@ (8009aa8 <TIM_Base_SetConfig+0xf0>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00f      	beq.n	80099f0 <TIM_Base_SetConfig+0x38>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d6:	d00b      	beq.n	80099f0 <TIM_Base_SetConfig+0x38>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a34      	ldr	r2, [pc, #208]	@ (8009aac <TIM_Base_SetConfig+0xf4>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d007      	beq.n	80099f0 <TIM_Base_SetConfig+0x38>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a33      	ldr	r2, [pc, #204]	@ (8009ab0 <TIM_Base_SetConfig+0xf8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d003      	beq.n	80099f0 <TIM_Base_SetConfig+0x38>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a32      	ldr	r2, [pc, #200]	@ (8009ab4 <TIM_Base_SetConfig+0xfc>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d108      	bne.n	8009a02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a28      	ldr	r2, [pc, #160]	@ (8009aa8 <TIM_Base_SetConfig+0xf0>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d01b      	beq.n	8009a42 <TIM_Base_SetConfig+0x8a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a10:	d017      	beq.n	8009a42 <TIM_Base_SetConfig+0x8a>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a25      	ldr	r2, [pc, #148]	@ (8009aac <TIM_Base_SetConfig+0xf4>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d013      	beq.n	8009a42 <TIM_Base_SetConfig+0x8a>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a24      	ldr	r2, [pc, #144]	@ (8009ab0 <TIM_Base_SetConfig+0xf8>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d00f      	beq.n	8009a42 <TIM_Base_SetConfig+0x8a>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a23      	ldr	r2, [pc, #140]	@ (8009ab4 <TIM_Base_SetConfig+0xfc>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00b      	beq.n	8009a42 <TIM_Base_SetConfig+0x8a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a22      	ldr	r2, [pc, #136]	@ (8009ab8 <TIM_Base_SetConfig+0x100>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d007      	beq.n	8009a42 <TIM_Base_SetConfig+0x8a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a21      	ldr	r2, [pc, #132]	@ (8009abc <TIM_Base_SetConfig+0x104>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d003      	beq.n	8009a42 <TIM_Base_SetConfig+0x8a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a20      	ldr	r2, [pc, #128]	@ (8009ac0 <TIM_Base_SetConfig+0x108>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d108      	bne.n	8009a54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa8 <TIM_Base_SetConfig+0xf0>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d103      	bne.n	8009a82 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	691a      	ldr	r2, [r3, #16]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f043 0204 	orr.w	r2, r3, #4
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	601a      	str	r2, [r3, #0]
}
 8009a9a:	bf00      	nop
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	40010000 	.word	0x40010000
 8009aac:	40000400 	.word	0x40000400
 8009ab0:	40000800 	.word	0x40000800
 8009ab4:	40000c00 	.word	0x40000c00
 8009ab8:	40014000 	.word	0x40014000
 8009abc:	40014400 	.word	0x40014400
 8009ac0:	40014800 	.word	0x40014800

08009ac4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ae0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f023 0307 	bic.w	r3, r3, #7
 8009af2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2b70      	cmp	r3, #112	@ 0x70
 8009b0c:	d01a      	beq.n	8009b44 <TIM_SlaveTimer_SetConfig+0x80>
 8009b0e:	2b70      	cmp	r3, #112	@ 0x70
 8009b10:	d860      	bhi.n	8009bd4 <TIM_SlaveTimer_SetConfig+0x110>
 8009b12:	2b60      	cmp	r3, #96	@ 0x60
 8009b14:	d054      	beq.n	8009bc0 <TIM_SlaveTimer_SetConfig+0xfc>
 8009b16:	2b60      	cmp	r3, #96	@ 0x60
 8009b18:	d85c      	bhi.n	8009bd4 <TIM_SlaveTimer_SetConfig+0x110>
 8009b1a:	2b50      	cmp	r3, #80	@ 0x50
 8009b1c:	d046      	beq.n	8009bac <TIM_SlaveTimer_SetConfig+0xe8>
 8009b1e:	2b50      	cmp	r3, #80	@ 0x50
 8009b20:	d858      	bhi.n	8009bd4 <TIM_SlaveTimer_SetConfig+0x110>
 8009b22:	2b40      	cmp	r3, #64	@ 0x40
 8009b24:	d019      	beq.n	8009b5a <TIM_SlaveTimer_SetConfig+0x96>
 8009b26:	2b40      	cmp	r3, #64	@ 0x40
 8009b28:	d854      	bhi.n	8009bd4 <TIM_SlaveTimer_SetConfig+0x110>
 8009b2a:	2b30      	cmp	r3, #48	@ 0x30
 8009b2c:	d055      	beq.n	8009bda <TIM_SlaveTimer_SetConfig+0x116>
 8009b2e:	2b30      	cmp	r3, #48	@ 0x30
 8009b30:	d850      	bhi.n	8009bd4 <TIM_SlaveTimer_SetConfig+0x110>
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	d051      	beq.n	8009bda <TIM_SlaveTimer_SetConfig+0x116>
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d84c      	bhi.n	8009bd4 <TIM_SlaveTimer_SetConfig+0x110>
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d04d      	beq.n	8009bda <TIM_SlaveTimer_SetConfig+0x116>
 8009b3e:	2b10      	cmp	r3, #16
 8009b40:	d04b      	beq.n	8009bda <TIM_SlaveTimer_SetConfig+0x116>
 8009b42:	e047      	b.n	8009bd4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009b54:	f000 f8c1 	bl	8009cda <TIM_ETR_SetConfig>
      break;
 8009b58:	e040      	b.n	8009bdc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	d101      	bne.n	8009b66 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e03b      	b.n	8009bde <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6a1a      	ldr	r2, [r3, #32]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 0201 	bic.w	r2, r2, #1
 8009b7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b8c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	621a      	str	r2, [r3, #32]
      break;
 8009baa:	e017      	b.n	8009bdc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f000 f814 	bl	8009be6 <TIM_TI1_ConfigInputStage>
      break;
 8009bbe:	e00d      	b.n	8009bdc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f000 f839 	bl	8009c44 <TIM_TI2_ConfigInputStage>
      break;
 8009bd2:	e003      	b.n	8009bdc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd8:	e000      	b.n	8009bdc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009bda:	bf00      	nop
  }

  return status;
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b087      	sub	sp, #28
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	f023 0201 	bic.w	r2, r3, #1
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f023 030a 	bic.w	r3, r3, #10
 8009c22:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	621a      	str	r2, [r3, #32]
}
 8009c38:	bf00      	nop
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	f023 0210 	bic.w	r2, r3, #16
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	031b      	lsls	r3, r3, #12
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	011b      	lsls	r3, r3, #4
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	621a      	str	r2, [r3, #32]
}
 8009c98:	bf00      	nop
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	f043 0307 	orr.w	r3, r3, #7
 8009cc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	609a      	str	r2, [r3, #8]
}
 8009cce:	bf00      	nop
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b087      	sub	sp, #28
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	021a      	lsls	r2, r3, #8
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	609a      	str	r2, [r3, #8]
}
 8009d0e:	bf00      	nop
 8009d10:	371c      	adds	r7, #28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
	...

08009d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d101      	bne.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d30:	2302      	movs	r3, #2
 8009d32:	e050      	b.n	8009dd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a1c      	ldr	r2, [pc, #112]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d018      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d80:	d013      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a18      	ldr	r2, [pc, #96]	@ (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d00e      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a16      	ldr	r2, [pc, #88]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d009      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a15      	ldr	r2, [pc, #84]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d004      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a13      	ldr	r2, [pc, #76]	@ (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d10c      	bne.n	8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	40010000 	.word	0x40010000
 8009de8:	40000400 	.word	0x40000400
 8009dec:	40000800 	.word	0x40000800
 8009df0:	40000c00 	.word	0x40000c00
 8009df4:	40014000 	.word	0x40014000

08009df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e20:	b084      	sub	sp, #16
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	f107 001c 	add.w	r0, r7, #28
 8009e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e32:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d123      	bne.n	8009e82 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d105      	bne.n	8009e76 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 fae8 	bl	800b44c <USB_CoreReset>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
 8009e80:	e01b      	b.n	8009eba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 fadc 	bl	800b44c <USB_CoreReset>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d106      	bne.n	8009eae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8009eac:	e005      	b.n	8009eba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009eba:	7fbb      	ldrb	r3, [r7, #30]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d10b      	bne.n	8009ed8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f043 0206 	orr.w	r2, r3, #6
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f043 0220 	orr.w	r2, r3, #32
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ee4:	b004      	add	sp, #16
 8009ee6:	4770      	bx	lr

08009ee8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d165      	bne.n	8009fc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4a41      	ldr	r2, [pc, #260]	@ (800a004 <USB_SetTurnaroundTime+0x11c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d906      	bls.n	8009f12 <USB_SetTurnaroundTime+0x2a>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4a40      	ldr	r2, [pc, #256]	@ (800a008 <USB_SetTurnaroundTime+0x120>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d202      	bcs.n	8009f12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009f0c:	230f      	movs	r3, #15
 8009f0e:	617b      	str	r3, [r7, #20]
 8009f10:	e062      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	4a3c      	ldr	r2, [pc, #240]	@ (800a008 <USB_SetTurnaroundTime+0x120>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d306      	bcc.n	8009f28 <USB_SetTurnaroundTime+0x40>
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	4a3b      	ldr	r2, [pc, #236]	@ (800a00c <USB_SetTurnaroundTime+0x124>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d202      	bcs.n	8009f28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009f22:	230e      	movs	r3, #14
 8009f24:	617b      	str	r3, [r7, #20]
 8009f26:	e057      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4a38      	ldr	r2, [pc, #224]	@ (800a00c <USB_SetTurnaroundTime+0x124>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d306      	bcc.n	8009f3e <USB_SetTurnaroundTime+0x56>
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4a37      	ldr	r2, [pc, #220]	@ (800a010 <USB_SetTurnaroundTime+0x128>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d202      	bcs.n	8009f3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009f38:	230d      	movs	r3, #13
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	e04c      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	4a33      	ldr	r2, [pc, #204]	@ (800a010 <USB_SetTurnaroundTime+0x128>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d306      	bcc.n	8009f54 <USB_SetTurnaroundTime+0x6c>
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	4a32      	ldr	r2, [pc, #200]	@ (800a014 <USB_SetTurnaroundTime+0x12c>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d802      	bhi.n	8009f54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009f4e:	230c      	movs	r3, #12
 8009f50:	617b      	str	r3, [r7, #20]
 8009f52:	e041      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	4a2f      	ldr	r2, [pc, #188]	@ (800a014 <USB_SetTurnaroundTime+0x12c>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d906      	bls.n	8009f6a <USB_SetTurnaroundTime+0x82>
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	4a2e      	ldr	r2, [pc, #184]	@ (800a018 <USB_SetTurnaroundTime+0x130>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d802      	bhi.n	8009f6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009f64:	230b      	movs	r3, #11
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	e036      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	4a2a      	ldr	r2, [pc, #168]	@ (800a018 <USB_SetTurnaroundTime+0x130>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d906      	bls.n	8009f80 <USB_SetTurnaroundTime+0x98>
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	4a29      	ldr	r2, [pc, #164]	@ (800a01c <USB_SetTurnaroundTime+0x134>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d802      	bhi.n	8009f80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009f7a:	230a      	movs	r3, #10
 8009f7c:	617b      	str	r3, [r7, #20]
 8009f7e:	e02b      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	4a26      	ldr	r2, [pc, #152]	@ (800a01c <USB_SetTurnaroundTime+0x134>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d906      	bls.n	8009f96 <USB_SetTurnaroundTime+0xae>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	4a25      	ldr	r2, [pc, #148]	@ (800a020 <USB_SetTurnaroundTime+0x138>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d202      	bcs.n	8009f96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009f90:	2309      	movs	r3, #9
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	e020      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	4a21      	ldr	r2, [pc, #132]	@ (800a020 <USB_SetTurnaroundTime+0x138>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d306      	bcc.n	8009fac <USB_SetTurnaroundTime+0xc4>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	4a20      	ldr	r2, [pc, #128]	@ (800a024 <USB_SetTurnaroundTime+0x13c>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d802      	bhi.n	8009fac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009fa6:	2308      	movs	r3, #8
 8009fa8:	617b      	str	r3, [r7, #20]
 8009faa:	e015      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	4a1d      	ldr	r2, [pc, #116]	@ (800a024 <USB_SetTurnaroundTime+0x13c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d906      	bls.n	8009fc2 <USB_SetTurnaroundTime+0xda>
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4a1c      	ldr	r2, [pc, #112]	@ (800a028 <USB_SetTurnaroundTime+0x140>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d202      	bcs.n	8009fc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009fbc:	2307      	movs	r3, #7
 8009fbe:	617b      	str	r3, [r7, #20]
 8009fc0:	e00a      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009fc2:	2306      	movs	r3, #6
 8009fc4:	617b      	str	r3, [r7, #20]
 8009fc6:	e007      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d102      	bne.n	8009fd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009fce:	2309      	movs	r3, #9
 8009fd0:	617b      	str	r3, [r7, #20]
 8009fd2:	e001      	b.n	8009fd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009fd4:	2309      	movs	r3, #9
 8009fd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	029b      	lsls	r3, r3, #10
 8009fec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	00d8acbf 	.word	0x00d8acbf
 800a008:	00e4e1c0 	.word	0x00e4e1c0
 800a00c:	00f42400 	.word	0x00f42400
 800a010:	01067380 	.word	0x01067380
 800a014:	011a499f 	.word	0x011a499f
 800a018:	01312cff 	.word	0x01312cff
 800a01c:	014ca43f 	.word	0x014ca43f
 800a020:	016e3600 	.word	0x016e3600
 800a024:	01a6ab1f 	.word	0x01a6ab1f
 800a028:	01e84800 	.word	0x01e84800

0800a02c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f043 0201 	orr.w	r2, r3, #1
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f023 0201 	bic.w	r2, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a08c:	78fb      	ldrb	r3, [r7, #3]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d115      	bne.n	800a0be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a09e:	200a      	movs	r0, #10
 800a0a0:	f7f9 f8ce 	bl	8003240 <HAL_Delay>
      ms += 10U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	330a      	adds	r3, #10
 800a0a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 f93f 	bl	800b32e <USB_GetMode>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d01e      	beq.n	800a0f4 <USB_SetCurrentMode+0x84>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a0ba:	d9f0      	bls.n	800a09e <USB_SetCurrentMode+0x2e>
 800a0bc:	e01a      	b.n	800a0f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a0be:	78fb      	ldrb	r3, [r7, #3]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d115      	bne.n	800a0f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a0d0:	200a      	movs	r0, #10
 800a0d2:	f7f9 f8b5 	bl	8003240 <HAL_Delay>
      ms += 10U;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	330a      	adds	r3, #10
 800a0da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f001 f926 	bl	800b32e <USB_GetMode>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d005      	beq.n	800a0f4 <USB_SetCurrentMode+0x84>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2bc7      	cmp	r3, #199	@ 0xc7
 800a0ec:	d9f0      	bls.n	800a0d0 <USB_SetCurrentMode+0x60>
 800a0ee:	e001      	b.n	800a0f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e005      	b.n	800a100 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2bc8      	cmp	r3, #200	@ 0xc8
 800a0f8:	d101      	bne.n	800a0fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e000      	b.n	800a100 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a108:	b084      	sub	sp, #16
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b086      	sub	sp, #24
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a122:	2300      	movs	r3, #0
 800a124:	613b      	str	r3, [r7, #16]
 800a126:	e009      	b.n	800a13c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	3340      	adds	r3, #64	@ 0x40
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	2200      	movs	r2, #0
 800a134:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	3301      	adds	r3, #1
 800a13a:	613b      	str	r3, [r7, #16]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2b0e      	cmp	r3, #14
 800a140:	d9f2      	bls.n	800a128 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a142:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a146:	2b00      	cmp	r3, #0
 800a148:	d11c      	bne.n	800a184 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a158:	f043 0302 	orr.w	r3, r3, #2
 800a15c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a162:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	639a      	str	r2, [r3, #56]	@ 0x38
 800a182:	e00b      	b.n	800a19c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a188:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a194:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a1a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d10d      	bne.n	800a1cc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d104      	bne.n	800a1c2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f968 	bl	800a490 <USB_SetDevSpeed>
 800a1c0:	e008      	b.n	800a1d4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f963 	bl	800a490 <USB_SetDevSpeed>
 800a1ca:	e003      	b.n	800a1d4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a1cc:	2103      	movs	r1, #3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f95e 	bl	800a490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1d4:	2110      	movs	r1, #16
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f8fa 	bl	800a3d0 <USB_FlushTxFifo>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f924 	bl	800a434 <USB_FlushRxFifo>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	2300      	movs	r3, #0
 800a200:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a208:	461a      	mov	r2, r3
 800a20a:	2300      	movs	r3, #0
 800a20c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a214:	461a      	mov	r2, r3
 800a216:	2300      	movs	r3, #0
 800a218:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a21a:	2300      	movs	r3, #0
 800a21c:	613b      	str	r3, [r7, #16]
 800a21e:	e043      	b.n	800a2a8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a236:	d118      	bne.n	800a26a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a24a:	461a      	mov	r2, r3
 800a24c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	e013      	b.n	800a27c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a260:	461a      	mov	r2, r3
 800a262:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	e008      	b.n	800a27c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a276:	461a      	mov	r2, r3
 800a278:	2300      	movs	r3, #0
 800a27a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a288:	461a      	mov	r2, r3
 800a28a:	2300      	movs	r3, #0
 800a28c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a29a:	461a      	mov	r2, r3
 800a29c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a2a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d3b5      	bcc.n	800a220 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	613b      	str	r3, [r7, #16]
 800a2b8:	e043      	b.n	800a342 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2d0:	d118      	bne.n	800a304 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	e013      	b.n	800a316 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a300:	6013      	str	r3, [r2, #0]
 800a302:	e008      	b.n	800a316 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a310:	461a      	mov	r2, r3
 800a312:	2300      	movs	r3, #0
 800a314:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a322:	461a      	mov	r2, r3
 800a324:	2300      	movs	r3, #0
 800a326:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a334:	461a      	mov	r2, r3
 800a336:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a33a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	3301      	adds	r3, #1
 800a340:	613b      	str	r3, [r7, #16]
 800a342:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a346:	461a      	mov	r2, r3
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d3b5      	bcc.n	800a2ba <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a35c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a360:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a36e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a370:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a374:	2b00      	cmp	r3, #0
 800a376:	d105      	bne.n	800a384 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	f043 0210 	orr.w	r2, r3, #16
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	4b10      	ldr	r3, [pc, #64]	@ (800a3cc <USB_DevInit+0x2c4>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a390:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a394:	2b00      	cmp	r3, #0
 800a396:	d005      	beq.n	800a3a4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	f043 0208 	orr.w	r2, r3, #8
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a3a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d107      	bne.n	800a3bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3b4:	f043 0304 	orr.w	r3, r3, #4
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3c8:	b004      	add	sp, #16
 800a3ca:	4770      	bx	lr
 800a3cc:	803c3800 	.word	0x803c3800

0800a3d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3ea:	d901      	bls.n	800a3f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e01b      	b.n	800a428 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	daf2      	bge.n	800a3de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	019b      	lsls	r3, r3, #6
 800a400:	f043 0220 	orr.w	r2, r3, #32
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3301      	adds	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a414:	d901      	bls.n	800a41a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e006      	b.n	800a428 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b20      	cmp	r3, #32
 800a424:	d0f0      	beq.n	800a408 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	3301      	adds	r3, #1
 800a444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a44c:	d901      	bls.n	800a452 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e018      	b.n	800a484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	daf2      	bge.n	800a440 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2210      	movs	r2, #16
 800a462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3301      	adds	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a470:	d901      	bls.n	800a476 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e006      	b.n	800a484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0310 	and.w	r3, r3, #16
 800a47e:	2b10      	cmp	r3, #16
 800a480:	d0f0      	beq.n	800a464 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	68f9      	ldr	r1, [r7, #12]
 800a4ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b087      	sub	sp, #28
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f003 0306 	and.w	r3, r3, #6
 800a4da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d102      	bne.n	800a4e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	75fb      	strb	r3, [r7, #23]
 800a4e6:	e00a      	b.n	800a4fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d002      	beq.n	800a4f4 <USB_GetDevSpeed+0x32>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b06      	cmp	r3, #6
 800a4f2:	d102      	bne.n	800a4fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	75fb      	strb	r3, [r7, #23]
 800a4f8:	e001      	b.n	800a4fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a4fa:	230f      	movs	r3, #15
 800a4fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a500:	4618      	mov	r0, r3
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	785b      	ldrb	r3, [r3, #1]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d13a      	bne.n	800a59e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a52e:	69da      	ldr	r2, [r3, #28]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	f003 030f 	and.w	r3, r3, #15
 800a538:	2101      	movs	r1, #1
 800a53a:	fa01 f303 	lsl.w	r3, r1, r3
 800a53e:	b29b      	uxth	r3, r3
 800a540:	68f9      	ldr	r1, [r7, #12]
 800a542:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a546:	4313      	orrs	r3, r2
 800a548:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d155      	bne.n	800a60c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4413      	add	r3, r2
 800a568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	791b      	ldrb	r3, [r3, #4]
 800a57a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a57c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	059b      	lsls	r3, r3, #22
 800a582:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a584:	4313      	orrs	r3, r2
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	0151      	lsls	r1, r2, #5
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	440a      	add	r2, r1
 800a58e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	e036      	b.n	800a60c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a4:	69da      	ldr	r2, [r3, #28]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	f003 030f 	and.w	r3, r3, #15
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b4:	041b      	lsls	r3, r3, #16
 800a5b6:	68f9      	ldr	r1, [r7, #12]
 800a5b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d11a      	bne.n	800a60c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	791b      	ldrb	r3, [r3, #4]
 800a5f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a5f2:	430b      	orrs	r3, r1
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	0151      	lsls	r1, r2, #5
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	440a      	add	r2, r1
 800a5fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a60a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
	...

0800a61c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	785b      	ldrb	r3, [r3, #1]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d161      	bne.n	800a6fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a64a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a64e:	d11f      	bne.n	800a690 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	0151      	lsls	r1, r2, #5
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	440a      	add	r2, r1
 800a666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a66a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a66e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	0151      	lsls	r1, r2, #5
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	440a      	add	r2, r1
 800a686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a68a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a68e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	f003 030f 	and.w	r3, r3, #15
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	43db      	mvns	r3, r3
 800a6aa:	68f9      	ldr	r1, [r7, #12]
 800a6ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6ba:	69da      	ldr	r2, [r3, #28]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	f003 030f 	and.w	r3, r3, #15
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	43db      	mvns	r3, r3
 800a6ce:	68f9      	ldr	r1, [r7, #12]
 800a6d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	0159      	lsls	r1, r3, #5
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	440b      	add	r3, r1
 800a6ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4b35      	ldr	r3, [pc, #212]	@ (800a7cc <USB_DeactivateEndpoint+0x1b0>)
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	600b      	str	r3, [r1, #0]
 800a6fa:	e060      	b.n	800a7be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a70e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a712:	d11f      	bne.n	800a754 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	0151      	lsls	r1, r2, #5
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	440a      	add	r2, r1
 800a72a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a72e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a732:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	0151      	lsls	r1, r2, #5
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	440a      	add	r2, r1
 800a74a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a74e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a752:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a75a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	f003 030f 	and.w	r3, r3, #15
 800a764:	2101      	movs	r1, #1
 800a766:	fa01 f303 	lsl.w	r3, r1, r3
 800a76a:	041b      	lsls	r3, r3, #16
 800a76c:	43db      	mvns	r3, r3
 800a76e:	68f9      	ldr	r1, [r7, #12]
 800a770:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a774:	4013      	ands	r3, r2
 800a776:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a77e:	69da      	ldr	r2, [r3, #28]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	f003 030f 	and.w	r3, r3, #15
 800a788:	2101      	movs	r1, #1
 800a78a:	fa01 f303 	lsl.w	r3, r1, r3
 800a78e:	041b      	lsls	r3, r3, #16
 800a790:	43db      	mvns	r3, r3
 800a792:	68f9      	ldr	r1, [r7, #12]
 800a794:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a798:	4013      	ands	r3, r2
 800a79a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	0159      	lsls	r1, r3, #5
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	440b      	add	r3, r1
 800a7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4b05      	ldr	r3, [pc, #20]	@ (800a7d0 <USB_DeactivateEndpoint+0x1b4>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	ec337800 	.word	0xec337800
 800a7d0:	eff37800 	.word	0xeff37800

0800a7d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	@ 0x28
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	785b      	ldrb	r3, [r3, #1]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	f040 817f 	bne.w	800aaf4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d132      	bne.n	800a864 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	440a      	add	r2, r1
 800a814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a818:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a81c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	69fa      	ldr	r2, [r7, #28]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a83c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	0151      	lsls	r1, r2, #5
 800a854:	69fa      	ldr	r2, [r7, #28]
 800a856:	440a      	add	r2, r1
 800a858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a85c:	0cdb      	lsrs	r3, r3, #19
 800a85e:	04db      	lsls	r3, r3, #19
 800a860:	6113      	str	r3, [r2, #16]
 800a862:	e097      	b.n	800a994 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	69ba      	ldr	r2, [r7, #24]
 800a874:	0151      	lsls	r1, r2, #5
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	440a      	add	r2, r1
 800a87a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a87e:	0cdb      	lsrs	r3, r3, #19
 800a880:	04db      	lsls	r3, r3, #19
 800a882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	0151      	lsls	r1, r2, #5
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	440a      	add	r2, r1
 800a89a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a89e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a8a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a8a6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d11a      	bne.n	800a8e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	691a      	ldr	r2, [r3, #16]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d903      	bls.n	800a8c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	689a      	ldr	r2, [r3, #8]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	015a      	lsls	r2, r3, #5
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	69ba      	ldr	r2, [r7, #24]
 800a8d2:	0151      	lsls	r1, r2, #5
 800a8d4:	69fa      	ldr	r2, [r7, #28]
 800a8d6:	440a      	add	r2, r1
 800a8d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8e0:	6113      	str	r3, [r2, #16]
 800a8e2:	e044      	b.n	800a96e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	691a      	ldr	r2, [r3, #16]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	1e5a      	subs	r2, r3, #1
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	015a      	lsls	r2, r3, #5
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	4413      	add	r3, r2
 800a902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a906:	691a      	ldr	r2, [r3, #16]
 800a908:	8afb      	ldrh	r3, [r7, #22]
 800a90a:	04d9      	lsls	r1, r3, #19
 800a90c:	4ba4      	ldr	r3, [pc, #656]	@ (800aba0 <USB_EPStartXfer+0x3cc>)
 800a90e:	400b      	ands	r3, r1
 800a910:	69b9      	ldr	r1, [r7, #24]
 800a912:	0148      	lsls	r0, r1, #5
 800a914:	69f9      	ldr	r1, [r7, #28]
 800a916:	4401      	add	r1, r0
 800a918:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a91c:	4313      	orrs	r3, r2
 800a91e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	791b      	ldrb	r3, [r3, #4]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d122      	bne.n	800a96e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	0151      	lsls	r1, r2, #5
 800a93a:	69fa      	ldr	r2, [r7, #28]
 800a93c:	440a      	add	r2, r1
 800a93e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a942:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a946:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a954:	691a      	ldr	r2, [r3, #16]
 800a956:	8afb      	ldrh	r3, [r7, #22]
 800a958:	075b      	lsls	r3, r3, #29
 800a95a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a95e:	69b9      	ldr	r1, [r7, #24]
 800a960:	0148      	lsls	r0, r1, #5
 800a962:	69f9      	ldr	r1, [r7, #28]
 800a964:	4401      	add	r1, r0
 800a966:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a96a:	4313      	orrs	r3, r2
 800a96c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a97a:	691a      	ldr	r2, [r3, #16]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a984:	69b9      	ldr	r1, [r7, #24]
 800a986:	0148      	lsls	r0, r1, #5
 800a988:	69f9      	ldr	r1, [r7, #28]
 800a98a:	4401      	add	r1, r0
 800a98c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a990:	4313      	orrs	r3, r2
 800a992:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d14b      	bne.n	800aa32 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d009      	beq.n	800a9b6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	69db      	ldr	r3, [r3, #28]
 800a9b4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	791b      	ldrb	r3, [r3, #4]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d128      	bne.n	800aa10 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d110      	bne.n	800a9f0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	015a      	lsls	r2, r3, #5
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	0151      	lsls	r1, r2, #5
 800a9e0:	69fa      	ldr	r2, [r7, #28]
 800a9e2:	440a      	add	r2, r1
 800a9e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	e00f      	b.n	800aa10 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	0151      	lsls	r1, r2, #5
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	440a      	add	r2, r1
 800aa06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa0e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	69ba      	ldr	r2, [r7, #24]
 800aa20:	0151      	lsls	r1, r2, #5
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	440a      	add	r2, r1
 800aa26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	e166      	b.n	800ad00 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	0151      	lsls	r1, r2, #5
 800aa44:	69fa      	ldr	r2, [r7, #28]
 800aa46:	440a      	add	r2, r1
 800aa48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa50:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	791b      	ldrb	r3, [r3, #4]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d015      	beq.n	800aa86 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 814e 	beq.w	800ad00 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	f003 030f 	and.w	r3, r3, #15
 800aa74:	2101      	movs	r1, #1
 800aa76:	fa01 f303 	lsl.w	r3, r1, r3
 800aa7a:	69f9      	ldr	r1, [r7, #28]
 800aa7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa80:	4313      	orrs	r3, r2
 800aa82:	634b      	str	r3, [r1, #52]	@ 0x34
 800aa84:	e13c      	b.n	800ad00 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d110      	bne.n	800aab8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	015a      	lsls	r2, r3, #5
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	0151      	lsls	r1, r2, #5
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	440a      	add	r2, r1
 800aaac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aab0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	e00f      	b.n	800aad8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	0151      	lsls	r1, r2, #5
 800aaca:	69fa      	ldr	r2, [r7, #28]
 800aacc:	440a      	add	r2, r1
 800aace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aad6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	68d9      	ldr	r1, [r3, #12]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	781a      	ldrb	r2, [r3, #0]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	b298      	uxth	r0, r3
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	4603      	mov	r3, r0
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 f9b9 	bl	800ae64 <USB_WritePacket>
 800aaf2:	e105      	b.n	800ad00 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	0151      	lsls	r1, r2, #5
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	440a      	add	r2, r1
 800ab0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab0e:	0cdb      	lsrs	r3, r3, #19
 800ab10:	04db      	lsls	r3, r3, #19
 800ab12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	69ba      	ldr	r2, [r7, #24]
 800ab24:	0151      	lsls	r1, r2, #5
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	440a      	add	r2, r1
 800ab2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab32:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ab36:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d132      	bne.n	800aba4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	689a      	ldr	r2, [r3, #8]
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	689a      	ldr	r2, [r3, #8]
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab62:	691a      	ldr	r2, [r3, #16]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab6c:	69b9      	ldr	r1, [r7, #24]
 800ab6e:	0148      	lsls	r0, r1, #5
 800ab70:	69f9      	ldr	r1, [r7, #28]
 800ab72:	4401      	add	r1, r0
 800ab74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab9a:	6113      	str	r3, [r2, #16]
 800ab9c:	e062      	b.n	800ac64 <USB_EPStartXfer+0x490>
 800ab9e:	bf00      	nop
 800aba0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d123      	bne.n	800abf4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abb8:	691a      	ldr	r2, [r3, #16]
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abc2:	69b9      	ldr	r1, [r7, #24]
 800abc4:	0148      	lsls	r0, r1, #5
 800abc6:	69f9      	ldr	r1, [r7, #28]
 800abc8:	4401      	add	r1, r0
 800abca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800abce:	4313      	orrs	r3, r2
 800abd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	69fa      	ldr	r2, [r7, #28]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800abf0:	6113      	str	r3, [r2, #16]
 800abf2:	e037      	b.n	800ac64 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	691a      	ldr	r2, [r3, #16]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	4413      	add	r3, r2
 800abfe:	1e5a      	subs	r2, r3, #1
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac08:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	8afa      	ldrh	r2, [r7, #22]
 800ac10:	fb03 f202 	mul.w	r2, r3, r2
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac24:	691a      	ldr	r2, [r3, #16]
 800ac26:	8afb      	ldrh	r3, [r7, #22]
 800ac28:	04d9      	lsls	r1, r3, #19
 800ac2a:	4b38      	ldr	r3, [pc, #224]	@ (800ad0c <USB_EPStartXfer+0x538>)
 800ac2c:	400b      	ands	r3, r1
 800ac2e:	69b9      	ldr	r1, [r7, #24]
 800ac30:	0148      	lsls	r0, r1, #5
 800ac32:	69f9      	ldr	r1, [r7, #28]
 800ac34:	4401      	add	r1, r0
 800ac36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac54:	69b9      	ldr	r1, [r7, #24]
 800ac56:	0148      	lsls	r0, r1, #5
 800ac58:	69f9      	ldr	r1, [r7, #28]
 800ac5a:	4401      	add	r1, r0
 800ac5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac60:	4313      	orrs	r3, r2
 800ac62:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d10d      	bne.n	800ac86 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d009      	beq.n	800ac86 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	68d9      	ldr	r1, [r3, #12]
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac82:	460a      	mov	r2, r1
 800ac84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	791b      	ldrb	r3, [r3, #4]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d128      	bne.n	800ace0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d110      	bne.n	800acc0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	0151      	lsls	r1, r2, #5
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	440a      	add	r2, r1
 800acb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	e00f      	b.n	800ace0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	015a      	lsls	r2, r3, #5
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	4413      	add	r3, r2
 800acc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	69ba      	ldr	r2, [r7, #24]
 800acd0:	0151      	lsls	r1, r2, #5
 800acd2:	69fa      	ldr	r2, [r7, #28]
 800acd4:	440a      	add	r2, r1
 800acd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	0151      	lsls	r1, r2, #5
 800acf2:	69fa      	ldr	r2, [r7, #28]
 800acf4:	440a      	add	r2, r1
 800acf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acfa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800acfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3720      	adds	r7, #32
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	1ff80000 	.word	0x1ff80000

0800ad10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	785b      	ldrb	r3, [r3, #1]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d14a      	bne.n	800adc4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad46:	f040 8086 	bne.w	800ae56 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	7812      	ldrb	r2, [r2, #0]
 800ad5e:	0151      	lsls	r1, r2, #5
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	440a      	add	r2, r1
 800ad64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	7812      	ldrb	r2, [r2, #0]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3301      	adds	r3, #1
 800ad96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d902      	bls.n	800ada8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	75fb      	strb	r3, [r7, #23]
          break;
 800ada6:	e056      	b.n	800ae56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adc0:	d0e7      	beq.n	800ad92 <USB_EPStopXfer+0x82>
 800adc2:	e048      	b.n	800ae56 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800add8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800addc:	d13b      	bne.n	800ae56 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	7812      	ldrb	r2, [r2, #0]
 800adf2:	0151      	lsls	r1, r2, #5
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	440a      	add	r2, r1
 800adf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae00:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	7812      	ldrb	r2, [r2, #0]
 800ae16:	0151      	lsls	r1, r2, #5
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	440a      	add	r2, r1
 800ae1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d902      	bls.n	800ae3c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	75fb      	strb	r3, [r7, #23]
          break;
 800ae3a:	e00c      	b.n	800ae56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae54:	d0e7      	beq.n	800ae26 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ae56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	371c      	adds	r7, #28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b089      	sub	sp, #36	@ 0x24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	461a      	mov	r2, r3
 800ae72:	460b      	mov	r3, r1
 800ae74:	71fb      	strb	r3, [r7, #7]
 800ae76:	4613      	mov	r3, r2
 800ae78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ae82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d123      	bne.n	800aed2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae8a:	88bb      	ldrh	r3, [r7, #4]
 800ae8c:	3303      	adds	r3, #3
 800ae8e:	089b      	lsrs	r3, r3, #2
 800ae90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae92:	2300      	movs	r3, #0
 800ae94:	61bb      	str	r3, [r7, #24]
 800ae96:	e018      	b.n	800aeca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae98:	79fb      	ldrb	r3, [r7, #7]
 800ae9a:	031a      	lsls	r2, r3, #12
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aea4:	461a      	mov	r2, r3
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	3301      	adds	r3, #1
 800aebc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	3301      	adds	r3, #1
 800aec2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	3301      	adds	r3, #1
 800aec8:	61bb      	str	r3, [r7, #24]
 800aeca:	69ba      	ldr	r2, [r7, #24]
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d3e2      	bcc.n	800ae98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3724      	adds	r7, #36	@ 0x24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b08b      	sub	sp, #44	@ 0x2c
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	4613      	mov	r3, r2
 800aeec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	089b      	lsrs	r3, r3, #2
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aefe:	88fb      	ldrh	r3, [r7, #6]
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af06:	2300      	movs	r3, #0
 800af08:	623b      	str	r3, [r7, #32]
 800af0a:	e014      	b.n	800af36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	601a      	str	r2, [r3, #0]
    pDest++;
 800af18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1a:	3301      	adds	r3, #1
 800af1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af20:	3301      	adds	r3, #1
 800af22:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	3301      	adds	r3, #1
 800af28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2c:	3301      	adds	r3, #1
 800af2e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	3301      	adds	r3, #1
 800af34:	623b      	str	r3, [r7, #32]
 800af36:	6a3a      	ldr	r2, [r7, #32]
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d3e6      	bcc.n	800af0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800af3e:	8bfb      	ldrh	r3, [r7, #30]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d01e      	beq.n	800af82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800af44:	2300      	movs	r3, #0
 800af46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af4e:	461a      	mov	r2, r3
 800af50:	f107 0310 	add.w	r3, r7, #16
 800af54:	6812      	ldr	r2, [r2, #0]
 800af56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	fa22 f303 	lsr.w	r3, r2, r3
 800af64:	b2da      	uxtb	r2, r3
 800af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af68:	701a      	strb	r2, [r3, #0]
      i++;
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	3301      	adds	r3, #1
 800af6e:	623b      	str	r3, [r7, #32]
      pDest++;
 800af70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af72:	3301      	adds	r3, #1
 800af74:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800af76:	8bfb      	ldrh	r3, [r7, #30]
 800af78:	3b01      	subs	r3, #1
 800af7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800af7c:	8bfb      	ldrh	r3, [r7, #30]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1ea      	bne.n	800af58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800af82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af84:	4618      	mov	r0, r3
 800af86:	372c      	adds	r7, #44	@ 0x2c
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	785b      	ldrb	r3, [r3, #1]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d12c      	bne.n	800b006 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	db12      	blt.n	800afe4 <USB_EPSetStall+0x54>
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00f      	beq.n	800afe4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	015a      	lsls	r2, r3, #5
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4413      	add	r3, r2
 800afcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	0151      	lsls	r1, r2, #5
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	440a      	add	r2, r1
 800afda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afde:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800afe2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	0151      	lsls	r1, r2, #5
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	440a      	add	r2, r1
 800affa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800affe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	e02b      	b.n	800b05e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	015a      	lsls	r2, r3, #5
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	4413      	add	r3, r2
 800b00e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	db12      	blt.n	800b03e <USB_EPSetStall+0xae>
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00f      	beq.n	800b03e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	015a      	lsls	r2, r3, #5
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	4413      	add	r3, r2
 800b026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	0151      	lsls	r1, r2, #5
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	440a      	add	r2, r1
 800b034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b038:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b03c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	4413      	add	r3, r2
 800b046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	0151      	lsls	r1, r2, #5
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	440a      	add	r2, r1
 800b054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b058:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b05c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d128      	bne.n	800b0da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b0a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	791b      	ldrb	r3, [r3, #4]
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d003      	beq.n	800b0b8 <USB_EPClearStall+0x4c>
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	791b      	ldrb	r3, [r3, #4]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d138      	bne.n	800b12a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	0151      	lsls	r1, r2, #5
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	440a      	add	r2, r1
 800b0ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	e027      	b.n	800b12a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	0151      	lsls	r1, r2, #5
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	440a      	add	r2, r1
 800b0f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b0f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	791b      	ldrb	r3, [r3, #4]
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d003      	beq.n	800b10a <USB_EPClearStall+0x9e>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	791b      	ldrb	r3, [r3, #4]
 800b106:	2b02      	cmp	r3, #2
 800b108:	d10f      	bne.n	800b12a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	015a      	lsls	r2, r3, #5
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	4413      	add	r3, r2
 800b112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	0151      	lsls	r1, r2, #5
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	440a      	add	r2, r1
 800b120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b128:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b156:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b15a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b16c:	68f9      	ldr	r1, [r7, #12]
 800b16e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b172:	4313      	orrs	r3, r2
 800b174:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b19e:	f023 0303 	bic.w	r3, r3, #3
 800b1a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1b2:	f023 0302 	bic.w	r3, r3, #2
 800b1b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b085      	sub	sp, #20
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b1e0:	f023 0303 	bic.w	r3, r3, #3
 800b1e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1f4:	f043 0302 	orr.w	r3, r3, #2
 800b1f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	4013      	ands	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b220:	68fb      	ldr	r3, [r7, #12]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	4013      	ands	r3, r2
 800b250:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	0c1b      	lsrs	r3, r3, #16
}
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b262:	b480      	push	{r7}
 800b264:	b085      	sub	sp, #20
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b27e:	69db      	ldr	r3, [r3, #28]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	4013      	ands	r3, r2
 800b284:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	b29b      	uxth	r3, r3
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b296:	b480      	push	{r7}
 800b298:	b085      	sub	sp, #20
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b2a6:	78fb      	ldrb	r3, [r7, #3]
 800b2a8:	015a      	lsls	r2, r3, #5
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b087      	sub	sp, #28
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	f003 030f 	and.w	r3, r3, #15
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b302:	01db      	lsls	r3, r3, #7
 800b304:	b2db      	uxtb	r3, r3
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	4313      	orrs	r3, r2
 800b30a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b30c:	78fb      	ldrb	r3, [r7, #3]
 800b30e:	015a      	lsls	r2, r3, #5
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	4413      	add	r3, r2
 800b314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	4013      	ands	r3, r2
 800b31e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b320:	68bb      	ldr	r3, [r7, #8]
}
 800b322:	4618      	mov	r0, r3
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	f003 0301 	and.w	r3, r3, #1
}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b085      	sub	sp, #20
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b364:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b368:	f023 0307 	bic.w	r3, r3, #7
 800b36c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b37c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b380:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	460b      	mov	r3, r1
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	333c      	adds	r3, #60	@ 0x3c
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	4a26      	ldr	r2, [pc, #152]	@ (800b448 <USB_EP0_OutStart+0xb8>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d90a      	bls.n	800b3ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3c4:	d101      	bne.n	800b3ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e037      	b.n	800b43a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3f8:	f043 0318 	orr.w	r3, r3, #24
 800b3fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b40c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b410:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b412:	7afb      	ldrb	r3, [r7, #11]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d10f      	bne.n	800b438 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b41e:	461a      	mov	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b432:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b436:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	371c      	adds	r7, #28
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	4f54300a 	.word	0x4f54300a

0800b44c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b454:	2300      	movs	r3, #0
 800b456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3301      	adds	r3, #1
 800b45c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b464:	d901      	bls.n	800b46a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e022      	b.n	800b4b0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	daf2      	bge.n	800b458 <USB_CoreReset+0xc>

  count = 10U;
 800b472:	230a      	movs	r3, #10
 800b474:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b476:	e002      	b.n	800b47e <USB_CoreReset+0x32>
  {
    count--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1f9      	bne.n	800b478 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	f043 0201 	orr.w	r2, r3, #1
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3301      	adds	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b49c:	d901      	bls.n	800b4a2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e006      	b.n	800b4b0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	f003 0301 	and.w	r3, r3, #1
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d0f0      	beq.n	800b490 <USB_CoreReset+0x44>

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b4c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b4cc:	f002 fd1e 	bl	800df0c <USBD_static_malloc>
 800b4d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d109      	bne.n	800b4ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	32b0      	adds	r2, #176	@ 0xb0
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	e0d4      	b.n	800b696 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b4ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f002 fd9e 	bl	800e034 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	32b0      	adds	r2, #176	@ 0xb0
 800b502:	68f9      	ldr	r1, [r7, #12]
 800b504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	32b0      	adds	r2, #176	@ 0xb0
 800b512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	7c1b      	ldrb	r3, [r3, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d138      	bne.n	800b596 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b524:	4b5e      	ldr	r3, [pc, #376]	@ (800b6a0 <USBD_CDC_Init+0x1e4>)
 800b526:	7819      	ldrb	r1, [r3, #0]
 800b528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b52c:	2202      	movs	r2, #2
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f002 fbc9 	bl	800dcc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b534:	4b5a      	ldr	r3, [pc, #360]	@ (800b6a0 <USBD_CDC_Init+0x1e4>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f003 020f 	and.w	r2, r3, #15
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	3323      	adds	r3, #35	@ 0x23
 800b54a:	2201      	movs	r2, #1
 800b54c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b54e:	4b55      	ldr	r3, [pc, #340]	@ (800b6a4 <USBD_CDC_Init+0x1e8>)
 800b550:	7819      	ldrb	r1, [r3, #0]
 800b552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b556:	2202      	movs	r2, #2
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f002 fbb4 	bl	800dcc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b55e:	4b51      	ldr	r3, [pc, #324]	@ (800b6a4 <USBD_CDC_Init+0x1e8>)
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	f003 020f 	and.w	r2, r3, #15
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	440b      	add	r3, r1
 800b572:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b576:	2201      	movs	r2, #1
 800b578:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b57a:	4b4b      	ldr	r3, [pc, #300]	@ (800b6a8 <USBD_CDC_Init+0x1ec>)
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	f003 020f 	and.w	r2, r3, #15
 800b582:	6879      	ldr	r1, [r7, #4]
 800b584:	4613      	mov	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	440b      	add	r3, r1
 800b58e:	331c      	adds	r3, #28
 800b590:	2210      	movs	r2, #16
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	e035      	b.n	800b602 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b596:	4b42      	ldr	r3, [pc, #264]	@ (800b6a0 <USBD_CDC_Init+0x1e4>)
 800b598:	7819      	ldrb	r1, [r3, #0]
 800b59a:	2340      	movs	r3, #64	@ 0x40
 800b59c:	2202      	movs	r2, #2
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f002 fb91 	bl	800dcc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b5a4:	4b3e      	ldr	r3, [pc, #248]	@ (800b6a0 <USBD_CDC_Init+0x1e4>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	f003 020f 	and.w	r2, r3, #15
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	440b      	add	r3, r1
 800b5b8:	3323      	adds	r3, #35	@ 0x23
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b5be:	4b39      	ldr	r3, [pc, #228]	@ (800b6a4 <USBD_CDC_Init+0x1e8>)
 800b5c0:	7819      	ldrb	r1, [r3, #0]
 800b5c2:	2340      	movs	r3, #64	@ 0x40
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f002 fb7d 	bl	800dcc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b5cc:	4b35      	ldr	r3, [pc, #212]	@ (800b6a4 <USBD_CDC_Init+0x1e8>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	f003 020f 	and.w	r2, r3, #15
 800b5d4:	6879      	ldr	r1, [r7, #4]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	440b      	add	r3, r1
 800b5e0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b5e8:	4b2f      	ldr	r3, [pc, #188]	@ (800b6a8 <USBD_CDC_Init+0x1ec>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	f003 020f 	and.w	r2, r3, #15
 800b5f0:	6879      	ldr	r1, [r7, #4]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	440b      	add	r3, r1
 800b5fc:	331c      	adds	r3, #28
 800b5fe:	2210      	movs	r2, #16
 800b600:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b602:	4b29      	ldr	r3, [pc, #164]	@ (800b6a8 <USBD_CDC_Init+0x1ec>)
 800b604:	7819      	ldrb	r1, [r3, #0]
 800b606:	2308      	movs	r3, #8
 800b608:	2203      	movs	r2, #3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f002 fb5b 	bl	800dcc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b610:	4b25      	ldr	r3, [pc, #148]	@ (800b6a8 <USBD_CDC_Init+0x1ec>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	f003 020f 	and.w	r2, r3, #15
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	440b      	add	r3, r1
 800b624:	3323      	adds	r3, #35	@ 0x23
 800b626:	2201      	movs	r2, #1
 800b628:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	33b0      	adds	r3, #176	@ 0xb0
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b660:	2302      	movs	r3, #2
 800b662:	e018      	b.n	800b696 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	7c1b      	ldrb	r3, [r3, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10a      	bne.n	800b682 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b66c:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a4 <USBD_CDC_Init+0x1e8>)
 800b66e:	7819      	ldrb	r1, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f002 fc12 	bl	800dea4 <USBD_LL_PrepareReceive>
 800b680:	e008      	b.n	800b694 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b682:	4b08      	ldr	r3, [pc, #32]	@ (800b6a4 <USBD_CDC_Init+0x1e8>)
 800b684:	7819      	ldrb	r1, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b68c:	2340      	movs	r3, #64	@ 0x40
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f002 fc08 	bl	800dea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	200000c3 	.word	0x200000c3
 800b6a4:	200000c4 	.word	0x200000c4
 800b6a8:	200000c5 	.word	0x200000c5

0800b6ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b6b8:	4b3a      	ldr	r3, [pc, #232]	@ (800b7a4 <USBD_CDC_DeInit+0xf8>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f002 fb27 	bl	800dd12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b6c4:	4b37      	ldr	r3, [pc, #220]	@ (800b7a4 <USBD_CDC_DeInit+0xf8>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 020f 	and.w	r2, r3, #15
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	3323      	adds	r3, #35	@ 0x23
 800b6da:	2200      	movs	r2, #0
 800b6dc:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b6de:	4b32      	ldr	r3, [pc, #200]	@ (800b7a8 <USBD_CDC_DeInit+0xfc>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f002 fb14 	bl	800dd12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b6ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b7a8 <USBD_CDC_DeInit+0xfc>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	f003 020f 	and.w	r2, r3, #15
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	4413      	add	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	440b      	add	r3, r1
 800b6fe:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b702:	2200      	movs	r2, #0
 800b704:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b706:	4b29      	ldr	r3, [pc, #164]	@ (800b7ac <USBD_CDC_DeInit+0x100>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f002 fb00 	bl	800dd12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b712:	4b26      	ldr	r3, [pc, #152]	@ (800b7ac <USBD_CDC_DeInit+0x100>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	f003 020f 	and.w	r2, r3, #15
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	4613      	mov	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	440b      	add	r3, r1
 800b726:	3323      	adds	r3, #35	@ 0x23
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b72c:	4b1f      	ldr	r3, [pc, #124]	@ (800b7ac <USBD_CDC_DeInit+0x100>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	f003 020f 	and.w	r2, r3, #15
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	440b      	add	r3, r1
 800b740:	331c      	adds	r3, #28
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	32b0      	adds	r2, #176	@ 0xb0
 800b750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d01f      	beq.n	800b798 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	33b0      	adds	r3, #176	@ 0xb0
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	32b0      	adds	r2, #176	@ 0xb0
 800b776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f002 fbd4 	bl	800df28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	32b0      	adds	r2, #176	@ 0xb0
 800b78a:	2100      	movs	r1, #0
 800b78c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	200000c3 	.word	0x200000c3
 800b7a8:	200000c4 	.word	0x200000c4
 800b7ac:	200000c5 	.word	0x200000c5

0800b7b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	32b0      	adds	r2, #176	@ 0xb0
 800b7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d101      	bne.n	800b7e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e0bf      	b.n	800b960 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d050      	beq.n	800b88e <USBD_CDC_Setup+0xde>
 800b7ec:	2b20      	cmp	r3, #32
 800b7ee:	f040 80af 	bne.w	800b950 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	88db      	ldrh	r3, [r3, #6]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d03a      	beq.n	800b870 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	b25b      	sxtb	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	da1b      	bge.n	800b83c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	33b0      	adds	r3, #176	@ 0xb0
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b81a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	88d2      	ldrh	r2, [r2, #6]
 800b820:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	88db      	ldrh	r3, [r3, #6]
 800b826:	2b07      	cmp	r3, #7
 800b828:	bf28      	it	cs
 800b82a:	2307      	movcs	r3, #7
 800b82c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	89fa      	ldrh	r2, [r7, #14]
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f001 fda9 	bl	800d38c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b83a:	e090      	b.n	800b95e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	785a      	ldrb	r2, [r3, #1]
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	88db      	ldrh	r3, [r3, #6]
 800b84a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b84c:	d803      	bhi.n	800b856 <USBD_CDC_Setup+0xa6>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	88db      	ldrh	r3, [r3, #6]
 800b852:	b2da      	uxtb	r2, r3
 800b854:	e000      	b.n	800b858 <USBD_CDC_Setup+0xa8>
 800b856:	2240      	movs	r2, #64	@ 0x40
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b85e:	6939      	ldr	r1, [r7, #16]
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b866:	461a      	mov	r2, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f001 fdbe 	bl	800d3ea <USBD_CtlPrepareRx>
      break;
 800b86e:	e076      	b.n	800b95e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	33b0      	adds	r3, #176	@ 0xb0
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	7850      	ldrb	r0, [r2, #1]
 800b886:	2200      	movs	r2, #0
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	4798      	blx	r3
      break;
 800b88c:	e067      	b.n	800b95e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	785b      	ldrb	r3, [r3, #1]
 800b892:	2b0b      	cmp	r3, #11
 800b894:	d851      	bhi.n	800b93a <USBD_CDC_Setup+0x18a>
 800b896:	a201      	add	r2, pc, #4	@ (adr r2, 800b89c <USBD_CDC_Setup+0xec>)
 800b898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89c:	0800b8cd 	.word	0x0800b8cd
 800b8a0:	0800b949 	.word	0x0800b949
 800b8a4:	0800b93b 	.word	0x0800b93b
 800b8a8:	0800b93b 	.word	0x0800b93b
 800b8ac:	0800b93b 	.word	0x0800b93b
 800b8b0:	0800b93b 	.word	0x0800b93b
 800b8b4:	0800b93b 	.word	0x0800b93b
 800b8b8:	0800b93b 	.word	0x0800b93b
 800b8bc:	0800b93b 	.word	0x0800b93b
 800b8c0:	0800b93b 	.word	0x0800b93b
 800b8c4:	0800b8f7 	.word	0x0800b8f7
 800b8c8:	0800b921 	.word	0x0800b921
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b03      	cmp	r3, #3
 800b8d6:	d107      	bne.n	800b8e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b8d8:	f107 030a 	add.w	r3, r7, #10
 800b8dc:	2202      	movs	r2, #2
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 fd53 	bl	800d38c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8e6:	e032      	b.n	800b94e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f001 fcd1 	bl	800d292 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	75fb      	strb	r3, [r7, #23]
          break;
 800b8f4:	e02b      	b.n	800b94e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d107      	bne.n	800b912 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b902:	f107 030d 	add.w	r3, r7, #13
 800b906:	2201      	movs	r2, #1
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 fd3e 	bl	800d38c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b910:	e01d      	b.n	800b94e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fcbc 	bl	800d292 <USBD_CtlError>
            ret = USBD_FAIL;
 800b91a:	2303      	movs	r3, #3
 800b91c:	75fb      	strb	r3, [r7, #23]
          break;
 800b91e:	e016      	b.n	800b94e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d00f      	beq.n	800b94c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f001 fcaf 	bl	800d292 <USBD_CtlError>
            ret = USBD_FAIL;
 800b934:	2303      	movs	r3, #3
 800b936:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b938:	e008      	b.n	800b94c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 fca8 	bl	800d292 <USBD_CtlError>
          ret = USBD_FAIL;
 800b942:	2303      	movs	r3, #3
 800b944:	75fb      	strb	r3, [r7, #23]
          break;
 800b946:	e002      	b.n	800b94e <USBD_CDC_Setup+0x19e>
          break;
 800b948:	bf00      	nop
 800b94a:	e008      	b.n	800b95e <USBD_CDC_Setup+0x1ae>
          break;
 800b94c:	bf00      	nop
      }
      break;
 800b94e:	e006      	b.n	800b95e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 fc9d 	bl	800d292 <USBD_CtlError>
      ret = USBD_FAIL;
 800b958:	2303      	movs	r3, #3
 800b95a:	75fb      	strb	r3, [r7, #23]
      break;
 800b95c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b97a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	32b0      	adds	r2, #176	@ 0xb0
 800b986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b98e:	2303      	movs	r3, #3
 800b990:	e065      	b.n	800ba5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	32b0      	adds	r2, #176	@ 0xb0
 800b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b9a2:	78fb      	ldrb	r3, [r7, #3]
 800b9a4:	f003 020f 	and.w	r2, r3, #15
 800b9a8:	6879      	ldr	r1, [r7, #4]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	440b      	add	r3, r1
 800b9b4:	3314      	adds	r3, #20
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d02f      	beq.n	800ba1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b9bc:	78fb      	ldrb	r3, [r7, #3]
 800b9be:	f003 020f 	and.w	r2, r3, #15
 800b9c2:	6879      	ldr	r1, [r7, #4]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	440b      	add	r3, r1
 800b9ce:	3314      	adds	r3, #20
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	f003 010f 	and.w	r1, r3, #15
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	00db      	lsls	r3, r3, #3
 800b9de:	440b      	add	r3, r1
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4403      	add	r3, r0
 800b9e4:	331c      	adds	r3, #28
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b9ec:	fb01 f303 	mul.w	r3, r1, r3
 800b9f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d112      	bne.n	800ba1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b9f6:	78fb      	ldrb	r3, [r7, #3]
 800b9f8:	f003 020f 	and.w	r2, r3, #15
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	440b      	add	r3, r1
 800ba08:	3314      	adds	r3, #20
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba0e:	78f9      	ldrb	r1, [r7, #3]
 800ba10:	2300      	movs	r3, #0
 800ba12:	2200      	movs	r2, #0
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f002 fa24 	bl	800de62 <USBD_LL_Transmit>
 800ba1a:	e01f      	b.n	800ba5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	33b0      	adds	r3, #176	@ 0xb0
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4413      	add	r3, r2
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d010      	beq.n	800ba5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	33b0      	adds	r3, #176	@ 0xb0
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ba58:	78fa      	ldrb	r2, [r7, #3]
 800ba5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	32b0      	adds	r2, #176	@ 0xb0
 800ba7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	32b0      	adds	r2, #176	@ 0xb0
 800ba8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e01a      	b.n	800bace <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ba98:	78fb      	ldrb	r3, [r7, #3]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f002 fa22 	bl	800dee6 <USBD_LL_GetRxDataSize>
 800baa2:	4602      	mov	r2, r0
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	33b0      	adds	r3, #176	@ 0xb0
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bac8:	4611      	mov	r1, r2
 800baca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	32b0      	adds	r2, #176	@ 0xb0
 800bae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e024      	b.n	800bb42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	33b0      	adds	r3, #176	@ 0xb0
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d019      	beq.n	800bb40 <USBD_CDC_EP0_RxReady+0x6a>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bb12:	2bff      	cmp	r3, #255	@ 0xff
 800bb14:	d014      	beq.n	800bb40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	33b0      	adds	r3, #176	@ 0xb0
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bb2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bb36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	22ff      	movs	r2, #255	@ 0xff
 800bb3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb54:	2182      	movs	r1, #130	@ 0x82
 800bb56:	4818      	ldr	r0, [pc, #96]	@ (800bbb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb58:	f000 fd62 	bl	800c620 <USBD_GetEpDesc>
 800bb5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb5e:	2101      	movs	r1, #1
 800bb60:	4815      	ldr	r0, [pc, #84]	@ (800bbb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb62:	f000 fd5d 	bl	800c620 <USBD_GetEpDesc>
 800bb66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bb68:	2181      	movs	r1, #129	@ 0x81
 800bb6a:	4813      	ldr	r0, [pc, #76]	@ (800bbb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb6c:	f000 fd58 	bl	800c620 <USBD_GetEpDesc>
 800bb70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2210      	movs	r2, #16
 800bb7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d006      	beq.n	800bb92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb8c:	711a      	strb	r2, [r3, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d006      	beq.n	800bba6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bba0:	711a      	strb	r2, [r3, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2243      	movs	r2, #67	@ 0x43
 800bbaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bbac:	4b02      	ldr	r3, [pc, #8]	@ (800bbb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000080 	.word	0x20000080

0800bbbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bbc4:	2182      	movs	r1, #130	@ 0x82
 800bbc6:	4818      	ldr	r0, [pc, #96]	@ (800bc28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bbc8:	f000 fd2a 	bl	800c620 <USBD_GetEpDesc>
 800bbcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bbce:	2101      	movs	r1, #1
 800bbd0:	4815      	ldr	r0, [pc, #84]	@ (800bc28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bbd2:	f000 fd25 	bl	800c620 <USBD_GetEpDesc>
 800bbd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bbd8:	2181      	movs	r1, #129	@ 0x81
 800bbda:	4813      	ldr	r0, [pc, #76]	@ (800bc28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bbdc:	f000 fd20 	bl	800c620 <USBD_GetEpDesc>
 800bbe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d002      	beq.n	800bbee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	2210      	movs	r2, #16
 800bbec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d006      	beq.n	800bc02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	711a      	strb	r2, [r3, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f042 0202 	orr.w	r2, r2, #2
 800bc00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d006      	beq.n	800bc16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	711a      	strb	r2, [r3, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f042 0202 	orr.w	r2, r2, #2
 800bc14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2243      	movs	r2, #67	@ 0x43
 800bc1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc1c:	4b02      	ldr	r3, [pc, #8]	@ (800bc28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20000080 	.word	0x20000080

0800bc2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc34:	2182      	movs	r1, #130	@ 0x82
 800bc36:	4818      	ldr	r0, [pc, #96]	@ (800bc98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bc38:	f000 fcf2 	bl	800c620 <USBD_GetEpDesc>
 800bc3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc3e:	2101      	movs	r1, #1
 800bc40:	4815      	ldr	r0, [pc, #84]	@ (800bc98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bc42:	f000 fced 	bl	800c620 <USBD_GetEpDesc>
 800bc46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc48:	2181      	movs	r1, #129	@ 0x81
 800bc4a:	4813      	ldr	r0, [pc, #76]	@ (800bc98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bc4c:	f000 fce8 	bl	800c620 <USBD_GetEpDesc>
 800bc50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2210      	movs	r2, #16
 800bc5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d006      	beq.n	800bc72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc6c:	711a      	strb	r2, [r3, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d006      	beq.n	800bc86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc80:	711a      	strb	r2, [r3, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2243      	movs	r2, #67	@ 0x43
 800bc8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc8c:	4b02      	ldr	r3, [pc, #8]	@ (800bc98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20000080 	.word	0x20000080

0800bc9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	220a      	movs	r2, #10
 800bca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bcaa:	4b03      	ldr	r3, [pc, #12]	@ (800bcb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	2000003c 	.word	0x2000003c

0800bcbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bccc:	2303      	movs	r3, #3
 800bcce:	e009      	b.n	800bce4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	33b0      	adds	r3, #176	@ 0xb0
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	32b0      	adds	r2, #176	@ 0xb0
 800bd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e008      	b.n	800bd28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	371c      	adds	r7, #28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	32b0      	adds	r2, #176	@ 0xb0
 800bd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e004      	b.n	800bd62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
	...

0800bd70 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	32b0      	adds	r2, #176	@ 0xb0
 800bd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd86:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bd92:	2303      	movs	r3, #3
 800bd94:	e025      	b.n	800bde2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d11f      	bne.n	800bde0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bda8:	4b10      	ldr	r3, [pc, #64]	@ (800bdec <USBD_CDC_TransmitPacket+0x7c>)
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	f003 020f 	and.w	r2, r3, #15
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4403      	add	r3, r0
 800bdc2:	3314      	adds	r3, #20
 800bdc4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bdc6:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <USBD_CDC_TransmitPacket+0x7c>)
 800bdc8:	7819      	ldrb	r1, [r3, #0]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f002 f843 	bl	800de62 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	200000c3 	.word	0x200000c3

0800bdf0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	32b0      	adds	r2, #176	@ 0xb0
 800be02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	32b0      	adds	r2, #176	@ 0xb0
 800be12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d101      	bne.n	800be1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e018      	b.n	800be50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	7c1b      	ldrb	r3, [r3, #16]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10a      	bne.n	800be3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be26:	4b0c      	ldr	r3, [pc, #48]	@ (800be58 <USBD_CDC_ReceivePacket+0x68>)
 800be28:	7819      	ldrb	r1, [r3, #0]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f002 f835 	bl	800dea4 <USBD_LL_PrepareReceive>
 800be3a:	e008      	b.n	800be4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be3c:	4b06      	ldr	r3, [pc, #24]	@ (800be58 <USBD_CDC_ReceivePacket+0x68>)
 800be3e:	7819      	ldrb	r1, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be46:	2340      	movs	r3, #64	@ 0x40
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f002 f82b 	bl	800dea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	200000c4 	.word	0x200000c4

0800be5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800be70:	2303      	movs	r3, #3
 800be72:	e01f      	b.n	800beb4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	79fa      	ldrb	r2, [r7, #7]
 800bea6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	f001 fea5 	bl	800dbf8 <USBD_LL_Init>
 800beae:	4603      	mov	r3, r0
 800beb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e025      	b.n	800bf20 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	32ae      	adds	r2, #174	@ 0xae
 800bee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00f      	beq.n	800bf10 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	32ae      	adds	r2, #174	@ 0xae
 800befa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800befe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf00:	f107 020e 	add.w	r2, r7, #14
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	4602      	mov	r2, r0
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 fead 	bl	800dc90 <USBD_LL_Start>
 800bf36:	4603      	mov	r3, r0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf48:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b084      	sub	sp, #16
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	460b      	mov	r3, r1
 800bf60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d009      	beq.n	800bf84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	78fa      	ldrb	r2, [r7, #3]
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	4798      	blx	r3
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	460b      	mov	r3, r1
 800bf98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	78fa      	ldrb	r2, [r7, #3]
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	4798      	blx	r3
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b084      	sub	sp, #16
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f001 f922 	bl	800d21e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bfe8:	461a      	mov	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bff6:	f003 031f 	and.w	r3, r3, #31
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	d01a      	beq.n	800c034 <USBD_LL_SetupStage+0x72>
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d822      	bhi.n	800c048 <USBD_LL_SetupStage+0x86>
 800c002:	2b00      	cmp	r3, #0
 800c004:	d002      	beq.n	800c00c <USBD_LL_SetupStage+0x4a>
 800c006:	2b01      	cmp	r3, #1
 800c008:	d00a      	beq.n	800c020 <USBD_LL_SetupStage+0x5e>
 800c00a:	e01d      	b.n	800c048 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fb77 	bl	800c708 <USBD_StdDevReq>
 800c01a:	4603      	mov	r3, r0
 800c01c:	73fb      	strb	r3, [r7, #15]
      break;
 800c01e:	e020      	b.n	800c062 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fbdf 	bl	800c7ec <USBD_StdItfReq>
 800c02e:	4603      	mov	r3, r0
 800c030:	73fb      	strb	r3, [r7, #15]
      break;
 800c032:	e016      	b.n	800c062 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fc41 	bl	800c8c4 <USBD_StdEPReq>
 800c042:	4603      	mov	r3, r0
 800c044:	73fb      	strb	r3, [r7, #15]
      break;
 800c046:	e00c      	b.n	800c062 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c04e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c052:	b2db      	uxtb	r3, r3
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f001 fe7a 	bl	800dd50 <USBD_LL_StallEP>
 800c05c:	4603      	mov	r3, r0
 800c05e:	73fb      	strb	r3, [r7, #15]
      break;
 800c060:	bf00      	nop
  }

  return ret;
 800c062:	7bfb      	ldrb	r3, [r7, #15]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	460b      	mov	r3, r1
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c07e:	7afb      	ldrb	r3, [r7, #11]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d177      	bne.n	800c174 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c08a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c092:	2b03      	cmp	r3, #3
 800c094:	f040 80a1 	bne.w	800c1da <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	693a      	ldr	r2, [r7, #16]
 800c09e:	8992      	ldrh	r2, [r2, #12]
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d91c      	bls.n	800c0de <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	8992      	ldrh	r2, [r2, #12]
 800c0ac:	1a9a      	subs	r2, r3, r2
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	693a      	ldr	r2, [r7, #16]
 800c0b8:	8992      	ldrh	r2, [r2, #12]
 800c0ba:	441a      	add	r2, r3
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	6919      	ldr	r1, [r3, #16]
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	899b      	ldrh	r3, [r3, #12]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	bf38      	it	cc
 800c0d2:	4613      	movcc	r3, r2
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f001 f9a8 	bl	800d42c <USBD_CtlContinueRx>
 800c0dc:	e07d      	b.n	800c1da <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c0e4:	f003 031f 	and.w	r3, r3, #31
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d014      	beq.n	800c116 <USBD_LL_DataOutStage+0xaa>
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d81d      	bhi.n	800c12c <USBD_LL_DataOutStage+0xc0>
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <USBD_LL_DataOutStage+0x8e>
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d003      	beq.n	800c100 <USBD_LL_DataOutStage+0x94>
 800c0f8:	e018      	b.n	800c12c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	75bb      	strb	r3, [r7, #22]
            break;
 800c0fe:	e018      	b.n	800c132 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c106:	b2db      	uxtb	r3, r3
 800c108:	4619      	mov	r1, r3
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f000 fa6e 	bl	800c5ec <USBD_CoreFindIF>
 800c110:	4603      	mov	r3, r0
 800c112:	75bb      	strb	r3, [r7, #22]
            break;
 800c114:	e00d      	b.n	800c132 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	4619      	mov	r1, r3
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 fa70 	bl	800c606 <USBD_CoreFindEP>
 800c126:	4603      	mov	r3, r0
 800c128:	75bb      	strb	r3, [r7, #22]
            break;
 800c12a:	e002      	b.n	800c132 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c12c:	2300      	movs	r3, #0
 800c12e:	75bb      	strb	r3, [r7, #22]
            break;
 800c130:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c132:	7dbb      	ldrb	r3, [r7, #22]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d119      	bne.n	800c16c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b03      	cmp	r3, #3
 800c142:	d113      	bne.n	800c16c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c144:	7dba      	ldrb	r2, [r7, #22]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	32ae      	adds	r2, #174	@ 0xae
 800c14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c154:	7dba      	ldrb	r2, [r7, #22]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c15c:	7dba      	ldrb	r2, [r7, #22]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	32ae      	adds	r2, #174	@ 0xae
 800c162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f001 f96e 	bl	800d44e <USBD_CtlSendStatus>
 800c172:	e032      	b.n	800c1da <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c174:	7afb      	ldrb	r3, [r7, #11]
 800c176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	4619      	mov	r1, r3
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 fa41 	bl	800c606 <USBD_CoreFindEP>
 800c184:	4603      	mov	r3, r0
 800c186:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c188:	7dbb      	ldrb	r3, [r7, #22]
 800c18a:	2bff      	cmp	r3, #255	@ 0xff
 800c18c:	d025      	beq.n	800c1da <USBD_LL_DataOutStage+0x16e>
 800c18e:	7dbb      	ldrb	r3, [r7, #22]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d122      	bne.n	800c1da <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b03      	cmp	r3, #3
 800c19e:	d117      	bne.n	800c1d0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c1a0:	7dba      	ldrb	r2, [r7, #22]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	32ae      	adds	r2, #174	@ 0xae
 800c1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00f      	beq.n	800c1d0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c1b0:	7dba      	ldrb	r2, [r7, #22]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c1b8:	7dba      	ldrb	r2, [r7, #22]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	32ae      	adds	r2, #174	@ 0xae
 800c1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	7afa      	ldrb	r2, [r7, #11]
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	4798      	blx	r3
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c1d0:	7dfb      	ldrb	r3, [r7, #23]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
 800c1d8:	e000      	b.n	800c1dc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c1f2:	7afb      	ldrb	r3, [r7, #11]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d178      	bne.n	800c2ea <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3314      	adds	r3, #20
 800c1fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c204:	2b02      	cmp	r3, #2
 800c206:	d163      	bne.n	800c2d0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	693a      	ldr	r2, [r7, #16]
 800c20e:	8992      	ldrh	r2, [r2, #12]
 800c210:	4293      	cmp	r3, r2
 800c212:	d91c      	bls.n	800c24e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	8992      	ldrh	r2, [r2, #12]
 800c21c:	1a9a      	subs	r2, r3, r2
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	8992      	ldrh	r2, [r2, #12]
 800c22a:	441a      	add	r2, r3
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	6919      	ldr	r1, [r3, #16]
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	461a      	mov	r2, r3
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f001 f8c4 	bl	800d3c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c240:	2300      	movs	r3, #0
 800c242:	2200      	movs	r2, #0
 800c244:	2100      	movs	r1, #0
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f001 fe2c 	bl	800dea4 <USBD_LL_PrepareReceive>
 800c24c:	e040      	b.n	800c2d0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	899b      	ldrh	r3, [r3, #12]
 800c252:	461a      	mov	r2, r3
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d11c      	bne.n	800c296 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c264:	4293      	cmp	r3, r2
 800c266:	d316      	bcc.n	800c296 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c272:	429a      	cmp	r2, r3
 800c274:	d20f      	bcs.n	800c296 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c276:	2200      	movs	r2, #0
 800c278:	2100      	movs	r1, #0
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f001 f8a4 	bl	800d3c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c288:	2300      	movs	r3, #0
 800c28a:	2200      	movs	r2, #0
 800c28c:	2100      	movs	r1, #0
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f001 fe08 	bl	800dea4 <USBD_LL_PrepareReceive>
 800c294:	e01c      	b.n	800c2d0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d10f      	bne.n	800c2c2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d009      	beq.n	800c2c2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2c2:	2180      	movs	r1, #128	@ 0x80
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f001 fd43 	bl	800dd50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f001 f8d2 	bl	800d474 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d03a      	beq.n	800c350 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f7ff fe30 	bl	800bf40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c2e8:	e032      	b.n	800c350 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c2ea:	7afb      	ldrb	r3, [r7, #11]
 800c2ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f000 f986 	bl	800c606 <USBD_CoreFindEP>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	2bff      	cmp	r3, #255	@ 0xff
 800c302:	d025      	beq.n	800c350 <USBD_LL_DataInStage+0x16c>
 800c304:	7dfb      	ldrb	r3, [r7, #23]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d122      	bne.n	800c350 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b03      	cmp	r3, #3
 800c314:	d11c      	bne.n	800c350 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c316:	7dfa      	ldrb	r2, [r7, #23]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	32ae      	adds	r2, #174	@ 0xae
 800c31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d014      	beq.n	800c350 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c326:	7dfa      	ldrb	r2, [r7, #23]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c32e:	7dfa      	ldrb	r2, [r7, #23]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	32ae      	adds	r2, #174	@ 0xae
 800c334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	7afa      	ldrb	r2, [r7, #11]
 800c33c:	4611      	mov	r1, r2
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	4798      	blx	r3
 800c342:	4603      	mov	r3, r0
 800c344:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c346:	7dbb      	ldrb	r3, [r7, #22]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c34c:	7dbb      	ldrb	r3, [r7, #22]
 800c34e:	e000      	b.n	800c352 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b084      	sub	sp, #16
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c392:	2b00      	cmp	r3, #0
 800c394:	d014      	beq.n	800c3c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00e      	beq.n	800c3c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	6852      	ldr	r2, [r2, #4]
 800c3ae:	b2d2      	uxtb	r2, r2
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	4798      	blx	r3
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3c0:	2340      	movs	r3, #64	@ 0x40
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f001 fc7d 	bl	800dcc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2240      	movs	r2, #64	@ 0x40
 800c3d8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3dc:	2340      	movs	r3, #64	@ 0x40
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2180      	movs	r1, #128	@ 0x80
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f001 fc6f 	bl	800dcc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2240      	movs	r2, #64	@ 0x40
 800c3f4:	841a      	strh	r2, [r3, #32]

  return ret;
 800c3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	460b      	mov	r3, r1
 800c40a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	78fa      	ldrb	r2, [r7, #3]
 800c410:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b04      	cmp	r3, #4
 800c432:	d006      	beq.n	800c442 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2204      	movs	r2, #4
 800c446:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b04      	cmp	r3, #4
 800c46a:	d106      	bne.n	800c47a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c472:	b2da      	uxtb	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b03      	cmp	r3, #3
 800c49a:	d110      	bne.n	800c4be <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4ac:	69db      	ldr	r3, [r3, #28]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4b8:	69db      	ldr	r3, [r3, #28]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	32ae      	adds	r2, #174	@ 0xae
 800c4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d101      	bne.n	800c4ea <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	e01c      	b.n	800c524 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d115      	bne.n	800c522 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	32ae      	adds	r2, #174	@ 0xae
 800c500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00b      	beq.n	800c522 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	32ae      	adds	r2, #174	@ 0xae
 800c514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	78fa      	ldrb	r2, [r7, #3]
 800c51c:	4611      	mov	r1, r2
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	32ae      	adds	r2, #174	@ 0xae
 800c542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e01c      	b.n	800c588 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b03      	cmp	r3, #3
 800c558:	d115      	bne.n	800c586 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	32ae      	adds	r2, #174	@ 0xae
 800c564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00b      	beq.n	800c586 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	32ae      	adds	r2, #174	@ 0xae
 800c578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c57e:	78fa      	ldrb	r2, [r7, #3]
 800c580:	4611      	mov	r1, r2
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	370c      	adds	r7, #12
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00e      	beq.n	800c5e2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	6852      	ldr	r2, [r2, #4]
 800c5d0:	b2d2      	uxtb	r2, r2
 800c5d2:	4611      	mov	r1, r2
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	4798      	blx	r3
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c5f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c606:	b480      	push	{r7}
 800c608:	b083      	sub	sp, #12
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	460b      	mov	r3, r1
 800c610:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c612:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c634:	2300      	movs	r3, #0
 800c636:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	885b      	ldrh	r3, [r3, #2]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	7812      	ldrb	r2, [r2, #0]
 800c642:	4293      	cmp	r3, r2
 800c644:	d91f      	bls.n	800c686 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c64c:	e013      	b.n	800c676 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c64e:	f107 030a 	add.w	r3, r7, #10
 800c652:	4619      	mov	r1, r3
 800c654:	6978      	ldr	r0, [r7, #20]
 800c656:	f000 f81b 	bl	800c690 <USBD_GetNextDesc>
 800c65a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	785b      	ldrb	r3, [r3, #1]
 800c660:	2b05      	cmp	r3, #5
 800c662:	d108      	bne.n	800c676 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	789b      	ldrb	r3, [r3, #2]
 800c66c:	78fa      	ldrb	r2, [r7, #3]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d008      	beq.n	800c684 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c672:	2300      	movs	r3, #0
 800c674:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	885b      	ldrh	r3, [r3, #2]
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	897b      	ldrh	r3, [r7, #10]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d8e5      	bhi.n	800c64e <USBD_GetEpDesc+0x2e>
 800c682:	e000      	b.n	800c686 <USBD_GetEpDesc+0x66>
          break;
 800c684:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c686:	693b      	ldr	r3, [r7, #16]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3718      	adds	r7, #24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	881b      	ldrh	r3, [r3, #0]
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	7812      	ldrb	r2, [r2, #0]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c6ea:	021b      	lsls	r3, r3, #8
 800c6ec:	b21a      	sxth	r2, r3
 800c6ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	b21b      	sxth	r3, r3
 800c6f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6f8:	89fb      	ldrh	r3, [r7, #14]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	371c      	adds	r7, #28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
	...

0800c708 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c71e:	2b40      	cmp	r3, #64	@ 0x40
 800c720:	d005      	beq.n	800c72e <USBD_StdDevReq+0x26>
 800c722:	2b40      	cmp	r3, #64	@ 0x40
 800c724:	d857      	bhi.n	800c7d6 <USBD_StdDevReq+0xce>
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00f      	beq.n	800c74a <USBD_StdDevReq+0x42>
 800c72a:	2b20      	cmp	r3, #32
 800c72c:	d153      	bne.n	800c7d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	32ae      	adds	r2, #174	@ 0xae
 800c738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	4798      	blx	r3
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]
      break;
 800c748:	e04a      	b.n	800c7e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	785b      	ldrb	r3, [r3, #1]
 800c74e:	2b09      	cmp	r3, #9
 800c750:	d83b      	bhi.n	800c7ca <USBD_StdDevReq+0xc2>
 800c752:	a201      	add	r2, pc, #4	@ (adr r2, 800c758 <USBD_StdDevReq+0x50>)
 800c754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c758:	0800c7ad 	.word	0x0800c7ad
 800c75c:	0800c7c1 	.word	0x0800c7c1
 800c760:	0800c7cb 	.word	0x0800c7cb
 800c764:	0800c7b7 	.word	0x0800c7b7
 800c768:	0800c7cb 	.word	0x0800c7cb
 800c76c:	0800c78b 	.word	0x0800c78b
 800c770:	0800c781 	.word	0x0800c781
 800c774:	0800c7cb 	.word	0x0800c7cb
 800c778:	0800c7a3 	.word	0x0800c7a3
 800c77c:	0800c795 	.word	0x0800c795
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fa3e 	bl	800cc04 <USBD_GetDescriptor>
          break;
 800c788:	e024      	b.n	800c7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fba3 	bl	800ced8 <USBD_SetAddress>
          break;
 800c792:	e01f      	b.n	800c7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c794:	6839      	ldr	r1, [r7, #0]
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fbe2 	bl	800cf60 <USBD_SetConfig>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]
          break;
 800c7a0:	e018      	b.n	800c7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fc85 	bl	800d0b4 <USBD_GetConfig>
          break;
 800c7aa:	e013      	b.n	800c7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c7ac:	6839      	ldr	r1, [r7, #0]
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 fcb6 	bl	800d120 <USBD_GetStatus>
          break;
 800c7b4:	e00e      	b.n	800c7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fce5 	bl	800d188 <USBD_SetFeature>
          break;
 800c7be:	e009      	b.n	800c7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fd09 	bl	800d1da <USBD_ClrFeature>
          break;
 800c7c8:	e004      	b.n	800c7d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fd60 	bl	800d292 <USBD_CtlError>
          break;
 800c7d2:	bf00      	nop
      }
      break;
 800c7d4:	e004      	b.n	800c7e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fd5a 	bl	800d292 <USBD_CtlError>
      break;
 800c7de:	bf00      	nop
  }

  return ret;
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop

0800c7ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c802:	2b40      	cmp	r3, #64	@ 0x40
 800c804:	d005      	beq.n	800c812 <USBD_StdItfReq+0x26>
 800c806:	2b40      	cmp	r3, #64	@ 0x40
 800c808:	d852      	bhi.n	800c8b0 <USBD_StdItfReq+0xc4>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <USBD_StdItfReq+0x26>
 800c80e:	2b20      	cmp	r3, #32
 800c810:	d14e      	bne.n	800c8b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	3b01      	subs	r3, #1
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d840      	bhi.n	800c8a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	889b      	ldrh	r3, [r3, #4]
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b01      	cmp	r3, #1
 800c828:	d836      	bhi.n	800c898 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	889b      	ldrh	r3, [r3, #4]
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7ff feda 	bl	800c5ec <USBD_CoreFindIF>
 800c838:	4603      	mov	r3, r0
 800c83a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c83c:	7bbb      	ldrb	r3, [r7, #14]
 800c83e:	2bff      	cmp	r3, #255	@ 0xff
 800c840:	d01d      	beq.n	800c87e <USBD_StdItfReq+0x92>
 800c842:	7bbb      	ldrb	r3, [r7, #14]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d11a      	bne.n	800c87e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c848:	7bba      	ldrb	r2, [r7, #14]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	32ae      	adds	r2, #174	@ 0xae
 800c84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00f      	beq.n	800c878 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c858:	7bba      	ldrb	r2, [r7, #14]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c860:	7bba      	ldrb	r2, [r7, #14]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	32ae      	adds	r2, #174	@ 0xae
 800c866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	6839      	ldr	r1, [r7, #0]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	4798      	blx	r3
 800c872:	4603      	mov	r3, r0
 800c874:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c876:	e004      	b.n	800c882 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c878:	2303      	movs	r3, #3
 800c87a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c87c:	e001      	b.n	800c882 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c87e:	2303      	movs	r3, #3
 800c880:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	88db      	ldrh	r3, [r3, #6]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d110      	bne.n	800c8ac <USBD_StdItfReq+0xc0>
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10d      	bne.n	800c8ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 fddc 	bl	800d44e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c896:	e009      	b.n	800c8ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fcf9 	bl	800d292 <USBD_CtlError>
          break;
 800c8a0:	e004      	b.n	800c8ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fcf4 	bl	800d292 <USBD_CtlError>
          break;
 800c8aa:	e000      	b.n	800c8ae <USBD_StdItfReq+0xc2>
          break;
 800c8ac:	bf00      	nop
      }
      break;
 800c8ae:	e004      	b.n	800c8ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c8b0:	6839      	ldr	r1, [r7, #0]
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 fced 	bl	800d292 <USBD_CtlError>
      break;
 800c8b8:	bf00      	nop
  }

  return ret;
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	889b      	ldrh	r3, [r3, #4]
 800c8d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c8e0:	2b40      	cmp	r3, #64	@ 0x40
 800c8e2:	d007      	beq.n	800c8f4 <USBD_StdEPReq+0x30>
 800c8e4:	2b40      	cmp	r3, #64	@ 0x40
 800c8e6:	f200 8181 	bhi.w	800cbec <USBD_StdEPReq+0x328>
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d02a      	beq.n	800c944 <USBD_StdEPReq+0x80>
 800c8ee:	2b20      	cmp	r3, #32
 800c8f0:	f040 817c 	bne.w	800cbec <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff fe84 	bl	800c606 <USBD_CoreFindEP>
 800c8fe:	4603      	mov	r3, r0
 800c900:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c902:	7b7b      	ldrb	r3, [r7, #13]
 800c904:	2bff      	cmp	r3, #255	@ 0xff
 800c906:	f000 8176 	beq.w	800cbf6 <USBD_StdEPReq+0x332>
 800c90a:	7b7b      	ldrb	r3, [r7, #13]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f040 8172 	bne.w	800cbf6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c912:	7b7a      	ldrb	r2, [r7, #13]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c91a:	7b7a      	ldrb	r2, [r7, #13]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	32ae      	adds	r2, #174	@ 0xae
 800c920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 8165 	beq.w	800cbf6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c92c:	7b7a      	ldrb	r2, [r7, #13]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	32ae      	adds	r2, #174	@ 0xae
 800c932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	4798      	blx	r3
 800c93e:	4603      	mov	r3, r0
 800c940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c942:	e158      	b.n	800cbf6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	785b      	ldrb	r3, [r3, #1]
 800c948:	2b03      	cmp	r3, #3
 800c94a:	d008      	beq.n	800c95e <USBD_StdEPReq+0x9a>
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	f300 8147 	bgt.w	800cbe0 <USBD_StdEPReq+0x31c>
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 809b 	beq.w	800ca8e <USBD_StdEPReq+0x1ca>
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d03c      	beq.n	800c9d6 <USBD_StdEPReq+0x112>
 800c95c:	e140      	b.n	800cbe0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b02      	cmp	r3, #2
 800c968:	d002      	beq.n	800c970 <USBD_StdEPReq+0xac>
 800c96a:	2b03      	cmp	r3, #3
 800c96c:	d016      	beq.n	800c99c <USBD_StdEPReq+0xd8>
 800c96e:	e02c      	b.n	800c9ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c970:	7bbb      	ldrb	r3, [r7, #14]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00d      	beq.n	800c992 <USBD_StdEPReq+0xce>
 800c976:	7bbb      	ldrb	r3, [r7, #14]
 800c978:	2b80      	cmp	r3, #128	@ 0x80
 800c97a:	d00a      	beq.n	800c992 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	4619      	mov	r1, r3
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f001 f9e5 	bl	800dd50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c986:	2180      	movs	r1, #128	@ 0x80
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f001 f9e1 	bl	800dd50 <USBD_LL_StallEP>
 800c98e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c990:	e020      	b.n	800c9d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fc7c 	bl	800d292 <USBD_CtlError>
              break;
 800c99a:	e01b      	b.n	800c9d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	885b      	ldrh	r3, [r3, #2]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10e      	bne.n	800c9c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00b      	beq.n	800c9c2 <USBD_StdEPReq+0xfe>
 800c9aa:	7bbb      	ldrb	r3, [r7, #14]
 800c9ac:	2b80      	cmp	r3, #128	@ 0x80
 800c9ae:	d008      	beq.n	800c9c2 <USBD_StdEPReq+0xfe>
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	88db      	ldrh	r3, [r3, #6]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d104      	bne.n	800c9c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9b8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f001 f9c7 	bl	800dd50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fd43 	bl	800d44e <USBD_CtlSendStatus>

              break;
 800c9c8:	e004      	b.n	800c9d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fc60 	bl	800d292 <USBD_CtlError>
              break;
 800c9d2:	bf00      	nop
          }
          break;
 800c9d4:	e109      	b.n	800cbea <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d002      	beq.n	800c9e8 <USBD_StdEPReq+0x124>
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	d016      	beq.n	800ca14 <USBD_StdEPReq+0x150>
 800c9e6:	e04b      	b.n	800ca80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00d      	beq.n	800ca0a <USBD_StdEPReq+0x146>
 800c9ee:	7bbb      	ldrb	r3, [r7, #14]
 800c9f0:	2b80      	cmp	r3, #128	@ 0x80
 800c9f2:	d00a      	beq.n	800ca0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f001 f9a9 	bl	800dd50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9fe:	2180      	movs	r1, #128	@ 0x80
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f001 f9a5 	bl	800dd50 <USBD_LL_StallEP>
 800ca06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca08:	e040      	b.n	800ca8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fc40 	bl	800d292 <USBD_CtlError>
              break;
 800ca12:	e03b      	b.n	800ca8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	885b      	ldrh	r3, [r3, #2]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d136      	bne.n	800ca8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d004      	beq.n	800ca30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
 800ca28:	4619      	mov	r1, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f001 f9af 	bl	800dd8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fd0c 	bl	800d44e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca36:	7bbb      	ldrb	r3, [r7, #14]
 800ca38:	4619      	mov	r1, r3
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff fde3 	bl	800c606 <USBD_CoreFindEP>
 800ca40:	4603      	mov	r3, r0
 800ca42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca44:	7b7b      	ldrb	r3, [r7, #13]
 800ca46:	2bff      	cmp	r3, #255	@ 0xff
 800ca48:	d01f      	beq.n	800ca8a <USBD_StdEPReq+0x1c6>
 800ca4a:	7b7b      	ldrb	r3, [r7, #13]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d11c      	bne.n	800ca8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ca50:	7b7a      	ldrb	r2, [r7, #13]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ca58:	7b7a      	ldrb	r2, [r7, #13]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	32ae      	adds	r2, #174	@ 0xae
 800ca5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d010      	beq.n	800ca8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca68:	7b7a      	ldrb	r2, [r7, #13]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	32ae      	adds	r2, #174	@ 0xae
 800ca6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	4798      	blx	r3
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ca7e:	e004      	b.n	800ca8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fc05 	bl	800d292 <USBD_CtlError>
              break;
 800ca88:	e000      	b.n	800ca8c <USBD_StdEPReq+0x1c8>
              break;
 800ca8a:	bf00      	nop
          }
          break;
 800ca8c:	e0ad      	b.n	800cbea <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b02      	cmp	r3, #2
 800ca98:	d002      	beq.n	800caa0 <USBD_StdEPReq+0x1dc>
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d033      	beq.n	800cb06 <USBD_StdEPReq+0x242>
 800ca9e:	e099      	b.n	800cbd4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800caa0:	7bbb      	ldrb	r3, [r7, #14]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d007      	beq.n	800cab6 <USBD_StdEPReq+0x1f2>
 800caa6:	7bbb      	ldrb	r3, [r7, #14]
 800caa8:	2b80      	cmp	r3, #128	@ 0x80
 800caaa:	d004      	beq.n	800cab6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800caac:	6839      	ldr	r1, [r7, #0]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fbef 	bl	800d292 <USBD_CtlError>
                break;
 800cab4:	e093      	b.n	800cbde <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	da0b      	bge.n	800cad6 <USBD_StdEPReq+0x212>
 800cabe:	7bbb      	ldrb	r3, [r7, #14]
 800cac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cac4:	4613      	mov	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	3310      	adds	r3, #16
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	4413      	add	r3, r2
 800cad2:	3304      	adds	r3, #4
 800cad4:	e00b      	b.n	800caee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cadc:	4613      	mov	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	4413      	add	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	4413      	add	r3, r2
 800caec:	3304      	adds	r3, #4
 800caee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2200      	movs	r2, #0
 800caf4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	330e      	adds	r3, #14
 800cafa:	2202      	movs	r2, #2
 800cafc:	4619      	mov	r1, r3
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fc44 	bl	800d38c <USBD_CtlSendData>
              break;
 800cb04:	e06b      	b.n	800cbde <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	da11      	bge.n	800cb32 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	f003 020f 	and.w	r2, r3, #15
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	440b      	add	r3, r1
 800cb20:	3323      	adds	r3, #35	@ 0x23
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d117      	bne.n	800cb58 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fbb1 	bl	800d292 <USBD_CtlError>
                  break;
 800cb30:	e055      	b.n	800cbde <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cb32:	7bbb      	ldrb	r3, [r7, #14]
 800cb34:	f003 020f 	and.w	r2, r3, #15
 800cb38:	6879      	ldr	r1, [r7, #4]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	440b      	add	r3, r1
 800cb44:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d104      	bne.n	800cb58 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fb9e 	bl	800d292 <USBD_CtlError>
                  break;
 800cb56:	e042      	b.n	800cbde <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	da0b      	bge.n	800cb78 <USBD_StdEPReq+0x2b4>
 800cb60:	7bbb      	ldrb	r3, [r7, #14]
 800cb62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb66:	4613      	mov	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	3310      	adds	r3, #16
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	4413      	add	r3, r2
 800cb74:	3304      	adds	r3, #4
 800cb76:	e00b      	b.n	800cb90 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb78:	7bbb      	ldrb	r3, [r7, #14]
 800cb7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	3304      	adds	r3, #4
 800cb90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <USBD_StdEPReq+0x2da>
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
 800cb9a:	2b80      	cmp	r3, #128	@ 0x80
 800cb9c:	d103      	bne.n	800cba6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	2200      	movs	r2, #0
 800cba2:	739a      	strb	r2, [r3, #14]
 800cba4:	e00e      	b.n	800cbc4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f001 f90e 	bl	800ddcc <USBD_LL_IsStallEP>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d003      	beq.n	800cbbe <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	739a      	strb	r2, [r3, #14]
 800cbbc:	e002      	b.n	800cbc4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	330e      	adds	r3, #14
 800cbc8:	2202      	movs	r2, #2
 800cbca:	4619      	mov	r1, r3
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fbdd 	bl	800d38c <USBD_CtlSendData>
              break;
 800cbd2:	e004      	b.n	800cbde <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800cbd4:	6839      	ldr	r1, [r7, #0]
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fb5b 	bl	800d292 <USBD_CtlError>
              break;
 800cbdc:	bf00      	nop
          }
          break;
 800cbde:	e004      	b.n	800cbea <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fb55 	bl	800d292 <USBD_CtlError>
          break;
 800cbe8:	bf00      	nop
      }
      break;
 800cbea:	e005      	b.n	800cbf8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fb4f 	bl	800d292 <USBD_CtlError>
      break;
 800cbf4:	e000      	b.n	800cbf8 <USBD_StdEPReq+0x334>
      break;
 800cbf6:	bf00      	nop
  }

  return ret;
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc16:	2300      	movs	r3, #0
 800cc18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	885b      	ldrh	r3, [r3, #2]
 800cc1e:	0a1b      	lsrs	r3, r3, #8
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	3b01      	subs	r3, #1
 800cc24:	2b06      	cmp	r3, #6
 800cc26:	f200 8128 	bhi.w	800ce7a <USBD_GetDescriptor+0x276>
 800cc2a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc30 <USBD_GetDescriptor+0x2c>)
 800cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc30:	0800cc4d 	.word	0x0800cc4d
 800cc34:	0800cc65 	.word	0x0800cc65
 800cc38:	0800cca5 	.word	0x0800cca5
 800cc3c:	0800ce7b 	.word	0x0800ce7b
 800cc40:	0800ce7b 	.word	0x0800ce7b
 800cc44:	0800ce1b 	.word	0x0800ce1b
 800cc48:	0800ce47 	.word	0x0800ce47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	7c12      	ldrb	r2, [r2, #16]
 800cc58:	f107 0108 	add.w	r1, r7, #8
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4798      	blx	r3
 800cc60:	60f8      	str	r0, [r7, #12]
      break;
 800cc62:	e112      	b.n	800ce8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	7c1b      	ldrb	r3, [r3, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10d      	bne.n	800cc88 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc74:	f107 0208 	add.w	r2, r7, #8
 800cc78:	4610      	mov	r0, r2
 800cc7a:	4798      	blx	r3
 800cc7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3301      	adds	r3, #1
 800cc82:	2202      	movs	r2, #2
 800cc84:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc86:	e100      	b.n	800ce8a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc90:	f107 0208 	add.w	r2, r7, #8
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
 800cc98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	2202      	movs	r2, #2
 800cca0:	701a      	strb	r2, [r3, #0]
      break;
 800cca2:	e0f2      	b.n	800ce8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	885b      	ldrh	r3, [r3, #2]
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	2b05      	cmp	r3, #5
 800ccac:	f200 80ac 	bhi.w	800ce08 <USBD_GetDescriptor+0x204>
 800ccb0:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb8 <USBD_GetDescriptor+0xb4>)
 800ccb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb6:	bf00      	nop
 800ccb8:	0800ccd1 	.word	0x0800ccd1
 800ccbc:	0800cd05 	.word	0x0800cd05
 800ccc0:	0800cd39 	.word	0x0800cd39
 800ccc4:	0800cd6d 	.word	0x0800cd6d
 800ccc8:	0800cda1 	.word	0x0800cda1
 800cccc:	0800cdd5 	.word	0x0800cdd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00b      	beq.n	800ccf4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	7c12      	ldrb	r2, [r2, #16]
 800cce8:	f107 0108 	add.w	r1, r7, #8
 800ccec:	4610      	mov	r0, r2
 800ccee:	4798      	blx	r3
 800ccf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccf2:	e091      	b.n	800ce18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccf4:	6839      	ldr	r1, [r7, #0]
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 facb 	bl	800d292 <USBD_CtlError>
            err++;
 800ccfc:	7afb      	ldrb	r3, [r7, #11]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	72fb      	strb	r3, [r7, #11]
          break;
 800cd02:	e089      	b.n	800ce18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00b      	beq.n	800cd28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	7c12      	ldrb	r2, [r2, #16]
 800cd1c:	f107 0108 	add.w	r1, r7, #8
 800cd20:	4610      	mov	r0, r2
 800cd22:	4798      	blx	r3
 800cd24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd26:	e077      	b.n	800ce18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd28:	6839      	ldr	r1, [r7, #0]
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fab1 	bl	800d292 <USBD_CtlError>
            err++;
 800cd30:	7afb      	ldrb	r3, [r7, #11]
 800cd32:	3301      	adds	r3, #1
 800cd34:	72fb      	strb	r3, [r7, #11]
          break;
 800cd36:	e06f      	b.n	800ce18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00b      	beq.n	800cd5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	7c12      	ldrb	r2, [r2, #16]
 800cd50:	f107 0108 	add.w	r1, r7, #8
 800cd54:	4610      	mov	r0, r2
 800cd56:	4798      	blx	r3
 800cd58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd5a:	e05d      	b.n	800ce18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd5c:	6839      	ldr	r1, [r7, #0]
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fa97 	bl	800d292 <USBD_CtlError>
            err++;
 800cd64:	7afb      	ldrb	r3, [r7, #11]
 800cd66:	3301      	adds	r3, #1
 800cd68:	72fb      	strb	r3, [r7, #11]
          break;
 800cd6a:	e055      	b.n	800ce18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00b      	beq.n	800cd90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	7c12      	ldrb	r2, [r2, #16]
 800cd84:	f107 0108 	add.w	r1, r7, #8
 800cd88:	4610      	mov	r0, r2
 800cd8a:	4798      	blx	r3
 800cd8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd8e:	e043      	b.n	800ce18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fa7d 	bl	800d292 <USBD_CtlError>
            err++;
 800cd98:	7afb      	ldrb	r3, [r7, #11]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd9e:	e03b      	b.n	800ce18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	7c12      	ldrb	r2, [r2, #16]
 800cdb8:	f107 0108 	add.w	r1, r7, #8
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	4798      	blx	r3
 800cdc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdc2:	e029      	b.n	800ce18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 fa63 	bl	800d292 <USBD_CtlError>
            err++;
 800cdcc:	7afb      	ldrb	r3, [r7, #11]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	72fb      	strb	r3, [r7, #11]
          break;
 800cdd2:	e021      	b.n	800ce18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdda:	699b      	ldr	r3, [r3, #24]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00b      	beq.n	800cdf8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	7c12      	ldrb	r2, [r2, #16]
 800cdec:	f107 0108 	add.w	r1, r7, #8
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4798      	blx	r3
 800cdf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdf6:	e00f      	b.n	800ce18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fa49 	bl	800d292 <USBD_CtlError>
            err++;
 800ce00:	7afb      	ldrb	r3, [r7, #11]
 800ce02:	3301      	adds	r3, #1
 800ce04:	72fb      	strb	r3, [r7, #11]
          break;
 800ce06:	e007      	b.n	800ce18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fa41 	bl	800d292 <USBD_CtlError>
          err++;
 800ce10:	7afb      	ldrb	r3, [r7, #11]
 800ce12:	3301      	adds	r3, #1
 800ce14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ce16:	bf00      	nop
      }
      break;
 800ce18:	e037      	b.n	800ce8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	7c1b      	ldrb	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d109      	bne.n	800ce36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce2a:	f107 0208 	add.w	r2, r7, #8
 800ce2e:	4610      	mov	r0, r2
 800ce30:	4798      	blx	r3
 800ce32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce34:	e029      	b.n	800ce8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fa2a 	bl	800d292 <USBD_CtlError>
        err++;
 800ce3e:	7afb      	ldrb	r3, [r7, #11]
 800ce40:	3301      	adds	r3, #1
 800ce42:	72fb      	strb	r3, [r7, #11]
      break;
 800ce44:	e021      	b.n	800ce8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	7c1b      	ldrb	r3, [r3, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10d      	bne.n	800ce6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce56:	f107 0208 	add.w	r2, r7, #8
 800ce5a:	4610      	mov	r0, r2
 800ce5c:	4798      	blx	r3
 800ce5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	3301      	adds	r3, #1
 800ce64:	2207      	movs	r2, #7
 800ce66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce68:	e00f      	b.n	800ce8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fa10 	bl	800d292 <USBD_CtlError>
        err++;
 800ce72:	7afb      	ldrb	r3, [r7, #11]
 800ce74:	3301      	adds	r3, #1
 800ce76:	72fb      	strb	r3, [r7, #11]
      break;
 800ce78:	e007      	b.n	800ce8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ce7a:	6839      	ldr	r1, [r7, #0]
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 fa08 	bl	800d292 <USBD_CtlError>
      err++;
 800ce82:	7afb      	ldrb	r3, [r7, #11]
 800ce84:	3301      	adds	r3, #1
 800ce86:	72fb      	strb	r3, [r7, #11]
      break;
 800ce88:	bf00      	nop
  }

  if (err != 0U)
 800ce8a:	7afb      	ldrb	r3, [r7, #11]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d11e      	bne.n	800cece <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	88db      	ldrh	r3, [r3, #6]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d016      	beq.n	800cec6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ce98:	893b      	ldrh	r3, [r7, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00e      	beq.n	800cebc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	88da      	ldrh	r2, [r3, #6]
 800cea2:	893b      	ldrh	r3, [r7, #8]
 800cea4:	4293      	cmp	r3, r2
 800cea6:	bf28      	it	cs
 800cea8:	4613      	movcs	r3, r2
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ceae:	893b      	ldrh	r3, [r7, #8]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	68f9      	ldr	r1, [r7, #12]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 fa69 	bl	800d38c <USBD_CtlSendData>
 800ceba:	e009      	b.n	800ced0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f9e7 	bl	800d292 <USBD_CtlError>
 800cec4:	e004      	b.n	800ced0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fac1 	bl	800d44e <USBD_CtlSendStatus>
 800cecc:	e000      	b.n	800ced0 <USBD_GetDescriptor+0x2cc>
    return;
 800cece:	bf00      	nop
  }
}
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop

0800ced8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	889b      	ldrh	r3, [r3, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d131      	bne.n	800cf4e <USBD_SetAddress+0x76>
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	88db      	ldrh	r3, [r3, #6]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d12d      	bne.n	800cf4e <USBD_SetAddress+0x76>
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	885b      	ldrh	r3, [r3, #2]
 800cef6:	2b7f      	cmp	r3, #127	@ 0x7f
 800cef8:	d829      	bhi.n	800cf4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	885b      	ldrh	r3, [r3, #2]
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	d104      	bne.n	800cf1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 f9bc 	bl	800d292 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf1a:	e01d      	b.n	800cf58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	7bfa      	ldrb	r2, [r7, #15]
 800cf20:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf24:	7bfb      	ldrb	r3, [r7, #15]
 800cf26:	4619      	mov	r1, r3
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 ff7b 	bl	800de24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fa8d 	bl	800d44e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d004      	beq.n	800cf44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf42:	e009      	b.n	800cf58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf4c:	e004      	b.n	800cf58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 f99e 	bl	800d292 <USBD_CtlError>
  }
}
 800cf56:	bf00      	nop
 800cf58:	bf00      	nop
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	885b      	ldrh	r3, [r3, #2]
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	4b4e      	ldr	r3, [pc, #312]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800cf76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf78:	4b4d      	ldr	r3, [pc, #308]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d905      	bls.n	800cf8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf80:	6839      	ldr	r1, [r7, #0]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f985 	bl	800d292 <USBD_CtlError>
    return USBD_FAIL;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	e08c      	b.n	800d0a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d002      	beq.n	800cf9e <USBD_SetConfig+0x3e>
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d029      	beq.n	800cff0 <USBD_SetConfig+0x90>
 800cf9c:	e075      	b.n	800d08a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf9e:	4b44      	ldr	r3, [pc, #272]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d020      	beq.n	800cfe8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cfa6:	4b42      	ldr	r3, [pc, #264]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfb0:	4b3f      	ldr	r3, [pc, #252]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7fe ffcd 	bl	800bf56 <USBD_SetClassConfig>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d008      	beq.n	800cfd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f962 	bl	800d292 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfd6:	e065      	b.n	800d0a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fa38 	bl	800d44e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2203      	movs	r2, #3
 800cfe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cfe6:	e05d      	b.n	800d0a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fa30 	bl	800d44e <USBD_CtlSendStatus>
      break;
 800cfee:	e059      	b.n	800d0a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cff0:	4b2f      	ldr	r3, [pc, #188]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d112      	bne.n	800d01e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2202      	movs	r2, #2
 800cffc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d000:	4b2b      	ldr	r3, [pc, #172]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	461a      	mov	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d00a:	4b29      	ldr	r3, [pc, #164]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	4619      	mov	r1, r3
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f7fe ffbc 	bl	800bf8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 fa19 	bl	800d44e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d01c:	e042      	b.n	800d0a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d01e:	4b24      	ldr	r3, [pc, #144]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	461a      	mov	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d02a      	beq.n	800d082 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	b2db      	uxtb	r3, r3
 800d032:	4619      	mov	r1, r3
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7fe ffaa 	bl	800bf8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d03a:	4b1d      	ldr	r3, [pc, #116]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	461a      	mov	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d044:	4b1a      	ldr	r3, [pc, #104]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7fe ff83 	bl	800bf56 <USBD_SetClassConfig>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d054:	7bfb      	ldrb	r3, [r7, #15]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00f      	beq.n	800d07a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d05a:	6839      	ldr	r1, [r7, #0]
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 f918 	bl	800d292 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	b2db      	uxtb	r3, r3
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7fe ff8f 	bl	800bf8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2202      	movs	r2, #2
 800d074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d078:	e014      	b.n	800d0a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f9e7 	bl	800d44e <USBD_CtlSendStatus>
      break;
 800d080:	e010      	b.n	800d0a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f9e3 	bl	800d44e <USBD_CtlSendStatus>
      break;
 800d088:	e00c      	b.n	800d0a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f900 	bl	800d292 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d092:	4b07      	ldr	r3, [pc, #28]	@ (800d0b0 <USBD_SetConfig+0x150>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	4619      	mov	r1, r3
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7fe ff78 	bl	800bf8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d0a2:	bf00      	nop
  }

  return ret;
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	20000a58 	.word	0x20000a58

0800d0b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	88db      	ldrh	r3, [r3, #6]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d004      	beq.n	800d0d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f8e2 	bl	800d292 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d0ce:	e023      	b.n	800d118 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	dc02      	bgt.n	800d0e2 <USBD_GetConfig+0x2e>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	dc03      	bgt.n	800d0e8 <USBD_GetConfig+0x34>
 800d0e0:	e015      	b.n	800d10e <USBD_GetConfig+0x5a>
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d00b      	beq.n	800d0fe <USBD_GetConfig+0x4a>
 800d0e6:	e012      	b.n	800d10e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f948 	bl	800d38c <USBD_CtlSendData>
        break;
 800d0fc:	e00c      	b.n	800d118 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	3304      	adds	r3, #4
 800d102:	2201      	movs	r2, #1
 800d104:	4619      	mov	r1, r3
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f940 	bl	800d38c <USBD_CtlSendData>
        break;
 800d10c:	e004      	b.n	800d118 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d10e:	6839      	ldr	r1, [r7, #0]
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f8be 	bl	800d292 <USBD_CtlError>
        break;
 800d116:	bf00      	nop
}
 800d118:	bf00      	nop
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d130:	b2db      	uxtb	r3, r3
 800d132:	3b01      	subs	r3, #1
 800d134:	2b02      	cmp	r3, #2
 800d136:	d81e      	bhi.n	800d176 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	88db      	ldrh	r3, [r3, #6]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d004      	beq.n	800d14a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d140:	6839      	ldr	r1, [r7, #0]
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f8a5 	bl	800d292 <USBD_CtlError>
        break;
 800d148:	e01a      	b.n	800d180 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2201      	movs	r2, #1
 800d14e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d156:	2b00      	cmp	r3, #0
 800d158:	d005      	beq.n	800d166 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	f043 0202 	orr.w	r2, r3, #2
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	330c      	adds	r3, #12
 800d16a:	2202      	movs	r2, #2
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f90c 	bl	800d38c <USBD_CtlSendData>
      break;
 800d174:	e004      	b.n	800d180 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f88a 	bl	800d292 <USBD_CtlError>
      break;
 800d17e:	bf00      	nop
  }
}
 800d180:	bf00      	nop
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	885b      	ldrh	r3, [r3, #2]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d107      	bne.n	800d1aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 f953 	bl	800d44e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d1a8:	e013      	b.n	800d1d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	885b      	ldrh	r3, [r3, #2]
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d10b      	bne.n	800d1ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	889b      	ldrh	r3, [r3, #4]
 800d1b6:	0a1b      	lsrs	r3, r3, #8
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f943 	bl	800d44e <USBD_CtlSendStatus>
}
 800d1c8:	e003      	b.n	800d1d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f860 	bl	800d292 <USBD_CtlError>
}
 800d1d2:	bf00      	nop
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d80b      	bhi.n	800d20a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	885b      	ldrh	r3, [r3, #2]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d10c      	bne.n	800d214 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f923 	bl	800d44e <USBD_CtlSendStatus>
      }
      break;
 800d208:	e004      	b.n	800d214 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d20a:	6839      	ldr	r1, [r7, #0]
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f840 	bl	800d292 <USBD_CtlError>
      break;
 800d212:	e000      	b.n	800d216 <USBD_ClrFeature+0x3c>
      break;
 800d214:	bf00      	nop
  }
}
 800d216:	bf00      	nop
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b084      	sub	sp, #16
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	781a      	ldrb	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	3301      	adds	r3, #1
 800d238:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	781a      	ldrb	r2, [r3, #0]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3301      	adds	r3, #1
 800d246:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f7ff fa3d 	bl	800c6c8 <SWAPBYTE>
 800d24e:	4603      	mov	r3, r0
 800d250:	461a      	mov	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	3301      	adds	r3, #1
 800d25a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3301      	adds	r3, #1
 800d260:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f7ff fa30 	bl	800c6c8 <SWAPBYTE>
 800d268:	4603      	mov	r3, r0
 800d26a:	461a      	mov	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3301      	adds	r3, #1
 800d274:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3301      	adds	r3, #1
 800d27a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f7ff fa23 	bl	800c6c8 <SWAPBYTE>
 800d282:	4603      	mov	r3, r0
 800d284:	461a      	mov	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	80da      	strh	r2, [r3, #6]
}
 800d28a:	bf00      	nop
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b082      	sub	sp, #8
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d29c:	2180      	movs	r1, #128	@ 0x80
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 fd56 	bl	800dd50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fd52 	bl	800dd50 <USBD_LL_StallEP>
}
 800d2ac:	bf00      	nop
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d042      	beq.n	800d350 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d2ce:	6938      	ldr	r0, [r7, #16]
 800d2d0:	f000 f842 	bl	800d358 <USBD_GetLen>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2de:	d808      	bhi.n	800d2f2 <USBD_GetString+0x3e>
 800d2e0:	6938      	ldr	r0, [r7, #16]
 800d2e2:	f000 f839 	bl	800d358 <USBD_GetLen>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	e001      	b.n	800d2f6 <USBD_GetString+0x42>
 800d2f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	4413      	add	r3, r2
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	7812      	ldrb	r2, [r2, #0]
 800d304:	701a      	strb	r2, [r3, #0]
  idx++;
 800d306:	7dfb      	ldrb	r3, [r7, #23]
 800d308:	3301      	adds	r3, #1
 800d30a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d30c:	7dfb      	ldrb	r3, [r7, #23]
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	4413      	add	r3, r2
 800d312:	2203      	movs	r2, #3
 800d314:	701a      	strb	r2, [r3, #0]
  idx++;
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	3301      	adds	r3, #1
 800d31a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d31c:	e013      	b.n	800d346 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	4413      	add	r3, r2
 800d324:	693a      	ldr	r2, [r7, #16]
 800d326:	7812      	ldrb	r2, [r2, #0]
 800d328:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	3301      	adds	r3, #1
 800d32e:	613b      	str	r3, [r7, #16]
    idx++;
 800d330:	7dfb      	ldrb	r3, [r7, #23]
 800d332:	3301      	adds	r3, #1
 800d334:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d336:	7dfb      	ldrb	r3, [r7, #23]
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	4413      	add	r3, r2
 800d33c:	2200      	movs	r2, #0
 800d33e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d340:	7dfb      	ldrb	r3, [r7, #23]
 800d342:	3301      	adds	r3, #1
 800d344:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1e7      	bne.n	800d31e <USBD_GetString+0x6a>
 800d34e:	e000      	b.n	800d352 <USBD_GetString+0x9e>
    return;
 800d350:	bf00      	nop
  }
}
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d360:	2300      	movs	r3, #0
 800d362:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d368:	e005      	b.n	800d376 <USBD_GetLen+0x1e>
  {
    len++;
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	3301      	adds	r3, #1
 800d36e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	3301      	adds	r3, #1
 800d374:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1f5      	bne.n	800d36a <USBD_GetLen+0x12>
  }

  return len;
 800d37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3714      	adds	r7, #20
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2202      	movs	r2, #2
 800d39c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f000 fd52 	bl	800de62 <USBD_LL_Transmit>

  return USBD_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	2100      	movs	r1, #0
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f000 fd41 	bl	800de62 <USBD_LL_Transmit>

  return USBD_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b084      	sub	sp, #16
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2203      	movs	r2, #3
 800d3fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	2100      	movs	r1, #0
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f000 fd41 	bl	800dea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	2100      	movs	r1, #0
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f000 fd30 	bl	800dea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b082      	sub	sp, #8
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2204      	movs	r2, #4
 800d45a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d45e:	2300      	movs	r3, #0
 800d460:	2200      	movs	r2, #0
 800d462:	2100      	movs	r1, #0
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fcfc 	bl	800de62 <USBD_LL_Transmit>

  return USBD_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2205      	movs	r2, #5
 800d480:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d484:	2300      	movs	r3, #0
 800d486:	2200      	movs	r2, #0
 800d488:	2100      	movs	r1, #0
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fd0a 	bl	800dea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
	...

0800d49c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	4912      	ldr	r1, [pc, #72]	@ (800d4ec <MX_USB_DEVICE_Init+0x50>)
 800d4a4:	4812      	ldr	r0, [pc, #72]	@ (800d4f0 <MX_USB_DEVICE_Init+0x54>)
 800d4a6:	f7fe fcd9 	bl	800be5c <USBD_Init>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d4b0:	f7f4 fb9c 	bl	8001bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d4b4:	490f      	ldr	r1, [pc, #60]	@ (800d4f4 <MX_USB_DEVICE_Init+0x58>)
 800d4b6:	480e      	ldr	r0, [pc, #56]	@ (800d4f0 <MX_USB_DEVICE_Init+0x54>)
 800d4b8:	f7fe fd00 	bl	800bebc <USBD_RegisterClass>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d4c2:	f7f4 fb93 	bl	8001bec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d4c6:	490c      	ldr	r1, [pc, #48]	@ (800d4f8 <MX_USB_DEVICE_Init+0x5c>)
 800d4c8:	4809      	ldr	r0, [pc, #36]	@ (800d4f0 <MX_USB_DEVICE_Init+0x54>)
 800d4ca:	f7fe fbf7 	bl	800bcbc <USBD_CDC_RegisterInterface>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d001      	beq.n	800d4d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d4d4:	f7f4 fb8a 	bl	8001bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d4d8:	4805      	ldr	r0, [pc, #20]	@ (800d4f0 <MX_USB_DEVICE_Init+0x54>)
 800d4da:	f7fe fd25 	bl	800bf28 <USBD_Start>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d001      	beq.n	800d4e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d4e4:	f7f4 fb82 	bl	8001bec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d4e8:	bf00      	nop
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	200000e4 	.word	0x200000e4
 800d4f0:	20000a5c 	.word	0x20000a5c
 800d4f4:	20000048 	.word	0x20000048
 800d4f8:	200000d0 	.word	0x200000d0

0800d4fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d500:	2200      	movs	r2, #0
 800d502:	4905      	ldr	r1, [pc, #20]	@ (800d518 <CDC_Init_FS+0x1c>)
 800d504:	4805      	ldr	r0, [pc, #20]	@ (800d51c <CDC_Init_FS+0x20>)
 800d506:	f7fe fbf3 	bl	800bcf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d50a:	4905      	ldr	r1, [pc, #20]	@ (800d520 <CDC_Init_FS+0x24>)
 800d50c:	4803      	ldr	r0, [pc, #12]	@ (800d51c <CDC_Init_FS+0x20>)
 800d50e:	f7fe fc11 	bl	800bd34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d512:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d514:	4618      	mov	r0, r3
 800d516:	bd80      	pop	{r7, pc}
 800d518:	20000f38 	.word	0x20000f38
 800d51c:	20000a5c 	.word	0x20000a5c
 800d520:	20000d38 	.word	0x20000d38

0800d524 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d524:	b480      	push	{r7}
 800d526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d528:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	4603      	mov	r3, r0
 800d53c:	6039      	str	r1, [r7, #0]
 800d53e:	71fb      	strb	r3, [r7, #7]
 800d540:	4613      	mov	r3, r2
 800d542:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d544:	79fb      	ldrb	r3, [r7, #7]
 800d546:	2b23      	cmp	r3, #35	@ 0x23
 800d548:	f200 8098 	bhi.w	800d67c <CDC_Control_FS+0x148>
 800d54c:	a201      	add	r2, pc, #4	@ (adr r2, 800d554 <CDC_Control_FS+0x20>)
 800d54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d552:	bf00      	nop
 800d554:	0800d67d 	.word	0x0800d67d
 800d558:	0800d67d 	.word	0x0800d67d
 800d55c:	0800d67d 	.word	0x0800d67d
 800d560:	0800d67d 	.word	0x0800d67d
 800d564:	0800d67d 	.word	0x0800d67d
 800d568:	0800d67d 	.word	0x0800d67d
 800d56c:	0800d67d 	.word	0x0800d67d
 800d570:	0800d67d 	.word	0x0800d67d
 800d574:	0800d67d 	.word	0x0800d67d
 800d578:	0800d67d 	.word	0x0800d67d
 800d57c:	0800d67d 	.word	0x0800d67d
 800d580:	0800d67d 	.word	0x0800d67d
 800d584:	0800d67d 	.word	0x0800d67d
 800d588:	0800d67d 	.word	0x0800d67d
 800d58c:	0800d67d 	.word	0x0800d67d
 800d590:	0800d67d 	.word	0x0800d67d
 800d594:	0800d67d 	.word	0x0800d67d
 800d598:	0800d67d 	.word	0x0800d67d
 800d59c:	0800d67d 	.word	0x0800d67d
 800d5a0:	0800d67d 	.word	0x0800d67d
 800d5a4:	0800d67d 	.word	0x0800d67d
 800d5a8:	0800d67d 	.word	0x0800d67d
 800d5ac:	0800d67d 	.word	0x0800d67d
 800d5b0:	0800d67d 	.word	0x0800d67d
 800d5b4:	0800d67d 	.word	0x0800d67d
 800d5b8:	0800d67d 	.word	0x0800d67d
 800d5bc:	0800d67d 	.word	0x0800d67d
 800d5c0:	0800d67d 	.word	0x0800d67d
 800d5c4:	0800d67d 	.word	0x0800d67d
 800d5c8:	0800d67d 	.word	0x0800d67d
 800d5cc:	0800d67d 	.word	0x0800d67d
 800d5d0:	0800d67d 	.word	0x0800d67d
 800d5d4:	0800d5e5 	.word	0x0800d5e5
 800d5d8:	0800d629 	.word	0x0800d629
 800d5dc:	0800d67d 	.word	0x0800d67d
 800d5e0:	0800d67d 	.word	0x0800d67d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	3302      	adds	r3, #2
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	041b      	lsls	r3, r3, #16
 800d5fc:	431a      	orrs	r2, r3
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	3303      	adds	r3, #3
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	061b      	lsls	r3, r3, #24
 800d606:	4313      	orrs	r3, r2
 800d608:	461a      	mov	r2, r3
 800d60a:	4b20      	ldr	r3, [pc, #128]	@ (800d68c <CDC_Control_FS+0x158>)
 800d60c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	791a      	ldrb	r2, [r3, #4]
 800d612:	4b1e      	ldr	r3, [pc, #120]	@ (800d68c <CDC_Control_FS+0x158>)
 800d614:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	795a      	ldrb	r2, [r3, #5]
 800d61a:	4b1c      	ldr	r3, [pc, #112]	@ (800d68c <CDC_Control_FS+0x158>)
 800d61c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	799a      	ldrb	r2, [r3, #6]
 800d622:	4b1a      	ldr	r3, [pc, #104]	@ (800d68c <CDC_Control_FS+0x158>)
 800d624:	719a      	strb	r2, [r3, #6]
    break;
 800d626:	e02a      	b.n	800d67e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d628:	4b18      	ldr	r3, [pc, #96]	@ (800d68c <CDC_Control_FS+0x158>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d632:	4b16      	ldr	r3, [pc, #88]	@ (800d68c <CDC_Control_FS+0x158>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	0a1a      	lsrs	r2, r3, #8
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	3301      	adds	r3, #1
 800d63c:	b2d2      	uxtb	r2, r2
 800d63e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d640:	4b12      	ldr	r3, [pc, #72]	@ (800d68c <CDC_Control_FS+0x158>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	0c1a      	lsrs	r2, r3, #16
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	3302      	adds	r3, #2
 800d64a:	b2d2      	uxtb	r2, r2
 800d64c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d64e:	4b0f      	ldr	r3, [pc, #60]	@ (800d68c <CDC_Control_FS+0x158>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	0e1a      	lsrs	r2, r3, #24
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	3303      	adds	r3, #3
 800d658:	b2d2      	uxtb	r2, r2
 800d65a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	3304      	adds	r3, #4
 800d660:	4a0a      	ldr	r2, [pc, #40]	@ (800d68c <CDC_Control_FS+0x158>)
 800d662:	7912      	ldrb	r2, [r2, #4]
 800d664:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	3305      	adds	r3, #5
 800d66a:	4a08      	ldr	r2, [pc, #32]	@ (800d68c <CDC_Control_FS+0x158>)
 800d66c:	7952      	ldrb	r2, [r2, #5]
 800d66e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	3306      	adds	r3, #6
 800d674:	4a05      	ldr	r2, [pc, #20]	@ (800d68c <CDC_Control_FS+0x158>)
 800d676:	7992      	ldrb	r2, [r2, #6]
 800d678:	701a      	strb	r2, [r3, #0]
    break;
 800d67a:	e000      	b.n	800d67e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d67c:	bf00      	nop
  }

  return (USBD_OK);
 800d67e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d680:	4618      	mov	r0, r3
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	200000c8 	.word	0x200000c8

0800d690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800d69a:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c8 <CDC_Receive_FS+0x38>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d006      	beq.n	800d6b0 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800d6a2:	4b09      	ldr	r3, [pc, #36]	@ (800d6c8 <CDC_Receive_FS+0x38>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	6812      	ldr	r2, [r2, #0]
 800d6aa:	4611      	mov	r1, r2
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	4806      	ldr	r0, [pc, #24]	@ (800d6cc <CDC_Receive_FS+0x3c>)
 800d6b4:	f7fe fb3e 	bl	800bd34 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d6b8:	4804      	ldr	r0, [pc, #16]	@ (800d6cc <CDC_Receive_FS+0x3c>)
 800d6ba:	f7fe fb99 	bl	800bdf0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800d6be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	20001138 	.word	0x20001138
 800d6cc:	20000a5c 	.word	0x20000a5c

0800d6d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d6e0:	4b0d      	ldr	r3, [pc, #52]	@ (800d718 <CDC_Transmit_FS+0x48>)
 800d6e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d6e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e00b      	b.n	800d70e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d6f6:	887b      	ldrh	r3, [r7, #2]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	4806      	ldr	r0, [pc, #24]	@ (800d718 <CDC_Transmit_FS+0x48>)
 800d6fe:	f7fe faf7 	bl	800bcf0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d702:	4805      	ldr	r0, [pc, #20]	@ (800d718 <CDC_Transmit_FS+0x48>)
 800d704:	f7fe fb34 	bl	800bd70 <USBD_CDC_TransmitPacket>
 800d708:	4603      	mov	r3, r0
 800d70a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20000a5c 	.word	0x20000a5c

0800d71c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b087      	sub	sp, #28
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	4613      	mov	r3, r2
 800d728:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d72e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d732:	4618      	mov	r0, r3
 800d734:	371c      	adds	r7, #28
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
	...

0800d740 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800d748:	4a04      	ldr	r2, [pc, #16]	@ (800d75c <CDC_Attach_Rx+0x1c>)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6013      	str	r3, [r2, #0]
}
 800d74e:	bf00      	nop
 800d750:	370c      	adds	r7, #12
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	20001138 	.word	0x20001138

0800d760 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	4603      	mov	r3, r0
 800d768:	6039      	str	r1, [r7, #0]
 800d76a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2212      	movs	r2, #18
 800d770:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d772:	4b03      	ldr	r3, [pc, #12]	@ (800d780 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d774:	4618      	mov	r0, r3
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	20000100 	.word	0x20000100

0800d784 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4603      	mov	r3, r0
 800d78c:	6039      	str	r1, [r7, #0]
 800d78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2204      	movs	r2, #4
 800d794:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d796:	4b03      	ldr	r3, [pc, #12]	@ (800d7a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d798:	4618      	mov	r0, r3
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	20000114 	.word	0x20000114

0800d7a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	6039      	str	r1, [r7, #0]
 800d7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7b4:	79fb      	ldrb	r3, [r7, #7]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d105      	bne.n	800d7c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	4907      	ldr	r1, [pc, #28]	@ (800d7dc <USBD_FS_ProductStrDescriptor+0x34>)
 800d7be:	4808      	ldr	r0, [pc, #32]	@ (800d7e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7c0:	f7ff fd78 	bl	800d2b4 <USBD_GetString>
 800d7c4:	e004      	b.n	800d7d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	4904      	ldr	r1, [pc, #16]	@ (800d7dc <USBD_FS_ProductStrDescriptor+0x34>)
 800d7ca:	4805      	ldr	r0, [pc, #20]	@ (800d7e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7cc:	f7ff fd72 	bl	800d2b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7d0:	4b02      	ldr	r3, [pc, #8]	@ (800d7dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	2000113c 	.word	0x2000113c
 800d7e0:	0800e944 	.word	0x0800e944

0800d7e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	6039      	str	r1, [r7, #0]
 800d7ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d7f0:	683a      	ldr	r2, [r7, #0]
 800d7f2:	4904      	ldr	r1, [pc, #16]	@ (800d804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d7f4:	4804      	ldr	r0, [pc, #16]	@ (800d808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d7f6:	f7ff fd5d 	bl	800d2b4 <USBD_GetString>
  return USBD_StrDesc;
 800d7fa:	4b02      	ldr	r3, [pc, #8]	@ (800d804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	2000113c 	.word	0x2000113c
 800d808:	0800e95c 	.word	0x0800e95c

0800d80c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	6039      	str	r1, [r7, #0]
 800d816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	221a      	movs	r2, #26
 800d81c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d81e:	f000 f843 	bl	800d8a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d822:	4b02      	ldr	r3, [pc, #8]	@ (800d82c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	20000118 	.word	0x20000118

0800d830 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	4603      	mov	r3, r0
 800d838:	6039      	str	r1, [r7, #0]
 800d83a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d83c:	79fb      	ldrb	r3, [r7, #7]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d105      	bne.n	800d84e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	4907      	ldr	r1, [pc, #28]	@ (800d864 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d846:	4808      	ldr	r0, [pc, #32]	@ (800d868 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d848:	f7ff fd34 	bl	800d2b4 <USBD_GetString>
 800d84c:	e004      	b.n	800d858 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d84e:	683a      	ldr	r2, [r7, #0]
 800d850:	4904      	ldr	r1, [pc, #16]	@ (800d864 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d852:	4805      	ldr	r0, [pc, #20]	@ (800d868 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d854:	f7ff fd2e 	bl	800d2b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d858:	4b02      	ldr	r3, [pc, #8]	@ (800d864 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	2000113c 	.word	0x2000113c
 800d868:	0800e970 	.word	0x0800e970

0800d86c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	6039      	str	r1, [r7, #0]
 800d876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d878:	79fb      	ldrb	r3, [r7, #7]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d105      	bne.n	800d88a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	4907      	ldr	r1, [pc, #28]	@ (800d8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d882:	4808      	ldr	r0, [pc, #32]	@ (800d8a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d884:	f7ff fd16 	bl	800d2b4 <USBD_GetString>
 800d888:	e004      	b.n	800d894 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d88a:	683a      	ldr	r2, [r7, #0]
 800d88c:	4904      	ldr	r1, [pc, #16]	@ (800d8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d88e:	4805      	ldr	r0, [pc, #20]	@ (800d8a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d890:	f7ff fd10 	bl	800d2b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d894:	4b02      	ldr	r3, [pc, #8]	@ (800d8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d896:	4618      	mov	r0, r3
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	2000113c 	.word	0x2000113c
 800d8a4:	0800e97c 	.word	0x0800e97c

0800d8a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d8ec <Get_SerialNum+0x44>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f0 <Get_SerialNum+0x48>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f4 <Get_SerialNum+0x4c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d009      	beq.n	800d8e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8ce:	2208      	movs	r2, #8
 800d8d0:	4909      	ldr	r1, [pc, #36]	@ (800d8f8 <Get_SerialNum+0x50>)
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f000 f814 	bl	800d900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8d8:	2204      	movs	r2, #4
 800d8da:	4908      	ldr	r1, [pc, #32]	@ (800d8fc <Get_SerialNum+0x54>)
 800d8dc:	68b8      	ldr	r0, [r7, #8]
 800d8de:	f000 f80f 	bl	800d900 <IntToUnicode>
  }
}
 800d8e2:	bf00      	nop
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	1fff7a10 	.word	0x1fff7a10
 800d8f0:	1fff7a14 	.word	0x1fff7a14
 800d8f4:	1fff7a18 	.word	0x1fff7a18
 800d8f8:	2000011a 	.word	0x2000011a
 800d8fc:	2000012a 	.word	0x2000012a

0800d900 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d900:	b480      	push	{r7}
 800d902:	b087      	sub	sp, #28
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	4613      	mov	r3, r2
 800d90c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d912:	2300      	movs	r3, #0
 800d914:	75fb      	strb	r3, [r7, #23]
 800d916:	e027      	b.n	800d968 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	0f1b      	lsrs	r3, r3, #28
 800d91c:	2b09      	cmp	r3, #9
 800d91e:	d80b      	bhi.n	800d938 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	0f1b      	lsrs	r3, r3, #28
 800d924:	b2da      	uxtb	r2, r3
 800d926:	7dfb      	ldrb	r3, [r7, #23]
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	4619      	mov	r1, r3
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	440b      	add	r3, r1
 800d930:	3230      	adds	r2, #48	@ 0x30
 800d932:	b2d2      	uxtb	r2, r2
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	e00a      	b.n	800d94e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	0f1b      	lsrs	r3, r3, #28
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	4619      	mov	r1, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	440b      	add	r3, r1
 800d948:	3237      	adds	r2, #55	@ 0x37
 800d94a:	b2d2      	uxtb	r2, r2
 800d94c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	011b      	lsls	r3, r3, #4
 800d952:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d954:	7dfb      	ldrb	r3, [r7, #23]
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	3301      	adds	r3, #1
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	4413      	add	r3, r2
 800d95e:	2200      	movs	r2, #0
 800d960:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d962:	7dfb      	ldrb	r3, [r7, #23]
 800d964:	3301      	adds	r3, #1
 800d966:	75fb      	strb	r3, [r7, #23]
 800d968:	7dfa      	ldrb	r2, [r7, #23]
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d3d3      	bcc.n	800d918 <IntToUnicode+0x18>
  }
}
 800d970:	bf00      	nop
 800d972:	bf00      	nop
 800d974:	371c      	adds	r7, #28
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr
	...

0800d980 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b08a      	sub	sp, #40	@ 0x28
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d988:	f107 0314 	add.w	r3, r7, #20
 800d98c:	2200      	movs	r2, #0
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	605a      	str	r2, [r3, #4]
 800d992:	609a      	str	r2, [r3, #8]
 800d994:	60da      	str	r2, [r3, #12]
 800d996:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9a0:	d13a      	bne.n	800da18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	613b      	str	r3, [r7, #16]
 800d9a6:	4b1e      	ldr	r3, [pc, #120]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9aa:	4a1d      	ldr	r2, [pc, #116]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9ac:	f043 0301 	orr.w	r3, r3, #1
 800d9b0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9b2:	4b1b      	ldr	r3, [pc, #108]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	613b      	str	r3, [r7, #16]
 800d9bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d9be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d9c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d9d0:	230a      	movs	r3, #10
 800d9d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9d4:	f107 0314 	add.w	r3, r7, #20
 800d9d8:	4619      	mov	r1, r3
 800d9da:	4812      	ldr	r0, [pc, #72]	@ (800da24 <HAL_PCD_MspInit+0xa4>)
 800d9dc:	f7f6 fe32 	bl	8004644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9e4:	4a0e      	ldr	r2, [pc, #56]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ea:	6353      	str	r3, [r2, #52]	@ 0x34
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	4b0b      	ldr	r3, [pc, #44]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9f4:	4a0a      	ldr	r2, [pc, #40]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d9fa:	6453      	str	r3, [r2, #68]	@ 0x44
 800d9fc:	4b08      	ldr	r3, [pc, #32]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da08:	2200      	movs	r2, #0
 800da0a:	2100      	movs	r1, #0
 800da0c:	2043      	movs	r0, #67	@ 0x43
 800da0e:	f7f6 fa36 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da12:	2043      	movs	r0, #67	@ 0x43
 800da14:	f7f6 fa4f 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da18:	bf00      	nop
 800da1a:	3728      	adds	r7, #40	@ 0x28
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	40023800 	.word	0x40023800
 800da24:	40020000 	.word	0x40020000

0800da28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800da3c:	4619      	mov	r1, r3
 800da3e:	4610      	mov	r0, r2
 800da40:	f7fe fabf 	bl	800bfc2 <USBD_LL_SetupStage>
}
 800da44:	bf00      	nop
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	460b      	mov	r3, r1
 800da56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800da5e:	78fa      	ldrb	r2, [r7, #3]
 800da60:	6879      	ldr	r1, [r7, #4]
 800da62:	4613      	mov	r3, r2
 800da64:	00db      	lsls	r3, r3, #3
 800da66:	4413      	add	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	440b      	add	r3, r1
 800da6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	78fb      	ldrb	r3, [r7, #3]
 800da74:	4619      	mov	r1, r3
 800da76:	f7fe faf9 	bl	800c06c <USBD_LL_DataOutStage>
}
 800da7a:	bf00      	nop
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b082      	sub	sp, #8
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
 800da8a:	460b      	mov	r3, r1
 800da8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800da94:	78fa      	ldrb	r2, [r7, #3]
 800da96:	6879      	ldr	r1, [r7, #4]
 800da98:	4613      	mov	r3, r2
 800da9a:	00db      	lsls	r3, r3, #3
 800da9c:	4413      	add	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	440b      	add	r3, r1
 800daa2:	3320      	adds	r3, #32
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	78fb      	ldrb	r3, [r7, #3]
 800daa8:	4619      	mov	r1, r3
 800daaa:	f7fe fb9b 	bl	800c1e4 <USBD_LL_DataInStage>
}
 800daae:	bf00      	nop
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b082      	sub	sp, #8
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe fcdf 	bl	800c488 <USBD_LL_SOF>
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b084      	sub	sp, #16
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dada:	2301      	movs	r3, #1
 800dadc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	79db      	ldrb	r3, [r3, #7]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d001      	beq.n	800daea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dae6:	f7f4 f881 	bl	8001bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800daf0:	7bfa      	ldrb	r2, [r7, #15]
 800daf2:	4611      	mov	r1, r2
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe fc83 	bl	800c400 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe fc2a 	bl	800c35a <USBD_LL_Reset>
}
 800db06:	bf00      	nop
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
	...

0800db10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe fc7e 	bl	800c420 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	6812      	ldr	r2, [r2, #0]
 800db32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db36:	f043 0301 	orr.w	r3, r3, #1
 800db3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	7adb      	ldrb	r3, [r3, #11]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d005      	beq.n	800db50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db44:	4b04      	ldr	r3, [pc, #16]	@ (800db58 <HAL_PCD_SuspendCallback+0x48>)
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	4a03      	ldr	r2, [pc, #12]	@ (800db58 <HAL_PCD_SuspendCallback+0x48>)
 800db4a:	f043 0306 	orr.w	r3, r3, #6
 800db4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	e000ed00 	.word	0xe000ed00

0800db5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fc74 	bl	800c458 <USBD_LL_Resume>
}
 800db70:	bf00      	nop
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	460b      	mov	r3, r1
 800db82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db8a:	78fa      	ldrb	r2, [r7, #3]
 800db8c:	4611      	mov	r1, r2
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fe fccc 	bl	800c52c <USBD_LL_IsoOUTIncomplete>
}
 800db94:	bf00      	nop
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbae:	78fa      	ldrb	r2, [r7, #3]
 800dbb0:	4611      	mov	r1, r2
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe fc88 	bl	800c4c8 <USBD_LL_IsoINIncomplete>
}
 800dbb8:	bf00      	nop
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fe fcde 	bl	800c590 <USBD_LL_DevConnected>
}
 800dbd4:	bf00      	nop
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fe fcdb 	bl	800c5a6 <USBD_LL_DevDisconnected>
}
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d13c      	bne.n	800dc82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc08:	4a20      	ldr	r2, [pc, #128]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4a1e      	ldr	r2, [pc, #120]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc14:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc18:	4b1c      	ldr	r3, [pc, #112]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dc1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dc20:	4b1a      	ldr	r3, [pc, #104]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc22:	2204      	movs	r2, #4
 800dc24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc26:	4b19      	ldr	r3, [pc, #100]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc28:	2202      	movs	r2, #2
 800dc2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc2c:	4b17      	ldr	r3, [pc, #92]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc32:	4b16      	ldr	r3, [pc, #88]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc34:	2202      	movs	r2, #2
 800dc36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc38:	4b14      	ldr	r3, [pc, #80]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dc3e:	4b13      	ldr	r3, [pc, #76]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dc44:	4b11      	ldr	r3, [pc, #68]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc46:	2200      	movs	r2, #0
 800dc48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc4a:	4b10      	ldr	r3, [pc, #64]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc50:	4b0e      	ldr	r3, [pc, #56]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc52:	2200      	movs	r2, #0
 800dc54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc56:	480d      	ldr	r0, [pc, #52]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc58:	f7f9 fd44 	bl	80076e4 <HAL_PCD_Init>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dc62:	f7f3 ffc3 	bl	8001bec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dc66:	2180      	movs	r1, #128	@ 0x80
 800dc68:	4808      	ldr	r0, [pc, #32]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc6a:	f7fa ff70 	bl	8008b4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc6e:	2240      	movs	r2, #64	@ 0x40
 800dc70:	2100      	movs	r1, #0
 800dc72:	4806      	ldr	r0, [pc, #24]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc74:	f7fa ff24 	bl	8008ac0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc78:	2280      	movs	r2, #128	@ 0x80
 800dc7a:	2101      	movs	r1, #1
 800dc7c:	4803      	ldr	r0, [pc, #12]	@ (800dc8c <USBD_LL_Init+0x94>)
 800dc7e:	f7fa ff1f 	bl	8008ac0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	2000133c 	.word	0x2000133c

0800dc90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7f9 fe2b 	bl	8007902 <HAL_PCD_Start>
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 f942 	bl	800df3c <USBD_Get_USB_Status>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b084      	sub	sp, #16
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	4608      	mov	r0, r1
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	70fb      	strb	r3, [r7, #3]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	70bb      	strb	r3, [r7, #2]
 800dcdc:	4613      	mov	r3, r2
 800dcde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dcee:	78bb      	ldrb	r3, [r7, #2]
 800dcf0:	883a      	ldrh	r2, [r7, #0]
 800dcf2:	78f9      	ldrb	r1, [r7, #3]
 800dcf4:	f7fa faff 	bl	80082f6 <HAL_PCD_EP_Open>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 f91c 	bl	800df3c <USBD_Get_USB_Status>
 800dd04:	4603      	mov	r3, r0
 800dd06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd08:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b084      	sub	sp, #16
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd22:	2300      	movs	r3, #0
 800dd24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd2c:	78fa      	ldrb	r2, [r7, #3]
 800dd2e:	4611      	mov	r1, r2
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fa fb4a 	bl	80083ca <HAL_PCD_EP_Close>
 800dd36:	4603      	mov	r3, r0
 800dd38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f000 f8fd 	bl	800df3c <USBD_Get_USB_Status>
 800dd42:	4603      	mov	r3, r0
 800dd44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd46:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd60:	2300      	movs	r3, #0
 800dd62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd6a:	78fa      	ldrb	r2, [r7, #3]
 800dd6c:	4611      	mov	r1, r2
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fa fc02 	bl	8008578 <HAL_PCD_EP_SetStall>
 800dd74:	4603      	mov	r3, r0
 800dd76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f000 f8de 	bl	800df3c <USBD_Get_USB_Status>
 800dd80:	4603      	mov	r3, r0
 800dd82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd84:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b084      	sub	sp, #16
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
 800dd96:	460b      	mov	r3, r1
 800dd98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dda8:	78fa      	ldrb	r2, [r7, #3]
 800ddaa:	4611      	mov	r1, r2
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7fa fc46 	bl	800863e <HAL_PCD_EP_ClrStall>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddb6:	7bfb      	ldrb	r3, [r7, #15]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f000 f8bf 	bl	800df3c <USBD_Get_USB_Status>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b085      	sub	sp, #20
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dde0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	da0b      	bge.n	800de00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dde8:	78fb      	ldrb	r3, [r7, #3]
 800ddea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ddee:	68f9      	ldr	r1, [r7, #12]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	00db      	lsls	r3, r3, #3
 800ddf4:	4413      	add	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	440b      	add	r3, r1
 800ddfa:	3316      	adds	r3, #22
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	e00b      	b.n	800de18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de06:	68f9      	ldr	r1, [r7, #12]
 800de08:	4613      	mov	r3, r2
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	440b      	add	r3, r1
 800de12:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800de16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de3e:	78fa      	ldrb	r2, [r7, #3]
 800de40:	4611      	mov	r1, r2
 800de42:	4618      	mov	r0, r3
 800de44:	f7fa fa33 	bl	80082ae <HAL_PCD_SetAddress>
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
 800de4e:	4618      	mov	r0, r3
 800de50:	f000 f874 	bl	800df3c <USBD_Get_USB_Status>
 800de54:	4603      	mov	r3, r0
 800de56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de58:	7bbb      	ldrb	r3, [r7, #14]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b086      	sub	sp, #24
 800de66:	af00      	add	r7, sp, #0
 800de68:	60f8      	str	r0, [r7, #12]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
 800de6e:	460b      	mov	r3, r1
 800de70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de76:	2300      	movs	r3, #0
 800de78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de80:	7af9      	ldrb	r1, [r7, #11]
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	f7fa fb3d 	bl	8008504 <HAL_PCD_EP_Transmit>
 800de8a:	4603      	mov	r3, r0
 800de8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	4618      	mov	r0, r3
 800de92:	f000 f853 	bl	800df3c <USBD_Get_USB_Status>
 800de96:	4603      	mov	r3, r0
 800de98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	607a      	str	r2, [r7, #4]
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	460b      	mov	r3, r1
 800deb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deb4:	2300      	movs	r3, #0
 800deb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deb8:	2300      	movs	r3, #0
 800deba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dec2:	7af9      	ldrb	r1, [r7, #11]
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	f7fa fac9 	bl	800845e <HAL_PCD_EP_Receive>
 800decc:	4603      	mov	r3, r0
 800dece:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ded0:	7dfb      	ldrb	r3, [r7, #23]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 f832 	bl	800df3c <USBD_Get_USB_Status>
 800ded8:	4603      	mov	r3, r0
 800deda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dedc:	7dbb      	ldrb	r3, [r7, #22]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3718      	adds	r7, #24
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b082      	sub	sp, #8
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	460b      	mov	r3, r1
 800def0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800def8:	78fa      	ldrb	r2, [r7, #3]
 800defa:	4611      	mov	r1, r2
 800defc:	4618      	mov	r0, r3
 800defe:	f7fa fae9 	bl	80084d4 <HAL_PCD_EP_GetRxCount>
 800df02:	4603      	mov	r3, r0
}
 800df04:	4618      	mov	r0, r3
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df14:	4b03      	ldr	r3, [pc, #12]	@ (800df24 <USBD_static_malloc+0x18>)
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	20001820 	.word	0x20001820

0800df28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]

}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df46:	2300      	movs	r3, #0
 800df48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	2b03      	cmp	r3, #3
 800df4e:	d817      	bhi.n	800df80 <USBD_Get_USB_Status+0x44>
 800df50:	a201      	add	r2, pc, #4	@ (adr r2, 800df58 <USBD_Get_USB_Status+0x1c>)
 800df52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df56:	bf00      	nop
 800df58:	0800df69 	.word	0x0800df69
 800df5c:	0800df6f 	.word	0x0800df6f
 800df60:	0800df75 	.word	0x0800df75
 800df64:	0800df7b 	.word	0x0800df7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	73fb      	strb	r3, [r7, #15]
    break;
 800df6c:	e00b      	b.n	800df86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df6e:	2303      	movs	r3, #3
 800df70:	73fb      	strb	r3, [r7, #15]
    break;
 800df72:	e008      	b.n	800df86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df74:	2301      	movs	r3, #1
 800df76:	73fb      	strb	r3, [r7, #15]
    break;
 800df78:	e005      	b.n	800df86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df7a:	2303      	movs	r3, #3
 800df7c:	73fb      	strb	r3, [r7, #15]
    break;
 800df7e:	e002      	b.n	800df86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df80:	2303      	movs	r3, #3
 800df82:	73fb      	strb	r3, [r7, #15]
    break;
 800df84:	bf00      	nop
  }
  return usb_status;
 800df86:	7bfb      	ldrb	r3, [r7, #15]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3714      	adds	r7, #20
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <sniprintf>:
 800df94:	b40c      	push	{r2, r3}
 800df96:	b530      	push	{r4, r5, lr}
 800df98:	4b18      	ldr	r3, [pc, #96]	@ (800dffc <sniprintf+0x68>)
 800df9a:	1e0c      	subs	r4, r1, #0
 800df9c:	681d      	ldr	r5, [r3, #0]
 800df9e:	b09d      	sub	sp, #116	@ 0x74
 800dfa0:	da08      	bge.n	800dfb4 <sniprintf+0x20>
 800dfa2:	238b      	movs	r3, #139	@ 0x8b
 800dfa4:	602b      	str	r3, [r5, #0]
 800dfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfaa:	b01d      	add	sp, #116	@ 0x74
 800dfac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfb0:	b002      	add	sp, #8
 800dfb2:	4770      	bx	lr
 800dfb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dfb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dfbc:	f04f 0300 	mov.w	r3, #0
 800dfc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800dfc2:	bf14      	ite	ne
 800dfc4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dfc8:	4623      	moveq	r3, r4
 800dfca:	9304      	str	r3, [sp, #16]
 800dfcc:	9307      	str	r3, [sp, #28]
 800dfce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfd2:	9002      	str	r0, [sp, #8]
 800dfd4:	9006      	str	r0, [sp, #24]
 800dfd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dfda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dfdc:	ab21      	add	r3, sp, #132	@ 0x84
 800dfde:	a902      	add	r1, sp, #8
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	9301      	str	r3, [sp, #4]
 800dfe4:	f000 f9bc 	bl	800e360 <_svfiprintf_r>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	bfbc      	itt	lt
 800dfec:	238b      	movlt	r3, #139	@ 0x8b
 800dfee:	602b      	strlt	r3, [r5, #0]
 800dff0:	2c00      	cmp	r4, #0
 800dff2:	d0da      	beq.n	800dfaa <sniprintf+0x16>
 800dff4:	9b02      	ldr	r3, [sp, #8]
 800dff6:	2200      	movs	r2, #0
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	e7d6      	b.n	800dfaa <sniprintf+0x16>
 800dffc:	20000134 	.word	0x20000134

0800e000 <memmove>:
 800e000:	4288      	cmp	r0, r1
 800e002:	b510      	push	{r4, lr}
 800e004:	eb01 0402 	add.w	r4, r1, r2
 800e008:	d902      	bls.n	800e010 <memmove+0x10>
 800e00a:	4284      	cmp	r4, r0
 800e00c:	4623      	mov	r3, r4
 800e00e:	d807      	bhi.n	800e020 <memmove+0x20>
 800e010:	1e43      	subs	r3, r0, #1
 800e012:	42a1      	cmp	r1, r4
 800e014:	d008      	beq.n	800e028 <memmove+0x28>
 800e016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e01a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e01e:	e7f8      	b.n	800e012 <memmove+0x12>
 800e020:	4402      	add	r2, r0
 800e022:	4601      	mov	r1, r0
 800e024:	428a      	cmp	r2, r1
 800e026:	d100      	bne.n	800e02a <memmove+0x2a>
 800e028:	bd10      	pop	{r4, pc}
 800e02a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e02e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e032:	e7f7      	b.n	800e024 <memmove+0x24>

0800e034 <memset>:
 800e034:	4402      	add	r2, r0
 800e036:	4603      	mov	r3, r0
 800e038:	4293      	cmp	r3, r2
 800e03a:	d100      	bne.n	800e03e <memset+0xa>
 800e03c:	4770      	bx	lr
 800e03e:	f803 1b01 	strb.w	r1, [r3], #1
 800e042:	e7f9      	b.n	800e038 <memset+0x4>

0800e044 <__errno>:
 800e044:	4b01      	ldr	r3, [pc, #4]	@ (800e04c <__errno+0x8>)
 800e046:	6818      	ldr	r0, [r3, #0]
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	20000134 	.word	0x20000134

0800e050 <__libc_init_array>:
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	4d0d      	ldr	r5, [pc, #52]	@ (800e088 <__libc_init_array+0x38>)
 800e054:	4c0d      	ldr	r4, [pc, #52]	@ (800e08c <__libc_init_array+0x3c>)
 800e056:	1b64      	subs	r4, r4, r5
 800e058:	10a4      	asrs	r4, r4, #2
 800e05a:	2600      	movs	r6, #0
 800e05c:	42a6      	cmp	r6, r4
 800e05e:	d109      	bne.n	800e074 <__libc_init_array+0x24>
 800e060:	4d0b      	ldr	r5, [pc, #44]	@ (800e090 <__libc_init_array+0x40>)
 800e062:	4c0c      	ldr	r4, [pc, #48]	@ (800e094 <__libc_init_array+0x44>)
 800e064:	f000 fc4a 	bl	800e8fc <_init>
 800e068:	1b64      	subs	r4, r4, r5
 800e06a:	10a4      	asrs	r4, r4, #2
 800e06c:	2600      	movs	r6, #0
 800e06e:	42a6      	cmp	r6, r4
 800e070:	d105      	bne.n	800e07e <__libc_init_array+0x2e>
 800e072:	bd70      	pop	{r4, r5, r6, pc}
 800e074:	f855 3b04 	ldr.w	r3, [r5], #4
 800e078:	4798      	blx	r3
 800e07a:	3601      	adds	r6, #1
 800e07c:	e7ee      	b.n	800e05c <__libc_init_array+0xc>
 800e07e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e082:	4798      	blx	r3
 800e084:	3601      	adds	r6, #1
 800e086:	e7f2      	b.n	800e06e <__libc_init_array+0x1e>
 800e088:	0800eff4 	.word	0x0800eff4
 800e08c:	0800eff4 	.word	0x0800eff4
 800e090:	0800eff4 	.word	0x0800eff4
 800e094:	0800eff8 	.word	0x0800eff8

0800e098 <__retarget_lock_acquire_recursive>:
 800e098:	4770      	bx	lr

0800e09a <__retarget_lock_release_recursive>:
 800e09a:	4770      	bx	lr

0800e09c <memcpy>:
 800e09c:	440a      	add	r2, r1
 800e09e:	4291      	cmp	r1, r2
 800e0a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0a4:	d100      	bne.n	800e0a8 <memcpy+0xc>
 800e0a6:	4770      	bx	lr
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0b2:	4291      	cmp	r1, r2
 800e0b4:	d1f9      	bne.n	800e0aa <memcpy+0xe>
 800e0b6:	bd10      	pop	{r4, pc}

0800e0b8 <_free_r>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	d041      	beq.n	800e144 <_free_r+0x8c>
 800e0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0c4:	1f0c      	subs	r4, r1, #4
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	bfb8      	it	lt
 800e0ca:	18e4      	addlt	r4, r4, r3
 800e0cc:	f000 f8e0 	bl	800e290 <__malloc_lock>
 800e0d0:	4a1d      	ldr	r2, [pc, #116]	@ (800e148 <_free_r+0x90>)
 800e0d2:	6813      	ldr	r3, [r2, #0]
 800e0d4:	b933      	cbnz	r3, 800e0e4 <_free_r+0x2c>
 800e0d6:	6063      	str	r3, [r4, #4]
 800e0d8:	6014      	str	r4, [r2, #0]
 800e0da:	4628      	mov	r0, r5
 800e0dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0e0:	f000 b8dc 	b.w	800e29c <__malloc_unlock>
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d908      	bls.n	800e0fa <_free_r+0x42>
 800e0e8:	6820      	ldr	r0, [r4, #0]
 800e0ea:	1821      	adds	r1, r4, r0
 800e0ec:	428b      	cmp	r3, r1
 800e0ee:	bf01      	itttt	eq
 800e0f0:	6819      	ldreq	r1, [r3, #0]
 800e0f2:	685b      	ldreq	r3, [r3, #4]
 800e0f4:	1809      	addeq	r1, r1, r0
 800e0f6:	6021      	streq	r1, [r4, #0]
 800e0f8:	e7ed      	b.n	800e0d6 <_free_r+0x1e>
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	b10b      	cbz	r3, 800e104 <_free_r+0x4c>
 800e100:	42a3      	cmp	r3, r4
 800e102:	d9fa      	bls.n	800e0fa <_free_r+0x42>
 800e104:	6811      	ldr	r1, [r2, #0]
 800e106:	1850      	adds	r0, r2, r1
 800e108:	42a0      	cmp	r0, r4
 800e10a:	d10b      	bne.n	800e124 <_free_r+0x6c>
 800e10c:	6820      	ldr	r0, [r4, #0]
 800e10e:	4401      	add	r1, r0
 800e110:	1850      	adds	r0, r2, r1
 800e112:	4283      	cmp	r3, r0
 800e114:	6011      	str	r1, [r2, #0]
 800e116:	d1e0      	bne.n	800e0da <_free_r+0x22>
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	6053      	str	r3, [r2, #4]
 800e11e:	4408      	add	r0, r1
 800e120:	6010      	str	r0, [r2, #0]
 800e122:	e7da      	b.n	800e0da <_free_r+0x22>
 800e124:	d902      	bls.n	800e12c <_free_r+0x74>
 800e126:	230c      	movs	r3, #12
 800e128:	602b      	str	r3, [r5, #0]
 800e12a:	e7d6      	b.n	800e0da <_free_r+0x22>
 800e12c:	6820      	ldr	r0, [r4, #0]
 800e12e:	1821      	adds	r1, r4, r0
 800e130:	428b      	cmp	r3, r1
 800e132:	bf04      	itt	eq
 800e134:	6819      	ldreq	r1, [r3, #0]
 800e136:	685b      	ldreq	r3, [r3, #4]
 800e138:	6063      	str	r3, [r4, #4]
 800e13a:	bf04      	itt	eq
 800e13c:	1809      	addeq	r1, r1, r0
 800e13e:	6021      	streq	r1, [r4, #0]
 800e140:	6054      	str	r4, [r2, #4]
 800e142:	e7ca      	b.n	800e0da <_free_r+0x22>
 800e144:	bd38      	pop	{r3, r4, r5, pc}
 800e146:	bf00      	nop
 800e148:	20001b84 	.word	0x20001b84

0800e14c <sbrk_aligned>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	4e0f      	ldr	r6, [pc, #60]	@ (800e18c <sbrk_aligned+0x40>)
 800e150:	460c      	mov	r4, r1
 800e152:	6831      	ldr	r1, [r6, #0]
 800e154:	4605      	mov	r5, r0
 800e156:	b911      	cbnz	r1, 800e15e <sbrk_aligned+0x12>
 800e158:	f000 fb8a 	bl	800e870 <_sbrk_r>
 800e15c:	6030      	str	r0, [r6, #0]
 800e15e:	4621      	mov	r1, r4
 800e160:	4628      	mov	r0, r5
 800e162:	f000 fb85 	bl	800e870 <_sbrk_r>
 800e166:	1c43      	adds	r3, r0, #1
 800e168:	d103      	bne.n	800e172 <sbrk_aligned+0x26>
 800e16a:	f04f 34ff 	mov.w	r4, #4294967295
 800e16e:	4620      	mov	r0, r4
 800e170:	bd70      	pop	{r4, r5, r6, pc}
 800e172:	1cc4      	adds	r4, r0, #3
 800e174:	f024 0403 	bic.w	r4, r4, #3
 800e178:	42a0      	cmp	r0, r4
 800e17a:	d0f8      	beq.n	800e16e <sbrk_aligned+0x22>
 800e17c:	1a21      	subs	r1, r4, r0
 800e17e:	4628      	mov	r0, r5
 800e180:	f000 fb76 	bl	800e870 <_sbrk_r>
 800e184:	3001      	adds	r0, #1
 800e186:	d1f2      	bne.n	800e16e <sbrk_aligned+0x22>
 800e188:	e7ef      	b.n	800e16a <sbrk_aligned+0x1e>
 800e18a:	bf00      	nop
 800e18c:	20001b80 	.word	0x20001b80

0800e190 <_malloc_r>:
 800e190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e194:	1ccd      	adds	r5, r1, #3
 800e196:	f025 0503 	bic.w	r5, r5, #3
 800e19a:	3508      	adds	r5, #8
 800e19c:	2d0c      	cmp	r5, #12
 800e19e:	bf38      	it	cc
 800e1a0:	250c      	movcc	r5, #12
 800e1a2:	2d00      	cmp	r5, #0
 800e1a4:	4606      	mov	r6, r0
 800e1a6:	db01      	blt.n	800e1ac <_malloc_r+0x1c>
 800e1a8:	42a9      	cmp	r1, r5
 800e1aa:	d904      	bls.n	800e1b6 <_malloc_r+0x26>
 800e1ac:	230c      	movs	r3, #12
 800e1ae:	6033      	str	r3, [r6, #0]
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e28c <_malloc_r+0xfc>
 800e1ba:	f000 f869 	bl	800e290 <__malloc_lock>
 800e1be:	f8d8 3000 	ldr.w	r3, [r8]
 800e1c2:	461c      	mov	r4, r3
 800e1c4:	bb44      	cbnz	r4, 800e218 <_malloc_r+0x88>
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f7ff ffbf 	bl	800e14c <sbrk_aligned>
 800e1ce:	1c43      	adds	r3, r0, #1
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	d158      	bne.n	800e286 <_malloc_r+0xf6>
 800e1d4:	f8d8 4000 	ldr.w	r4, [r8]
 800e1d8:	4627      	mov	r7, r4
 800e1da:	2f00      	cmp	r7, #0
 800e1dc:	d143      	bne.n	800e266 <_malloc_r+0xd6>
 800e1de:	2c00      	cmp	r4, #0
 800e1e0:	d04b      	beq.n	800e27a <_malloc_r+0xea>
 800e1e2:	6823      	ldr	r3, [r4, #0]
 800e1e4:	4639      	mov	r1, r7
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	eb04 0903 	add.w	r9, r4, r3
 800e1ec:	f000 fb40 	bl	800e870 <_sbrk_r>
 800e1f0:	4581      	cmp	r9, r0
 800e1f2:	d142      	bne.n	800e27a <_malloc_r+0xea>
 800e1f4:	6821      	ldr	r1, [r4, #0]
 800e1f6:	1a6d      	subs	r5, r5, r1
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	4630      	mov	r0, r6
 800e1fc:	f7ff ffa6 	bl	800e14c <sbrk_aligned>
 800e200:	3001      	adds	r0, #1
 800e202:	d03a      	beq.n	800e27a <_malloc_r+0xea>
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	442b      	add	r3, r5
 800e208:	6023      	str	r3, [r4, #0]
 800e20a:	f8d8 3000 	ldr.w	r3, [r8]
 800e20e:	685a      	ldr	r2, [r3, #4]
 800e210:	bb62      	cbnz	r2, 800e26c <_malloc_r+0xdc>
 800e212:	f8c8 7000 	str.w	r7, [r8]
 800e216:	e00f      	b.n	800e238 <_malloc_r+0xa8>
 800e218:	6822      	ldr	r2, [r4, #0]
 800e21a:	1b52      	subs	r2, r2, r5
 800e21c:	d420      	bmi.n	800e260 <_malloc_r+0xd0>
 800e21e:	2a0b      	cmp	r2, #11
 800e220:	d917      	bls.n	800e252 <_malloc_r+0xc2>
 800e222:	1961      	adds	r1, r4, r5
 800e224:	42a3      	cmp	r3, r4
 800e226:	6025      	str	r5, [r4, #0]
 800e228:	bf18      	it	ne
 800e22a:	6059      	strne	r1, [r3, #4]
 800e22c:	6863      	ldr	r3, [r4, #4]
 800e22e:	bf08      	it	eq
 800e230:	f8c8 1000 	streq.w	r1, [r8]
 800e234:	5162      	str	r2, [r4, r5]
 800e236:	604b      	str	r3, [r1, #4]
 800e238:	4630      	mov	r0, r6
 800e23a:	f000 f82f 	bl	800e29c <__malloc_unlock>
 800e23e:	f104 000b 	add.w	r0, r4, #11
 800e242:	1d23      	adds	r3, r4, #4
 800e244:	f020 0007 	bic.w	r0, r0, #7
 800e248:	1ac2      	subs	r2, r0, r3
 800e24a:	bf1c      	itt	ne
 800e24c:	1a1b      	subne	r3, r3, r0
 800e24e:	50a3      	strne	r3, [r4, r2]
 800e250:	e7af      	b.n	800e1b2 <_malloc_r+0x22>
 800e252:	6862      	ldr	r2, [r4, #4]
 800e254:	42a3      	cmp	r3, r4
 800e256:	bf0c      	ite	eq
 800e258:	f8c8 2000 	streq.w	r2, [r8]
 800e25c:	605a      	strne	r2, [r3, #4]
 800e25e:	e7eb      	b.n	800e238 <_malloc_r+0xa8>
 800e260:	4623      	mov	r3, r4
 800e262:	6864      	ldr	r4, [r4, #4]
 800e264:	e7ae      	b.n	800e1c4 <_malloc_r+0x34>
 800e266:	463c      	mov	r4, r7
 800e268:	687f      	ldr	r7, [r7, #4]
 800e26a:	e7b6      	b.n	800e1da <_malloc_r+0x4a>
 800e26c:	461a      	mov	r2, r3
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	42a3      	cmp	r3, r4
 800e272:	d1fb      	bne.n	800e26c <_malloc_r+0xdc>
 800e274:	2300      	movs	r3, #0
 800e276:	6053      	str	r3, [r2, #4]
 800e278:	e7de      	b.n	800e238 <_malloc_r+0xa8>
 800e27a:	230c      	movs	r3, #12
 800e27c:	6033      	str	r3, [r6, #0]
 800e27e:	4630      	mov	r0, r6
 800e280:	f000 f80c 	bl	800e29c <__malloc_unlock>
 800e284:	e794      	b.n	800e1b0 <_malloc_r+0x20>
 800e286:	6005      	str	r5, [r0, #0]
 800e288:	e7d6      	b.n	800e238 <_malloc_r+0xa8>
 800e28a:	bf00      	nop
 800e28c:	20001b84 	.word	0x20001b84

0800e290 <__malloc_lock>:
 800e290:	4801      	ldr	r0, [pc, #4]	@ (800e298 <__malloc_lock+0x8>)
 800e292:	f7ff bf01 	b.w	800e098 <__retarget_lock_acquire_recursive>
 800e296:	bf00      	nop
 800e298:	20001b7c 	.word	0x20001b7c

0800e29c <__malloc_unlock>:
 800e29c:	4801      	ldr	r0, [pc, #4]	@ (800e2a4 <__malloc_unlock+0x8>)
 800e29e:	f7ff befc 	b.w	800e09a <__retarget_lock_release_recursive>
 800e2a2:	bf00      	nop
 800e2a4:	20001b7c 	.word	0x20001b7c

0800e2a8 <__ssputs_r>:
 800e2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ac:	688e      	ldr	r6, [r1, #8]
 800e2ae:	461f      	mov	r7, r3
 800e2b0:	42be      	cmp	r6, r7
 800e2b2:	680b      	ldr	r3, [r1, #0]
 800e2b4:	4682      	mov	sl, r0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	4690      	mov	r8, r2
 800e2ba:	d82d      	bhi.n	800e318 <__ssputs_r+0x70>
 800e2bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2c4:	d026      	beq.n	800e314 <__ssputs_r+0x6c>
 800e2c6:	6965      	ldr	r5, [r4, #20]
 800e2c8:	6909      	ldr	r1, [r1, #16]
 800e2ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2ce:	eba3 0901 	sub.w	r9, r3, r1
 800e2d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2d6:	1c7b      	adds	r3, r7, #1
 800e2d8:	444b      	add	r3, r9
 800e2da:	106d      	asrs	r5, r5, #1
 800e2dc:	429d      	cmp	r5, r3
 800e2de:	bf38      	it	cc
 800e2e0:	461d      	movcc	r5, r3
 800e2e2:	0553      	lsls	r3, r2, #21
 800e2e4:	d527      	bpl.n	800e336 <__ssputs_r+0x8e>
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	f7ff ff52 	bl	800e190 <_malloc_r>
 800e2ec:	4606      	mov	r6, r0
 800e2ee:	b360      	cbz	r0, 800e34a <__ssputs_r+0xa2>
 800e2f0:	6921      	ldr	r1, [r4, #16]
 800e2f2:	464a      	mov	r2, r9
 800e2f4:	f7ff fed2 	bl	800e09c <memcpy>
 800e2f8:	89a3      	ldrh	r3, [r4, #12]
 800e2fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e2fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e302:	81a3      	strh	r3, [r4, #12]
 800e304:	6126      	str	r6, [r4, #16]
 800e306:	6165      	str	r5, [r4, #20]
 800e308:	444e      	add	r6, r9
 800e30a:	eba5 0509 	sub.w	r5, r5, r9
 800e30e:	6026      	str	r6, [r4, #0]
 800e310:	60a5      	str	r5, [r4, #8]
 800e312:	463e      	mov	r6, r7
 800e314:	42be      	cmp	r6, r7
 800e316:	d900      	bls.n	800e31a <__ssputs_r+0x72>
 800e318:	463e      	mov	r6, r7
 800e31a:	6820      	ldr	r0, [r4, #0]
 800e31c:	4632      	mov	r2, r6
 800e31e:	4641      	mov	r1, r8
 800e320:	f7ff fe6e 	bl	800e000 <memmove>
 800e324:	68a3      	ldr	r3, [r4, #8]
 800e326:	1b9b      	subs	r3, r3, r6
 800e328:	60a3      	str	r3, [r4, #8]
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	4433      	add	r3, r6
 800e32e:	6023      	str	r3, [r4, #0]
 800e330:	2000      	movs	r0, #0
 800e332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e336:	462a      	mov	r2, r5
 800e338:	f000 faaa 	bl	800e890 <_realloc_r>
 800e33c:	4606      	mov	r6, r0
 800e33e:	2800      	cmp	r0, #0
 800e340:	d1e0      	bne.n	800e304 <__ssputs_r+0x5c>
 800e342:	6921      	ldr	r1, [r4, #16]
 800e344:	4650      	mov	r0, sl
 800e346:	f7ff feb7 	bl	800e0b8 <_free_r>
 800e34a:	230c      	movs	r3, #12
 800e34c:	f8ca 3000 	str.w	r3, [sl]
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e356:	81a3      	strh	r3, [r4, #12]
 800e358:	f04f 30ff 	mov.w	r0, #4294967295
 800e35c:	e7e9      	b.n	800e332 <__ssputs_r+0x8a>
	...

0800e360 <_svfiprintf_r>:
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	4698      	mov	r8, r3
 800e366:	898b      	ldrh	r3, [r1, #12]
 800e368:	061b      	lsls	r3, r3, #24
 800e36a:	b09d      	sub	sp, #116	@ 0x74
 800e36c:	4607      	mov	r7, r0
 800e36e:	460d      	mov	r5, r1
 800e370:	4614      	mov	r4, r2
 800e372:	d510      	bpl.n	800e396 <_svfiprintf_r+0x36>
 800e374:	690b      	ldr	r3, [r1, #16]
 800e376:	b973      	cbnz	r3, 800e396 <_svfiprintf_r+0x36>
 800e378:	2140      	movs	r1, #64	@ 0x40
 800e37a:	f7ff ff09 	bl	800e190 <_malloc_r>
 800e37e:	6028      	str	r0, [r5, #0]
 800e380:	6128      	str	r0, [r5, #16]
 800e382:	b930      	cbnz	r0, 800e392 <_svfiprintf_r+0x32>
 800e384:	230c      	movs	r3, #12
 800e386:	603b      	str	r3, [r7, #0]
 800e388:	f04f 30ff 	mov.w	r0, #4294967295
 800e38c:	b01d      	add	sp, #116	@ 0x74
 800e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e392:	2340      	movs	r3, #64	@ 0x40
 800e394:	616b      	str	r3, [r5, #20]
 800e396:	2300      	movs	r3, #0
 800e398:	9309      	str	r3, [sp, #36]	@ 0x24
 800e39a:	2320      	movs	r3, #32
 800e39c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3a4:	2330      	movs	r3, #48	@ 0x30
 800e3a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e544 <_svfiprintf_r+0x1e4>
 800e3aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3ae:	f04f 0901 	mov.w	r9, #1
 800e3b2:	4623      	mov	r3, r4
 800e3b4:	469a      	mov	sl, r3
 800e3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ba:	b10a      	cbz	r2, 800e3c0 <_svfiprintf_r+0x60>
 800e3bc:	2a25      	cmp	r2, #37	@ 0x25
 800e3be:	d1f9      	bne.n	800e3b4 <_svfiprintf_r+0x54>
 800e3c0:	ebba 0b04 	subs.w	fp, sl, r4
 800e3c4:	d00b      	beq.n	800e3de <_svfiprintf_r+0x7e>
 800e3c6:	465b      	mov	r3, fp
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	4629      	mov	r1, r5
 800e3cc:	4638      	mov	r0, r7
 800e3ce:	f7ff ff6b 	bl	800e2a8 <__ssputs_r>
 800e3d2:	3001      	adds	r0, #1
 800e3d4:	f000 80a7 	beq.w	800e526 <_svfiprintf_r+0x1c6>
 800e3d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3da:	445a      	add	r2, fp
 800e3dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3de:	f89a 3000 	ldrb.w	r3, [sl]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 809f 	beq.w	800e526 <_svfiprintf_r+0x1c6>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3f2:	f10a 0a01 	add.w	sl, sl, #1
 800e3f6:	9304      	str	r3, [sp, #16]
 800e3f8:	9307      	str	r3, [sp, #28]
 800e3fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800e400:	4654      	mov	r4, sl
 800e402:	2205      	movs	r2, #5
 800e404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e408:	484e      	ldr	r0, [pc, #312]	@ (800e544 <_svfiprintf_r+0x1e4>)
 800e40a:	f7f1 fee9 	bl	80001e0 <memchr>
 800e40e:	9a04      	ldr	r2, [sp, #16]
 800e410:	b9d8      	cbnz	r0, 800e44a <_svfiprintf_r+0xea>
 800e412:	06d0      	lsls	r0, r2, #27
 800e414:	bf44      	itt	mi
 800e416:	2320      	movmi	r3, #32
 800e418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e41c:	0711      	lsls	r1, r2, #28
 800e41e:	bf44      	itt	mi
 800e420:	232b      	movmi	r3, #43	@ 0x2b
 800e422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e426:	f89a 3000 	ldrb.w	r3, [sl]
 800e42a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e42c:	d015      	beq.n	800e45a <_svfiprintf_r+0xfa>
 800e42e:	9a07      	ldr	r2, [sp, #28]
 800e430:	4654      	mov	r4, sl
 800e432:	2000      	movs	r0, #0
 800e434:	f04f 0c0a 	mov.w	ip, #10
 800e438:	4621      	mov	r1, r4
 800e43a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e43e:	3b30      	subs	r3, #48	@ 0x30
 800e440:	2b09      	cmp	r3, #9
 800e442:	d94b      	bls.n	800e4dc <_svfiprintf_r+0x17c>
 800e444:	b1b0      	cbz	r0, 800e474 <_svfiprintf_r+0x114>
 800e446:	9207      	str	r2, [sp, #28]
 800e448:	e014      	b.n	800e474 <_svfiprintf_r+0x114>
 800e44a:	eba0 0308 	sub.w	r3, r0, r8
 800e44e:	fa09 f303 	lsl.w	r3, r9, r3
 800e452:	4313      	orrs	r3, r2
 800e454:	9304      	str	r3, [sp, #16]
 800e456:	46a2      	mov	sl, r4
 800e458:	e7d2      	b.n	800e400 <_svfiprintf_r+0xa0>
 800e45a:	9b03      	ldr	r3, [sp, #12]
 800e45c:	1d19      	adds	r1, r3, #4
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	9103      	str	r1, [sp, #12]
 800e462:	2b00      	cmp	r3, #0
 800e464:	bfbb      	ittet	lt
 800e466:	425b      	neglt	r3, r3
 800e468:	f042 0202 	orrlt.w	r2, r2, #2
 800e46c:	9307      	strge	r3, [sp, #28]
 800e46e:	9307      	strlt	r3, [sp, #28]
 800e470:	bfb8      	it	lt
 800e472:	9204      	strlt	r2, [sp, #16]
 800e474:	7823      	ldrb	r3, [r4, #0]
 800e476:	2b2e      	cmp	r3, #46	@ 0x2e
 800e478:	d10a      	bne.n	800e490 <_svfiprintf_r+0x130>
 800e47a:	7863      	ldrb	r3, [r4, #1]
 800e47c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e47e:	d132      	bne.n	800e4e6 <_svfiprintf_r+0x186>
 800e480:	9b03      	ldr	r3, [sp, #12]
 800e482:	1d1a      	adds	r2, r3, #4
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	9203      	str	r2, [sp, #12]
 800e488:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e48c:	3402      	adds	r4, #2
 800e48e:	9305      	str	r3, [sp, #20]
 800e490:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e554 <_svfiprintf_r+0x1f4>
 800e494:	7821      	ldrb	r1, [r4, #0]
 800e496:	2203      	movs	r2, #3
 800e498:	4650      	mov	r0, sl
 800e49a:	f7f1 fea1 	bl	80001e0 <memchr>
 800e49e:	b138      	cbz	r0, 800e4b0 <_svfiprintf_r+0x150>
 800e4a0:	9b04      	ldr	r3, [sp, #16]
 800e4a2:	eba0 000a 	sub.w	r0, r0, sl
 800e4a6:	2240      	movs	r2, #64	@ 0x40
 800e4a8:	4082      	lsls	r2, r0
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	3401      	adds	r4, #1
 800e4ae:	9304      	str	r3, [sp, #16]
 800e4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4b4:	4824      	ldr	r0, [pc, #144]	@ (800e548 <_svfiprintf_r+0x1e8>)
 800e4b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4ba:	2206      	movs	r2, #6
 800e4bc:	f7f1 fe90 	bl	80001e0 <memchr>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d036      	beq.n	800e532 <_svfiprintf_r+0x1d2>
 800e4c4:	4b21      	ldr	r3, [pc, #132]	@ (800e54c <_svfiprintf_r+0x1ec>)
 800e4c6:	bb1b      	cbnz	r3, 800e510 <_svfiprintf_r+0x1b0>
 800e4c8:	9b03      	ldr	r3, [sp, #12]
 800e4ca:	3307      	adds	r3, #7
 800e4cc:	f023 0307 	bic.w	r3, r3, #7
 800e4d0:	3308      	adds	r3, #8
 800e4d2:	9303      	str	r3, [sp, #12]
 800e4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d6:	4433      	add	r3, r6
 800e4d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4da:	e76a      	b.n	800e3b2 <_svfiprintf_r+0x52>
 800e4dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4e0:	460c      	mov	r4, r1
 800e4e2:	2001      	movs	r0, #1
 800e4e4:	e7a8      	b.n	800e438 <_svfiprintf_r+0xd8>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	3401      	adds	r4, #1
 800e4ea:	9305      	str	r3, [sp, #20]
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	f04f 0c0a 	mov.w	ip, #10
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4f8:	3a30      	subs	r2, #48	@ 0x30
 800e4fa:	2a09      	cmp	r2, #9
 800e4fc:	d903      	bls.n	800e506 <_svfiprintf_r+0x1a6>
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d0c6      	beq.n	800e490 <_svfiprintf_r+0x130>
 800e502:	9105      	str	r1, [sp, #20]
 800e504:	e7c4      	b.n	800e490 <_svfiprintf_r+0x130>
 800e506:	fb0c 2101 	mla	r1, ip, r1, r2
 800e50a:	4604      	mov	r4, r0
 800e50c:	2301      	movs	r3, #1
 800e50e:	e7f0      	b.n	800e4f2 <_svfiprintf_r+0x192>
 800e510:	ab03      	add	r3, sp, #12
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	462a      	mov	r2, r5
 800e516:	4b0e      	ldr	r3, [pc, #56]	@ (800e550 <_svfiprintf_r+0x1f0>)
 800e518:	a904      	add	r1, sp, #16
 800e51a:	4638      	mov	r0, r7
 800e51c:	f3af 8000 	nop.w
 800e520:	1c42      	adds	r2, r0, #1
 800e522:	4606      	mov	r6, r0
 800e524:	d1d6      	bne.n	800e4d4 <_svfiprintf_r+0x174>
 800e526:	89ab      	ldrh	r3, [r5, #12]
 800e528:	065b      	lsls	r3, r3, #25
 800e52a:	f53f af2d 	bmi.w	800e388 <_svfiprintf_r+0x28>
 800e52e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e530:	e72c      	b.n	800e38c <_svfiprintf_r+0x2c>
 800e532:	ab03      	add	r3, sp, #12
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	462a      	mov	r2, r5
 800e538:	4b05      	ldr	r3, [pc, #20]	@ (800e550 <_svfiprintf_r+0x1f0>)
 800e53a:	a904      	add	r1, sp, #16
 800e53c:	4638      	mov	r0, r7
 800e53e:	f000 f879 	bl	800e634 <_printf_i>
 800e542:	e7ed      	b.n	800e520 <_svfiprintf_r+0x1c0>
 800e544:	0800efb8 	.word	0x0800efb8
 800e548:	0800efc2 	.word	0x0800efc2
 800e54c:	00000000 	.word	0x00000000
 800e550:	0800e2a9 	.word	0x0800e2a9
 800e554:	0800efbe 	.word	0x0800efbe

0800e558 <_printf_common>:
 800e558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e55c:	4616      	mov	r6, r2
 800e55e:	4698      	mov	r8, r3
 800e560:	688a      	ldr	r2, [r1, #8]
 800e562:	690b      	ldr	r3, [r1, #16]
 800e564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e568:	4293      	cmp	r3, r2
 800e56a:	bfb8      	it	lt
 800e56c:	4613      	movlt	r3, r2
 800e56e:	6033      	str	r3, [r6, #0]
 800e570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e574:	4607      	mov	r7, r0
 800e576:	460c      	mov	r4, r1
 800e578:	b10a      	cbz	r2, 800e57e <_printf_common+0x26>
 800e57a:	3301      	adds	r3, #1
 800e57c:	6033      	str	r3, [r6, #0]
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	0699      	lsls	r1, r3, #26
 800e582:	bf42      	ittt	mi
 800e584:	6833      	ldrmi	r3, [r6, #0]
 800e586:	3302      	addmi	r3, #2
 800e588:	6033      	strmi	r3, [r6, #0]
 800e58a:	6825      	ldr	r5, [r4, #0]
 800e58c:	f015 0506 	ands.w	r5, r5, #6
 800e590:	d106      	bne.n	800e5a0 <_printf_common+0x48>
 800e592:	f104 0a19 	add.w	sl, r4, #25
 800e596:	68e3      	ldr	r3, [r4, #12]
 800e598:	6832      	ldr	r2, [r6, #0]
 800e59a:	1a9b      	subs	r3, r3, r2
 800e59c:	42ab      	cmp	r3, r5
 800e59e:	dc26      	bgt.n	800e5ee <_printf_common+0x96>
 800e5a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5a4:	6822      	ldr	r2, [r4, #0]
 800e5a6:	3b00      	subs	r3, #0
 800e5a8:	bf18      	it	ne
 800e5aa:	2301      	movne	r3, #1
 800e5ac:	0692      	lsls	r2, r2, #26
 800e5ae:	d42b      	bmi.n	800e608 <_printf_common+0xb0>
 800e5b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5b4:	4641      	mov	r1, r8
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	47c8      	blx	r9
 800e5ba:	3001      	adds	r0, #1
 800e5bc:	d01e      	beq.n	800e5fc <_printf_common+0xa4>
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	6922      	ldr	r2, [r4, #16]
 800e5c2:	f003 0306 	and.w	r3, r3, #6
 800e5c6:	2b04      	cmp	r3, #4
 800e5c8:	bf02      	ittt	eq
 800e5ca:	68e5      	ldreq	r5, [r4, #12]
 800e5cc:	6833      	ldreq	r3, [r6, #0]
 800e5ce:	1aed      	subeq	r5, r5, r3
 800e5d0:	68a3      	ldr	r3, [r4, #8]
 800e5d2:	bf0c      	ite	eq
 800e5d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5d8:	2500      	movne	r5, #0
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	bfc4      	itt	gt
 800e5de:	1a9b      	subgt	r3, r3, r2
 800e5e0:	18ed      	addgt	r5, r5, r3
 800e5e2:	2600      	movs	r6, #0
 800e5e4:	341a      	adds	r4, #26
 800e5e6:	42b5      	cmp	r5, r6
 800e5e8:	d11a      	bne.n	800e620 <_printf_common+0xc8>
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	e008      	b.n	800e600 <_printf_common+0xa8>
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	4652      	mov	r2, sl
 800e5f2:	4641      	mov	r1, r8
 800e5f4:	4638      	mov	r0, r7
 800e5f6:	47c8      	blx	r9
 800e5f8:	3001      	adds	r0, #1
 800e5fa:	d103      	bne.n	800e604 <_printf_common+0xac>
 800e5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e604:	3501      	adds	r5, #1
 800e606:	e7c6      	b.n	800e596 <_printf_common+0x3e>
 800e608:	18e1      	adds	r1, r4, r3
 800e60a:	1c5a      	adds	r2, r3, #1
 800e60c:	2030      	movs	r0, #48	@ 0x30
 800e60e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e612:	4422      	add	r2, r4
 800e614:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e618:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e61c:	3302      	adds	r3, #2
 800e61e:	e7c7      	b.n	800e5b0 <_printf_common+0x58>
 800e620:	2301      	movs	r3, #1
 800e622:	4622      	mov	r2, r4
 800e624:	4641      	mov	r1, r8
 800e626:	4638      	mov	r0, r7
 800e628:	47c8      	blx	r9
 800e62a:	3001      	adds	r0, #1
 800e62c:	d0e6      	beq.n	800e5fc <_printf_common+0xa4>
 800e62e:	3601      	adds	r6, #1
 800e630:	e7d9      	b.n	800e5e6 <_printf_common+0x8e>
	...

0800e634 <_printf_i>:
 800e634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e638:	7e0f      	ldrb	r7, [r1, #24]
 800e63a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e63c:	2f78      	cmp	r7, #120	@ 0x78
 800e63e:	4691      	mov	r9, r2
 800e640:	4680      	mov	r8, r0
 800e642:	460c      	mov	r4, r1
 800e644:	469a      	mov	sl, r3
 800e646:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e64a:	d807      	bhi.n	800e65c <_printf_i+0x28>
 800e64c:	2f62      	cmp	r7, #98	@ 0x62
 800e64e:	d80a      	bhi.n	800e666 <_printf_i+0x32>
 800e650:	2f00      	cmp	r7, #0
 800e652:	f000 80d1 	beq.w	800e7f8 <_printf_i+0x1c4>
 800e656:	2f58      	cmp	r7, #88	@ 0x58
 800e658:	f000 80b8 	beq.w	800e7cc <_printf_i+0x198>
 800e65c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e660:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e664:	e03a      	b.n	800e6dc <_printf_i+0xa8>
 800e666:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e66a:	2b15      	cmp	r3, #21
 800e66c:	d8f6      	bhi.n	800e65c <_printf_i+0x28>
 800e66e:	a101      	add	r1, pc, #4	@ (adr r1, 800e674 <_printf_i+0x40>)
 800e670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e674:	0800e6cd 	.word	0x0800e6cd
 800e678:	0800e6e1 	.word	0x0800e6e1
 800e67c:	0800e65d 	.word	0x0800e65d
 800e680:	0800e65d 	.word	0x0800e65d
 800e684:	0800e65d 	.word	0x0800e65d
 800e688:	0800e65d 	.word	0x0800e65d
 800e68c:	0800e6e1 	.word	0x0800e6e1
 800e690:	0800e65d 	.word	0x0800e65d
 800e694:	0800e65d 	.word	0x0800e65d
 800e698:	0800e65d 	.word	0x0800e65d
 800e69c:	0800e65d 	.word	0x0800e65d
 800e6a0:	0800e7df 	.word	0x0800e7df
 800e6a4:	0800e70b 	.word	0x0800e70b
 800e6a8:	0800e799 	.word	0x0800e799
 800e6ac:	0800e65d 	.word	0x0800e65d
 800e6b0:	0800e65d 	.word	0x0800e65d
 800e6b4:	0800e801 	.word	0x0800e801
 800e6b8:	0800e65d 	.word	0x0800e65d
 800e6bc:	0800e70b 	.word	0x0800e70b
 800e6c0:	0800e65d 	.word	0x0800e65d
 800e6c4:	0800e65d 	.word	0x0800e65d
 800e6c8:	0800e7a1 	.word	0x0800e7a1
 800e6cc:	6833      	ldr	r3, [r6, #0]
 800e6ce:	1d1a      	adds	r2, r3, #4
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	6032      	str	r2, [r6, #0]
 800e6d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e09c      	b.n	800e81a <_printf_i+0x1e6>
 800e6e0:	6833      	ldr	r3, [r6, #0]
 800e6e2:	6820      	ldr	r0, [r4, #0]
 800e6e4:	1d19      	adds	r1, r3, #4
 800e6e6:	6031      	str	r1, [r6, #0]
 800e6e8:	0606      	lsls	r6, r0, #24
 800e6ea:	d501      	bpl.n	800e6f0 <_printf_i+0xbc>
 800e6ec:	681d      	ldr	r5, [r3, #0]
 800e6ee:	e003      	b.n	800e6f8 <_printf_i+0xc4>
 800e6f0:	0645      	lsls	r5, r0, #25
 800e6f2:	d5fb      	bpl.n	800e6ec <_printf_i+0xb8>
 800e6f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e6f8:	2d00      	cmp	r5, #0
 800e6fa:	da03      	bge.n	800e704 <_printf_i+0xd0>
 800e6fc:	232d      	movs	r3, #45	@ 0x2d
 800e6fe:	426d      	negs	r5, r5
 800e700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e704:	4858      	ldr	r0, [pc, #352]	@ (800e868 <_printf_i+0x234>)
 800e706:	230a      	movs	r3, #10
 800e708:	e011      	b.n	800e72e <_printf_i+0xfa>
 800e70a:	6821      	ldr	r1, [r4, #0]
 800e70c:	6833      	ldr	r3, [r6, #0]
 800e70e:	0608      	lsls	r0, r1, #24
 800e710:	f853 5b04 	ldr.w	r5, [r3], #4
 800e714:	d402      	bmi.n	800e71c <_printf_i+0xe8>
 800e716:	0649      	lsls	r1, r1, #25
 800e718:	bf48      	it	mi
 800e71a:	b2ad      	uxthmi	r5, r5
 800e71c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e71e:	4852      	ldr	r0, [pc, #328]	@ (800e868 <_printf_i+0x234>)
 800e720:	6033      	str	r3, [r6, #0]
 800e722:	bf14      	ite	ne
 800e724:	230a      	movne	r3, #10
 800e726:	2308      	moveq	r3, #8
 800e728:	2100      	movs	r1, #0
 800e72a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e72e:	6866      	ldr	r6, [r4, #4]
 800e730:	60a6      	str	r6, [r4, #8]
 800e732:	2e00      	cmp	r6, #0
 800e734:	db05      	blt.n	800e742 <_printf_i+0x10e>
 800e736:	6821      	ldr	r1, [r4, #0]
 800e738:	432e      	orrs	r6, r5
 800e73a:	f021 0104 	bic.w	r1, r1, #4
 800e73e:	6021      	str	r1, [r4, #0]
 800e740:	d04b      	beq.n	800e7da <_printf_i+0x1a6>
 800e742:	4616      	mov	r6, r2
 800e744:	fbb5 f1f3 	udiv	r1, r5, r3
 800e748:	fb03 5711 	mls	r7, r3, r1, r5
 800e74c:	5dc7      	ldrb	r7, [r0, r7]
 800e74e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e752:	462f      	mov	r7, r5
 800e754:	42bb      	cmp	r3, r7
 800e756:	460d      	mov	r5, r1
 800e758:	d9f4      	bls.n	800e744 <_printf_i+0x110>
 800e75a:	2b08      	cmp	r3, #8
 800e75c:	d10b      	bne.n	800e776 <_printf_i+0x142>
 800e75e:	6823      	ldr	r3, [r4, #0]
 800e760:	07df      	lsls	r7, r3, #31
 800e762:	d508      	bpl.n	800e776 <_printf_i+0x142>
 800e764:	6923      	ldr	r3, [r4, #16]
 800e766:	6861      	ldr	r1, [r4, #4]
 800e768:	4299      	cmp	r1, r3
 800e76a:	bfde      	ittt	le
 800e76c:	2330      	movle	r3, #48	@ 0x30
 800e76e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e772:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e776:	1b92      	subs	r2, r2, r6
 800e778:	6122      	str	r2, [r4, #16]
 800e77a:	f8cd a000 	str.w	sl, [sp]
 800e77e:	464b      	mov	r3, r9
 800e780:	aa03      	add	r2, sp, #12
 800e782:	4621      	mov	r1, r4
 800e784:	4640      	mov	r0, r8
 800e786:	f7ff fee7 	bl	800e558 <_printf_common>
 800e78a:	3001      	adds	r0, #1
 800e78c:	d14a      	bne.n	800e824 <_printf_i+0x1f0>
 800e78e:	f04f 30ff 	mov.w	r0, #4294967295
 800e792:	b004      	add	sp, #16
 800e794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	f043 0320 	orr.w	r3, r3, #32
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	4832      	ldr	r0, [pc, #200]	@ (800e86c <_printf_i+0x238>)
 800e7a2:	2778      	movs	r7, #120	@ 0x78
 800e7a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7a8:	6823      	ldr	r3, [r4, #0]
 800e7aa:	6831      	ldr	r1, [r6, #0]
 800e7ac:	061f      	lsls	r7, r3, #24
 800e7ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7b2:	d402      	bmi.n	800e7ba <_printf_i+0x186>
 800e7b4:	065f      	lsls	r7, r3, #25
 800e7b6:	bf48      	it	mi
 800e7b8:	b2ad      	uxthmi	r5, r5
 800e7ba:	6031      	str	r1, [r6, #0]
 800e7bc:	07d9      	lsls	r1, r3, #31
 800e7be:	bf44      	itt	mi
 800e7c0:	f043 0320 	orrmi.w	r3, r3, #32
 800e7c4:	6023      	strmi	r3, [r4, #0]
 800e7c6:	b11d      	cbz	r5, 800e7d0 <_printf_i+0x19c>
 800e7c8:	2310      	movs	r3, #16
 800e7ca:	e7ad      	b.n	800e728 <_printf_i+0xf4>
 800e7cc:	4826      	ldr	r0, [pc, #152]	@ (800e868 <_printf_i+0x234>)
 800e7ce:	e7e9      	b.n	800e7a4 <_printf_i+0x170>
 800e7d0:	6823      	ldr	r3, [r4, #0]
 800e7d2:	f023 0320 	bic.w	r3, r3, #32
 800e7d6:	6023      	str	r3, [r4, #0]
 800e7d8:	e7f6      	b.n	800e7c8 <_printf_i+0x194>
 800e7da:	4616      	mov	r6, r2
 800e7dc:	e7bd      	b.n	800e75a <_printf_i+0x126>
 800e7de:	6833      	ldr	r3, [r6, #0]
 800e7e0:	6825      	ldr	r5, [r4, #0]
 800e7e2:	6961      	ldr	r1, [r4, #20]
 800e7e4:	1d18      	adds	r0, r3, #4
 800e7e6:	6030      	str	r0, [r6, #0]
 800e7e8:	062e      	lsls	r6, r5, #24
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	d501      	bpl.n	800e7f2 <_printf_i+0x1be>
 800e7ee:	6019      	str	r1, [r3, #0]
 800e7f0:	e002      	b.n	800e7f8 <_printf_i+0x1c4>
 800e7f2:	0668      	lsls	r0, r5, #25
 800e7f4:	d5fb      	bpl.n	800e7ee <_printf_i+0x1ba>
 800e7f6:	8019      	strh	r1, [r3, #0]
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	6123      	str	r3, [r4, #16]
 800e7fc:	4616      	mov	r6, r2
 800e7fe:	e7bc      	b.n	800e77a <_printf_i+0x146>
 800e800:	6833      	ldr	r3, [r6, #0]
 800e802:	1d1a      	adds	r2, r3, #4
 800e804:	6032      	str	r2, [r6, #0]
 800e806:	681e      	ldr	r6, [r3, #0]
 800e808:	6862      	ldr	r2, [r4, #4]
 800e80a:	2100      	movs	r1, #0
 800e80c:	4630      	mov	r0, r6
 800e80e:	f7f1 fce7 	bl	80001e0 <memchr>
 800e812:	b108      	cbz	r0, 800e818 <_printf_i+0x1e4>
 800e814:	1b80      	subs	r0, r0, r6
 800e816:	6060      	str	r0, [r4, #4]
 800e818:	6863      	ldr	r3, [r4, #4]
 800e81a:	6123      	str	r3, [r4, #16]
 800e81c:	2300      	movs	r3, #0
 800e81e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e822:	e7aa      	b.n	800e77a <_printf_i+0x146>
 800e824:	6923      	ldr	r3, [r4, #16]
 800e826:	4632      	mov	r2, r6
 800e828:	4649      	mov	r1, r9
 800e82a:	4640      	mov	r0, r8
 800e82c:	47d0      	blx	sl
 800e82e:	3001      	adds	r0, #1
 800e830:	d0ad      	beq.n	800e78e <_printf_i+0x15a>
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	079b      	lsls	r3, r3, #30
 800e836:	d413      	bmi.n	800e860 <_printf_i+0x22c>
 800e838:	68e0      	ldr	r0, [r4, #12]
 800e83a:	9b03      	ldr	r3, [sp, #12]
 800e83c:	4298      	cmp	r0, r3
 800e83e:	bfb8      	it	lt
 800e840:	4618      	movlt	r0, r3
 800e842:	e7a6      	b.n	800e792 <_printf_i+0x15e>
 800e844:	2301      	movs	r3, #1
 800e846:	4632      	mov	r2, r6
 800e848:	4649      	mov	r1, r9
 800e84a:	4640      	mov	r0, r8
 800e84c:	47d0      	blx	sl
 800e84e:	3001      	adds	r0, #1
 800e850:	d09d      	beq.n	800e78e <_printf_i+0x15a>
 800e852:	3501      	adds	r5, #1
 800e854:	68e3      	ldr	r3, [r4, #12]
 800e856:	9903      	ldr	r1, [sp, #12]
 800e858:	1a5b      	subs	r3, r3, r1
 800e85a:	42ab      	cmp	r3, r5
 800e85c:	dcf2      	bgt.n	800e844 <_printf_i+0x210>
 800e85e:	e7eb      	b.n	800e838 <_printf_i+0x204>
 800e860:	2500      	movs	r5, #0
 800e862:	f104 0619 	add.w	r6, r4, #25
 800e866:	e7f5      	b.n	800e854 <_printf_i+0x220>
 800e868:	0800efc9 	.word	0x0800efc9
 800e86c:	0800efda 	.word	0x0800efda

0800e870 <_sbrk_r>:
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4d06      	ldr	r5, [pc, #24]	@ (800e88c <_sbrk_r+0x1c>)
 800e874:	2300      	movs	r3, #0
 800e876:	4604      	mov	r4, r0
 800e878:	4608      	mov	r0, r1
 800e87a:	602b      	str	r3, [r5, #0]
 800e87c:	f7f4 f9a4 	bl	8002bc8 <_sbrk>
 800e880:	1c43      	adds	r3, r0, #1
 800e882:	d102      	bne.n	800e88a <_sbrk_r+0x1a>
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	b103      	cbz	r3, 800e88a <_sbrk_r+0x1a>
 800e888:	6023      	str	r3, [r4, #0]
 800e88a:	bd38      	pop	{r3, r4, r5, pc}
 800e88c:	20001b78 	.word	0x20001b78

0800e890 <_realloc_r>:
 800e890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e894:	4607      	mov	r7, r0
 800e896:	4614      	mov	r4, r2
 800e898:	460d      	mov	r5, r1
 800e89a:	b921      	cbnz	r1, 800e8a6 <_realloc_r+0x16>
 800e89c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a0:	4611      	mov	r1, r2
 800e8a2:	f7ff bc75 	b.w	800e190 <_malloc_r>
 800e8a6:	b92a      	cbnz	r2, 800e8b4 <_realloc_r+0x24>
 800e8a8:	f7ff fc06 	bl	800e0b8 <_free_r>
 800e8ac:	4625      	mov	r5, r4
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8b4:	f000 f81a 	bl	800e8ec <_malloc_usable_size_r>
 800e8b8:	4284      	cmp	r4, r0
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	d802      	bhi.n	800e8c4 <_realloc_r+0x34>
 800e8be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8c2:	d8f4      	bhi.n	800e8ae <_realloc_r+0x1e>
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	4638      	mov	r0, r7
 800e8c8:	f7ff fc62 	bl	800e190 <_malloc_r>
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	b908      	cbnz	r0, 800e8d4 <_realloc_r+0x44>
 800e8d0:	4645      	mov	r5, r8
 800e8d2:	e7ec      	b.n	800e8ae <_realloc_r+0x1e>
 800e8d4:	42b4      	cmp	r4, r6
 800e8d6:	4622      	mov	r2, r4
 800e8d8:	4629      	mov	r1, r5
 800e8da:	bf28      	it	cs
 800e8dc:	4632      	movcs	r2, r6
 800e8de:	f7ff fbdd 	bl	800e09c <memcpy>
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	f7ff fbe7 	bl	800e0b8 <_free_r>
 800e8ea:	e7f1      	b.n	800e8d0 <_realloc_r+0x40>

0800e8ec <_malloc_usable_size_r>:
 800e8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f0:	1f18      	subs	r0, r3, #4
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	bfbc      	itt	lt
 800e8f6:	580b      	ldrlt	r3, [r1, r0]
 800e8f8:	18c0      	addlt	r0, r0, r3
 800e8fa:	4770      	bx	lr

0800e8fc <_init>:
 800e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fe:	bf00      	nop
 800e900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e902:	bc08      	pop	{r3}
 800e904:	469e      	mov	lr, r3
 800e906:	4770      	bx	lr

0800e908 <_fini>:
 800e908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90a:	bf00      	nop
 800e90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e90e:	bc08      	pop	{r3}
 800e910:	469e      	mov	lr, r3
 800e912:	4770      	bx	lr
